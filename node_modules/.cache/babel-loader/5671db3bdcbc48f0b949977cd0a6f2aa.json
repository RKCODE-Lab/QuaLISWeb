{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, parentChildComboLoad, constructjsonOptionList, rearrangeDateFormatforUI, childComboLoadForEdit } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { getTreeByProduct } from './RegistrationAction';\nexport function getDynamicMasterCombo(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true),\n      childcolumnlist: childColumnList,\n      userinfo\n    });\n    let urlArray = [timeZoneService, actualService]; //const operation = fetchRecordParam.operation;\n    // if (operation === \"update\"){\n    //     const url = \"dynamicmaster/getActiveDynamicMasterById\";\n    //     urlArray.push(rsapi.post(url, {\n    //       [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\n    //     }));\n    // }\n\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      }; // if (operation === \"update\"){\n      //     selectedRecord = response[2].data;\n      // }\n\n      const newcomboData = parentChildComboLoad(columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          }\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n\n        return null;\n      });\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName,\n            operation\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === 1) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label].value;\n            const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = newcomboData.selectedRecord[Product[0].label] && newcomboData.selectedRecord[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: newcomboData.selectedRecord,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: newcomboData.selectedRecord,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 2) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = newcomboData.selectedRecord[InstrumentCategory[0].label] && newcomboData.selectedRecord[InstrumentCategory[0].label].value;\n            const ncategorybasedFlow = newcomboData.selectedRecord[InstrumentCategory[0].label] && newcomboData.selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = newcomboData.selectedRecord[Instrument[0].label] && newcomboData.selectedRecord[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: newcomboData.selectedRecord,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              }\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  loading: false,\n                  comboData: newcomboData.comboData,\n                  selectedRecord: newcomboData.selectedRecord,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === 3) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = newcomboData.selectedRecord[MaterialType[0].label] && newcomboData.selectedRecord[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = newcomboData.selectedRecord[MaterialCategory[0].label] && newcomboData.selectedRecord[MaterialCategory[0].label].value;\n                const ncategorybasedFlow = newcomboData.selectedRecord[MaterialCategory[0].label] && newcomboData.selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === 3) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = newcomboData.selectedRecord[Material[0].label] && newcomboData.selectedRecord[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n                    } else {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          timeZoneList,\n                          defaultTimeZone,\n                          masterData,\n                          ncontrolcode: editId,\n                          openModal,\n                          loading: false,\n                          comboData: newcomboData.comboData,\n                          selectedRecord: newcomboData.selectedRecord,\n                          comboComponents,\n                          withoutCombocomponent,\n                          openPortal,\n                          columnList,\n                          childColumnList,\n                          operation,\n                          screenName\n                        }\n                      });\n                    }\n                  }\n                } else {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      loading: false,\n                      comboData: newcomboData.comboData,\n                      selectedRecord: newcomboData.selectedRecord,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName\n                    }\n                  });\n                }\n              } else {\n                dispatch({\n                  type: DEFAULT_RETURN,\n                  payload: {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    loading: false,\n                    comboData: newcomboData.comboData,\n                    selectedRecord: newcomboData.selectedRecord,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    operation,\n                    screenName\n                  }\n                });\n              }\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                loading: false,\n                comboData: newcomboData.comboData,\n                selectedRecord: newcomboData.selectedRecord,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName\n              }\n            });\n          }\n        } else {}\n      }\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditDynamicMasterCombo(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    console.log(\"input:\", inputParam);\n    dispatch(initRequest(true));\n    const {\n      userInfo\n    } = { ...inputParam\n    };\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n    //     parentcolumnlist: columnList,\n    //     childcolumnlist: childColumnList,\n    //     userinfo: inputParam.userInfo\n    // })\n\n    const selectedMaster = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\n      \"userinfo\": inputParam.userInfo,\n      [inputParam.primaryKeyField]: inputParam.primaryKeyValue,\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList\n    });\n    urlArray = [timeZoneService, selectedMaster];\n    Axios.all(urlArray).then(response => {\n      // let selectedRecord = { ...response[1].data };\n      let selectedRecord = { ...response[1].data[\"EditData\"]\n      }; // selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\n\n      console.log(\"selectedRecord:\", selectedRecord);\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      };\n      const languagetypeCode = undefined;\n      const comboData = response[1].data;\n      delete comboData['EditData'];\n      let comboValues = {};\n\n      if (columnList.length > 0) {\n        columnList.map(x => {\n          if (x.inputtype === 'combo') {\n            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n              {\n                if (comboData[x.label].length > 0) {\n                  if (comboData[x.label][0].label === undefined) {\n                    const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    comboData[x.label] = optionList.get(\"OptionList\");\n                  } else {\n                    comboData[x.label] = comboData[x.label]; // const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\n                    //     x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\n                  }\n                } else {\n                  comboData[x.label] = [];\n                }\n\n                comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n              } else {\n              comboValues = {\n                \"comboData\": comboData\n              };\n            }\n          } else {\n            comboValues = {\n              comboData: comboData,\n              ...comboValues\n            };\n          }\n        });\n      } else {\n        comboValues = {\n          \"comboData\": comboData\n        };\n      }\n\n      if (withoutCombocomponent.length > 0) {\n        withoutCombocomponent.map(item => {\n          if (item.inputtype === \"date\") {\n            if (selectedRecord[item.label]) {\n              selectedRecord = { ...selectedRecord,\n                [item.label]: rearrangeDateFormatforUI(userInfo, selectedRecord[item.label])\n              };\n            }\n          }\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"update\",\n          screenName: inputParam.screenName,\n          timeZoneList,\n          defaultTimeZone,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          loading: false,\n          comboData: comboValues.comboData,\n          childColumnList,\n          comboComponents,\n          withoutCombocomponent,\n          columnList,\n          selectedId: inputParam.primaryKeyValue\n        }\n      });\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/DynamicMasterAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","intl","initRequest","constructOptionList","parentChildComboLoad","constructjsonOptionList","rearrangeDateFormatforUI","childComboLoadForEdit","Axios","getTreeByProduct","getDynamicMasterCombo","masterData","userinfo","editId","columnList","selectedRecord","childColumnList","comboComponents","withoutCombocomponent","openPortal","openModal","mapOfFilterRegData","preview","operation","screenName","dispatch","timeZoneService","post","actualService","parentcolumnlist","filter","x","inputtype","readonly","childcolumnlist","urlArray","all","then","response","timeZoneMap","data","undefined","timeZoneList","get","defaultTimeZone","label","stimezoneid","value","ntimezonecode","newcomboData","slanguagetypecode","comboData1","comboData","selectedRecord1","map","componentrow","mandatory","loadcurrentdate","Date","val","radiodefaultvalue","length","i","radioOptions","tags","text","type","payload","ncontrolcode","loading","nsampletypecode","ProductCategory","name","nproductcatcode","ncategorybasedFlow","inputParam","Product","nproductcode","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","catch","error","console","log","status","message","warn","getEditDynamicMasterCombo","userInfo","selectedMaster","primaryKeyField","primaryKeyValue","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","item","ncontrolCode","selectedId","formatMessage","id"],"mappings":"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","sourcesContent":["\r\nimport rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport {\r\n    constructOptionList, parentChildComboLoad, constructjsonOptionList,\r\n     rearrangeDateFormatforUI, childComboLoadForEdit\r\n} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct } from './RegistrationAction';\r\n\r\nexport function getDynamicMasterCombo(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation,\r\n    screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList.filter(x=>(x.inputtype!=='backendsearchfilter'&&x.inputtype!=='frontendsearchfilter')&&(x.readonly!==true)),\r\n            childcolumnlist: childColumnList,\r\n            userinfo\r\n        })\r\n        let urlArray = [timeZoneService, actualService];\r\n        //const operation = fetchRecordParam.operation;\r\n        // if (operation === \"update\"){\r\n        //     const url = \"dynamicmaster/getActiveDynamicMasterById\";\r\n        //     urlArray.push(rsapi.post(url, {\r\n        //       [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\r\n        //     }));\r\n        // }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                // if (operation === \"update\"){\r\n                //     selectedRecord = response[2].data;\r\n                // }\r\n                const newcomboData = parentChildComboLoad(columnList.filter(x=>(x.inputtype!=='backendsearchfilter'&&x.inputtype!=='frontendsearchfilter')&&(x.readonly!==true)), response[1].data, selectedRecord, childColumnList,\r\n                    withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                    ||componentrow.inputtype === \"checkbox\"\r\n                    ||componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if(componentrow['radiodefaultvalue']){\r\n                            if(componentrow.inputtype === \"checkbox\"){\r\n\r\n                                let val= ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                componentrow.radiodefaultvalue.length>0&& componentrow.radiodefaultvalue.map((x,i)=>{\r\n                                    val=val+ (i===componentrow.radiodefaultvalue.length-1?x.label: x.label+',')\r\n                                }) \r\n\r\n                                selectedRecord1[componentrow.label]= val\r\n\r\n                            }else if(componentrow.inputtype === \"predefineddropdown\"){\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                componentrow.radiodefaultvalue : \"\";\r\n                            }else{\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        }else{\r\n                            if(componentrow.inputtype === \"radio\"){\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n                          \r\n                        }\r\n                    return null;\r\n                })\r\n\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === 1) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] &&\r\n                                newcomboData.selectedRecord[ProductCategory[0].label].value\r\n                            const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label]\r\n                                && newcomboData.selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        newcomboData.selectedRecord,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = newcomboData.selectedRecord[Product[0].label]\r\n                                            && newcomboData.selectedRecord[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            newcomboData.selectedRecord,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: newcomboData.selectedRecord,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: newcomboData.selectedRecord,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 2) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = newcomboData.selectedRecord[InstrumentCategory[0].label] &&\r\n                                newcomboData.selectedRecord[InstrumentCategory[0].label].value\r\n                            const ncategorybasedFlow = newcomboData.selectedRecord[InstrumentCategory[0].label]\r\n                                && newcomboData.selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        newcomboData.selectedRecord,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = newcomboData.selectedRecord[Instrument[0].label]\r\n                                            && newcomboData.selectedRecord[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            newcomboData.selectedRecord,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: newcomboData.selectedRecord,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        loading: false,\r\n                                        comboData: newcomboData.comboData,\r\n                                        selectedRecord: newcomboData.selectedRecord,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName\r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === 3) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = newcomboData.selectedRecord[MaterialType[0].label] &&\r\n                                newcomboData.selectedRecord[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = newcomboData.selectedRecord[MaterialCategory[0].label] &&\r\n                                        newcomboData.selectedRecord[MaterialCategory[0].label].value\r\n                                    const ncategorybasedFlow = newcomboData.selectedRecord[MaterialCategory[0].label]\r\n                                        && newcomboData.selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === 3) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                newcomboData.selectedRecord,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = newcomboData.selectedRecord[Material[0].label]\r\n                                                    && newcomboData.selectedRecord[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    newcomboData.selectedRecord,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                dispatch({\r\n                                                    type: DEFAULT_RETURN,\r\n                                                    payload: {\r\n                                                        timeZoneList,\r\n                                                        defaultTimeZone,\r\n                                                        masterData,\r\n                                                        ncontrolcode: editId,\r\n                                                        openModal,\r\n                                                        loading: false,\r\n                                                        comboData: newcomboData.comboData,\r\n                                                        selectedRecord: newcomboData.selectedRecord,\r\n                                                        comboComponents,\r\n                                                        withoutCombocomponent,\r\n                                                        openPortal,\r\n                                                        columnList,\r\n                                                        childColumnList,\r\n                                                        operation,\r\n                                                        screenName\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                loading: false,\r\n                                                comboData: newcomboData.comboData,\r\n                                                selectedRecord: newcomboData.selectedRecord,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    dispatch({\r\n                                        type: DEFAULT_RETURN,\r\n                                        payload: {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            loading: false,\r\n                                            comboData: newcomboData.comboData,\r\n                                            selectedRecord: newcomboData.selectedRecord,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            operation,\r\n                                            screenName\r\n                                        }\r\n                                    })\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    loading: false,\r\n                                    comboData: newcomboData.comboData,\r\n                                    selectedRecord: newcomboData.selectedRecord,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getEditDynamicMasterCombo(inputParam, columnList,\r\n    selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        console.log(\"input:\", inputParam);\r\n        dispatch(initRequest(true));\r\n        const { userInfo } = { ...inputParam };\r\n\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        // const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n        //     parentcolumnlist: columnList,\r\n        //     childcolumnlist: childColumnList,\r\n        //     userinfo: inputParam.userInfo\r\n        // })\r\n        const selectedMaster = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\r\n            \"userinfo\": inputParam.userInfo,\r\n            [inputParam.primaryKeyField]: inputParam.primaryKeyValue,\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n        })\r\n\r\n        urlArray = [timeZoneService, selectedMaster]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n               // let selectedRecord = { ...response[1].data };\r\n                let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n                // selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n                console.log(\"selectedRecord:\", selectedRecord);\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode };\r\n\r\n                const languagetypeCode = undefined;\r\n                const comboData = response[1].data;\r\n                delete comboData['EditData']\r\n                let comboValues = {}\r\n                if (columnList.length > 0) {\r\n                    columnList.map(x => {\r\n                        if (x.inputtype === 'combo') {\r\n                            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                            {\r\n                                if (comboData[x.label].length > 0) {\r\n                                    if (comboData[x.label][0].label === undefined) {\r\n                                        const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        comboData[x.label] = optionList.get(\"OptionList\");\r\n                                    } else {\r\n                                        comboData[x.label] = comboData[x.label]\r\n                                        // const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                        //     x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                    }\r\n                                } else {\r\n                                    comboData[x.label] = []\r\n                                }\r\n\r\n                                comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                    childColumnList, withoutCombocomponent)\r\n                            } else {\r\n                                comboValues = {\r\n                                    \"comboData\": comboData,\r\n                                }\r\n                            }\r\n                        } else {\r\n                            comboValues = {\r\n                                comboData: comboData,\r\n                                ...comboValues\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    comboValues = {\r\n                        \"comboData\": comboData,\r\n                    }\r\n                }\r\n\r\n                if (withoutCombocomponent.length > 0) {\r\n                    withoutCombocomponent.map(item => {\r\n                        if (item.inputtype === \"date\") {\r\n                            if (selectedRecord[item.label]) {\r\n                                selectedRecord = { ...selectedRecord, [item.label]: rearrangeDateFormatforUI(userInfo, selectedRecord[item.label]) }\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        operation: \"update\",\r\n                        screenName: inputParam.screenName,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        loading: false,\r\n                        comboData: comboValues.comboData,\r\n                        childColumnList, comboComponents,\r\n                        withoutCombocomponent,\r\n                        columnList,\r\n                        selectedId: inputParam.primaryKeyValue\r\n\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}