{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import FormInput from'../../components/form-input/form-input.component';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{injectIntl}from'react-intl';var AddDashBoardTypes=function AddDashBoardTypes(props){//console.log(\"AddDashBoardTypes props:\",props);\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormInput,{label:props.intl.formatMessage({id:\"IDS_DASHBOARDTYPENAME\"}),name:\"sdashboardtypename\",type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event);},placeholder:props.intl.formatMessage({id:\"IDS_DASHBOARDTYPENAME\"}),value:props.selectedRecord?props.selectedRecord[\"sdashboardtypename\"]:\"\",isMandatory:true,required:true,maxLength:\"50\"}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_CHARTTYPE\"}),isSearchable:true,name:\"ncharttypecode\",isDisabled:false,placeholder:\"Please Select...\",isMandatory:true,isClearable:false,options:props.chartType,optionId:\"ncharttypecode\",optionValue:\"schartname\"//defaultValue={props.ncharttypecode || []}\n,value:props.selectedRecord.ncharttypecode?props.selectedRecord.ncharttypecode:\"\",onChange:function onChange(value){return props.handleChange(value,\"ncharttypecode\",\"ChartType\");},closeMenuOnSelect:true,alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_QUERY\"}),isSearchable:true,name:\"nsqlquerycode\",isDisabled:false,placeholder:\"Please Select...\",isMandatory:true,isClearable:false,options:props.sqlQuery,optionId:\"nsqlquerycode\",optionValue:\"ssqlqueryname\"//defaultValue={props.nsqlquerycode ? props.nsqlquerycode : \"\"}\n,value:props.selectedRecord.nsqlquerycode?props.selectedRecord.nsqlquerycode:\"\",onChange:function onChange(value){return props.handleChange(value,\"nsqlquerycode\",\"\");},closeMenuOnSelect:true,alphabeticalSort:true}))),/*#__PURE__*/React.createElement(Row,{className:\"mtop-4\"},/*#__PURE__*/React.createElement(Col,{md:12},props.ChartProperty&&props.ChartProperty.map(function(Property,index){return/*#__PURE__*/React.createElement(React.Fragment,null,Property.schartpropertyname===\"field\"||Property.schartpropertyname===\"nameField\"||Property.schartpropertyname===\"xFieldBubble\"?/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage(Property.schartpropertyname===\"xField\"||Property.schartpropertyname===\"xFieldBubble\"?{id:\"IDS_XSERIES\"}:Property.schartpropertyname===\"field\"?{id:\"IDS_CATAEGORYFIELD\"}:{id:\"IDS_VALUEFIELD\"}),isSearchable:true,name:Property.schartpropertyname,isDisabled:false,placeholder:\"Please Select...\",isMandatory:true,isClearable:false,options:Property.schartpropertyname===\"field\"||Property.schartpropertyname===\"xFieldBubble\"?props.SqlColumns?props.SqlColumns.xSeriesColumns||[]:[]:props.SqlColumns?props.SqlColumns.ySeriesColumns||[]:[],value:props.selectedRecord[Property.schartpropertyname]||[],onChange:function onChange(value){return props.handleChange(value,Property.schartpropertyname,Property.schartpropertyname);},closeMenuOnSelect:true}):/*#__PURE__*/React.createElement(React.Fragment,null,Property.schartpropertyname===\"yField\"?/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_YSERIES\"}),isSearchable:true,name:\"yColumnName\",isDisabled:false,placeholder:\"Please Select...\",isMandatory:true,isClearable:true,isMulti:true// options={props.ySeriesColumnList?props.ySeriesColumnList||[]:[]}\n,options:props.SqlColumns?props.SqlColumns.ySeriesColumns||[]:[]// optionId='ColumnName'\n// optionValue='ColumnName'\n// value={props.operation === \"update\" ? props.yValue : props.Value || []}\n,value:props.selectedRecord[\"yColumnName\"]||[],onChange:function onChange(value){return props.handleChange(value,\"yColumnName\",Property.schartpropertyname);},closeMenuOnSelect:false// alphabeticalSort={true}\n}):/*#__PURE__*/React.createElement(React.Fragment,null,Property.schartpropertyname===\"xField\"?/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_XSERIES\"}),isSearchable:true,name:\"xColumnName\",isDisabled:false,placeholder:\"Please Select...\",isMandatory:true,isClearable:false// options={props.xSeriesColumnList?props.xSeriesColumnList||[]:[]}\n,options:props.SqlColumns?props.SqlColumns.xSeriesColumns||[]:[]// optionId='ColumnName'\n// optionValue='ColumnName' // props.Value \n//   value={props.operation === \"update\" ? props.xValue : props.selectedRecord[\"xColumnName\"] || []}\n,value:props.selectedRecord[\"xColumnName\"]||[],onChange:function onChange(value){return props.handleChange(value,\"xColumnName\",Property.schartpropertyname);},closeMenuOnSelect:true// alphabeticalSort={true}\n}):/*#__PURE__*/React.createElement(React.Fragment,null,Property.schartpropertyname===\"yFieldBubble\"||Property.schartpropertyname===\"sizeField\"||Property.schartpropertyname===\"categoryField\"?/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage(Property.schartpropertyname===\"yFieldBubble\"?{id:\"IDS_YSERIES\"}:Property.schartpropertyname===\"sizeField\"?{id:\"IDS_SIZEFIELD\"}:{id:\"IDS_CATAEGORYFIELD\"}),isSearchable:true,name:Property.schartpropertyname,isDisabled:false,placeholder:\"Please Select...\",isMandatory:true,isClearable:true,isMulti:true,options:props.SqlColumns?Property.schartpropertyname===\"categoryField\"?props.SqlColumns.xSeriesColumns:props.SqlColumns.ySeriesColumns||[]:[],value:props.selectedRecord[Property.schartpropertyname]||[],onChange:function onChange(value){return props.handleChange(value,Property.schartpropertyname,Property.schartpropertyname);},closeMenuOnSelect:false// alphabeticalSort={true}\n}):/*#__PURE__*/React.createElement(React.Fragment,null)))));}))));};export default injectIntl(AddDashBoardTypes);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboardtypes/AddDashBoardTypes.jsx"],"names":["React","Row","Col","FormInput","FormSelectSearch","injectIntl","AddDashBoardTypes","props","intl","formatMessage","id","event","onInputOnChange","selectedRecord","chartType","ncharttypecode","value","handleChange","sqlQuery","nsqlquerycode","ChartProperty","map","Property","index","schartpropertyname","SqlColumns","xSeriesColumns","ySeriesColumns"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\n\r\n\r\nconst AddDashBoardTypes = (props) => {\r\n   //console.log(\"AddDashBoardTypes props:\",props);\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <FormInput\r\n                        label={props.intl.formatMessage({ id: \"IDS_DASHBOARDTYPENAME\" })}\r\n                        name={\"sdashboardtypename\"}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_DASHBOARDTYPENAME\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sdashboardtypename\"] : \"\"}\r\n                        isMandatory={true}\r\n                        required={true}\r\n                        maxLength={\"50\"}\r\n                    />\r\n                \r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_CHARTTYPE\" })}\r\n                        isSearchable={true}\r\n                        name={\"ncharttypecode\"}\r\n                        isDisabled={false}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={true}\r\n                        isClearable={false}\r\n                        options={props.chartType}\r\n                        optionId='ncharttypecode'\r\n                        optionValue='schartname'\r\n                        //defaultValue={props.ncharttypecode || []}\r\n                        value={props.selectedRecord.ncharttypecode ? props.selectedRecord.ncharttypecode : \"\"}\r\n                        onChange={value => props.handleChange(value, \"ncharttypecode\", \"ChartType\")}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n               \r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_QUERY\" })}\r\n                        isSearchable={true}\r\n                        name={\"nsqlquerycode\"}\r\n                        isDisabled={false}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={true}\r\n                        isClearable={false}\r\n                        options={props.sqlQuery}\r\n                        optionId='nsqlquerycode'\r\n                        optionValue='ssqlqueryname'\r\n                        //defaultValue={props.nsqlquerycode ? props.nsqlquerycode : \"\"}\r\n                        value={props.selectedRecord.nsqlquerycode ? props.selectedRecord.nsqlquerycode : \"\"}\r\n                        onChange={value => props.handleChange(value, \"nsqlquerycode\", \"\")}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                </Col>\r\n               \r\n            </Row>\r\n\r\n            <Row className=\"mtop-4\">\r\n                <Col md={12}>\r\n                {props.ChartProperty && props.ChartProperty.map((Property, index) => (\r\n                    <>\r\n                        {Property.schartpropertyname === \"field\"\r\n                            || Property.schartpropertyname === \"nameField\" || Property.schartpropertyname === \"xFieldBubble\" ?\r\n                          \r\n                                <FormSelectSearch\r\n                                    formLabel={props.intl.formatMessage((Property.schartpropertyname === \"xField\" || Property.schartpropertyname === \"xFieldBubble\") ?\r\n                                        { id: \"IDS_XSERIES\" } : (Property.schartpropertyname === \"field\" ? { id: \"IDS_CATAEGORYFIELD\" } : { id: \"IDS_VALUEFIELD\" }))}\r\n                                    isSearchable={true}\r\n                                    name={Property.schartpropertyname}\r\n                                    isDisabled={false}\r\n                                    placeholder=\"Please Select...\"\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    options={(Property.schartpropertyname === \"field\" || Property.schartpropertyname === \"xFieldBubble\") ? props.SqlColumns ? props.SqlColumns.xSeriesColumns || [] : [] : props.SqlColumns ? props.SqlColumns.ySeriesColumns || [] : []}\r\n                                    value={props.selectedRecord[Property.schartpropertyname] || []}\r\n                                    onChange={value => props.handleChange(value, Property.schartpropertyname, Property.schartpropertyname)}\r\n                                    closeMenuOnSelect={true}\r\n                                >\r\n                                </FormSelectSearch>                         \r\n                            :\r\n                            <>\r\n                                {Property.schartpropertyname === \"yField\" ?\r\n                                  \r\n                                        <FormSelectSearch\r\n                                            formLabel={props.intl.formatMessage({ id: \"IDS_YSERIES\" })}\r\n                                            isSearchable={true}\r\n                                            name={\"yColumnName\"}\r\n                                            isDisabled={false}\r\n                                            placeholder=\"Please Select...\"\r\n                                            isMandatory={true}\r\n                                            isClearable={true}\r\n                                            isMulti={true}\r\n                                            // options={props.ySeriesColumnList?props.ySeriesColumnList||[]:[]}\r\n                                            options={props.SqlColumns ? props.SqlColumns.ySeriesColumns || [] : []}\r\n                                            // optionId='ColumnName'\r\n                                            // optionValue='ColumnName'\r\n                                            // value={props.operation === \"update\" ? props.yValue : props.Value || []}\r\n                                            value={props.selectedRecord[\"yColumnName\"] || []}\r\n                                            onChange={value => props.handleChange(value, \"yColumnName\", Property.schartpropertyname)}\r\n                                            closeMenuOnSelect={false}\r\n                                        // alphabeticalSort={true}\r\n                                        >\r\n                                        </FormSelectSearch>\r\n                                   \r\n                                    :\r\n                                    <>\r\n                                        {Property.schartpropertyname === \"xField\" ?\r\n                                            \r\n                                                <FormSelectSearch\r\n                                                    formLabel={props.intl.formatMessage({ id: \"IDS_XSERIES\" })}\r\n                                                    isSearchable={true}\r\n                                                    name={\"xColumnName\"}\r\n                                                    isDisabled={false}\r\n                                                    placeholder=\"Please Select...\"\r\n                                                    isMandatory={true}\r\n                                                    isClearable={false}\r\n                                                    // options={props.xSeriesColumnList?props.xSeriesColumnList||[]:[]}\r\n                                                    options={props.SqlColumns ? props.SqlColumns.xSeriesColumns || [] : []}\r\n                                                    // optionId='ColumnName'\r\n                                                    // optionValue='ColumnName' // props.Value \r\n                                                    //   value={props.operation === \"update\" ? props.xValue : props.selectedRecord[\"xColumnName\"] || []}\r\n                                                    value={props.selectedRecord[\"xColumnName\"] || []}\r\n                                                    onChange={value => props.handleChange(value, \"xColumnName\", Property.schartpropertyname)}\r\n                                                    closeMenuOnSelect={true}\r\n                                                // alphabeticalSort={true}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                           \r\n                                            :\r\n                                            <>\r\n\r\n                                                {Property.schartpropertyname === \"yFieldBubble\" ||\r\n                                                 Property.schartpropertyname === \"sizeField\" || Property.schartpropertyname === \"categoryField\" ?\r\n                                                  \r\n                                                        <FormSelectSearch\r\n                                                            formLabel={props.intl.formatMessage( Property.schartpropertyname === \"yFieldBubble\" ? { id: \"IDS_YSERIES\" } : \r\n                                                            Property.schartpropertyname === \"sizeField\" ? { id: \"IDS_SIZEFIELD\" } : { id: \"IDS_CATAEGORYFIELD\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={Property.schartpropertyname}\r\n                                                            isDisabled={false}\r\n                                                            placeholder=\"Please Select...\"\r\n                                                            isMandatory={true}\r\n                                                            isClearable={true}\r\n                                                            isMulti={true}\r\n                                                            options={props.SqlColumns ? Property.schartpropertyname === \"categoryField\" ? props.SqlColumns.xSeriesColumns : props.SqlColumns.ySeriesColumns || [] : []}\r\n                                                            value={props.selectedRecord[Property.schartpropertyname] || []}\r\n                                                            onChange={value => props.handleChange(value, Property.schartpropertyname, Property.schartpropertyname)}\r\n                                                            closeMenuOnSelect={false}\r\n                                                        // alphabeticalSort={true}\r\n                                                        >\r\n                                                        </FormSelectSearch>\r\n                                                  \r\n                                                    :\r\n                                                    <></>\r\n                                                }\r\n                                            </>\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </>\r\n                        }\r\n                    </>\r\n                ))\r\n                }\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\nexport default injectIntl(AddDashBoardTypes);"]},"metadata":{},"sourceType":"module"}