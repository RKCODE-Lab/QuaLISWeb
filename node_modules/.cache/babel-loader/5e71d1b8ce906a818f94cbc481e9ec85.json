{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\StaticHomeDashBoard.jsx\";\nimport React from 'react';\nimport { Row, Col, Button, Modal, Card, Accordion, Media, ListGroup, useAccordionToggle } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faChevronUp, faSave } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { callService, crudMaster, getHomeDashBoard, updateStore, validateEsignCredential, getStaticDashBoard, getSelectionStaticDashBoard } from '../../actions';\nimport { process } from '@progress/kendo-data-query';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DashBoardDynamicControls from './DashBoardDynamicControls';\nimport { ModalInner } from \"../../components/App.styles\";\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport PieChart from '../dashboardtypes/charts/PieChart';\nimport { AtAccordion } from '../../components/custom-accordion/custom-accordion.styles';\nimport { chartType, designComponents } from '../../components/Enumeration';\nimport { ListMasterWrapper } from '../../components/list-master/list-master.styles';\nimport AreaChart from './charts/AreaChart';\nimport BubbleChart from './charts/BubbleChart';\nimport { ListView } from '@progress/kendo-react-listview';\nimport { ClientList } from '../../components/App.styles';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport AccordionContext from \"react-bootstrap/AccordionContext\";\nimport { rearrangeDateFormat } from '../../components/CommonScript';\n\nconst CustomToggle = _ref => {\n  let {\n    children,\n    eventKey\n  } = _ref;\n  const currentEventKey = React.useContext(AccordionContext);\n  const isCurrentEventKey = currentEventKey === eventKey;\n  const decoratedOnClick = useAccordionToggle(eventKey, () => isCurrentEventKey ? \"\" : children.props.onExpandCall());\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-between\",\n    onClick: decoratedOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, children, isCurrentEventKey ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faChevronUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faChevronDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass StaticHomeDashBoard extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterDataStatic.gridData, event.data),\n        dataState: event.data\n      });\n    };\n\n    this.ListDesign = props => {\n      let item = props.dataItem;\n      return /*#__PURE__*/React.createElement(ListGroup.Item, {\n        key: `listKey_${props.index}`,\n        as: \"li\",\n        onClick: () => this.listItemClick(item),\n        className: `list-bgcolor ${this.props.Login.masterDataStatic.selectedDashBoardDetail ? this.props.Login.masterDataStatic.selectedDashBoardDetail[\"nstaticdashboardcode\"] === item[\"nstaticdashboardcode\"] ? \"active\" : \"\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Media, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Media.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }\n      }, item.sstaticdashboardname))));\n    };\n\n    this.closeModal = () => {\n      let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\n      openModalForHomeDashBoard = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModalForHomeDashBoard\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkParametersAvailable = () => {\n      if (this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.filterParams && this.props.Login.masterDataStatic.filterParams.length > 0) {\n        const {\n          selectedRecordStatic\n        } = this.state;\n        this.props.Login.masterDataStatic.filterParams.forEach(item => {\n          if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            if (this.props.Login.masterDataStatic[item.sfieldname] !== undefined) {\n              selectedRecordStatic[item.sfieldname] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterDataStatic[item.sfieldname]);\n            }\n          }\n        });\n        let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\n        openModalForHomeDashBoard = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalForHomeDashBoard,\n            selectedRecordStatic\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.listItemClick = item => {\n      if (item !== undefined && item.nstaticdashboardcode > 0) {\n        this.props.getStaticDashBoard(this.props.Login.userInfo, item, this.props.Login.masterDataStatic);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecordStatic\n      } = this.state;\n      selectedRecordStatic[dateName] = dateValue;\n      this.setState({\n        selectedRecordStatic\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      this.props.getStaticDashBoard(this.props.Login.userInfo, this.props.Login.masterDataStatic.selectedDashBoardDetail, this.props.Login.masterDataStatic, this.state.selectedRecordStatic, false);\n    };\n\n    this.onInputOnChange = (event, item) => {};\n\n    this.onNumericInputOnChange = (event, item) => {};\n\n    this.onComboChange = (event, item) => {};\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.gridColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      data: [],\n      dataResult: [],\n      dataState: dataState,\n      selectedRecordStatic: {},\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      currentPageNo: 0,\n      openModal: false,\n      selectedStaticDashBoardMaster: 0\n    };\n    this.searchRef = React.createRef();\n  }\n\n  render() {\n    //console.log(\"static dashbaord screen:\", this.props.Login.masterDataStatic);\n    const gridColumnList = [];\n\n    if (this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.gridData && this.props.Login.masterDataStatic.gridData !== undefined) {\n      Object.keys(this.props.Login.masterDataStatic.gridData[0]).forEach(key => {\n        gridColumnList.push({\n          \"idsName\": this.props.intl.formatMessage({\n            id: key\n          }),\n          \"dataField\": key,\n          \"width\": \"200px\"\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AtAccordion, {\n      class: \"at-accordion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.staticDashBoardMaster && this.props.Login.masterDataStatic.staticDashBoardMaster !== undefined ? this.props.Login.masterDataStatic.staticDashBoardMaster.map((item, index) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(CustomToggle, {\n        eventKey: String(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        onExpandCall: () => false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 61\n        }\n      }, item.sstaticdashboardmastername))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Accordion.Collapse, {\n        eventKey: String(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(ListMasterWrapper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(ClientList, {\n        className: \"product-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(ListGroup, {\n        as: \"ul\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 81\n        }\n      }, item.staticDBDetailsList ? /*#__PURE__*/React.createElement(ListView, {\n        data: item.staticDBDetailsList,\n        item: props => this.ListDesign(props),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 89\n        }\n      }) : \"\")))))))));\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null))))), this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.pieChartData && /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      className: \"border border-right-0 border-top-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(PieChart // chartData={this.props.Login.masterData && this.props.Login.masterData.donutChartData || []}\n    , {\n      chartItemClick: event => this.chartItemClick(event),\n      series: this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.pieChartData || [],\n      masterData: this.props.Login.masterDataStatic,\n      dashBoardType: this.props.Login.masterDataStatic,\n      userInfo: this.props.Login.userInfo,\n      checkParametersAvailable: this.checkParametersAvailable,\n      chartTypeName: this.props.Login.masterDataStatic.chartTypeCode === chartType.PIECHART ? \"pie\" : \"donut\",\n      valueField: \"valueField\",\n      categoryField: \"categoryField\",\n      hiddenParam: false,\n      hiddenExport: true,\n      filterParam: this.props.Login.masterDataStatic.filterParams || [],\n      selectedRecord: this.props.Login.selectedRecordStatic || this.props.Login.masterDataStatic,\n      isStaticDashBoard: true,\n      staticTitle: this.props.Login.masterDataStatic.selectedDashBoardDetail ? this.props.Login.masterDataStatic.selectedDashBoardDetail.sstaticdashboardname : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      className: \"border\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.gridData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"pl-3 mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"d-flex border-0 justify-content-between\",\n      style: {\n        flexDirection: \"row\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterDataStatic.selectedCategoryField ? this.props.Login.masterDataStatic.selectedCategoryField : \"\", \" \", this.props.Login.masterDataStatic.selectedValueField ? `: ${this.props.Login.masterDataStatic.selectedValueField}` : this.props.Login.masterDataStatic.gridData ? `: ${this.props.Login.masterDataStatic.gridData.length}` : \"\"))), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"npreregno\",\n      data: this.props.Login.masterDataStatic.gridData,\n      dataResult: this.props.Login.masterDataStatic.gridData,\n      dataState: this.state.dataState,\n      dataStateChange: event => this.setState({\n        dataState: event.dataState\n      }),\n      extractedColumnList: gridColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      pageable: false,\n      scrollable: \"scrollable\",\n      isComponent: false,\n      isActionRequired: false,\n      isToolBarRequired: false,\n      hideColumnFilter: true,\n      selectedId: this.props.Login.selectedId,\n      gridHeight: \"450px\" // name=\"IDS_ALERTVIEW\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 53\n      }\n    }))) : \"\"), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"border border-top-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.masterDataStatic.selectionChartType !== chartType.BUBBLE ? /*#__PURE__*/React.createElement(AreaChart, {\n      xSeries: this.props.Login.masterDataStatic.xSeries,\n      ySeries: this.props.Login.masterDataStatic.ySeries,\n      masterData: this.props.Login.masterDataStatic,\n      userInfo: this.props.Login.userInfo,\n      checkParametersAvailable: this.props.checkParametersAvailable //chartTypeName={\"column\"}\n      ,\n      dashBoardType: this.props.Login.masterDataStatic,\n      chartTypeName: this.props.Login.masterDataStatic.selectionChartType === chartType.AREACHART ? \"area\" : this.props.Login.masterDataStatic.selectionChartType === chartType.COLUMNCHART ? \"column\" : this.props.Login.masterDataStatic.selectionChartType === chartType.BARCHART ? \"bar\" : \"area\",\n      hiddenParam: true,\n      hiddenExport: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(BubbleChart, {\n      bubbleSeries: this.props.Login.masterDataStatic.bubbleSeries,\n      chartData: this.props.Login.masterDataStatic.chartData,\n      masterData: this.props.Login.masterDataStatic,\n      userInfo: this.props.Login.userInfo,\n      checkParametersAvailable: this.props.checkParametersAvailable,\n      hiddenParam: true,\n      hiddenExport: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 53\n      }\n    }))))))), this.props.Login.openModalForHomeDashBoard && /*#__PURE__*/React.createElement(Modal, {\n      show: this.props.Login.openModalForHomeDashBoard,\n      onHide: this.closeModal,\n      backdrop: \"static\",\n      className: \"dashboard-parameter\",\n      dialogClassName: \"freakerstop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"create-password\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PARAMETER\",\n      defaultMessage: \"Parameter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: this.onSaveClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DashBoardDynamicControls, {\n      selectedRecord: this.state.selectedRecordStatic || this.props.Login.selectedRecordStatic || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputOnChange: this.onNumericInputOnChange,\n      onComboChange: this.onComboChange,\n      handleDateChange: this.handleDateChange,\n      viewDashBoardDesignConfigList: this.props.Login.masterDataStatic.filterParams || [],\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 37\n      }\n    }))))));\n  }\n\n  chartItemClick(item) {\n    this.props.getSelectionStaticDashBoard(this.props.Login.userInfo, this.props.Login.masterDataStatic.selectedDashBoardDetail.nstaticdashboardcode, item.dataItem.rowItem, this.props.Login.masterDataStatic, item.dataItem);\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecordStatic !== previousProps.Login.selectedRecordStatic) {\n      this.setState({\n        selectedRecordStatic: this.props.Login.selectedRecordStatic\n      });\n    }\n\n    if (this.props.Login.openModalForHomeDashBoard !== previousProps.Login.openModalForHomeDashBoard) {\n      this.setState({\n        openModal: this.props.Login.openModalForHomeDashBoard\n      });\n    }\n\n    if (this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.selectedStaticDashBoardMaster !== previousProps.Login.masterDataStatic.selectedStaticDashBoardMaster) {\n      this.setState({\n        selectedStaticDashBoardMaster: this.props.Login.masterDataStatic.selectedStaticDashBoardMaster\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getHomeDashBoard,\n  updateStore,\n  validateEsignCredential,\n  getStaticDashBoard,\n  getSelectionStaticDashBoard\n})(injectIntl(StaticHomeDashBoard));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboardtypes/StaticHomeDashBoard.jsx"],"names":["React","Row","Col","Button","Modal","Card","Accordion","Media","ListGroup","useAccordionToggle","FontAwesomeIcon","faChevronDown","faChevronUp","faSave","connect","FormattedMessage","injectIntl","callService","crudMaster","getHomeDashBoard","updateStore","validateEsignCredential","getStaticDashBoard","getSelectionStaticDashBoard","process","DEFAULT_RETURN","DashBoardDynamicControls","ModalInner","DataGrid","PieChart","AtAccordion","chartType","designComponents","ListMasterWrapper","AreaChart","BubbleChart","ListView","ClientList","PerfectScrollbar","AtTableWrap","AccordionContext","rearrangeDateFormat","CustomToggle","children","eventKey","currentEventKey","useContext","isCurrentEventKey","decoratedOnClick","props","onExpandCall","mapStateToProps","state","Login","StaticHomeDashBoard","Component","constructor","dataStateChange","event","setState","dataResult","masterDataStatic","gridData","data","dataState","ListDesign","item","dataItem","index","listItemClick","selectedDashBoardDetail","sstaticdashboardname","closeModal","openModalForHomeDashBoard","updateInfo","typeName","checkParametersAvailable","filterParams","length","selectedRecordStatic","forEach","ndesigncomponentcode","DATEPICKER","sfieldname","undefined","userInfo","nstaticdashboardcode","handleDateChange","dateName","dateValue","onSaveClick","saveType","formRef","onInputOnChange","onNumericInputOnChange","onComboChange","createRef","extractedColumnList","gridColumnList","skip","take","controlMap","Map","userRoleControlRights","currentPageNo","openModal","selectedStaticDashBoardMaster","searchRef","render","Object","keys","key","push","intl","formatMessage","id","staticDashBoardMaster","map","String","sstaticdashboardmastername","staticDBDetailsList","pieChartData","chartItemClick","chartTypeCode","PIECHART","flexDirection","selectedCategoryField","selectedValueField","selectedId","selectionChartType","BUBBLE","xSeries","ySeries","AREACHART","COLUMNCHART","BARCHART","bubbleSeries","chartData","operation","inputParam","rowItem","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Button, Modal, Card, Accordion, Media, ListGroup, useAccordionToggle } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown, faChevronUp, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, getHomeDashBoard,\r\n    updateStore, validateEsignCredential, getStaticDashBoard, getSelectionStaticDashBoard\r\n} from '../../actions';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DashBoardDynamicControls from './DashBoardDynamicControls';\r\nimport { ModalInner } from \"../../components/App.styles\";\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport PieChart from '../dashboardtypes/charts/PieChart';\r\nimport { AtAccordion } from '../../components/custom-accordion/custom-accordion.styles';\r\nimport { chartType, designComponents } from '../../components/Enumeration';\r\nimport { ListMasterWrapper } from '../../components/list-master/list-master.styles';\r\nimport AreaChart from './charts/AreaChart';\r\nimport BubbleChart from './charts/BubbleChart';\r\nimport { ListView } from '@progress/kendo-react-listview';\r\nimport { ClientList } from '../../components/App.styles';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport AccordionContext from \"react-bootstrap/AccordionContext\";\r\nimport { rearrangeDateFormat } from '../../components/CommonScript';\r\n\r\nconst CustomToggle = ({ children, eventKey }) => {\r\n    const currentEventKey = React.useContext(AccordionContext);\r\n    const isCurrentEventKey = currentEventKey === eventKey;\r\n    const decoratedOnClick = useAccordionToggle(eventKey,\r\n        () => isCurrentEventKey ? \"\" : children.props.onExpandCall()\r\n    );\r\n\r\n\r\n    return (\r\n        <div\r\n            className=\"d-flex justify-content-between\"\r\n            onClick={decoratedOnClick}\r\n        >\r\n            {children}\r\n            {isCurrentEventKey ?\r\n                <FontAwesomeIcon icon={faChevronUp} />\r\n                : <FontAwesomeIcon icon={faChevronDown}\r\n                />}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\nclass StaticHomeDashBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.gridColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n\r\n        this.state = {\r\n            data: [],\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            selectedRecordStatic: {},\r\n            controlMap: new Map(), userRoleControlRights: [],\r\n            currentPageNo: 0,\r\n            openModal: false,\r\n            selectedStaticDashBoardMaster: 0\r\n        }\r\n        this.searchRef = React.createRef();\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterDataStatic.gridData, event.data),\r\n            dataState: event.data\r\n        });\r\n    }\r\n\r\n    ListDesign = props => {\r\n        let item = props.dataItem;\r\n        return (\r\n            <ListGroup.Item key={`listKey_${props.index}`} as=\"li\" onClick={() => this.listItemClick(item)}\r\n                className={`list-bgcolor ${this.props.Login.masterDataStatic.selectedDashBoardDetail ? this.props.Login.masterDataStatic.selectedDashBoardDetail[\"nstaticdashboardcode\"] === item[\"nstaticdashboardcode\"] ? \"active\" : \"\" : \"\"}`}>\r\n                <Media>\r\n                    <Media.Body>\r\n                        <h5>{item.sstaticdashboardname}</h5>\r\n                        {/* <p>\r\n                            {item.sdescription}\r\n                        </p> */}\r\n                    </Media.Body>\r\n                </Media>\r\n            </ListGroup.Item>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"static dashbaord screen:\", this.props.Login.masterDataStatic);\r\n        const gridColumnList = [];\r\n        if (this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.gridData && this.props.Login.masterDataStatic.gridData !== undefined) {\r\n\r\n            Object.keys(this.props.Login.masterDataStatic.gridData[0]).forEach(key => {\r\n                gridColumnList.push({ \"idsName\": this.props.intl.formatMessage({ id: key }), \r\n                                      \"dataField\": key, \r\n                                      \"width\": \"200px\" });\r\n            });\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap\">\r\n                    <Row noGutters={false}>\r\n                        <Col md={3}>\r\n                            <AtAccordion class=\"at-accordion\">\r\n                                <Accordion defaultActiveKey={\"0\"} >\r\n                                    <Card>\r\n                                        {this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.staticDashBoardMaster \r\n                                                && this.props.Login.masterDataStatic.staticDashBoardMaster !== undefined ?\r\n                                            this.props.Login.masterDataStatic.staticDashBoardMaster.map((item, index) => {\r\n                                                return (<>\r\n                                                    <Card.Header>\r\n                                                        <CustomToggle eventKey={String(index)}>\r\n                                                            <Card.Title onExpandCall={() => false}>\r\n                                                                {item.sstaticdashboardmastername}\r\n                                                            </Card.Title>\r\n                                                        </CustomToggle>\r\n                                                    </Card.Header>\r\n\r\n                                                    <>\r\n                                                        <Accordion.Collapse eventKey={String(index)}>\r\n\r\n                                                            <Card.Body className=\"p-0\">\r\n                                                                <ListMasterWrapper>\r\n\r\n                                                                    <ClientList className=\"product-list\">\r\n                                                                        <PerfectScrollbar>\r\n                                                                            <div>\r\n                                                                                <ListGroup as=\"ul\">\r\n                                                                                    {item.staticDBDetailsList ?\r\n                                                                                        <ListView\r\n                                                                                            data={item.staticDBDetailsList}\r\n                                                                                            item={(props) => this.ListDesign(props)}\r\n                                                                                        /> : \"\"}\r\n                                                                                </ListGroup>\r\n                                                                            </div>\r\n                                                                        </PerfectScrollbar>\r\n\r\n                                                                    </ClientList>\r\n                                                                </ListMasterWrapper>\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </>\r\n                                                </>\r\n                                                )\r\n                                            })\r\n                                            :\r\n                                            <></>\r\n                                        }\r\n                                    </Card>\r\n                                </Accordion>\r\n                            </AtAccordion>\r\n                        </Col>\r\n                        {this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.pieChartData &&\r\n                            <Col md={9}>\r\n\r\n                                <Row>\r\n\r\n                                    <Col md={6} className=\"border border-right-0 border-top-0\">\r\n                                        <PieChart\r\n                                            // chartData={this.props.Login.masterData && this.props.Login.masterData.donutChartData || []}\r\n                                            chartItemClick={event => this.chartItemClick(event)}\r\n                                            series={(this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.pieChartData) || []}\r\n                                            masterData={this.props.Login.masterDataStatic}\r\n                                            dashBoardType={this.props.Login.masterDataStatic}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            checkParametersAvailable={this.checkParametersAvailable}\r\n                                            chartTypeName={this.props.Login.masterDataStatic.chartTypeCode === chartType.PIECHART ? \"pie\" : \"donut\"}\r\n                                            valueField={\"valueField\"}\r\n                                            categoryField={\"categoryField\"}\r\n                                            hiddenParam={false}\r\n                                            hiddenExport={true}\r\n                                            filterParam={this.props.Login.masterDataStatic.filterParams || []}\r\n                                            selectedRecord={this.props.Login.selectedRecordStatic || this.props.Login.masterDataStatic}\r\n                                            isStaticDashBoard={true}\r\n                                            staticTitle={this.props.Login.masterDataStatic.selectedDashBoardDetail ? this.props.Login.masterDataStatic.selectedDashBoardDetail.sstaticdashboardname : \"\"}\r\n                                        />\r\n                                    </Col>\r\n\r\n                                    <Col md={6} className=\"border\">\r\n\r\n                                        {this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.gridData ?\r\n                                            <>\r\n                                                <Row className=\"pl-3 mt-1\">\r\n                                                    <Card className=\"d-flex border-0 justify-content-between\" style={{ flexDirection: \"row\" }}>\r\n                                                        <Card.Title>\r\n                                                            {this.props.Login.masterDataStatic.selectedCategoryField ?\r\n                                                                this.props.Login.masterDataStatic.selectedCategoryField\r\n                                                                : \"\"}{\" \"}\r\n                                                            {this.props.Login.masterDataStatic.selectedValueField ?\r\n                                                                `: ${this.props.Login.masterDataStatic.selectedValueField}`\r\n                                                                : this.props.Login.masterDataStatic.gridData ? `: ${this.props.Login.masterDataStatic.gridData.length}` : \"\"}\r\n                                                        </Card.Title>\r\n                                                    </Card>\r\n                                                </Row>\r\n                                                <AtTableWrap className=\"at-list-table\">\r\n                                                    <DataGrid\r\n                                                        primaryKeyField={\"npreregno\"}\r\n                                                        data={this.props.Login.masterDataStatic.gridData}\r\n                                                        dataResult={this.props.Login.masterDataStatic.gridData}\r\n                                                        dataState={this.state.dataState}\r\n                                                        dataStateChange={(event) => this.setState({ dataState: event.dataState })}\r\n                                                        extractedColumnList={gridColumnList}\r\n                                                        controlMap={this.state.controlMap}\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        pageable={false}\r\n                                                        scrollable={\"scrollable\"}\r\n                                                        isComponent={false}\r\n                                                        isActionRequired={false}\r\n                                                        isToolBarRequired={false}\r\n                                                        hideColumnFilter={true}\r\n                                                        selectedId={this.props.Login.selectedId}\r\n                                                        gridHeight={\"450px\"}\r\n\r\n                                                    // name=\"IDS_ALERTVIEW\"\r\n                                                    />\r\n                                                </AtTableWrap>\r\n                                            </>\r\n                                            : \"\"\r\n                                        }\r\n\r\n                                    </Col>\r\n                                    <Col md={12} className=\"border border-top-0\">\r\n\r\n                                        \r\n                                            <>\r\n                                                {this.props.Login.masterDataStatic.selectionChartType !== chartType.BUBBLE?\r\n                                                    <AreaChart\r\n                                                        xSeries={this.props.Login.masterDataStatic.xSeries}\r\n                                                        ySeries={this.props.Login.masterDataStatic.ySeries}\r\n                                                        masterData={this.props.Login.masterDataStatic}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        checkParametersAvailable={this.props.checkParametersAvailable}\r\n                                                        //chartTypeName={\"column\"}\r\n                                                        dashBoardType={this.props.Login.masterDataStatic}\r\n\r\n                                                        chartTypeName={this.props.Login.masterDataStatic.selectionChartType === chartType.AREACHART ? \"area\" :\r\n                                                            this.props.Login.masterDataStatic.selectionChartType === chartType.COLUMNCHART ? \"column\" :\r\n                                                                this.props.Login.masterDataStatic.selectionChartType === chartType.BARCHART ? \"bar\" : \"area\"}\r\n                                                        hiddenParam={true}\r\n                                                        hiddenExport={true}\r\n                                                    />\r\n                                                    :\r\n                                                    <BubbleChart\r\n                                                        bubbleSeries={this.props.Login.masterDataStatic.bubbleSeries}\r\n                                                        chartData={this.props.Login.masterDataStatic.chartData}\r\n                                                        masterData={this.props.Login.masterDataStatic}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        checkParametersAvailable={this.props.checkParametersAvailable}\r\n                                                        hiddenParam={true}\r\n                                                        hiddenExport={true}\r\n\r\n                                                    />\r\n                                                }\r\n                                            </>\r\n\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </Col>\r\n                        }\r\n                    </Row>\r\n                </div>\r\n                {\r\n                    this.props.Login.openModalForHomeDashBoard &&\r\n\r\n                    <Modal show={this.props.Login.openModalForHomeDashBoard}\r\n                        onHide={this.closeModal} backdrop=\"static\" className=\"dashboard-parameter\" dialogClassName=\"freakerstop\">\r\n                        <Modal.Header className=\"d-flex align-items-center\">\r\n                            <Modal.Title id=\"create-password\" className=\"header-primary flex-grow-1\">\r\n                                <FormattedMessage id={\"IDS_PARAMETER\"} defaultMessage=\"Parameter\" />\r\n                            </Modal.Title>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={this.onSaveClick}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                            </Button>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ModalInner>\r\n                                <Card.Body>\r\n                                    <DashBoardDynamicControls\r\n                                        selectedRecord={this.state.selectedRecordStatic || this.props.Login.selectedRecordStatic || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        viewDashBoardDesignConfigList={this.props.Login.masterDataStatic.filterParams || []}\r\n                                        operation={this.props.Login.operation}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                    />\r\n                                </Card.Body>\r\n                            </ModalInner>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                }\r\n\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\r\n        openModalForHomeDashBoard = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModalForHomeDashBoard }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    checkParametersAvailable = () => {\r\n        if (this.props.Login.masterDataStatic && this.props.Login.masterDataStatic.filterParams && this.props.Login.masterDataStatic.filterParams.length > 0) {\r\n\r\n            const { selectedRecordStatic } = this.state;\r\n            this.props.Login.masterDataStatic.filterParams.forEach(item => {\r\n\r\n                if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    if (this.props.Login.masterDataStatic[item.sfieldname] !== undefined) {\r\n                        selectedRecordStatic[item.sfieldname] = rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterDataStatic[item.sfieldname]);\r\n                    }\r\n\r\n                }\r\n            });\r\n            let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\r\n            openModalForHomeDashBoard = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModalForHomeDashBoard, selectedRecordStatic }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    listItemClick = (item) => {\r\n        if (item !== undefined && item.nstaticdashboardcode > 0) {\r\n\r\n            this.props.getStaticDashBoard(this.props.Login.userInfo, item, this.props.Login.masterDataStatic);\r\n\r\n        }\r\n    }\r\n    chartItemClick(item) {\r\n        this.props.getSelectionStaticDashBoard(this.props.Login.userInfo, this.props.Login.masterDataStatic.selectedDashBoardDetail.nstaticdashboardcode,\r\n            item.dataItem.rowItem, this.props.Login.masterDataStatic, item.dataItem)\r\n    }\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecordStatic } = this.state;\r\n\r\n        selectedRecordStatic[dateName] = dateValue;\r\n        this.setState({ selectedRecordStatic });\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        this.props.getStaticDashBoard(this.props.Login.userInfo, this.props.Login.masterDataStatic.selectedDashBoardDetail, this.props.Login.masterDataStatic, this.state.selectedRecordStatic, false);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecordStatic !== previousProps.Login.selectedRecordStatic) {\r\n            this.setState({ selectedRecordStatic: this.props.Login.selectedRecordStatic });\r\n        }\r\n        if (this.props.Login.openModalForHomeDashBoard !== previousProps.Login.openModalForHomeDashBoard) {\r\n            this.setState({ openModal: this.props.Login.openModalForHomeDashBoard });\r\n        }\r\n        if (this.props.Login.masterDataStatic\r\n            && this.props.Login.masterDataStatic.selectedStaticDashBoardMaster !== previousProps.Login.masterDataStatic.selectedStaticDashBoardMaster) {\r\n            this.setState({ selectedStaticDashBoardMaster: this.props.Login.masterDataStatic.selectedStaticDashBoardMaster });\r\n        }\r\n    }\r\n    onInputOnChange = (event, item) => { }\r\n    onNumericInputOnChange = (event, item) => { }\r\n    onComboChange = (event, item) => { }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getHomeDashBoard, updateStore,\r\n    validateEsignCredential, getStaticDashBoard, getSelectionStaticDashBoard\r\n})(injectIntl(StaticHomeDashBoard));"]},"metadata":{},"sourceType":"module"}