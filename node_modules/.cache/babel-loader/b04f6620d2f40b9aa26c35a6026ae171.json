{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\resultgrid\\\\ResultGrid.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Card, FormGroup, FormLabel, Nav, Image } from 'react-bootstrap';\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords } from '@progress/kendo-react-grid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { //faCalculator, \nfaCloudDownloadAlt, faEye, faListAlt, faPencilAlt } from '@fortawesome/free-solid-svg-icons'; //import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\nimport { attachmentType, parameterType } from '../../components/Enumeration';\nimport SimpleGrid from '../../components/data-grid/SimpleGrid';\nimport enforcestatus from \"../../assets/image/enforcestatus.svg\";\nimport { AtTableWrap, FontIconWrap, FormControlStatic } from '../../components/data-grid/data-grid.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ResultGrid extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClickDelete = deleteParam => {\n      this.props.deleteRecord(deleteParam);\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n\n      if (this.props.hasChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        this.props.handleExpandChange(event, this.props.dataState);\n      } else {\n        event.dataItem.expanded = !isExpanded;\n        this.setState({\n          isExpanded\n        });\n      }\n    };\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, this.props.hasChild ? /*#__PURE__*/React.createElement(SimpleGrid, {\n        childList: this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || [],\n        extractedColumnList: this.props.childColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 42\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }\n      }, this.props.detailedFieldList.map((item, key) => {\n        let validationtype = true;\n\n        if (item.istypeValidation) {\n          if (props.dataItem['nparametertypecode'] !== parameterType.NUMERIC) {\n            validationtype = false;\n          }\n        }\n\n        if (validationtype) {\n          return /*#__PURE__*/React.createElement(Col, {\n            md: item.isDecsriptionField ? 6 : 4,\n            key: key,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 49\n            }\n          }, props.dataItem['nparametertypecode'] === parameterType.PREDEFINED && item.dataField === 'spredefinedcomments' ? /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 53\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: item.idsName,\n            message: item.idsName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 61\n            }\n          }), item.needHistoryButton ? /*#__PURE__*/React.createElement(Nav.Link, {\n            name: \"enforcestatuscomments\",\n            className: \"btn btn-circle outline-grey mr-2 ml-1\",\n            \"data-tip\": this.props.intl.formatMessage({\n              id: item.buttonTitle\n            }) //   data-for=\"tooltip_grid_wrap\"\n            ,\n            onClick: () => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 65\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faEye,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 65\n            }\n          })) // <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\n          //         style={{ display: \"inline-block\" }} >\n          //     <FontIconWrap className=\"d-font-icon p-1\" title={this.props.intl.formatMessage({ id: item.buttonTitle })}>\n          //         <FontAwesomeIcon\n          //             icon={faEye}\n          //             onClick={() => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo)}\n          //         >\n          //         </FontAwesomeIcon>\n          //     </FontIconWrap>\n          // </Nav.Link>\n          : \"\"), /*#__PURE__*/React.createElement(FormControlStatic, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 57\n            }\n          }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: props.dataItem[item.dataField],\n            message: props.dataItem[item.dataField],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 83\n            }\n          }) : props.dataItem[item.dataField]), /*#__PURE__*/React.createElement(FontIconWrap, {\n            className: \"d-font-icon\",\n            \"data-place\": \"left\",\n            \"data-tip\": this.props.intl.formatMessage({\n              id: \"IDS_EDITPREFINEDCOMMENTS\"\n            }),\n            hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.controlMap.has(\"EditPredefinedComments\") && this.props.controlMap.get(\"EditPredefinedComments\").ncontrolcode) === -1,\n            onClick: () => this.props.editpredefinedcomments(props.dataItem),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faPencilAlt,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 56\n            }\n          }))) : item.dataField === 'spredefinedcomments' ? \"\" : /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 56\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 56\n            }\n          }, /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: item.idsName,\n            message: item.idsName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 60\n            }\n          }), item.needHistoryButton ? /*#__PURE__*/React.createElement(Nav.Link, {\n            name: \"enforcestatuscomments\",\n            className: \"btn btn-circle outline-grey mr-2 ml-1\",\n            \"data-tip\": this.props.intl.formatMessage({\n              id: item.buttonTitle\n            }) //   data-for=\"tooltip_grid_wrap\"\n            ,\n            onClick: () => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 64\n            }\n          }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n            icon: faEye,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 64\n            }\n          })) // <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\n          //         style={{ display: \"inline-block\" }} >\n          //     <FontIconWrap className=\"d-font-icon p-1\" title={this.props.intl.formatMessage({ id: item.buttonTitle })}>\n          //         <FontAwesomeIcon\n          //             icon={faEye}\n          //             onClick={() => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo)}\n          //         >\n          //         </FontAwesomeIcon>\n          //     </FontIconWrap>\n          // </Nav.Link>\n          : \"\"), /*#__PURE__*/React.createElement(FormControlStatic, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 56\n            }\n          }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n            id: props.dataItem[item.dataField],\n            message: props.dataItem[item.dataField],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 82\n            }\n          }) : props.dataItem[item.dataField])));\n        }\n      }))))), \" \");\n    };\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      return {\n        field: field,\n        columnMenu: ColumnMenu //headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n\n      };\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  render() {\n    //const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\n    const editId = this.props.controlMap.has(\"AddParameterComments\") && this.props.controlMap.get(\"AddParameterComments\").ncontrolcode;\n    const enforceStatusID = this.props.controlMap.has(\"EnforceStatus\") && this.props.controlMap.get(\"EnforceStatus\").ncontrolcode;\n    const checklistID = this.props.controlMap.has(\"EditChecklist\") ? this.props.controlMap.get(\"EditChecklist\").ncontrolcode : -1;\n    const selectedId = this.props.selectedId;\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      style: {\n        height: this.props.gridHeight\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable ? {\n        buttonCount: 4,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : \"\",\n      groupable: this.props.groupable ? true : false,\n      detail: this.detailBand,\n      expandField: this.props.expandField ? this.props.expandField : false,\n      onExpandChange: this.expandChange,\n      data: this.props.dataResult\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onDataStateChange: this.props.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      key: index // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\n      ,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      })\n    }, this.columnProps(item.dataField), {\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(React.Fragment, null, item.fieldType === \"attachment\" && row[\"dataItem\"]['nparametertypecode'] === parameterType.ATTACHMENT && row[\"dataItem\"]['nattachmenttypecode'] === attachmentType.FTP ? row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOADFILE\"\n        }),\n        onClick: () => this.props.viewFile({ ...this.props.attachmentParam,\n          inputData: {\n            selectedRecord: row[\"dataItem\"],\n            userinfo: this.props.userInfo\n          }\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 53\n        }\n      }), \" \", row[\"dataItem\"][item.dataField]) : item.fieldType === \"attachment\" && row[\"dataItem\"]['nattachmenttypecode'] === attachmentType.LINK ? row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: row[\"dataItem\"][item.dataField],\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => this.props.viewFile({ ...this.props.attachmentParam,\n          inputData: {\n            selectedRecord: row[\"dataItem\"],\n            userinfo: this.props.userInfo\n          }\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 57\n        }\n      }, row[\"dataItem\"][item.dataField])) : item.fieldType === \"checklistview\" ? row.rowType === \"groupHeader\" ? null : row[\"dataItem\"][item.checklistKey] > 0 ? /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] //data-for=\"tooltip_grid_wrap\" \n        ,\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\" // data-for=\"tooltip-grid-wrap\" \n        // data-for=\"tooltip-grid-wrap\" \n        // onClick={() => this.props.viewFile({ ...this.props.attachmentParam, inputData: { selectedRecord: row[\"dataItem\"], userinfo: this.props.userInfo } }, row)}\n        ,\n        needSaveButton: true,\n        onClick: () => this.props.checkListRecord({ ...this.props.checklistParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolcode: checklistID,\n          needSaveButton: !(this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(checklistID) === -1)\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 64\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faListAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 65\n        }\n      })), \" \", row[\"dataItem\"][item.dataField]) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] //  data-for=\"tooltip_grid_wrap\" \n        ,\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"][item.dataField])) : item.fieldType === \"gradeColumn\" ? row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] // data-for=\"tooltip_grid_wrap\"\n        ,\n        className: `${selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}`,\n        style: {\n          color: [row[\"dataItem\"]['scolorhexcode']]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"][item.dataField]) : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] //data-for=\"tooltip_grid_wrap\" \n        ,\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 57\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 80\n        }\n      }) : row[\"dataItem\"][item.dataField])),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 29\n      }\n    }))), this.props.isActionRequired ? /*#__PURE__*/React.createElement(GridColumn, {\n      locked: true,\n      headerClassName: \"text-center\",\n      title: this.props.intl.formatMessage({\n        id: 'IDS_ACTION'\n      }),\n      sort: false,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        className: `k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`,\n        style: {\n          left: '0',\n          right: '0',\n          borderRightWidth: '1px',\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"action-icons-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\" // data-for=\"tooltip_grid_wrap\" \n        ,\n        \"data-place\": \"left\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_PARAMETERCOMMENTS\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1,\n        onClick: () => this.props.fetchRecord({ ...this.props.editParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField],\n          selectedRecord: row[\"dataItem\"],\n          controlcode: editId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon\" // data-for=\"tooltip_grid_wrap\" \n        ,\n        \"data-place\": \"left\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENFORCESTATUS\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Image, {\n        src: enforcestatus,\n        alt: \"filer-icon\",\n        width: \"20\",\n        height: \"20\",\n        className: \"ActionIconColor img-normalize\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(enforceStatusID) === -1,\n        onClick: () => this.props.fetchRecord({ ...this.props.editParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField],\n          editRow: row[\"dataItem\"]\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 57\n        }\n      }))))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 29\n      }\n    }) : \"\"))));\n  }\n\n}\n\nexport default connect(mapStateToProps, undefined)(injectIntl(ResultGrid));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/resultgrid/ResultGrid.jsx"],"names":["React","FormattedMessage","injectIntl","Row","Col","Card","FormGroup","FormLabel","Nav","Image","Grid","GridColumn","GridColumnMenuFilter","GridNoRecords","FontAwesomeIcon","faCloudDownloadAlt","faEye","faListAlt","faPencilAlt","ColumnMenu","attachmentType","parameterType","SimpleGrid","AtTableWrap","FontIconWrap","FormControlStatic","LocalizationProvider","connect","mapStateToProps","state","Login","ResultGrid","Component","handleClickDelete","deleteParam","props","deleteRecord","expandChange","event","isExpanded","dataItem","expanded","undefined","aggregates","hasChild","value","handleExpandChange","dataState","setState","detailBand","childList","get","parseInt","childMappingField","childColumnList","detailedFieldList","map","item","key","validationtype","istypeValidation","NUMERIC","isDecsriptionField","PREDEFINED","dataField","idsName","needHistoryButton","intl","formatMessage","id","buttonTitle","onClickButton","masterData","userInfo","length","isIdsField","userRoleControlRights","indexOf","controlMap","has","ncontrolcode","editpredefinedcomments","columnProps","field","hideColumnFilter","columnMenu","isColumnActive","active","filter","render","editId","enforceStatusID","checklistID","selectedId","pageSizes","settings","split","setting","actionColWidth","slanguagetypecode","height","gridHeight","scrollable","pageable","buttonCount","previousNext","groupable","expandField","dataResult","handleRowClick","dataStateChange","extractedColumnList","index","width","row","fieldType","ATTACHMENT","FTP","rowType","primaryKeyField","viewFile","attachmentParam","inputData","selectedRecord","userinfo","LINK","cursor","checklistKey","checkListRecord","checklistParam","needSaveButton","color","isActionRequired","left","right","borderRightWidth","textAlign","fetchRecord","editParam","primaryKeyValue","controlcode","enforcestatus","editRow"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Card, FormGroup, FormLabel, Nav, Image } from 'react-bootstrap';\r\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords } from '@progress/kendo-react-grid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { //faCalculator, \r\n    faCloudDownloadAlt, faEye, faListAlt, faPencilAlt\r\n} from '@fortawesome/free-solid-svg-icons';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\r\nimport { attachmentType, parameterType } from '../../components/Enumeration';\r\nimport SimpleGrid from '../../components/data-grid/SimpleGrid';\r\nimport enforcestatus from '../../assets/image/enforcestatus.svg'\r\nimport { AtTableWrap, FontIconWrap, FormControlStatic } from '../../components/data-grid/data-grid.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport {  LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { connect } from 'react-redux';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass ResultGrid extends React.Component {\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n            return {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                //headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n            };\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n\r\n    handleClickDelete = (deleteParam) => {\r\n        this.props.deleteRecord(deleteParam);\r\n    }\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.props.handleExpandChange(event, this.props.dataState)\r\n        }\r\n        else {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.setState({ isExpanded });\r\n        }\r\n    }\r\n    detailBand = (props) => {\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    {this.props.hasChild ?\r\n                        <SimpleGrid childList={this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || []}\r\n                            extractedColumnList={this.props.childColumnList} />\r\n                        :\r\n                        <Card>\r\n                            <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    {this.props.detailedFieldList.map((item, key) => {\r\n                                        let validationtype = true;\r\n                                        if (item.istypeValidation) {\r\n                                            if (props.dataItem['nparametertypecode'] !== parameterType.NUMERIC) {\r\n                                                validationtype = false;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (validationtype) {\r\n                                            return (\r\n                                                <Col md={item.isDecsriptionField ? 6 : 4} key={key}>\r\n                                                    { props.dataItem['nparametertypecode'] === parameterType.PREDEFINED && item.dataField==='spredefinedcomments'?  \r\n                                                    <FormGroup>\r\n                                                        <FormLabel>\r\n                                                            <FormattedMessage id={item.idsName} message={item.idsName} />\r\n                                                            {item.needHistoryButton ?\r\n                                                                <Nav.Link name={\"enforcestatuscomments\"}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2 ml-1\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: item.buttonTitle })}\r\n                                                                         //   data-for=\"tooltip_grid_wrap\"\r\n                                                                            onClick={() => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo)}\r\n                                                                            >\r\n                                                                <FontAwesomeIcon icon={faEye}   />\r\n                                                                </Nav.Link> \r\n                                                                // <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                //         style={{ display: \"inline-block\" }} >\r\n                                                                //     <FontIconWrap className=\"d-font-icon p-1\" title={this.props.intl.formatMessage({ id: item.buttonTitle })}>\r\n                                                                //         <FontAwesomeIcon\r\n                                                                //             icon={faEye}\r\n                                                                //             onClick={() => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo)}\r\n                                                                //         >\r\n                                                                //         </FontAwesomeIcon>\r\n                                                                //     </FontIconWrap>\r\n                                                                // </Nav.Link>\r\n                                                                : \"\"}\r\n                                                        </FormLabel>\r\n                                                        <FormControlStatic>\r\n                                                            {props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> : props.dataItem[item.dataField]}\r\n                                                        </FormControlStatic>\r\n                                                        <FontIconWrap className=\"d-font-icon\" \r\n                                                          data-place=\"left\" data-tip={this.props.intl.formatMessage({ id: \"IDS_EDITPREFINEDCOMMENTS\" })}\r\n                                                          hidden={this.props.userRoleControlRights &&\r\n                                                             this.props.userRoleControlRights.indexOf(this.props.controlMap.has(\"EditPredefinedComments\")\r\n                                                             && this.props.controlMap.get(\"EditPredefinedComments\").ncontrolcode) === -1}\r\n                                                          onClick={() => this.props.editpredefinedcomments(props.dataItem)\r\n                                                           }\r\n                                                         >\r\n                                                       <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </FontIconWrap> \r\n                                                    </FormGroup>:\r\n                                                       item.dataField==='spredefinedcomments'? \"\"  :\r\n                                                       <FormGroup>\r\n                                                       <FormLabel>\r\n                                                           <FormattedMessage id={item.idsName} message={item.idsName} />\r\n                                                           {item.needHistoryButton ?\r\n                                                               <Nav.Link name={\"enforcestatuscomments\"}\r\n                                                                           className=\"btn btn-circle outline-grey mr-2 ml-1\"\r\n                                                                           data-tip={this.props.intl.formatMessage({ id: item.buttonTitle })}\r\n                                                                        //   data-for=\"tooltip_grid_wrap\"\r\n                                                                           onClick={() => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo)}\r\n                                                                           >\r\n                                                               <FontAwesomeIcon icon={faEye}   />\r\n                                                               </Nav.Link> \r\n                                                               // <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                               //         style={{ display: \"inline-block\" }} >\r\n                                                               //     <FontIconWrap className=\"d-font-icon p-1\" title={this.props.intl.formatMessage({ id: item.buttonTitle })}>\r\n                                                               //         <FontAwesomeIcon\r\n                                                               //             icon={faEye}\r\n                                                               //             onClick={() => item.onClickButton(props.dataItem, this.props.masterData, this.props.userInfo)}\r\n                                                               //         >\r\n                                                               //         </FontAwesomeIcon>\r\n                                                               //     </FontIconWrap>\r\n                                                               // </Nav.Link>\r\n                                                               : \"\"}\r\n                                                       </FormLabel>\r\n                                                       <FormControlStatic>\r\n                                                           {props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                               item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> : props.dataItem[item.dataField]}\r\n                                                       </FormControlStatic> \r\n                                                   </FormGroup>}\r\n                                                </Col>\r\n                                            )\r\n                                        }\r\n                                    })}\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>}\r\n                </Col> </Row>\r\n        )\r\n    }\r\n    render() {\r\n   \r\n        //const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n\r\n        const editId = this.props.controlMap.has(\"AddParameterComments\")\r\n            && this.props.controlMap.get(\"AddParameterComments\").ncontrolcode;\r\n\r\n        const enforceStatusID = this.props.controlMap.has(\"EnforceStatus\")\r\n            && this.props.controlMap.get(\"EnforceStatus\").ncontrolcode;\r\n\r\n        const checklistID = this.props.controlMap.has(\"EditChecklist\")\r\n            ? this.props.controlMap.get(\"EditChecklist\").ncontrolcode : -1;\r\n\r\n        const selectedId = this.props.selectedId;\r\n\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n\r\n        return (\r\n            <>\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                <LocalizationProvider language={this.props.Login.userInfo.slanguagetypecode}>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_grid_wrap\" /> */}\r\n                    {/* <Tooltip openDelay={100} position=\"bottom\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                    <Grid\r\n                        style={{ height: this.props.gridHeight }}\r\n                        sortable\r\n                        resizable\r\n                        reorderable={false}\r\n                        scrollable={this.props.scrollable}\r\n                        pageable={this.props.pageable ? { buttonCount: 4, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                        groupable={this.props.groupable ? true : false}\r\n                        detail={this.detailBand}\r\n                        expandField={this.props.expandField ? this.props.expandField : false}\r\n                        onExpandChange={this.expandChange}\r\n                        data={this.props.dataResult}\r\n                        {...this.props.dataState}\r\n                        selectedField=\"selected\"\r\n                        onRowClick={this.props.handleRowClick}\r\n                        onDataStateChange={this.props.dataStateChange}>\r\n                        <GridNoRecords>\r\n                         {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                        </GridNoRecords>\r\n                        {this.props.extractedColumnList.map((item, index) =>\r\n\r\n                            <GridColumn key={index}\r\n                                // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                {...this.columnProps(item.dataField)}\r\n                                width={item.width}\r\n                                cell={(row) => (\r\n                                    <>\r\n                                        {item.fieldType === \"attachment\" && row[\"dataItem\"]['nparametertypecode'] === parameterType.ATTACHMENT &&\r\n                                            row[\"dataItem\"]['nattachmenttypecode'] === attachmentType.FTP ?\r\n                                            row.rowType === \"groupHeader\" ? null :\r\n                                                <td data-tip={row[\"dataItem\"][item.dataField]} className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n                                                    {/* <ReactTooltip /> */}\r\n                                                    <FontAwesomeIcon icon={faCloudDownloadAlt} title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\r\n                                                        onClick={() => this.props.viewFile({ ...this.props.attachmentParam, inputData: { selectedRecord: row[\"dataItem\"], userinfo: this.props.userInfo } }, row)}\r\n                                                    />{\" \"}\r\n                                                    {row[\"dataItem\"][item.dataField]}\r\n                                                </td>\r\n\r\n                                            :\r\n                                            item.fieldType === \"attachment\" && row[\"dataItem\"]['nattachmenttypecode'] === attachmentType.LINK ?\r\n                                                row.rowType === \"groupHeader\" ? null :\r\n                                                    <td>\r\n                                                        <a href={row[\"dataItem\"][item.dataField]} style={{ cursor: \"pointer\" }} onClick={() => this.props.viewFile({ ...this.props.attachmentParam, inputData: { selectedRecord: row[\"dataItem\"], userinfo: this.props.userInfo } }, row)}>\r\n                                                            {row[\"dataItem\"][item.dataField]}\r\n                                                        </a>\r\n                                                    </td>\r\n                                                :\r\n                                                item.fieldType === \"checklistview\" ?\r\n                                                    row.rowType === \"groupHeader\" ? null :\r\n                                                        row[\"dataItem\"][item.checklistKey] > 0 ?\r\n                                                            <td data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                             //data-for=\"tooltip_grid_wrap\" \r\n                                                             className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>   \r\n                                                               \r\n                                                               <FontIconWrap className=\"d-font-icon\"  // data-for=\"tooltip-grid-wrap\" \r\n                                                                   // data-for=\"tooltip-grid-wrap\" \r\n                                                                    // onClick={() => this.props.viewFile({ ...this.props.attachmentParam, inputData: { selectedRecord: row[\"dataItem\"], userinfo: this.props.userInfo } }, row)}\r\n                                                                    needSaveButton={true}\r\n                                                                    onClick={() => this.props.checkListRecord({\r\n                                                                        ...this.props.checklistParam, selectedRecord: row[\"dataItem\"], ncontrolcode: checklistID,\r\n                                                                        needSaveButton: !(this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(checklistID) === -1)\r\n                                                                    }, row)} >\r\n                                                                <FontAwesomeIcon\r\n                                                                    icon={faListAlt}\r\n                                                                  \r\n                                                                /></FontIconWrap>{\" \"}\r\n                                                                {row[\"dataItem\"][item.dataField]}\r\n                                                            </td>\r\n                                                            :\r\n                                                            <>\r\n                                                            <td data-tip={row[\"dataItem\"][item.dataField]} \r\n                                                          //  data-for=\"tooltip_grid_wrap\" \r\n                                                            className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n                                                                {row[\"dataItem\"][item.dataField]}\r\n                                                            </td>\r\n                                                            </>\r\n                                                    :\r\n                                                    item.fieldType === \"gradeColumn\" ?\r\n                                                        row.rowType === \"groupHeader\" ? null :\r\n                                                            <td\r\n                                                                data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                               // data-for=\"tooltip_grid_wrap\"\r\n                                                                className={`${selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}`}\r\n                                                                style={{ color: [row[\"dataItem\"]['scolorhexcode']] }}\r\n                                                            >\r\n                                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_grid_wrap\" /> */}\r\n                                                                {row[\"dataItem\"][item.dataField]}\r\n                                                            </td>\r\n                                                        :\r\n                                                        <td data-tip={row[\"dataItem\"][item.dataField]} \r\n                                                        //data-for=\"tooltip_grid_wrap\" \r\n                                                        className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n                                                            {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                                : row[\"dataItem\"][item.dataField]}\r\n                                                        </td>\r\n                                        }\r\n                                    </>\r\n\r\n                                )}\r\n                            />\r\n \r\n                        )}\r\n\r\n                        {this.props.isActionRequired ?\r\n                            <GridColumn\r\n                                locked\r\n                                headerClassName=\"text-center\"\r\n                                title={this.props.intl.formatMessage({ id: 'IDS_ACTION' })}\r\n                                sort={false}\r\n                                cell={(row) => (\r\n                                    row.rowType === \"groupHeader\" ? null :\r\n                                        <td className={`k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`} style={{ left: '0', right: '0', borderRightWidth: '1px', textAlign: 'center' }}>\r\n\r\n                                            <>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_tgrid_wrap\" /> */}\r\n                                                <Nav.Link className=\"action-icons-wrap\" >\r\n                                                   \r\n                                                <FontIconWrap className=\"d-font-icon\"\r\n                                                // data-for=\"tooltip_grid_wrap\" \r\n                                                data-place=\"left\" data-tip={this.props.intl.formatMessage({ id: \"IDS_PARAMETERCOMMENTS\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                onClick={() => this.props.fetchRecord({ ...this.props.editParam, primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField], selectedRecord: row[\"dataItem\"], controlcode: editId })}\r\n                                                            >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            \r\n                                                            </FontIconWrap>\r\n\r\n\r\n                                                    {/* <FontIconWrap className=\"d-font-icon\" data-for=\"tooltip_grid_wrap\" data-place=\"left\" data-tip={this.props.intl.formatMessage({ id: \"IDS_PARAMETERCOMMENTS\" })}>\r\n                                                        <FontAwesomeIcon icon={faPencilAlt}\r\n                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            onClick={() => this.props.fetchRecord({ ...this.props.editParam, primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField], selectedRecord: row[\"dataItem\"], controlcode: editId })}\r\n                                                        />\r\n                                                    </FontIconWrap> */}\r\n                                                    <FontIconWrap className=\"d-font-icon\"\r\n                                                    // data-for=\"tooltip_grid_wrap\" \r\n                                                    data-place=\"left\" data-tip={this.props.intl.formatMessage({ id: \"IDS_ENFORCESTATUS\" })}>\r\n                                                        <Image\r\n                                                            src={enforcestatus} alt=\"filer-icon\" width=\"20\" height=\"20\"\r\n                                                            className=\"ActionIconColor img-normalize\"\r\n                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(enforceStatusID) === -1}\r\n                                                            onClick={() => this.props.fetchRecord({ ...this.props.editParam, primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField], editRow: row[\"dataItem\"] })}\r\n                                                        />\r\n                                                    </FontIconWrap>\r\n                                                    {/* uncomment below lines for mean calculation */}\r\n                                                    {/* {row[\"dataItem\"].nparametertypecode === 1 ?\r\n                                                        <FontIconWrap className=\"d-font-icon\" title={this.props.intl.formatMessage({ id: \"IDS_CALCULATEMEAN\" })}>\r\n                                                            <FontAwesomeIcon icon={faCalculator}\r\n                                                                title={this.props.intl.formatMessage({ id: \"IDS_CALCULATEMEAN\" })}\r\n                                                                //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                onClick={() => this.props.getMeanTestParameter({...this.props.meanParam, selectedRecord: row[\"dataItem\"] })} \r\n                                                            />\r\n                                                        </FontIconWrap> :\"\"} */}\r\n                                                </Nav.Link>\r\n\r\n                                            </>\r\n                                        </td>\r\n                                )}\r\n                            />\r\n\r\n                            : \"\"}\r\n\r\n                    </Grid>\r\n                    {/* </Tooltip> */}\r\n                    </LocalizationProvider >\r\n                </AtTableWrap>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default connect(mapStateToProps, undefined)(injectIntl(ResultGrid));"]},"metadata":{},"sourceType":"module"}