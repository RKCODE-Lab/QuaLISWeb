{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import Axios from'axios';import{toast}from'react-toastify';// import {\n//     getComboLabelValue\n// } from '../components/CommonScript'\nimport{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';//import { intl } from '../components/App';\n//import { transactionStatus } from './../components/Enumeration';\n// export function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\n//     return function (dispatch) {\n//         if (operation === \"create\" || operation === \"update\" ) {\n//             // const Technique = rsapi.post(\"/technique/getTechnique\", {\n//             //     \"userinfo\": userInfo\n//             // });\n//             // const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\n//             //     \"userinfo\": userInfo\n//             // });\n//             let urlArray = [];\n//             if (operation === \"create\") {\n//                 urlArray = [Interfacetype];\n//             } \n//             dispatch(initRequest(true));\n//             Axios.all(urlArray)\n//                 .then(response => {\n//                       let selectedRecord = {};\n//                         selectedRecord[\"nstatus\"] = 1;\n//                         selectedRecord[\"ninstrumentcatcode\"] = 0;\n//                         selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\n//                         selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\n//                         selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                           //  Technique: response[0].data || [],\n//                             Interfacetype: response[0].data || [],\n//                             operation,\n//                             screenName,\n//                             selectedRecord,\n//                             openModal: true,\n//                             ncontrolcode, loading: false\n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch(initRequest(false));\n//                     if (error.response.status === 500) {\n//                         toast.error(error.message);\n//                     } else {\n//                         toast.warn(intl.formatMessage({\n//                             id: error.response.data\n//                         }));\n//                     }\n//                 })\n//         }\n//     }\n// }\nexport function fetchInstrumentCategoryById(editParam){return function(dispatch){var _rsapi$post;// const URL1= rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo})\nvar URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\",(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyField,editParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post));//   const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\ndispatch(initRequest(true));Axios.all([URL2]).then(function(response){var selectedRecord={};var selectedId=editParam.primaryKeyValue;selectedRecord=response[0].data;// let Technique = response[0].data;\n// let Interfacetype = response[2].data;\n//   selectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename}\n//   selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename}\n// getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\n//  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\ndispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,// Technique: response[0].data || [],\n//  Interfacetype: response[2].data || [],\noperation:editParam.operation,openModal:true,screenName:editParam.screenName,ncontrolcode:editParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/InstrumentCategoryAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","fetchInstrumentCategoryById","editParam","dispatch","URL2","post","primaryKeyField","primaryKeyValue","userInfo","all","then","response","selectedRecord","selectedId","data","type","payload","operation","openModal","screenName","ncontrolcode","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"4LAAA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,KAAR,KAAoB,gBAApB,CACA;AACA;AACA;AACA,OAASC,cAAT,KAA8B,cAA9B,CACA,OAASC,WAAT,KAA4B,eAA5B,CACA;AACA;AAGI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,SAASC,CAAAA,2BAAT,CAAsCC,SAAtC,CAAgD,CACnD,MAAO,UAASC,QAAT,CAAkB,iBACtB;AACC,GAAMC,CAAAA,IAAI,CAACR,KAAK,CAACS,IAAN,CAAW,oDAAX,6CAAoEH,SAAS,CAACI,eAA9E,CAAgGJ,SAAS,CAACK,eAA1G,8BAA4H,UAA5H,CAAwIL,SAAS,CAACM,QAAlJ,eAAX,CACH;AACGL,QAAQ,CAACH,WAAW,CAAC,IAAD,CAAZ,CAAR,CACAH,KAAK,CAACY,GAAN,CAAU,CAACL,IAAD,CAAV,EACCM,IADD,CACM,SAAAC,QAAQ,CAAG,CACb,GAAIC,CAAAA,cAAc,CAAC,EAAnB,CACA,GAAIC,CAAAA,UAAU,CAAGX,SAAS,CAACK,eAA3B,CACAK,cAAc,CAACD,QAAQ,CAAC,CAAD,CAAR,CAAYG,IAA3B,CACD;AACA;AAEF;AACA;AAEC;AACA;AACEX,QAAQ,CAAC,CACLY,IAAI,CAAEhB,cADD,CACiBiB,OAAO,CAAC,CAC9BJ,cAAc,CAAdA,cAD8B,CAE/B;AACD;AACEK,SAAS,CAACf,SAAS,CAACe,SAJU,CAK9BC,SAAS,CAAE,IALmB,CAM9BC,UAAU,CAACjB,SAAS,CAACiB,UANS,CAO9BC,YAAY,CAAClB,SAAS,CAACmB,YAPO,CAQ9BC,OAAO,CAAC,KARsB,CAQhBT,UAAU,CAAVA,UARgB,CADzB,CAAD,CAAR,CAaH,CA1BD,EA2BCU,KA3BD,CA2BO,SAAAC,KAAK,CAAI,CACZrB,QAAQ,CAAC,CAACY,IAAI,CAAEhB,cAAP,CAAuBiB,OAAO,CAAE,CAACM,OAAO,CAAC,KAAT,CAAhC,CAAD,CAAR,CACA,GAAIE,KAAK,CAACb,QAAN,CAAec,MAAf,GAA0B,GAA9B,CAAkC,CAC9B3B,KAAK,CAAC0B,KAAN,CAAYA,KAAK,CAACE,OAAlB,EACH,CAFD,IAGI,CACA5B,KAAK,CAAC6B,IAAN,CAAWH,KAAK,CAACb,QAAN,CAAeG,IAA1B,EACH,CACJ,CAnCD,EAoCH,CAzCD,CA0CF","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {toast} from 'react-toastify';\r\n// import {\r\n//     getComboLabelValue\r\n// } from '../components/CommonScript'\r\nimport { DEFAULT_RETURN} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\n//import { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    // export function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n    //     return function (dispatch) {\r\n    //         if (operation === \"create\" || operation === \"update\" ) {\r\n    //             // const Technique = rsapi.post(\"/technique/getTechnique\", {\r\n    //             //     \"userinfo\": userInfo\r\n    //             // });\r\n    \r\n    //             // const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\r\n    //             //     \"userinfo\": userInfo\r\n    //             // });\r\n               \r\n    \r\n    //             let urlArray = [];\r\n    //             if (operation === \"create\") {\r\n                   \r\n    //                 urlArray = [Interfacetype];\r\n    //             } \r\n    //             dispatch(initRequest(true));\r\n    //             Axios.all(urlArray)\r\n    //                 .then(response => {\r\n    //                       let selectedRecord = {};\r\n    //                         selectedRecord[\"nstatus\"] = 1;\r\n    //                         selectedRecord[\"ninstrumentcatcode\"] = 0;\r\n    //                         selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\r\n    //                         selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\r\n    //                         selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\r\n    //                     dispatch({\r\n    //                         type: DEFAULT_RETURN,\r\n    //                         payload: {\r\n    //                           //  Technique: response[0].data || [],\r\n    //                             Interfacetype: response[0].data || [],\r\n    //                             operation,\r\n    //                             screenName,\r\n    //                             selectedRecord,\r\n    //                             openModal: true,\r\n    //                             ncontrolcode, loading: false\r\n    //                         }\r\n    //                     })\r\n    //                 })\r\n    //                 .catch(error => {\r\n    //                     dispatch(initRequest(false));\r\n    //                     if (error.response.status === 500) {\r\n    //                         toast.error(error.message);\r\n    //                     } else {\r\n    //                         toast.warn(intl.formatMessage({\r\n    //                             id: error.response.data\r\n    //                         }));\r\n    //                     }\r\n    //                 })\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n    export function fetchInstrumentCategoryById (editParam){  \r\n        return function(dispatch){\r\n           // const URL1= rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo})\r\n            const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n         //   const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL2])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord=response[0].data\r\n               // let Technique = response[0].data;\r\n               // let Interfacetype = response[2].data;\r\n\r\n             //   selectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename}\r\n             //   selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename}\r\n\r\n              // getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\r\n              //  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                   // Technique: response[0].data || [],\r\n                  //  Interfacetype: response[2].data || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}