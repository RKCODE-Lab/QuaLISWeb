{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { attachmentType, transactionStatus } from '../components/Enumeration';\nexport function initialcombochangeget(nmaterialtypecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialcombo\", {\n      nmaterialtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getAddMaterialPopup(operation, loginInfo, selectedcombo, ncontrolCode, masterData, selectedRecord, screenname) {\n  return function (dispatch) {\n    if (masterData.SelectedMaterialCategoryFilter) {\n      if (operation === \"create\") {\n        let urlArray = [];\n        let templateData = [];\n        let data = [];\n        let toggleComponents = [];\n        let radioComponents = [];\n        let filterQueryComponents = [];\n        let dataparent = [];\n        const withoutCombocomponent = [];\n        const Layout = masterData.selectedTemplate[0].jsondata;\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              if (component.hasOwnProperty(\"parent\")) {\n                dataparent.push(component);\n              }\n\n              if (component.inputtype === 'toggle') {\n                toggleComponents.push(component);\n              }\n\n              if (component.inputtype === 'radio') {\n                radioComponents.push(component);\n              }\n\n              if (component.hasOwnProperty(\"nsqlquerycode\")) {\n                filterQueryComponents.push(component);\n              }\n\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === 'toggle') {\n                  toggleComponents.push(componentrow);\n                }\n\n                if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                  if (componentrow.hasOwnProperty(\"parent\")) {\n                    dataparent.push(componentrow);\n                  } else {\n                    data.push(componentrow);\n                  }\n                }\n\n                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\n                  filterQueryComponents.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        dataparent[0] = {\n          displaymember: dataparent[0].displaymember,\n          inputtype: dataparent[0].inputtype,\n          label: dataparent[0].label,\n          source: dataparent[0].source,\n          type: dataparent[0].type,\n          valuemember: dataparent[0].valuemember,\n          nquerybuildertablecode: dataparent[0].nquerybuildertablecode\n        };\n        let filterQueryComponents1 = [];\n        filterQueryComponents.map(temp => {\n          //filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\n          filterQueryComponents1 += temp.nsqlquerycode + ',';\n        });\n        const materialReq1 = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n          \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n          \"userinfo\": loginInfo.userInfo,\n          \"parentcolumnlist\": comboComponents,\n          \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1)\n        });\n        const materialReq2 = rsapi.post('dynamicpreregdesign/getChildValues', {\n          //ALPD-2272\n          child: Layout[0].children[0].children[0].childValue || [],\n          parentdata: {\n            nmaterialtypecode: masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode\n          },\n          parentsource: 'materialcategory',\n          'nmaterialtypecode': masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n          valuemember: 'nmaterialtypecode',\n          \"userinfo\": loginInfo.userInfo,\n          parentcolumnlist: dataparent\n        }); // const materialReq3 = rsapi.post(\"/material/getMaterialByTypeCode\",  {\n        //     nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n        //     nmaterialcatcode: masterData.SelectedMaterialCategory['nmaterialcatcode'].value\n        //     , \"userinfo\": userInfo\n        // });\n\n        urlArray = [materialReq1, materialReq2 //,materialReq3\n        ];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          templateData = response[0].data;\n          data.splice(1, 0, dataparent[0]);\n          const temp2 = { ...response[0].data,\n            ...response[1].data\n          };\n          templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo);\n          toggleComponents.map(temp => {\n            if (temp.hasOwnProperty('defaultchecked') && temp.defaultchecked === transactionStatus.YES) {\n              templateData['selectedRecord'] = { ...templateData['selectedRecord'],\n                [temp.label]: temp.defaultchecked\n              };\n            }\n          });\n          radioComponents.map(temp => {\n            if (temp.hasOwnProperty('radioOptions')) {\n              let tags = temp.radioOptions.tags;\n              tags.map(tag => {\n                if (tag.hasOwnProperty('defaultchecked')) //selectedRecord[temp.label] = tag['defaultchecked']\n                  templateData['selectedRecord'] = { ...templateData['selectedRecord'],\n                    [temp.label]: tag['defaultchecked']\n                  };\n              });\n            }\n          });\n          selectedRecord = templateData['selectedRecord'];\n\n          if (masterData.SelectedMaterialCategoryFilter && masterData.SelectedMaterialCategoryFilter.length !== 0) {\n            templateData['comboData'][\"Material Category\"].map(item => {\n              if (masterData.SelectedMaterialCategoryFilter.nmaterialcatcode === item.value) {\n                selectedRecord = {\n                  \"Material Category\": {\n                    \"label\": masterData.SelectedMaterialCategoryFilter.smaterialcatname,\n                    \"value\": masterData.SelectedMaterialCategoryFilter.nmaterialcatcode,\n                    \"item\": {\n                      \"jsondata\": item.item.jsondata,\n                      \"pkey\": \"nmaterialcatcode\",\n                      \"source\": \"materialcategory\"\n                    }\n                  }\n                };\n              }\n            });\n          } // selectedRecord={\n          //     \"Material Category\":{\n          //         \"label\":masterData.SelectedMaterialCategoryFilter.smaterialcatname,\n          //         \"value\":masterData.SelectedMaterialCategoryFilter.nmaterialcatcode\n          //     }\n          // }\n\n\n          selectedRecord['Expiry'] = transactionStatus.NO;\n          selectedRecord['Need Expiry'] = transactionStatus.NO;\n          selectedRecord['Open Expiry Need'] = transactionStatus.NO;\n          selectedRecord['Quarantine'] = transactionStatus.NO;\n          selectedRecord['Next Validation Need'] = transactionStatus.NO;\n          selectedRecord['Expiry Policy Period'] = undefined; //selectedRecord['Expiry Validations'] = 'No Expiry'\n          // if(selectedRecord['IDS_EXPIRY'])\n          // {\n          //     if(selectedRecord['IDS_EXPIRY']===transactionStatus.NO)\n          //     {\n          //         selectedRecord['IDS_NEEDEXPIRY']=transactionStatus.NO\n          //     } \n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              screenname: screenname,\n              //ismaterialSectionneed:response[2].data.ismaterialSectionneed,\n              selectedRecord,\n              showMaterialSection: false,\n              templateData,\n              openModal: true,\n              selectedcombo,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        let urlArray = [];\n        let templateData = [];\n        let data = [];\n        let dataparent = [];\n        let filterQueryComponents = [];\n        const withoutCombocomponent = [];\n        const Layout = masterData.selectedTemplate[0].jsondata;\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              if (component.hasOwnProperty(\"parent\")) {\n                dataparent.push(component);\n              }\n\n              if (component.hasOwnProperty(\"nsqlquerycode\")) {\n                filterQueryComponents.push(component);\n              }\n\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                  if (componentrow.hasOwnProperty(\"parent\")) {\n                    dataparent.push(componentrow);\n                  } else {\n                    data.push(componentrow);\n                  }\n                }\n\n                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\n                  filterQueryComponents.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        const Material = rsapi.post(\"/material/getMaterialEdit\", {\n          'nmaterialcode': masterData.SelectedMaterial.nmaterialcode,\n          'nmaterialtypecode': masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"userinfo\": loginInfo.userInfo\n        });\n        dataparent[0] = {\n          displaymember: dataparent[0].displaymember,\n          inputtype: dataparent[0].inputtype,\n          label: dataparent[0].label,\n          source: dataparent[0].source,\n          type: dataparent[0].type,\n          valuemember: dataparent[0].valuemember\n        };\n        let filterQueryComponents1 = [];\n        filterQueryComponents.map(temp => {\n          // filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\n          filterQueryComponents1 += temp.nsqlquerycode + ',';\n        });\n        const materialReq1 = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n          \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n          \"userinfo\": loginInfo.userInfo,\n          \"parentcolumnlist\": comboComponents,\n          \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1)\n        });\n        const materialReq2 = rsapi.post('dynamicpreregdesign/getChildValues', {\n          //ALPD-2272\n          child: Layout[0].children[0].children[0].childValue || [],\n          parentdata: {\n            nmaterialtypecode: masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode\n          },\n          parentsource: 'materialcategory',\n          'nmaterialtypecode': masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n          valuemember: 'nmaterialtypecode',\n          \"userinfo\": loginInfo.userInfo,\n          parentcolumnlist: dataparent\n        });\n        urlArray = [materialReq1, materialReq2, Material];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          templateData = response[0].data;\n          data = [...data, ...dataparent];\n          templateData = parentChildComboLoad(data, { ...response[0].data,\n            ...response[1].data\n          }, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo);\n          selectedRecord = response[2].data.EditedMaterial[0];\n\n          if (response[2].data[\"EditedMaterial\"].length > 0) {\n            if (response[2].data[\"MaterialDateFeild\"] !== undefined) {\n              response[2].data[\"MaterialDateFeild\"].map(temp => {\n                response[2].data[\"EditedMaterial\"][0][temp] = rearrangeDateFormat(loginInfo.userInfo, response[2].data[\"EditedMaterial\"][0][temp]);\n              });\n              response[2].data[\"DateFeildsMaterial\"].map(temp => {\n                if (response[2].data[\"EditedMaterial\"][0].hasOwnProperty(temp) && response[2].data[\"EditedMaterial\"][0][temp] === '-') {\n                  delete response[2].data[\"EditedMaterial\"][0][temp];\n                }\n              });\n            } else {\n              response[2].data[\"DateFeildsMaterial\"].map(temp => {\n                if (response[2].data[\"EditedMaterial\"][0].hasOwnProperty(temp) && response[2].data[\"EditedMaterial\"][0][temp] === '-') {\n                  delete response[2].data[\"EditedMaterial\"][0][temp];\n                }\n              });\n            }\n          }\n\n          selectedRecord['Material Category'] = { ...selectedRecord['Material Category'],\n            needsectionwise: response[2].data.EditedMaterial[0].needsectionwise\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              screenname: 'IDS_MATERIAL',\n              isSelectedRecordChange: false,\n              showMaterialSection: false,\n              templateData,\n              openModal: true,\n              selectedcombo,\n              selectedRecord,\n              ncontrolCode,\n              loading: false,\n              showSectionWhileEdit: false //,  ismaterialSectionneed:response[2].data.EditedMaterial[0].jsondata.needsectionwise\n\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CONFIGMATERIALCAT\"\n      }));\n    }\n  };\n}\nexport function getMaterialDetails(inputData, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"material/getMaterialDetails\", {\n      \"nmaterialcode\": inputData.nmaterialcode,\n      \"nmaterialcatcode\": masterData.SelectedMaterialCategoryFilter.nmaterialcatcode,\n      \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n      \"userinfo\": userInfo,\n      fromDate: masterData.fromDate,\n      toDate: masterData.toDate\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialEdit(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n\n    if (operation === \"create\") {\n      const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [EDQMManufacturer];\n    } else {\n      const Material = rsapi.post(\"/material/getMaterialEdit\", {\n        [primaryKeyName]: masterData.SelectedMaterial.jsondata.nmaterialcode,\n        'nmaterialtypecode': masterData.SelectedMaterialType.nmaterialtypecode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [Material];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n\n      if (operation === \"update\") {\n        selectedRecord = response[2].data.EditedMaterial[0].jsondata;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isOpen: true,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": 1\n          },\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialByTypeCode(selectedcombo, selectedMaterialCat, Data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialByTypeCode\", selectedMaterialCat !== undefined ? {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n      nmaterialcatcode: selectedMaterialCat['nmaterialcatcode'].value,\n      fromDate: Data.fromDate,\n      toDate: Data.toDate,\n      \"userinfo\": userInfo,\n      'nflag': 1\n    } : {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let masterData = {};\n      let tabScreen;\n\n      if (response[\"data\"].ismaterialSectionneed === 3) {\n        tabScreen = 'IDS_MATERIALSECTION';\n      }\n\n      masterData = { ...Data,\n        ...response.data,\n        tabScreen,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getMaterialReload(selectedcombo, selectedMaterialCat, Data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialByTypeCode\", selectedMaterialCat !== undefined ? {\n      nmaterialtypecode: selectedcombo[0]['nmaterialtypecode'],\n      nmaterialcatcode: selectedMaterialCat['nmaterialcatcode'],\n      fromDate: Data.fromDate,\n      toDate: Data.toDate,\n      \"userinfo\": userInfo,\n      'nflag': 1\n    } : {\n      nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let masterData = {};\n      masterData = { ...Data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getAddMaterialSectionPopup(Data, userInfo, updateInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialSection\", {\n      \"userinfo\": userInfo,\n      'nmaterialcode': Data[\"SelectedMaterial\"][\"nmaterialcode\"],\n      'needSectionwise': Data[\"SelectedMaterialCategory\"].needSectionwise\n    }).then(response => {\n      let masterData = {};\n\n      if (Array.isArray(response.data)) {\n        let MaterialSectionOptions = [];\n        MaterialSectionOptions = response.data;\n        const productCatMap = constructOptionList(response.data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n        const productCategoryList = {\n          productCategoryList: productCatMap.get(\"OptionList\")\n        };\n        masterData = { ...Data,\n          ...productCategoryList\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: \"create\",\n            masterData,\n            updateInfo,\n            ncontrolCode,\n            openModal: true,\n            ismaterialsectionEdit: false,\n            isneedcombomulti: false,\n            screenname: \"IDS_MATERIALSECTION\",\n            showMaterialSection: true,\n            loading: false,\n            skip: 0,\n            take: 20\n          }\n        });\n      } else {\n        toast.warn(response.data);\n        masterData = { ...Data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: \"create\",\n            masterData,\n            updateInfo,\n            openModal: false,\n            ismaterialsectionEdit: false,\n            isneedcombomulti: false,\n            screenname: \"IDS_MATERIALSECTION\",\n            showMaterialSection: true,\n            loading: false,\n            skip: 0,\n            take: 20\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error);\n    });\n  };\n}\nexport function getMaterialSectionEdit(inputparam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = { ...inputparam.selectedRecord\n    };\n    dispatch(initRequest(true));\n    const url1 = rsapi.post(\"/material/getActiveMaterialSectionById\", {\n      editRow: inputparam[\"editRow\"],\n      ncontrolCode: inputparam.ncontrolCode,\n      operation: inputparam.operation,\n      primaryKeyField: \"nmaterialsectioncode\",\n      primaryKeyValue: inputparam.primaryKeyValue,\n      selectedId: inputparam.primaryKeyValue,\n      \"userinfo\": inputparam.userInfo\n    });\n    const url2 = rsapi.post(\"/material/getMaterialSection\", {\n      \"userinfo\": inputparam.userInfo,\n      nmaterialcode: inputparam[\"editRow\"].nmaterialcode,\n      primaryKeyValue: inputparam.primaryKeyValue,\n      needSectionwise: inputparam.masterData[\"SelectedMaterialCategory\"].needSectionwise,\n      nmaterialsectioncode: inputparam['editRow'].nmaterialsectioncode //,nflag:1\n\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const productCatMap = constructOptionList(response[0].data.MaterialSectionEditData || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      selectedRecord[\"nmaterialsectioncode\"] = productCatMap.get(\"OptionList\");\n      selectedRecord[\"nreorderlevel\"] = inputparam[\"editRow\"].nreorderlevel;\n      selectedRecord[\"nmaterialsectioncodeprimaryKeyValue\"] = inputparam.primaryKeyValue;\n\n      if (!Array.isArray(response[1].data)) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord,\n            operation: \"update\",\n            isneedcombomulti: true,\n            selectedId: inputparam.primaryKeyValue,\n            openModal: true,\n            showMaterialSection: true,\n            ismaterialsectionEdit: true,\n            screenname: \"IDS_MATERIALSECTION\",\n            ncontrolCode: inputparam.ncontrolCode,\n            loading: false\n          }\n        });\n      }\n\n      const productCatMap1 = constructOptionList(response[1].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const productCategoryList2 = {\n        productCategoryList: productCatMap1.get(\"OptionList\")\n      }; //productCategoryList2['productCategoryList']={...selectedRecord[\"nmaterialsectioncode\"]}\n\n      let masterData = {};\n      masterData = { ...inputparam.masterData,\n        ...productCategoryList2\n      };\n\n      if (Array.isArray(response[1].data)) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord,\n            masterData,\n            operation: \"update\",\n            isneedcombomulti: true,\n            selectedId: inputparam.primaryKeyValue,\n            openModal: true,\n            showMaterialSection: true,\n            ismaterialsectionEdit: true,\n            screenname: \"IDS_MATERIALSECTION\",\n            ncontrolCode: inputparam.ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function addSafetyInstructions(Data, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/material/getMaterialSafetyInstructions\", {\n      'nmaterialcode': Data[\"SelectedMaterial\"].nmaterialcode,\n      \"userinfo\": userInfo,\n      nflag: 1\n    }).then(response => {\n      if (Array.isArray(response.data[\"selectedTemplateSafetyInstructions\"])) {\n        let selectedRecord = response.data[\"MaterialSafetyInstructions\"].length > 0 ? response.data[\"MaterialSafetyInstructions\"][0].jsondata : [];\n        let masterData = {};\n        const MaterialSafetyInstructions = {\n          MaterialSafetyInstructions: response.data[\"MaterialSafetyInstructions\"]\n        };\n        masterData = { ...Data,\n          ...MaterialSafetyInstructions // ALPD-854\n          // searchedData: undefined \n\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            loadEsign: false,\n            selectedRecord,\n            ncontrolCode: ncontrolcode,\n            openModal: true,\n            screenname: \"IDS_MATERIALSAFETYINSTRUCTIONS\"\n          }\n        });\n      } else {\n        toast.warn(response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function addMaterialProperty(Data, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let date;\n    let timeZoneList;\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    const getMaterialSafety = rsapi.post(\"/material/getMaterialSafetyInstructions\", {\n      'nmaterialcode': Data[\"SelectedMaterial\"].nmaterialcode,\n      \"userinfo\": userInfo,\n      nflag: 2\n    });\n    urlArray = [getMaterialSafety, timezone];\n    Axios.all(urlArray).then(response => {\n      if (Array.isArray(response[0].data[\"selectedTemplateProperties\"])) {\n        let selectedRecord = response[0].data[\"MaterialProperties\"].length > 0 ? response[0].data[\"MaterialProperties\"][0].jsondata : [];\n        let masterData = {};\n        const MaterialProperties = {\n          MaterialProperties: response[0].data[\"MaterialProperties\"]\n        }; // if (response[0].data[\"MaterialProperties\"].length > 0) {\n        //     if (response[0].data[\"MaterialPropertiesDateFeild\"]) {\n        //         response[0].data[\"MaterialPropertiesDateFeild\"].map((temp) => {\n        //             response[0].data[\"MaterialProperties\"][0].jsondata[temp] =\n        //                 rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[temp])\n        //         })\n        //     }\n        // }\n\n        response[0].data['selectedTemplateProperties'][0]['jsondata'].map(row => {\n          row.children.map(column => {\n            column.children.map((component, i) => {\n              if (component.inputtype === 'date') {\n                if (response[0].data[\"MaterialProperties\"][0]) {\n                  if (response[0].data[\"MaterialProperties\"][0].jsondata[component.label] !== \"-\") {\n                    if (response[0].data[\"MaterialProperties\"][0]) {\n                      response[0].data[\"MaterialProperties\"][0].jsondata[component.label] = rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[component.label]);\n                    }\n                  } else {\n                    if (response[0].data[\"MaterialProperties\"][0]) {\n                      delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label];\n                    }\n                  }\n                } else {\n                  if (response[0].data[\"MaterialProperties\"][0]) {\n                    delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label];\n                  }\n                }\n              }\n            });\n          });\n        }); //   response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'] =\n        // rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\n        //new Date(response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\n\n        masterData = { ...Data,\n          ...MaterialProperties // ALPD-854\n          // searchedData: undefined \n\n        };\n        Data['selectedTemplateProperties'][0].jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'date') {\n                if (component.hasOwnProperty('timezone')) {\n                  const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n                  timeZoneList = timeZoneListMap.get(\"OptionList\");\n                  response[0].data[\"DateFeildsProperties\"].map(temp => {\n                    if (!selectedRecord.hasOwnProperty(temp)) {\n                      selectedRecord[`tz${temp}`] = timeZoneList[0];\n                    }\n                  });\n                }\n              }\n            });\n          });\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            loadEsign: false,\n            selectedRecord,\n            isSelectedRecordChange: false,\n            timeZoneList,\n            ncontrolCode: ncontrolcode,\n            openModal: true,\n            screenname: \"IDS_MATERIALPROPERTY\"\n          }\n        });\n      } else {\n        toast.warn(response.data || response[0].data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function addMaterialFile(inputParam, param) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/material/getMaterialLinkMaster\", {\n      nmaterialcode: param.nmaterialcode && param.nmaterialcode,\n      userinfo: inputParam.userInfo\n    })];\n\n    if (inputParam.operation === \"update\") {\n      urlArray.push(rsapi.post(\"/material/editMaterialMsdsAttachment\", {\n        userinfo: inputParam.userInfo,\n        nmaterialcode: param.nmaterialcode && param.nmaterialcode,\n        nmaterialfilecode: inputParam.selectedRecord.nmaterialfilecode\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n\n      if (inputParam.operation === \"update\") {\n        editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject[\"jsondata\"].nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject[\"jsondata\"].slinkname,\n            \"value\": editObject[\"jsondata\"].nlinkcode\n          };\n          link = {\n            slinkfilename: editObject[\"jsondata\"].sfilename,\n            slinkdescription: editObject[\"jsondata\"].sdescription,\n            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus === 3 ? 3 : 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\";\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject[\"jsondata\"].sfilesize,\n            nfilesize: editObject[\"jsondata\"].nfilesize,\n            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\n            ssystemfilename: editObject[\"jsondata\"].ssystemfilename,\n            sfilename: editObject[\"jsondata\"].sfilename,\n            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus\n          };\n        }\n\n        selectedRecord = { ...link,\n          sdescription: editObject[\"jsondata\"].sdescription,\n          nmaterialfilecode: editObject[\"jsondata\"].nmaterialfilecode,\n          nattachmenttypecode: editObject[\"jsondata\"].nattachmenttypecode,\n          nlinkcode\n        };\n      } else {\n        selectedRecord = {\n          nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n          nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n          disabled\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          dcreateddate: inputParam.selectedRecord && rearrangeDateFormat(inputParam.userInfo, inputParam.selectedRecord.dcreateddate),\n          operation: inputParam.operation,\n          screenname: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addMaterialAccountingProperty(Data, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let date;\n    let timeZoneList;\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    const getMaterialSafety = rsapi.post(\"/material/getMaterialAcountingProperties\", {\n      'nmaterialcode': Data[\"SelectedMaterial\"].nmaterialcode,\n      \"userinfo\": userInfo,\n      nflag: 2\n    });\n    urlArray = [getMaterialSafety, timezone];\n    Axios.all(urlArray).then(response => {\n      if (Array.isArray(response[0].data[\"selectedTemplateProperties\"])) {\n        let selectedRecord = response[0].data[\"MaterialProperties\"].length > 0 ? response[0].data[\"MaterialProperties\"][0].jsondata : [];\n        let masterData = {};\n        const MaterialProperties = {\n          MaterialProperties: response[0].data[\"MaterialProperties\"]\n        };\n        const selectedTemplateProperties = response[0].data[\"selectedTemplateProperties\"]; // if (response[0].data[\"MaterialProperties\"].length > 0) \n        //     if (response[0].data[\"MaterialPropertiesDateFeild\"]) {\n        //         response[0].data[\"MaterialPropertiesDateFeild\"].map((temp) => {\n        //             response[0].data[\"MaterialProperties\"][0].jsondata[temp] =\n        //                 rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[temp])\n        //         })\n        //     }\n        // }\n\n        response[0].data['selectedTemplateProperties'][0]['jsondata'].map(row => {\n          row.children.map(column => {\n            column.children.map((component, i) => {\n              if (component.inputtype === 'date') {\n                if (response[0].data[\"MaterialProperties\"][0]) {\n                  if (response[0].data[\"MaterialProperties\"][0].jsondata[component.label] !== \"-\") {\n                    if (response[0].data[\"MaterialProperties\"][0]) {\n                      response[0].data[\"MaterialProperties\"][0].jsondata[component.label] = rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[component.label]);\n                    }\n                  } else {\n                    if (response[0].data[\"MaterialProperties\"][0]) {\n                      delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label];\n                    }\n                  }\n                } else {\n                  if (response[0].data[\"MaterialProperties\"][0]) {\n                    delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label];\n                  }\n                }\n              }\n            });\n          });\n        }); //   response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'] =\n        // rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\n        //new Date(response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\n\n        masterData = { ...Data,\n          ...MaterialProperties,\n          selectedTemplateProperties // ALPD-854\n          // searchedData: undefined \n\n        };\n        Data['selectedTemplateProperties'][0].jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'date') {\n                if (component.hasOwnProperty('timezone')) {\n                  const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n                  timeZoneList = timeZoneListMap.get(\"OptionList\");\n                  response[0].data[\"DateFeildsProperties\"].map(temp => {\n                    if (!selectedRecord.hasOwnProperty(temp)) {\n                      selectedRecord[`tz${temp}`] = timeZoneList[0];\n                    }\n                  });\n                }\n              }\n            });\n          });\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            loadEsign: false,\n            selectedRecord,\n            isSelectedRecordChange: false,\n            timeZoneList,\n            ncontrolCode: ncontrolcode,\n            openModal: true,\n            screenname: \"IDS_MATERIALACCOUNTING\"\n          }\n        });\n      } else {\n        toast.warn(response.data || response[0].data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getAddMaterialAccountingPopup(operation, loginInfo, selectedcombo, ncontrolCode, masterData, selectedRecord, screenname, samplestate) {\n  return function (dispatch) {\n    if (masterData.SelectedMaterialCategoryFilter) {\n      if (operation === \"create\") {\n        let urlArray = [];\n        let templateData = [];\n        let data = [];\n        let toggleComponents = [];\n        let radioComponents = [];\n        let filterQueryComponents = [];\n        let dataparent = [];\n        const withoutCombocomponent = [];\n        let selectedTemplate = [];\n        let Layout = masterData.selectedTemplate[0].jsondata;\n\n        if (samplestate === \"powder\" || samplestate === \"Liquid\") {\n          Layout = masterData.selectedTemplatepowder[0].jsondata;\n          selectedTemplate = masterData.selectedTemplatepowder;\n        } // else if(samplestate===\"Liquid\"){\n        //      Layout = masterData.selectedTemplatesolution[0].jsondata \n        //      selectedTemplate=masterData.selectedTemplatesolution\n        // }\n        else {\n          selectedTemplate = masterData.selectedTemplatePellet;\n        }\n\n        masterData = {\n          samplestate: samplestate,\n          ...masterData,\n          selectedTemplate\n        }; //const Layout = masterData.selectedTemplate[0].jsondata\n\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              if (component.hasOwnProperty(\"parent\")) {\n                dataparent.push(component);\n              }\n\n              if (component.inputtype === 'toggle') {\n                toggleComponents.push(component);\n              }\n\n              if (component.inputtype === 'radio') {\n                radioComponents.push(component);\n              }\n\n              if (component.hasOwnProperty(\"nsqlquerycode\")) {\n                filterQueryComponents.push(component);\n              }\n\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === 'toggle') {\n                  toggleComponents.push(componentrow);\n                }\n\n                if (componentrow.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\")) {\n                  if (componentrow.hasOwnProperty(\"parent\")) {\n                    dataparent.push(componentrow);\n                  } else {\n                    data.push(componentrow);\n                  }\n                }\n\n                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\n                  filterQueryComponents.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" && !component.hasOwnProperty(\"parent\") ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        const Material = rsapi.post(\"/material/getMaterialAvailableQty\", {\n          'nmaterialcode': masterData.SelectedMaterial.nmaterialcode,\n          \"userinfo\": loginInfo.userInfo\n        });\n        dataparent[0] = {\n          displaymember: dataparent[0].displaymember,\n          inputtype: dataparent[0].inputtype,\n          label: dataparent[0].label,\n          source: dataparent[0].source,\n          type: dataparent[0].type,\n          valuemember: dataparent[0].valuemember,\n          nquerybuildertablecode: dataparent[0].nquerybuildertablecode\n        };\n        let filterQueryComponents1 = [];\n        filterQueryComponents.map(temp => {\n          filterQueryComponents1 += temp.nsqlquerycode + ',';\n        });\n        const materialReq1 = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n          \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n          \"userinfo\": loginInfo.userInfo,\n          \"parentcolumnlist\": comboComponents,\n          \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1)\n        });\n        const materialReq2 = rsapi.post('dynamicpreregdesign/getChildValues', {\n          child: Layout[0].children[0].children[0].childValue || [],\n          parentdata: {\n            nmaterialtypecode: masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode\n          },\n          parentsource: 'materialcategory',\n          'nmaterialtypecode': masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\n          valuemember: 'nmaterialtypecode',\n          \"userinfo\": loginInfo.userInfo,\n          parentcolumnlist: dataparent\n        });\n        urlArray = [materialReq1, materialReq2, Material //,materialReq3\n        ];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          templateData = response[0].data;\n          data.splice(1, 0, dataparent[0]);\n          const temp2 = { ...response[0].data,\n            ...response[1].data\n          };\n          templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo);\n          toggleComponents.map(temp => {\n            if (temp.hasOwnProperty('defaultchecked') && temp.defaultchecked === transactionStatus.YES) {\n              templateData['selectedRecord'] = { ...templateData['selectedRecord'],\n                [temp.label]: temp.defaultchecked\n              };\n            }\n          });\n          radioComponents.map(temp => {\n            if (temp.hasOwnProperty('radioOptions')) {\n              let tags = temp.radioOptions.tags;\n              tags.map(tag => {\n                if (tag.hasOwnProperty('defaultchecked')) templateData['selectedRecord'] = { ...templateData['selectedRecord'],\n                  [temp.label]: tag['defaultchecked']\n                };\n              });\n            }\n          });\n          const defaultValue = [];\n          response[2].data.Productname.map(item => {\n            defaultValue.push({\n              label: item['sproductname'],\n              value: item['sproductname'],\n              item: item\n            });\n            return defaultValue;\n          });\n          templateData['comboData'] = { ...templateData['comboData'],\n            'SampleName': defaultValue\n          };\n          selectedRecord = templateData['selectedRecord']; //delete templateData.selectedRecord[\"Material Category\"]\n\n          if (masterData.SelectedMaterialCategoryFilter && masterData.SelectedMaterialCategoryFilter.length !== 0) {\n            templateData['comboData'][\"Material Category\"].map(item => {\n              if (masterData.SelectedMaterialCategoryFilter.nmaterialcatcode === item.value) {\n                selectedRecord = {\n                  \"Material Category\": {\n                    \"label\": masterData.SelectedMaterialCategoryFilter.smaterialcatname,\n                    \"value\": masterData.SelectedMaterialCategoryFilter.nmaterialcatcode,\n                    \"item\": {\n                      \"jsondata\": item.item.jsondata,\n                      \"pkey\": \"nmaterialcatcode\",\n                      \"source\": \"materialcategory\"\n                    }\n                  }\n                };\n              }\n            });\n          }\n\n          selectedRecord['AvailableQty'] = response[2].data.AvailableQty;\n          selectedRecord['AvailableUraniumQty'] = response[2].data.AvailableUraniumQty;\n          selectedRecord['MaterialName'] = masterData.SelectedMaterial[\"Material Name\"]; //selectedRecord['SampleName']= masterData.SelectedMaterial[\"Material Name\"]\n\n          selectedRecord['suraniumconversionfactor'] = response[2].data.suraniumconversionfactor;\n          selectedRecord['Transaction Date'] = rearrangeDateFormat(loginInfo.userInfo, masterData.Currentdate);\n          selectedRecord = {\n            \"materialinventorytype\": {\n              \"label\": response[2].data.Inventorytype.sinventorytypename,\n              \"value\": response[2].data.Inventorytype.ninventorytypecode\n            },\n            \"SampleName\": {\n              \"label\": masterData.SelectedMaterial[\"Material Name\"],\n              \"value\": 0\n            },\n            ...selectedRecord\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              screenname: screenname,\n              masterData: masterData,\n              //ismaterialSectionneed:response[2].data.ismaterialSectionneed,\n              selectedRecord,\n              showMaterialSection: false,\n              templateData,\n              openModal: true,\n              selectedcombo,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CONFIGMATERIALCAT\"\n      }));\n    }\n  };\n}\nexport function getReportDetails(masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"material/getUraniumContentType\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      //let UraniumContentType=;\n      const uraniumcontenttypeMap = constructOptionList(response.data.lstUraniumContentType || [], \"nuraniumcontenttypecode\", \"suraniumcontenttype\", undefined, undefined, false);\n      const UraniumContentType = uraniumcontenttypeMap.get(\"OptionList\");\n      const accountingPlantGroupMap = constructOptionList(response.data.lstAccountingPlantGroup || [], \"nmaterialaccountinggroupcode\", \"smaterialaccountinggroupname\", undefined, undefined, false);\n      const accountingPlantGroup = accountingPlantGroupMap.get(\"OptionList\"); //  const defaultValue = [];\n      // response.data.month.map((item, index)=> {\n      //     defaultValue.push({\n      //         label: item[index],\n      //         item: index\n      //       })\n      //     return defaultValue\n      //   });\n\n      const listOfMonth = Object.keys(response.data.month).map(key => ({\n        label: response.data.month[key],\n        value: parseInt(key)\n      }));\n      masterData = { ...masterData,\n        UraniumContentType,\n        listOfMonth,\n        accountingPlantGroup\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          modalShow: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/MaterialAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","parentChildComboLoad","rearrangeDateFormat","toast","Axios","initRequest","intl","attachmentType","transactionStatus","initialcombochangeget","nmaterialtypecode","data","userInfo","dispatch","post","then","response","masterData","searchedData","undefined","type","payload","loading","catch","error","formatMessage","id","message","getAddMaterialPopup","operation","loginInfo","selectedcombo","ncontrolCode","selectedRecord","screenname","SelectedMaterialCategoryFilter","urlArray","templateData","toggleComponents","radioComponents","filterQueryComponents","dataparent","withoutCombocomponent","Layout","selectedTemplate","jsondata","map","row","children","column","component","hasOwnProperty","push","inputtype","componentrow","comboComponents","displaymember","label","source","valuemember","nquerybuildertablecode","filterQueryComponents1","temp","nsqlquerycode","materialReq1","SelectedMaterialTypeFilter","substring","length","materialReq2","child","childValue","parentdata","parentsource","parentcolumnlist","all","splice","temp2","slanguagetypecode","defaultchecked","YES","tags","radioOptions","tag","item","nmaterialcatcode","value","smaterialcatname","NO","showMaterialSection","openModal","status","warn","Material","SelectedMaterial","nmaterialcode","SelectedMaterialType","EditedMaterial","needsectionwise","isSelectedRecordChange","showSectionWhileEdit","getMaterialDetails","inputData","fromDate","toDate","getMaterialEdit","screenName","primaryKeyName","EDQMManufacturer","isOpen","getMaterialByTypeCode","selectedMaterialCat","Data","tabScreen","ismaterialSectionneed","skip","take","getMaterialReload","getAddMaterialSectionPopup","updateInfo","needSectionwise","Array","isArray","MaterialSectionOptions","productCatMap","productCategoryList","get","ismaterialsectionEdit","isneedcombomulti","getMaterialSectionEdit","inputparam","url1","editRow","primaryKeyField","primaryKeyValue","selectedId","url2","nmaterialsectioncode","MaterialSectionEditData","nreorderlevel","productCatMap1","productCategoryList2","addSafetyInstructions","ncontrolcode","nflag","MaterialSafetyInstructions","loadEsign","addMaterialProperty","date","timeZoneList","timezone","getMaterialSafety","MaterialProperties","i","timeZoneListMap","addMaterialFile","inputParam","param","userinfo","nmaterialfilecode","linkMap","LinkMaster","linkmaster","defaultLink","filter","items","ndefaultlink","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","sdescription","nlinkdefaultstatus","ndefaultstatus","sfilesize","nfilesize","ssystemfilename","AttachmentType","FTP","dcreateddate","linkMaster","showSaveContinue","editFiles","addMaterialAccountingProperty","selectedTemplateProperties","getAddMaterialAccountingPopup","samplestate","selectedTemplatepowder","selectedTemplatePellet","defaultValue","Productname","AvailableQty","AvailableUraniumQty","suraniumconversionfactor","Currentdate","Inventorytype","sinventorytypename","ninventorytypecode","getReportDetails","uraniumcontenttypeMap","lstUraniumContentType","UraniumContentType","accountingPlantGroupMap","lstAccountingPlantGroup","accountingPlantGroup","listOfMonth","Object","keys","month","key","parseInt","modalShow"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { attachmentType, transactionStatus } from '../components/Enumeration';\r\n\r\nexport function initialcombochangeget(nmaterialtypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialcombo\", { nmaterialtypecode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const masterData = { ...data, ...response.data, searchedData: undefined }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getAddMaterialPopup(operation, loginInfo, selectedcombo, ncontrolCode, masterData, selectedRecord,screenname) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedMaterialCategoryFilter) {\r\n            if (operation === \"create\") {\r\n                let urlArray = [];\r\n                let templateData = [];\r\n                let data = [];\r\n                let toggleComponents = [];\r\n                let radioComponents = [];\r\n                let filterQueryComponents = [];\r\n                let dataparent = [];\r\n                const withoutCombocomponent = []\r\n                const Layout = masterData.selectedTemplate[0].jsondata\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"parent\")) {\r\n                                dataparent.push(component)\r\n                            }\r\n                            if (component.inputtype === 'toggle') {\r\n                                toggleComponents.push(component)\r\n                            }\r\n                            if (component.inputtype === 'radio') {\r\n                                radioComponents.push(component)\r\n                            }\r\n                            if (component.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                filterQueryComponents.push(component)\r\n                            }\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === 'toggle') {\r\n                                    toggleComponents.push(componentrow)\r\n                                }\r\n                                if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                    if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                        dataparent.push(componentrow)\r\n                                    }\r\n                                    else {\r\n                                        data.push(componentrow)\r\n                                    }\r\n\r\n                                }\r\n                                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                    filterQueryComponents.push(componentrow)\r\n                                }\r\n                            })\r\n                                : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? \r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data\r\n\r\n                dataparent[0] = {\r\n                    displaymember: dataparent[0].displaymember,\r\n                    inputtype: dataparent[0].inputtype,\r\n                    label: dataparent[0].label,\r\n                    source: dataparent[0].source,\r\n                    type: dataparent[0].type,\r\n                    valuemember: dataparent[0].valuemember,\r\n                    nquerybuildertablecode: dataparent[0].nquerybuildertablecode\r\n                }\r\n                let filterQueryComponents1 = []\r\n                filterQueryComponents.map(temp => {\r\n                    //filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\r\n                    filterQueryComponents1 += temp.nsqlquerycode + ','\r\n                })\r\n                const materialReq1 = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                    {\r\n                        \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode\r\n                        , \"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\r\n                        \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1)\r\n                    });\r\n                const materialReq2 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                    //ALPD-2272\r\n                    child: Layout[0].children[0].children[0].childValue || [],\r\n                    parentdata: { nmaterialtypecode: masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode },\r\n                    parentsource: 'materialcategory',\r\n                    'nmaterialtypecode':masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\r\n                    valuemember: 'nmaterialtypecode',\r\n                    \"userinfo\": loginInfo.userInfo,\r\n                    parentcolumnlist: dataparent\r\n                });\r\n                // const materialReq3 = rsapi.post(\"/material/getMaterialByTypeCode\",  {\r\n                //     nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\r\n                //     nmaterialcatcode: masterData.SelectedMaterialCategory['nmaterialcatcode'].value\r\n                //     , \"userinfo\": userInfo\r\n                // });\r\n                urlArray = [materialReq1, materialReq2\r\n                    //,materialReq3\r\n                ];\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        templateData = response[0].data;\r\n                        data.splice(1, 0, dataparent[0])\r\n                        const temp2 = { ...response[0].data, ...response[1].data }\r\n                        templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo)\r\n                        toggleComponents.map((temp) => {\r\n                            if (temp.hasOwnProperty('defaultchecked') && temp.defaultchecked === transactionStatus.YES) {\r\n                                templateData['selectedRecord'] = {\r\n                                    ...templateData['selectedRecord'],\r\n                                    [temp.label]: temp.defaultchecked\r\n                                }\r\n                            }\r\n                        })\r\n                        radioComponents.map((temp) => {\r\n                            if (temp.hasOwnProperty('radioOptions')) {\r\n                                let tags=temp.radioOptions.tags\r\n                                tags.map((tag) => {\r\n                                    if(tag.hasOwnProperty('defaultchecked'))\r\n                                    //selectedRecord[temp.label] = tag['defaultchecked']\r\n                                    templateData['selectedRecord'] = {\r\n                                        ...templateData['selectedRecord'],\r\n                                        [temp.label]: tag['defaultchecked']\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                        selectedRecord = templateData['selectedRecord']\r\n                        if(masterData.SelectedMaterialCategoryFilter&&masterData.SelectedMaterialCategoryFilter.length!==0){\r\n                            templateData['comboData'][\"Material Category\"].map(item=>{\r\n                                if (masterData.SelectedMaterialCategoryFilter.nmaterialcatcode === item.value) {\r\n                                    selectedRecord = {\r\n                                        \"Material Category\": {\r\n                                            \"label\": masterData.SelectedMaterialCategoryFilter.smaterialcatname,\r\n                                            \"value\": masterData.SelectedMaterialCategoryFilter.nmaterialcatcode,\r\n                                            \"item\": { \"jsondata\": item.item.jsondata,\"pkey\": \"nmaterialcatcode\", \"source\": \"materialcategory\" }                               \r\n                                        }\r\n                                    }\r\n                                }\r\n                       })      \r\n                     }\r\n                       \r\n                        // selectedRecord={\r\n                        //     \"Material Category\":{\r\n                        //         \"label\":masterData.SelectedMaterialCategoryFilter.smaterialcatname,\r\n                        //         \"value\":masterData.SelectedMaterialCategoryFilter.nmaterialcatcode\r\n                        //     }\r\n                        // }\r\n                        selectedRecord['Expiry'] = transactionStatus.NO;\r\n                        selectedRecord['Need Expiry'] = transactionStatus.NO;\r\n                        selectedRecord['Open Expiry Need'] = transactionStatus.NO;\r\n                        selectedRecord['Quarantine'] = transactionStatus.NO;\r\n                        selectedRecord['Next Validation Need'] = transactionStatus.NO;\r\n                        selectedRecord['Expiry Policy Period'] = undefined\r\n                        //selectedRecord['Expiry Validations'] = 'No Expiry'\r\n                        // if(selectedRecord['IDS_EXPIRY'])\r\n                        // {\r\n                        //     if(selectedRecord['IDS_EXPIRY']===transactionStatus.NO)\r\n                        //     {\r\n                        //         selectedRecord['IDS_NEEDEXPIRY']=transactionStatus.NO\r\n                        //     } \r\n                        // }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                operation, screenname: screenname,\r\n                                //ismaterialSectionneed:response[2].data.ismaterialSectionneed,\r\n                                selectedRecord, showMaterialSection: false, templateData, openModal: true, selectedcombo,\r\n                                ncontrolCode, loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                let urlArray = [];\r\n                let templateData = [];\r\n                let data = [];\r\n                let dataparent = [];\r\n                let filterQueryComponents = [];\r\n                const withoutCombocomponent = []\r\n                const Layout = masterData.selectedTemplate[0].jsondata\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"parent\")) {\r\n                                dataparent.push(component)\r\n                            }\r\n                            if (component.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                filterQueryComponents.push(component)\r\n                            }\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                    if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                        dataparent.push(componentrow)\r\n                                    }\r\n                                    else {\r\n                                        data.push(componentrow)\r\n                                    }\r\n                                }\r\n                                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                    filterQueryComponents.push(componentrow)\r\n                                }\r\n                            })\r\n                                : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data\r\n                const Material = rsapi.post(\"/material/getMaterialEdit\", { 'nmaterialcode': masterData.SelectedMaterial.nmaterialcode,\r\n                'nmaterialtypecode': masterData.SelectedMaterialType[0].nmaterialtypecode, \"userinfo\": loginInfo.userInfo });\r\n                dataparent[0] = {\r\n                    displaymember: dataparent[0].displaymember,\r\n                    inputtype: dataparent[0].inputtype,\r\n                    label: dataparent[0].label,\r\n                    source: dataparent[0].source,\r\n                    type: dataparent[0].type,\r\n                    valuemember: dataparent[0].valuemember\r\n                }\r\n                let filterQueryComponents1 = []\r\n                filterQueryComponents.map(temp => {\r\n                    // filterQueryComponents1.push({'nsqlquerycode':temp.nsqlquerycode})\r\n                    filterQueryComponents1 += temp.nsqlquerycode + ','\r\n                })\r\n                const materialReq1 = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                    {\r\n                        \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode\r\n                        ,\"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\r\n                        \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1)\r\n                    });\r\n                const materialReq2 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                      //ALPD-2272\r\n                    child: Layout[0].children[0].children[0].childValue||[],\r\n                    parentdata: { nmaterialtypecode: masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode },\r\n                    parentsource: 'materialcategory',\r\n                    'nmaterialtypecode':masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\r\n                    valuemember: 'nmaterialtypecode',\r\n                    \"userinfo\": loginInfo.userInfo,\r\n                    parentcolumnlist: dataparent\r\n                });\r\n                urlArray = [materialReq1, materialReq2, Material];\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        templateData = response[0].data;\r\n                        data = [...data, ...dataparent]\r\n                        templateData = parentChildComboLoad(data, { ...response[0].data, ...response[1].data }, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo)\r\n                        selectedRecord = response[2].data.EditedMaterial[0]\r\n                     \r\n                        if (response[2].data[\"EditedMaterial\"].length > 0) {\r\n                            if (response[2].data[\"MaterialDateFeild\"]!==undefined) {\r\n                                response[2].data[\"MaterialDateFeild\"].map((temp) => {\r\n                                    response[2].data[\"EditedMaterial\"][0][temp] =\r\n                                        rearrangeDateFormat( loginInfo.userInfo, response[2].data[\"EditedMaterial\"][0][temp])\r\n                                })\r\n                                response[2].data[\"DateFeildsMaterial\"].map((temp) => {\r\n                                    if (response[2].data[\"EditedMaterial\"][0].hasOwnProperty(temp)&&\r\n                                    response[2].data[\"EditedMaterial\"][0][temp]==='-') {\r\n                                        delete response[2].data[\"EditedMaterial\"][0][temp] \r\n                                    }\r\n                                }) \r\n                            }\r\n                            else\r\n                            {\r\n                                response[2].data[\"DateFeildsMaterial\"].map((temp) => {\r\n                                    if (response[2].data[\"EditedMaterial\"][0].hasOwnProperty(temp)&&\r\n                                    response[2].data[\"EditedMaterial\"][0][temp]==='-') {\r\n                                        delete response[2].data[\"EditedMaterial\"][0][temp] \r\n                                    }\r\n                                })  \r\n                            }\r\n                        }\r\n                     \r\n                        selectedRecord['Material Category'] = {\r\n                            ...selectedRecord['Material Category'],\r\n                            needsectionwise: response[2].data.EditedMaterial[0].needsectionwise\r\n                        }\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                operation, screenname: 'IDS_MATERIAL', isSelectedRecordChange: false, showMaterialSection: false, templateData, openModal: true, selectedcombo, selectedRecord,\r\n                                ncontrolCode, loading: false,showSectionWhileEdit:false\r\n                                //,  ismaterialSectionneed:response[2].data.EditedMaterial[0].jsondata.needsectionwise\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CONFIGMATERIALCAT\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getMaterialDetails(inputData, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"material/getMaterialDetails\", {\r\n            \"nmaterialcode\": inputData.nmaterialcode,\r\n            \"nmaterialcatcode\": masterData.SelectedMaterialCategoryFilter.nmaterialcatcode,\r\n            \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\r\n            \"userinfo\": userInfo,\r\n            fromDate:masterData.fromDate,\r\n            toDate:masterData.toDate\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getMaterialEdit(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        if (operation === \"create\") {\r\n            const EDQMManufacturer = rsapi.post(\"/edqmmanufacturer/getEDQMManufacturer\", { \"userinfo\": userInfo });\r\n            urlArray = [EDQMManufacturer];\r\n        }\r\n        else {\r\n            const Material = rsapi.post(\"/material/getMaterialEdit\", \r\n            { [primaryKeyName]: masterData.SelectedMaterial.jsondata.nmaterialcode,\r\n                'nmaterialtypecode': masterData.SelectedMaterialType.nmaterialtypecode, \"userinfo\": userInfo });\r\n            urlArray = [Material];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[2].data.EditedMaterial[0].jsondata;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        isOpen: true,\r\n                        selectedRecord: operation === \"update\" ? selectedRecord : { \"ntransactionstatus\": 1 },\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true, ncontrolCode: ncontrolCode, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getMaterialByTypeCode(selectedcombo, selectedMaterialCat, Data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialByTypeCode\", selectedMaterialCat !== undefined ? {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value,\r\n            nmaterialcatcode: selectedMaterialCat['nmaterialcatcode'].value,       \r\n            fromDate:Data.fromDate,\r\n            toDate:Data.toDate\r\n           \r\n            , \"userinfo\": userInfo,\r\n            'nflag':1\r\n        } : {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value\r\n\r\n            , \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let masterData = {}\r\n                let tabScreen;\r\n                if (response[\"data\"].ismaterialSectionneed === 3) {\r\n                    tabScreen = 'IDS_MATERIALSECTION'\r\n                }\r\n                masterData = { ...Data, ...response.data, tabScreen, searchedData: undefined }\r\n\r\n               sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, skip: 0, take: 20\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function getMaterialReload(selectedcombo, selectedMaterialCat, Data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialByTypeCode\", selectedMaterialCat !== undefined ? {\r\n            nmaterialtypecode: selectedcombo[0]['nmaterialtypecode'],\r\n            nmaterialcatcode: selectedMaterialCat['nmaterialcatcode'],\r\n            fromDate:Data.fromDate,\r\n            toDate:Data.toDate\r\n            , \"userinfo\": userInfo,\r\n            'nflag':1\r\n        } : {\r\n            nmaterialtypecode: selectedcombo['nmaterialtypecode'].value\r\n\r\n            , \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let masterData = {}\r\n\r\n                masterData = { ...Data, ...response.data, searchedData: undefined }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, skip: 0, take: 20\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function getAddMaterialSectionPopup(Data, userInfo, updateInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialSection\", {\r\n            \"userinfo\": userInfo,\r\n            'nmaterialcode': Data[\"SelectedMaterial\"][\"nmaterialcode\"]\r\n            , 'needSectionwise': Data[\"SelectedMaterialCategory\"].needSectionwise\r\n        })\r\n            .then(response => {\r\n                let masterData = {}\r\n                if (Array.isArray(response.data)) {\r\n                    let MaterialSectionOptions = [];\r\n                    MaterialSectionOptions = response.data\r\n                    const productCatMap = constructOptionList(response.data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    const productCategoryList = { productCategoryList: productCatMap.get(\"OptionList\") };\r\n                    masterData = { ...Data, ...productCategoryList}\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation: \"create\",\r\n                            masterData, updateInfo, ncontrolCode, openModal: true, ismaterialsectionEdit: false, isneedcombomulti: false, screenname: \"IDS_MATERIALSECTION\", showMaterialSection: true, loading: false, skip: 0, take: 20\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data);\r\n                    masterData = { ...Data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            operation: \"create\",\r\n                            masterData, updateInfo, openModal: false, ismaterialsectionEdit: false, isneedcombomulti: false, screenname: \"IDS_MATERIALSECTION\", showMaterialSection: true, loading: false, skip: 0, take: 20\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(error);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getMaterialSectionEdit(inputparam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let selectedRecord = { ...inputparam.selectedRecord };\r\n        dispatch(initRequest(true));\r\n        const url1 = rsapi.post(\"/material/getActiveMaterialSectionById\", {\r\n            editRow: inputparam[\"editRow\"],\r\n            ncontrolCode: inputparam.ncontrolCode,\r\n            operation: inputparam.operation,\r\n            primaryKeyField: \"nmaterialsectioncode\",\r\n            primaryKeyValue: inputparam.primaryKeyValue,\r\n            selectedId: inputparam.primaryKeyValue,\r\n            \"userinfo\": inputparam.userInfo\r\n        })\r\n        const url2 = rsapi.post(\"/material/getMaterialSection\", {\r\n            \"userinfo\": inputparam.userInfo,\r\n            nmaterialcode: inputparam[\"editRow\"].nmaterialcode, primaryKeyValue: inputparam.primaryKeyValue,\r\n            needSectionwise: inputparam.masterData[\"SelectedMaterialCategory\"].needSectionwise,\r\n            nmaterialsectioncode: inputparam['editRow'].nmaterialsectioncode\r\n            //,nflag:1\r\n        })\r\n        urlArray = [url1, url2]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const productCatMap = constructOptionList(response[0].data.MaterialSectionEditData || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, true);\r\n                selectedRecord[\"nmaterialsectioncode\"] = productCatMap.get(\"OptionList\");\r\n                selectedRecord[\"nreorderlevel\"] = inputparam[\"editRow\"].nreorderlevel;\r\n                selectedRecord[\"nmaterialsectioncodeprimaryKeyValue\"] = inputparam.primaryKeyValue;\r\n                if (!Array.isArray(response[1].data)) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord,\r\n                            operation: \"update\",\r\n                            isneedcombomulti: true,\r\n                            selectedId: inputparam.primaryKeyValue,\r\n                            openModal: true, showMaterialSection: true, ismaterialsectionEdit: true, screenname: \"IDS_MATERIALSECTION\", ncontrolCode: inputparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                }\r\n                const productCatMap1 = constructOptionList(response[1].data || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, true);\r\n                const productCategoryList2 = { productCategoryList: productCatMap1.get(\"OptionList\") };\r\n                //productCategoryList2['productCategoryList']={...selectedRecord[\"nmaterialsectioncode\"]}\r\n                let masterData = {}\r\n                masterData = { ...inputparam.masterData, ...productCategoryList2}\r\n\r\n                if (Array.isArray(response[1].data)) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord,\r\n                            masterData,\r\n                            operation: \"update\",\r\n                            isneedcombomulti: true,\r\n                            selectedId: inputparam.primaryKeyValue,\r\n                            openModal: true, showMaterialSection: true, ismaterialsectionEdit: true, screenname: \"IDS_MATERIALSECTION\", ncontrolCode: inputparam.ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function addSafetyInstructions(Data, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/material/getMaterialSafetyInstructions\", {\r\n            'nmaterialcode': Data[\"SelectedMaterial\"].nmaterialcode,\r\n            \"userinfo\": userInfo, nflag: 1\r\n        })\r\n            .then(response => {\r\n                if (Array.isArray(response.data[\"selectedTemplateSafetyInstructions\"])) {\r\n                    let selectedRecord = response.data[\"MaterialSafetyInstructions\"].length > 0 ?\r\n                        response.data[\"MaterialSafetyInstructions\"][0].jsondata : []\r\n                    let masterData = {}\r\n                    const MaterialSafetyInstructions = { MaterialSafetyInstructions: response.data[\"MaterialSafetyInstructions\"] }\r\n                    masterData = { ...Data, ...MaterialSafetyInstructions\r\n                                 // ALPD-854\r\n                                  // searchedData: undefined \r\n                                 }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData, loading: false,\r\n                            loadEsign: false,\r\n                            selectedRecord,\r\n                            ncontrolCode: ncontrolcode\r\n                            , openModal: true, screenname: \"IDS_MATERIALSAFETYINSTRUCTIONS\"\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function addMaterialProperty(Data, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let date;\r\n        let timeZoneList;\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        const getMaterialSafety = rsapi.post(\"/material/getMaterialSafetyInstructions\", {\r\n            'nmaterialcode': Data[\"SelectedMaterial\"].nmaterialcode,\r\n            \"userinfo\": userInfo, nflag: 2\r\n        })\r\n        urlArray = [getMaterialSafety, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (Array.isArray(response[0].data[\"selectedTemplateProperties\"])) {\r\n                    let selectedRecord = response[0].data[\"MaterialProperties\"].length > 0 ?\r\n                        response[0].data[\"MaterialProperties\"][0].jsondata : []\r\n                    let masterData = {}\r\n                    const MaterialProperties = { MaterialProperties: response[0].data[\"MaterialProperties\"] }\r\n                    // if (response[0].data[\"MaterialProperties\"].length > 0) {\r\n                    //     if (response[0].data[\"MaterialPropertiesDateFeild\"]) {\r\n                    //         response[0].data[\"MaterialPropertiesDateFeild\"].map((temp) => {\r\n                    //             response[0].data[\"MaterialProperties\"][0].jsondata[temp] =\r\n                    //                 rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[temp])\r\n\r\n                    //         })\r\n                    //     }\r\n                    // }\r\n                    response[0].data['selectedTemplateProperties'][0]['jsondata'].map((row) => {\r\n                        row.children.map((column) => {\r\n                            column.children.map((component, i) => {\r\n\r\n                                if (component.inputtype === 'date') {\r\n                                    if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                    if (response[0].data[\"MaterialProperties\"][0].jsondata[component.label] !== \"-\") {\r\n                                        if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                            response[0].data[\"MaterialProperties\"][0].jsondata[component.label] =\r\n                                                rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[component.label])\r\n                                        }\r\n                                    }else {\r\n                                        if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                        delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label]\r\n                                        }\r\n                                    }\r\n                                }\r\n                                    else {\r\n                                        if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                        delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label]\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n                    //   response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'] =\r\n                    // rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\r\n                    //new Date(response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\r\n\r\n\r\n                    masterData = { ...Data, ...MaterialProperties,\r\n                       // ALPD-854\r\n                        // searchedData: undefined \r\n                    }\r\n                    Data['selectedTemplateProperties'][0].jsondata.map((row) => {\r\n                        row.children.map((column) => {\r\n                            column.children.map((component) => {\r\n                                if (component.inputtype === 'date') {\r\n                                    if (component.hasOwnProperty('timezone')) {\r\n                                        const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                                            \"stimezoneid\", undefined, undefined, true);\r\n                                        timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                                        response[0].data[\"DateFeildsProperties\"].map((temp) => {\r\n                                            if (!selectedRecord.hasOwnProperty(temp)) {\r\n                                                selectedRecord[`tz${temp}`] = timeZoneList[0]\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData, loading: false,\r\n                            loadEsign: false,\r\n                            selectedRecord,\r\n                            isSelectedRecordChange: false,\r\n                            timeZoneList,\r\n                            ncontrolCode: ncontrolcode\r\n                            , openModal: true, screenname: \"IDS_MATERIALPROPERTY\"\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data||response[0].data);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\nexport function addMaterialFile(inputParam, param) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/material/getMaterialLinkMaster\", {\r\n            nmaterialcode: param.nmaterialcode && param.nmaterialcode,\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/material/editMaterialMsdsAttachment\", {\r\n                userinfo: inputParam.userInfo,\r\n                nmaterialcode: param.nmaterialcode && param.nmaterialcode,\r\n                nmaterialfilecode: inputParam.selectedRecord.nmaterialfilecode\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject[\"jsondata\"].nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject[\"jsondata\"].slinkname,\r\n                            \"value\": editObject[\"jsondata\"].nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename: editObject[\"jsondata\"].sfilename,\r\n                            slinkdescription: editObject[\"jsondata\"].sdescription,\r\n                            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\r\n                            sfilesize: '',\r\n                            nfilesize: 0,\r\n                            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus===3?3:4,\r\n                            sfilename: '',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\"\r\n                        link = {\r\n                            slinkfilename: '',\r\n                            slinkdescription: '',\r\n                            nlinkdefaultstatus: 4,\r\n                            sfilesize: editObject[\"jsondata\"].sfilesize,\r\n                            nfilesize: editObject[\"jsondata\"].nfilesize,\r\n                            ndefaultstatus: editObject[\"jsondata\"].ndefaultstatus,\r\n                            ssystemfilename: editObject[\"jsondata\"].ssystemfilename,\r\n                            sfilename: editObject[\"jsondata\"].sfilename,\r\n                            nlinkdefaultstatus: editObject[\"jsondata\"].ndefaultstatus\r\n                        }\r\n                    }\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        sdescription: editObject[\"jsondata\"].sdescription,\r\n                        nmaterialfilecode: editObject[\"jsondata\"].nmaterialfilecode,\r\n                        nattachmenttypecode: editObject[\"jsondata\"].nattachmenttypecode,\r\n                        nlinkcode,\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode: response[0].data.AttachmentType.length > 0 ?\r\n                            response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        dcreateddate: inputParam.selectedRecord && rearrangeDateFormat(inputParam.userInfo, inputParam.selectedRecord.dcreateddate),\r\n                        operation: inputParam.operation,\r\n                        screenname: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMaterialAccountingProperty(Data, userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let date;\r\n        let timeZoneList;\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        const getMaterialSafety = rsapi.post(\"/material/getMaterialAcountingProperties\", {\r\n            'nmaterialcode': Data[\"SelectedMaterial\"].nmaterialcode,\r\n            \"userinfo\": userInfo, nflag: 2\r\n        })\r\n        urlArray = [getMaterialSafety, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (Array.isArray(response[0].data[\"selectedTemplateProperties\"])) {\r\n                    let selectedRecord = response[0].data[\"MaterialProperties\"].length > 0 ?\r\n                        response[0].data[\"MaterialProperties\"][0].jsondata : []\r\n                    let masterData = {}\r\n                    const MaterialProperties = { MaterialProperties: response[0].data[\"MaterialProperties\"] }\r\n                    const selectedTemplateProperties=response[0].data[\"selectedTemplateProperties\"]\r\n                    // if (response[0].data[\"MaterialProperties\"].length > 0) \r\n                    //     if (response[0].data[\"MaterialPropertiesDateFeild\"]) {\r\n                    //         response[0].data[\"MaterialPropertiesDateFeild\"].map((temp) => {\r\n                    //             response[0].data[\"MaterialProperties\"][0].jsondata[temp] =\r\n                    //                 rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[temp])\r\n\r\n                    //         })\r\n                    //     }\r\n                    // }\r\n                    response[0].data['selectedTemplateProperties'][0]['jsondata'].map((row) => {\r\n                        row.children.map((column) => {\r\n                            column.children.map((component, i) => {\r\n\r\n                                if (component.inputtype === 'date') {\r\n                                    if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                    if (response[0].data[\"MaterialProperties\"][0].jsondata[component.label] !== \"-\") {\r\n                                        if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                            response[0].data[\"MaterialProperties\"][0].jsondata[component.label] =\r\n                                                rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata[component.label])\r\n                                        }\r\n                                    }else {\r\n                                        if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                        delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label]\r\n                                        }\r\n                                    }\r\n                                }\r\n                                    else {\r\n                                        if (response[0].data[\"MaterialProperties\"][0]) {\r\n                                        delete response[0].data[\"MaterialProperties\"][0].jsondata[component.label]\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n                    //   response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'] =\r\n                    // rearrangeDateFormat(userInfo, response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\r\n                    //new Date(response[0].data[\"MaterialProperties\"][0].jsondata['IDS_DATEOFSTANDARDIZATION'])\r\n\r\n\r\n                    masterData = { ...Data, ...MaterialProperties,selectedTemplateProperties\r\n                       // ALPD-854\r\n                        // searchedData: undefined \r\n                    }\r\n                    Data['selectedTemplateProperties'][0].jsondata.map((row) => {\r\n                        row.children.map((column) => {\r\n                            column.children.map((component) => {\r\n                                if (component.inputtype === 'date') {\r\n                                    if (component.hasOwnProperty('timezone')) {\r\n                                        const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                                            \"stimezoneid\", undefined, undefined, true);\r\n                                        timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                                        response[0].data[\"DateFeildsProperties\"].map((temp) => {\r\n                                            if (!selectedRecord.hasOwnProperty(temp)) {\r\n                                                selectedRecord[`tz${temp}`] = timeZoneList[0]\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData, loading: false,\r\n                            loadEsign: false,\r\n                            selectedRecord,\r\n                            isSelectedRecordChange: false,\r\n                            timeZoneList,\r\n                            ncontrolCode: ncontrolcode\r\n                            , openModal: true, screenname: \"IDS_MATERIALACCOUNTING\"\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(response.data||response[0].data);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getAddMaterialAccountingPopup(operation, loginInfo, selectedcombo, ncontrolCode, masterData, selectedRecord,screenname,samplestate) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedMaterialCategoryFilter) {\r\n            if (operation === \"create\") {\r\n                let urlArray = [];\r\n                let templateData = [];\r\n                let data = [];\r\n                let toggleComponents = [];\r\n                let radioComponents = [];\r\n                let filterQueryComponents = [];\r\n                let dataparent = [];\r\n                const withoutCombocomponent = [];\r\n                let selectedTemplate=[];\r\n                let Layout = masterData.selectedTemplate[0].jsondata;\r\n                if(samplestate===\"powder\" || samplestate===\"Liquid\"){\r\n                     Layout = masterData.selectedTemplatepowder[0].jsondata\r\n                     selectedTemplate=masterData.selectedTemplatepowder\r\n                }\r\n                // else if(samplestate===\"Liquid\"){\r\n                //      Layout = masterData.selectedTemplatesolution[0].jsondata \r\n                //      selectedTemplate=masterData.selectedTemplatesolution\r\n                // }\r\n                else{\r\n                    selectedTemplate=masterData.selectedTemplatePellet\r\n                }\r\n               \r\n                masterData={\r\n                    samplestate:samplestate,\r\n                    ...masterData,\r\n                    selectedTemplate\r\n                }\r\n                //const Layout = masterData.selectedTemplate[0].jsondata\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"parent\")) {\r\n                                dataparent.push(component)\r\n                            }\r\n                            if (component.inputtype === 'toggle') {\r\n                                toggleComponents.push(component)\r\n                            }\r\n                            if (component.inputtype === 'radio') {\r\n                                radioComponents.push(component)\r\n                            }\r\n                            if (component.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                filterQueryComponents.push(component)\r\n                            }\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === 'toggle') {\r\n                                    toggleComponents.push(componentrow)\r\n                                }\r\n                                if (componentrow.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\"))) {\r\n                                    if (componentrow.hasOwnProperty(\"parent\")) {\r\n                                        dataparent.push(componentrow)\r\n                                    }\r\n                                    else {\r\n                                        data.push(componentrow)\r\n                                    }\r\n\r\n                                }\r\n                                if (componentrow.hasOwnProperty(\"nsqlquerycode\")) {\r\n                                    filterQueryComponents.push(componentrow)\r\n                                }\r\n                            })\r\n                                : component.inputtype === \"combo\" && !(component.hasOwnProperty(\"parent\")) ? \r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data\r\n                const Material = rsapi.post(\"/material/getMaterialAvailableQty\", { 'nmaterialcode': masterData.SelectedMaterial.nmaterialcode,\r\n                 \"userinfo\": loginInfo.userInfo });\r\n\r\n                dataparent[0] = {\r\n                    displaymember: dataparent[0].displaymember,\r\n                    inputtype: dataparent[0].inputtype,\r\n                    label: dataparent[0].label,\r\n                    source: dataparent[0].source,\r\n                    type: dataparent[0].type,\r\n                    valuemember: dataparent[0].valuemember,\r\n                    nquerybuildertablecode: dataparent[0].nquerybuildertablecode\r\n                }\r\n                let filterQueryComponents1 = []\r\n                filterQueryComponents.map(temp => {\r\n                    filterQueryComponents1 += temp.nsqlquerycode + ','\r\n                })\r\n                const materialReq1 = rsapi.post(\"dynamicpreregdesign/getComboValues\",\r\n                    {\r\n                        \"nmaterialtypecode\": masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode\r\n                        , \"userinfo\": loginInfo.userInfo, \"parentcolumnlist\": comboComponents,\r\n                        \"filterQueryComponents\": filterQueryComponents1.substring(0, filterQueryComponents1.length - 1)\r\n                    });\r\n                const materialReq2 = rsapi.post('dynamicpreregdesign/getChildValues', {\r\n                   \r\n                    child: Layout[0].children[0].children[0].childValue || [],\r\n                    parentdata: { nmaterialtypecode: masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode },\r\n                    parentsource: 'materialcategory',\r\n                    'nmaterialtypecode':masterData.SelectedMaterialTypeFilter[0].nmaterialtypecode,\r\n                    valuemember: 'nmaterialtypecode',\r\n                    \"userinfo\": loginInfo.userInfo,\r\n                    parentcolumnlist: dataparent\r\n                });\r\n                urlArray = [materialReq1, materialReq2,Material\r\n                    //,materialReq3\r\n                ];\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        templateData = response[0].data;\r\n                        data.splice(1, 0, dataparent[0])\r\n                        const temp2 = { ...response[0].data, ...response[1].data }\r\n                        templateData = parentChildComboLoad(data, temp2, selectedRecord, null, withoutCombocomponent, undefined, loginInfo.userInfo.slanguagetypecode, loginInfo.userInfo)\r\n                        toggleComponents.map((temp) => {\r\n                            if (temp.hasOwnProperty('defaultchecked') && temp.defaultchecked === transactionStatus.YES) {\r\n                                templateData['selectedRecord'] = {\r\n                                    ...templateData['selectedRecord'],\r\n                                    [temp.label]: temp.defaultchecked\r\n                                }\r\n                            }\r\n                        })\r\n                        radioComponents.map((temp) => {\r\n                            if (temp.hasOwnProperty('radioOptions')) {\r\n                                let tags=temp.radioOptions.tags\r\n                                tags.map((tag) => {\r\n                                    if(tag.hasOwnProperty('defaultchecked'))\r\n                                    templateData['selectedRecord'] = {\r\n                                        ...templateData['selectedRecord'],\r\n                                        [temp.label]: tag['defaultchecked']\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                      \r\n                        const defaultValue = [];\r\n                        response[2].data.Productname.map(item => {\r\n                            defaultValue.push({\r\n                                label: item['sproductname'], value: item['sproductname'],\r\n                                item: item\r\n                              })\r\n                            return defaultValue\r\n                              \r\n                            \r\n                          });\r\n                          templateData['comboData'] = {\r\n                            ...templateData['comboData'],\r\n                            'SampleName':defaultValue\r\n                        }\r\n                        selectedRecord = templateData['selectedRecord']\r\n                        //delete templateData.selectedRecord[\"Material Category\"]\r\n                        if(masterData.SelectedMaterialCategoryFilter&&masterData.SelectedMaterialCategoryFilter.length!==0){\r\n                            templateData['comboData'][\"Material Category\"].map(item=>{\r\n                                if (masterData.SelectedMaterialCategoryFilter.nmaterialcatcode === item.value) {\r\n                                    selectedRecord = {\r\n                                        \"Material Category\": {\r\n                                            \"label\": masterData.SelectedMaterialCategoryFilter.smaterialcatname,\r\n                                            \"value\": masterData.SelectedMaterialCategoryFilter.nmaterialcatcode,\r\n                                            \"item\": { \"jsondata\": item.item.jsondata,\"pkey\": \"nmaterialcatcode\", \"source\": \"materialcategory\" }                               \r\n                                        },\r\n                                  \r\n                                    }\r\n                                }\r\n                       })      \r\n                     }\r\n\r\n                    selectedRecord['AvailableQty'] = response[2].data.AvailableQty\r\n                    selectedRecord['AvailableUraniumQty'] = response[2].data.AvailableUraniumQty\r\n                    selectedRecord['MaterialName']= masterData.SelectedMaterial[\"Material Name\"]\r\n                    //selectedRecord['SampleName']= masterData.SelectedMaterial[\"Material Name\"]\r\n                    selectedRecord['suraniumconversionfactor'] = response[2].data.suraniumconversionfactor\r\n                    selectedRecord['Transaction Date']=rearrangeDateFormat(loginInfo.userInfo,masterData.Currentdate)\r\n                   \r\n                    selectedRecord = {\r\n                        \"materialinventorytype\": {\r\n                            \"label\": response[2].data.Inventorytype.sinventorytypename,\r\n                            \"value\": response[2].data.Inventorytype.ninventorytypecode,\r\n                                                          \r\n                        },\r\n                        \"SampleName\": {\r\n                            \"label\": masterData.SelectedMaterial[\"Material Name\"],\r\n                            \"value\": 0,\r\n                                                          \r\n                        },\r\n                  ...selectedRecord\r\n                    }\r\n                  \r\n                    \r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                operation, screenname: screenname,masterData:masterData,\r\n                                //ismaterialSectionneed:response[2].data.ismaterialSectionneed,\r\n                                selectedRecord, showMaterialSection: false, templateData, openModal: true, selectedcombo,\r\n                                ncontrolCode, loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CONFIGMATERIALCAT\" }));\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport function getReportDetails(masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"material/getUraniumContentType\", {          \r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                //let UraniumContentType=;\r\n                const uraniumcontenttypeMap = constructOptionList(response.data.lstUraniumContentType || [], \"nuraniumcontenttypecode\",\r\n                \"suraniumcontenttype\", undefined, undefined, false);\r\n                const UraniumContentType = uraniumcontenttypeMap.get(\"OptionList\");\r\n\r\n                const accountingPlantGroupMap = constructOptionList(response.data.lstAccountingPlantGroup || [], \"nmaterialaccountinggroupcode\",\r\n                \"smaterialaccountinggroupname\", undefined, undefined, false);\r\n                const accountingPlantGroup = accountingPlantGroupMap.get(\"OptionList\");\r\n\r\n              //  const defaultValue = [];\r\n                // response.data.month.map((item, index)=> {\r\n                //     defaultValue.push({\r\n                //         label: item[index],\r\n                //         item: index\r\n                //       })\r\n                //     return defaultValue\r\n                      \r\n                    \r\n                //   });\r\n                const listOfMonth = Object.keys(response.data.month).map(key => ({\r\n                    label: response.data.month[key],\r\n                    value: parseInt(key)\r\n                }));\r\n                            \r\n                masterData = { ...masterData, UraniumContentType,listOfMonth,accountingPlantGroup };\r\n                //sortData(masterData);\r\n                dispatch({ \r\n                    type: DEFAULT_RETURN, \r\n                    payload: { masterData, loading: false,modalShow:true } \r\n                });\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}