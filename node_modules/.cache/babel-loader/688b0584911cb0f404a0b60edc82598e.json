{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\BulkRetrieveOrDiposeSample.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faTrashRestore } from '@fortawesome/free-solid-svg-icons';\n\nclass BulkRetrieveOrDiposeSample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.state = {\n      selectedRecord: this.props.selectedRecord,\n      dynamicfields: this.props.dynamicfields\n    };\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      dynamicfields\n    } = this.state;\n    let bool = false;\n\n    if (this.props.dynamicfields !== previousProps.dynamicfields) {\n      bool = true;\n      dynamicfields = this.props.dynamicfields || {};\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.selectedRecord || {};\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        dynamicfields\n      });\n    }\n  }\n\n  render() {\n    const retrieve = this.props.controlMap.has(\"Retrieve\") && this.props.controlMap.get(\"Retrieve\").ncontrolcode;\n    const dispose = this.props.controlMap.has(\"Dispose\") && this.props.controlMap.get(\"Dispose\").ncontrolcode;\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.props.CRUDSampleStorageTransaction({\n        // sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\n        // saliquotsampleid: this.state.selectedRecord.saliquotsampleid\n        //  && this.state.selectedRecord.saliquotsampleid !== \"\"\n        // ? this.state.selectedRecord.saliquotsampleid : \"\",\n        //  nquantity: this.state.selectedRecord.nquantity\n        //  && this.state.selectedRecord.nquantity !== \"\"\n        // ? this.state.selectedRecord.nquantity : 0,\n        ncontrolcode: retrieve,\n        // ALPD-4484 janakumar Sample Retrieval & disposal-->Bulk & retrieve is not working. While retrieve the sample Id the Status is in Disposed status.\n        isRetrieve: true,\n        //'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\n        userinfo: this.props.userInfo,\n        // scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\n        //     ? this.state.selectedRecord.scomments : \"-\",\n        importRetrieveOrDispose: true // spositionvalue: this.state.selectedRecord.spositionvalue,\n        // nneedaliquot: this.state.selectedRecord.nneedaliquot &&\n        //     this.state.selectedRecord.nneedaliquot ? true : false,\n        // nunitcode: this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode !== \"\"\n        //     ? this.state.selectedRecord.nunitcode : 0\n\n      }, 'create'),\n      hidden: this.props.userRoleControlRights.indexOf(retrieve) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashRestore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_RETRIEVE\"\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.props.CRUDSampleStorageTransaction({\n        // sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\n        // saliquotsampleid: this.state.selectedRecord.saliquotsampleid\n        //     && this.state.selectedRecord.saliquotsampleid !== \"\"\n        //     ? this.state.selectedRecord.saliquotsampleid : \"\",\n        // nquantity: this.state.selectedRecord.nquantity\n        //     && this.state.selectedRecord.nquantity !== \"\"\n        //     ? this.state.selectedRecord.nquantity : 0,\n        ncontrolcode: dispose,\n        // 'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\n        userinfo: this.props.userInfo,\n        // scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\n        //     ? this.state.selectedRecord.scomments : \"-\",\n        importRetrieveOrDispose: true // spositionvalue: this.state.selectedRecord.spositionvalue,\n        // nneedaliquot: this.state.selectedRecord.nneedaliquot &&\n        //     this.state.selectedRecord.nneedaliquot ? true : false\n\n      }, 'create'),\n      hidden: this.props.userRoleControlRights.indexOf(dispose) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_DISPOSE\"\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DropZone, {\n      name: \"sfilename\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FILENAME\"\n      }),\n      isMandatory: true,\n      maxFiles: \"1\",\n      minSize: 0,\n      maxSize: this.props.maxSize,\n      accept: \".xlsx, .xls\",\n      onDrop: event => this.onDropFile(event, \"sfilename\", \"1\"),\n      actionType: this.props.actionType,\n      deleteAttachment: this.deleteAttachment,\n      multiple: this.props.multiple,\n      editFiles: this.state.selectedRecord ? this.state.selectedRecord : {},\n      attachmentTypeCode: this.props.editFiles && this.props.editFiles.nattachmenttypecode,\n      fileSizeName: \"nfilesize\",\n      fileName: \"sfilename\" // disabled={disabled}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nexport default injectIntl(BulkRetrieveOrDiposeSample);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/storagemanagement/BulkRetrieveOrDiposeSample.jsx"],"names":["React","Row","Col","injectIntl","DropZone","deleteAttachmentDropZone","onDropAttachFileList","FontAwesomeIcon","faTrashAlt","faTrashRestore","BulkRetrieveOrDiposeSample","Component","constructor","props","onDropFile","attachedFiles","fieldName","maxSize","selectedRecord","state","childDataChange","setState","actionType","deleteAttachment","event","file","dynamicfields","componentDidUpdate","previousProps","bool","render","retrieve","controlMap","has","get","ncontrolcode","dispose","float","marginRight","CRUDSampleStorageTransaction","isRetrieve","userinfo","userInfo","importRetrieveOrDispose","userRoleControlRights","indexOf","intl","formatMessage","id","multiple","editFiles","nattachmenttypecode"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { deleteAttachmentDropZone,onDropAttachFileList } from '../../components/CommonScript';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt,  faTrashRestore } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass BulkRetrieveOrDiposeSample extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: this.props.selectedRecord,\r\n            dynamicfields: this.props.dynamicfields\r\n        }\r\n    }\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let { selectedRecord , dynamicfields\r\n        } = this.state\r\n        let bool = false;\r\n\r\n        if (this.props.dynamicfields !== previousProps.dynamicfields) {\r\n            bool = true;\r\n            dynamicfields = this.props.dynamicfields || {};\r\n        }\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.selectedRecord || {};\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord , dynamicfields\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const retrieve = this.props.controlMap.has(\"Retrieve\") && this.props.controlMap.get(\"Retrieve\").ncontrolcode;\r\n        const dispose = this.props.controlMap.has(\"Dispose\") && this.props.controlMap.get(\"Dispose\").ncontrolcode;\r\n\r\n        return (\r\n            <Col md={12}>\r\n                <Row>\r\n                <Col md={6}></Col>\r\n                    <Col md={3}>\r\n                        <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                            onClick={() => this.props.CRUDSampleStorageTransaction({\r\n                               // sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\r\n                               // saliquotsampleid: this.state.selectedRecord.saliquotsampleid\r\n                                  //  && this.state.selectedRecord.saliquotsampleid !== \"\"\r\n                                   // ? this.state.selectedRecord.saliquotsampleid : \"\",\r\n                              //  nquantity: this.state.selectedRecord.nquantity\r\n                                  //  && this.state.selectedRecord.nquantity !== \"\"\r\n                                   // ? this.state.selectedRecord.nquantity : 0,\r\n                                ncontrolcode: retrieve,\r\n                                // ALPD-4484 janakumar Sample Retrieval & disposal-->Bulk & retrieve is not working. While retrieve the sample Id the Status is in Disposed status.\r\n                                isRetrieve:true, \r\n                                //'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                userinfo: this.props.userInfo,\r\n                                // scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                //     ? this.state.selectedRecord.scomments : \"-\",\r\n                                importRetrieveOrDispose: true,\r\n                               // spositionvalue: this.state.selectedRecord.spositionvalue,\r\n                                // nneedaliquot: this.state.selectedRecord.nneedaliquot &&\r\n                                //     this.state.selectedRecord.nneedaliquot ? true : false,\r\n                                // nunitcode: this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode !== \"\"\r\n                                //     ? this.state.selectedRecord.nunitcode : 0\r\n                            }, 'create')}\r\n                            hidden={this.props.userRoleControlRights.indexOf(retrieve) === -1}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTrashRestore}></FontAwesomeIcon>{\"  \"}\r\n                            {this.props.intl.formatMessage({ id: \"IDS_RETRIEVE\" })}\r\n\r\n\r\n                        </button>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                            onClick={() => this.props.CRUDSampleStorageTransaction({\r\n                                // sunitname: this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.label : \"NA\",\r\n                                // saliquotsampleid: this.state.selectedRecord.saliquotsampleid\r\n                                //     && this.state.selectedRecord.saliquotsampleid !== \"\"\r\n                                //     ? this.state.selectedRecord.saliquotsampleid : \"\",\r\n                                // nquantity: this.state.selectedRecord.nquantity\r\n                                //     && this.state.selectedRecord.nquantity !== \"\"\r\n                                //     ? this.state.selectedRecord.nquantity : 0,\r\n                                ncontrolcode: dispose,\r\n                                // 'nsamplestoragetransactioncode': this.state.selectedBarcodeValue && this.state.selectedBarcodeValue.nsamplestoragetransactioncode,\r\n                                userinfo: this.props.userInfo,\r\n                                // scomments: this.state.selectedRecord.scomments && this.state.selectedRecord.scomments !== \"\"\r\n                                //     ? this.state.selectedRecord.scomments : \"-\",\r\n                                    importRetrieveOrDispose: true,\r\n                                // spositionvalue: this.state.selectedRecord.spositionvalue,\r\n                                // nneedaliquot: this.state.selectedRecord.nneedaliquot &&\r\n                                //     this.state.selectedRecord.nneedaliquot ? true : false\r\n                            }, 'create')}\r\n                            hidden={this.props.userRoleControlRights.indexOf(dispose) === -1}\r\n                        >\r\n                            <FontAwesomeIcon icon={faTrashAlt}></FontAwesomeIcon>{\"  \"}\r\n                            {this.props.intl.formatMessage({ id: \"IDS_DISPOSE\" })}\r\n\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n            <Col md=\"12\">\r\n                    <DropZone\r\n                        name={\"sfilename\"}\r\n                        label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                        isMandatory={true}\r\n                        maxFiles={\"1\"}\r\n                        minSize={0}\r\n                        maxSize={this.props.maxSize}\r\n                        accept={\".xlsx, .xls\"}\r\n                        onDrop={(event) => this.onDropFile(event, \"sfilename\", \"1\")}\r\n                        actionType={this.props.actionType}\r\n                        deleteAttachment={this.deleteAttachment}\r\n                        multiple={this.props.multiple}\r\n                        editFiles={this.state.selectedRecord ? this.state.selectedRecord : {}}\r\n                        attachmentTypeCode={this.props.editFiles && this.props.editFiles.nattachmenttypecode}\r\n                        fileSizeName=\"nfilesize\"\r\n                        fileName=\"sfilename\"\r\n                       // disabled={disabled}\r\n                    />\r\n            </Col>\r\n        </Row>\r\n            </Col>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default injectIntl(BulkRetrieveOrDiposeSample);"]},"metadata":{},"sourceType":"module"}