{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\RegistrationSubtypeConfigration.jsx\";\nimport React, { Component } from 'react';\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport SampleTypeFilter from \"./SampleTypeFilter\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport { connect } from \"react-redux\";\nimport { injectIntl } from \"react-intl\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { ContentPanel } from \"../../components/App.styles\";\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport Esign from \"../audittrail/Esign\";\nimport RegistrationSubTypeConfigDepartmentTab from \"./RegistrationSubTypeConfigDepartmentTab\";\nimport RegistrationSubTypeConfigUserRoleTab from \"./RegistrationSubTypeConfigUserRoleTab\";\nimport RegistrationSubTypeConfigUserTab from \"./RegistrationSubTypeConfigUserTab\";\nimport AddRegistrationSubtypeConfigDepartment from \"../../pages/credentialmanagement/AddRegistrationSubtypeConfigDepartment\";\nimport AddRegistrationSubtypeConfigUserRole from \"../../pages/credentialmanagement/AddRegistrationSubtypeConfigUserRole\";\nimport AddRegistrationSubtypeConfigUser from \"../../pages/credentialmanagement/AddRegistrationSubtypeConfigUser\";\nimport { Affix } from \"rsuite\";\nimport { showEsign, constructOptionList, getControlMap } from \"../../components/CommonScript\";\nimport { callService, crudMaster, validateEsignCredential, updateStore, getTabdetails, getSectionUsers, getDepartmentData, SampleTypeFilterchange, filterColumnData, getDepartmentBasedUser, getUserroleData, getUserRoleBasedUser, getRegtypeBasedSampleType, getListofUsers } from \"../../actions\";\nimport { transactionStatus } from '../../components/Enumeration';\nimport { toast } from \"react-toastify\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RegistrationSubtypeConfigration extends Component {\n  constructor(props) {\n    super(props);\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.nfilterSampleType && this.state.nfilterSampleType.value) {\n        let inputParam = {\n          inputData: {\n            nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterSampleType: this.props.Login.masterData.defaultSampleTypeValue,\n            nregtypecode: this.props.Login.masterData.defaultRegtypeValue.value\n          },\n          classUrl: \"registrationsubtypeconfigration\",\n          methodUrl: \"BySampleType\",\n          masterData: { ...this.props.Login.masterData,\n            defaultSampleTypeValue: this.props.Login.masterData.defaultSampleTypeValue,\n            searchedData: undefined\n          }\n        };\n        this.props.SampleTypeFilterchange(inputParam, this.props.Login.masterData.filterSampleType);\n      } else {//   toast.warn(\n        //     this.props.intl.formatMessage({\n        //       id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\",\n        //     })\n        //   );\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let masterData = this.props.Login.masterData;\n\n      if (comboData !== null) {\n        switch (caseNo) {\n          case 1:\n            if (fieldName === \"nsampletypecode\") {\n              selectedRecord[fieldName] = comboData;\n            } // else if (fieldName === \"nregionalsitecode\") {\n            //   selectedRecord[fieldName] = comboData;\n            //   this.props.getInstrumentSiteSection(\n            //     comboData.item.nsitecode,\n            //     this.props.Login.userInfo,\n            //     selectedRecord\n            //   );\n            // }\n            else {\n              selectedRecord[fieldName] = comboData;\n              this.setState({\n                selectedRecord\n              });\n            }\n\n            break;\n\n          case 2:\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"ndeptusercode\"] = comboData.value;\n            this.props.getDepartmentBasedUser(this.state.selectedRecord.ndeptusercode, this.props.Login.userInfo, selectedRecord, masterData, this.props.Login.screenName);\n            break;\n\n          case 3:\n            masterData = { ...this.props.Login.masterData,\n              nfilterSampleType: comboData,\n              SelectedSampleType: comboData.item\n            };\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"ndeptusercode\"] = comboData.value;\n            this.props.getRegtypeBasedSampleType(this.state.selectedRecord.ndeptusercode, this.props.Login.userInfo, selectedRecord, masterData, this.props.Login.screenName);\n            break;\n\n          case 4:\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"userrolecode\"] = comboData.value;\n            this.props.getUserRoleBasedUser(this.state.selectedRecord.userrolecode, this.props.Login.userInfo, selectedRecord, masterData, this.props.Login.screenName);\n            break;\n\n          case 5:\n            let nregtypecode = this.state.nregtypecode || {};\n            nregtypecode = comboData;\n            this.searchRef.current.value = \"\";\n            this.setState({\n              nregtypecode\n            });\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.DeleteTabRecords = (operation, ncontrolCode) => {\n      let inputData = [];\n      const dataState = this.state.sectionDataState;\n      inputData[\"tabdetails\"] = {\n        nsitecode: this.props.Login.userInfo.nmastersitecode\n      };\n      inputData[\"tabdetails\"][\"ntransfiltertypeconfigcode\"] = operation.selectedRecord.ntransfiltertypeconfigcode;\n      inputData[\"tabdetails\"][\"nneedalluser\"] = operation.selectedRecord.nneedalluser;\n      inputData[\"tabdetails\"][\"ntransusercode\"] = operation.selectedRecord.ntransusercode || -1;\n      inputData[\"tabdetails\"][\"nregsubtypecode\"] = operation.selectedRecord.nregsubtypecode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"DepartmentAndUserRole\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        dataState: dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        } // postParam: {\n        //   inputListName: \"Instrument\", selectedObject: \"selectedRegSubType\", primaryKeyField: \"ninstrumentcode\",\n        //   fetchUrl: \"instrument/getActiveInstrumentById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\n        // }\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, operation.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: operation.screenName,\n            operation: operation.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      } // }\n\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n\n            if (selectedRecord['ndeltacheck'] === transactionStatus.YES) {\n              selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x => x.item.ndefaultstatus === transactionStatus.YES)[0];\n            } else {\n              delete selectedRecord['ndeltaunitcode'];\n            }\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let modalShow = this.props.Login.modalShow;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if ((this.props.Login.operation.operation ? this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          modalShow = true;\n          openModal = false;\n          openChildModal = false;\n        }\n\n        selectedRecord['esignpassword'] = \"\";\n        selectedRecord['esigncomments'] = \"\";\n        selectedRecord['esignreason'] = \"\";\n      } else {\n        openModal = false;\n        openChildModal = false;\n        modalShow = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          modalShow,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.nfilterSampleType && this.state.nfilterSampleType.value && this.props.Login.masterData.defaultRegtypeValue && this.props.Login.masterData.defaultRegtypeValue.value) {\n        let inputParam = {\n          inputData: {\n            nsampletypecode: this.state.nfilterSampleType.value,\n            nregtypecode: this.state.nregtypecode.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterSampleType: this.state.nfilterSampleType\n          },\n          masterData: { ...this.props.Login.masterData,\n            defaultSampleTypeValue: this.state.nfilterSampleType,\n            defaultRegtypeValue: this.state.nregtypecode,\n            SelectedRegType: this.state.nregtypecode.item,\n            searchedData: undefined\n          },\n          classUrl: \"registrationsubtypeconfigration\",\n          methodUrl: \"BySampleType\"\n        };\n        this.props.SampleTypeFilterchange(inputParam, this.props.Login.masterData.filterSampleType);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTFILTER\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let UsersArray = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = {\n        inputListName: \"RegSubType\",\n        selectedObject: \"selectedRegSubType\",\n        primaryKeyField: \"nregsubtypecode\",\n        isSingleGet: true\n      };\n      inputData[\"nmappingfieldcode\"] = this.props.Login.screenName === \"IDS_DEPARTMENT\" ? this.state.selectedRecord[\"ndeptcode\"].value : this.props.Login.screenName === \"IDS_USERROLE\" ? this.state.selectedRecord[\"nuserrolecode\"].value : -1;\n      inputData[\"nallusers\"] = this.state.selectedRecord[\"ndeltacheck\"] || 4;\n      UsersArray = this.state.selectedRecord && this.state.selectedRecord.nusercode && this.state.selectedRecord.nusercode.map(item => {\n        let users = {};\n        users[\"nusercode\"] = item.value;\n        return users;\n      });\n      inputData['usermapping'] = UsersArray;\n      inputData[\"selectedregsubtype\"] = this.props.Login.masterData.selectedRegSubType;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Department\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam: postParam,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openChildModal: true\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      let modalName;\n      const inputParam = {\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modalName);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      const deleteSecId = this.state.controlMap.has(\"DeleteDepartment\") && this.state.controlMap.get(\"DeleteDepartment\").ncontrolcode;\n      if (this.props.Login.masterData.defaultSampleTypeValue.item.ntransfiltertypecode === 1) tabMap.set(\"IDS_DEPARTMENT\", /*#__PURE__*/React.createElement(RegistrationSubTypeConfigDepartmentTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataState: this.props.Login.dataState,\n        masterData: this.props.Login.masterData[\"selectedSection\"] || [],\n        selectedRegSubType: this.props.Login.masterData.selectedRegSubType,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.DeleteTabRecords,\n        deleteSecId: deleteSecId,\n        getDepartmentData: this.props.getDepartmentData,\n        DepartmentAndUser: this.props.Login.masterData.DepartmentAndUser || [],\n        screenName: \"IDS_DEPARTMENT\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 9\n        }\n      }));\n      if (this.props.Login.masterData.defaultSampleTypeValue.item.ntransfiltertypecode === 2) tabMap.set(\"IDS_USERROLE\", /*#__PURE__*/React.createElement(RegistrationSubTypeConfigUserRoleTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataState: this.props.Login.dataState,\n        masterData: this.props.Login.masterData[\"selectedSection\"] || [],\n        selectedRegSubType: this.props.Login.masterData.selectedRegSubType,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.DeleteTabRecords,\n        deleteSecId: deleteSecId,\n        getUserroleData: this.props.getUserroleData,\n        DepartmentAndUser: this.props.Login.masterData.DepartmentAndUser || [],\n        screenName: \"IDS_USERROLE\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 9\n        }\n      }));\n      if (this.props.Login.masterData.defaultSampleTypeValue.item.ntransfiltertypecode === 3) tabMap.set(\"IDS_USERS\", /*#__PURE__*/React.createElement(RegistrationSubTypeConfigUserTab, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataState: this.props.Login.dataState,\n        masterData: this.props.Login.masterData[\"selectedSection\"] || [] //masterData={this.props.Login.masterData || []}\n        ,\n        selectedRegSubType: this.props.Login.masterData.selectedRegSubType,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.DeleteTabRecords,\n        deleteSecId: deleteSecId,\n        getListofUsers: this.props.getListofUsers,\n        DepartmentAndUser: this.props.Login.masterData.DepartmentAndUser || [],\n        screenName: \"IDS_USERS\",\n        selectedRecord: this.state.selectedRecord,\n        settings: this.props.Login.settings,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 9\n        }\n      }));\n      return tabMap;\n    };\n\n    const sectionDataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedRegSubType: undefined,\n      controlMap: new Map(),\n      RegSubType: [],\n      sectionDataState,\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"sregsubtypename\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      //filterData,\n      nfilterSampleType,\n      filterSampleType,\n      filterRegtype,\n      nregtypecode\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      nfilterSampleType = this.state.nfilterSampleType || {};\n\n      if (this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\n        nfilterSampleType = {\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\n          item: this.props.Login.masterData.SelectedSampleType\n        };\n      } //filterData = this.generateBreadCrumData();\n\n\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData.filterSampleType !== previousProps.Login.masterData.filterSampleType) {\n      const SampleTypeMap = constructOptionList(this.props.Login.masterData.filterSampleType || [], \"nsampletypecode\", \"ssampletypename\", \"ascending\", false);\n      filterSampleType = SampleTypeMap.get(\"OptionList\");\n\n      if (SampleTypeMap.get(\"DefaultValue\")) {\n        nfilterSampleType = SampleTypeMap.get(\"DefaultValue\");\n      } //else if (\n      //   filterInstrumentCategory &&\n      //   filterInstrumentCategory.length > 0\n      // ) {\n      //   nfilterInstrumentCategory = filterInstrumentCategory[0];\n      // }\n\n\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData.filterRegtype !== previousProps.Login.masterData.filterRegtype) {\n      const SampleTypeMap = constructOptionList(this.props.Login.masterData.filterRegtype || [], \"nregtypecode\", \"sregtypename\", \"ascending\", false);\n      filterRegtype = SampleTypeMap.get(\"OptionList\");\n\n      if (SampleTypeMap.get(\"DefaultValue\")) {\n        nregtypecode = SampleTypeMap.get(\"DefaultValue\");\n      } else if (filterRegtype && filterRegtype.length > 0) {\n        nregtypecode = filterRegtype[0];\n      }\n\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        userRoleControlRights,\n        controlMap,\n        //filterData,\n        nfilterSampleType,\n        filterSampleType,\n        nregtypecode,\n        filterRegtype\n      });\n    }\n  }\n\n  render() {\n    let mandatoryFields = [];\n\n    if (this.props.Login.screenName === \"IDS_DEPARTMENT\") {\n      this.state.selectedRecord && this.state.selectedRecord[\"ndeltacheck\"] === 4 ? mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_DEPARTMENT\",\n        dataField: \"ndeptcode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        mandatory: true,\n        idsName: \"IDS_USERS\",\n        dataField: \"nusercode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }) : mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_DEPARTMENT\",\n        dataField: \"ndeptcode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    } else if (this.props.Login.screenName === \"IDS_USERROLE\") {\n      this.state.selectedRecord && this.state.selectedRecord[\"ndeltacheck\"] === 4 ? mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_USERROLE\",\n        dataField: \"nuserrolecode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }, {\n        mandatory: true,\n        idsName: \"IDS_USERS\",\n        dataField: \"nusercode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      }) : mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_USERROLE\",\n        dataField: \"nuserrolecode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    } else {\n      mandatoryFields.push({\n        mandatory: true,\n        idsName: \"IDS_USERS\",\n        dataField: \"nusercode\",\n        mandatoryLabel: \"IDS_SELECT\",\n        controlType: \"selectbox\"\n      });\n    }\n\n    const {\n      selectedRegSubType\n    } = this.props.Login.masterData;\n    const filterParam = {\n      inputListName: \"RegSubType\",\n      selectedObject: \"selectedRegSubType\",\n      primaryKeyField: \"nregsubtypecode\",\n      fetchUrl: \"registrationsubtypeconfigration/getTabdetails\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    let breadCrumbData = []; //this.props.Login.masterData.defaultInstrumentCatValue || [];\n\n    breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      //\"value\": this.props.Login.masterData.defaultInstrumentCatValue ? this.props.Login.masterData.defaultInstrumentCatValue.label : \"-\"\n      \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.SelectedSampleType.ssampletypename : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.defaultRegtypeValue ? this.props.Login.masterData.SelectedRegType.sregtypename : \"-\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 15\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 15\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 19\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"RegSubType\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RegSubType,\n      getMasterDetail: RegSubType => this.props.getTabdetails(RegSubType, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedRegSubType,\n      primaryKeyField: \"nregsubtypecode\",\n      mainField: \"sregsubtypename\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef //addId={addId}\n      ,\n      hidePaging: false,\n      reloadData: this.reloadData // openModal={() =>\n      //   this.props.getInstrumentCombo(\n      //     \"IDS_INSTRUMENT\",\n      //     \"create\",\n      //     \"ninstrumentcode\",\n      //     this.props.Login.masterData,\n      //     this.props.Login.userInfo,\n      //     //addId\n      //   )\n      // }\n      ,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        IDS_INSTRUMENTCATEGORYFILTER: /*#__PURE__*/React.createElement(SampleTypeFilter, {\n          filterSampleType: this.state.filterSampleType || [],\n          nfilterSampleType: this.state.nfilterSampleType || {},\n          filterRegtype: this.state.filterRegtype || [],\n          onComboChange: this.onComboChange,\n          nregtypecode: this.state.nregtypecode || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 23\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 21\n      }\n    }, this.props.Login.masterData.selectedRegSubType ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.selectedRegSubType.sregsubtypename)), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 27\n      }\n    }, selectedRegSubType && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 31\n      }\n    }))) : \"\"))))))), (this.props.Login.openModal || this.props.Login.openChildModal) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.props.Login.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      size: this.props.Login.loadEsign ? \"lg\" : this.props.Login.openModal ? \"xl\" : this.props.Login.openChildModal ? \"lg\" : \"lg\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      mandatoryFields: mandatoryFields,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 17\n        }\n      }) : this.props.Login.screenName === \"IDS_DEPARTMENT\" ? /*#__PURE__*/React.createElement(AddRegistrationSubtypeConfigDepartment, {\n        selectedRecord: this.state.selectedRecord || {},\n        Lab: this.props.Login.Lab,\n        Users: this.props.Login.Users,\n        onComboChange: this.onComboChange,\n        onSwitchChange: this.onSwitchChange,\n        onInputOnChange: this.onInputOnChange,\n        isdisable: this.props.Login.masterData.isdisable || false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 17\n        }\n      }) : this.props.Login.screenName === \"IDS_USERROLE\" ? /*#__PURE__*/React.createElement(AddRegistrationSubtypeConfigUserRole, {\n        selectedRecord: this.state.selectedRecord || {},\n        Lab: this.props.Login.Lab,\n        Users: this.props.Login.Users,\n        onComboChange: this.onComboChange,\n        onSwitchChange: this.onSwitchChange,\n        onInputOnChange: this.onInputOnChange,\n        isdisable: this.props.Login.masterData.isdisable || false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 819,\n          columnNumber: 19\n        }\n      }) : this.props.Login.screenName === \"IDS_USERS\" ? /*#__PURE__*/React.createElement(AddRegistrationSubtypeConfigUser, {\n        selectedRecord: this.state.selectedRecord || {},\n        Users: this.props.Login.Users,\n        onComboChange: this.onComboChange,\n        onSwitchChange: this.onSwitchChange,\n        onInputOnChange: this.onInputOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830,\n          columnNumber: 21\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getTabdetails,\n  filterColumnData,\n  updateStore,\n  validateEsignCredential,\n  getSectionUsers,\n  getDepartmentData,\n  SampleTypeFilterchange,\n  getDepartmentBasedUser,\n  getUserroleData,\n  getUserRoleBasedUser,\n  getRegtypeBasedSampleType,\n  getListofUsers\n})(injectIntl(RegistrationSubtypeConfigration));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/credentialmanagement/RegistrationSubtypeConfigration.jsx"],"names":["React","Component","ListMaster","SampleTypeFilter","ConfirmMessage","connect","injectIntl","Row","Col","Card","ContentPanel","BreadcrumbComponent","SlideOutModal","CustomTab","DEFAULT_RETURN","Esign","RegistrationSubTypeConfigDepartmentTab","RegistrationSubTypeConfigUserRoleTab","RegistrationSubTypeConfigUserTab","AddRegistrationSubtypeConfigDepartment","AddRegistrationSubtypeConfigUserRole","AddRegistrationSubtypeConfigUser","Affix","showEsign","constructOptionList","getControlMap","callService","crudMaster","validateEsignCredential","updateStore","getTabdetails","getSectionUsers","getDepartmentData","SampleTypeFilterchange","filterColumnData","getDepartmentBasedUser","getUserroleData","getUserRoleBasedUser","getRegtypeBasedSampleType","getListofUsers","transactionStatus","toast","mapStateToProps","state","Login","RegistrationSubtypeConfigration","constructor","props","reloadData","searchRef","current","value","nfilterSampleType","inputParam","inputData","nsampletypecode","masterData","defaultSampleTypeValue","userinfo","userInfo","nregtypecode","defaultRegtypeValue","classUrl","methodUrl","searchedData","undefined","filterSampleType","onComboChange","comboData","fieldName","caseNo","selectedRecord","setState","ndeptusercode","screenName","SelectedSampleType","item","userrolecode","updateInfo","typeName","data","DeleteTabRecords","operation","ncontrolCode","dataState","sectionDataState","nsitecode","nmastersitecode","ntransfiltertypeconfigcode","nneedalluser","ntransusercode","nregsubtypecode","userRoleControlRights","nformcode","loadEsign","screenData","openChildModal","onInputOnChange","event","optional","target","type","name","checked","YES","parameterData","deltaperiod","filter","x","ndefaultstatus","closeModal","openModal","modalShow","selectedId","onFilterSubmit","SelectedRegType","warn","intl","formatMessage","id","onSaveClick","saveType","formRef","UsersArray","postParam","inputListName","selectedObject","primaryKeyField","isSingleGet","nusercode","map","users","selectedRegSubType","validateEsign","modalName","sreason","nreasoncode","spredefinedreason","label","password","tabDetail","tabMap","Map","deleteSecId","controlMap","has","get","ncontrolcode","ntransfiltertypecode","set","DepartmentAndUser","settings","skip","take","error","RegSubType","sidebarview","createRef","searchFieldList","confirmMessage","componentDidUpdate","previousProps","updateState","filterRegtype","Object","values","push","ssampletypename","SampleTypeMap","length","render","mandatoryFields","mandatory","idsName","dataField","mandatoryLabel","controlType","filterParam","fetchUrl","fecthInputObject","breadCrumbData","sregtypename","openFilter","closeFilter","showFilter","IDS_INSTRUMENTCATEGORYFILTER","sregsubtypename","onTabChange","masterStatus","Lab","Users","onSwitchChange","isdisable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport SampleTypeFilter from \"./SampleTypeFilter\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nimport { connect } from \"react-redux\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport { ContentPanel } from \"../../components/App.styles\";\r\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport Esign from \"../audittrail/Esign\";\r\nimport RegistrationSubTypeConfigDepartmentTab from \"./RegistrationSubTypeConfigDepartmentTab\";\r\nimport RegistrationSubTypeConfigUserRoleTab from \"./RegistrationSubTypeConfigUserRoleTab\";\r\nimport RegistrationSubTypeConfigUserTab from \"./RegistrationSubTypeConfigUserTab\";\r\nimport AddRegistrationSubtypeConfigDepartment from \"../../pages/credentialmanagement/AddRegistrationSubtypeConfigDepartment\";\r\nimport AddRegistrationSubtypeConfigUserRole from \"../../pages/credentialmanagement/AddRegistrationSubtypeConfigUserRole\";\r\nimport AddRegistrationSubtypeConfigUser from \"../../pages/credentialmanagement/AddRegistrationSubtypeConfigUser\";\r\nimport { Affix } from \"rsuite\";\r\nimport {showEsign,constructOptionList,getControlMap} from \"../../components/CommonScript\";\r\nimport {callService,crudMaster,validateEsignCredential,updateStore,getTabdetails,getSectionUsers,getDepartmentData,SampleTypeFilterchange,\r\n        filterColumnData,getDepartmentBasedUser,getUserroleData,getUserRoleBasedUser,getRegtypeBasedSampleType,getListofUsers} from \"../../actions\";\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { toast } from \"react-toastify\";\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\nclass RegistrationSubtypeConfigration extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const sectionDataState = { skip: 0, take: 10 };\r\n    this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedRegSubType: undefined,\r\n      controlMap: new Map(),\r\n      RegSubType: [],\r\n      sectionDataState,\r\n      sidebarview: false\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"sregsubtypename\"];\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n\r\n  reloadData = () => {\r\n    this.searchRef.current.value = \"\";\r\n    if (this.state.nfilterSampleType && this.state.nfilterSampleType.value) {\r\n      let inputParam = {\r\n        inputData: {\r\n          nsampletypecode: this.props.Login.masterData.defaultSampleTypeValue.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          nfilterSampleType: this.props.Login.masterData.defaultSampleTypeValue,\r\n          nregtypecode: this.props.Login.masterData.defaultRegtypeValue.value,\r\n        },\r\n        classUrl: \"registrationsubtypeconfigration\",\r\n        methodUrl: \"BySampleType\",\r\n        masterData: {\r\n          ...this.props.Login.masterData,\r\n          defaultSampleTypeValue: this.props.Login.masterData.defaultSampleTypeValue, searchedData: undefined\r\n        }\r\n\r\n      };\r\n      this.props.SampleTypeFilterchange(\r\n        inputParam,\r\n        this.props.Login.masterData.filterSampleType\r\n      );\r\n    } else {\r\n      //   toast.warn(\r\n      //     this.props.intl.formatMessage({\r\n      //       id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\",\r\n      //     })\r\n      //   );\r\n    }\r\n  };\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    let masterData = this.props.Login.masterData;\r\n    if (comboData !== null) {\r\n      switch (caseNo) {\r\n        case 1:\r\n          if (fieldName === \"nsampletypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n          } \r\n          // else if (fieldName === \"nregionalsitecode\") {\r\n          //   selectedRecord[fieldName] = comboData;\r\n          //   this.props.getInstrumentSiteSection(\r\n          //     comboData.item.nsitecode,\r\n          //     this.props.Login.userInfo,\r\n          //     selectedRecord\r\n          //   );\r\n          // }\r\n          else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n          }\r\n          break;\r\n        case 2:\r\n          selectedRecord[fieldName] = comboData;\r\n          selectedRecord[\"ndeptusercode\"] = comboData.value;\r\n          this.props.getDepartmentBasedUser(\r\n            this.state.selectedRecord.ndeptusercode,\r\n            this.props.Login.userInfo,\r\n            selectedRecord,\r\n            masterData,\r\n            this.props.Login.screenName\r\n          );\r\n          break;\r\n\r\n        case 3:\r\n          masterData = {\r\n            ...this.props.Login.masterData,\r\n            nfilterSampleType: comboData,\r\n            SelectedSampleType: comboData.item\r\n          }\r\n\r\n\r\n          selectedRecord[fieldName] = comboData;\r\n          selectedRecord[\"ndeptusercode\"] = comboData.value;\r\n          this.props.getRegtypeBasedSampleType(\r\n            this.state.selectedRecord.ndeptusercode,\r\n            this.props.Login.userInfo,\r\n            selectedRecord,\r\n            masterData,\r\n            this.props.Login.screenName\r\n          );\r\n          break;\r\n\r\n        case 4:\r\n          selectedRecord[fieldName] = comboData;\r\n          selectedRecord[\"userrolecode\"] = comboData.value;\r\n          this.props.getUserRoleBasedUser(\r\n            this.state.selectedRecord.userrolecode,\r\n            this.props.Login.userInfo,\r\n            selectedRecord,\r\n            masterData,\r\n            this.props.Login.screenName\r\n          );\r\n          break;\r\n\r\n        case 5:\r\n          let nregtypecode =\r\n            this.state.nregtypecode || {};\r\n          nregtypecode = comboData;\r\n          this.searchRef.current.value = \"\";\r\n          this.setState({ nregtypecode });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { selectedRecord }\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n    }\r\n  };\r\n\r\n\r\n  DeleteTabRecords = (operation, ncontrolCode) => {\r\n    let inputData = [];\r\n    const dataState = this.state.sectionDataState;\r\n    inputData[\"tabdetails\"] = {\r\n      nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n    };\r\n    inputData[\"tabdetails\"][\"ntransfiltertypeconfigcode\"] = operation.selectedRecord.ntransfiltertypeconfigcode;\r\n    inputData[\"tabdetails\"][\"nneedalluser\"] = operation.selectedRecord.nneedalluser;\r\n    inputData[\"tabdetails\"][\"ntransusercode\"] = operation.selectedRecord.ntransusercode || -1;\r\n    inputData[\"tabdetails\"][\"nregsubtypecode\"] = operation.selectedRecord.nregsubtypecode;\r\n\r\n\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    const inputParam = {\r\n      methodUrl: \"DepartmentAndUserRole\",\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      inputData: inputData,\r\n      operation: \"delete\",\r\n      dataState: dataState,\r\n      selectedRecord: { ...this.state.selectedRecord },\r\n      // postParam: {\r\n      //   inputListName: \"Instrument\", selectedObject: \"selectedRegSubType\", primaryKeyField: \"ninstrumentcode\",\r\n      //   fetchUrl: \"instrument/getActiveInstrumentById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n      // }\r\n    };\r\n    const masterData = this.props.Login.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode,\r\n        operation.ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openChildModal: true,\r\n          screenName: operation.screenName,\r\n          operation: operation.operation,\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n    }\r\n\r\n    // }\r\n  }\r\n\r\n\r\n\r\n  onInputOnChange = (event, caseNo, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    switch (caseNo) {\r\n      case 1:\r\n        if (event.target.type === 'checkbox') {\r\n          selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n          if (selectedRecord['ndeltacheck'] === transactionStatus.YES) {\r\n            selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x =>\r\n              x.item.ndefaultstatus === transactionStatus.YES)[0];\r\n          }\r\n          else {\r\n            delete selectedRecord['ndeltaunitcode'];\r\n          }\r\n        } else {\r\n          selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        break;\r\n\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  closeModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let openChildModal = this.props.Login.openChildModal;\r\n    let modalShow = this.props.Login.modalShow;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n\r\n    if (this.props.Login.loadEsign) {\r\n      if ((this.props.Login.operation.operation ?\r\n        this.props.Login.operation.operation : this.props.Login.operation) === \"delete\") {\r\n        loadEsign = false;\r\n        openModal = false;\r\n        openChildModal = false;\r\n        selectedRecord = {};\r\n      }\r\n      else {\r\n        loadEsign = false;\r\n        modalShow = true;\r\n        openModal = false;\r\n        openChildModal = false;\r\n\r\n      }\r\n      selectedRecord['esignpassword'] = \"\"\r\n      selectedRecord['esigncomments'] = \"\"\r\n      selectedRecord['esignreason'] = \"\"\r\n    }\r\n    else {\r\n      openModal = false;\r\n      openChildModal = false;\r\n      modalShow = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: {\r\n        openModal, openChildModal, modalShow, loadEsign,\r\n        selectedRecord, selectedId: null\r\n      },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  onFilterSubmit = () => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n    if ((this.state.nfilterSampleType && this.state.nfilterSampleType.value) && (this.props.Login.masterData.defaultRegtypeValue && this.props.Login.masterData.defaultRegtypeValue.value)) {\r\n      let inputParam = {\r\n        inputData: {\r\n          nsampletypecode: this.state.nfilterSampleType.value,\r\n          nregtypecode: this.state.nregtypecode.value,\r\n          userinfo: this.props.Login.userInfo,\r\n          nfilterSampleType: this.state.nfilterSampleType,\r\n        },\r\n        masterData: {\r\n          ...this.props.Login.masterData,\r\n          defaultSampleTypeValue: this.state.nfilterSampleType,\r\n          defaultRegtypeValue: this.state.nregtypecode,\r\n          SelectedRegType: this.state.nregtypecode.item,\r\n          searchedData: undefined\r\n        },\r\n        classUrl: \"registrationsubtypeconfigration\",\r\n        methodUrl: \"BySampleType\",\r\n      };\r\n      this.props.SampleTypeFilterchange(\r\n        inputParam,\r\n        this.props.Login.masterData.filterSampleType\r\n      );\r\n    } else {\r\n        toast.warn(\r\n          this.props.intl.formatMessage({\r\n            id: \"IDS_SELECTFILTER\",\r\n          })\r\n        );\r\n    }\r\n  };\r\n\r\n  onSaveClick = (saveType, formRef) => {\r\n    let inputData = [];\r\n    let UsersArray = []\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let postParam = {\r\n      inputListName: \"RegSubType\",\r\n      selectedObject: \"selectedRegSubType\",\r\n      primaryKeyField: \"nregsubtypecode\",\r\n      isSingleGet: true\r\n    }\r\n\r\n    inputData[\"nmappingfieldcode\"] = this.props.Login.screenName === \"IDS_DEPARTMENT\" ? this.state.selectedRecord[\"ndeptcode\"].value : this.props.Login.screenName === \"IDS_USERROLE\" ? this.state.selectedRecord[\"nuserrolecode\"].value : -1;\r\n    inputData[\"nallusers\"] = this.state.selectedRecord[\"ndeltacheck\"] || 4;\r\n    UsersArray = this.state.selectedRecord && this.state.selectedRecord.nusercode && this.state.selectedRecord.nusercode.map(item => {\r\n      let users = {}\r\n      users[\"nusercode\"] = item.value;\r\n      return users\r\n    });\r\n    inputData['usermapping'] = UsersArray;\r\n    inputData[\"selectedregsubtype\"] = this.props.Login.masterData.selectedRegSubType;\r\n    const inputParam = {\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      methodUrl: \"Department\",\r\n      inputData: inputData,\r\n      operation: this.props.Login.operation,\r\n      saveType,\r\n      formRef,\r\n      searchRef: this.searchRef,\r\n      postParam: postParam,\r\n      selectedRecord: { ...this.state.selectedRecord }\r\n    };\r\n\r\n    const masterData = this.props.Login.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode,\r\n        this.props.Login.ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          saveType,\r\n          openChildModal: true\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n  validateEsign = () => {\r\n    let modalName;\r\n    const inputParam = {\r\n      inputData: {\r\n        userinfo: {\r\n          ...this.props.Login.userInfo,\r\n          sreason: this.state.selectedRecord[\"esigncomments\"],\r\n          nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n          spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n        },\r\n        password: this.state.selectedRecord[\"esignpassword\"],\r\n      },\r\n      screenData: this.props.Login.screenData,\r\n    };\r\n\r\n    this.props.validateEsignCredential(inputParam, modalName);\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  tabDetail = () => {\r\n    const tabMap = new Map();\r\n    const deleteSecId =\r\n      this.state.controlMap.has(\"DeleteDepartment\") &&\r\n      this.state.controlMap.get(\"DeleteDepartment\").ncontrolcode;\r\n\r\n    if (this.props.Login.masterData.defaultSampleTypeValue.item.ntransfiltertypecode === 1)\r\n      tabMap.set(\r\n        \"IDS_DEPARTMENT\",\r\n        <RegistrationSubTypeConfigDepartmentTab\r\n          controlMap={this.state.controlMap}\r\n          userRoleControlRights={this.state.userRoleControlRights}\r\n          dataState={this.props.Login.dataState}\r\n          masterData={this.props.Login.masterData[\"selectedSection\"] || []}\r\n          selectedRegSubType={this.props.Login.masterData.selectedRegSubType}\r\n          userInfo={this.props.Login.userInfo}\r\n          inputParam={this.props.Login.inputParam}\r\n          deleteRecord={this.DeleteTabRecords}\r\n          deleteSecId={deleteSecId}\r\n          getDepartmentData={this.props.getDepartmentData}\r\n          DepartmentAndUser={this.props.Login.masterData.DepartmentAndUser || []}\r\n          screenName=\"IDS_DEPARTMENT\"\r\n          selectedRecord={this.state.selectedRecord}\r\n          settings={this.props.Login.settings}\r\n        />\r\n      );\r\n\r\n\r\n    if (this.props.Login.masterData.defaultSampleTypeValue.item.ntransfiltertypecode === 2)\r\n      tabMap.set(\r\n        \"IDS_USERROLE\",\r\n        <RegistrationSubTypeConfigUserRoleTab\r\n          controlMap={this.state.controlMap}\r\n          userRoleControlRights={this.state.userRoleControlRights}\r\n          dataState={this.props.Login.dataState}\r\n          masterData={this.props.Login.masterData[\"selectedSection\"] || []}\r\n          selectedRegSubType={this.props.Login.masterData.selectedRegSubType}\r\n          userInfo={this.props.Login.userInfo}\r\n          inputParam={this.props.Login.inputParam}\r\n          deleteRecord={this.DeleteTabRecords}\r\n          deleteSecId={deleteSecId}\r\n          getUserroleData={this.props.getUserroleData}\r\n          DepartmentAndUser={this.props.Login.masterData.DepartmentAndUser || []}\r\n          screenName=\"IDS_USERROLE\"\r\n          selectedRecord={this.state.selectedRecord}\r\n          settings={this.props.Login.settings}\r\n        />\r\n      );\r\n\r\n    if (this.props.Login.masterData.defaultSampleTypeValue.item.ntransfiltertypecode === 3)\r\n      tabMap.set(\r\n        \"IDS_USERS\",\r\n        <RegistrationSubTypeConfigUserTab\r\n          controlMap={this.state.controlMap}\r\n          userRoleControlRights={this.state.userRoleControlRights}\r\n          dataState={this.props.Login.dataState}\r\n          masterData={this.props.Login.masterData[\"selectedSection\"] || []}\r\n          //masterData={this.props.Login.masterData || []}\r\n          selectedRegSubType={this.props.Login.masterData.selectedRegSubType}\r\n          userInfo={this.props.Login.userInfo}\r\n          inputParam={this.props.Login.inputParam}\r\n          deleteRecord={this.DeleteTabRecords}\r\n          deleteSecId={deleteSecId}\r\n          getListofUsers={this.props.getListofUsers}\r\n          DepartmentAndUser={this.props.Login.masterData.DepartmentAndUser || []}\r\n          screenName=\"IDS_USERS\"\r\n          selectedRecord={this.state.selectedRecord}\r\n          settings={this.props.Login.settings}\r\n        />\r\n      );\r\n    return tabMap;\r\n  };\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let updateState = false;\r\n    let {\r\n      selectedRecord,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      //filterData,\r\n      nfilterSampleType,\r\n      filterSampleType,\r\n      filterRegtype, nregtypecode\r\n    } = this.state;\r\n    if (\r\n      this.props.Login.selectedRecord !== previousProps.Login.selectedRecord\r\n    ) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      updateState = true;\r\n    }\r\n    if (\r\n      this.props.Login.userInfo.nformcode !==\r\n      previousProps.Login.userInfo.nformcode\r\n    ) {\r\n      userRoleControlRights = [];\r\n      if (this.props.Login.userRoleControlRights) {\r\n        this.props.Login.userRoleControlRights[\r\n          this.props.Login.userInfo.nformcode\r\n        ] &&\r\n          Object.values(\r\n            this.props.Login.userRoleControlRights[\r\n            this.props.Login.userInfo.nformcode\r\n            ]\r\n          ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n      }\r\n      controlMap = getControlMap(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode\r\n      );\r\n      updateState = true;\r\n    }\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n      nfilterSampleType = this.state.nfilterSampleType || {};\r\n      if (\r\n        this.props.Login.masterData.SelectedSampleType &&\r\n        this.props.Login.masterData.SelectedSampleType !==\r\n        previousProps.Login.masterData.SelectedSampleType\r\n      ) {\r\n        nfilterSampleType = {\r\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\r\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\r\n          item: this.props.Login.masterData.SelectedSampleType,\r\n        };\r\n      }\r\n      //filterData = this.generateBreadCrumData();\r\n      updateState = true;\r\n    }\r\n\r\n    if (\r\n      this.props.Login.masterData.filterSampleType !== previousProps.Login.masterData.filterSampleType\r\n    ) {\r\n      const SampleTypeMap = constructOptionList(\r\n        this.props.Login.masterData.filterSampleType || [],\r\n        \"nsampletypecode\",\r\n        \"ssampletypename\",\r\n        \"ascending\",\r\n        false\r\n      );\r\n      filterSampleType = SampleTypeMap.get(\"OptionList\");\r\n      if (SampleTypeMap.get(\"DefaultValue\")) {\r\n        nfilterSampleType = SampleTypeMap.get(\"DefaultValue\");\r\n       } //else if (\r\n      //   filterInstrumentCategory &&\r\n      //   filterInstrumentCategory.length > 0\r\n      // ) {\r\n      //   nfilterInstrumentCategory = filterInstrumentCategory[0];\r\n      // }\r\n      updateState = true;\r\n    }\r\n\r\n\r\n    if (\r\n      this.props.Login.masterData.filterRegtype !== previousProps.Login.masterData.filterRegtype\r\n    ) {\r\n      const SampleTypeMap = constructOptionList(\r\n        this.props.Login.masterData.filterRegtype || [],\r\n        \"nregtypecode\",\r\n        \"sregtypename\",\r\n        \"ascending\",\r\n        false\r\n      );\r\n      filterRegtype = SampleTypeMap.get(\"OptionList\");\r\n      if (SampleTypeMap.get(\"DefaultValue\")) {\r\n        nregtypecode = SampleTypeMap.get(\"DefaultValue\");\r\n      } else if (\r\n        filterRegtype &&\r\n        filterRegtype.length > 0\r\n      ) {\r\n        nregtypecode = filterRegtype[0];\r\n      }\r\n      updateState = true;\r\n    }\r\n\r\n    if (updateState) {\r\n      this.setState({\r\n        selectedRecord,\r\n        userRoleControlRights,\r\n        controlMap,\r\n        //filterData,\r\n        nfilterSampleType,\r\n        filterSampleType, nregtypecode, filterRegtype\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n\r\n    let mandatoryFields = [];\r\n\r\n    if (this.props.Login.screenName === \"IDS_DEPARTMENT\") {\r\n\r\n      this.state.selectedRecord && this.state.selectedRecord[\"ndeltacheck\"] === 4 ? mandatoryFields.push({\r\n        mandatory: true,\r\n        idsName: \"IDS_DEPARTMENT\",\r\n        dataField: \"ndeptcode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }, {\r\n        mandatory: true,\r\n        idsName: \"IDS_USERS\",\r\n        dataField: \"nusercode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }\r\n      ) : mandatoryFields.push({\r\n        mandatory: true,\r\n        idsName: \"IDS_DEPARTMENT\",\r\n        dataField: \"ndeptcode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      });\r\n\r\n    }\r\n    else if (this.props.Login.screenName === \"IDS_USERROLE\") {\r\n\r\n      this.state.selectedRecord && this.state.selectedRecord[\"ndeltacheck\"] === 4 ? mandatoryFields.push({\r\n        mandatory: true,\r\n        idsName: \"IDS_USERROLE\",\r\n        dataField: \"nuserrolecode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }, {\r\n        mandatory: true,\r\n        idsName: \"IDS_USERS\",\r\n        dataField: \"nusercode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      }\r\n      ) : mandatoryFields.push({\r\n        mandatory: true,\r\n        idsName: \"IDS_USERROLE\",\r\n        dataField: \"nuserrolecode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      });\r\n\r\n    }\r\n    else {\r\n      mandatoryFields.push({\r\n        mandatory: true,\r\n        idsName: \"IDS_USERS\",\r\n        dataField: \"nusercode\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      });\r\n    }\r\n    const { selectedRegSubType } = this.props.Login.masterData;\r\n    const filterParam = {\r\n      inputListName: \"RegSubType\",\r\n      selectedObject: \"selectedRegSubType\",\r\n      primaryKeyField: \"nregsubtypecode\",\r\n      fetchUrl: \"registrationsubtypeconfigration/getTabdetails\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n    };\r\n    let breadCrumbData = []; //this.props.Login.masterData.defaultInstrumentCatValue || [];\r\n\r\n    breadCrumbData = [\r\n      {\r\n        \"label\": \"IDS_SAMPLETYPE\",\r\n        //\"value\": this.props.Login.masterData.defaultInstrumentCatValue ? this.props.Login.masterData.defaultInstrumentCatValue.label : \"-\"\r\n        \"value\": this.props.Login.masterData.defaultSampleTypeValue ? this.props.Login.masterData.SelectedSampleType.ssampletypename : \"-\"\r\n      }, {\r\n        \"label\": \"IDS_REGTYPE\",\r\n        \"value\": this.props.Login.masterData.defaultRegtypeValue ? this.props.Login.masterData.SelectedRegType.sregtypename : \"-\"\r\n      }\r\n    ];\r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n          {breadCrumbData.length > 0 ? (\r\n            <Affix top={53}>\r\n              <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n            </Affix>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Row noGutters={true}>\r\n            <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n              <span onClick={() => this.setState({ sidebarview: !this.state.sidebarview })} className='sidebar-view-btn'>\r\n                {!this.state.sidebarview ?\r\n                  <i class=\"fa fa-less-than\"></i> :\r\n                  <i class=\"fa fa-greater-than\"></i>\r\n                }\r\n              </span>\r\n              <ListMaster\r\n                formatMessage={this.props.intl.formatMessage}\r\n                screenName={\"RegSubType\"}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={\r\n                  this.props.Login.masterData.searchedData ||\r\n                  this.props.Login.masterData.RegSubType\r\n                }\r\n                getMasterDetail={(RegSubType) =>\r\n                  this.props.getTabdetails(\r\n                    RegSubType,\r\n                    this.props.Login.userInfo,\r\n                    this.props.Login.masterData\r\n                  )\r\n                }\r\n                selectedMaster={this.props.Login.masterData.selectedRegSubType}\r\n                primaryKeyField=\"nregsubtypecode\"\r\n                mainField=\"sregsubtypename\"\r\n                isIDSField=\"Yes\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                searchRef={this.searchRef}\r\n                //addId={addId}\r\n                hidePaging={false}\r\n                reloadData={this.reloadData}\r\n                // openModal={() =>\r\n                //   this.props.getInstrumentCombo(\r\n                //     \"IDS_INSTRUMENT\",\r\n                //     \"create\",\r\n                //     \"ninstrumentcode\",\r\n                //     this.props.Login.masterData,\r\n                //     this.props.Login.userInfo,\r\n                //     //addId\r\n                //   )\r\n                // }\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                onFilterSubmit={this.onFilterSubmit}\r\n                showFilterIcon={true}\r\n                showFilter={this.props.Login.showFilter}\r\n                filterComponent={[\r\n                  {\r\n                    IDS_INSTRUMENTCATEGORYFILTER: (\r\n                      <SampleTypeFilter\r\n                      filterSampleType={\r\n                          this.state.filterSampleType || []\r\n                        }\r\n                        nfilterSampleType={\r\n                          this.state.nfilterSampleType || {}\r\n                        }\r\n                        filterRegtype={this.state.filterRegtype || []}\r\n                        onComboChange={this.onComboChange}\r\n                        nregtypecode={\r\n                          this.state.nregtypecode || {}\r\n                        }\r\n                      />\r\n                    ),\r\n                  },\r\n                ]}\r\n              />\r\n            </Col>\r\n            <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n              <Row>\r\n                <Col md={12}>\r\n                  <ContentPanel className=\"panel-main-content\">\r\n                    <Card className=\"border-0\">\r\n                      {this.props.Login.masterData.selectedRegSubType ? (\r\n                        <>\r\n                          <Card.Header>\r\n                            <Card.Title className=\"product-title-main\">\r\n                              {\r\n                                this.props.Login.masterData.selectedRegSubType\r\n                                  .sregsubtypename\r\n                              }\r\n                            </Card.Title>\r\n                          </Card.Header>\r\n                          <Card.Body>\r\n                            {selectedRegSubType && (\r\n                              <CustomTab\r\n                                tabDetail={this.tabDetail()}\r\n                                onTabChange={this.onTabChange}\r\n                              />\r\n                            )}\r\n                          </Card.Body>\r\n                        </>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </Card>\r\n                  </ContentPanel>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        {(this.props.Login.openModal || this.props.Login.openChildModal) && (\r\n          <SlideOutModal\r\n            show={(this.props.Login.openModal || this.props.Login.openChildModal)}\r\n            closeModal={this.closeModal}\r\n            operation={this.props.Login.operation}\r\n            size={this.props.Login.loadEsign ? \"lg\" : this.props.Login.openModal ? \"xl\" : this.props.Login.openChildModal ? \"lg\" : \"lg\"}\r\n            inputParam={this.props.Login.inputParam}\r\n            screenName={this.props.Login.screenName}\r\n            onSaveClick={this.onSaveClick}\r\n            esign={this.props.Login.loadEsign}\r\n            validateEsign={this.validateEsign}\r\n            masterStatus={this.props.Login.masterStatus}\r\n            mandatoryFields={mandatoryFields}\r\n            updateStore={this.props.updateStore}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            addComponent={\r\n              this.props.Login.loadEsign ? (\r\n                <Esign\r\n                  operation={this.props.Login.operation}\r\n                  onInputOnChange={this.onInputOnChange}\r\n                  inputParam={this.props.Login.inputParam}\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                />\r\n              ) : this.props.Login.screenName === \"IDS_DEPARTMENT\" ? (\r\n                <AddRegistrationSubtypeConfigDepartment\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                  Lab={this.props.Login.Lab}\r\n                  Users={this.props.Login.Users}\r\n                  onComboChange={this.onComboChange}\r\n                  onSwitchChange={this.onSwitchChange}\r\n                  onInputOnChange={this.onInputOnChange}\r\n                  isdisable={this.props.Login.masterData.isdisable || false}\r\n\r\n                />\r\n              ) :\r\n                this.props.Login.screenName === \"IDS_USERROLE\" ? (\r\n                  <AddRegistrationSubtypeConfigUserRole\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    Lab={this.props.Login.Lab}\r\n                    Users={this.props.Login.Users}\r\n                    onComboChange={this.onComboChange}\r\n                    onSwitchChange={this.onSwitchChange}\r\n                    onInputOnChange={this.onInputOnChange}\r\n                    isdisable={this.props.Login.masterData.isdisable || false}\r\n                  />\r\n                ) :\r\n                  this.props.Login.screenName === \"IDS_USERS\" ? (\r\n                    <AddRegistrationSubtypeConfigUser\r\n                      selectedRecord={this.state.selectedRecord || {}}\r\n                      Users={this.props.Login.Users}\r\n                      onComboChange={this.onComboChange}\r\n                      onSwitchChange={this.onSwitchChange}\r\n                      onInputOnChange={this.onInputOnChange}\r\n                    />\r\n                  ) :\r\n                    \"\"\r\n            }\r\n          />\r\n        )}\r\n\r\n\r\n      </>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  getTabdetails,\r\n  filterColumnData,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  getSectionUsers,\r\n  getDepartmentData,\r\n  SampleTypeFilterchange,\r\n  getDepartmentBasedUser, getUserroleData, getUserRoleBasedUser, getRegtypeBasedSampleType, getListofUsers\r\n})(injectIntl(RegistrationSubtypeConfigration));"]},"metadata":{},"sourceType":"module"}