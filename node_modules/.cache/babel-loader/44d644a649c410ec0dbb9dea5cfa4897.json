{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData, getFilterConditionsBasedonDataType, getSameRecordFromTwoArrays } from \"../components/CommonScript\";\nimport { designProperties, reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { crudMaster } from \"./ServiceAction\";\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\nimport { fileViewUrl, reportUrl } from '../rsapi'; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nconst {\n  checkTree,\n  loadTree\n} = QbUtils; //     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\n            realReportTypeList: inputParam.inputData.realReportTypeList || [],\n            realRegTypeList: inputParam.inputData.realRegTypeList || [],\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || [] // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam, selectedRecordLogin, selectedRecordState, LoginData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\n    const filteredSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\n    urlArray = [filteredSample, approvedReportTemplate];\n    Axios.all(urlArray).then(response => {\n      let reportTemplateList = [];\n      const reportTemplateMap = constructOptionList(response[1].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n      reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      let responseData = { ...response[0].data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n      let nsectioncode = {};\n      let selectedRecord = {}; //ALPD-4797--Vignesh R(05-09-2024)\n\n      let slideOutClose = false; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.inputData.isClear) {\n        masterData.ReleaseSample.map(x => {\n          const matchingItem = inputParam.masterData.ReleaseSample.find(item => item.npreregno === x.npreregno && item.selected === true);\n\n          if (matchingItem) {\n            x.selected = true;\n          }\n        });\n        Object.values(masterData.ReleaseSubSample).flat().forEach(x => {\n          const matchingItem = Object.values(inputParam.masterData.ReleaseSubSample).flat().find(item => item.ntransactionsamplecode === x.ntransactionsamplecode && item.selected === true);\n\n          if (matchingItem) {\n            x.selected = true;\n          }\n        });\n        Object.values(masterData.ReleaseTest).flat().forEach(x => {\n          const matchingItem = Object.values(inputParam.masterData.ReleaseTest).flat().find(item => item.ntransactiontestcode === x.ntransactiontestcode && item.selected === true);\n\n          if (matchingItem) {\n            x.selected = true;\n          }\n        });\n      }\n\n      if (nsectioncode !== undefined) {\n        nsectioncode = inputParam.inputData.nsectioncode;\n      }\n\n      if (selectedRecordState !== undefined && inputParam.inputData.isClear !== true) {\n        delete selectedRecordState.nreporttemplatecode;\n      }\n\n      selectedRecord = { ...selectedRecordLogin,\n        ...selectedRecordState\n      };\n      masterData[\"reportTemplateList\"] = reportTemplateList; //sortData(masterData,\"ascending\",\"nfilternamecode\");\n      //sortData(masterData, \"\", \"ncoaparentcode\"); \n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nsectioncode: nsectioncode,\n          FilterQueryBuilder: false,\n          screenName: inputParam.inputData.screenName,\n          awesomeTree: inputParam.inputData.isClear ? undefined : inputParam.inputData.awesomeTree,\n          filterquery: inputParam.inputData.isClear ? undefined : inputParam.inputData.filterquery,\n          slideOutClose: slideOutClose,\n          selectedRecord,\n          isClear: inputParam.inputData.isClear ? false : true,\n          // awesomeTree: LoginData && LoginData.awesomeTree,\n          // filterquery:LoginData && LoginData.filterquery,\n          fields: LoginData && LoginData.fields,\n          filterQueryTreeStr: LoginData && LoginData.filterQueryTreeStr\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  if (inputParam.masterData.realReportTypeValue.ncoareporttypecode === reportCOAType.PATIENTWISE) {\n    let fieldList = [];\n    fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\n    const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\n    const {\n      fields,\n      gridColumns\n    } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined);\n    let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined;\n    return function (dispatch) {\n      let urlArray = [];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let ProjectTypeList = [];\n        let sectionList = [];\n        let masterData = {};\n        let openModal = true;\n        masterData = { ...inputParam.masterData\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            fields,\n            gridColumns,\n            awesomeTree,\n            seletedFilterComponent: fieldList[0],\n            // awesomeTree:fieldList[0].awesomeTree,\n            awesomeConfig: undefined,\n            lstPatient: [],\n            kendoSkip: 0,\n            kendoTake: 5,\n            masterData,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: \"IDS_PATIENTSEARCH\",\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\",\n            slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    return function (dispatch) {\n      let ismandatory = false;\n      inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.map(x => {\n        if (x.ismandatory) {\n          ismandatory = true;\n        }\n      });\n\n      if (ismandatory) {\n        inputParam['inputData'] = { ...inputParam.inputData,\n          ismandatory: true\n        };\n      }\n\n      const screenName = \"\";\n      let urlArray = [];\n      inputParam.inputData['isAddPopup'] = true;\n      const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n      const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n      const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n      const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\n      const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData); // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\n      //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      //     urlArray = [projectType,sectionType];\n      // }\n      // else if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      //     urlArray = [sectionType];\n      // }\n      // else {\n      //     urlArray = [releaseSample\n      //         //,reportType\n      //     ];\n      // }\n\n      urlArray = [releaseSample, projectType, sectionType, testList, approvedReportTemplate];\n\n      if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\n        let itemList = [];\n        inputParam.DynamicReportFilterTypeItem.map(x => {\n          if (x[designProperties.LISTITEM] === \"combo\") {\n            itemList.push({\n              \"Pkey\": x[designProperties.PRIMARYKEY],\n              \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\n              \"tablename\": x[designProperties.TABLENAME],\n              \"columnname\": x[designProperties.COLUMNNAME],\n              \"keyName\": x[designProperties.VALUE],\n              \"isMultiLingual\": x[designProperties.MULTILINGUAL],\n              \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\n              \"recordType\": x[designProperties.RECORDTYPE]\n            });\n          }\n        });\n        inputParam[\"inputData\"][\"itemList\"] = itemList;\n        const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData,\n          'userInfo': inputParam.inputData.userinfo\n        });\n        urlArray.push(reportFilterType);\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n        //     \"scoareporttypename\", undefined, undefined, false);\n        // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let sectionvalue = [];\n        let comboValues = {};\n        let reportTemplateList = [];\n        let selectedRecord = {};\n        delete selectedRecord[\"nsectioncode\"];\n        delete selectedRecord[\"nreporttemplatecode\"]; // let selectedRecord = inputParam.inputData.selectedRecord;\n        // let selectedRecord = inputParam.selectedRecord;\n        // selectedRecord[\"nmultiplesampleinsinglerelease\"] = inputParam.realReportTypeValue[\"nmultiplesampleinsinglerelease\"];\n\n        const sectionTypeMap = constructOptionList(response[2].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        sectionList = sectionTypeMap.get(\"OptionList\");\n        sectionList.map(x => sectionvalue.push({\n          \"value\": x.value,\n          \"title\": x.label\n        }));\n        let testListMap = response[3] && response[3].data;\n\n        if (inputParam.inputData.isneedsection !== transactionStatus.YES) {\n          const reportTemplateMap = constructOptionList(response[4].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n          reportTemplateList = reportTemplateMap.get(\"OptionList\");\n        }\n\n        let combovaluesListMap = response[5] && response[5].data;\n        let comboValueList = { ...testListMap,\n          ...combovaluesListMap\n        } || {};\n        comboValues = {\n          \"s.nsectioncode\": sectionvalue,\n          ...comboValueList\n        }; // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\n        //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        //     const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\n        //         \"sprojecttypename\", undefined, undefined, false);\n        //     ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\n        //     if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n        //         delete inputParam.inputData.selectedRecord.nprojecttypecode\n        //     }\n        //     if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n        //         delete inputParam.inputData.selectedRecord.nprojectmastercode\n        //     }\n        //     const sectionTypeMap = constructOptionList(response[1].data.sectionList || [], \"nsectioncode\",\n        //     \"ssectionname\", undefined, undefined, false);\n        // sectionList = sectionTypeMap.get(\"OptionList\");\n        // sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\n        // let comboValueList=response[2] && response[2].data ||{};\n        //  comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\n        // }\n        // else \n        // if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        //     const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\n        //         \"ssectionname\", undefined, undefined, false);\n        //     sectionList = sectionTypeMap.get(\"OptionList\");\n        //     sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\n        //     let comboValueList=response[1] && response[1].data ||{};\n        //      comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\n        //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\n        //     if (inputParam.inputData.selectedRecord.nsectioncode) {\n        //         delete inputParam.inputData.selectedRecord.nsectioncode\n        //     }\n        // }\n        // else {\n\n        if (ismandatory) {\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n        } else {\n          if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n          } else {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n            openModal = false;\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOSAMPLESAREAVAILABLE\"\n            }));\n          }\n        } // }\n\n\n        let awesomeTree;\n        let filterquery;\n        let filterQueryTreeStr;\n        let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\n\n        if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\n          awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig);\n          filterquery = inputParam.DynamicDefaultStructureItem.filterquery;\n          filterQueryTreeStr = inputParam.DynamicDefaultStructureItem.filterQueryTreeStr;\n        } else {\n          awesomeTree = undefined;\n        }\n\n        sortData(masterData);\n        masterData[\"reportTemplateList\"] = reportTemplateList;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            selectedRecord,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: inputParam.inputData.screenName,\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\",\n            kendoSkip: 0,\n            kendoTake: 5,\n            sectionvalue,\n            comboValues,\n            awesomeTree: awesomeTree,\n            filterquery,\n            fields,\n            filterQueryTreeStr,\n            FilterQueryBuilder: false,\n            screenNameCopy: inputParam.inputData.screenName,\n            ismandatory,\n            slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n            //awesomeConfig:undefined\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  }\n}\nexport function generateReleasedReport(inputData, Data, preventtb) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = []; //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\n    //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\n\n    inputData['preventTbFlow'] = preventtb === true ? preventtb : false;\n\n    if (inputData.listStatus === transactionStatus.CORRECTION) {\n      const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\n      urlArray = [afterCorrection];\n    } else {\n      const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\n      urlArray = [releaseSample];\n    }\n\n    Axios.all(urlArray).then(response => {\n      if (response[0].data.rtn === \"MappingNeeded\") {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            modalShow: false,\n            // selectedRecord: {}, \n            loadEsign: false //openModal: false,\n            // preventTbCheck:true\n\n          }\n        });\n        inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({\n          id: \"IDS_SUBSAMPLEWASNOTMAPPED\"\n        }), intl.formatMessage({\n          id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\"\n        }), intl.formatMessage({\n          id: \"IDS_OK\"\n        }), intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => dispatch(generateReleasedReport(inputData, Data, true)), false, () => dispatch(cancelPopUp(inputData, Data)));\n      } else {\n        // if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\n        //     dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\n        // }\n        if (response[0].data[\"PreventTb\"]) {\n          toast.warn(response[0].data[\"PreventTb\"]);\n        } // ALPD-4229 (30-05-2024) Added code when search and do action\n\n\n        let searchedData = Data.searchedData;\n\n        if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\n          searchedData = response[0].data && response[0].data.ReleaseHistory && getSameRecordFromTwoArrays(response[0].data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\n        }\n\n        sortData(searchedData, '', 'ncoaparentcode'); // ALPD-4229 (12-06-2024) Added sortData for searchedData\n\n        let masterData = { ...Data,\n          ...response[0].data,\n          searchedData\n        }; //Added by sonia on 18-08-2024 for JIRA ID:4716 \n        //if (inputData.generateReport){\n        //   if(inputData.newTabReport){\n\n        if (response[0].data && response[0].data.rtn) {\n          if (response[0].data.rtn === \"Success\") {\n            if (inputData.newTabReport) {\n              if (response[0].data.filetype === 'jrxml') {\n                let value = \"\";\n                value = response[0][\"data\"][\"reportViewURL\"];\n                var win = window.open(value);\n\n                if (win) {\n                  win.focus();\n                } else {\n                  intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n                }\n              } else if (response[0].data.filetype === 'mrt') {\n                if (response[0].data.sourceparameter != undefined && response[0].data.sourceparameter != \"\") {\n                  let mrtfilePath = reportUrl() + \"?name=\" + inputData.userinfo.sreportingtoolfilename //en-xml\n                  + \"&slanguagetypecode=\" + inputData.userinfo.sreportlanguagecode //en-us\n                  + \"&foldername=\" + response[0].data.folderName //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n                  + \"&filename=\" + response[0].data.FILEName //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n                  + \"&sconnectionstring=\" + inputData.userinfo.sconnectionString + \"&sreportlink=\" + response[0].data.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n                  + \"&smrttemplatelink=\" + response[0].data.smrttemplatelink //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n                  + \"&sourceparameter=\" + encodeURIComponent(JSON.stringify(response[0].data.sourceparameter)); //JSON.stringify(response[0].data.sourceparameter)\n                  //console.log(\"path1:\",mrtfilePath);\n\n                  window.open(mrtfilePath);\n                }\n              }\n            } else {\n              document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\n              document.getElementById(\"download_data\").click();\n            }\n          } else {\n            toast.warn(response[0].data.rtn);\n          }\n        } //   }\n\n\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            change: inputData.change,\n            masterData,\n            modalShow: false,\n            selectedRecord: {},\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data['rtn']);\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function cancelPopUp(inputData, Data) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        loading: false,\n        modalShow: false,\n        selectedRecord: {},\n        loadEsign: false,\n        openModal: false\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      // ncoaparentcode: inputParam.ncoaparentcode,\n      ncoaparentcode: inputParam.releaseno ? inputParam.releaseno.map(item => item.ncoaparentcode).join(\",\") : \"-1\",\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      isneedsection: inputParam.inputData.isneedsection,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ReleaseSample: []\n          },\n          // selectedRecord: {},\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionForSectionWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getSection\", inputData.inputData).then(response => {\n      const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const sectionList = sectionMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ReleaseSample: []\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function getApprovedRecordsAsDraft(inputData, Data1, seletedRecord) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      // ALPD-4229 (30-05-2024) Added searchRef to clear search text in search filter\n      let searchRef = inputData.searchRef;\n      delete inputData.searchRef;\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          //SearchRef undefined issue fixed - L.Subashini\n          if (searchRef !== undefined) searchRef.current.value = \"\";\n          let masterData = { ...Data1,\n            ...response.data,\n            searchedData: undefined\n          };\n          delete seletedRecord.nreporttemplatecode;\n          seletedRecord[\"nisarnowiserelease\"] = transactionStatus.NO;\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false,\n              slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              // loadEsign: false,\n              //openModal: false,\n              slideOutClose: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function preliminaryReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n    // rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\n\n    rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData).then(response => {\n      // ALPD-4229 (30-05-2024) Added code when search and do action\n      let searchedData = Data.searchedData;\n\n      if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\n        searchedData = response.data && response.data.ReleaseHistory && getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\n      }\n\n      sortData(searchedData, '', 'ncoaparentcode'); // ALPD-4229 (12-06-2024) Added sortData for searchedData\n\n      let masterData = { ...Data,\n        ...response.data,\n        searchedData\n      };\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode'); //Added by sonia on 18-08-2024 for JIRA ID:4716\n\n      if (response.data.rtn === \"Success\") {\n        if (inputParam.inputData.newTabReport) {\n          // let value = \"\";\n          // value = response.data[\"reportViewURL\"];\n          // var win = window.open(value);\n          // if (win) {\n          //     win.focus();\n          // } else {\n          //     intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n          // }\n          if (response.data.filetype === 'jrxml') {\n            let value = \"\";\n            value = response.data[\"reportViewURL\"];\n            var win = window.open(value);\n\n            if (win) {\n              win.focus();\n            } else {\n              intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n            }\n          } else if (response.data.filetype === 'mrt') {\n            if (response.data.sourceparameter != undefined && response.data.sourceparameter != \"\") {\n              let mrtfilePath = reportUrl() + \"?name=\" + inputParam.inputData.userinfo.sreportingtoolfilename //en-xml\n              + \"&slanguagetypecode=\" + inputParam.inputData.userinfo.sreportlanguagecode //en-us\n              + \"&foldername=\" + response.data.folderName //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n              + \"&filename=\" + response.data.FILEName //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n              + \"&sconnectionstring=\" + inputParam.inputData.userinfo.sconnectionString + \"&sreportlink=\" + response.data.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n              + \"&smrttemplatelink=\" + response.data.smrttemplatelink //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n              + \"&sourceparameter=\" + encodeURIComponent(JSON.stringify(response.data.sourceparameter)); //JSON.stringify(response[0].data.sourceparameter)\n              //console.log(\"path:\",mrtfilePath);\n\n              window.open(mrtfilePath);\n            }\n          }\n        } else {\n          document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n          document.getElementById(\"download_data\").click();\n        }\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function previewAndFinalReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      }; //Added by sonia on 18-08-2024 for JIRA ID:4716 \n\n      if (response.data.rtn === \"Success\") {\n        if (inputParam.inputData.action == 'Regenerate') {\n          document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n          document.getElementById(\"download_data\").click();\n        } else {\n          if (inputParam.inputData.newTabReport) {\n            if (response.data.filetype === 'jrxml') {\n              let value = \"\";\n              value = response.data[\"reportViewURL\"];\n              var win = window.open(value);\n\n              if (win) {\n                win.focus();\n              } else {\n                intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n              }\n            } else if (response.data.filetype === 'mrt') {\n              if (response.data.sourceparameter != undefined && response.data.sourceparameter != \"\") {\n                let mrtfilePath = reportUrl() + \"?name=\" + inputParam.inputData.userinfo.sreportingtoolfilename //en-xml\n                + \"&slanguagetypecode=\" + inputParam.inputData.userinfo.sreportlanguagecode //en-us\n                + \"&foldername=\" + response.data.folderName //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n                + \"&filename=\" + response.data.FILEName //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n                + \"&sconnectionstring=\" + inputParam.inputData.userinfo.sconnectionString + \"&sreportlink=\" + response.data.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n                + \"&smrttemplatelink=\" + response.data.smrttemplatelink //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n                + \"&sourceparameter=\" + encodeURIComponent(JSON.stringify(response.data.sourceparameter)); //JSON.stringify(response[0].data.sourceparameter)\n                //console.log(\"path:\",mrtfilePath);\n\n                window.open(mrtfilePath);\n              }\n            }\n          } else {\n            //if(inputParam.inputData.generateReport || inputParam.inputData.action == 'Regenerate')\n            //{                        \n            document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n            document.getElementById(\"download_data\").click(); // }\n          }\n        }\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n\n      if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\n        // if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && \n        // (inputParam.inputData['nneedsubsample'] === false || \n        // (inputParam.inputData['nneedsubsample'] === true && inputParam.inputData['ncoaparenttranscode'] === transactionStatus.DRAFT))){\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n        urlArray = [releaseSample, statusService //,reportType\n        ];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          if (response[1].data.Status === \"Success\") {\n            let masterData = {};\n            let selectedRecord = inputParam.inputData.selectedRecord;\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            }; // responseData = sortData(responseData)\n\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                // selectedRecord,\n                isDeletePopup: true,\n                isComboCheck: true,\n                isEditPopup: false,\n                ncontrolCode,\n                loading: false,\n                showFilter: false,\n                openModal: true,\n                isAddPopup: false,\n                operation: \"delete\",\n                ncontrolCode: inputParam.inputData.ncontrolCode,\n                expandCheck: false,\n                screenName: inputParam.inputData.screenName,\n                slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n              }\n            });\n          } else {\n            toast.warn(intl.formatMessage({\n              id: response[1].data.ValidationStatus\n            }));\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                ncontrolCode: ncontrolCode,\n                loading: false\n              }\n            });\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); // } else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \n        //     (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\n        //         toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        }); // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\n      }\n    }\n  };\n}\nexport function getDeleteApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\n      delete inputData.searchRef;\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false,\n              slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //    masterData,\n              change: inputData.change,\n              loading: false,\n              // loadEsign: false,\n              // openModal: false,\n              expandCheck: false,\n              slideOutClose: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n} //Added by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\n\nexport function validationforAppendSamples(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\n      urlArray = [sampleCountValidation];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[0].data.rtn === \"Success\") {\n          dispatch(getEditApprovedSample(inputParam, ncontrolCode));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_MAXIMUMSAMPLESAPPENDED\"\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n} //Modified by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\n\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n\n    if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\n      // const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\n      const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n      //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n      const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData); // const projectStatus = rsapi.post(\"release/getProjectBasedAlert\", inputParam.inputData);\n\n      const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\n      const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData); // if (inputParam.inputData.ncoareporttypecode === 7) {\n      //     urlArray = [ projectType,statusService];\n      // }\n      // else if (inputParam.inputData.ncoareporttypecode === 8) {\n      //     urlArray = [ releaseSample,statusService];\n      // }\n      // else {\n\n      urlArray = [releaseSample, statusService, testList, sectionType //,reportType\n      ];\n\n      if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\n        let itemList = [];\n        inputParam.DynamicReportFilterTypeItem.map(x => {\n          if (x[designProperties.LISTITEM] === \"combo\") {\n            itemList.push({\n              \"Pkey\": x[designProperties.PRIMARYKEY],\n              \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\n              \"tablename\": x[designProperties.TABLENAME],\n              \"columnname\": x[designProperties.COLUMNNAME],\n              \"keyName\": x[designProperties.VALUE],\n              \"isMultiLingual\": x[designProperties.MULTILINGUAL],\n              \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\n              \"recordType\": x[designProperties.RECORDTYPE]\n            });\n          }\n        });\n        inputParam[\"inputData\"][\"itemList\"] = itemList;\n        const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData,\n          'userInfo': inputParam.inputData.userinfo\n        });\n        urlArray.push(reportFilterType);\n      } // }\n\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n        //     \"scoareporttypename\", undefined, undefined, false);\n        // const ReportTypeList = reportTypeMap.get(\"OptionList\");                   \n        if (response[1].data.Status === \"Success\") {\n          let ProjectTypeList = [];\n          let sectionList = [];\n          let comboValues = {};\n          let sectionvalue = [];\n          const sectionTypeMap = constructOptionList(response[3].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n          sectionList = sectionTypeMap.get(\"OptionList\");\n          sectionList.map(x => sectionvalue.push({\n            \"value\": x.value,\n            \"title\": x.label\n          }));\n          let testListMap = response[2] && response[2].data;\n          let combovaluesListMap = response[4] && response[4].data;\n          let comboValueList = { ...testListMap,\n            ...combovaluesListMap\n          } || {};\n          comboValues = {\n            \"s.nsectioncode\": sectionvalue,\n            ...comboValueList\n          }; // let selectedRecord = {\"ncoareporttypecode\": {\n          //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n          //      \"label\": response[1].data.ReportType[0].scoareporttypename\n          // }\n          // };\n\n          let masterData = {};\n          let openModal = true;\n          let selectedRecord = inputParam.inputData.selectedRecord;\n\n          if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n          } else {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n            openModal = false;\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOSAMPLESAREAVAILABLE\"\n            }));\n          } // responseData = sortData(responseData)\n\n\n          let awesomeTree;\n          let filterquery;\n          let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\n\n          if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\n            awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig);\n            filterquery = inputParam.DynamicDefaultStructureItem.filterquery;\n          } else {\n            awesomeTree = undefined;\n          }\n\n          sortData(masterData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              // selectedRecord,\n              sectionList,\n              ncontrolCode: inputParam.inputData.ncontrolCode,\n              isDeletePopup: false,\n              isComboCheck: false,\n              isEditPopup: true,\n              ProjectTypeList,\n              loading: false,\n              showFilter: false,\n              openModal: openModal,\n              isAddPopup: false,\n              operation: \"append\",\n              expandCheck: false,\n              screenName: inputParam.inputData.screenName,\n              sectionvalue,\n              comboValues,\n              awesomeTree: awesomeTree,\n              filterquery,\n              fields,\n              screenNameCopy: inputParam.inputData.screenName,\n              slideOutClose: false // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[1].data.ValidationStatus\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      }); // }  else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \n      // (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\n      //     toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\"\n      }));\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\n    }\n  };\n}\nexport function UpdateApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\n      delete inputData.searchRef;\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false,\n              slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\n\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              //loadEsign: false,\n              // openModal: false,\n              slideOutClose: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getreportcomments(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getreportcomments\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          openModal: true,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchReportInfoReleaseById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData).then(response => {\n      // const parameterResults = response.data.ReleaseParameter\n      let selectedId = editParam.editRow.nreportinforeleasecode;\n      const selectedComment = { ...response.data\n      };\n      const masterData = { ...editParam.masterData,\n        selectedComment\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"IDS_REPORTINFOCOMMENTS\",\n          selectedId,\n          masterData,\n          //isParameterInitialRender: true,\n          loading: false,\n          openModal: true,\n          // modalShow: true,\n          ReportmodalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_COMMENTS\"\n          })\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function UpdateReportComments(userInfo, Data1, inputData) {\n  let inputParamData = {\n    selectedComment: Data1.selectedComment,\n    userinfo: userInfo\n  };\n  return function (dispatch) {\n    //if (inputData !== undefined &&inputData.npreregno!==\"\") {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateReportComment\", inputParamData).then(response => {\n      let masterData = { ...Data1,\n        ...response.data,\n        selectedComment: {}\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          loading: false,\n          openModal: true,\n          expandCheck: false,\n          modalShow: false,\n          ReportmodalShow: false,\n          isComboCheck: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else {\n    //     toast.warn(intl.formatMessage({\n    //         id: \"IDS_SELECTANYONESAMPLE\"\n    //     }));\n    //}\n  };\n}\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\"\n      }));\n    } else {\n      let urlArray = [];\n      inputParam.inputData['isPopup'] = true;\n      const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n      // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n      const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n      urlArray = [resultCorrection, statusService //,reportType\n      ];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[1].data.Status === \"Success\") {\n          let masterData = {};\n          let selectedRecord = inputParam.inputData.selectedRecord;\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          sortData(masterData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              // selectedRecord,\n              isDeletePopup: true,\n              isComboCheck: true,\n              isEditPopup: false,\n              loadEsign: false,\n              ncontrolCode,\n              loading: false,\n              showFilter: false,\n              openModal: true,\n              isCorrectionNeed: true,\n              isAddPopup: false,\n              operation: \"delete\",\n              ncontrolCode: inputParam.inputData.ncontrolCode,\n              expandCheck: false,\n              hideSave: true,\n              screenName: inputParam.inputData.screenName\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[1].data.ValidationStatus\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ncontrolCode: ncontrolCode,\n              loading: false,\n              expandCheck: false,\n              loadEsign: false,\n              openModal: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function fetchParameterById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      ntransactionresultcode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseResults\", inputParamData).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.ReleaseParameter;\n      let predefDefaultFlag = false;\n      parameterResults.map((param, index) => {\n        selectedResultGrade[index] = {\n          ngradecode: param.ngradecode\n        };\n        paremterResultcode[index] = param.ntransactionresultcode;\n        let jsondata = JSON.parse(param.jsondata['value']);\n\n        if (jsondata.hasOwnProperty('additionalInfo')) {\n          additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n        }\n\n        predefDefaultFlag = false;\n        response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n          // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n          //     if (!predefDefaultFlag) {\n          //         predefDefaultFlag = true;\n          //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n          //             undefined, undefined).get(\"OptionList\");\n          //     }\n          // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n          //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n          //         undefined, undefined).get(\"OptionList\");\n          //     if (response.data.ResultParameter[index].sresult === null) {\n          //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n          //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n          //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\n          //         response.data.ResultParameter[index].editable = true;\n          //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n          //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\n          //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\n          //             &&predefinedvalue.spredefinedcomments;\n          //         }\n          //     }\n          // }\n          //  else {\n          if (!predefDefaultFlag) {\n            predefDefaultFlag = true;\n            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n          } //   }\n          //return null;\n\n        }); //Modified by sonia on 6th Aug 2024 for JIRA ID: ALPD-4566\n\n        if (parameterResults[index][\"nparametertypecode\"] == 1) {\n          parameterResults[index][\"resultaccuracycode\"] = {\n            \"value\": parameterResults[index][\"nresultaccuracycode\"],\n            \"label\": parameterResults[index][\"sresultaccuracyname\"]\n          }; //Modified by sonia on 6th Aug 2024 for JIRA ID: ALPD-4566\n\n          parameterResults[index][\"unitcode\"] = {\n            \"value\": parameterResults[index][\"nunitcode\"],\n            \"label\": parameterResults[index][\"sunitname\"]\n          };\n        }\n\n        param['editable'] = false; //return null;\n        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n        // undefined, undefined).get(\"OptionList\");\n\n        parameterResults[index] = { ...parameterResults[index],\n          ...jsondata\n        };\n      });\n      const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\", \"sresultaccuracyname\", undefined, undefined, false);\n      const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\n      const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\", \"sunitname\", undefined, undefined, false);\n      const Unit = UnitList.get(\"OptionList\"); //ALPD-4387\n\n      let formFields = [];\n\n      if (response.data.FormFields && response.data.FormFields.length > 0) {\n        let formFieldJSON = JSON.parse(response.data.FormFields[0].jsondata['value']);\n        Object.entries(formFieldJSON).map(([key, value]) => formFields.push(value));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...editParam.masterData,\n            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n            ...response.data,\n            paremterResultcode,\n            //,\n            selectedResultGrade,\n            ResultAccuracy,\n            Unit,\n            formFields\n          },\n          selectedRecord: {\n            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n            selectedResultGrade: selectedResultGrade,\n            ReleaseParameter: response.data.ReleaseParameter\n          },\n          parameterResults: response.data.ReleaseParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          // screenName: \"IDS_RESULTENTRY\",\n          openModal: true,\n          modalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_CHANGERESULT\"\n          }),\n          selectedId: editParam.primaryKeyValue,\n          //activeTestKey: \"IDS_RESULTS\",\n          ncontrolcode: editParam.editResultId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function updateCorrectionStatus(inputData, Data, screenname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateCorrectionStatus\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        // ALPD-4229 (30-05-2024) Added code when search and do action\n        let searchedData = Data.searchedData;\n\n        if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\n          searchedData = response.data && response.data.ReleaseHistory && getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\n        }\n\n        sortData(searchedData, '', 'ncoaparentcode'); // ALPD-4229 (12-06-2024) Added sortData for searchedData\n\n        let masterData = { ...Data,\n          ...response.data,\n          searchedData\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false,\n            screenName: screenname\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            // masterData,\n            //  change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false //  screenName:screenname\n\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: response.data\n        }));\n      } // }\n\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforRelease(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"release\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let doAction = screenData.inputParam.inputData.doAction;\n\n    switch (doAction) {\n      case \"appendsample\":\n        dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"removesample\":\n        dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\n        break;\n\n      case \"generate\":\n        dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"download\":\n        dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"correction\":\n        dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\n        break;\n\n      case \"saveasdraft\":\n        dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData, screenData.seletedRecord));\n        break;\n\n      case \"editresult\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"));\n        break;\n\n      case \"preliminary\":\n        dispatch(preliminaryReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editReleaseTestAttachment\":\n        dispatch(onSaveReleaseTestAttachment(screenData.inputParam));\n        break;\n\n      case \"deleteReleaseTestAttachment\":\n        dispatch(onDeleteReleaseTestAttachment(screenData.inputParam));\n        break;\n\n      case \"editReleaseTestComment\":\n        dispatch(onSaveReleaseTestComment(screenData.inputParam));\n        break;\n\n      case \"deleteReleaseTestComment\":\n        dispatch(onDeleteReleaseTestComment(screenData.inputParam));\n        break;\n\n      case \"editReportTemplate\":\n        dispatch(SaveReportTemplate(screenData.inputParam));\n        break;\n\n      case \"createReleaseComment\":\n        dispatch(SaveReleaseComment(screenData.inputParam));\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function viewReportHistory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/viewReportHistory\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let PatientReports = response.data.PatientReports;\n      masterData = { ...masterData,\n        PatientReports\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isPatientReports: true,\n          openModal: true,\n          hideSave: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let methodUrl = \"\";\n\n    if (inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\") {\n      methodUrl = \"getReleaseTestAttachment\";\n    } else {\n      methodUrl = \"getReleaseTestComment\";\n    }\n\n    rsapi.post(\"release/\" + methodUrl, inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      const ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      const ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      const isReleaseTestAttachment = inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\";\n      const isReleaseTestComment = inputParam.inputData.actionName === \"IDS_RELEASETESTCOMMENT\";\n      const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\n      const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\n      const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\n      const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\n      const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\n      const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\n      const lstCommentSubType = constructOptionList(response.data.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, true);\n      const CommentSubType = lstCommentSubType.get(\"OptionList\"); // ALPD-4948 Added sample test comments for showing NA record as NA instead of showing '-'\n\n      const lstSampleTestComments = constructOptionList(response.data.SampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\n      const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\n      masterData = { ...masterData,\n        ReleaseTestAttachmentDetails,\n        ReleaseTestCommentDetails,\n        RegistrationArno,\n        RegistrationSampleArno,\n        RegistrationTest,\n        CommentSubType,\n        SampleTestComments\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isReleaseTestAttachment,\n          isReleaseTestComment,\n          openModal: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          screenName: inputParam.inputData.actionName,\n          loading: false,\n          isAddReleaseTestAttachment: false,\n          isInitialRender: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n} // export function writeJSONTemplate(inputParam){ \n//     return function (dispatch) {    \n//         return rsapi.post(\"release/writeJSONTemplate\",\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \n//             \"userinfo\": inputParam.userInfo}\n//     )\n//         .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false,\n//                         openModal: false,\n//                         expandCheck: false,\n//                     }\n//                 });\n//         })\n//         .catch(error => {\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             if (error.response.status === 500) {\n//                 toast.error(error.message);\n//             }\n//             else {\n//                 toast.warn(error.response.data);\n//             }\n//         })\n// }\n// }\n\nexport function releaseReportHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getPreliminaryReportHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          screenName: inputParam.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function versionHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getVersionHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          openModalTitle: \"IDS_VERSIONHISTORY\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadVersionReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadHistory(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getPatientFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n\n      if (inputParam.userinfo.nformcode === 161) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            // onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getPatientWiseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getPatientWiseSample\", inputParam).then(response => {\n      let openModal = true;\n      let screenName = \"IDS_ADDSAMPLE\";\n      let responseData = { ...response.data\n      };\n      let masterData = {};\n      let lstPatient = [];\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (responseData && responseData.ReleaseSample.length !== 0) {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      } else {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n        lstPatient = inputParam.Login.lstPatient; //openModal = false;\n\n        screenName = \"IDS_PATIENTSEARCH\";\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOSAMPLESAREAVAILABLE\"\n        }));\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // awesomeTree:fieldList[0].awesomeTree,\n          awesomeConfig: undefined,\n          lstPatient: lstPatient,\n          //lstPatient:[],\n          kendoSkip: 0,\n          kendoTake: 5,\n          masterData,\n          expandCheck: false,\n          isDeletePopup: false,\n          isComboCheck: false,\n          isEditPopup: false,\n          screenName: screenName,\n          //\"IDS_ADDSAMPLE\",\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData).then(response => {\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      let masterData = { ...inputParam.inputData.masterData,\n        ReleaseTestAttachmentDetails\n      };\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isAddReleaseTestAttachment: false,\n          isReleaseTestAttachment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          isInitialRender: false,\n          loadEsign: false,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onDeleteReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.url, {\n      \"releasetestattachment\": inputParam.inputData.releasetestattachment,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      let selectedRecord = { ...inputParam.inputData.selectedRecord,\n        ...response.data\n      };\n      let masterData = inputParam.inputData.masterData;\n      masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isReleaseTestAttachment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveReleaseTestComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData).then(response => {\n      let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      let masterData = { ...inputParam.inputData.masterData,\n        ReleaseTestCommentDetails\n      };\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isAddReleaseTestComment: false,\n          isReleaseTestComment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          isInitialRender: false,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onDeleteReleaseTestComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.inputData.url, {\n      \"releasetestcomment\": inputParam.inputData.releasetestcomment,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\n      let selectedRecord = { ...inputParam.inputData.selectedRecord,\n        ...response.data\n      };\n      let masterData = inputParam.inputData.masterData;\n      masterData[\"ReleaseTestCommentDetails\"] = ReleaseTestCommentDetails;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          isReleaseTestComment: true,\n          loading: false,\n          screenName: inputParam.inputData.screenName,\n          masterData,\n          loadEsignStateHandle: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generatereport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/generateReport\", inputParam.inputData).then(response => {\n      // let masterData = {\n      //     ...Data,\n      //     ...response.data,\n      // }\n      // if (response.data.rtn === \"Success\") {\n      //     document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n      //     document.getElementById(\"download_data\").click();\n      // } else {\n      //     toast.warn(response.data.rtn);\n      // }\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function editReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedReportTemplateById\", inputParam.inputData).then(response => {\n      let responseData = response.data;\n      let selectedRecord = inputParam.selectedRecord;\n      selectedRecord[\"nreporttemplatecode\"] = responseData.nreporttemplatecode;\n      const reportTemplateMap = constructOptionList(responseData.reportTemplateList || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", false);\n      const reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      let masterData = inputParam.masterData;\n      masterData[\"reportTemplateList\"] = reportTemplateList;\n      masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.ncoaparentcode);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          screenName: intl.formatMessage({\n            id: \"IDS_REPORTTEMPLATE\"\n          }),\n          modalTitle: intl.formatMessage({\n            id: \"IDS_EDITREPORTTEMPLATE\"\n          }),\n          modalShow: true,\n          loadEsign: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function SaveReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/updateReportTemplate\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData; // ALPD-4229 (30-05-2024) Added code when search and do action\n\n      if (masterData.searchedData && masterData.searchedData !== undefined && masterData.searchedData.length > 0) {\n        masterData.searchedData.map(item => {\n          if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n            item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n            item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n          }\n        });\n      }\n\n      masterData.selectedReleaseHistory[0][\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n      masterData.selectedReleaseHistory[0][\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n      masterData.ReleaseHistory.map(item => {\n        if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n          item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\n          item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\n        }\n      });\n      delete inputParam.selectedRecord.nreporttemplatecode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          modalShow: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteSamples(inputParam, data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/deleteSamples\", inputParam.inputData).then(response => {\n      // ALPD-4229 (30-05-2024) Added searchedData as undefined\n      inputParam.searchRef.current.value = \"\";\n      let masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4878-To get previously save filter details when click the filter name,done by Dhanushya RI\n\nexport function getReleaseFilter(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseFilter\", { ...inputParam.inputData\n    }).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData, \"\", \"nfilternamecode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          nfilternamecode: inputParam.inputData.nfilternamecode,\n          masterData,\n          loading: false,\n          modalShow: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function openReleaseComments(inputParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    const ReleaseComment = rsapi.post(\"release/getReleaseCommentDetails\", { ...inputParam.inputData\n    });\n    const ReleaseCommentDetailsStatus = rsapi.post(\"release/getReleaseCommentDetailsStatus\", {\n      userinfo: inputParam.inputData.userinfo\n    });\n    urlArray = [ReleaseComment, ReleaseCommentDetailsStatus];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let transactionstatuscomments;\n      let responseData = response[0].data;\n      let selectedRecord = inputParam.selectedRecord;\n      selectedRecord[\"sreleasecomments\"] = responseData.sreleasecomments;\n      selectedRecord[\"sreleasecommentscombo\"] = responseData.sreleasecomments;\n      const ReleaseCommentDetailsStatus = constructOptionList(response[1].data.TransactionStatus || [], \"ntranscode\", \"stransstatus\", \"ascending\", undefined, true);\n      transactionstatuscomments = ReleaseCommentDetailsStatus.get(\"OptionList\");\n      let masterData = inputParam.masterData; // masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && \n      //     masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.inputData.ncoaparentcode)\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          transactionstatuscomments,\n          screenName: intl.formatMessage({\n            id: \"IDS_RELEASECOMMENTS\"\n          }),\n          //modalTitle: intl.formatMessage({ id: \"IDS_RELEASECOMMENTS\" }),\n          //modalShow: true,\n          openModal: true,\n          loadEsign: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function SaveReleaseComment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/createReleaseComment\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n\n      if (masterData.searchedData && masterData.searchedData !== undefined && masterData.searchedData.length > 0) {\n        masterData.searchedData.map(item => {\n          if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n            item[\"ncoaparentcode\"] = inputParam.inputData.ncoaparentcode;\n            item[\"sreleasecomments\"] = inputParam.inputData.sreleasecomments;\n          }\n        });\n      }\n\n      masterData.selectedReleaseHistory[0][\"ncoaparentcode\"] = inputParam.inputData.ncoaparentcode;\n      masterData.selectedReleaseHistory[0][\"sreleasecomments\"] = inputParam.inputData.sreleasecomments;\n      masterData.ReleaseHistory.map(item => {\n        if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\n          item[\"ncoaparentcode\"] = inputParam.inputData.ncoaparentcode;\n          item[\"sreleasecomments\"] = inputParam.inputData.sreleasecomments;\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          modalShow: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSapInfoTOSDMS(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSapInfoTOSDMS\", { ...inputParam.inputData\n    }).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n\n      if (response.data.rtn === 'SUCCESS') {\n        toast.success(intl.formatMessage({\n          id: \"IDS_RESULTTOSAP\"\n        }));\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          nfilternamecode: inputParam.inputData.nfilternamecode,\n          masterData,\n          loading: false,\n          modalShow: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","getFilterConditionsBasedonDataType","getSameRecordFromTwoArrays","designProperties","reportCOAType","REPORTTYPE","SampleType","transactionStatus","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","crudMaster","getFieldSpecification","getFieldSpecification3","filterObjectForReactAwesomeFilter","fileViewUrl","reportUrl","Utils","QbUtils","checkTree","loadTree","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","realSampleTypeList","realReportTypeList","realRegTypeList","realRegSubTypeList","realFilterStatusList","realApprovalVersionList","realDesignTemplateMappingList","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","selectedRecordLogin","selectedRecordState","LoginData","urlArray","approvedReportTemplate","filteredSample","all","reportTemplateList","reportTemplateMap","get","nsectioncode","selectedRecord","slideOutClose","isClear","ReleaseSample","map","x","matchingItem","find","item","npreregno","selected","Object","values","ReleaseSubSample","flat","forEach","ntransactionsamplecode","ReleaseTest","ntransactiontestcode","undefined","nreporttemplatecode","showFilter","FilterQueryBuilder","screenName","awesomeTree","filterquery","fields","filterQueryTreeStr","getApprovedSample","ncontrolCode","realReportTypeValue","ncoareporttypecode","PATIENTWISE","fieldList","languageTypeCode","userinfo","slanguagetypecode","gridColumns","filterfields","awesomeConfig","ProjectTypeList","sectionList","openModal","seletedFilterComponent","lstPatient","kendoSkip","kendoTake","expandCheck","isDeletePopup","isComboCheck","isEditPopup","isAddPopup","operation","ismandatory","DynamicReportFilterTypeItem","releaseSample","projectType","sectionType","testList","length","itemList","LISTITEM","push","PRIMARYKEY","QUERYBUILDERTABLECODE","TABLENAME","COLUMNNAME","VALUE","MULTILINGUAL","RECORDTYPE","reportFilterType","sectionvalue","comboValues","sectionTypeMap","value","label","testListMap","isneedsection","YES","combovaluesListMap","comboValueList","extractedColumnList","DynamicDefaultStructureItem","nsampletypecode","nregtypecode","nregsubtypecode","screenNameCopy","generateReleasedReport","Data","preventtb","listStatus","CORRECTION","afterCorrection","modalShow","loadEsign","confirmMessage","confirm","cancelPopUp","searchedData","ReleaseHistory","newTabReport","filetype","win","window","open","focus","sourceparameter","mrtfilePath","sreportingtoolfilename","sreportlanguagecode","folderName","FILEName","sconnectionString","sreportlink","smrttemplatelink","encodeURIComponent","JSON","stringify","document","getElementById","setAttribute","filepath","click","change","getReleasedFilterStatus","getReleasedDataDetails","isServiceRequired","inputParamData","dfrom","dto","ntransactionstatus","ntestcode","napprovalconfigcode","nneedsubsample","ncoaparentcode","releaseno","join","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","projectTypeMap","ProjectTypeValue","getSectionForSectionWise","sectionMap","getReportForPortal","UpdateExternalOrderStatus","portallist","String","headers","getApprovedRecordsAsDraft","Data1","seletedRecord","searchRef","current","NO","preliminaryReport","previewAndFinalReport","action","getRemoveApprovedSample","selectedReleaseHistory","statusService","Status","ValidationStatus","getDeleteApprovedSample","validationforAppendSamples","sampleCountValidation","getEditApprovedSample","UpdateApprovedSample","getreportcomments","fetchReportInfoReleaseById","editParam","additionalInfo","nreportinforeleasecode","editRow","userInfo","selectedId","selectedComment","ReportmodalShow","modalTitle","UpdateReportComments","getResultCorrectionData","resultCorrection","isCorrectionNeed","hideSave","fetchParameterById","ntransactionresultcode","primaryKeyValue","selectedResultGrade","paremterResultcode","parameterResults","ReleaseParameter","predefDefaultFlag","param","index","ngradecode","jsondata","parse","hasOwnProperty","PredefinedValues","predefinedvalue","ResultAccuracyList","ResultAccuracy","UnitList","Unit","formFields","FormFields","formFieldJSON","entries","key","isParameterInitialRender","ncontrolcode","editResultId","updateCorrectionStatus","screenname","validateEsignforRelease","methodUrl","toLowerCase","dispatchMethods","info","screenData","doAction","onSaveReleaseTestAttachment","onDeleteReleaseTestAttachment","onSaveReleaseTestComment","onDeleteReleaseTestComment","SaveReportTemplate","SaveReleaseComment","viewReportHistory","PatientReports","isPatientReports","viewReleaseTestAttachment","actionName","ReleaseTestAttachmentDetails","ReleaseTestCommentDetails","isReleaseTestAttachment","isReleaseTestComment","lstRegistrationArno","RegistrationArno","lstRegistrationSampleArno","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","lstCommentSubType","CommentSubType","lstSampleTestComments","SampleTestComments","isAddReleaseTestAttachment","isInitialRender","releaseReportHistory","versionHistory","openModalTitle","downloadVersionReport","FilePath","downloadHistory","getPatientFilterExecuteData","obj","component","source","lstData","multilingual","ismultilingual","columnname","optionList","mul","nformcode","onExecute","getPatientWiseSample","Login","classUrl","formData","loadEsignStateHandle","url","releasetestattachment","isAddReleaseTestComment","releasetestcomment","generatereport","editReportTemplate","filter","sreporttemplatename","deleteSamples","getReleaseFilter","nfilternamecode","openReleaseComments","ReleaseComment","ReleaseCommentDetailsStatus","transactionstatuscomments","sreleasecomments","TransactionStatus","getReleaseSapInfoTOSDMS","success"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData, getFilterConditionsBasedonDataType, getSameRecordFromTwoArrays } from \"../components/CommonScript\";\r\nimport { designProperties, reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { crudMaster } from \"./ServiceAction\";\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\r\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\r\nimport { fileViewUrl, reportUrl } from '../rsapi'\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\nconst { checkTree, loadTree } = QbUtils;\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n\r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n\r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputParam.inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputParam.inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || []\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam, selectedRecordLogin, selectedRecordState, LoginData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\r\n        const filteredSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        urlArray = [filteredSample, approvedReportTemplate];\r\n        Axios.all(urlArray).then(response => {\r\n            let reportTemplateList = [];\r\n            const reportTemplateMap = constructOptionList(response[1].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\",\r\n                \"ascending\", false);\r\n            reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n            let responseData = { ...response[0].data }\r\n            // responseData = sortData(responseData)\r\n            let masterData = {}\r\n            let nsectioncode = {};\r\n            let selectedRecord = {};\r\n            //ALPD-4797--Vignesh R(05-09-2024)\r\n            let slideOutClose = false;\r\n            // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n            //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n            masterData = {\r\n                ...inputParam.masterData,\r\n                ...responseData,\r\n            }\r\n            if (inputParam.inputData.isClear) {\r\n\r\n                masterData.ReleaseSample.map(x => {\r\n                    const matchingItem = inputParam.masterData.ReleaseSample.find(item => item.npreregno === x.npreregno && item.selected === true);\r\n                    if (matchingItem) {\r\n                        x.selected = true;\r\n                    }\r\n                });\r\n                Object.values(masterData.ReleaseSubSample).flat().forEach(x => {\r\n                    const matchingItem = Object.values(inputParam.masterData.ReleaseSubSample).flat()\r\n                        .find(item => item.ntransactionsamplecode === x.ntransactionsamplecode && item.selected === true);\r\n                    if (matchingItem) {\r\n                        x.selected = true;\r\n                    }\r\n                });\r\n                Object.values(masterData.ReleaseTest).flat().forEach(x => {\r\n                    const matchingItem = Object.values(inputParam.masterData.ReleaseTest)\r\n                        .flat().find(item => item.ntransactiontestcode === x.ntransactiontestcode && item.selected === true);\r\n                    if (matchingItem) {\r\n                        x.selected = true;\r\n                    }\r\n                });\r\n            }\r\n            if (nsectioncode !== undefined) {\r\n                nsectioncode = inputParam.inputData.nsectioncode;\r\n            }\r\n\r\n            if (selectedRecordState !== undefined && inputParam.inputData.isClear !== true) {\r\n                delete selectedRecordState.nreporttemplatecode;\r\n            }\r\n            selectedRecord = { ...selectedRecordLogin, ...selectedRecordState }\r\n            masterData[\"reportTemplateList\"] = reportTemplateList;\r\n            //sortData(masterData,\"ascending\",\"nfilternamecode\");\r\n            //sortData(masterData, \"\", \"ncoaparentcode\"); \r\n            sortData(masterData);\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    nsectioncode: nsectioncode,\r\n                    FilterQueryBuilder: false,\r\n                    screenName: inputParam.inputData.screenName,\r\n                    awesomeTree: inputParam.inputData.isClear ? undefined : inputParam.inputData.awesomeTree,\r\n                    filterquery: inputParam.inputData.isClear ? undefined : inputParam.inputData.filterquery,\r\n                    slideOutClose: slideOutClose,\r\n                    selectedRecord,\r\n                    isClear: inputParam.inputData.isClear ? false : true,\r\n                    // awesomeTree: LoginData && LoginData.awesomeTree,\r\n                    // filterquery:LoginData && LoginData.filterquery,\r\n                    fields: LoginData && LoginData.fields,\r\n                    filterQueryTreeStr: LoginData && LoginData.filterQueryTreeStr\r\n\r\n\r\n\r\n\r\n                }\r\n            })\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedSample(inputParam, ncontrolCode) {\r\n    if (inputParam.masterData.realReportTypeValue.ncoareporttypecode === reportCOAType.PATIENTWISE) {\r\n\r\n        let fieldList = [];\r\n        fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\r\n\r\n        const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\r\n        const { fields, gridColumns } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined)\r\n        let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined\r\n\r\n        return function (dispatch) {\r\n            let urlArray = [];\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n\r\n                    let ProjectTypeList = [];\r\n                    let sectionList = [];\r\n\r\n\r\n                    let masterData = {};\r\n                    let openModal = true;\r\n\r\n                    masterData = {\r\n                        ...inputParam.masterData\r\n                    }\r\n\r\n\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            fields,\r\n                            gridColumns,\r\n                            awesomeTree,\r\n                            seletedFilterComponent: fieldList[0],\r\n                            // awesomeTree:fieldList[0].awesomeTree,\r\n                            awesomeConfig: undefined,\r\n                            lstPatient: [],\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            masterData,\r\n                            expandCheck: false,\r\n                            ProjectTypeList,\r\n                            ncontrolCode,\r\n                            isDeletePopup: false,\r\n                            isComboCheck: false,\r\n                            isEditPopup: false,\r\n                            screenName: \"IDS_PATIENTSEARCH\",\r\n                            sectionList,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: openModal,\r\n                            isAddPopup: true,\r\n                            operation: \"save\",\r\n                            slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n    else {\r\n        return function (dispatch) {\r\n            let ismandatory = false\r\n            inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.map(x => {\r\n                if (x.ismandatory) {\r\n                    ismandatory = true\r\n                }\r\n            })\r\n            if (ismandatory) {\r\n                inputParam['inputData'] = { ...inputParam.inputData, ismandatory: true }\r\n            }\r\n            const screenName = \"\";\r\n            let urlArray = [];\r\n\r\n            inputParam.inputData['isAddPopup'] = true\r\n            const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n            const testList = rsapi.post(\"release/getTest\", inputParam.inputData);\r\n            const approvedReportTemplate = rsapi.post(\"release/getApprovedReportTemplate\", inputParam.inputData);\r\n\r\n            // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n            //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n\r\n            //     urlArray = [projectType,sectionType];\r\n            // }\r\n            // else if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n            //     urlArray = [sectionType];\r\n            // }\r\n            // else {\r\n            //     urlArray = [releaseSample\r\n            //         //,reportType\r\n            //     ];\r\n            // }\r\n            urlArray = [releaseSample, projectType, sectionType, testList, approvedReportTemplate];\r\n            if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\r\n                let itemList = [];\r\n                inputParam.DynamicReportFilterTypeItem.map(x => {\r\n                    if (x[designProperties.LISTITEM] === \"combo\") {\r\n                        itemList.push(\r\n                            {\r\n                                \"Pkey\": x[designProperties.PRIMARYKEY],\r\n                                \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\r\n                                \"tablename\": x[designProperties.TABLENAME],\r\n                                \"columnname\": x[designProperties.COLUMNNAME],\r\n                                \"keyName\": x[designProperties.VALUE],\r\n                                \"isMultiLingual\": x[designProperties.MULTILINGUAL],\r\n                                \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\r\n                                \"recordType\": x[designProperties.RECORDTYPE]\r\n                            })\r\n                    }\r\n                })\r\n                inputParam[\"inputData\"][\"itemList\"] = itemList;\r\n                const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData, 'userInfo': inputParam.inputData.userinfo });\r\n                urlArray.push(reportFilterType);\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                    //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                    // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                    let ProjectTypeList = [];\r\n                    let sectionList = [];\r\n\r\n                    // let selectedRecord = {\"ncoareporttypecode\": {\r\n                    //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                    //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                    // }\r\n                    // };\r\n                    let masterData = {};\r\n                    let openModal = true;\r\n                    let sectionvalue = [];\r\n                    let comboValues = {};\r\n                    let reportTemplateList = [];\r\n                    let selectedRecord = {};\r\n\r\n                    delete selectedRecord[\"nsectioncode\"];\r\n                    delete selectedRecord[\"nreporttemplatecode\"];\r\n                    // let selectedRecord = inputParam.inputData.selectedRecord;\r\n                    // let selectedRecord = inputParam.selectedRecord;\r\n                    // selectedRecord[\"nmultiplesampleinsinglerelease\"] = inputParam.realReportTypeValue[\"nmultiplesampleinsinglerelease\"];\r\n                    const sectionTypeMap = constructOptionList(response[2].data.sectionList || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n                    sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    sectionList.map(x => sectionvalue.push({ \"value\": x.value, \"title\": x.label }));\r\n                    let testListMap = response[3] && response[3].data;\r\n                    if (inputParam.inputData.isneedsection !== transactionStatus.YES) {\r\n                        const reportTemplateMap = constructOptionList(response[4].data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\",\r\n                            \"ascending\", false);\r\n                        reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n                    }\r\n                    let combovaluesListMap = response[5] && response[5].data;\r\n                    let comboValueList = { ...testListMap, ...combovaluesListMap } || {};\r\n                    comboValues = { \"s.nsectioncode\": sectionvalue, ...comboValueList };\r\n                    // if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n                    //     inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                    //     const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                    //         \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                    //     ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    //     if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                    //         delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                    //     }\r\n                    //     if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                    //         delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                    //     }\r\n                    //     const sectionTypeMap = constructOptionList(response[1].data.sectionList || [], \"nsectioncode\",\r\n                    //     \"ssectionname\", undefined, undefined, false);\r\n                    // sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    // sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                    // let comboValueList=response[2] && response[2].data ||{};\r\n                    //  comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n\r\n                    // }\r\n                    // else \r\n                    // if (inputParam.inputData.isneedsection === transactionStatus.YES || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                    //     const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\r\n                    //         \"ssectionname\", undefined, undefined, false);\r\n                    //     sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    //     sectionList.map(x=>sectionvalue.push({\"value\":x.value,\"title\":x.label}));\r\n                    //     let comboValueList=response[1] && response[1].data ||{};\r\n                    //      comboValues={\"s.nsectioncode\":sectionvalue,...comboValueList}\r\n                    //     masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    //     if (inputParam.inputData.selectedRecord.nsectioncode) {\r\n                    //         delete inputParam.inputData.selectedRecord.nsectioncode\r\n                    //     }\r\n\r\n                    // }\r\n                    // else {\r\n                    if (ismandatory) {\r\n                        masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    } else {\r\n                        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                        }\r\n                        else {\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                            openModal = false;\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                        }\r\n                    }\r\n\r\n                    // }\r\n                    let awesomeTree;\r\n                    let filterquery;\r\n                    let filterQueryTreeStr;\r\n                    let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\r\n                    if (inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode\r\n                        && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode\r\n                        && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\r\n                        awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig)\r\n                        filterquery = inputParam.DynamicDefaultStructureItem.filterquery\r\n                        filterQueryTreeStr = inputParam.DynamicDefaultStructureItem.filterQueryTreeStr\r\n\r\n                    } else {\r\n                        awesomeTree = undefined;\r\n                    }\r\n\r\n                    sortData(masterData);\r\n                    masterData[\"reportTemplateList\"] = reportTemplateList;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            selectedRecord,\r\n                            expandCheck: false,\r\n                            ProjectTypeList,\r\n                            ncontrolCode,\r\n                            isDeletePopup: false,\r\n                            isComboCheck: false,\r\n                            isEditPopup: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            sectionList,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: openModal,\r\n                            isAddPopup: true,\r\n                            operation: \"save\",\r\n                            kendoSkip: 0,\r\n                            kendoTake: 5,\r\n                            sectionvalue,\r\n                            comboValues,\r\n                            awesomeTree: awesomeTree, filterquery, fields, filterQueryTreeStr,\r\n                            FilterQueryBuilder: false,\r\n                            screenNameCopy: inputParam.inputData.screenName,\r\n                            ismandatory,\r\n                            slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            //awesomeConfig:undefined\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function generateReleasedReport(inputData, Data, preventtb) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        let urlArray = [];\r\n        //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\r\n        //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\r\n        inputData['preventTbFlow'] = preventtb === true ? preventtb : false\r\n        if (inputData.listStatus === transactionStatus.CORRECTION) {\r\n\r\n            const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\r\n            urlArray = [afterCorrection];\r\n        }\r\n\r\n        else {\r\n            const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\r\n\r\n            urlArray = [releaseSample];\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[0].data.rtn === \"MappingNeeded\") {\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            modalShow: false,\r\n                            // selectedRecord: {}, \r\n                            loadEsign: false,\r\n                            //openModal: false,\r\n                            // preventTbCheck:true\r\n                        }\r\n                    })\r\n\r\n                    inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({ id: \"IDS_SUBSAMPLEWASNOTMAPPED\" }), intl.formatMessage({ id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\" }),\r\n                        intl.formatMessage({ id: \"IDS_OK\" }), intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                        () => dispatch(generateReleasedReport(inputData, Data, true)), false, () => dispatch(cancelPopUp(inputData, Data)))\r\n\r\n                } else {\r\n                    // if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\r\n                    //     dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\r\n                    // }\r\n\r\n                    if (response[0].data[\"PreventTb\"]) {\r\n                        toast.warn(response[0].data[\"PreventTb\"])\r\n                    }\r\n\r\n                    // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                    let searchedData = Data.searchedData;\r\n                    if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\r\n                        searchedData = response[0].data && response[0].data.ReleaseHistory &&\r\n                            getSameRecordFromTwoArrays(response[0].data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\r\n                    }\r\n                    sortData(searchedData, '', 'ncoaparentcode');   // ALPD-4229 (12-06-2024) Added sortData for searchedData\r\n                    let masterData = {\r\n                        ...Data,\r\n                        ...response[0].data,\r\n                        searchedData\r\n                    }\r\n                    //Added by sonia on 18-08-2024 for JIRA ID:4716 \r\n                    //if (inputData.generateReport){\r\n                    //   if(inputData.newTabReport){\r\n                    if (response[0].data && response[0].data.rtn) {\r\n                        if (response[0].data.rtn === \"Success\") {\r\n                            if (inputData.newTabReport) {\r\n                                if (response[0].data.filetype === 'jrxml') {\r\n                                    let value = \"\";\r\n                                    value = response[0][\"data\"][\"reportViewURL\"];\r\n                                    var win = window.open(value);\r\n                                    if (win) {\r\n                                        win.focus();\r\n                                    } else {\r\n                                        intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                                    }\r\n                                } else if (response[0].data.filetype === 'mrt') {\r\n\r\n                                    if (response[0].data.sourceparameter != undefined && response[0].data.sourceparameter != \"\") {\r\n                                        let mrtfilePath = reportUrl()\r\n                                            + \"?name=\" + inputData.userinfo.sreportingtoolfilename     //en-xml\r\n                                            + \"&slanguagetypecode=\" + inputData.userinfo.sreportlanguagecode    //en-us\r\n                                            + \"&foldername=\" + response[0].data.folderName   //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n                                            + \"&filename=\" + response[0].data.FILEName  //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n                                            + \"&sconnectionstring=\" + inputData.userinfo.sconnectionString\r\n                                            + \"&sreportlink=\" + response[0].data.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n                                            + \"&smrttemplatelink=\" + response[0].data.smrttemplatelink  //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n                                            + \"&sourceparameter=\" + encodeURIComponent(JSON.stringify(response[0].data.sourceparameter)); //JSON.stringify(response[0].data.sourceparameter)\r\n\r\n                                        //console.log(\"path1:\",mrtfilePath);\r\n                                        window.open(mrtfilePath);\r\n\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\r\n                                document.getElementById(\"download_data\").click();\r\n                            }\r\n                        } else {\r\n                            toast.warn(response[0].data.rtn);\r\n                        }\r\n                    }\r\n                    //   }\r\n\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, change: inputData.change, masterData,\r\n                            modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    //toast.warn(error.response.data['rtn']);\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function cancelPopUp(inputData, Data) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                loading: false,\r\n                modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            // ncoaparentcode: inputParam.ncoaparentcode,\r\n            ncoaparentcode: inputParam.releaseno ? inputParam.releaseno.map(item => item.ncoaparentcode).join(\",\") : \"-1\",\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\r\n            isneedsection: inputParam.inputData.isneedsection,\r\n            ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup: false\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\",\r\n                    \"sprojectcode\", undefined, undefined, false);\r\n\r\n                const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ReleaseSample: []\r\n                        },\r\n                        // selectedRecord: {},\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n                //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                //     \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSectionForSectionWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getSection\", inputData.inputData)\r\n            .then(response => {\r\n                const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sectionList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ReleaseSample: []\r\n\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response !== undefined && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(inputData, Data1, seletedRecord) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n            // ALPD-4229 (30-05-2024) Added searchRef to clear search text in search filter\r\n            let searchRef = inputData.searchRef;\r\n            delete (inputData.searchRef);\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/saveRelease\", inputData)\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n                        //SearchRef undefined issue fixed - L.Subashini\r\n                        if (searchRef !== undefined)\r\n                            searchRef.current.value = \"\";\r\n                        let masterData = {\r\n                            ...Data1, ...response.data, searchedData: undefined\r\n                        };\r\n                        delete (seletedRecord.nreporttemplatecode);\r\n                        seletedRecord[\"nisarnowiserelease\"] = transactionStatus.NO;\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: true             // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                // loadEsign: false,\r\n                                //openModal: false,\r\n                                slideOutClose: false,\r\n                                expandCheck: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function preliminaryReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        // rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n        rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData)\r\n            .then(response => {\r\n                // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                let searchedData = Data.searchedData;\r\n                if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\r\n                    searchedData = response.data && response.data.ReleaseHistory &&\r\n                        getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\r\n                }\r\n                sortData(searchedData, '', 'ncoaparentcode');   // ALPD-4229 (12-06-2024) Added sortData for searchedData\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                    searchedData\r\n                }\r\n                sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                //Added by sonia on 18-08-2024 for JIRA ID:4716\r\n                if (response.data.rtn === \"Success\") {\r\n                    if (inputParam.inputData.newTabReport) {\r\n                        // let value = \"\";\r\n                        // value = response.data[\"reportViewURL\"];\r\n                        // var win = window.open(value);\r\n                        // if (win) {\r\n                        //     win.focus();\r\n                        // } else {\r\n                        //     intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                        // }\r\n                        if (response.data.filetype === 'jrxml') {\r\n                            let value = \"\";\r\n                            value = response.data[\"reportViewURL\"];\r\n                            var win = window.open(value);\r\n                            if (win) {\r\n                                win.focus();\r\n                            } else {\r\n                                intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                            }\r\n                        }\r\n                        else if (response.data.filetype === 'mrt') {\r\n                            if (response.data.sourceparameter != undefined && response.data.sourceparameter != \"\") {\r\n                                let mrtfilePath = reportUrl()\r\n                                    + \"?name=\" + inputParam.inputData.userinfo.sreportingtoolfilename     //en-xml\r\n                                    + \"&slanguagetypecode=\" + inputParam.inputData.userinfo.sreportlanguagecode    //en-us\r\n                                    + \"&foldername=\" + response.data.folderName   //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n                                    + \"&filename=\" + response.data.FILEName  //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n                                    + \"&sconnectionstring=\" + inputParam.inputData.userinfo.sconnectionString\r\n                                    + \"&sreportlink=\" + response.data.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n                                    + \"&smrttemplatelink=\" + response.data.smrttemplatelink  //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n                                    + \"&sourceparameter=\" + encodeURIComponent(JSON.stringify(response.data.sourceparameter)); //JSON.stringify(response[0].data.sourceparameter)\r\n\r\n                                //console.log(\"path:\",mrtfilePath);\r\n                                window.open(mrtfilePath);\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                        document.getElementById(\"download_data\").click();\r\n                    }\r\n\r\n\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function previewAndFinalReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/preliminaryRegenerateReport\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n                //Added by sonia on 18-08-2024 for JIRA ID:4716 \r\n                if (response.data.rtn === \"Success\") {\r\n                    if (inputParam.inputData.action == 'Regenerate') {\r\n                        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                        document.getElementById(\"download_data\").click();\r\n                    }\r\n                    else {\r\n                        if (inputParam.inputData.newTabReport) {\r\n                            if (response.data.filetype === 'jrxml') {\r\n                                let value = \"\";\r\n                                value = response.data[\"reportViewURL\"];\r\n                                var win = window.open(value);\r\n                                if (win) {\r\n                                    win.focus();\r\n                                } else {\r\n                                    intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n                                }\r\n                            }\r\n                            else if (response.data.filetype === 'mrt') {\r\n                                if (response.data.sourceparameter != undefined && response.data.sourceparameter != \"\") {\r\n                                    let mrtfilePath = reportUrl()\r\n                                        + \"?name=\" + inputParam.inputData.userinfo.sreportingtoolfilename     //en-xml\r\n                                        + \"&slanguagetypecode=\" + inputParam.inputData.userinfo.sreportlanguagecode    //en-us\r\n                                        + \"&foldername=\" + response.data.folderName   //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n                                        + \"&filename=\" + response.data.FILEName  //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n                                        + \"&sconnectionstring=\" + inputParam.inputData.userinfo.sconnectionString\r\n                                        + \"&sreportlink=\" + response.data.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n                                        + \"&smrttemplatelink=\" + response.data.smrttemplatelink  //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n                                        + \"&sourceparameter=\" + encodeURIComponent(JSON.stringify(response.data.sourceparameter)); //JSON.stringify(response[0].data.sourceparameter)\r\n\r\n                                    //console.log(\"path:\",mrtfilePath);\r\n                                    window.open(mrtfilePath);\r\n\r\n                                }\r\n                            }\r\n\r\n                        } else {\r\n                            //if(inputParam.inputData.generateReport || inputParam.inputData.action == 'Regenerate')\r\n                            //{                        \r\n                            document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                            document.getElementById(\"download_data\").click();\r\n                            // }\r\n                        }\r\n                    }\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            inputParam.inputData['isPopup'] = true\r\n            if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\r\n                // if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && \r\n                // (inputParam.inputData['nneedsubsample'] === false || \r\n                // (inputParam.inputData['nneedsubsample'] === true && inputParam.inputData['ncoaparenttranscode'] === transactionStatus.DRAFT))){\r\n                const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n                //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n                // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n                const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n                urlArray = [releaseSample, statusService\r\n                    //,reportType\r\n                ];\r\n\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n\r\n                    .then(response => {\r\n                        if (response[1].data.Status === \"Success\") {\r\n\r\n                            let masterData = {};\r\n                            let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n\r\n\r\n                            // responseData = sortData(responseData)\r\n\r\n\r\n                            sortData(masterData);\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    // selectedRecord,\r\n                                    isDeletePopup: true,\r\n                                    isComboCheck: true,\r\n                                    isEditPopup: false,\r\n                                    ncontrolCode,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    openModal: true,\r\n                                    isAddPopup: false,\r\n                                    operation: \"delete\",\r\n                                    ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                    expandCheck: false,\r\n                                    screenName: inputParam.inputData.screenName,\r\n                                    slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                                }\r\n                            })\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: response[1].data.ValidationStatus\r\n                            }));\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    ncontrolCode: ncontrolCode,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                // } else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \r\n                //     (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\r\n                //         toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n            // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\r\n            delete (inputData.searchRef);\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/deleteRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //    masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                // loadEsign: false,\r\n                                // openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: false\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n//Added by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\r\nexport function validationforAppendSamples(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\r\n            urlArray = [sampleCountValidation];\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    if (response[0].data.rtn === \"Success\") {\r\n                        dispatch(getEditApprovedSample(inputParam, ncontrolCode));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_MAXIMUMSAMPLESAPPENDED\" }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n//Modified by sonia on 11-06-2024 for JIRA ID:4122 Sample Count Validation\r\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        if (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES) {\r\n            // const sampleCountValidation = rsapi.post(\"release/sampleCountValidation\", inputParam.inputData);\r\n            const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n            // const projectStatus = rsapi.post(\"release/getProjectBasedAlert\", inputParam.inputData);\r\n\r\n            const testList = rsapi.post(\"release/getTest\", inputParam.inputData)\r\n            const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n            // if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            //     urlArray = [ projectType,statusService];\r\n            // }\r\n            // else if (inputParam.inputData.ncoareporttypecode === 8) {\r\n            //     urlArray = [ releaseSample,statusService];\r\n            // }\r\n            // else {\r\n            urlArray = [releaseSample, statusService, testList, sectionType\r\n                //,reportType\r\n            ];\r\n            if (inputParam.DynamicReportFilterTypeItem && inputParam.DynamicReportFilterTypeItem.length > 0) {\r\n                let itemList = [];\r\n                inputParam.DynamicReportFilterTypeItem.map(x => {\r\n                    if (x[designProperties.LISTITEM] === \"combo\") {\r\n                        itemList.push(\r\n                            {\r\n                                \"Pkey\": x[designProperties.PRIMARYKEY],\r\n                                \"nquerybuildertablecode\": x[designProperties.QUERYBUILDERTABLECODE],\r\n                                \"tablename\": x[designProperties.TABLENAME],\r\n                                \"columnname\": x[designProperties.COLUMNNAME],\r\n                                \"keyName\": x[designProperties.VALUE],\r\n                                \"isMultiLingual\": x[designProperties.MULTILINGUAL],\r\n                                \"languageTypeCode\": inputParam.inputData.userinfo.slanguagetypecode,\r\n                                \"recordType\": x[designProperties.RECORDTYPE]\r\n                            })\r\n                    }\r\n                })\r\n                inputParam[\"inputData\"][\"itemList\"] = itemList;\r\n                const reportFilterType = rsapi.post(\"release/getComboValues\", { ...inputParam.inputData, 'userInfo': inputParam.inputData.userinfo });\r\n                urlArray.push(reportFilterType);\r\n            }\r\n            // }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                    //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                    // const ReportTypeList = reportTypeMap.get(\"OptionList\");                   \r\n                    if (response[1].data.Status === \"Success\") {\r\n                        let ProjectTypeList = [];\r\n                        let sectionList = [];\r\n                        let comboValues = {};\r\n                        let sectionvalue = [];\r\n                        const sectionTypeMap = constructOptionList(response[3].data.sectionList || [], \"nsectioncode\",\r\n                            \"ssectionname\", undefined, undefined, false);\r\n                        sectionList = sectionTypeMap.get(\"OptionList\");\r\n                        sectionList.map(x => sectionvalue.push({ \"value\": x.value, \"title\": x.label }));\r\n                        let testListMap = response[2] && response[2].data\r\n                        let combovaluesListMap = response[4] && response[4].data\r\n                        let comboValueList = { ...testListMap, ...combovaluesListMap } || {};\r\n                        comboValues = { \"s.nsectioncode\": sectionvalue, ...comboValueList }\r\n                        // let selectedRecord = {\"ncoareporttypecode\": {\r\n                        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                        //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                        // }\r\n                        // };\r\n                        let masterData = {};\r\n                        let openModal = true;\r\n\r\n                        let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                        }\r\n                        else {\r\n                            let responseData = { ...response[0].data }\r\n                            masterData = {\r\n                                ...inputParam.masterData, ...responseData\r\n                            }\r\n                            openModal = false;\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                        }\r\n                        // responseData = sortData(responseData)\r\n                        let awesomeTree;\r\n                        let filterquery;\r\n                        let fields = getFilterConditionsBasedonDataType(inputParam.extractedColumnList, comboValues);\r\n                        if (inputParam.DynamicDefaultStructureItem &&\r\n                            inputParam.DynamicDefaultStructureItem.nsampletypecode === inputParam.inputData.nsampletypecode\r\n                            && inputParam.DynamicDefaultStructureItem.nregtypecode === inputParam.inputData.nregtypecode\r\n                            && inputParam.DynamicDefaultStructureItem.nregsubtypecode === inputParam.inputData.nregsubtypecode) {\r\n                            awesomeTree = inputParam.DynamicDefaultStructureItem && inputParam.DynamicDefaultStructureItem.awesomeTree && checkTree(loadTree(inputParam.DynamicDefaultStructureItem.awesomeTree), inputParam.DynamicDefaultStructureItem.awesomeConfig)\r\n                            filterquery = inputParam.DynamicDefaultStructureItem.filterquery\r\n                        } else {\r\n                            awesomeTree = undefined;\r\n                        }\r\n\r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                // selectedRecord,\r\n                                sectionList,\r\n                                ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                isDeletePopup: false,\r\n                                isComboCheck: false,\r\n                                isEditPopup: true,\r\n                                ProjectTypeList,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: openModal,\r\n                                isAddPopup: false,\r\n                                operation: \"append\",\r\n                                expandCheck: false,\r\n                                screenName: inputParam.inputData.screenName,\r\n                                sectionvalue,\r\n                                comboValues,\r\n                                awesomeTree: awesomeTree, filterquery, fields,\r\n                                screenNameCopy: inputParam.inputData.screenName,\r\n                                slideOutClose: false    // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: response[1].data.ValidationStatus }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n            // }  else if(inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.NO || \r\n            // (inputParam.inputData['allowAppendRemoveSamples'] === transactionStatus.YES && inputParam.inputData['ncoaparenttranscode'] !== transactionStatus.DRAFT)){\r\n            //     toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" }));\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            });\r\n            // toast.warn(intl.formatMessage({ id: \"IDS_SAMPLESARENOTALLOWEDTODELETE\" })+ \" \"+ intl.formatMessage({ id: \"IDS_FOR\" })+ \" \"+ inputParam.inputData['sregsubtypename']);\r\n        }\r\n\r\n    }\r\n}\r\nexport function UpdateApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n            // ALPD-4229 (12-06-2024) Deleted searchRef from inputData\r\n            delete (inputData.searchRef);\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/appendRelease\", inputData)\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n                                slideOutClose: true // ALPD-4208 (22-05-2024) Changes done for expand function in add sample popup\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                //loadEsign: false,\r\n                                // openModal: false,\r\n                                slideOutClose: false,\r\n                                expandCheck: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        // console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getreportcomments(inputData, Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/getreportcomments\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, change: inputData.change, masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        openModal: true, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchReportInfoReleaseById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData)\r\n            .then(response => {\r\n\r\n                // const parameterResults = response.data.ReleaseParameter\r\n                let selectedId = editParam.editRow.nreportinforeleasecode;\r\n                const selectedComment = { ...response.data };\r\n                const masterData = {\r\n                    ...editParam.masterData,\r\n                    selectedComment\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n                        screenName: \"IDS_REPORTINFOCOMMENTS\",\r\n                        selectedId,\r\n                        masterData,\r\n                        //isParameterInitialRender: true,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        // modalShow: true,\r\n                        ReportmodalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_COMMENTS\" }),\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function UpdateReportComments(userInfo, Data1, inputData) {\r\n    let inputParamData = {\r\n        selectedComment: Data1.selectedComment,\r\n        userinfo: userInfo\r\n    }\r\n\r\n    return function (dispatch) {\r\n        //if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateReportComment\",\r\n\r\n            inputParamData\r\n        )\r\n            .then(response => {\r\n                let masterData = {\r\n\r\n                    ...Data1, ...response.data,\r\n                    selectedComment: {},\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        loading: false,\r\n                        openModal: true,\r\n                        expandCheck: false,\r\n                        modalShow: false,\r\n                        ReportmodalShow: false,\r\n                        isComboCheck: true,\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({\r\n        //         id: \"IDS_SELECTANYONESAMPLE\"\r\n        //     }));\r\n        //}\r\n    }\r\n}\r\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (inputParam.masterData && inputParam.masterData.selectedReleaseHistory && inputParam.masterData.selectedReleaseHistory.length > 1) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_MULTISELECTAPPLICABLEONLYFORRELEASEACTION\" }));\r\n        } else {\r\n            let urlArray = [];\r\n            inputParam.inputData['isPopup'] = true\r\n            const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData);\r\n            //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n            // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n            const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n            urlArray = [resultCorrection, statusService\r\n                //,reportType\r\n            ];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n\r\n                .then(response => {\r\n                    if (response[1].data.Status === \"Success\") {\r\n\r\n                        let masterData = {};\r\n                        let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n\r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                // selectedRecord,\r\n                                isDeletePopup: true,\r\n                                isComboCheck: true,\r\n                                isEditPopup: false,\r\n                                loadEsign: false,\r\n                                ncontrolCode,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: true,\r\n                                isCorrectionNeed: true,\r\n                                isAddPopup: false,\r\n                                operation: \"delete\",\r\n                                ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                                expandCheck: false,\r\n                                hideSave: true,\r\n                                screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response[1].data.ValidationStatus\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false,\r\n                                expandCheck: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport function fetchParameterById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            ntransactionresultcode: editParam.primaryKeyValue,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseResults\", inputParamData)\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.ReleaseParameter\r\n                let predefDefaultFlag = false;\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                    paremterResultcode[index] = param.ntransactionresultcode;\r\n                    let jsondata = JSON.parse(param.jsondata['value'])\r\n                    if (jsondata.hasOwnProperty('additionalInfo')) {\r\n                        additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo']\r\n                    }\r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                            //     }\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                            //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            //         undefined, undefined).get(\"OptionList\");\r\n                            //     if (response.data.ResultParameter[index].sresult === null) {\r\n                            //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                            //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.ResultParameter[index].editable = true;\r\n                            //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\r\n                            //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //             &&predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            //  else {\r\n                            if (!predefDefaultFlag) {\r\n                                predefDefaultFlag = true;\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    undefined, undefined).get(\"OptionList\");\r\n                            }\r\n\r\n                            //   }\r\n                            //return null;\r\n\r\n                        });\r\n                    //Modified by sonia on 6th Aug 2024 for JIRA ID: ALPD-4566\r\n                    if (parameterResults[index][\"nparametertypecode\"] == 1) {\r\n                        parameterResults[index][\"resultaccuracycode\"] = {\r\n                            \"value\": parameterResults[index][\"nresultaccuracycode\"],\r\n                            \"label\": parameterResults[index][\"sresultaccuracyname\"],\r\n                        };\r\n\r\n                        //Modified by sonia on 6th Aug 2024 for JIRA ID: ALPD-4566\r\n                        parameterResults[index][\"unitcode\"] = {\r\n                            \"value\": parameterResults[index][\"nunitcode\"],\r\n                            \"label\": parameterResults[index][\"sunitname\"],\r\n                        };\r\n                    }\r\n                    param['editable'] = false;\r\n                    //return null;\r\n                    // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                    // undefined, undefined).get(\"OptionList\");\r\n                    parameterResults[index] = { ...parameterResults[index], ...jsondata }\r\n                });\r\n\r\n                const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\", \"sresultaccuracyname\", undefined, undefined, false);\r\n                const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\r\n\r\n                const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\", \"sunitname\", undefined, undefined, false);\r\n                const Unit = UnitList.get(\"OptionList\");\r\n                //ALPD-4387\r\n                let formFields = [];\r\n                if (response.data.FormFields && response.data.FormFields.length > 0) {\r\n                    let formFieldJSON = JSON.parse(response.data.FormFields[0].jsondata['value'])\r\n                    Object.entries(formFieldJSON).map(([key, value]) => (\r\n                        formFields.push(value)\r\n                    ))\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...editParam.masterData,\r\n                            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                            ...response.data,\r\n                            paremterResultcode,//,\r\n                            selectedResultGrade,\r\n                            ResultAccuracy,\r\n                            Unit, formFields\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ReleaseParameter: response.data.ReleaseParameter\r\n\r\n                        },\r\n                        parameterResults: response.data.ReleaseParameter,\r\n                        isParameterInitialRender: true,\r\n                        loading: false,\r\n                        // screenName: \"IDS_RESULTENTRY\",\r\n                        openModal: true,\r\n                        modalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_CHANGERESULT\" }),\r\n                        selectedId: editParam.primaryKeyValue,\r\n                        //activeTestKey: \"IDS_RESULTS\",\r\n                        ncontrolcode: editParam.editResultId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n\r\n}\r\nexport function updateCorrectionStatus(inputData, Data, screenname) {\r\n\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateCorrectionStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                    let searchedData = Data.searchedData;\r\n                    if (Data.searchedData && Data.searchedData !== undefined && Data.searchedData.length > 0) {\r\n                        searchedData = response.data && response.data.ReleaseHistory &&\r\n                            getSameRecordFromTwoArrays(response.data.ReleaseHistory, Data.searchedData, \"ncoaparentcode\");\r\n                    }\r\n                    sortData(searchedData, '', 'ncoaparentcode');   // ALPD-4229 (12-06-2024) Added sortData for searchedData\r\n                    let masterData = {\r\n                        ...Data, ...response.data, searchedData\r\n                    };\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            screenName: screenname\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            // masterData,\r\n                            //  change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n\r\n                            //  screenName:screenname\r\n\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({ id: response.data }));\r\n\r\n                }\r\n\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n\r\n    }\r\n}\r\nexport function validateEsignforRelease(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"release\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let doAction = screenData.inputParam.inputData.doAction\r\n        switch (doAction) {\r\n            case \"appendsample\":\r\n                dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"removesample\":\r\n                dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"generate\":\r\n                dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"download\":\r\n                dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"correction\":\r\n                dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\r\n                break;\r\n            case \"saveasdraft\":\r\n                dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData, screenData.seletedRecord));\r\n                break;\r\n            case \"editresult\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"))\r\n                break;\r\n            case \"preliminary\":\r\n                dispatch(preliminaryReport(screenData.inputParam, screenData.masterData))\r\n                break;\r\n            case \"editReleaseTestAttachment\":\r\n                dispatch(onSaveReleaseTestAttachment(screenData.inputParam))\r\n                break;\r\n            case \"deleteReleaseTestAttachment\":\r\n                dispatch(onDeleteReleaseTestAttachment(screenData.inputParam))\r\n                break;\r\n            case \"editReleaseTestComment\":\r\n                dispatch(onSaveReleaseTestComment(screenData.inputParam))\r\n                break;\r\n            case \"deleteReleaseTestComment\":\r\n                dispatch(onDeleteReleaseTestComment(screenData.inputParam))\r\n                break;\r\n            case \"editReportTemplate\":\r\n                dispatch(SaveReportTemplate(screenData.inputParam))\r\n                break;\r\n            case \"createReleaseComment\":\r\n                dispatch(SaveReleaseComment(screenData.inputParam))\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportHistory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/viewReportHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let PatientReports = response.data.PatientReports;\r\n                masterData = { ...masterData, PatientReports };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isPatientReports: true,\r\n                        openModal: true,\r\n                        hideSave: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let methodUrl = \"\";\r\n\r\n        if (inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\") {\r\n            methodUrl = \"getReleaseTestAttachment\";\r\n        } else {\r\n            methodUrl = \"getReleaseTestComment\";\r\n        }\r\n        rsapi.post(\"release/\" + methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                const ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                const ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                const isReleaseTestAttachment = inputParam.inputData.actionName === \"IDS_RELEASETESTATTACHMENT\";\r\n                const isReleaseTestComment = inputParam.inputData.actionName === \"IDS_RELEASETESTCOMMENT\";\r\n\r\n                const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\r\n                const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\r\n                const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\r\n                const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\r\n\r\n                const lstCommentSubType = constructOptionList(response.data.CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, true);\r\n                const CommentSubType = lstCommentSubType.get(\"OptionList\");\r\n\r\n                // ALPD-4948 Added sample test comments for showing NA record as NA instead of showing '-'\r\n                const lstSampleTestComments = constructOptionList(response.data.SampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\r\n                const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\r\n\r\n                masterData = { ...masterData, ReleaseTestAttachmentDetails, ReleaseTestCommentDetails, RegistrationArno, RegistrationSampleArno, RegistrationTest, CommentSubType, SampleTestComments };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isReleaseTestAttachment,\r\n                        isReleaseTestComment,\r\n                        openModal: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        screenName: inputParam.inputData.actionName,\r\n                        loading: false,\r\n                        isAddReleaseTestAttachment: false,\r\n                        isInitialRender: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function writeJSONTemplate(inputParam){ \r\n//     return function (dispatch) {    \r\n\r\n//         return rsapi.post(\"release/writeJSONTemplate\",\r\n\r\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \r\n//             \"userinfo\": inputParam.userInfo}\r\n//     )\r\n//         .then(response => {\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false,\r\n//                         openModal: false,\r\n//                         expandCheck: false,\r\n\r\n\r\n//                     }\r\n//                 });\r\n//         })\r\n//         .catch(error => {\r\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             if (error.response.status === 500) {\r\n//                 toast.error(error.message);\r\n\r\n\r\n//             }\r\n//             else {\r\n//                 toast.warn(error.response.data);\r\n//             }\r\n//         })\r\n\r\n// }\r\n// }\r\n\r\nexport function releaseReportHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getPreliminaryReportHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nexport function versionHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getVersionHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModalTitle: \"IDS_VERSIONHISTORY\"\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n\r\nexport function downloadVersionReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function downloadHistory(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                if (inputParam.userinfo.nformcode === 161) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            onExecute: false,\r\n                            loading: false,\r\n                            screenName: \"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            // onExecute: false,\r\n                            loading: false,\r\n                            screenName: \"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientWiseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getPatientWiseSample\", inputParam)\r\n            .then(response => {\r\n                let openModal = true;\r\n                let screenName = \"IDS_ADDSAMPLE\";\r\n                let responseData = { ...response.data }\r\n\r\n                let masterData = {}\r\n                let lstPatient = []\r\n                masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n\r\n                if (responseData && responseData.ReleaseSample.length !== 0) {\r\n\r\n                    let responseData = { ...response.data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n                }\r\n                else {\r\n                    let responseData = { ...response.data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n                    lstPatient = inputParam.Login.lstPatient\r\n                    //openModal = false;\r\n                    screenName = \"IDS_PATIENTSEARCH\";\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                }\r\n\r\n\r\n\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n\r\n\r\n                        // awesomeTree:fieldList[0].awesomeTree,\r\n                        awesomeConfig: undefined,\r\n                        lstPatient: lstPatient,\r\n                        //lstPatient:[],\r\n                        kendoSkip: 0,\r\n                        kendoTake: 5,\r\n                        masterData,\r\n                        expandCheck: false,\r\n\r\n\r\n                        isDeletePopup: false,\r\n                        isComboCheck: false,\r\n                        isEditPopup: false,\r\n                        screenName: screenName,//\"IDS_ADDSAMPLE\",\r\n\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation: \"save\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData)\r\n            .then(response => {\r\n                let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                let masterData = { ...inputParam.inputData.masterData, ReleaseTestAttachmentDetails };\r\n                let selectedRecord = {};\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        isAddReleaseTestAttachment: false,\r\n                        isReleaseTestAttachment: true,\r\n                        loading: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        masterData,\r\n                        isInitialRender: false,\r\n                        loadEsign: false,\r\n                        loadEsignStateHandle: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onDeleteReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.url, {\r\n            \"releasetestattachment\": inputParam.inputData.releasetestattachment, \"userinfo\": inputParam.inputData.userinfo\r\n        })\r\n            .then(response => {\r\n                let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                let selectedRecord = {\r\n                    ...inputParam.inputData.selectedRecord, ...response.data\r\n                };\r\n                let masterData = inputParam.inputData.masterData;\r\n                masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        isReleaseTestAttachment: true,\r\n                        loading: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        masterData,\r\n                        loadEsignStateHandle: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveReleaseTestComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.classUrl + \"/\" + inputParam.inputData.operation + inputParam.inputData.methodUrl, inputParam.inputData.formData)\r\n            .then(response => {\r\n                let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                let masterData = { ...inputParam.inputData.masterData, ReleaseTestCommentDetails };\r\n                let selectedRecord = {};\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        isAddReleaseTestComment: false,\r\n                        isReleaseTestComment: true,\r\n                        loading: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        masterData,\r\n                        isInitialRender: false,\r\n                        loadEsignStateHandle: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onDeleteReleaseTestComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.inputData.url, {\r\n            \"releasetestcomment\": inputParam.inputData.releasetestcomment, \"userinfo\": inputParam.inputData.userinfo\r\n        })\r\n            .then(response => {\r\n                let ReleaseTestCommentDetails = response.data.ReleaseTestCommentDetails;\r\n                let selectedRecord = {\r\n                    ...inputParam.inputData.selectedRecord, ...response.data\r\n                };\r\n                let masterData = inputParam.inputData.masterData;\r\n                masterData[\"ReleaseTestCommentDetails\"] = ReleaseTestCommentDetails;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        isReleaseTestComment: true,\r\n                        loading: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        masterData,\r\n                        loadEsignStateHandle: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function generatereport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/generateReport\", inputParam.inputData)\r\n            .then(response => {\r\n                // let masterData = {\r\n                //     ...Data,\r\n                //     ...response.data,\r\n                // }\r\n                // if (response.data.rtn === \"Success\") {\r\n                //     document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                //     document.getElementById(\"download_data\").click();\r\n                // } else {\r\n                //     toast.warn(response.data.rtn);\r\n                // }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function editReportTemplate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedReportTemplateById\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = response.data;\r\n                let selectedRecord = inputParam.selectedRecord;\r\n                selectedRecord[\"nreporttemplatecode\"] = responseData.nreporttemplatecode;\r\n                const reportTemplateMap = constructOptionList(responseData.reportTemplateList || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\",\r\n                    \"ascending\", false);\r\n                const reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n                let masterData = inputParam.masterData;\r\n                masterData[\"reportTemplateList\"] = reportTemplateList;\r\n                masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 &&\r\n                    masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.ncoaparentcode)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        masterData,\r\n                        screenName: intl.formatMessage({ id: \"IDS_REPORTTEMPLATE\" }),\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_EDITREPORTTEMPLATE\" }),\r\n                        modalShow: true,\r\n                        loadEsign: false,\r\n                        selectedRecord\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function SaveReportTemplate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/updateReportTemplate\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                // ALPD-4229 (30-05-2024) Added code when search and do action\r\n                if (masterData.searchedData && masterData.searchedData !== undefined && masterData.searchedData.length > 0) {\r\n                    masterData.searchedData.map(item => {\r\n                        if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\r\n                            item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n                            item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n                        }\r\n                    });\r\n                }\r\n                masterData.selectedReleaseHistory[0][\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n                masterData.selectedReleaseHistory[0][\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n                masterData.ReleaseHistory.map(item => {\r\n                    if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\r\n                        item[\"nreporttemplatecode\"] = inputParam.inputData.nreporttemplatecode;\r\n                        item[\"sreporttemplatename\"] = inputParam.inputData.sreporttemplatename;\r\n                    }\r\n                });\r\n                delete (inputParam.selectedRecord.nreporttemplatecode);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        masterData,\r\n                        modalShow: false,\r\n                        loadEsign: false,\r\n                        openModal: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteSamples(inputParam, data) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/deleteSamples\", inputParam.inputData)\r\n            .then(response => {\r\n                // ALPD-4229 (30-05-2024) Added searchedData as undefined\r\n                inputParam.searchRef.current.value = \"\";\r\n                let masterData = {\r\n                    ...data, ...response.data, searchedData: undefined\r\n                };\r\n                sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n//ALPD-4878-To get previously save filter details when click the filter name,done by Dhanushya RI\r\nexport function getReleaseFilter(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseFilter\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data\r\n                }\r\n\r\n                sortData(masterData, \"\", \"nfilternamecode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        nfilternamecode: inputParam.inputData.nfilternamecode,\r\n                        masterData,\r\n                        loading: false,\r\n                        modalShow: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function openReleaseComments(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const ReleaseComment = rsapi.post(\"release/getReleaseCommentDetails\", { ...inputParam.inputData });\r\n        const ReleaseCommentDetailsStatus = rsapi.post(\"release/getReleaseCommentDetailsStatus\", { userinfo: inputParam.inputData.userinfo });\r\n\r\n        urlArray = [ReleaseComment, ReleaseCommentDetailsStatus];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let transactionstatuscomments;\r\n                let responseData = response[0].data;\r\n                let selectedRecord = inputParam.selectedRecord;\r\n                selectedRecord[\"sreleasecomments\"] = responseData.sreleasecomments;\r\n                selectedRecord[\"sreleasecommentscombo\"] = responseData.sreleasecomments;\r\n                \r\n                const ReleaseCommentDetailsStatus = constructOptionList(response[1].data.TransactionStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", \"ascending\", undefined, true);\r\n                    transactionstatuscomments = ReleaseCommentDetailsStatus.get(\"OptionList\");\r\n\r\n\r\n                let masterData = inputParam.masterData;\r\n\r\n                // masterData[\"selectedReleaseHistory\"] = masterData.selectedReleaseHistory && masterData.selectedReleaseHistory.length > 0 && \r\n                //     masterData.selectedReleaseHistory.filter(item => item.ncoaparentcode === inputParam.inputData.ncoaparentcode)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        masterData,\r\n                        transactionstatuscomments,\r\n                        screenName: intl.formatMessage({ id: \"IDS_RELEASECOMMENTS\" }),\r\n                        //modalTitle: intl.formatMessage({ id: \"IDS_RELEASECOMMENTS\" }),\r\n                        //modalShow: true,\r\n                        openModal: true,\r\n                        loadEsign: false,\r\n                        selectedRecord\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function SaveReleaseComment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/createReleaseComment\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                if (masterData.searchedData && masterData.searchedData !== undefined && masterData.searchedData.length > 0) {\r\n                    masterData.searchedData.map(item => {\r\n                        if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\r\n                            item[\"ncoaparentcode\"] = inputParam.inputData.ncoaparentcode;\r\n                            item[\"sreleasecomments\"] = inputParam.inputData.sreleasecomments;\r\n                        }\r\n                    });\r\n                }\r\n                masterData.selectedReleaseHistory[0][\"ncoaparentcode\"] = inputParam.inputData.ncoaparentcode;\r\n                masterData.selectedReleaseHistory[0][\"sreleasecomments\"] = inputParam.inputData.sreleasecomments;\r\n                masterData.ReleaseHistory.map(item => {\r\n                    if (item.ncoaparentcode === inputParam.inputData.ncoaparentcode) {\r\n                        item[\"ncoaparentcode\"] = inputParam.inputData.ncoaparentcode;\r\n                        item[\"sreleasecomments\"] = inputParam.inputData.sreleasecomments;\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        masterData,\r\n                        modalShow: false,\r\n                        loadEsign: false,\r\n                        openModal: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSapInfoTOSDMS(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSapInfoTOSDMS\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data\r\n                }\r\n                if (response.data.rtn === 'SUCCESS') {\r\n                    toast.success(intl.formatMessage({id:\"IDS_RESULTTOSAP\"}));\r\n                }\r\n                else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        nfilternamecode: inputParam.inputData.nfilternamecode,\r\n                        masterData,\r\n                        loading: false,\r\n                        modalShow: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}