{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\layout\\\\layout.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from \"react-router-dom\";\nimport IdleTimer from 'react-idle-timer';\nimport PropTypes from 'prop-types';\nimport IdleTimeOutModal from '../confirm-alert/IdleTimeOutModal';\nimport Sidebar from '../sidebar/sidebar.component';\nimport Header from '../header/header.component';\nimport routes from '../../routes';\nimport { navPage, updateStore, callService, getDashBoardForHome, getListAlert, submitChangeRole, changeOwner } from '../../actions';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { IDLE_LOGOUT, DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { injectIntl } from 'react-intl'; // import { updateStore } from '../../actions/LoginAction';\n\nimport ScrollToTop from '../../actions/ScrollToTop';\nimport SearchBar from '../searchbarcomponent/SearchBar';\nimport { formatInputDate } from '../CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._onAction = e => {};\n\n    this._onActive = e => {};\n\n    this._onIdle = e => {\n      if (this.state.showIdleModal !== true) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'login/insertAuditAction';\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          // scomments: `UserName:${this.props.Login.userInfo.susername}, \n          // LoginID:${this.props.Login.userInfo.sloginid}`,\n          scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\n          sauditaction: \"IDS_IDLETIMELOCK\"\n        };\n        rsapi.post(uRL, inputData).then(response => {\n          this.setState({\n            showIdleModal: true,\n            sessionExpired: Date.now() + 60000\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.handleLogin = event => {\n      if (event) {\n        if (this.password.current !== null && this.password.current.elements[0].value === \"\") {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ENTERPASSWORD\"\n          }));\n          return;\n        } else {\n          let uRL = \"\";\n          let inputData = [];\n          uRL = 'login/idleTimeAuditAction';\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            //password: this.state.password,\n            password: this.password.current.elements[0].value,\n            flag: true,\n            nFlag: 1\n          };\n          rsapi.post(uRL, inputData).then(response => {\n            if (response.data['PassFlag'] === this.props.intl.formatMessage({\n              id: \"IDS_SUCCESS\"\n            })) {\n              this.password.current.elements[0].value = \"\";\n              this.setState({\n                showIdleModal: false,\n                openModal: false\n              });\n            } else {\n              toast.info(response.data['PassFlag']);\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.warn(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        }\n      }\n    };\n\n    this.enterKeyLogin = event => {\n      if (event.keyCode === 13) {\n        this.handleLogin(event);\n        event.preventDefault();\n      }\n    };\n\n    this.handleLogout = event => {\n      if (event) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'login/idleTimeAuditAction';\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          //password: this.state.password,\n          //password: this.password.current.elements[0].value,\n          flag: false,\n          nFlag: 2\n        };\n        rsapi.post(uRL, inputData).then(response => {\n          const updateInfo = {\n            typeName: IDLE_LOGOUT,\n            data: {\n              masterData: [],\n              inputParam: undefined,\n              idleneed: false\n            }\n          };\n          this.props.updateStore(updateInfo); //this.password.current.elements[0].value = \"\"\n          //this.setState({ showIdleModal: false })\n\n          this.props.navPage(\"login\");\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.renderer = event => {\n      // event.preventDefault();\n      const {\n        minutes,\n        seconds,\n        completed\n      } = event;\n\n      if (completed) {\n        // Render a completed state\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'login/insertAuditAction';\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          // scomments: `UserName:${this.props.Login.userInfo.susername}, \n          // LoginID:${this.props.Login.userInfo.sloginid}`,\n          scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\n          sauditaction: \"IDS_SESSIONEXPIRED\",\n          nFlag: 2\n        };\n        rsapi.post(uRL, inputData).then(response => {\n          const updateInfo = {\n            typeName: IDLE_LOGOUT,\n            data: {\n              masterData: [],\n              inputParam: undefined,\n              idleneed: false\n            }\n          }; //this.props.navPage(\"login\");\n\n          this.props.updateStore(updateInfo);\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        // Render a countdown\n        console.log(\"minutes\" + minutes + \"seconds\" + seconds);\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            'margin-left': '0.3rem',\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 20\n          }\n        }, minutes, \" minutes \", seconds, \" seconds..!\");\n      }\n\n      return null;\n    };\n\n    this.onInputChangeSearch = event => {\n      let defaultSearch = [];\n      this.props.Login.menuDesign.map((menuItem, index) => {\n        menuItem.lstmodule && menuItem.lstmodule.map((moduleItem, moduleIndex) => {\n          moduleItem.lstforms && moduleItem.lstforms.map((formItem, formIndex) => {\n            //   console.log(formItem.sdisplayname.toLowerCase(),event.target.value,formItem.sdisplayname.toLowerCase().includes(event.target.value))\n            if (formItem.sdisplayname.toLowerCase().includes(event.target.value.toLowerCase())) {\n              defaultSearch.push({ ...formItem,\n                smodulename: moduleItem.sdisplayname\n              });\n            }\n          });\n        });\n      });\n      this.setState({\n        defaultSearch,\n        searchText: event.target.value.toLowerCase(),\n        menuClick: false\n      });\n    };\n\n    this.onClickBackToMenu = e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setState({\n        defaultSearch: [],\n        menuClick: false,\n        nmenucode: undefined\n      });\n    };\n\n    this.onClickSearchMenu = (menu, inputRef) => {\n      let defaultSearch = [];\n      this.props.Login.menuDesign.map((menuItem, index) => {\n        if (menu.nmenucode === menuItem.nmenucode) {\n          menuItem.lstmodule && menuItem.lstmodule.map((moduleItem, moduleIndex) => {\n            moduleItem.lstforms && moduleItem.lstforms.map((formItem, formIndex) => {\n              //   console.log(formItem.sdisplayname.toLowerCase(),event.target.value,formItem.sdisplayname.toLowerCase().includes(event.target.value))\n              //  if (formItem.sdisplayname.toLowerCase().includes(event.target.value.toLowerCase())) {\n              defaultSearch.push({ ...formItem,\n                smodulename: moduleItem.sdisplayname\n              }); //   }\n            });\n          });\n        }\n      });\n      this.setState({\n        defaultSearch,\n        menuClick: true,\n        nmenucode: menu.nmenucode\n      });\n    };\n\n    this.getDetail = (classUrl, methodUrl, formCode, displayName, moduleCode, formname, nmenucode, smodulename) => {\n      if (this.props.Login.userInfo.nformcode !== formCode) {\n        const userInfo = { ...this.props.Login.userInfo,\n          \"nformcode\": formCode,\n          \"nmodulecode\": moduleCode,\n          \"sformname\": formname.sdisplayname,\n          smodulename: smodulename\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": userInfo,\n            settings: this.props.Login.settings,\n            currentdate: formatInputDate(new Date(), true)\n          },\n          classUrl,\n          methodUrl,\n          displayName,\n          key: \"MenuId_\" + nmenucode\n        };\n        this.props.callService(inputParam);\n      }\n    };\n\n    this.onClickButton = forms => {\n      const {\n        history\n      } = this.props;\n      history.push('/' + forms.sclassname);\n      if (this.inputRef.current) this.inputRef.current.value = \"\";\n      this.setState({\n        defaultSearch: [],\n        searchText: \"\",\n        menuClick: false,\n        showSearch: false,\n        fullView: false,\n        showAlertDashBoard: true\n      });\n      this.getDetail(forms.sclassname.toLowerCase(), forms.surl, forms.nformcode, forms.sdisplayname, forms.nmodulecode, forms, forms.nmenucode, forms.smodulename);\n    };\n\n    this.menuHide = () => {\n      this.setState({\n        fullView: false,\n        showAlertDashBoard: true\n      });\n    };\n\n    this.layOutGetHome = (updateInfo, form) => {\n      const {\n        history\n      } = this.props;\n      history.push('/' + updateInfo.data.shomename);\n      if (this.inputRef.current) this.inputRef.current.value = \"\";\n      this.setState({\n        defaultSearch: [],\n        searchText: \"\",\n        menuClick: false,\n        fullView: true,\n        showAlertDashBoard: false\n      });\n\n      if (updateInfo.data.shomename === 'dashboard') {\n        this.props.updateStore(updateInfo);\n        this.props.getDashBoardForHome(updateInfo);\n        this.props.getListAlert(updateInfo.data.userInfo, true);\n      } else if (updateInfo.data.shomename === 'apiservice') {\n        const inputParam = {\n          inputData: {\n            settings: this.props.Login.settings,\n            currentdate: formatInputDate(new Date(), true),\n            \"userinfo\": updateInfo.data.userInfo\n          },\n          serviceNeed: true,\n          ...updateInfo.data,\n          \"userinfo\": updateInfo.data.userInfo\n        };\n        this.props.callService(inputParam);\n        this.props.getListAlert(updateInfo.data.userInfo, true);\n      } else {\n        this.props.updateStore(updateInfo);\n        this.props.getListAlert(updateInfo.data.userInfo, true);\n      }\n    };\n\n    this.layOutGetHomeCancel = () => {\n      const {\n        history\n      } = this.props;\n      let {\n        menuClick,\n        defaultSearch,\n        searchText\n      } = this.state;\n\n      if (this.inputRef.current && this.inputRef.current.value !== \"\") {\n        if (this.props.history.location.pathname === '/home') {\n          history.push('/home');\n        }\n\n        this.inputRef.current.value = \"\";\n        menuClick = false;\n        defaultSearch = [];\n        searchText = \"\";\n      } else {\n        if (menuClick) {\n          menuClick = true;\n        }\n\n        if (this.inputRef.current) {\n          this.inputRef.current.value = \"\";\n        }\n      }\n\n      this.setState({\n        defaultSearch,\n        searchText,\n        showSearch: false,\n        menuClick\n      }); //this.props.updateStore(updateInfo);\n      //  this.props.layOutGetHome(updateInfo)\n    };\n\n    this.menuFullview = () => {\n      let {\n        fullView\n      } = this.state;\n      this.setState({\n        fullView: !this.state.fullView\n      });\n    };\n\n    this.toggleSearch = () => {\n      this.setState({\n        showSearch: !this.state.showSearch\n      });\n    };\n\n    this.onChangeRol = roleItem => {\n      this.setState({\n        menuClick: false,\n        showAlertDashBoard: false,\n        showSearch: false,\n        searchText: \"\"\n      });\n      const parameterInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          menuDesign: [],\n          navigation: \"\"\n        }\n      };\n      this.props.updateStore(parameterInfo);\n      const userInfo = this.props.Login.userInfo;\n      const inputParam = {\n        nusermultisitecode: userInfo.nusersitecode,\n        slanguagetypecode: userInfo.slanguagetypecode,\n        nusermultirolecode: roleItem.nusermultirolecode,\n        nuserrolecode: roleItem.nuserrolecode,\n        nmastersitecode: userInfo.nmastersitecode,\n        nlogintypecode: userInfo.nlogintypecode,\n        userinfo: userInfo\n      };\n      this.props.submitChangeRole(inputParam);\n    };\n\n    this.onChangeOwer = (item, role) => {\n      this.setState({\n        menuClick: false,\n        showAlertDashBoard: false,\n        showSearch: false,\n        searchText: \"\"\n      });\n      const parameterInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          menuDesign: [],\n          navigation: \"\"\n        }\n      };\n      this.props.updateStore(parameterInfo);\n      const inputData = {\n        nuserrolecode: item.nuserrolecode,\n        suserrolename: item.suserrolename,\n        nusercode: item.nusercode,\n        sdeputyid: item.sdeputyid,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.changeOwner(inputData);\n    };\n\n    this.state = {\n      timeout: this.props.Login.idleTimeout,\n      showIdleModal: false,\n      userLoggedIn: false,\n      isTimedOut: false,\n      password: \"\",\n      sessionExpired: this.props.Login.sessionExpired,\n      defaultSearch: [],\n      searchText: '',\n      menuClick: false,\n      showSearch: false,\n      fullView: true\n    };\n    this.inputRef = React.createRef();\n    this.idleTimer = null; //this.selectInputOnChange = this.selectInputOnChange.bind(this)\n\n    this.password = React.createRef();\n  }\n\n  // selectInputOnChange = (event) => {\n  //     let password = \"\"\n  //     if (event !== null) {\n  //         password = event.target.value\n  //     }\n  //     this.setState({ password: password })\n  // }\n  render() {\n    this.confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IdleTimer, {\n      ref: ref => {\n        this.idleTimer = ref;\n      },\n      element: document,\n      onActive: this._onActive,\n      onAction: this._onAction,\n      onIdle: this._onIdle,\n      debounce: 250,\n      timeout: this.state.timeout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }\n    }), this.props.Login.idleneed ? /*#__PURE__*/React.createElement(IdleTimeOutModal, {\n      showIdleModal: this.state.showIdleModal,\n      handleLogin: this.handleLogin,\n      handleLogout: this.handleLogout,\n      UserInfo: this.props.Login.userInfo,\n      passwordref: this.password //selectInputOnChange={this.selectInputOnChange}\n      ,\n      idealTime: this.props.Login.idleTimeout,\n      Login: this.props.Login,\n      sessionExpired: this.state.sessionExpired,\n      enterKeyLogin: this.enterKeyLogin,\n      renderer: this.renderer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Sidebar, {\n      history: this.props,\n      layOutGetHome: this.layOutGetHome,\n      inputRef: this.inputRef,\n      fullView: this.state.fullView,\n      menuHide: this.menuHide,\n      menuFullview: this.menuFullview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"content-wrapper\",\n      className: `d-flex flex-column`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      history: this.props,\n      layOutGetHomeCancel: this.layOutGetHomeCancel,\n      fullView: this.state.fullView,\n      visible: this.state.visible,\n      menuFullview: this.menuFullview,\n      toggleSearch: this.toggleSearch,\n      showSearch: this.state.showSearch,\n      searchBar: /*#__PURE__*/React.createElement(SearchBar, {\n        options: this.state.defaultSearch,\n        optionDisplayMember: 'sdisplayname',\n        onClickButton: this.onClickButton,\n        onInputChange: this.onInputChangeSearch,\n        pathname: this.props.history.location.pathname,\n        inputRef: this.inputRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 33\n        }\n      }),\n      onChangeRol: this.onChangeRol,\n      onChangeOwer: this.onChangeOwer,\n      showAlertDashBoard: this.state.showAlertDashBoard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: `container-fluid px-0  ${!this.state.fullView ? 'sidebar-fullview' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ScrollToTop, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 37\n      }\n    }, routes.map((route, index) => {\n      return route.component ? /*#__PURE__*/React.createElement(Route, {\n        key: index,\n        path: route.path,\n        exact: route.exact,\n        name: route.name,\n        render: props => /*#__PURE__*/React.createElement(route.component, Object.assign({\n          onClickSearchMenu: this.onClickSearchMenu,\n          onClickSearchForm: this.onClickButton,\n          menuClick: this.state.menuClick,\n          onClickBackToMenu: this.onClickBackToMenu,\n          searchText: this.state.searchText,\n          defaultSearch: this.state.defaultSearch\n        }, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 57\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 49\n        }\n      }) : null;\n    }))))))));\n  }\n\n}\n\nLayout.propTypes = {\n  match: PropTypes.any.isRequired,\n  history: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  navPage,\n  updateStore,\n  callService,\n  getDashBoardForHome,\n  getListAlert,\n  submitChangeRole,\n  changeOwner\n})(injectIntl(Layout));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/layout/layout.component.jsx"],"names":["React","connect","Route","Switch","IdleTimer","PropTypes","IdleTimeOutModal","Sidebar","Header","routes","navPage","updateStore","callService","getDashBoardForHome","getListAlert","submitChangeRole","changeOwner","rsapi","toast","ConfirmMessage","IDLE_LOGOUT","DEFAULT_RETURN","injectIntl","ScrollToTop","SearchBar","formatInputDate","mapStateToProps","state","Login","Layout","Component","constructor","props","_onAction","e","_onActive","_onIdle","showIdleModal","uRL","inputData","userinfo","userInfo","scomments","susername","suserrolename","sloginid","sauditaction","post","then","response","setState","sessionExpired","Date","now","catch","error","status","message","warn","data","handleLogin","event","password","current","elements","value","info","intl","formatMessage","id","flag","nFlag","openModal","enterKeyLogin","keyCode","preventDefault","handleLogout","updateInfo","typeName","masterData","inputParam","undefined","idleneed","renderer","minutes","seconds","completed","console","log","color","onInputChangeSearch","defaultSearch","menuDesign","map","menuItem","index","lstmodule","moduleItem","moduleIndex","lstforms","formItem","formIndex","sdisplayname","toLowerCase","includes","target","push","smodulename","searchText","menuClick","onClickBackToMenu","stopPropagation","nmenucode","onClickSearchMenu","menu","inputRef","getDetail","classUrl","methodUrl","formCode","displayName","moduleCode","formname","nformcode","settings","currentdate","key","onClickButton","forms","history","sclassname","showSearch","fullView","showAlertDashBoard","surl","nmodulecode","menuHide","layOutGetHome","form","shomename","serviceNeed","layOutGetHomeCancel","location","pathname","menuFullview","toggleSearch","onChangeRol","roleItem","parameterInfo","navigation","nusermultisitecode","nusersitecode","slanguagetypecode","nusermultirolecode","nuserrolecode","nmastersitecode","nlogintypecode","onChangeOwer","item","role","nusercode","sdeputyid","timeout","idleTimeout","userLoggedIn","isTimedOut","createRef","idleTimer","render","confirmMessage","ref","document","visible","route","component","path","exact","name","propTypes","match","any","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport IdleTimer from 'react-idle-timer';\r\nimport PropTypes from 'prop-types';\r\nimport IdleTimeOutModal from '../confirm-alert/IdleTimeOutModal';\r\nimport Sidebar from '../sidebar/sidebar.component';\r\nimport Header from '../header/header.component';\r\nimport routes from '../../routes';\r\nimport { navPage, updateStore, callService, getDashBoardForHome,getListAlert ,submitChangeRole,changeOwner} from '../../actions'\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { IDLE_LOGOUT,DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { injectIntl } from 'react-intl';\r\n// import { updateStore } from '../../actions/LoginAction';\r\nimport ScrollToTop from '../../actions/ScrollToTop';\r\nimport SearchBar from '../searchbarcomponent/SearchBar';\r\nimport { formatInputDate } from '../CommonScript';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass Layout extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeout: this.props.Login.idleTimeout,\r\n            showIdleModal: false,\r\n            userLoggedIn: false,\r\n            isTimedOut: false,\r\n            password: \"\",\r\n            sessionExpired: this.props.Login.sessionExpired,\r\n            defaultSearch: [],\r\n            searchText: '',\r\n            menuClick: false,\r\n            showSearch: false,\r\n            fullView: true,\r\n        }\r\n        this.inputRef = React.createRef();\r\n        this.idleTimer = null\r\n        //this.selectInputOnChange = this.selectInputOnChange.bind(this)\r\n        this.password = React.createRef();\r\n    }\r\n\r\n    _onAction = (e) => {\r\n\r\n    }\r\n\r\n    _onActive = (e) => {\r\n\r\n    }\r\n\r\n    _onIdle = (e) => {\r\n        if (this.state.showIdleModal !== true) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'login/insertAuditAction';\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                // scomments: `UserName:${this.props.Login.userInfo.susername}, \r\n                // LoginID:${this.props.Login.userInfo.sloginid}`,\r\n                scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\r\n                sauditaction: \"IDS_IDLETIMELOCK\"\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    this.setState({ showIdleModal: true, sessionExpired: Date.now() + 60000 });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    handleLogin = (event) => {\r\n        if (event) {\r\n            if (this.password.current !== null && this.password.current.elements[0].value === \"\") {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERPASSWORD\" }));\r\n                return;\r\n            }\r\n            else {\r\n                let uRL = \"\";\r\n                let inputData = [];\r\n                uRL = 'login/idleTimeAuditAction';\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    //password: this.state.password,\r\n                    password: this.password.current.elements[0].value,\r\n                    flag: true, nFlag: 1\r\n                }\r\n\r\n                rsapi.post(uRL, inputData)\r\n                    .then(response => {\r\n                        if (response.data['PassFlag'] === this.props.intl.formatMessage({ id: \"IDS_SUCCESS\" })) {\r\n                            this.password.current.elements[0].value = \"\"\r\n                            this.setState({ showIdleModal: false, openModal: false })\r\n                        }\r\n                        else {\r\n                            toast.info(response.data['PassFlag']);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.warn(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    enterKeyLogin = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.handleLogin(event);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    handleLogout = (event) => {\r\n        if (event) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'login/idleTimeAuditAction';\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                //password: this.state.password,\r\n                //password: this.password.current.elements[0].value,\r\n                flag: false, nFlag: 2\r\n            }\r\n\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n\r\n                    const updateInfo = {\r\n                        typeName: IDLE_LOGOUT,\r\n                        data: {\r\n                            masterData: [], inputParam: undefined, idleneed: false\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    //this.password.current.elements[0].value = \"\"\r\n                    //this.setState({ showIdleModal: false })\r\n                    this.props.navPage(\"login\");\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    renderer = (event) => {\r\n        // event.preventDefault();\r\n        const { minutes, seconds, completed } = event;\r\n        if (completed) {\r\n            // Render a completed state\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'login/insertAuditAction';\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                // scomments: `UserName:${this.props.Login.userInfo.susername}, \r\n                // LoginID:${this.props.Login.userInfo.sloginid}`,\r\n                scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\r\n                sauditaction: \"IDS_SESSIONEXPIRED\", nFlag: 2\r\n            }\r\n\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n\r\n                    const updateInfo = {\r\n                        typeName: IDLE_LOGOUT,\r\n                        data: {\r\n                            masterData: [], inputParam: undefined, idleneed: false\r\n                        }\r\n                    }\r\n                    //this.props.navPage(\"login\");\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            // Render a countdown\r\n            console.log(\"minutes\" + minutes + \"seconds\" + seconds)\r\n            return <span style={{ 'margin-left': '0.3rem', color: 'red' }}>{minutes} minutes {seconds} seconds..!</span>;\r\n\r\n        }\r\n        return null;\r\n    };\r\n\r\n\r\n    onInputChangeSearch = (event) => {\r\n        let defaultSearch = []\r\n        this.props.Login.menuDesign.map((menuItem, index) => {\r\n            menuItem.lstmodule && menuItem.lstmodule.map((moduleItem, moduleIndex) => {\r\n                moduleItem.lstforms && moduleItem.lstforms.map((formItem, formIndex) => {\r\n\r\n                    //   console.log(formItem.sdisplayname.toLowerCase(),event.target.value,formItem.sdisplayname.toLowerCase().includes(event.target.value))\r\n                    if (formItem.sdisplayname.toLowerCase().includes(event.target.value.toLowerCase())) {\r\n                        defaultSearch.push({ ...formItem, smodulename: moduleItem.sdisplayname })\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        this.setState({ defaultSearch, searchText: event.target.value.toLowerCase(), menuClick: false })\r\n    }\r\n    onClickBackToMenu = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n        this.setState({\r\n            defaultSearch: [],\r\n            menuClick: false, nmenucode: undefined\r\n        })\r\n    }\r\n\r\n    onClickSearchMenu = (menu, inputRef) => {\r\n        let defaultSearch = []\r\n        this.props.Login.menuDesign.map((menuItem, index) => {\r\n            if (menu.nmenucode === menuItem.nmenucode) {\r\n                menuItem.lstmodule && menuItem.lstmodule.map((moduleItem, moduleIndex) => {\r\n                    moduleItem.lstforms && moduleItem.lstforms.map((formItem, formIndex) => {\r\n                        //   console.log(formItem.sdisplayname.toLowerCase(),event.target.value,formItem.sdisplayname.toLowerCase().includes(event.target.value))\r\n                        //  if (formItem.sdisplayname.toLowerCase().includes(event.target.value.toLowerCase())) {\r\n                        defaultSearch.push({ ...formItem, smodulename: moduleItem.sdisplayname })\r\n                        //   }\r\n                    })\r\n                })\r\n            }\r\n        })\r\n        this.setState({\r\n            defaultSearch,\r\n            menuClick: true, nmenucode: menu.nmenucode\r\n        })\r\n    }\r\n\r\n    getDetail = (classUrl, methodUrl, formCode, displayName, moduleCode, formname, nmenucode, smodulename) => {\r\n\r\n        if (this.props.Login.userInfo.nformcode !== formCode) {\r\n            const userInfo = {\r\n                ...this.props.Login.userInfo, \"nformcode\": formCode,\r\n                \"nmodulecode\": moduleCode, \"sformname\": formname.sdisplayname, smodulename: smodulename\r\n            }\r\n            const inputParam = {\r\n                inputData: { \"userinfo\": userInfo,\r\n                settings : this.props.Login.settings,\r\n                currentdate: formatInputDate(new Date(), true) },\r\n                classUrl, methodUrl, displayName, key: \"MenuId_\" + nmenucode,\r\n            };\r\n\r\n            this.props.callService(inputParam);\r\n        }\r\n    }\r\n\r\n    onClickButton = (forms) => {\r\n        const { history } = this.props;\r\n        history.push('/' + forms.sclassname);\r\n        if (this.inputRef.current)\r\n            this.inputRef.current.value = \"\"\r\n        this.setState({ defaultSearch: [], searchText: \"\", menuClick: false, showSearch: false, fullView: false ,showAlertDashBoard:true})\r\n        this.getDetail(forms.sclassname.toLowerCase(), forms.surl,\r\n            forms.nformcode, forms.sdisplayname, forms.nmodulecode, forms, forms.nmenucode, forms.smodulename)\r\n    }\r\n    menuHide = () => {\r\n        this.setState({ fullView: false,showAlertDashBoard:true })\r\n    }\r\n    layOutGetHome = (updateInfo, form) => {\r\n        const { history } = this.props;\r\n        history.push('/' + updateInfo.data.shomename);\r\n        if (this.inputRef.current)\r\n            this.inputRef.current.value = \"\"\r\n        this.setState({ defaultSearch: [], searchText: \"\", menuClick: false, fullView: true,showAlertDashBoard:false })\r\n        if (updateInfo.data.shomename === 'dashboard') {\r\n            this.props.updateStore(updateInfo);\r\n            this.props.getDashBoardForHome(updateInfo);\r\n            this.props.getListAlert(updateInfo.data.userInfo, true)\r\n        } else if (updateInfo.data.shomename === 'apiservice') {\r\n            const inputParam = {\r\n                inputData: { \r\n                 settings : this.props.Login.settings,\r\n                 currentdate: formatInputDate(new Date(), true) ,\"userinfo\": updateInfo.data.userInfo},\r\n                 serviceNeed: true,...updateInfo.data, \"userinfo\": updateInfo.data.userInfo,\r\n            };\r\n            this.props.callService(inputParam);\r\n            this.props.getListAlert(updateInfo.data.userInfo, true)\r\n        }\r\n        else {\r\n            this.props.updateStore(updateInfo);\r\n            this.props.getListAlert(updateInfo.data.userInfo, true)\r\n        }\r\n\r\n    }\r\n    layOutGetHomeCancel = () => {\r\n        const { history } = this.props;\r\n        let { menuClick, defaultSearch, searchText } = this.state\r\n\r\n        if (this.inputRef.current && this.inputRef.current.value !== \"\") {\r\n            if (this.props.history.location.pathname === '/home') {\r\n                history.push('/home');\r\n            }\r\n            this.inputRef.current.value = \"\"\r\n            menuClick = false\r\n            defaultSearch = []\r\n            searchText = \"\"\r\n        } else {\r\n            if (menuClick) {\r\n                menuClick = true\r\n            }\r\n\r\n            if (this.inputRef.current) {\r\n                this.inputRef.current.value = \"\"\r\n            }\r\n\r\n        }\r\n        this.setState({ defaultSearch, searchText, showSearch: false, menuClick })\r\n        //this.props.updateStore(updateInfo);\r\n        //  this.props.layOutGetHome(updateInfo)\r\n    }\r\n    menuFullview = () => {\r\n        let { fullView } = this.state;\r\n        this.setState({ fullView: !this.state.fullView })\r\n    }\r\n    toggleSearch = () => {\r\n        this.setState({\r\n            showSearch: !this.state.showSearch\r\n        })\r\n    }\r\n    onChangeRol = (roleItem) => {\r\n        this.setState({ menuClick:false,showAlertDashBoard:false  ,showSearch:false,searchText:\"\" })\r\n        const parameterInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { menuDesign: [], navigation: \"\" }\r\n          }\r\n          this.props.updateStore(parameterInfo);\r\n          const userInfo = this.props.Login.userInfo;\r\n          const inputParam = {\r\n            nusermultisitecode: userInfo.nusersitecode,\r\n            slanguagetypecode: userInfo.slanguagetypecode,\r\n            nusermultirolecode: roleItem.nusermultirolecode,\r\n            nuserrolecode: roleItem.nuserrolecode,\r\n            nmastersitecode: userInfo.nmastersitecode,\r\n            nlogintypecode: userInfo.nlogintypecode,\r\n            userinfo: userInfo\r\n          }\r\n          this.props.submitChangeRole(inputParam);\r\n    }\r\n\r\n    onChangeOwer=(item, role)=>{\r\n        this.setState({ menuClick:false ,showAlertDashBoard:false,showSearch:false,searchText:\"\" })\r\n        const parameterInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { menuDesign: [], navigation: \"\" }\r\n          }\r\n          this.props.updateStore(parameterInfo);\r\n          const inputData = {\r\n            nuserrolecode: item.nuserrolecode,\r\n            suserrolename: item.suserrolename,\r\n            nusercode: item.nusercode,\r\n            sdeputyid: item.sdeputyid,\r\n            userinfo: this.props.Login.userInfo\r\n          }\r\n          this.props.changeOwner(inputData);\r\n    }\r\n\r\n\r\n    // selectInputOnChange = (event) => {\r\n    //     let password = \"\"\r\n    //     if (event !== null) {\r\n    //         password = event.target.value\r\n    //     }\r\n    //     this.setState({ password: password })\r\n    // }\r\n\r\n    render() {\r\n        this.confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <div id=\"app-wrapper\">\r\n                    <IdleTimer\r\n                        ref={ref => { this.idleTimer = ref }}\r\n                        element={document}\r\n                        onActive={this._onActive}\r\n                        onAction={this._onAction}\r\n                        onIdle={this._onIdle}\r\n                        debounce={250}\r\n                        timeout={this.state.timeout} />\r\n                    {this.props.Login.idleneed ?\r\n                        <IdleTimeOutModal\r\n                            showIdleModal={this.state.showIdleModal}\r\n                            handleLogin={this.handleLogin}\r\n                            handleLogout={this.handleLogout}\r\n                            UserInfo={this.props.Login.userInfo}\r\n                            passwordref={this.password}\r\n                            //selectInputOnChange={this.selectInputOnChange}\r\n                            idealTime={this.props.Login.idleTimeout}\r\n                            Login={this.props.Login}\r\n                            sessionExpired={this.state.sessionExpired}\r\n                            enterKeyLogin={this.enterKeyLogin}\r\n                            renderer={this.renderer} />\r\n                        : \"\"}\r\n\r\n                    <Sidebar history={this.props} layOutGetHome={this.layOutGetHome} inputRef={this.inputRef} fullView={this.state.fullView} menuHide={this.menuHide} menuFullview={this.menuFullview} />\r\n\r\n\r\n                    <div id=\"content-wrapper\" className={`d-flex flex-column`}>\r\n                        <div id=\"content\">\r\n                            <Header history={this.props} layOutGetHomeCancel={this.layOutGetHomeCancel} fullView={this.state.fullView} visible={this.state.visible} menuFullview={this.menuFullview} toggleSearch={this.toggleSearch} showSearch={this.state.showSearch} searchBar={\r\n                                <SearchBar options={this.state.defaultSearch}\r\n                                    optionDisplayMember={'sdisplayname'}\r\n                                    onClickButton={this.onClickButton}\r\n                                    onInputChange={this.onInputChangeSearch}\r\n                                    pathname={this.props.history.location.pathname}\r\n                                    inputRef={this.inputRef}\r\n\r\n                                /> } \r\n                                onChangeRol={this.onChangeRol} \r\n                                onChangeOwer={this.onChangeOwer} \r\n                                showAlertDashBoard={this.state.showAlertDashBoard}/>\r\n                            <div className={`container-fluid px-0  ${!this.state.fullView ? 'sidebar-fullview':''}`}>\r\n                                <ScrollToTop>\r\n                                    <Switch>\r\n                                        {routes.map((route, index) => {\r\n                                            return route.component ? (\r\n                                                <Route\r\n                                                    key={index}\r\n                                                    path={route.path}\r\n                                                    exact={route.exact}\r\n                                                    name={route.name}\r\n                                                    render={props => (\r\n                                                        <route.component\r\n                                                            onClickSearchMenu={this.onClickSearchMenu}\r\n                                                            onClickSearchForm={this.onClickButton}\r\n                                                            menuClick={this.state.menuClick}\r\n                                                            onClickBackToMenu={this.onClickBackToMenu}\r\n                                                            searchText={this.state.searchText} defaultSearch={this.state.defaultSearch} {...props} />\r\n                                                    )} />\r\n                                            ) : (null);\r\n                                        })}\r\n                                    </Switch>\r\n                                </ScrollToTop>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nLayout.propTypes = {\r\n    match: PropTypes.any.isRequired,\r\n    history: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, { navPage, updateStore, callService, getDashBoardForHome,getListAlert,submitChangeRole,changeOwner })(injectIntl(Layout));"]},"metadata":{},"sourceType":"module"}