{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from './LoginAction';\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { saveAs, encodeBase64 } from '@progress/kendo-file-saver';\nexport function getCerGenDetail(CerGen, fromDate, toDate, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"certificategeneration/getCertificateGeneration\", {\n      \"nreleasebatchcode\": CerGen[\"nreleasebatchcode\"],\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestParameter(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"certificategeneration/getTestParameter\", {\n      npreregno: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let testMap = methodParam.masterData.testMap || new Map();\n      testMap.set(parseInt(Object.keys(response.data[\"Parameter\"])[0]), Object.values(response.data[\"Parameter\"])[0]);\n      const masterData = { ...methodParam.masterData,\n        testMap\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          testMap,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function certifyBatch(certificateParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(certificateParam.classUrl + \"/\" + certificateParam.methodUrl, {\n      \"nreleasebatchcode\": certificateParam.inputData.nreleasebatchcode,\n      \"ncontrolcode\": certificateParam.inputData.ncontrolcode,\n      \"userinfo\": certificateParam.inputData.userinfo\n    }).then(response => {\n      let BATCHSTATUS = response.data.BATCHSTATUS;\n      let REPORTSTATUS = response.data.REPORTSTATUS;\n      let BatchResponse = response.data.BatchResponse;\n      let ReportResponse = response.data.ReportResponse;\n\n      if (BATCHSTATUS === 200) {\n        const masterData = { ...certificateParam.masterData,\n          ...BatchResponse,\n          CerGen: replaceUpdatedObject(BatchResponse.updatedCerGen, certificateParam.masterData.CerGen, 'nreleasebatchcode')\n        }; // sortData(masterData);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            dataState: undefined,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n        toast.warn(BatchResponse);\n      }\n\n      if (REPORTSTATUS === 200) {\n        document.getElementById(\"download_data\").setAttribute(\"href\", ReportResponse.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(ReportResponse);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          loadEsign: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onClickCertificate(certificateParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(certificateParam.classUrl + \"/\" + certificateParam.methodUrl, {\n      \"nreleasebatchcode\": certificateParam.inputData.nreleasebatchcode,\n      \"userinfo\": certificateParam.inputData.userinfo,\n      \"ncontrolcode\": certificateParam.inputData.ncontrolcode\n    }).then(response => {\n      const masterData = { ...certificateParam.masterData,\n        ...response.data,\n        CerGen: replaceUpdatedObject(response.data.updatedCerGen, certificateParam.masterData.CerGen, 'nreleasebatchcode')\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          loadEsign: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onClickXmlExport(certificateParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(certificateParam.classUrl + \"/\" + certificateParam.methodUrl, {\n      \"nreleasebatchcode\": certificateParam.inputData.nreleasebatchcode,\n      \"userinfo\": certificateParam.inputData.userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          dataState: undefined\n        }\n      });\n      let sfilename = \"\";\n\n      if (certificateParam.nversioncode === 0) {\n        sfilename = \"C\" + certificateParam.scertificatehistorycode + \".xml\";\n      } else {\n        sfilename = \"C\" + certificateParam.scertificatehistorycode + \"(Supp \" + certificateParam.nversioncode + \").xml\";\n      }\n\n      const dataURI = \"data:\" + response[\"headers\"][\"content-type\"] + \";base64,\" + encodeBase64(response[\"data\"]);\n      saveAs(dataURI, sfilename);\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforCerGen(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'InsertCertificate' || inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'insertCertificateNullified') {\n          dispatch(certifyBatch(inputParam[\"screenData\"][\"inputParam\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'reportGeneration') {\n          dispatch(onClickReport(inputParam[\"screenData\"][\"inputParam\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"]['operation'] === 'xml') {\n          dispatch(onClickXmlExport(inputParam[\"screenData\"][\"inputParam\"]));\n        } else {\n          dispatch(onClickCertificate(inputParam[\"screenData\"][\"inputParam\"]));\n        } // else if (inputParam[\"screenData\"][\"inputParam\"]['operation'] !== 'xml') {\n        //     dispatch(onClickCertificate(inputParam[\"screenData\"][\"inputParam\"]))\n        // } else {\n        //     dispatch(onClickXmlExport(inputParam[\"screenData\"][\"inputParam\"]))\n        // }\n\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onClickReport(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(inputParam.classUrl + \"/\" + inputParam.methodUrl, inputParam.inputData) // {\n    //     nprimarykey: inputParam[inputParam.nprimarykey],\n    //     sprimarykeyname:inputParam.nprimarykey,\n    //     userinfo: inputParam.userInfo,\n    //     ndecisionstatus: inputParam.ndecisionStatus, \n    //     nflag: 1, \n    //    \"nreporttypecode\": 3\n    // }\n    .then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReport(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"certificategeneration/viewCertificateReport\", inputParam.inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showReport: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/CertificateGenerationAction.js"],"names":["toast","intl","replaceUpdatedObject","sortData","rsapi","initRequest","DEFAULT_RETURN","saveAs","encodeBase64","getCerGenDetail","CerGen","fromDate","toDate","userInfo","masterData","dispatch","post","then","response","data","type","payload","loading","dataState","undefined","catch","error","status","formatMessage","id","message","warn","getTestParameter","methodParam","npreregno","primaryKeyValue","userinfo","testMap","Map","set","parseInt","Object","keys","values","certifyBatch","certificateParam","classUrl","methodUrl","inputData","nreleasebatchcode","ncontrolcode","BATCHSTATUS","REPORTSTATUS","BatchResponse","ReportResponse","updatedCerGen","loadEsign","openModal","document","getElementById","setAttribute","filepath","click","onClickCertificate","onClickXmlExport","sfilename","nversioncode","scertificatehistorycode","dataURI","validateEsignforCerGen","inputParam","toLowerCase","onClickReport","showConfirmAlert","viewReport","showReport"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from './LoginAction';\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { saveAs, encodeBase64 } from '@progress/kendo-file-saver';\r\n\r\n\r\nexport function getCerGenDetail(CerGen, fromDate, toDate, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"certificategeneration/getCertificateGeneration\", {\r\n            \"nreleasebatchcode\": CerGen[\"nreleasebatchcode\"],\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState: undefined } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            }\r\n            )\r\n    }\r\n}\r\n\r\nexport function getTestParameter(methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"certificategeneration/getTestParameter\",\r\n            {\r\n                npreregno: methodParam.primaryKeyValue,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let testMap = methodParam.masterData.testMap || new Map();\r\n                testMap.set(parseInt(Object.keys(response.data[\"Parameter\"])[0]), Object.values(response.data[\"Parameter\"])[0]);\r\n                const masterData = { ...methodParam.masterData, testMap };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data, testMap,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function certifyBatch(certificateParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(certificateParam.classUrl + \"/\" + certificateParam.methodUrl, {\r\n            \"nreleasebatchcode\": certificateParam.inputData.nreleasebatchcode,\r\n            \"ncontrolcode\": certificateParam.inputData.ncontrolcode,\r\n            \"userinfo\": certificateParam.inputData.userinfo\r\n        })\r\n            .then(response => {\r\n                let BATCHSTATUS = response.data.BATCHSTATUS\r\n                let REPORTSTATUS = response.data.REPORTSTATUS\r\n                let BatchResponse = response.data.BatchResponse\r\n                let ReportResponse = response.data.ReportResponse\r\n                if(BATCHSTATUS === 200){\r\n                    const masterData = {\r\n                        ...certificateParam.masterData,\r\n                        ...BatchResponse,\r\n                        CerGen: replaceUpdatedObject(BatchResponse.updatedCerGen, certificateParam.masterData.CerGen, 'nreleasebatchcode'),\r\n                    };\r\n                    // sortData(masterData);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState: undefined, loadEsign: false, openModal: false } });\r\n                }else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, loadEsign: false } })\r\n                    toast.warn(BatchResponse);\r\n                }\r\n                if(REPORTSTATUS === 200){\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", ReportResponse.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                }else{\r\n                    toast.warn(ReportResponse);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, loadEsign: false } })\r\n                }   \r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, loadEsign: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            }\r\n            )\r\n    }\r\n}\r\nexport function onClickCertificate(certificateParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(certificateParam.classUrl + \"/\" + certificateParam.methodUrl, {\r\n            \"nreleasebatchcode\": certificateParam.inputData.nreleasebatchcode,\r\n            \"userinfo\": certificateParam.inputData.userinfo,\r\n            \"ncontrolcode\": certificateParam.inputData.ncontrolcode\r\n\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...certificateParam.masterData,\r\n                    ...response.data,\r\n                    CerGen: replaceUpdatedObject(response.data.updatedCerGen, certificateParam.masterData.CerGen, 'nreleasebatchcode'),\r\n                };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, dataState: undefined, loadEsign: false, openModal: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false, loadEsign: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            }\r\n            )\r\n    }\r\n}\r\n\r\n\r\nexport function onClickXmlExport(certificateParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(certificateParam.classUrl + \"/\" + certificateParam.methodUrl, {\r\n            \"nreleasebatchcode\": certificateParam.inputData.nreleasebatchcode,\r\n            \"userinfo\": certificateParam.inputData.userinfo\r\n        }).then(response => {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false, loadEsign: false, openModal: false, dataState: undefined } })\r\n            let sfilename = \"\";\r\n\r\n            if (certificateParam.nversioncode === 0) {\r\n                sfilename = \"C\" + certificateParam.scertificatehistorycode + \".xml\";\r\n            } else {\r\n                sfilename = \"C\" + certificateParam.scertificatehistorycode + \"(Supp \" + certificateParam.nversioncode + \").xml\";\r\n            }\r\n            const dataURI = \"data:\" + response[\"headers\"][\"content-type\"] + \";base64,\" + encodeBase64(response[\"data\"]);\r\n            saveAs(dataURI, sfilename);\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, loadEsign: false, openModal: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            }\r\n            )\r\n    }\r\n}\r\n\r\nexport function validateEsignforCerGen(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n                    const methodUrl = \"\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]  ;                        \r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'InsertCertificate'||inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'insertCertificateNullified') {\r\n                        dispatch(certifyBatch(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    } \r\n                    else if (inputParam[\"screenData\"][\"inputParam\"]['methodUrl'] === 'reportGeneration') {\r\n                        dispatch(onClickReport(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    } \r\n                    else if (inputParam[\"screenData\"][\"inputParam\"]['operation'] === 'xml') {\r\n                        dispatch(onClickXmlExport(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    } \r\n                    else {\r\n                        dispatch(onClickCertificate(inputParam[\"screenData\"][\"inputParam\"]))\r\n                   \r\n                    }\r\n                    \r\n                    // else if (inputParam[\"screenData\"][\"inputParam\"]['operation'] !== 'xml') {\r\n                    //     dispatch(onClickCertificate(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    // } else {\r\n                    //     dispatch(onClickXmlExport(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    // }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function onClickReport(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(inputParam.classUrl + \"/\" + inputParam.methodUrl,inputParam.inputData)\r\n            // {\r\n            //     nprimarykey: inputParam[inputParam.nprimarykey],\r\n            //     sprimarykeyname:inputParam.nprimarykey,\r\n            //     userinfo: inputParam.userInfo,\r\n            //     ndecisionstatus: inputParam.ndecisionStatus, \r\n            //     nflag: 1, \r\n            //    \"nreporttypecode\": 3\r\n            // }\r\n        \r\n            .then(response => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, loadEsign: false, openModal: false ,showConfirmAlert:false} })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReport(inputParam){\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"certificategeneration/viewCertificateReport\",inputParam.inputData)\r\n          \r\n            .then(response => {\r\n                 dispatch({ type: DEFAULT_RETURN, \r\n                    payload: {\r\n                      ...response.data,\r\n                        loading: false, \r\n                        loadEsign: false, \r\n                        openModal: false ,\r\n                        showReport:true\r\n                    } \r\n                })\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}