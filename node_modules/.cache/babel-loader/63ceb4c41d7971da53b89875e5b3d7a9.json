{"ast":null,"code":"import _classCallCheck from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import{LocalizationProvider}from'@progress/kendo-react-intl';import React from'react';import{injectIntl,FormattedMessage}from'react-intl';// import ReactTooltip from 'react-tooltip';\nimport{AtTabs}from'../../components/custom-tabs/custom-tabs.styles';import{ReadOnlyText}from'../../components/App.styles';import PerfectScrollbar from'react-perfect-scrollbar';import Tabs,{TabPane}from\"rc-tabs\";import{AtTableWrap}from'../../components/data-grid/data-grid.styles';import{formCode,SampleType}from'../../components/Enumeration';import'rc-tabs/assets/index.css';import{Col,Row,Card}from'react-bootstrap';import FormMultiSelect from'../../components/form-multi-select/form-multi-select.component';var ConfigureEditFields=/*#__PURE__*/function(_React$Component){_inherits(ConfigureEditFields,_React$Component);var _super=_createSuper(ConfigureEditFields);function ConfigureEditFields(props){var _this;_classCallCheck(this,ConfigureEditFields);_this=_super.call(this,props);_this.onTabChange=function(tab){_this.setState({selectedScreen:_this.state.screens.find(function(screen){return screen.eventKey===tab;})});};var screens=[{eventKey:'registration',name:\"IDS_SAMPLEREGISTRATION\",formcode:formCode.SAMPLEREGISTRATION}];// if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\n//     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\n// }\n// if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\n//     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\n// }\n// screens.push({ eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\n//             { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL });\nvar extractedColumnList=[];if(_this.props.selectedTemplateType===SampleType.Masters){extractedColumnList.push({\"title\":\"IDS_GRIDITEM\",\"field\":\"griditem\",\"width\":\"600px\"},{\"title\":\"IDS_GRIDMOREITEM\",\"field\":\"gridmoreitem\",\"width\":\"600px\"});}else{extractedColumnList.push({\"title\":\"IDS_EDITABLESTATUS\",\"field\":\"editablestatus\",\"width\":\"600px\"});}_this.state={screens:screens,extractedColumnList:extractedColumnList,selectedScreen:{eventKey:'registration',name:\"IDS_SAMPLEREGISTRATION\",formcode:43}};return _this;}_createClass(ConfigureEditFields,[{key:\"render\",value:function render(){var _this2=this;//console.log(\"props:\",this.props)\n//console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,this.props.selectedTemplateType===SampleType.Masters?/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:\"lang\"},/*#__PURE__*/React.createElement(React.Fragment,null)))):/*#__PURE__*/React.createElement(AtTabs,null,/*#__PURE__*/React.createElement(Tabs,{activeKey:this.state.selectedScreen.eventKey,moreIcon:\"...\",onChange:this.onTabChange},this.state.screens.map(function(screen){return/*#__PURE__*/React.createElement(TabPane,{name:screen.eventKey,tab:_this2.props.intl.formatMessage({id:screen.name}),key:screen.eventKey},/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:\"lang\"},/*#__PURE__*/React.createElement(Card,{className:\"border-0\"},/*#__PURE__*/React.createElement(Card.Header,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,/*#__PURE__*/React.createElement(FormattedMessage,{id:\"IDS_FIELDS\",message:\"Fields\"}))),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,/*#__PURE__*/React.createElement(FormattedMessage,{id:\"IDS_EDITABLESTATUS\",message:\"Editable Status\"}))))),/*#__PURE__*/React.createElement(Card.Body,null,_this2.props.dataResult[_this2.state.selectedScreen.formcode].map(function(item,index){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,\" \",item.label,\" \")),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(FormMultiSelect,{name:item.label//label={this.props.intl.formatMessage({ id: item.label + \"_\" + index})}\n,options:item.editablestatus||[],optionId:\"ntransactionstatus\",optionValue:\"stransdisplaystatus\",value:_this2.props.selectedRecord&&_this2.props.selectedRecord[_this2.state.selectedScreen.formcode]?_this2.props.selectedRecord[_this2.state.selectedScreen.formcode][item.label]||[]:[],isMandatory:false,isClearable:true,disableSearch:false,disabled:false,closeMenuOnSelect:false,alphabeticalSort:true,onChange:function onChange(event){return _this2.props.onComboChange(event,_this2.state.selectedScreen.formcode,item);}})));})))))));}))));}}]);return ConfigureEditFields;}(React.Component);export default injectIntl(ConfigureEditFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/designtemplatemapping/ConfigureEditFields.jsx"],"names":["LocalizationProvider","React","injectIntl","FormattedMessage","AtTabs","ReadOnlyText","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","Col","Row","Card","FormMultiSelect","ConfigureEditFields","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","name","formcode","SAMPLEREGISTRATION","extractedColumnList","selectedTemplateType","Masters","push","map","intl","formatMessage","id","dataResult","item","index","label","editablestatus","selectedRecord","event","onComboChange","Component"],"mappings":"wtBAAA,OAASA,oBAAT,KAAqC,4BAArC,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,CAAoBC,gBAApB,KAA4C,YAA5C,CACA;AACA,OAASC,MAAT,KAAuB,iDAAvB,CACA,OAAUC,YAAV,KAA8B,6BAA9B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,yBAA7B,CACA,MAAOC,CAAAA,IAAP,EAAeC,OAAf,KAA8B,SAA9B,CACA,OAASC,WAAT,KAA4B,6CAA5B,CACA,OAASC,QAAT,CAAmBC,UAAnB,KAAqC,8BAArC,CACA,MAAO,0BAAP,CACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,IAAnB,KAA8B,iBAA9B,CACA,MAAOC,CAAAA,eAAP,KAA4B,gEAA5B,C,GAEMC,CAAAA,mB,sIACF,6BAAYC,KAAZ,CAAmB,qDACf,uBAAMA,KAAN,EADe,MAkCnBC,WAlCmB,CAkCL,SAACC,GAAD,CAAS,CACnB,MAAKC,QAAL,CAAc,CACVC,cAAc,CAAE,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACC,QAAP,GAAoBP,GAAxB,EAA9B,CADN,CAAd,EAGH,CAtCkB,CAGf,GAAOI,CAAAA,OAAO,CAAG,CAAC,CAAEG,QAAQ,CAAE,cAAZ,CAA4BC,IAAI,CAAE,wBAAlC,CAA4DC,QAAQ,CAAElB,QAAQ,CAACmB,kBAA/E,CAAD,CAAjB,CACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA,GAAIC,CAAAA,mBAAmB,CAAE,EAAzB,CACA,GAAI,MAAKb,KAAL,CAAWc,oBAAX,GAAoCpB,UAAU,CAACqB,OAAnD,CAA2D,CACvDF,mBAAmB,CAACG,IAApB,CACI,CAAE,QAAS,cAAX,CAA2B,QAAS,UAApC,CAAgD,QAAS,OAAzD,CADJ,CAEI,CAAE,QAAS,kBAAX,CAA+B,QAAS,cAAxC,CAAwD,QAAS,OAAjE,CAFJ,EAIH,CALD,IAMI,CACAH,mBAAmB,CAACG,IAApB,CACI,CAAE,QAAS,oBAAX,CAAiC,QAAS,gBAA1C,CAA4D,QAAS,OAArE,CADJ,EAIH,CACD,MAAKX,KAAL,CAAa,CACTC,OAAO,CAAPA,OADS,CAETO,mBAAmB,CAAnBA,mBAFS,CAGTT,cAAc,CAAE,CAAEK,QAAQ,CAAE,cAAZ,CAA4BC,IAAI,CAAE,wBAAlC,CAA4DC,QAAQ,CAAE,EAAtE,CAHP,CAAb,CA5Be,aAiClB,C,sDAMD,iBAAS,iBAEL;AACA;AACA,mBACI,wCACC,KAAKX,KAAL,CAAWc,oBAAX,GAAoCpB,UAAU,CAACqB,OAA/C,cACO,oBAAC,gBAAD,mBAEI,oBAAC,WAAD,EAAa,SAAS,CAAC,eAAvB,eACI,oBAAC,oBAAD,EAAsB,QAAQ,CAAC,MAA/B,eACI,wCADJ,CADJ,CAFJ,CADP,cAcG,oBAAC,MAAD,mBACI,oBAAC,IAAD,EAAM,SAAS,CAAE,KAAKV,KAAL,CAAWD,cAAX,CAA0BK,QAA3C,CAAqD,QAAQ,CAAC,KAA9D,CAAoE,QAAQ,CAAE,KAAKR,WAAnF,EACK,KAAKI,KAAL,CAAWC,OAAX,CAAmBW,GAAnB,CAAuB,SAAAT,MAAM,qBAC1B,oBAAC,OAAD,EAAS,IAAI,CAAEA,MAAM,CAACC,QAAtB,CAAgC,GAAG,CAAE,MAAI,CAACT,KAAL,CAAWkB,IAAX,CAAgBC,aAAhB,CAA8B,CAAEC,EAAE,CAAEZ,MAAM,CAACE,IAAb,CAA9B,CAArC,CAAyF,GAAG,CAAEF,MAAM,CAACC,QAArG,eACI,oBAAC,gBAAD,mBAEI,oBAAC,WAAD,EAAa,SAAS,CAAC,eAAvB,eACI,oBAAC,oBAAD,EAAsB,QAAQ,CAAC,MAA/B,eAqDI,oBAAC,IAAD,EAAM,SAAS,CAAC,UAAhB,eAEI,oBAAC,IAAD,CAAM,MAAN,mBACI,oBAAC,GAAD,mBACQ,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACI,oBAAC,YAAD,mBACI,oBAAC,gBAAD,EAAkB,EAAE,CAAC,YAArB,CAAkC,OAAO,CAAC,QAA1C,EADJ,CADJ,CADR,cAMQ,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACI,oBAAC,YAAD,mBACI,oBAAC,gBAAD,EAAkB,EAAE,CAAC,oBAArB,CAA0C,OAAO,CAAC,iBAAlD,EADJ,CADJ,CANR,CADJ,CAFJ,cAgBQ,oBAAC,IAAD,CAAM,IAAN,MACI,MAAI,CAACT,KAAL,CAAWqB,UAAX,CAAsB,MAAI,CAAChB,KAAL,CAAWD,cAAX,CAA0BO,QAAhD,EAA0DM,GAA1D,CAA8D,SAACK,IAAD,CAAOC,KAAP,qBAE9D,oBAAC,GAAD,mBACI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eAEA,oBAAC,YAAD,UAAgBD,IAAI,CAACE,KAArB,KAFA,CADJ,cAMI,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACI,oBAAC,eAAD,EACQ,IAAI,CAAEF,IAAI,CAACE,KACX;AAFR,CAGQ,OAAO,CAAEF,IAAI,CAACG,cAAL,EAAuB,EAHxC,CAIQ,QAAQ,CAAE,oBAJlB,CAKQ,WAAW,CAAE,qBALrB,CAMQ,KAAK,CAAE,MAAI,CAACzB,KAAL,CAAW0B,cAAX,EAA8B,MAAI,CAAC1B,KAAL,CAAW0B,cAAX,CAA0B,MAAI,CAACrB,KAAL,CAAWD,cAAX,CAA0BO,QAApD,CAA9B,CAA8F,MAAI,CAACX,KAAL,CAAW0B,cAAX,CAA0B,MAAI,CAACrB,KAAL,CAAWD,cAAX,CAA0BO,QAApD,EAA8DW,IAAI,CAACE,KAAnE,GAA8E,EAA5K,CAAgL,EAN/L,CAOQ,WAAW,CAAE,KAPrB,CAQQ,WAAW,CAAE,IARrB,CASQ,aAAa,CAAE,KATvB,CAUQ,QAAQ,CAAE,KAVlB,CAWQ,iBAAiB,CAAE,KAX3B,CAYQ,gBAAgB,CAAE,IAZ1B,CAaQ,QAAQ,CAAE,kBAACG,KAAD,QAAW,CAAA,MAAI,CAAC3B,KAAL,CAAW4B,aAAX,CAAyBD,KAAzB,CAAgC,MAAI,CAACtB,KAAL,CAAWD,cAAX,CAA0BO,QAA1D,CAAoEW,IAApE,CAAX,EAblB,EADJ,CANJ,CAF8D,EAA9D,CADJ,CAhBR,CArDJ,CADJ,CAFJ,CADJ,CAD0B,EAA7B,CADL,CADJ,CAfJ,CADJ,CAyIH,C,iCArL6BtC,KAAK,CAAC6C,S,EAuLxC,cAAe5C,CAAAA,UAAU,CAACc,mBAAD,CAAzB","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl,FormattedMessage } from 'react-intl'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport {  ReadOnlyText } from '../../components/App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Col, Row ,Card} from 'react-bootstrap';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\n\r\nclass ConfigureEditFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const  screens = [{ eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION }];\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\r\n        //     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\r\n        // }\r\n\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\r\n        //     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\r\n        // }\r\n\r\n        // screens.push({ eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\r\n        //             { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL });\r\n\r\n        let extractedColumnList =[];\r\n        if (this.props.selectedTemplateType === SampleType.Masters){\r\n            extractedColumnList.push(              \r\n                { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n            );\r\n        }\r\n        else{\r\n            extractedColumnList.push(\r\n                { \"title\": \"IDS_EDITABLESTATUS\", \"field\": \"editablestatus\", \"width\": \"600px\" },\r\n               \r\n            );\r\n        }\r\n        this.state = {\r\n            screens,\r\n            extractedColumnList,\r\n            selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: 43 }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    render() {\r\n      \r\n        //console.log(\"props:\",this.props)\r\n        //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\r\n        return (\r\n            <>\r\n            {this.props.selectedTemplateType === SampleType.Masters ?\r\n                    <PerfectScrollbar>\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n                                    \r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip /> */}\r\n                    </PerfectScrollbar>        \r\n\r\n                :\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            {/* <>\r\n                                            <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.formcode]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                        <GridColumn\r\n                                                            field={column.field}\r\n                                                            title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                            headerClassName=\"text-center\"\r\n                                                            cell={(row) => (\r\n                                                                <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                    {/* <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                        onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode,this.props.operation)}\r\n                                                                        checked={row[\"dataItem\"][column.field] || false}\r\n                                                                        name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                 */}\r\n                                                                    {/* <FormMultiSelect\r\n                                                                            name={row[\"dataItem\"][\"label\"]}\r\n                                                                            options={row[\"dataItem\"][column.field] || []}\r\n                                                                            optionId={\"ntransactionstatus\"}\r\n                                                                            optionValue={\"stransdisplaystatus\"}\r\n                                                                            value={this.props.selectedRecord  && this.props.selectedRecord[this.state.selectedScreen.formcode] ? this.props.selectedRecord[this.state.selectedScreen.formcode][row[\"dataItem\"][\"label\"]]  || []: []}\r\n                                                                            isMandatory={false}\r\n                                                                            isClearable={true}\r\n                                                                            disableSearch={false}\r\n                                                                            disabled={false}\r\n                                                                            closeMenuOnSelect={false}\r\n                                                                            alphabeticalSort={true}\r\n                                                                            onChange={(event) => this.props.onComboChange(event, this.state.selectedScreen.formcode, row[\"dataItem\"])}\r\n                                                                    />\r\n                                                                </td>)}\r\n                                                        />\r\n                                                    )}\r\n\r\n                                            </Grid> */}\r\n                                            {/* </>  */}\r\n                                            <Card className=\"border-0\">\r\n                                               \r\n                                                <Card.Header>\r\n                                                    <Row>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_FIELDS\" message=\"Fields\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_EDITABLESTATUS\" message=\"Editable Status\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                    </Row>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body>\r\n                                                    {   this.props.dataResult[this.state.selectedScreen.formcode].map((item, index)=>\r\n                                                                                           \r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n                                                            {/* <FormGroup> */}\r\n                                                            <ReadOnlyText> {item.label} </ReadOnlyText> \r\n                                                            \r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <FormMultiSelect\r\n                                                                        name={item.label}\r\n                                                                        //label={this.props.intl.formatMessage({ id: item.label + \"_\" + index})}\r\n                                                                        options={item.editablestatus || []}\r\n                                                                        optionId={\"ntransactionstatus\"}\r\n                                                                        optionValue={\"stransdisplaystatus\"}\r\n                                                                        value={this.props.selectedRecord  && this.props.selectedRecord[this.state.selectedScreen.formcode] ? this.props.selectedRecord[this.state.selectedScreen.formcode][item.label]  || []: []}\r\n                                                                        isMandatory={false}\r\n                                                                        isClearable={true}\r\n                                                                        disableSearch={false}\r\n                                                                        disabled={false}\r\n                                                                        closeMenuOnSelect={false}\r\n                                                                        alphabeticalSort={true}\r\n                                                                        onChange={(event) => this.props.onComboChange(event, this.state.selectedScreen.formcode, item)}\r\n                                                                />\r\n                                                                {/* </FormGroup> */}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                            )\r\n                                                        }\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                              \r\n                                            \r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n                            </TabPane>\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureEditFields)"]},"metadata":{},"sourceType":"module"}