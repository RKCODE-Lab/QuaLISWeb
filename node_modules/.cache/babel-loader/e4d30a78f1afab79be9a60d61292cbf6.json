{"ast":null,"code":"import React from 'react';\nimport rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit, sortDataByParent, sortDataForDate } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { //RegistrationSubType, RegistrationType, \nSampleType, checkBoxOperation, orderType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'; //import { getTestChildTabDetail } from './index.js'\n\nimport { constructOptionList } from '../components/CommonScript';\nimport { Operators, TextFilter, NumericFilter, // BooleanFilter,\nDateFilter // EnumFilter,\n//  EnumFilterProps,\n} from \"@progress/kendo-react-data-tools\";\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport { leftArrowClass } from '@progress/kendo-react-layout';\nimport { openModal } from './ApprovalConfigAction';\nimport ModalShow from '../components/ModalShow';\nexport function addStbTimePoint(masterData, userinfo, columnList, selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData, selectedRecord, conditionalTestPackage, specBasedTestPackage, LoginProps) {\n  if (isServiceRequired) {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray[0] = timeZoneService;\n      const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        parentcolumnlist: columnList ? columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true) : [],\n        childcolumnlist: childColumnList ? childColumnList : [],\n        userinfo\n      });\n      urlArray[1] = actualService;\n\n      if (specBasedComponent) {\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent //   conditionalTestPackage:true\n\n        });\n        urlArray[2] = ComponentTestBySpec;\n      } else {\n        Component = Component ? Component : [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          nneedsubsample: Map[\"nneedsubsample\"],\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent,\n          conditionalTestPackage: true,\n          specBasedTestPackage: specBasedTestPackage\n        });\n        urlArray[2] = TestGet;\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          // slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent //   specBasedTestPackage: specBasedTestPackage,\n          //  conditionalTestPackage: conditionalTestPackage\n\n        });\n        urlArray[5] = TestPackageGet;\n        const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          // slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent //   specBasedTestPackage: specBasedTestPackage,\n          //  conditionalTestPackage: conditionalTestPackage\n\n        });\n        urlArray[6] = TestSectionGet;\n      }\n\n      const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo\n      });\n      urlArray[3] = currentDate;\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo\n      });\n      urlArray[4] = dateService;\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userinfo.stimezoneid,\n          value: userinfo.ntimezonecode\n        };\n        const newcomboData = parentChildComboLoad(columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n        let TestCombined = [];\n        let lstComponent = [];\n        let PackageData = [];\n        let TestSectionData = [];\n        const selectedRecord1 = newcomboData.selectedRecord;\n\n        if (specBasedComponent) {\n          const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\"); // if (lstComponent.length > 0) {\n          //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\n          //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n          //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n          //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\n          // }\n          //Added by Dhanushya for jira ETICA-22\n\n          if (lstComponent.length > 0) {\n            if (Map[\"orderTypeCombCode\"] && Map[\"orderTypeCombCode\"] === orderType.EXTERNAL) {\n              selectedRecord1['ncomponentcode'] = { ...lstComponent[0]\n              };\n              selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n              selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n              selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n            } else {\n              selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'] && selectedRecord1['ncomponentcode'].item && selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n              selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n            }\n          }\n        } else {\n          const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n          PackageData = PackageDataMap.get(\"OptionList\");\n          const testSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n          TestSectionData = testSectionDataMap.get(\"OptionList\");\n          TestCombined = response[2].data;\n        }\n\n        const comboData1 = newcomboData.comboData;\n        SubSamplewithoutCombocomponent.map(componentrow => {\n          if (componentrow.inputtype === \"date\") {\n            if (componentrow.loadcurrentdate) {\n              selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n              selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n            } else if (componentrow.nperiodcode) {\n              selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n              if (componentrow.loadselecteddate) {\n                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n              } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n              //    new Date(response[2].data[componentrow.label]):null;\n\n            } else {\n              selectedRecord1[componentrow.label + \"value\"] = new Date();\n            }\n\n            if (componentrow.hidebeforedate) {\n              selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n\n            if (componentrow.hideafterdate) {\n              selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n            }\n          } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n            if (componentrow['radiodefaultvalue']) {\n              if (componentrow.inputtype === \"checkbox\") {\n                let val = '';\n                componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                  val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n                });\n                selectedRecord1[componentrow.label] = val;\n              } else if (componentrow.inputtype === \"predefineddropdown\") {\n                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n              } else {\n                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n              }\n            } else {\n              if (componentrow.inputtype === \"radio\") {\n                selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n              }\n            }\n          }\n        });\n        const inputParam = {\n          ChildscreenName: intl.formatMessage({\n            id: \"IDS_TIMEPOINT\"\n          }),\n          screenName: intl.formatMessage({\n            id: \"IDS_TIMEPOINT\"\n          }),\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          openPortal: true,\n          openModal: false,\n          operation: \"create\",\n          loadSubSample: true,\n          selectComponent: selectedRecord1,\n          saveContinueData: { ...selectedRecord1\n          },\n          SubSamplecomboData: comboData1,\n          SubSamplecomboComponents,\n          SubSamplewithoutCombocomponent,\n          TestCombined,\n          parentSubSampleColumnList: columnList,\n          childSubSampleColumnList: childColumnList,\n          timeZoneList,\n          defaultTimeZone,\n          masterData,\n          selectPackage: [],\n          TestPackage: PackageData,\n          TestSection: TestSectionData,\n          selectSection: [],\n          AllTest: TestCombined,\n          AllSection: TestSectionData,\n          userinfo\n        }; //if (specBasedComponent) {\n        //Added by Dhanushya for jira ETICA-22\n\n        if (specBasedComponent && selectedRecord1['ncomponentcode'] !== undefined) {\n          dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...inputParam\n            }\n          });\n        }\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    };\n  } else {\n    const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData, selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n    return dispatch => {\n      if (!specBasedComponent) {\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          // nneedsubsample: Map[\"nneedsubsample\"],\n          ...Map,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent,\n          conditionalTestPackage: true,\n          specBasedTestPackage: specBasedTestPackage\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n          //  nspecsampletypecode: selectedobject.nspecsampletypecode,\n          nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent,\n          specBasedTestPackage: specBasedTestPackage,\n          conditionalTestPackage: conditionalTestPackage\n        });\n        urlArray[3] = TestPackageGet;\n        const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\n          //  nspecsampletypecode: selectedobject.nspecsampletypecode,\n          nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          specBasedComponent: specBasedComponent,\n          specBasedTestPackage: specBasedTestPackage,\n          conditionalTestPackage: conditionalTestPackage\n        });\n        urlArray[4] = TestSectionGet;\n        Axios.all(urlArray).then(response => {\n          let TestCombined = [];\n          let PackageData = [];\n          let TestSectionData = []; //  if (!specBasedTestPackage) {\n\n          TestCombined = response[0].data; // } \n          // else {\n\n          const PackageDataMap = constructOptionList(response[3].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n          PackageData = PackageDataMap.get(\"OptionList\");\n          const TestSectionDataMap = constructOptionList(response[4].data.TestSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n          TestSectionData = TestSectionDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n          //    dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n          //} \n          // }\n\n          const selectedRecord1 = newcomboData.selectedRecord;\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n              if (componentrow['radiodefaultvalue']) {\n                if (componentrow.inputtype === \"checkbox\") {\n                  let val = '';\n                  componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                    val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n                  });\n                  selectedRecord1[componentrow.label] = val;\n                } else if (componentrow.inputtype === \"predefineddropdown\") {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n                } else {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n                }\n              } else {\n                if (componentrow.inputtype === \"radio\") {\n                  selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n                }\n              }\n            }\n          }); // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\n          //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\n          //     let containerType = SubSamplecomboData['ContainerType'] || []\n          //     let containerList = []\n          //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\n          //     containerType.map(x => {\n          //         if (x.item.jsondata.nportalordercode === nportalordercode) {\n          //             containerList.push(x)\n          //         }\n          //     })\n          //     SubSamplecomboData['Container Type'] = containerList\n          // }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: intl.formatMessage({\n                id: \"IDS_TIMEPOINT\"\n              }),\n              screenName: intl.formatMessage({\n                id: \"IDS_TIMEPOINT\"\n              }),\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent: [],\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: selectedRecord1,\n              saveContinueData: { ...selectedRecord1\n              },\n              TestCombined: TestCombined,\n              TestPackage: PackageData,\n              TestSection: TestSectionData,\n              selectSection: []\n            }\n          });\n        });\n      } else {\n        const urlArray = [];\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[0] = ComponentTestBySpec;\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo\n        });\n        urlArray[1] = currentDate;\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo\n        });\n        urlArray[2] = dateService;\n        Axios.all(urlArray).then(response => {\n          const selectedRecord1 = newcomboData.selectedRecord; // const lstComponent =  response.data.lstComponent\n\n          let lstComponent = response[0].data.lstComponent; //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\n\n          const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n\n          if (lstComponent.length > 0) {\n            // selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\n            // selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n            // selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n            // selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\n            //Added by Dhanushya for jira ETICA-22\n            if (Map[\"orderTypeCombCode\"] && Map[\"orderTypeCombCode\"] === orderType.EXTERNAL) {\n              selectedRecord1['ncomponentcode'] = { ...lstComponent[0]\n              };\n              selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n              selectedRecord1[\"nspecsampletypecode\"] = lstComponent[0].item.nspecsampletypecode;\n              selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n            } else {\n              selectedRecord1[\"nspecsampletypecode\"] = lstComponent[0].item.nspecsampletypecode;\n              selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample;\n            }\n          }\n\n          SubSamplewithoutCombocomponent.map(componentrow => {\n            if (componentrow.inputtype === \"date\") {\n              if (componentrow.loadcurrentdate) {\n                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\n                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n              } else if (componentrow.nperiodcode) {\n                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n                if (componentrow.loadselecteddate) {\n                  selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n                } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n                //    new Date(response[2].data[componentrow.label]):null;\n\n              } else {\n                selectedRecord1[componentrow.label + \"value\"] = new Date();\n              }\n\n              if (componentrow.hidebeforedate) {\n                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n\n              if (componentrow.hideafterdate) {\n                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n              }\n            } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n              if (componentrow['radiodefaultvalue']) {\n                if (componentrow.inputtype === \"checkbox\") {\n                  let val = '';\n                  componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                    val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n                  });\n                  selectedRecord1[componentrow.label] = val;\n                } else if (componentrow.inputtype === \"predefineddropdown\") {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n                } else {\n                  selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n                }\n              } else {\n                if (componentrow.inputtype === \"radio\") {\n                  selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n                }\n              }\n            }\n          });\n          const inputParam = {\n            ChildscreenName: intl.formatMessage({\n              id: \"IDS_TIMEPOINT\"\n            }),\n            screenName: intl.formatMessage({\n              id: \"IDS_TIMEPOINT\"\n            }),\n            showSaveContinue: true,\n            openChildModal: false,\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            lstComponent,\n            openPortal: true,\n            openModal: false,\n            operation: \"create\",\n            loadSubSample: true,\n            selectComponent: selectedRecord1,\n            saveContinueData: { ...selectedRecord1\n            },\n            TestCombined: [],\n            selectedStbTimePointTestData: [],\n            selectPackage: [],\n            selectSection: []\n          };\n\n          if (specBasedComponent) {\n            dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...inputParam\n              }\n            });\n          }\n        });\n      }\n    };\n  }\n}\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    Component = Component ? Component : [];\n    const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage,\n      nneedsubsample: selectedobject.nneedsubsample\n    });\n    urlArray[0] = TestGet;\n    const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage\n    });\n    urlArray[1] = TestPackageGet;\n    const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage\n    });\n    urlArray[2] = TestSectionGet;\n    Axios.all(urlArray).then(response => {\n      let PackageData = [];\n      let TestData = [];\n      let TestSectionData = []; // if (specBasedTestPackage) {\n\n      const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      PackageData = PackageDataMap.get(\"OptionList\");\n      const testSectionDataMap = constructOptionList(response[2].data.TestSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      TestSectionData = testSectionDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n      //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n      // } \n      //   }\n      //    else {\n\n      TestData = response[0].data; //  }\n      //let Test = [];\n      // Test[selectedobject.slno] = TestData;\n\n      const Map = {};\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectComponent\"] = selectedobject;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...inputParam,\n          TestCombined: TestData,\n          AllTest: TestData,\n          TestPackage: PackageData,\n          ...Map,\n          loading: false,\n          selectedStbTimePointTestData: [],\n          selectPackage: [],\n          TestSection: TestSectionData,\n          selectSection: [],\n          AllSection: TestSectionData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertStbStudyPlan(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/stabilitystudyplan/createRegistrationWithFile\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/stabilitystudyplan/createStabilityStudyPlan\", inputParam.inputData);\n    }\n\n    return requestUrl //  rsapi.post(\"/registration/createRegistration\", inputParam.formData)\n    .then(response => {\n      if (response.data.rtn === \"Success\") {\n        // if (response.data[\"isPortalData\"] && response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\n        //     dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\n        // }\n        let StabilityStudyPlanGet = updatedObjectWithNewElements(response.data[\"selectedStabilityStudyPlan\"], masterData.StabilityStudyPlanGet, 'Sample');\n        let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\n        let StbTimePointGet = response.data[\"StbTimePointGet\"];\n        let StbTimePointTestGet = response.data[\"StbTimePointTestGet\"];\n        let selectedStbTimePoint = StbTimePointGet;\n        StbTimePointTestGet = sortData(StbTimePointTestGet, \"nstbstudyplancode\", \"desc\");\n        let selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? [StbTimePointTestGet[0]] : [];\n        let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\n\n        if (inputParam.inputData.nneedsubsample) {\n          StbTimePointGet = sortData(response.data[\"StbTimePointGet\"], 'nstbstudyplancode', 'desc');\n          selectedStbTimePoint = StbTimePointGet.length > 0 ? [StbTimePointGet[0]] : [];\n          StbTimePointTestGet = StbTimePointTestGet.filter(x => x.nstbtimepointcode === selectedStbTimePoint[0].nstbtimepointcode);\n          selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? response.data[\"selectedStbTimePointTest\"] : [];\n        }\n\n        if (inputParam.multipleselectionFlag) {\n          selectedStabilityStudyPlan = updatedObjectWithNewElements(response.data[\"selectedStabilityStudyPlan\"], masterData.selectedStabilityStudyPlan);\n          updatedObjectWithNewElements(response.data[\"selectedStbTimePoint\"], masterData.StbTimePointGet);\n          updatedObjectWithNewElements(response.data[\"selectedStbTimePointTest\"], masterData.StbTimePointTestGet);\n          StbTimePointGet = masterData.StbTimePointGet;\n          StbTimePointTestGet = masterData.StbTimePointTestGet;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedStabilityStudyPlan,\n          selectedStbTimePoint,\n          selectedStbTimePointTest,\n          StbTimePointGet,\n          StbTimePointTestGet,\n          StabilityStudyPlanGet\n        };\n\n        if (masterData[\"kendoFilterList\"] !== undefined) {\n          masterData[\"kendoFilterList\"] = undefined;\n        }\n\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined,\n          openPortal: false,\n          selectedSpec: {},\n          selectComponent: {},\n          selectedStbTimePointTest: {},\n          selectedComponent: {},\n          Component: [],\n          selectedRecord: {},\n          selectedStbTimePointTest: [],\n          Test: [],\n          selectedComponent: {},\n          subSampleDataGridList: [],\n          preregConfirmMessage: undefined,\n          regSampleExisted,\n          loadImportFileData: false,\n          loadImportSampleCountData: false,\n          skip: 0,\n          subsampleskip: 0,\n          testskip: 0,\n          isDynamicViewSlideOut: false // filterColumnActive:false,\n\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        inputParam.postParamList[1]['clearFilter'] = 'yes';\n        inputParam.postParamList[2]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            preregConfirmMessage: undefined\n          }\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            preregConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              preregConfirmMessage: error.response.data.rtn,\n              preregConfirmParam: {\n                inputParam,\n                masterData\n              },\n              loading: false,\n              showSample: undefined\n            }\n          });\n        } else {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              preregConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport function updatedObjectWithNewElements(oldList, newList, name) {\n  let newlistItem = newList;\n\n  if (name === 'Sample') {\n    newlistItem.map((item, index) => {\n      if (oldList[0].nstbstudyplancode === item.nstbstudyplancode) {\n        newlistItem.splice(index, 1); // [newFirstElement].concat(array)\n      }\n    });\n    newlistItem.unshift(oldList[0]);\n    oldList = [...newlistItem];\n  } else if (name === 'Test') {} else {\n    oldList = [...newlistItem, ...oldList];\n  }\n\n  return oldList;\n}\nexport function insertExportStbStudyPlan(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/importStabilityStudyPlan\", inputParam.formData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        let registrationList = [...response.data[\"StabilityStudyPlanGet\"], ...masterData.StabilityStudyPlanGet];\n        let StabilityStudyPlanGet = registrationList;\n        let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\n        let StbTimePointGet = response.data[\"StbTimePointGet\"];\n        let StbTimePointTestGet = response.data[\"StbTimePointTestGet\"];\n        let selectedStbTimePoint = StbTimePointGet;\n        StbTimePointTestGet = sortData(StbTimePointTestGet, \"nstbstudyplancode\", \"desc\");\n        let selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? [StbTimePointTestGet[0]] : [];\n        let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\n\n        if (inputParam.inputData.nneedsubsample) {\n          StbTimePointGet = sortData(response.data[\"StbTimePointGet\"], 'nstbstudyplancode', 'desc');\n          selectedStbTimePoint = StbTimePointGet.length > 0 ? [StbTimePointGet[0]] : [];\n          StbTimePointTestGet = StbTimePointTestGet.filter(x => x.nstbtimepointcode === selectedStbTimePoint[0].nstbtimepointcode);\n          selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? response.data[\"selectedStbTimePointTest\"] : [];\n        }\n\n        if (inputParam.multipleselectionFlag) {\n          selectedStabilityStudyPlan = updatedObjectWithNewElements(response.data[\"selectedStabilityStudyPlan\"], masterData.selectedStabilityStudyPlan);\n          updatedObjectWithNewElements(response.data[\"selectedStbTimePoint\"], masterData.StbTimePointGet);\n          updatedObjectWithNewElements(response.data[\"selectedStbTimePointTest\"], masterData.StbTimePointTestGet);\n          StbTimePointGet = masterData.StbTimePointGet;\n          StbTimePointTestGet = masterData.StbTimePointTestGet;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedStabilityStudyPlan,\n          selectedStbTimePoint,\n          selectedStbTimePointTest,\n          StbTimePointGet,\n          StbTimePointTestGet,\n          StabilityStudyPlanGet\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined,\n          openPortal: false,\n          selectedSpec: {},\n          selectComponent: {},\n          selectedStbTimePointTest: {},\n          selectedComponent: {},\n          Component: [],\n          selectedRecord: {},\n          selectedStbTimePointTest: [],\n          Test: [],\n          selectedComponent: {},\n          subSampleDataGridList: [],\n          preregConfirmMessage: undefined,\n          regSampleExisted,\n          loadImportFileData: false,\n          loadImportSampleCountData: false\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        inputParam.postParamList[1]['clearFilter'] = 'yes';\n        inputParam.postParamList[2]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        toast.info(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const addMoreTests = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedStabilityStudyPlan && inputParam.selectedStabilityStudyPlan.length > 0) {\n      if (inputParam.selectedStbTimePoint && inputParam.selectedStbTimePoint.length > 0) {\n        value = inputParam.selectedStbTimePoint.some(obj => obj.nspecsampletypecode !== inputParam.selectedStbTimePoint[0].nspecsampletypecode);\n\n        if (value) {\n          return toast.info(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n          }));\n        }\n\n        const selectedStabilityStudyPlan = inputParam.selectedStabilityStudyPlan;\n        const findTransactionStatus = [...new Set(selectedStabilityStudyPlan.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n            if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\n              const findApprovalVersion = [...new Set(selectedStabilityStudyPlan.map(item => item.napprovalversioncode))];\n\n              if (findApprovalVersion.length === 1) {\n                const findSampleSpec = [...new Set(selectedStabilityStudyPlan.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                  {\n                    inputParam[\"snspecsampletypecode\"] = inputParam.selectedStbTimePoint && [...new Set(inputParam.selectedStbTimePoint.map(x => x.nspecsampletypecode))].join(\",\");\n                    dispatch(initRequest(true));\n                    const urlArray = [];\n                    const TestGet = rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                    });\n                    urlArray[0] = TestGet;\n                    const TestPackageGet = rsapi.post(\"/registration/getMoreTestPackage\", { ...inputParam\n                    });\n                    urlArray[1] = TestPackageGet;\n                    const TestSectionGet = rsapi.post(\"/registration/getMoreTestSection\", { ...inputParam\n                    });\n                    urlArray[2] = TestSectionGet;\n                    Axios.all(urlArray).then(response => {\n                      let PackageData = [];\n                      let TestSectionData = [];\n                      const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n                      PackageData = PackageDataMap.get(\"OptionList\");\n                      const TestSectionDataMap = constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n                      TestSectionData = TestSectionDataMap.get(\"OptionList\");\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          availableTest: response[0].data,\n                          TestCombined: response[0].data,\n                          AllTest: response[0].data,\n                          TestPackage: PackageData,\n                          loadChildTest: true,\n                          loading: false,\n                          ncontrolCode,\n                          screenName: \"IDS_TEST\",\n                          operation: \"create\",\n                          openModal: true,\n                          parentPopUpSize: \"lg\",\n                          selectedRecord: {},\n                          showSample: undefined,\n                          loadPrinter: false,\n                          TestSection: TestSectionData,\n                          AllSection: TestSectionData\n                        }\n                      });\n                    }).catch(error => {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          loading: false\n                        }\n                      });\n\n                      if (error.response.status === 500) {\n                        toast.error(error.message);\n                      } else {\n                        toast.info(this.props.formatMessage({\n                          id: error.response.data\n                        }));\n                      }\n                    });\n                  } else {\n                  toast.info(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                  }));\n                }\n              } else {\n                toast.info(intl.formatMessage({\n                  id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                }));\n              }\n            } else {\n              toast.info(intl.formatMessage({\n                id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\"\n              }));\n            }\n          } else {\n            toast.info(intl.formatMessage({\n              id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n            }));\n          }\n        } else {\n          toast.info(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SELECTSUBSAMPLE\"\n        }));\n      }\n    } else {\n      toast.info(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n};\nexport function addSubTimePoint(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\n  return function (dispatch) {\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: regcolumnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true),\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n\n    if (specBasedComponent) {\n      const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n        specBasedComponent: specBasedComponent,\n        userinfo\n      });\n      urlArray[2] = ComponentTestBySpec;\n    } else {\n      const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage,\n        conditionalTestPackage: true,\n        nneedsubsample: Map[\"nneedsubsample\"]\n      });\n      urlArray[2] = TestGet;\n      const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage\n      });\n      urlArray[5] = TestPackageGet;\n      const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage\n      });\n      urlArray[6] = TestSectionGet;\n    }\n\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    urlArray[3] = currentDate;\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    urlArray[4] = dateService;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n      let TestCombined = [];\n      let lstComponent = [];\n      let PackageData = [];\n      let TestSectionData = [];\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (specBasedComponent) {\n        const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n        lstComponent = lstComponentMap.get(\"OptionList\"); //Commented by Dhanushya for jira ETICA-22\n        // if (lstComponent.length > 0) {\n        //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\n        //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n        //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n        //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\n        // }\n      } else {\n        //if (specBasedTestPackage) {\n        const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n        PackageData = PackageDataMap.get(\"OptionList\");\n        const TestSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n        TestSectionData = TestSectionDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n        //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n        // } \n        // }\n        // else {\n\n        TestCombined = response[2].data; // }\n      }\n\n      const comboData1 = newcomboData.comboData;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      });\n      const inputParam = {\n        screenName: intl.formatMessage({\n          id: \"IDS_TIMEPOINT\"\n        }),\n        showSaveContinue: false,\n        parentPopUpSize: \"lg\",\n        loading: false,\n        lstComponent,\n        openModal: true,\n        loadPrinter: false,\n        operation: \"create\",\n        loadRegSubSample: true,\n        selectedRecord: selectedRecord1,\n        regSubSamplecomboData: comboData1,\n        regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent,\n        TestCombined,\n        regparentSubSampleColumnList: regcolumnList,\n        regchildSubSampleColumnList: regchildColumnList,\n        ncontrolCode: ncontrolcode,\n        timeZoneList,\n        defaultTimeZone,\n        masterData,\n        specBasedComponent,\n        specBasedTestPackage,\n        TestPackage: PackageData,\n        //ALPD-624\n        testskip: 0,\n        subsampleskip: 0,\n        TestSection: TestSectionData,\n        AllTest: TestCombined,\n        AllSection: TestSectionData\n      }; // if (specBasedComponent) {\n      //Added by Dhanushya for jira ETICA-22\n\n      if (specBasedComponent && selectedRecord1['ncomponentcode'] !== undefined) {\n        dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam\n          }\n        });\n      }\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveTimePoint(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/stabilitystudyplan/createSubSampleWithFile\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/stabilitystudyplan/createTimePoint\", inputParam.inputData);\n    }\n\n    return requestUrl //  rsapi.post(\"/registration/createSubSample\", inputParam.inputData)\n    .then(response => {\n      // let StabilityStudyPlanGet = updatedObjectWithNewElement(response.data[\"selectedStabilityStudyPlan\"], inputParam.inputData.masterData.StabilityStudyPlanGet);\n      // let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\n      let StbTimePointGet = updatedObjectWithNewElement(inputParam.inputData.masterData.StbTimePointGet, response.data[\"selectedStbTimePoint\"]);\n      let StbTimePointTestGet = response.data[\"StbTimePointTestGet\"];\n      let selectedStbTimePoint = response.data[\"selectedStbTimePoint\"]; // StbTimePointGet.length > 0 ? [StbTimePointGet[0]] : [];\n\n      StbTimePointTestGet = sortData(StbTimePointTestGet, \"nstbstudyplancode\", \"desc\");\n      let selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? [StbTimePointTestGet[0]] : [];\n      let StbTimePointTestParameter = response.data[\"StbTimePointTestParameter\"];\n      StbTimePointTestParameter = StbTimePointTestParameter ? getSameRecordFromTwoArrays(StbTimePointTestParameter, selectedStbTimePointTest, 'nstbtimepointtestcode') : StbTimePointTestParameter;\n      let StabilityStudyPlanGet = replaceUpdatedObject(response.data[\"selectedStabilityStudyPlan\"], inputParam.inputData.masterData.StabilityStudyPlanGet, 'nstbstudyplancode');\n      let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\n      let masterData = { ...inputParam.inputData.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedStbTimePoint,\n        selectedStbTimePointTest,\n        StbTimePointGet,\n        StbTimePointTestGet,\n        StbTimePointTestParameter,\n        selectedStabilityStudyPlan,\n        StabilityStudyPlanGet\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        loading: false,\n        showSample: undefined,\n        selectedRecord: {},\n        loadRegSubSample: false,\n        showConfirmAlert: false,\n        subSampleConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'yes';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); //    dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         openModal: false,\n      //         loadEsign: false,\n      //         loading: false,\n      //         showSample: undefined,\n      //         selectedRecord: {},\n      //         loadRegSubSample:false\n      //     }\n      // });\n    }).catch(error => {\n      // console.log(error);\n      // toast.error(error.message);\n      // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            subSampleConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              subSampleConfirmMessage: error.response.data.rtn,\n              subSampleConfirmParam: {\n                inputParam\n              },\n              loading: false\n            }\n          });\n        } else if (error.response.data.rtn) {\n          toast.warn(intl.formatMessage({\n            id: error.response.data.rtn\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n        } else {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              subSampleConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport const createRegTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let StbTimePointTestGet = updatedObjectWithNewElements(masterData[\"StbTimePointTestGet\"], response.data[\"StbTimePointTestGet\"]);\n      masterData = { ...masterData,\n        StbTimePointTestGet: sortData(StbTimePointTestGet, \"descending\", \"nstbtimepointtestcode\"),\n        StbTimePointGet: sortData(masterData[\"StbTimePointGet\"], \"descending\", \"nstbtimepointcode\"),\n        selectedStbTimePointTest: response.data[\"selectedStbTimePointTest\"],\n        //  selectedStbTimePoint: response.data[\"StbTimePointGet\"],\n        selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\n        RegistrationParameter: response.data.RegistrationParameter,\n        StabilityStudyPlanGet: replaceUpdatedObject(response.data.selectedStabilityStudyPlan, masterData.StabilityStudyPlanGet, 'nstbstudyplancode')\n      };\n      let respObject = {\n        masterData,\n        [modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {},\n        showConfirmAlert: false,\n        createTestConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'no';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            createTestConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              createTestConfirmMessage: error.response.data.rtn,\n              createTestConfirmParam: {\n                inputParam,\n                masterData,\n                modalName\n              },\n              //[modalName]: false,\n              loading: false,\n              loadChildTest: true,\n              showSample: undefined //openModal: false,\n              //selectedRecord: {}\n\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              [modalName]: false,\n              loading: false,\n              loadChildTest: false,\n              showSample: undefined,\n              openModal: false,\n              selectedRecord: {},\n              createTestConfirmMessage: undefined\n            }\n          });\n          toast.info(error.response.data.rtn);\n        }\n      }\n    });\n  };\n};\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"stabilitystudyplan/getStabilityStudyPlanByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined,\n          regSampleExisted: false,\n          activeTabIndex: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getStabilityStudyPlanByFilterSubmit(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"stabilitystudyplan/getStabilityStudyPlanByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined,\n          regSampleExisted: false,\n          activeTabIndex: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getTimePointDetail(inputData, isServiceRequired, isParentValue) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode || -1,\n      nregsubtypecode: inputData.nregsubtypecode || -1,\n      nstbstudyplancode: inputData.nstbstudyplancode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode || -1,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      selectedPreregno: inputData.selectedStabilityStudyPlan && inputData.selectedStabilityStudyPlan.length > 0 ? inputData.selectedStabilityStudyPlan.map(item => item.nstbstudyplancode).join(\",\") : null,\n      selectedTransactionsamplecode: inputData.selectedStabilityStudyPlan && inputData.selectedStabilityStudyPlan.length > 1 && inputData.masterData.selectedStbTimePoint ? inputData.masterData.selectedStbTimePoint.map(item => item.nstbtimepointcode).join(\",\") : null\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"stabilitystudyplan/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data, \"descending\", \"nstbstudyplancode\");\n        response.data['StbTimePointGet'] = sortDataByParent(response.data['StbTimePointGet'], inputData.sample, \"nstbstudyplancode\");\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedStbTimePointTest || [];\n\n        if (subSample) {\n          let oldselectedStbTimePoint = inputData.masterData.selectedStbTimePoint;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbstudyplancode\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan,\n            selectedPreregno: inputData.nstbstudyplancode,\n            selectedStbTimePoint: inputData.masterData.StbTimePointGet.length > 0 ? [inputData.masterData.StbTimePointGet[0]] : []\n          };\n          masterData = { ...masterData,\n            selectedStbTimePointTest: masterData.StbTimePointTestGet.length > 0 ? [masterData.StbTimePointTestGet[0]] : []\n          };\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          testskip = 0;\n          subsampleskip = 0;\n          skipInfo = {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          };\n        }\n\n        if (inputData.masterData.selectedStabilityStudyPlan && inputData.sampleGridDataState && inputData.masterData.selectedStabilityStudyPlan.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        } // let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } // Start of ALPD-4130 on Save Additional Filter - ATE-241\n\n\n        let multifilterInfo = {};\n\n        if (inputData.multiFilterLoad !== undefined) {\n          if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n            inputData.searchSampleRef.current.value = \"\";\n          }\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n          }\n\n          multifilterInfo = {\n            multiFilterLoad: inputData.multiFilterLoad,\n            openModal: inputData.openModal,\n            searchSampleRef: inputData.searchSampleRef,\n            searchSubSampleRef: inputData.searchSubSampleRef,\n            searchTestRef: inputData.searchTestRef,\n            testskip: inputData.testskip,\n            subsampleskip: inputData.subsampleskip,\n            skip: inputData.skip // filterColumnActive:true\n\n          };\n        } //  End of ALPD-4130 ATE-241\n\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            activeTabIndex: false,\n            // ALPD-4130 Additional Filter Info ATE-241\n            ...multifilterInfo // inputParam:inputData\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data);\n        }\n      });\n    } // else {\n    //     let bool = false;\n    //     let skipInfo = {};\n    //     let { testskip, testtake, subsampletake, subsampleskip } = inputData;\n    //     let oldSelectedTest = inputData.masterData.selectedStbTimePointTest\n    //     let oldselectedStbTimePoint = inputData.masterData.selectedStbTimePoint\n    //     // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n    //     let isGrandChildGetRequired = false;\n    //     let TestSelected = [];\n    //     let subSampleSelected = [];\n    //     if (inputData[\"statusNone\"]) {\n    //         TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n    //         subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePoint, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n    //     }\n    //     else {\n    //         TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n    //         subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePoint, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n    //     }\n    //     if (TestSelected.length > 0) {\n    //         isGrandChildGetRequired = false;\n    //     } else {\n    //         isGrandChildGetRequired = true;\n    //     }\n    //     fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStabilityStudyPlan, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbstudyplancode\", inputData.removeElementFromArray);\n    //     if (isGrandChildGetRequired) {\n    //         let selectedStabilityStudyPlan = inputData.selectedStabilityStudyPlan;\n    //         let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.StbTimePointTestGet, \"nstbtimepointtestcode\");\n    //         let selectedStbTimePointTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\n    //             inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : [];\n    //         let nstbtimepointtestcode = selectedStbTimePointTest.length > 0 ? selectedStbTimePointTest.map(x => x.nstbtimepointtestcode).join(\",\") : \"-1\";\n    //         let selectedStbTimePoint = inputData.masterData.StbTimePointGet\n    //         if (subSample) {\n    //             let filterselectedStbTimePoint = getSameRecordFromTwoArrays(oldselectedStbTimePoint, inputData.masterData.StbTimePointGet, \"nstbtimepointcode\");\n    //             selectedStbTimePoint = filterselectedStbTimePoint.length > 0 ? filterselectedStbTimePoint : [inputData.masterData.StbTimePointGet[0]];\n    //             if (inputData.masterData.StbTimePointGet.length <= inputData.subsampleskip) {\n    //                 subsampleskip = 0;\n    //                 skipInfo = { subsampletake, subsampleskip }\n    //             }\n    //         }\n    //         // START ALPD-3671 VISHAKH\n    //         let masterData = { ...inputData.masterData, selectedStabilityStudyPlan, selectedStbTimePoint, selectedStbTimePointTest }\n    //         if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n    //             inputData.searchSubSampleRef.current.value = \"\";\n    //             masterData['searchedSubSample'] = undefined\n    //         }\n    //         if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n    //             inputData.searchTestRef.current.value = \"\"\n    //             masterData['searchedTest'] = undefined\n    //         }\n    //         // END ALPD-3671 VISHAKH\n    //         if (inputData.masterData.StbTimePointTestGet.length <= inputData.testskip) {\n    //             testskip = 0;\n    //             bool = true\n    //         }\n    //         if (bool) {\n    //             skipInfo = { ...skipInfo, testskip, testtake }\n    //         }\n    //         // inputData = {\n    //         //     ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\n    //         //     selectedStbTimePoint, checkBoxOperation: 3, skipInfo, masterData\n    //         // }\n    //         inputData = {\n    //             ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\", \"RegistrationTestAttachment\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\n    //             selectedStbTimePoint, checkBoxOperation: checkBoxOperation.SINGLESELECT, skipInfo, masterData\n    //         }\n    //         if (subSample) {\n    //             if (selectedStbTimePointTest.length === 0) {\n    //                 inputData[\"nstbstudyplancode\"] = selectedStbTimePoint.map(x => x.nstbstudyplancode).join(\",\")\n    //                 inputData[\"nstbtimepointcode\"] = selectedStbTimePoint.map(x => x.nstbtimepointcode).join(\",\")\n    //                 // inputData[\"checkBoxOperation\"] = 3\n    //                 inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\n    //                 inputData[\"childTabsKey\"] = [\"StbTimePointTestGet\"]\n    //               //  dispatch(getRegistrationTestDetail(inputData, true));\n    //             } else {\n    //                 //dispatch(getTestChildTabDetailRegistration(inputData, true));\n    //             }\n    //         } else {\n    //             //dispatch(getTestChildTabDetailRegistration(inputData, true));\n    //         }\n    //     }\n    //     else {\n    //         let masterData = {\n    //             ...inputData.masterData,\n    //             selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan,\n    //             selectedPreregno: inputData.nstbstudyplancode,\n    //             selectedStbTimePointTest: TestSelected ? TestSelected : inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : [],\n    //             // RegistrationTestComment,\n    //             selectedStbTimePoint: subSampleSelected ? subSampleSelected : inputData.masterData.StbTimePointGet\n    //         }\n    //         // START ALPD-3671 VISHAKH\n    //         if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n    //             inputData.searchSubSampleRef.current.value = \"\";\n    //             masterData['searchedSubSample'] = undefined\n    //         }\n    //         if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n    //             inputData.searchTestRef.current.value = \"\"\n    //             masterData['searchedTest'] = undefined\n    //         }\n    //         // END ALPD-3671 VISHAKH\n    //         let subsamplecheck = true;\n    //         if (subSample) {\n    //             let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePoint, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n    //             if (SubSampleSelected.length > 0) {\n    //                 let filterselectedStbTimePoint = getSameRecordFromTwoArrays(oldselectedStbTimePoint, inputData.masterData.StbTimePointGet, \"nstbtimepointcode\");\n    //                 if (filterselectedStbTimePoint.length === 0) {\n    //                     let wholeSubSample = masterData.StbTimePointGet.map(b => b.nstbtimepointcode)\n    //                     // START ALPD-3625 VISHAKH\n    //                     // oldselectedStbTimePoint.forEach((test, index) => {\n    //                     //     if (!wholeSubSample.includes(test.nstbtimepointcode)) {\n    //                     //         oldselectedStbTimePoint.splice(index, 1)\n    //                     //     }\n    //                     //     return null;\n    //                     // })\n    //                     oldselectedStbTimePoint = oldselectedStbTimePoint.filter(item =>\n    //                         wholeSubSample.includes(item.nstbtimepointcode)\n    //                     );\n    //                     // END ALPD-3625 VISHAKH\n    //                     if (oldselectedStbTimePoint.length === 0 && wholeSubSample.length > 0\n    //                         && masterData.selectedStbTimePointTest.length === 0) {\n    //                         const selectedStbTimePoint1 = [inputData.masterData.StbTimePointGet[0]];\n    //                         masterData = {\n    //                             ...masterData,\n    //                             selectedStbTimePoint: selectedStbTimePoint1,\n    //                             selectedStbTimePointTest: []\n    //                         }\n    //                         inputData = { ...inputData, ...masterData }\n    //                         inputData[\"nstbstudyplancode\"] = selectedStbTimePoint1.map(x => x.nstbstudyplancode).join(\",\")\n    //                         inputData[\"nstbtimepointcode\"] = selectedStbTimePoint1.map(x => x.nstbtimepointcode).join(\",\")\n    //                         // inputData[\"checkBoxOperation\"] = 3\n    //                         inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\n    //                         inputData[\"childTabsKey\"] = [\"StbTimePointTestGet\"]\n    //                         subsamplecheck = false;\n    //                         //dispatch(getRegistrationTestDetail(inputData, true));\n    //                     }\n    //                 } else {\n    //                     oldselectedStbTimePoint = filterselectedStbTimePoint\n    //                 }\n    //             } else {\n    //                 let wholeSubSample = masterData.StbTimePointGet.map(b => b.nstbtimepointcode)\n    //                 // START ALPD-3625 VISHAKH\n    //                 // oldselectedStbTimePoint.forEach((test, index) => {\n    //                 //     if (!wholeSubSample.includes(test.nstbtimepointcode)) {\n    //                 //         oldselectedStbTimePoint.splice(index, 1)\n    //                 //     }\n    //                 //     return null;\n    //                 // })\n    //                 oldselectedStbTimePoint = oldselectedStbTimePoint.filter(item =>\n    //                     wholeSubSample.includes(item.nstbtimepointcode)\n    //                 );\n    //                 // END ALPD-3625 VISHAKH\n    //             }\n    //             if (subsamplecheck) {\n    //                 masterData = {\n    //                     ...masterData,\n    //                     selectedStbTimePoint: oldselectedStbTimePoint\n    //                 }\n    //             }\n    //             if (inputData.masterData.StbTimePointGet.length <= inputData.subsampleskip) {\n    //                 subsampleskip = 0;\n    //                 skipInfo = { subsampleskip, subsampletake }\n    //             }\n    //         }\n    //         let wholeTestList = masterData.StbTimePointTestGet.map(b => b.nstbtimepointtestcode)\n    //         // START ALPD-3625 VISHAKH\n    //         // oldSelectedTest.forEach((test, index) => {\n    //         //     if (!wholeTestList.includes(test.nstbtimepointtestcode)) {\n    //         //         oldSelectedTest.splice(index, 1)\n    //         //     }\n    //         //     return null;\n    //         // })\n    //         oldSelectedTest = oldSelectedTest.filter(item =>\n    //             wholeTestList.includes(item.nstbtimepointtestcode)\n    //         );\n    //         // END ALPD-3625 VISHAKH\n    //         let keepOld = false;\n    //         let nstbtimepointtestcode;\n    //         if (oldSelectedTest.length > 0) {\n    //             keepOld = true\n    //             masterData = {\n    //                 ...masterData,\n    //                 selectedStbTimePointTest: oldSelectedTest\n    //             }\n    //         } else {\n    //             nstbtimepointtestcode = inputData.masterData.StbTimePointTestGet.length > 0 ? inputData.masterData.StbTimePointTestGet[0].nstbtimepointtestcode : \"-1\"\n    //         }\n    //         masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nstbtimepointtestcode, \"nstbtimepointtestcode\")\n    //         masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nstbtimepointtestcode, \"nstbtimepointtestcode\")\n    //         let skipInfo = {};\n    //         if (inputData.masterData.StbTimePointTestGet.length <= inputData.testskip) {\n    //             testskip = 0;\n    //             bool = true\n    //         }\n    //         if (bool) {\n    //             skipInfo = { ...skipInfo, testskip, testtake }\n    //         }\n    //         let dataStateArray = [\n    //             { activeName: 'selectedStabilityStudyPlan', dataStateName: 'sampleGridDataState' },\n    //             { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\n    //             { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\n    //             { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\n    //         ]\n    //         dataStateArray.map(arr => {\n    //             if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\n    //                 masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n    //                 skipInfo = {\n    //                     ...skipInfo,\n    //                     [arr.dataStateName]: {\n    //                         ...inputData[arr.dataStateName],\n    //                         skip: 0,\n    //                         sort: undefined,\n    //                         filter: undefined\n    //                     }\n    //                 }\n    //             } else {\n    //                 skipInfo = {\n    //                     ...skipInfo,\n    //                     [arr.dataStateName]: {\n    //                         ...inputData[arr.dataStateName],\n    //                         sort: undefined,\n    //                         filter: undefined\n    //                     }\n    //                 }\n    //             }\n    //             return null;\n    //         });\n    //         dispatch({\n    //             type: DEFAULT_RETURN, payload: {\n    //                 masterData,\n    //                 loading: false,\n    //                 showFilter: false,\n    //                 activeSampleTab: inputData.activeSampleTab,\n    //                 activeTestTab: inputData.activeTestTab,\n    //                 ...skipInfo,\n    //                 // activeTabIndex: inputData.activeTabIndex\n    //             }\n    //         })\n    //     }\n    // }\n\n  };\n}\nexport function getTimePointTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      nstbstudyplancode: inputData.nstbstudyplancode,\n      nstbtimepointcode: inputData.nstbtimepointcode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      selectedTransactionsamplecode: inputData.selectedStbTimePoint && inputData.selectedStbTimePoint.length > 0 && inputData.selectedStbTimePoint.map(item => item.nstbtimepointcode).join(\",\")\n    };\n    const subSample = inputData.nneedsubsample;\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"stabilitystudyplan/getRegistrationTest\", inputParamData).then(response => {\n        sortData(response.data, 'descending', 'nstbstudyplancode');\n        let oldSelectedTest = inputData.masterData.selectedStbTimePointTest || [];\n        let oldselectedStbTimePoint = inputData.masterData.selectedStbTimePoint || [];\n        let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointcode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedStbTimePoint: inputData.selectedStbTimePoint,\n          selectedTransactionsamplecode: inputData.nstbtimepointcode,\n          selectedStbTimePointTest: inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : []\n        };\n        let testList = reArrangeArrays(inputData.masterData.StbTimePointGet, response.data.StbTimePointTestGet, \"nstbtimepointcode\");\n        masterData = { ...masterData,\n          selectedStbTimePointTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\n          StbTimePointTestGet: testList ? testList.length > 0 ? testList : [] : []\n        };\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.StbTimePointGet.map(b => b.nstbtimepointcode); // START ALPD-3625 VISHAKH\n          // oldselectedStbTimePoint.map((test, index) => {\n          //     if (!wholeSubsampleList.includes(test.nstbtimepointcode)) {\n          //         oldselectedStbTimePoint.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          oldselectedStbTimePoint = oldselectedStbTimePoint.filter(item => wholeSubsampleList.includes(item.nstbtimepointcode)); // END ALPD-3625 VISHAKH\n\n          let keepOld = false;\n          let nstbtimepointcode;\n\n          if (oldselectedStbTimePoint.length > 0) {\n            keepOld = true;\n          } else {\n            nstbtimepointcode = masterData.selectedStbTimePoint[0].nstbtimepointcode;\n          }\n        }\n\n        let {\n          testskip,\n          testtake,\n          subsampleskip,\n          subsampletake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.StbTimePointTestGet.length < inputData.testskip) {\n\n        testskip = 0; // bool = true\n        // }\n\n        if (inputData.masterData.StbTimePointGet.length < inputData.subsampleskip) {\n          subsampleskip = 0; // bool = true\n        } // if (bool) {\n\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subsampleskip,\n          subsampletake\n        }; // }\n\n        if (inputData.masterData.selectedStbTimePoint && inputData.sampleGridDataState && inputData.masterData.selectedStbTimePoint.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } //  let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            // activeTabIndex: inputData.activeTabIndex,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            activeTabIndex: false //  inputParam\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedStbTimePointTest; // START ALPD-3625 VISHAKH\n      // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\n\n      let TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbtimepointcode, \"nstbtimepointcode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      } // END ALPD-3625 VISHAKH\n\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStbTimePoint, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointcode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let nstbtimepointtestcode = inputData.masterData.StbTimePointTestGet.length > 0 ? inputData.masterData.StbTimePointTestGet[0].nstbtimepointtestcode.toString() : \"-1\";\n        let selectedStbTimePoint = inputData.selectedStbTimePoint; // let selectedPreregno = inputData.nstbstudyplancode;\n\n        let selectedStbTimePointTest = inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : []; // let selectedStbTimePoint = inputData.masterData.StbTimePointGet\n\n        let masterData = { ...inputData.masterData,\n          selectedStbTimePoint,\n          selectedStbTimePointTest\n        }; // inputData = {\n        //     ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\n        //     selectedStbTimePoint, checkBoxOperation: 3, activeTabIndex: inputData.masterData.activeTabIndex\n        // }\n        // START ALPD-3671 VISHAKH\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } // END ALPD-3671 VISHAKH\n\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"],\n          nstbtimepointtestcode,\n          masterData,\n          selectedStbTimePointTest,\n          selectedStbTimePoint,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          activeTabIndex: inputData.masterData.activeTabIndex\n        }; // dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedStbTimePoint: inputData.selectedStbTimePoint,\n          selectedTransactioncode: inputData.nstbtimepointcode,\n          selectedStbTimePointTest: inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : []\n        }; // START ALPD-3671 VISHAKH\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } // END ALPD-3671 VISHAKH\n\n\n        const wholeTestList = masterData.StbTimePointTestGet.map(b => b.nstbtimepointtestcode); // START ALPD-3625 VISHAKH\n        // oldSelectedTest.forEach((test, index) => {\n        //     if (!wholeTestList.includes(test.nstbtimepointtestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.nstbtimepointtestcode)); // END ALPD-3625 VISHAKH\n\n        let keepOld = false;\n        let nstbtimepointtestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedStbTimePointTest: oldSelectedTest\n          };\n        } else {\n          nstbtimepointtestcode = inputData.masterData.StbTimePointTestGet.length > 0 ? inputData.masterData.StbTimePointTestGet[0].nstbtimepointtestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nstbtimepointtestcode, \"nstbtimepointtestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nstbtimepointtestcode, \"nstbtimepointtestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedStbTimePoint',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            // activeTabIndex: inputData.activeTabIndex,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/deleteStbStudyPlan\", inputParam.inputData).then(response => {\n      let masterData = { ...LoginProps,\n        ...response.data\n      };\n      let respObject = {\n        masterData,\n        //[modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {},\n        showConfirmAlert: false,\n        createTestConfirmMessage: undefined,\n        showFilter: false,\n        skip: 0,\n        testskip: 0,\n        take: undefined,\n        testtake: undefined,\n        subsampletake: undefined,\n        subsampleskip: 0,\n        showSample: undefined,\n        regSampleExisted: false\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      inputParam.postParamList[1]['clearFilter'] = 'yes';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined,\n          regSampleExisted: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function approveStbStudyPlan(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/approveStabilityStudyPlan\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"StabilityStudyPlanGet\"], LoginProps.StabilityStudyPlanGet, \"nstbstudyplancode\");\n      replaceUpdatedObject(response.data[\"StbTimePointGet\"], LoginProps.StbTimePointGet, \"nstbtimepointcode\");\n      replaceUpdatedObject(response.data[\"StbTimePointTestGet\"], LoginProps.StbTimePointTestGet, \"nstbtimepointtestcode\");\n      delete response.data[\"StabilityStudyPlanGet\"];\n      delete response.data[\"StbTimePointGet\"];\n      delete response.data[\"StbTimePointTestGet\"];\n      let masterData = { ...LoginProps,\n        ...response.data,\n        selectedStabilityStudyPlan: replaceUpdatedObject(response.data[\"selectedStabilityStudyPlan\"], LoginProps.selectedStabilityStudyPlan, \"nstbstudyplancode\"),\n        selectedStbTimePoint: replaceUpdatedObject(response.data[\"selectedStbTimePoint\"], LoginProps.selectedStbTimePoint, \"nstbtimepointcode\"),\n        selectedStbTimePointTest: replaceUpdatedObject(response.data[\"selectedStbTimePointTest\"], LoginProps.selectedStbTimePointTest, \"nstbtimepointtestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined,\n        showConfirmAlert: false,\n        acceptConfirmMessage: undefined,\n        skip: 0,\n        testskip: 0,\n        take: undefined,\n        testtake: undefined,\n        subsampletake: undefined,\n        subsampleskip: 0\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      // toast.error(error.message);           \n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        //toast.info(intl.formatMessage({ id: error.response.data[\"rtn\"] }));\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              acceptConfirmMessage: error.response.data.rtn,\n              acceptConfirmParam: {\n                inputParam,\n                masterData: LoginProps\n              },\n              loading: false\n            }\n          });\n        } else {\n          //toast.error(error.message);\n          toast.warn(intl.formatMessage({\n            id: error.response.data[\"rtn\"]\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              acceptConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport function deleteTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/deleteTest\", inputParam.inputData).then(response => {\n      let masterData = { ...LoginProps,\n        StbTimePointTestGet: sortData(response.data[\"StbTimePointTestGet\"], \"descending\", \"nstbtimepointtestcode\"),\n        StbTimePointGet: sortData(LoginProps[\"StbTimePointGet\"], \"descending\", \"nstbtimepointcode\"),\n        selectedStbTimePointTest: response.data[\"selectedStbTimePointTest\"],\n        //  selectedStbTimePoint: response.data[\"StbTimePointGet\"],\n        selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\n        RegistrationParameter: response.data.RegistrationParameter,\n        StabilityStudyPlanGet: replaceUpdatedObject(response.data.selectedStabilityStudyPlan, LoginProps.StabilityStudyPlanGet, 'nstbstudyplancode')\n      };\n      let respObject = {\n        masterData,\n        //[modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {},\n        showConfirmAlert: false,\n        createTestConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'no';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getEditStbTimePointDetails(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, specBasedComponent) {\n  return function (dispatch) {\n    let {\n      userInfo,\n      operation,\n      masterData\n    } = { ...inputParam\n    };\n\n    if (masterData[\"selectedStbTimePoint\"].length > 1 || masterData[\"selectedStbTimePoint\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedStbTimePoint\"] = [];\n    masterData[\"selectedStbTimePoint\"].push(inputParam[\"mastertoedit\"]);\n    inputParam.editSubSampleRegParam[\"nstbstudyplancode\"] = inputParam[\"mastertoedit\"][\"nstbstudyplancode\"];\n    inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n    inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\n    inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\n    const nstbtimepointcode = inputParam.mastertoedit[inputParam.primaryKeyName];\n\n    if (nstbtimepointcode === undefined) {\n      toast.info(intl.formattedMessage({\n        id: \"IDS_SELECTVALIDSUBSAMPLE\"\n      }));\n    } else {\n      let urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const selectedRegistration = rsapi.post(\"/stabilitystudyplan/getEditStbTimePointDetails\", { ...inputParam.editSubSampleRegParam,\n        nstbtimepointcode,\n        parentcolumnlist: columnList,\n        childcolumnlist: childColumnList,\n        userinfo: userInfo\n      });\n      const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n        datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n        userinfo: userInfo\n      });\n      urlArray = [timeZoneService, selectedRegistration, dateService];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = { ...response[1].data[\"EditData\"]\n        };\n        selectedRecord = { ...selectedRecord,\n          ...selectedRecord['jsondata']\n        };\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userInfo.stimezoneid,\n          value: userInfo.ntimezonecode\n        };\n\n        if (specBasedComponent) {\n          selectedRecord[\"ncomponentcode\"] = {\n            label: selectedRecord[\"scomponentname\"],\n            value: selectedRecord[\"ncomponentcode\"]\n          };\n        }\n\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        selectedRecord = { ...selectedRecord\n        };\n\n        if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\n          if (masterData[\"searchedTest\"]) {\n            if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n              inputParam.searchTestRef.current.value = \"\";\n              masterData['searchedTest'] = undefined;\n            }\n          }\n\n          masterData = { ...masterData,\n            ...response[1].data[\"SubSampleChildDetail\"]\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined,\n            regSubSamplecomboData: comboValues.comboData,\n            loadRegSubSample: true,\n            screenName: \"IDS_TIMEPOINT\",\n            operation: \"update\",\n            specBasedComponent,\n            //  regRecordToEdit:recordToEdit\n            masterData,\n            withoutCombocomponent\n          }\n        }); // }\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function updateStbTimePoint(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/stabilitystudyplan/updateStbTimePoint\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/stabilitystudyplan/updateStbTimePoint\", inputParam.inputData);\n    }\n\n    return requestUrl.then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"StbTimePointGet\"], masterData.StbTimePointGet, \"nstbtimepointcode\");\n      let selectedStbTimePointTest = response.data[\"selectedStbTimePointTest\"];\n      masterData = { ...masterData,\n        selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\n        selectedStbTimePointTest: replaceUpdatedObject(response.data[\"selectedStbTimePointTest\"], masterData.selectedStbTimePointTest, \"nstbtimepointtestcode\"),\n        selectedStbTimePointTest,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: intl.formatMessage({\n            id: \"IDS_TIMEPOINT\"\n          })\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelStbTimePointAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/deleteStbTimePoint\", inputParam.inputData).then(response => {\n      let masterData = { ...LoginProps,\n        StbTimePointTestGet: sortData(response.data[\"StbTimePointTestGet\"], \"descending\", \"nstbtimepointtestcode\"),\n        StbTimePointGet: sortData(response.data[\"StbTimePointGet\"], \"descending\", \"nstbtimepointcode\"),\n        selectedStbTimePointTest: response.data[\"selectedStbTimePointTest\"],\n        selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\n        RegistrationParameter: response.data.RegistrationParameter,\n        StabilityStudyPlanGet: replaceUpdatedObject(response.data.selectedStabilityStudyPlan, LoginProps.StabilityStudyPlanGet, 'nstbstudyplancode')\n      };\n      let respObject = {\n        masterData,\n        //[modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {},\n        showConfirmAlert: false,\n        createTestConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'yes';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/stabilitystudyplan/getRegSubTypeByRegType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/getRegTemplateTypeByRegSubType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/stabilitystudyplan/getApprovalConfigBasedTemplateDesign\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestDetailFromRegistration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.nstbtimepointtestcode === \"\") {\n      inputData.nstbtimepointtestcode = \"0\";\n    }\n\n    if (inputData.nstbstudyplancode && inputData.nstbstudyplancode.length > 0) {\n      let inputParamData = {\n        nstbtimepointtestcode: inputData.nstbtimepointtestcode,\n        nstbstudyplancode: inputData.nstbstudyplancode,\n        userinfo: inputData.userinfo,\n        nstbtimepointcode: inputData.nstbtimepointcode ? inputData.nstbtimepointcode : inputData.selectedStbTimePoint && inputData.selectedStbTimePoint.map(item => item.nstbtimepointcode).join(\",\")\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_TIMEPOINTRESULTS\":\n          url = \"stabilitystudyplan/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_TESTHISTORY\":\n          url = \"history/getTestHistory\";\n          activeName = \"RegistrationTestHistory\";\n          dataStateName = \"registrationTestHistoryDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_OUTSOURCEDETAILS\":\n          url = \"registration/getOutsourceDetails\";\n          break;\n\n        case \"IDS_EXTERNALORDERREPORTS\":\n          url = \"registration/getExternalOrderAttachment\";\n          break;\n\n        case \"IDS_TIMEPOINTHISTORY\":\n          url = \"stabilitystudyplan/getTimePointHistory\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan || inputData.masterData.selectedStabilityStudyPlan,\n              selectedStbTimePointTest: inputData.selectedStbTimePointTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStbTimePointTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointtestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointcode\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan || inputData.masterData.selectedStabilityStudyPlan,\n              selectedStbTimePointTest: inputData.selectedStbTimePointTest,\n              selectedPreregno: inputData.nstbstudyplancode,\n              selectedSampleCode: inputData.nstbtimepointcode,\n              selectedTestCode: inputData.nstbtimepointtestcode,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId\n            };\n\n            if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTabId: inputData.activeTabId,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.info(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStbTimePointTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointtestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedStbTimePointTest: inputData.selectedStbTimePointTest,\n            selectedPreregno: inputData.nstbstudyplancode,\n            selectedSampleCode: inputData.nstbtimepointcode,\n            selectedTestCode: inputData.nstbtimepointtestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory,\n        RegistrationTestHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        case \"IDS_TESTHISTORY\":\n          RegistrationTestHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedStbTimePointTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory,\n            RegistrationTestHistory\n          },\n          loading: false,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/StabilityStudyPlanAction.js"],"names":["React","rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","getSameRecordFromTwoArrays","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","childComboLoadForEdit","sortDataByParent","sortDataForDate","DEFAULT_RETURN","intl","initRequest","SampleType","checkBoxOperation","orderType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","constructOptionList","Operators","TextFilter","NumericFilter","DateFilter","ComboBox","Utils","QbUtils","leftArrowClass","openModal","ModalShow","addStbTimePoint","masterData","userinfo","columnList","selectComponent","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","specBasedComponent","Map","Component","isServiceRequired","SubSamplecomboData","selectedRecord","conditionalTestPackage","specBasedTestPackage","LoginProps","dispatch","urlArray","timeZoneService","post","actualService","parentcolumnlist","filter","x","inputtype","readonly","childcolumnlist","ComponentTestBySpec","TestGet","nallottedspeccode","slno","Object","keys","length","nneedsubsample","TestPackageGet","TestSectionGet","currentDate","dateService","datecolumnlist","all","then","response","timeZoneMap","data","undefined","timeZoneList","get","defaultTimeZone","label","stimezoneid","value","ntimezonecode","newcomboData","slanguagetypecode","TestCombined","lstComponent","PackageData","TestSectionData","selectedRecord1","lstComponentMap","EXTERNAL","item","nspecsampletypecode","PackageDataMap","TestPackage","testSectionDataMap","TestSection","comboData1","comboData","map","componentrow","loadcurrentdate","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","val","radiodefaultvalue","i","radioOptions","tags","text","inputParam","ChildscreenName","formatMessage","id","screenName","showSaveContinue","openChildModal","childoperation","parentPopUpSize","loading","openPortal","operation","loadSubSample","saveContinueData","parentSubSampleColumnList","childSubSampleColumnList","selectPackage","selectSection","AllTest","AllSection","componentTest","type","payload","catch","error","message","TestSectionDataMap","selectedStbTimePointTestData","selectedobject","Reg","TestData","insertStbStudyPlan","requestUrl","isFileupload","formData","inputData","rtn","StabilityStudyPlanGet","updatedObjectWithNewElements","selectedStabilityStudyPlan","StbTimePointGet","StbTimePointTestGet","selectedStbTimePoint","selectedStbTimePointTest","regSampleExisted","orderTypeValue","nstbtimepointcode","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","showSample","selectedSpec","selectedComponent","Test","subSampleDataGridList","preregConfirmMessage","loadImportFileData","loadImportSampleCountData","skip","subsampleskip","testskip","isDynamicViewSlideOut","postParamList","warn","console","log","status","NeedConfirmAlert","preregConfirmParam","oldList","newList","name","newlistItem","index","nstbstudyplancode","splice","unshift","insertExportStbStudyPlan","registrationList","info","addMoreTests","ncontrolCode","sampleList","some","obj","findTransactionStatus","Set","ntransactionstatus","REJECT","CANCELLED","RELEASED","findApprovalVersion","napprovalversioncode","findSampleSpec","join","availableTest","loadChildTest","loadPrinter","props","addSubTimePoint","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","loadRegSubSample","regSubSamplecomboData","regparentSubSampleColumnList","regchildSubSampleColumnList","saveTimePoint","StbTimePointTestParameter","subSampleConfirmMessage","subSampleConfirmParam","createRegTest","modalName","classUrl","methodUrl","RegistrationParameter","createTestConfirmMessage","createTestConfirmParam","ReloadData","searchSampleRef","current","searchSubSampleRef","searchTestRef","showFilter","take","testtake","subsampletake","activeTabIndex","getStabilityStudyPlanByFilterSubmit","getTimePointDetail","isParentValue","inputParamData","nsampletypecode","nregtypecode","nregsubtypecode","napprovalconfigcode","ndesigntemplatemappingcode","selectedPreregno","selectedTransactionsamplecode","activeName","dataStateName","subSample","sample","skipInfo","oldSelectedTest","oldselectedStbTimePoint","childTabsKey","removeElementFromArray","sampleGridDataState","sort","multifilterInfo","multiFilterLoad","activeSampleTab","activeTestTab","getTimePointTestDetail","outsourceDetailsList","OutsourceDetailsList","testList","wholeSubsampleList","b","includes","keepOld","TestSelected","isGrandChildGetRequired","nstbtimepointtestcode","toString","SINGLESELECT","selectedTransactioncode","wholeTestList","RegistrationTestComment","dataStateArray","arr","cancelSampleAction","approveStbStudyPlan","acceptConfirmMessage","acceptConfirmParam","deleteTestAction","getEditStbTimePointDetails","comboComponents","withoutCombocomponent","userInfo","findIndex","primaryKeyName","editSubSampleRegParam","push","mastertoedit","formattedMessage","selectedRegistration","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","date","updateStbTimePoint","regDateEditConfirmMessage","regEditParam","cancelStbTimePointAction","getSampleTypeChange","event","labelname","getRegTypeChange","getRegSubTypeChange","onApprovalConfigVersionChange","getTestDetailFromRegistration","url","responseData","selectedSampleCode","selectedTestCode","activeTabId","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","ApprovalHistory","RegistrationTestHistory"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString,\r\n    fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement,\r\n    replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList,\r\n    constructjsonOptionDefault, childComboLoad, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, childComboLoadForEdit, sortDataByParent, sortDataForDate\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { //RegistrationSubType, RegistrationType, \r\n    SampleType,\r\n    checkBoxOperation,\r\n    orderType,\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\n//import { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\nimport {\r\n    Operators,\r\n    TextFilter,\r\n    NumericFilter,\r\n    // BooleanFilter,\r\n    DateFilter,\r\n    // EnumFilter,\r\n    //  EnumFilterProps,\r\n} from \"@progress/kendo-react-data-tools\";\r\nimport { ComboBox } from \"@progress/kendo-react-dropdowns\";\r\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\nimport { leftArrowClass } from '@progress/kendo-react-layout';\r\nimport { openModal } from './ApprovalConfigAction';\r\nimport ModalShow from '../components/ModalShow';\r\n\r\nexport function addStbTimePoint(masterData, userinfo, columnList,\r\n    selectComponent, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map, Component, isServiceRequired,\r\n    SubSamplecomboData, selectedRecord, conditionalTestPackage, specBasedTestPackage, LoginProps) {\r\n    if (isServiceRequired) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: columnList ? columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)) : [],\r\n                childcolumnlist: childColumnList ? childColumnList : [],\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            if (specBasedComponent) {\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent,\r\n                    //   conditionalTestPackage:true\r\n                })\r\n                urlArray[2] = ComponentTestBySpec;\r\n            } else {\r\n                Component = Component ? Component : []\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    nneedsubsample: Map[\"nneedsubsample\"],\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent,\r\n                    conditionalTestPackage: true,\r\n                    specBasedTestPackage: specBasedTestPackage\r\n                })\r\n                urlArray[2] = TestGet;\r\n                const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    // slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    //   specBasedTestPackage: specBasedTestPackage,\r\n                    //  conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[5] = TestPackageGet;\r\n\r\n                const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    // slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    //   specBasedTestPackage: specBasedTestPackage,\r\n                    //  conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[6] = TestSectionGet;\r\n            }\r\n            const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                userinfo\r\n            })\r\n            urlArray[3] = currentDate\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo\r\n            })\r\n            urlArray[4] = dateService\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data,\r\n                    selectComponent, childColumnList, SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = [];\r\n                let TestSectionData = [];\r\n\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (specBasedComponent) {\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n                    // if (lstComponent.length > 0) {\r\n                    //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                    //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                    //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                    //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    // }\r\n                    //Added by Dhanushya for jira ETICA-22\r\n                    if (lstComponent.length > 0) {\r\n                        if (Map[\"orderTypeCombCode\"] && Map[\"orderTypeCombCode\"] === orderType.EXTERNAL) {\r\n                            selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                            selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                            selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                            selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n                        }\r\n                        else {\r\n\r\n                            selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'] &&\r\n                                selectedRecord1['ncomponentcode'].item && selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                            selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                } else {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n                    const testSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    TestSectionData = testSectionDataMap.get(\"OptionList\");\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                SubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n\r\n\r\n\r\n                const inputParam = {\r\n                    ChildscreenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                    screenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                    showSaveContinue: true,\r\n                    openChildModal: false,\r\n                    childoperation: \"create\",\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openPortal: true,\r\n                    openModal: false,\r\n                    operation: \"create\",\r\n                    loadSubSample: true,\r\n                    selectComponent: selectedRecord1,\r\n                    saveContinueData: { ...selectedRecord1 },\r\n                    SubSamplecomboData: comboData1,\r\n                    SubSamplecomboComponents,\r\n                    SubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    parentSubSampleColumnList: columnList,\r\n                    childSubSampleColumnList: childColumnList,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    selectPackage: [],\r\n                    TestPackage: PackageData,\r\n                    TestSection: TestSectionData, selectSection: [], AllTest: TestCombined, AllSection: TestSectionData,\r\n                    userinfo\r\n                }\r\n\r\n                //if (specBasedComponent) {\r\n                //Added by Dhanushya for jira ETICA-22\r\n                if (specBasedComponent && selectedRecord1['ncomponentcode'] !== undefined) {\r\n\r\n                    dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\r\n\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                }\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n    } else {\r\n        const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n            selectComponent, childColumnList,\r\n            SubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n        return (dispatch) => {\r\n            if (!specBasedComponent) {\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    // nneedsubsample: Map[\"nneedsubsample\"],\r\n                    ...Map,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent,\r\n                    conditionalTestPackage: true,\r\n                    specBasedTestPackage: specBasedTestPackage\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                    //  nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                    nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    specBasedTestPackage: specBasedTestPackage,\r\n                    conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[3] = TestPackageGet;\r\n\r\n                const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\r\n                    //  nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                    nallottedspeccode: selectedRecord.nallottedspeccode.item.nallottedspeccode,\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    specBasedComponent: specBasedComponent,\r\n                    specBasedTestPackage: specBasedTestPackage,\r\n                    conditionalTestPackage: conditionalTestPackage\r\n                });\r\n                urlArray[4] = TestSectionGet;\r\n                Axios.all(urlArray).then(response => {\r\n                    let TestCombined = []\r\n                    let PackageData = []\r\n                    let TestSectionData = []\r\n\r\n                    //  if (!specBasedTestPackage) {\r\n                    TestCombined = response[0].data\r\n                    // } \r\n                    // else {\r\n                    const PackageDataMap = constructOptionList(response[3].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n                    const TestSectionDataMap = constructOptionList(response[4].data.TestSection || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n                    // if (PackageData.length === 0) {\r\n                    //    dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    //} \r\n\r\n                    // }\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\"\r\n                            || componentrow.inputtype === \"checkbox\"\r\n                            || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                            if (componentrow['radiodefaultvalue']) {\r\n                                if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                    let val = ''\r\n                                    componentrow.radiodefaultvalue &&\r\n                                        componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                            val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                        })\r\n\r\n                                    selectedRecord1[componentrow.label] = val\r\n\r\n                                } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue : \"\";\r\n                                } else {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue.label : \"\";\r\n                                }\r\n\r\n                            } else {\r\n                                if (componentrow.inputtype === \"radio\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                        componentrow.radioOptions.tags[0].text : \"\";\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n                    // if (masterData.RealRegSubTypeValue.nregsubtypecode === 6) {\r\n\r\n                    //     let portalOrder = selectedRecord && selectedRecord['Portal Order ID'] || {}\r\n                    //     let containerType = SubSamplecomboData['ContainerType'] || []\r\n                    //     let containerList = []\r\n                    //     const nportalordercode = portalOrder && portalOrder.value ? portalOrder.value : -1\r\n                    //     containerType.map(x => {\r\n                    //         if (x.item.jsondata.nportalordercode === nportalordercode) {\r\n                    //             containerList.push(x)\r\n                    //         }\r\n                    //     })\r\n\r\n                    //     SubSamplecomboData['Container Type'] = containerList\r\n                    // }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ChildscreenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                            screenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                            showSaveContinue: true,\r\n                            openChildModal: false,\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            lstComponent: [],\r\n                            openPortal: true,\r\n                            openModal: false,\r\n                            operation: \"create\",\r\n                            loadSubSample: true,\r\n                            selectComponent: selectedRecord1,\r\n                            saveContinueData: { ...selectedRecord1 },\r\n                            TestCombined: TestCombined,\r\n                            TestPackage: PackageData, TestSection: TestSectionData, selectSection: []\r\n                        }\r\n                    });\r\n                })\r\n            } else {\r\n\r\n                const urlArray = []\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[0] = ComponentTestBySpec;\r\n                const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n                    userinfo\r\n                })\r\n                urlArray[1] = currentDate;\r\n                const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                    datecolumnlist: SubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                    userinfo\r\n                })\r\n                urlArray[2] = dateService\r\n                Axios.all(urlArray).then(response => {\r\n\r\n                    const selectedRecord1 = newcomboData.selectedRecord\r\n                    // const lstComponent =  response.data.lstComponent\r\n                    let lstComponent = response[0].data.lstComponent //filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\")\r\n                    const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n                    if (lstComponent.length > 0) {\r\n                        // selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                        // selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                        // selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                        // selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n                        //Added by Dhanushya for jira ETICA-22\r\n                        if (Map[\"orderTypeCombCode\"] && Map[\"orderTypeCombCode\"] === orderType.EXTERNAL) {\r\n                            selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                            selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                            selectedRecord1[\"nspecsampletypecode\"] = lstComponent[0].item.nspecsampletypecode;\r\n                            selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n                        }\r\n                        else {\r\n                            selectedRecord1[\"nspecsampletypecode\"] = lstComponent[0].item.nspecsampletypecode;\r\n                            selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n                        }\r\n\r\n                    }\r\n\r\n                    SubSamplewithoutCombocomponent.map(componentrow => {\r\n                        if (componentrow.inputtype === \"date\") {\r\n                            if (componentrow.loadcurrentdate) {\r\n                                selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[1].data) : \"\";\r\n                                selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                            } else if (componentrow.nperiodcode) {\r\n                                selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                if (componentrow.loadselecteddate) {\r\n                                    selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                        new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                                }\r\n                                //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                                //    new Date(response[2].data[componentrow.label]):null;\r\n                            } else {\r\n                                selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (componentrow.hidebeforedate) {\r\n                                selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n                            if (componentrow.hideafterdate) {\r\n                                selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                            }\r\n\r\n                        }\r\n                        else if (componentrow.inputtype === \"radio\"\r\n                            || componentrow.inputtype === \"checkbox\"\r\n                            || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                            if (componentrow['radiodefaultvalue']) {\r\n                                if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                    let val = ''\r\n                                    componentrow.radiodefaultvalue &&\r\n                                        componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                            val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                        })\r\n\r\n                                    selectedRecord1[componentrow.label] = val\r\n\r\n                                } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue : \"\";\r\n                                } else {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                        componentrow.radiodefaultvalue.label : \"\";\r\n                                }\r\n\r\n                            } else {\r\n                                if (componentrow.inputtype === \"radio\") {\r\n                                    selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                        componentrow.radioOptions.tags[0].text : \"\";\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n\r\n\r\n                    const inputParam = {\r\n                        ChildscreenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                        screenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: selectedRecord1,\r\n                        saveContinueData: { ...selectedRecord1 },\r\n                        TestCombined: [],\r\n                        selectedStbTimePointTestData: [],\r\n                        selectPackage: [], selectSection: []\r\n                    }\r\n                    if (specBasedComponent) {\r\n                        dispatch(componentTest(selectedRecord1, false, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam));\r\n\r\n                    } else {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        Component = Component ? Component : []\r\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage,\r\n            nneedsubsample: selectedobject.nneedsubsample\r\n        });\r\n        urlArray[0] = TestGet;\r\n        const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[1] = TestPackageGet;\r\n\r\n        const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[2] = TestSectionGet;\r\n        Axios.all(urlArray).then(response => {\r\n            let PackageData = []\r\n            let TestData = []\r\n            let TestSectionData = []\r\n            // if (specBasedTestPackage) {\r\n            const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                \"stestpackagename\", undefined, undefined, true);\r\n            PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n            const testSectionDataMap = constructOptionList(response[2].data.TestSection || [], \"nsectioncode\",\r\n                \"ssectionname\", undefined, undefined, true);\r\n            TestSectionData = testSectionDataMap.get(\"OptionList\");\r\n\r\n            // if (PackageData.length === 0) {\r\n            //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n            // } \r\n            //   }\r\n            //    else {\r\n            TestData = response[0].data;\r\n            //  }\r\n            //let Test = [];\r\n            // Test[selectedobject.slno] = TestData;\r\n            const Map = {}\r\n            if (Reg) {\r\n                Map[\"selectedRecord\"] = selectedobject\r\n            } else {\r\n                Map[\"selectComponent\"] = selectedobject\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...inputParam, TestCombined: TestData, AllTest: TestData, TestPackage: PackageData, ...Map, loading: false, selectedStbTimePointTestData: [],\r\n                    selectPackage: [], TestSection: TestSectionData, selectSection: [], AllSection: TestSectionData\r\n\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function insertStbStudyPlan(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/stabilitystudyplan/createRegistrationWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/stabilitystudyplan/createStabilityStudyPlan\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            //  rsapi.post(\"/registration/createRegistration\", inputParam.formData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    // if (response.data[\"isPortalData\"] && response.data[\"PortalStatus\"] && response.data[\"PortalStatus\"].length > 0) {\r\n                    //     dispatch(UpdateExternalOrderStatus(response.data[\"PortalStatus\"], inputParam));\r\n                    // }\r\n\r\n                    let StabilityStudyPlanGet = updatedObjectWithNewElements(response.data[\"selectedStabilityStudyPlan\"], masterData.StabilityStudyPlanGet, 'Sample');\r\n                    let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\r\n                    let StbTimePointGet = response.data[\"StbTimePointGet\"];\r\n                    let StbTimePointTestGet = response.data[\"StbTimePointTestGet\"];\r\n                    let selectedStbTimePoint = StbTimePointGet;\r\n                    StbTimePointTestGet = sortData(StbTimePointTestGet, \"nstbstudyplancode\", \"desc\");\r\n                    let selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? [StbTimePointTestGet[0]] : [];\r\n                    let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        StbTimePointGet = sortData(response.data[\"StbTimePointGet\"], 'nstbstudyplancode', 'desc')\r\n                        selectedStbTimePoint = StbTimePointGet.length > 0 ? [StbTimePointGet[0]] : [];\r\n                        StbTimePointTestGet = StbTimePointTestGet.filter(x => x.nstbtimepointcode === selectedStbTimePoint[0].nstbtimepointcode)\r\n                        selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? response.data[\"selectedStbTimePointTest\"] : [];\r\n                    }\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedStabilityStudyPlan = updatedObjectWithNewElements(response.data[\"selectedStabilityStudyPlan\"], masterData.selectedStabilityStudyPlan);\r\n                        updatedObjectWithNewElements(response.data[\"selectedStbTimePoint\"], masterData.StbTimePointGet);\r\n                        updatedObjectWithNewElements(response.data[\"selectedStbTimePointTest\"], masterData.StbTimePointTestGet);\r\n                        StbTimePointGet = masterData.StbTimePointGet;\r\n                        StbTimePointTestGet = masterData.StbTimePointTestGet;\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedStabilityStudyPlan, selectedStbTimePoint, selectedStbTimePointTest,\r\n                        StbTimePointGet, StbTimePointTestGet, StabilityStudyPlanGet,\r\n                    }\r\n                    if (masterData[\"kendoFilterList\"] !== undefined) {\r\n                        masterData[\"kendoFilterList\"] = undefined;\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        selectedStbTimePointTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        selectedStbTimePointTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: [],\r\n                        preregConfirmMessage: undefined,\r\n                        regSampleExisted, loadImportFileData: false, loadImportSampleCountData: false,\r\n                        skip: 0,\r\n                        subsampleskip: 0,\r\n                        testskip: 0,\r\n                        isDynamicViewSlideOut: false,\r\n                        // filterColumnActive:false,\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                preregConfirmMessage: error.response.data.rtn,\r\n                                preregConfirmParam: { inputParam, masterData },\r\n                                loading: false,\r\n                                showSample: undefined,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, preregConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElements(oldList, newList, name) {\r\n    let newlistItem = newList;\r\n    if (name === 'Sample') {\r\n        newlistItem.map((item, index) => {\r\n            if (oldList[0].nstbstudyplancode === item.nstbstudyplancode) {\r\n                newlistItem.splice(index, 1)\r\n                // [newFirstElement].concat(array)\r\n            }\r\n        })\r\n        newlistItem.unshift(oldList[0]);\r\n        oldList = [...newlistItem];\r\n    } else if (name === 'Test') {\r\n\r\n    } else {\r\n        oldList = [...newlistItem, ...oldList];\r\n    }\r\n    return oldList;\r\n}\r\n\r\n\r\nexport function insertExportStbStudyPlan(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/importStabilityStudyPlan\", inputParam.formData)\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n\r\n                    let registrationList = [...response.data[\"StabilityStudyPlanGet\"], ...masterData.StabilityStudyPlanGet]\r\n                    let StabilityStudyPlanGet = registrationList;\r\n                    let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\r\n                    let StbTimePointGet = response.data[\"StbTimePointGet\"];\r\n                    let StbTimePointTestGet = response.data[\"StbTimePointTestGet\"];\r\n                    let selectedStbTimePoint = StbTimePointGet;\r\n                    StbTimePointTestGet = sortData(StbTimePointTestGet, \"nstbstudyplancode\", \"desc\");\r\n                    let selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? [StbTimePointTestGet[0]] : [];\r\n                    let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        StbTimePointGet = sortData(response.data[\"StbTimePointGet\"], 'nstbstudyplancode', 'desc')\r\n                        selectedStbTimePoint = StbTimePointGet.length > 0 ? [StbTimePointGet[0]] : [];\r\n                        StbTimePointTestGet = StbTimePointTestGet.filter(x => x.nstbtimepointcode === selectedStbTimePoint[0].nstbtimepointcode)\r\n                        selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? response.data[\"selectedStbTimePointTest\"] : [];\r\n                    }\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedStabilityStudyPlan = updatedObjectWithNewElements(response.data[\"selectedStabilityStudyPlan\"], masterData.selectedStabilityStudyPlan);\r\n                        updatedObjectWithNewElements(response.data[\"selectedStbTimePoint\"], masterData.StbTimePointGet);\r\n                        updatedObjectWithNewElements(response.data[\"selectedStbTimePointTest\"], masterData.StbTimePointTestGet);\r\n                        StbTimePointGet = masterData.StbTimePointGet;\r\n                        StbTimePointTestGet = masterData.StbTimePointTestGet;\r\n                    }\r\n\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedStabilityStudyPlan, selectedStbTimePoint, selectedStbTimePointTest,\r\n                        StbTimePointGet, StbTimePointTestGet, StabilityStudyPlanGet\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        selectedStbTimePointTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        selectedStbTimePointTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: [],\r\n                        preregConfirmMessage: undefined,\r\n                        regSampleExisted, loadImportFileData: false, loadImportSampleCountData: false\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false,\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTests = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if (inputParam.selectedStabilityStudyPlan && inputParam.selectedStabilityStudyPlan.length > 0) {\r\n            if (inputParam.selectedStbTimePoint && inputParam.selectedStbTimePoint.length > 0) {\r\n                value = inputParam.selectedStbTimePoint.some(obj => obj.nspecsampletypecode !== inputParam.selectedStbTimePoint[0].nspecsampletypecode)\r\n                if (value) {\r\n                    return toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                }\r\n                const selectedStabilityStudyPlan = inputParam.selectedStabilityStudyPlan;\r\n                const findTransactionStatus = [...new Set(selectedStabilityStudyPlan.map(item => item.ntransactionstatus))];\r\n                if (findTransactionStatus.length === 1) {\r\n                    if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                        if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\r\n                            const findApprovalVersion = [...new Set(selectedStabilityStudyPlan.map(item => item.napprovalversioncode))];\r\n                            if (findApprovalVersion.length === 1) {\r\n                                const findSampleSpec = [...new Set(selectedStabilityStudyPlan.map(item => item.nallottedspeccode))];\r\n                                //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                                if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                                {\r\n                                    inputParam[\"snspecsampletypecode\"] = inputParam.selectedStbTimePoint &&\r\n                                        [...new Set(inputParam.selectedStbTimePoint.map(x => x.nspecsampletypecode))].join(\",\")\r\n                                    dispatch(initRequest(true));\r\n                                    const urlArray = []\r\n                                    const TestGet = rsapi.post(\"/registration/getMoreTest\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[0] = TestGet;\r\n                                    const TestPackageGet = rsapi.post(\"/registration/getMoreTestPackage\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[1] = TestPackageGet;\r\n\r\n                                    const TestSectionGet = rsapi.post(\"/registration/getMoreTestSection\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[2] = TestSectionGet;\r\n                                    Axios.all(urlArray)\r\n                                        .then(response => {\r\n                                            let PackageData = []\r\n                                            let TestSectionData = []\r\n                                            const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\",\r\n                                                \"stestpackagename\", undefined, undefined, true);\r\n                                            PackageData = PackageDataMap.get(\"OptionList\");\r\n                                            const TestSectionDataMap = constructOptionList(response[2].data || [], \"nsectioncode\",\r\n                                                \"ssectionname\", undefined, undefined, true);\r\n                                            TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n                                            dispatch({\r\n                                                type: DEFAULT_RETURN,\r\n                                                payload: {\r\n                                                    availableTest: response[0].data,\r\n                                                    TestCombined: response[0].data,\r\n                                                    AllTest: response[0].data,\r\n                                                    TestPackage: PackageData,\r\n                                                    loadChildTest: true,\r\n                                                    loading: false, ncontrolCode,\r\n                                                    screenName: \"IDS_TEST\",\r\n                                                    operation: \"create\",\r\n                                                    openModal: true,\r\n                                                    parentPopUpSize: \"lg\",\r\n                                                    selectedRecord: {},\r\n                                                    showSample: undefined,\r\n                                                    loadPrinter: false, TestSection: TestSectionData, AllSection: TestSectionData\r\n                                                }\r\n                                            });\r\n                                        })\r\n                                        .catch(error => {\r\n                                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                            if (error.response.status === 500) {\r\n                                                toast.error(error.message);\r\n                                            } else {\r\n                                                toast.info(this.props.formatMessage({ id: error.response.data }));\r\n                                            }\r\n                                        });\r\n                                } else {\r\n                                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                                }\r\n                            } else {\r\n                                toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                            }\r\n                        }\r\n                        else {\r\n                            toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\" }));\r\n                        }\r\n                    }\r\n                    else {\r\n                        toast.info(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                    }\r\n                } else {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n                }\r\n            } else {\r\n                toast.info(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport function addSubTimePoint(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n    regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\r\n    return function (dispatch) {\r\n        const urlArray = []\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray[0] = timeZoneService;\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)),\r\n            childcolumnlist: regchildColumnList,\r\n            userinfo\r\n        })\r\n        urlArray[1] = actualService;\r\n\r\n        if (specBasedComponent) {\r\n            const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent,\r\n                userinfo\r\n            })\r\n            urlArray[2] = ComponentTestBySpec;\r\n        } else {\r\n\r\n            const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                slno: 1,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n                nneedsubsample: Map[\"nneedsubsample\"]\r\n\r\n            })\r\n            urlArray[2] = TestGet;\r\n            const TestPackageGet = rsapi.post(\"/registration/getTestfromTestPackage\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[5] = TestPackageGet;\r\n            const TestSectionGet = rsapi.post(\"/registration/getTestfromSection\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[6] = TestSectionGet;\r\n\r\n        }\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n\r\n        urlArray[3] = currentDate\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n        urlArray[4] = dateService\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data,\r\n                    selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = [];\r\n                let TestSectionData = [];\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (specBasedComponent) {\r\n\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n                    //Commented by Dhanushya for jira ETICA-22\r\n                    // if (lstComponent.length > 0) {\r\n                    //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                    //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                    //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                    //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    // }\r\n\r\n                } else {\r\n                    //if (specBasedTestPackage) {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n                    const TestSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n\r\n                    // if (PackageData.length === 0) {\r\n                    //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    // } \r\n                    // }\r\n                    // else {\r\n                    TestCombined = response[2].data;\r\n                    // }\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n\r\n                regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                const inputParam = {\r\n                    screenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openModal: true,\r\n                    loadPrinter: false,\r\n                    operation: \"create\",\r\n                    loadRegSubSample: true,\r\n                    selectedRecord: selectedRecord1,\r\n                    regSubSamplecomboData: comboData1,\r\n                    regSubSamplecomboComponents,\r\n                    regSubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    regparentSubSampleColumnList: regcolumnList,\r\n                    regchildSubSampleColumnList: regchildColumnList,\r\n                    ncontrolCode: ncontrolcode,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    specBasedComponent,\r\n                    specBasedTestPackage,\r\n                    TestPackage: PackageData,\r\n                    //ALPD-624\r\n                    testskip: 0,\r\n                    subsampleskip: 0,\r\n                    TestSection: TestSectionData, AllTest: TestCombined, AllSection: TestSectionData\r\n                }\r\n                // if (specBasedComponent) {\r\n                //Added by Dhanushya for jira ETICA-22\r\n                if (specBasedComponent && selectedRecord1['ncomponentcode'] !== undefined) {\r\n\r\n                    dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function saveTimePoint(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/stabilitystudyplan/createSubSampleWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/stabilitystudyplan/createTimePoint\", inputParam.inputData);\r\n        }\r\n        return requestUrl\r\n            //  rsapi.post(\"/registration/createSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                // let StabilityStudyPlanGet = updatedObjectWithNewElement(response.data[\"selectedStabilityStudyPlan\"], inputParam.inputData.masterData.StabilityStudyPlanGet);\r\n                // let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\r\n                let StbTimePointGet = updatedObjectWithNewElement(inputParam.inputData.masterData.StbTimePointGet, response.data[\"selectedStbTimePoint\"]);\r\n                let StbTimePointTestGet = response.data[\"StbTimePointTestGet\"];\r\n                let selectedStbTimePoint = response.data[\"selectedStbTimePoint\"];// StbTimePointGet.length > 0 ? [StbTimePointGet[0]] : [];\r\n                StbTimePointTestGet = sortData(StbTimePointTestGet, \"nstbstudyplancode\", \"desc\");\r\n                let selectedStbTimePointTest = StbTimePointTestGet.length > 0 ? [StbTimePointTestGet[0]] : [];\r\n                let StbTimePointTestParameter = response.data[\"StbTimePointTestParameter\"];\r\n                StbTimePointTestParameter = StbTimePointTestParameter ? getSameRecordFromTwoArrays(StbTimePointTestParameter, selectedStbTimePointTest, 'nstbtimepointtestcode') : StbTimePointTestParameter;\r\n                let StabilityStudyPlanGet = replaceUpdatedObject(response.data[\"selectedStabilityStudyPlan\"], inputParam.inputData.masterData.StabilityStudyPlanGet, 'nstbstudyplancode');\r\n                let selectedStabilityStudyPlan = response.data[\"selectedStabilityStudyPlan\"];\r\n\r\n\r\n\r\n                let masterData = { ...inputParam.inputData.masterData }\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedStbTimePoint, selectedStbTimePointTest,\r\n                    StbTimePointGet, StbTimePointTestGet, StbTimePointTestParameter, selectedStabilityStudyPlan, StabilityStudyPlanGet\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadRegSubSample: false,\r\n                    showConfirmAlert: false,\r\n                    subSampleConfirmMessage: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                //    dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         openModal: false,\r\n                //         loadEsign: false,\r\n                //         loading: false,\r\n                //         showSample: undefined,\r\n                //         selectedRecord: {},\r\n                //         loadRegSubSample:false\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                // toast.error(error.message);\r\n                // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, subSampleConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                subSampleConfirmMessage: error.response.data.rtn,\r\n                                subSampleConfirmParam: { inputParam },\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    } else if (error.response.data.rtn) {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data.rtn\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, subSampleConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const createRegTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let StbTimePointTestGet = updatedObjectWithNewElements(masterData[\"StbTimePointTestGet\"], response.data[\"StbTimePointTestGet\"]);\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    StbTimePointTestGet: sortData(StbTimePointTestGet, \"descending\", \"nstbtimepointtestcode\"),\r\n                    StbTimePointGet: sortData(masterData[\"StbTimePointGet\"], \"descending\", \"nstbtimepointcode\"),\r\n                    selectedStbTimePointTest: response.data[\"selectedStbTimePointTest\"],\r\n                    //  selectedStbTimePoint: response.data[\"StbTimePointGet\"],\r\n                    selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    StabilityStudyPlanGet: replaceUpdatedObject(response.data.selectedStabilityStudyPlan, masterData.StabilityStudyPlanGet, 'nstbstudyplancode')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined\r\n\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'no';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, createTestConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                createTestConfirmMessage: error.response.data.rtn,\r\n                                createTestConfirmParam: { inputParam, masterData, modalName },\r\n\r\n                                //[modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: true,\r\n                                showSample: undefined\r\n\r\n\r\n                                //openModal: false,\r\n                                //selectedRecord: {}\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                [modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: false,\r\n                                showSample: undefined,\r\n                                openModal: false,\r\n                                selectedRecord: {},\r\n                                createTestConfirmMessage: undefined\r\n\r\n\r\n                            }\r\n                        });\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"stabilitystudyplan/getStabilityStudyPlanByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake: undefined,\r\n                        subsampleskip: 0,\r\n                        showSample: undefined, regSampleExisted: false,\r\n                        activeTabIndex:  false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getStabilityStudyPlanByFilterSubmit(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"stabilitystudyplan/getStabilityStudyPlanByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake: undefined,\r\n                        subsampleskip: 0,\r\n                        showSample: undefined, regSampleExisted: false,\r\n                        activeTabIndex:  false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTimePointDetail(inputData, isServiceRequired, isParentValue) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode || -1,\r\n            nregsubtypecode: inputData.nregsubtypecode || -1,\r\n            nstbstudyplancode: inputData.nstbstudyplancode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode || -1,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            selectedPreregno: inputData.selectedStabilityStudyPlan && inputData.selectedStabilityStudyPlan.length > 0 ? inputData.selectedStabilityStudyPlan.map(item => item.nstbstudyplancode).join(\",\") : null,\r\n            selectedTransactionsamplecode: inputData.selectedStabilityStudyPlan && inputData.selectedStabilityStudyPlan.length > 1\r\n                && inputData.masterData.selectedStbTimePoint ? inputData.masterData.selectedStbTimePoint.map(item => item.nstbtimepointcode).join(\",\") : null,\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"stabilitystudyplan/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, \"descending\", \"nstbstudyplancode\");\r\n                    response.data['StbTimePointGet'] = sortDataByParent(response.data['StbTimePointGet'], inputData.sample, \"nstbstudyplancode\");\r\n\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedStbTimePointTest || []\r\n                    if (subSample) {\r\n                        let oldselectedStbTimePoint = inputData.masterData.selectedStbTimePoint\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"nstbstudyplancode\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan,\r\n                            selectedPreregno: inputData.nstbstudyplancode,\r\n                            selectedStbTimePoint: inputData.masterData.StbTimePointGet.length > 0 ?\r\n                                [inputData.masterData.StbTimePointGet[0]] : [],\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedStbTimePointTest: masterData.StbTimePointTestGet.length > 0 ? [masterData.StbTimePointTestGet[0]] : []\r\n                        }\r\n\r\n\r\n\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        testskip = 0;\r\n                        subsampleskip = 0;\r\n                        skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                    }\r\n\r\n                    if (inputData.masterData.selectedStabilityStudyPlan && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedStabilityStudyPlan.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    // let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    // Start of ALPD-4130 on Save Additional Filter - ATE-241\r\n                    let multifilterInfo = {}\r\n                    if (inputData.multiFilterLoad !== undefined) {\r\n                        if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                            inputData.searchSampleRef.current.value = \"\";\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\";\r\n                        }\r\n                        multifilterInfo = {\r\n                            multiFilterLoad: inputData.multiFilterLoad,\r\n                            openModal: inputData.openModal,\r\n                            searchSampleRef: inputData.searchSampleRef,\r\n                            searchSubSampleRef: inputData.searchSubSampleRef,\r\n                            searchTestRef: inputData.searchTestRef,\r\n                            testskip: inputData.testskip,\r\n                            subsampleskip: inputData.subsampleskip,\r\n                            skip: inputData.skip,\r\n                            // filterColumnActive:true\r\n                        }\r\n                    }\r\n                    //  End of ALPD-4130 ATE-241\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex:  false,\r\n                            // ALPD-4130 Additional Filter Info ATE-241\r\n                            ...multifilterInfo,\r\n                            // inputParam:inputData\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        // else {\r\n        //     let bool = false;\r\n        //     let skipInfo = {};\r\n        //     let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n        //     let oldSelectedTest = inputData.masterData.selectedStbTimePointTest\r\n        //     let oldselectedStbTimePoint = inputData.masterData.selectedStbTimePoint\r\n        //     // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n        //     let isGrandChildGetRequired = false;\r\n        //     let TestSelected = [];\r\n        //     let subSampleSelected = [];\r\n\r\n\r\n        //     if (inputData[\"statusNone\"]) {\r\n        //         TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n        //         subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePoint, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n        //     }\r\n        //     else {\r\n        //         TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n        //         subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePoint, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n        //     }\r\n\r\n        //     if (TestSelected.length > 0) {\r\n        //         isGrandChildGetRequired = false;\r\n        //     } else {\r\n        //         isGrandChildGetRequired = true;\r\n        //     }\r\n        //     fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStabilityStudyPlan, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbstudyplancode\", inputData.removeElementFromArray);\r\n        //     if (isGrandChildGetRequired) {\r\n        //         let selectedStabilityStudyPlan = inputData.selectedStabilityStudyPlan;\r\n        //         let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.StbTimePointTestGet, \"nstbtimepointtestcode\");\r\n        //         let selectedStbTimePointTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n        //             inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : [];\r\n        //         let nstbtimepointtestcode = selectedStbTimePointTest.length > 0 ? selectedStbTimePointTest.map(x => x.nstbtimepointtestcode).join(\",\") : \"-1\";\r\n        //         let selectedStbTimePoint = inputData.masterData.StbTimePointGet\r\n\r\n        //         if (subSample) {\r\n        //             let filterselectedStbTimePoint = getSameRecordFromTwoArrays(oldselectedStbTimePoint, inputData.masterData.StbTimePointGet, \"nstbtimepointcode\");\r\n        //             selectedStbTimePoint = filterselectedStbTimePoint.length > 0 ? filterselectedStbTimePoint : [inputData.masterData.StbTimePointGet[0]];\r\n        //             if (inputData.masterData.StbTimePointGet.length <= inputData.subsampleskip) {\r\n        //                 subsampleskip = 0;\r\n        //                 skipInfo = { subsampletake, subsampleskip }\r\n        //             }\r\n\r\n        //         }\r\n        //         // START ALPD-3671 VISHAKH\r\n        //         let masterData = { ...inputData.masterData, selectedStabilityStudyPlan, selectedStbTimePoint, selectedStbTimePointTest }\r\n        //         if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n        //             inputData.searchSubSampleRef.current.value = \"\";\r\n        //             masterData['searchedSubSample'] = undefined\r\n        //         }\r\n        //         if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n        //             inputData.searchTestRef.current.value = \"\"\r\n        //             masterData['searchedTest'] = undefined\r\n        //         }\r\n        //         // END ALPD-3671 VISHAKH\r\n        //         if (inputData.masterData.StbTimePointTestGet.length <= inputData.testskip) {\r\n        //             testskip = 0;\r\n        //             bool = true\r\n        //         }\r\n        //         if (bool) {\r\n        //             skipInfo = { ...skipInfo, testskip, testtake }\r\n        //         }\r\n        //         // inputData = {\r\n        //         //     ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\r\n        //         //     selectedStbTimePoint, checkBoxOperation: 3, skipInfo, masterData\r\n        //         // }\r\n        //         inputData = {\r\n        //             ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\", \"RegistrationTestAttachment\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\r\n        //             selectedStbTimePoint, checkBoxOperation: checkBoxOperation.SINGLESELECT, skipInfo, masterData\r\n        //         }\r\n        //         if (subSample) {\r\n        //             if (selectedStbTimePointTest.length === 0) {\r\n        //                 inputData[\"nstbstudyplancode\"] = selectedStbTimePoint.map(x => x.nstbstudyplancode).join(\",\")\r\n        //                 inputData[\"nstbtimepointcode\"] = selectedStbTimePoint.map(x => x.nstbtimepointcode).join(\",\")\r\n        //                 // inputData[\"checkBoxOperation\"] = 3\r\n        //                 inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n        //                 inputData[\"childTabsKey\"] = [\"StbTimePointTestGet\"]\r\n        //               //  dispatch(getRegistrationTestDetail(inputData, true));\r\n        //             } else {\r\n        //                 //dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n        //             }\r\n        //         } else {\r\n        //             //dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         let masterData = {\r\n        //             ...inputData.masterData,\r\n        //             selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan,\r\n        //             selectedPreregno: inputData.nstbstudyplancode,\r\n        //             selectedStbTimePointTest: TestSelected ? TestSelected : inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : [],\r\n        //             // RegistrationTestComment,\r\n        //             selectedStbTimePoint: subSampleSelected ? subSampleSelected : inputData.masterData.StbTimePointGet\r\n        //         }\r\n        //         // START ALPD-3671 VISHAKH\r\n        //         if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n        //             inputData.searchSubSampleRef.current.value = \"\";\r\n        //             masterData['searchedSubSample'] = undefined\r\n        //         }\r\n        //         if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n        //             inputData.searchTestRef.current.value = \"\"\r\n        //             masterData['searchedTest'] = undefined\r\n        //         }\r\n        //         // END ALPD-3671 VISHAKH\r\n        //         let subsamplecheck = true;\r\n        //         if (subSample) {\r\n        //             let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePoint, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n        //             if (SubSampleSelected.length > 0) {\r\n        //                 let filterselectedStbTimePoint = getSameRecordFromTwoArrays(oldselectedStbTimePoint, inputData.masterData.StbTimePointGet, \"nstbtimepointcode\");\r\n        //                 if (filterselectedStbTimePoint.length === 0) {\r\n        //                     let wholeSubSample = masterData.StbTimePointGet.map(b => b.nstbtimepointcode)\r\n        //                     // START ALPD-3625 VISHAKH\r\n        //                     // oldselectedStbTimePoint.forEach((test, index) => {\r\n        //                     //     if (!wholeSubSample.includes(test.nstbtimepointcode)) {\r\n        //                     //         oldselectedStbTimePoint.splice(index, 1)\r\n        //                     //     }\r\n        //                     //     return null;\r\n        //                     // })\r\n        //                     oldselectedStbTimePoint = oldselectedStbTimePoint.filter(item =>\r\n        //                         wholeSubSample.includes(item.nstbtimepointcode)\r\n        //                     );\r\n        //                     // END ALPD-3625 VISHAKH\r\n        //                     if (oldselectedStbTimePoint.length === 0 && wholeSubSample.length > 0\r\n        //                         && masterData.selectedStbTimePointTest.length === 0) {\r\n        //                         const selectedStbTimePoint1 = [inputData.masterData.StbTimePointGet[0]];\r\n        //                         masterData = {\r\n        //                             ...masterData,\r\n        //                             selectedStbTimePoint: selectedStbTimePoint1,\r\n        //                             selectedStbTimePointTest: []\r\n        //                         }\r\n        //                         inputData = { ...inputData, ...masterData }\r\n        //                         inputData[\"nstbstudyplancode\"] = selectedStbTimePoint1.map(x => x.nstbstudyplancode).join(\",\")\r\n        //                         inputData[\"nstbtimepointcode\"] = selectedStbTimePoint1.map(x => x.nstbtimepointcode).join(\",\")\r\n        //                         // inputData[\"checkBoxOperation\"] = 3\r\n        //                         inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n        //                         inputData[\"childTabsKey\"] = [\"StbTimePointTestGet\"]\r\n        //                         subsamplecheck = false;\r\n        //                         //dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n        //                     }\r\n        //                 } else {\r\n        //                     oldselectedStbTimePoint = filterselectedStbTimePoint\r\n        //                 }\r\n\r\n        //             } else {\r\n        //                 let wholeSubSample = masterData.StbTimePointGet.map(b => b.nstbtimepointcode)\r\n        //                 // START ALPD-3625 VISHAKH\r\n        //                 // oldselectedStbTimePoint.forEach((test, index) => {\r\n        //                 //     if (!wholeSubSample.includes(test.nstbtimepointcode)) {\r\n        //                 //         oldselectedStbTimePoint.splice(index, 1)\r\n        //                 //     }\r\n        //                 //     return null;\r\n        //                 // })\r\n        //                 oldselectedStbTimePoint = oldselectedStbTimePoint.filter(item =>\r\n        //                     wholeSubSample.includes(item.nstbtimepointcode)\r\n        //                 );\r\n        //                 // END ALPD-3625 VISHAKH\r\n        //             }\r\n\r\n        //             if (subsamplecheck) {\r\n        //                 masterData = {\r\n        //                     ...masterData,\r\n        //                     selectedStbTimePoint: oldselectedStbTimePoint\r\n        //                 }\r\n        //             }\r\n        //             if (inputData.masterData.StbTimePointGet.length <= inputData.subsampleskip) {\r\n        //                 subsampleskip = 0;\r\n        //                 skipInfo = { subsampleskip, subsampletake }\r\n        //             }\r\n        //         }\r\n        //         let wholeTestList = masterData.StbTimePointTestGet.map(b => b.nstbtimepointtestcode)\r\n        //         // START ALPD-3625 VISHAKH\r\n        //         // oldSelectedTest.forEach((test, index) => {\r\n        //         //     if (!wholeTestList.includes(test.nstbtimepointtestcode)) {\r\n        //         //         oldSelectedTest.splice(index, 1)\r\n        //         //     }\r\n        //         //     return null;\r\n        //         // })\r\n        //         oldSelectedTest = oldSelectedTest.filter(item =>\r\n        //             wholeTestList.includes(item.nstbtimepointtestcode)\r\n        //         );\r\n        //         // END ALPD-3625 VISHAKH\r\n        //         let keepOld = false;\r\n        //         let nstbtimepointtestcode;\r\n        //         if (oldSelectedTest.length > 0) {\r\n        //             keepOld = true\r\n        //             masterData = {\r\n        //                 ...masterData,\r\n        //                 selectedStbTimePointTest: oldSelectedTest\r\n        //             }\r\n        //         } else {\r\n        //             nstbtimepointtestcode = inputData.masterData.StbTimePointTestGet.length > 0 ? inputData.masterData.StbTimePointTestGet[0].nstbtimepointtestcode : \"-1\"\r\n        //         }\r\n        //         masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nstbtimepointtestcode, \"nstbtimepointtestcode\")\r\n        //         masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nstbtimepointtestcode, \"nstbtimepointtestcode\")\r\n        //         let skipInfo = {};\r\n        //         if (inputData.masterData.StbTimePointTestGet.length <= inputData.testskip) {\r\n        //             testskip = 0;\r\n        //             bool = true\r\n        //         }\r\n        //         if (bool) {\r\n        //             skipInfo = { ...skipInfo, testskip, testtake }\r\n        //         }\r\n\r\n        //         let dataStateArray = [\r\n        //             { activeName: 'selectedStabilityStudyPlan', dataStateName: 'sampleGridDataState' },\r\n        //             { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n        //             { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n        //             { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n        //         ]\r\n        //         dataStateArray.map(arr => {\r\n        //             if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n        //                 masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n        //                 skipInfo = {\r\n        //                     ...skipInfo,\r\n        //                     [arr.dataStateName]: {\r\n        //                         ...inputData[arr.dataStateName],\r\n        //                         skip: 0,\r\n        //                         sort: undefined,\r\n        //                         filter: undefined\r\n        //                     }\r\n        //                 }\r\n        //             } else {\r\n        //                 skipInfo = {\r\n        //                     ...skipInfo,\r\n        //                     [arr.dataStateName]: {\r\n        //                         ...inputData[arr.dataStateName],\r\n        //                         sort: undefined,\r\n        //                         filter: undefined\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //             return null;\r\n        //         });\r\n        //         dispatch({\r\n        //             type: DEFAULT_RETURN, payload: {\r\n        //                 masterData,\r\n        //                 loading: false,\r\n        //                 showFilter: false,\r\n        //                 activeSampleTab: inputData.activeSampleTab,\r\n        //                 activeTestTab: inputData.activeTestTab,\r\n        //                 ...skipInfo,\r\n        //                 // activeTabIndex: inputData.activeTabIndex\r\n        //             }\r\n        //         })\r\n        //     }\r\n\r\n        // }\r\n\r\n    }\r\n}\r\n\r\nexport function getTimePointTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            nstbstudyplancode: inputData.nstbstudyplancode,\r\n            nstbtimepointcode: inputData.nstbtimepointcode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            selectedTransactionsamplecode: inputData.selectedStbTimePoint && inputData.selectedStbTimePoint.length > 0 && inputData.selectedStbTimePoint.map(item => item.nstbtimepointcode).join(\",\"),\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"stabilitystudyplan/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, 'descending', 'nstbstudyplancode')\r\n                    let oldSelectedTest = inputData.masterData.selectedStbTimePointTest || []\r\n                    let oldselectedStbTimePoint = inputData.masterData.selectedStbTimePoint || []\r\n                    let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointcode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedStbTimePoint: inputData.selectedStbTimePoint,\r\n                        selectedTransactionsamplecode: inputData.nstbtimepointcode,\r\n                        selectedStbTimePointTest: inputData.masterData.StbTimePointTestGet.length > 0 ?\r\n                            [inputData.masterData.StbTimePointTestGet[0]] : [],\r\n                    }\r\n                    let testList = reArrangeArrays(inputData.masterData.StbTimePointGet, response.data.StbTimePointTestGet, \"nstbtimepointcode\");\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedStbTimePointTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\r\n                        StbTimePointTestGet: testList ? testList.length > 0 ? testList : [] : [],\r\n                    }\r\n\r\n\r\n\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.StbTimePointGet.map(b => b.nstbtimepointcode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldselectedStbTimePoint.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.nstbtimepointcode)) {\r\n                        //         oldselectedStbTimePoint.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        oldselectedStbTimePoint = oldselectedStbTimePoint.filter(item =>\r\n                            wholeSubsampleList.includes(item.nstbtimepointcode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                        let keepOld = false;\r\n                        let nstbtimepointcode;\r\n                        if (oldselectedStbTimePoint.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            nstbtimepointcode = masterData.selectedStbTimePoint[0].nstbtimepointcode\r\n                        }\r\n                    }\r\n\r\n                    let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.StbTimePointTestGet.length < inputData.testskip) {\r\n                    testskip = 0;\r\n                    // bool = true\r\n                    // }\r\n                    if (inputData.masterData.StbTimePointGet.length < inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        // bool = true\r\n                    }\r\n                    // if (bool) {\r\n                    skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                    // }\r\n                    if (inputData.masterData.selectedStbTimePoint && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedStbTimePoint.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    //  let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            // activeTabIndex: inputData.activeTabIndex,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex:  false,\r\n                            //  inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedStbTimePointTest\r\n            // START ALPD-3625 VISHAKH\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbstudyplancode, \"nstbstudyplancode\");\r\n            let TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedStbTimePointTest, inputData.removeElementFromArray[0].nstbtimepointcode, \"nstbtimepointcode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            // END ALPD-3625 VISHAKH\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStbTimePoint, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointcode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let nstbtimepointtestcode = inputData.masterData.StbTimePointTestGet.length > 0 ? inputData.masterData.StbTimePointTestGet[0].nstbtimepointtestcode.toString() : \"-1\";\r\n                let selectedStbTimePoint = inputData.selectedStbTimePoint;\r\n                // let selectedPreregno = inputData.nstbstudyplancode;\r\n                let selectedStbTimePointTest = inputData.masterData.StbTimePointTestGet.length > 0 ? [inputData.masterData.StbTimePointTestGet[0]] : [];\r\n                // let selectedStbTimePoint = inputData.masterData.StbTimePointGet\r\n                let masterData = { ...inputData.masterData, selectedStbTimePoint, selectedStbTimePointTest }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\r\n                //     selectedStbTimePoint, checkBoxOperation: 3, activeTabIndex: inputData.masterData.activeTabIndex\r\n                // }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], nstbtimepointtestcode, masterData, selectedStbTimePointTest,\r\n                    selectedStbTimePoint, checkBoxOperation: checkBoxOperation.SINGLESELECT, activeTabIndex: inputData.masterData.activeTabIndex\r\n                }\r\n                // dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedStbTimePoint: inputData.selectedStbTimePoint,\r\n                    selectedTransactioncode: inputData.nstbtimepointcode,\r\n                    selectedStbTimePointTest: inputData.masterData.StbTimePointTestGet.length > 0 ?\r\n                        [inputData.masterData.StbTimePointTestGet[0]] : [],\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                const wholeTestList = masterData.StbTimePointTestGet.map(b => b.nstbtimepointtestcode)\r\n                // START ALPD-3625 VISHAKH\r\n                // oldSelectedTest.forEach((test, index) => {\r\n                //     if (!wholeTestList.includes(test.nstbtimepointtestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.nstbtimepointtestcode)\r\n                );\r\n                // END ALPD-3625 VISHAKH\r\n                let keepOld = false;\r\n                let nstbtimepointtestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedStbTimePointTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    nstbtimepointtestcode = inputData.masterData.StbTimePointTestGet.length > 0 ?\r\n                        inputData.masterData.StbTimePointTestGet[0].nstbtimepointtestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nstbtimepointtestcode, \"nstbtimepointtestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nstbtimepointtestcode, \"nstbtimepointtestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedStbTimePoint', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTabIndex: inputData.activeTabIndex,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/deleteStbStudyPlan\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    ...response.data\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    //[modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined,\r\n                    showFilter: false,\r\n                    skip: 0,\r\n                    testskip: 0,\r\n                    take: undefined,\r\n                    testtake: undefined,\r\n                    subsampletake: undefined,\r\n                    subsampleskip: 0,\r\n                    showSample: undefined, regSampleExisted: false,\r\n\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake: undefined,\r\n                        subsampleskip: 0,\r\n                        showSample: undefined, regSampleExisted: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function approveStbStudyPlan(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/approveStabilityStudyPlan\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"StabilityStudyPlanGet\"], LoginProps.StabilityStudyPlanGet, \"nstbstudyplancode\");\r\n                replaceUpdatedObject(response.data[\"StbTimePointGet\"], LoginProps.StbTimePointGet, \"nstbtimepointcode\");\r\n                replaceUpdatedObject(response.data[\"StbTimePointTestGet\"], LoginProps.StbTimePointTestGet, \"nstbtimepointtestcode\");\r\n\r\n                delete response.data[\"StabilityStudyPlanGet\"];\r\n                delete response.data[\"StbTimePointGet\"];\r\n                delete response.data[\"StbTimePointTestGet\"];\r\n                let masterData = {\r\n                    ...LoginProps, ...response.data,\r\n                    selectedStabilityStudyPlan: replaceUpdatedObject(response.data[\"selectedStabilityStudyPlan\"], LoginProps.selectedStabilityStudyPlan, \"nstbstudyplancode\"),\r\n                    selectedStbTimePoint: replaceUpdatedObject(response.data[\"selectedStbTimePoint\"], LoginProps.selectedStbTimePoint, \"nstbtimepointcode\"),\r\n                    selectedStbTimePointTest: replaceUpdatedObject(response.data[\"selectedStbTimePointTest\"], LoginProps.selectedStbTimePointTest, \"nstbtimepointtestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined,\r\n                    showConfirmAlert: false,\r\n                    acceptConfirmMessage: undefined,\r\n                    skip: 0,\r\n                    testskip: 0,\r\n                    take: undefined,\r\n                    testtake: undefined,\r\n                    subsampletake: undefined,\r\n                    subsampleskip: 0,\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                // toast.error(error.message);           \r\n\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                } else {\r\n                    //toast.info(intl.formatMessage({ id: error.response.data[\"rtn\"] }));\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                acceptConfirmMessage: error.response.data.rtn,\r\n                                acceptConfirmParam: { inputParam, masterData: LoginProps },\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        //toast.error(error.message);\r\n                        toast.warn(intl.formatMessage({ id: error.response.data[\"rtn\"] }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, acceptConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/deleteTest\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    StbTimePointTestGet: sortData(response.data[\"StbTimePointTestGet\"], \"descending\", \"nstbtimepointtestcode\"),\r\n                    StbTimePointGet: sortData(LoginProps[\"StbTimePointGet\"], \"descending\", \"nstbtimepointcode\"),\r\n                    selectedStbTimePointTest: response.data[\"selectedStbTimePointTest\"],\r\n                    //  selectedStbTimePoint: response.data[\"StbTimePointGet\"],\r\n                    selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    StabilityStudyPlanGet: replaceUpdatedObject(response.data.selectedStabilityStudyPlan, LoginProps.StabilityStudyPlanGet, 'nstbstudyplancode')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    //[modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined\r\n\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'no';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function getEditStbTimePointDetails(inputParam, columnList, selectedRecord1,\r\n    childColumnList, comboComponents,\r\n    withoutCombocomponent, specBasedComponent) {\r\n    return function (dispatch) {\r\n\r\n        let { userInfo, operation, masterData } = { ...inputParam };\r\n\r\n        if (masterData[\"selectedStbTimePoint\"].length > 1 ||\r\n            masterData[\"selectedStbTimePoint\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] = true;\r\n        }\r\n\r\n        masterData[\"selectedStbTimePoint\"] = [];\r\n        masterData[\"selectedStbTimePoint\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        inputParam.editSubSampleRegParam[\"nstbstudyplancode\"] = inputParam[\"mastertoedit\"][\"nstbstudyplancode\"];\r\n        inputParam.editSubSampleRegParam[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n        inputParam.editSubSampleRegParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\r\n        inputParam.editSubSampleRegParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\r\n\r\n        const nstbtimepointcode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        if (nstbtimepointcode === undefined) {\r\n            toast.info(intl.formattedMessage({ id: \"IDS_SELECTVALIDSUBSAMPLE\" }));\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n            const selectedRegistration = rsapi.post(\"/stabilitystudyplan/getEditStbTimePointDetails\", {\r\n                ...inputParam.editSubSampleRegParam, nstbtimepointcode, parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo: userInfo\r\n            })\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo: userInfo\r\n            })\r\n\r\n\r\n            urlArray = [timeZoneService, selectedRegistration, dateService]\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n\r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n\r\n                    if (specBasedComponent) {\r\n                        selectedRecord[\"ncomponentcode\"] = { label: selectedRecord[\"scomponentname\"], value: selectedRecord[\"ncomponentcode\"] }\r\n                    }\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n\r\n                    if (inputParam.editSubSampleRegParam[\"getSubSampleChildDetail\"] === true) {\r\n                        if (masterData[\"searchedTest\"]) {\r\n                            if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                                inputParam.searchTestRef.current.value = \"\"\r\n                                masterData['searchedTest'] = undefined\r\n                            }\r\n                        }\r\n                        masterData = { ...masterData, ...response[1].data[\"SubSampleChildDetail\"] };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadRegSubSample: true,\r\n                            screenName: \"IDS_TIMEPOINT\",\r\n                            operation: \"update\",\r\n                            specBasedComponent,\r\n                            //  regRecordToEdit:recordToEdit\r\n                            masterData,\r\n                            withoutCombocomponent\r\n                        }\r\n                    })\r\n                    // }\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.info(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updateStbTimePoint(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/stabilitystudyplan/updateStbTimePoint\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/stabilitystudyplan/updateStbTimePoint\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"StbTimePointGet\"], masterData.StbTimePointGet, \"nstbtimepointcode\");\r\n                let selectedStbTimePointTest = response.data[\"selectedStbTimePointTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\r\n                    selectedStbTimePointTest: replaceUpdatedObject(response.data[\"selectedStbTimePointTest\"], masterData.selectedStbTimePointTest, \"nstbtimepointtestcode\"),\r\n                    selectedStbTimePointTest,\r\n                    RegistrationParameter: response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_TIMEPOINT\" }),\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelStbTimePointAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/deleteStbTimePoint\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    StbTimePointTestGet: sortData(response.data[\"StbTimePointTestGet\"], \"descending\", \"nstbtimepointtestcode\"),\r\n                    StbTimePointGet: sortData(response.data[\"StbTimePointGet\"], \"descending\", \"nstbtimepointcode\"),\r\n                    selectedStbTimePointTest: response.data[\"selectedStbTimePointTest\"],\r\n                    selectedStbTimePoint: response.data[\"selectedStbTimePoint\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    StabilityStudyPlanGet: replaceUpdatedObject(response.data.selectedStabilityStudyPlan, LoginProps.StabilityStudyPlanGet, 'nstbstudyplancode')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    //[modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined\r\n\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/stabilitystudyplan/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/getRegTemplateTypeByRegSubType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onApprovalConfigVersionChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/stabilitystudyplan/getApprovalConfigBasedTemplateDesign\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestDetailFromRegistration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.nstbtimepointtestcode === \"\") {\r\n            inputData.nstbtimepointtestcode = \"0\";\r\n        }\r\n        if (inputData.nstbstudyplancode && inputData.nstbstudyplancode.length > 0) {\r\n            let inputParamData = {\r\n                nstbtimepointtestcode: inputData.nstbtimepointtestcode,\r\n                nstbstudyplancode: inputData.nstbstudyplancode,\r\n                userinfo: inputData.userinfo,\r\n                nstbtimepointcode: inputData.nstbtimepointcode ? inputData.nstbtimepointcode :\r\n                    inputData.selectedStbTimePoint && inputData.selectedStbTimePoint.map(item => item.nstbtimepointcode).join(\",\"),\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_TIMEPOINTRESULTS\":\r\n                    url = \"stabilitystudyplan/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_TESTHISTORY\":\r\n                    url = \"history/getTestHistory\"\r\n                    activeName = \"RegistrationTestHistory\"\r\n                    dataStateName = \"registrationTestHistoryDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_OUTSOURCEDETAILS\":\r\n                    url = \"registration/getOutsourceDetails\"\r\n                    break;\r\n                case \"IDS_EXTERNALORDERREPORTS\":\r\n                    url = \"registration/getExternalOrderAttachment\"\r\n                    break;\r\n                case \"IDS_TIMEPOINTHISTORY\":\r\n                    url = \"stabilitystudyplan/getTimePointHistory\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan || inputData.masterData.selectedStabilityStudyPlan, selectedStbTimePointTest: inputData.selectedStbTimePointTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStbTimePointTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointtestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointcode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedStabilityStudyPlan: inputData.selectedStabilityStudyPlan || inputData.masterData.selectedStabilityStudyPlan,\r\n                                selectedStbTimePointTest: inputData.selectedStbTimePointTest,\r\n                                selectedPreregno: inputData.nstbstudyplancode,\r\n                                selectedSampleCode: inputData.nstbtimepointcode,\r\n                                selectedTestCode: inputData.nstbtimepointtestcode,\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                                activeTabId: inputData.activeTabId\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    activeTabIndex: inputData.activeTabIndex,\r\n                                    activeTabId: inputData.activeTabId,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.info(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedStbTimePointTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nstbtimepointtestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedStbTimePointTest: inputData.selectedStbTimePointTest,\r\n                        selectedPreregno: inputData.nstbstudyplancode,\r\n                        selectedSampleCode: inputData.nstbtimepointcode,\r\n                        selectedTestCode: inputData.nstbtimepointtestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory, RegistrationTestHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                case \"IDS_TESTHISTORY\":\r\n                    RegistrationTestHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedStbTimePointTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory, RegistrationTestHistory\r\n                    }, loading: false,\r\n                    activeTabIndex: inputData.activeTabIndex,\r\n                    activeTabId: inputData.activeTabId,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}