{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\AddSampleCollection.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\n\nconst AddSampleCollection = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_PROJECTTYPE\"\n    }),\n    name: \"nprojecttypecode\",\n    type: \"text\",\n    placeholder: props.formatMessage({\n      id: \"IDS_PROJECTTYPE\"\n    }),\n    onChange: event => props.onInputOnChange(event),\n    isDisabled: true,\n    value: props.selectedProjectType.label,\n    isMandatory: true,\n    required: true,\n    maxLength: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.formatMessage({\n      id: \"IDS_BARCODEID\"\n    }),\n    name: \"sbarcodeid\",\n    type: \"text\" //onBlur={(event) => props.autoSaveGetData(event)}\n    ,\n    onKeyUp: event => props.autoSaveGetDataCollection(event, \"sbarcodeid\"),\n    placeholder: props.formatMessage({\n      id: \"IDS_BARCODEID\"\n    }),\n    onChange: event => props.onInputOnChange(event),\n    isDisabled: props.operation == \"update\" ? true : false,\n    value: props.selectedRecord[\"sbarcodeid\"],\n    isMandatory: true,\n    required: true,\n    maxLength: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_QUANTITY\"\n    }),\n    name: \"nsampleqty\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, \"nsampleqty\"),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_QUANTITY\"\n    }),\n    value: props.selectedRecord[\"nsampleqty\"] || \"\",\n    isMandatory: true,\n    isClearable: false,\n    required: true,\n    maxLength: 6,\n    isDisabled: props.operation == \"update\" ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_UNIT\"\n    }),\n    isSearchable: true,\n    name: \"nunitcode\",\n    isDisabled: props.operation == \"update\" ? true : false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.unit,\n    value: props.selectedRecord[\"nunitcode\"] || \"\",\n    defaultValue: props.selectedRecord[\"nunitcode\"],\n    onChange: event => props.onComboChange(event, \"nunitcode\"),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: props.userInfo.istimezoneshow === transactionStatus.YES ? 12 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dcollectiondate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SAMPLECOLLECTIONDATE\"\n    }),\n    className: \"form-control\",\n    placeholderText: props.intl.formatMessage({\n      id: \"IDS_SELECTDATE\"\n    }) //dateFormat={props.userInfo[\"ssitedatetime\"]}\n    ,\n    dateFormat: props.userInfo.ssitedatetime,\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_SAMPLECOLLECTIONDATE\"\n    }),\n    showTimeInput: true,\n    timeFormat: true,\n    isClearable: false,\n    isMandatory: true,\n    required: true // isDisabled={diableAllStatus === recordStatus}\n    ,\n    minDate: props.currentTime,\n    minTime: props.currentTime,\n    onChange: date => props.handleDateChangeSlidout(\"dcollectiondate\", date),\n    selected: props.selectedRecord ? props.selectedRecord[\"dcollectiondate\"] : new Date(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    name: \"scomments\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\",\n    rows: \"2\",\n    isMandatory: false,\n    required: false,\n    maxLength: \"255\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, props.barcodedata && Object.entries(props.barcodedata).length !== 0 &&\n  /*#__PURE__*/\n  //<div className=' mb-2'>\n  React.createElement(Col, {\n    md: 12,\n    className: \" mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: \"inline-block\",\n      marginTop: \"1%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 37\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_SAMPLEINFO\"\n  })))), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 33\n    }\n  }, props.barcodeFields && props.barcodeFields.map(item => {\n    return props.barcodedata && Object.entries(props.barcodedata).map(([key, value]) => {\n      if (item.sfieldname === key) {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          key: `specInfo_${key}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 69\n          }\n        }, key), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 69\n          }\n        }, value)));\n      } else {\n        return null;\n      }\n    });\n  }))))) //</Row></div>\n  ));\n};\n\nexport default injectIntl(AddSampleCollection);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/AddSampleCollection.jsx"],"names":["React","injectIntl","Row","Col","Card","FormGroup","FormLabel","FormInput","DateTimePicker","FormSelectSearch","transactionStatus","ReadOnlyText","FormTextarea","AddSampleCollection","props","formatMessage","id","event","onInputOnChange","selectedProjectType","label","autoSaveGetDataCollection","operation","selectedRecord","intl","unit","onComboChange","userInfo","istimezoneshow","YES","ssitedatetime","currentTime","date","handleDateChangeSlidout","Date","barcodedata","Object","entries","length","display","marginTop","barcodeFields","map","item","key","value","sfieldname"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n\r\nconst AddSampleCollection = (props) => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Col md={12}>\r\n\r\n                        <FormInput\r\n                            label={props.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            name={\"nprojecttypecode\"}\r\n                            type=\"text\"\r\n                            placeholder={props.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            isDisabled={true}\r\n                            value={props.selectedProjectType.label}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            maxLength={50}\r\n\r\n                        />\r\n\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormInput\r\n                            label={props.formatMessage({ id: \"IDS_BARCODEID\" })}\r\n                            name={\"sbarcodeid\"}\r\n                            type=\"text\"\r\n                            //onBlur={(event) => props.autoSaveGetData(event)}\r\n                            onKeyUp={(event) => props.autoSaveGetDataCollection(event, \"sbarcodeid\")}\r\n                            placeholder={props.formatMessage({ id: \"IDS_BARCODEID\" })}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                            value={props.selectedRecord[\"sbarcodeid\"]}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            maxLength={20}\r\n\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n\r\n                        <FormInput\r\n                            label={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                            name={\"nsampleqty\"}\r\n                            type={\"text\"}\r\n                            onChange={(event) => props.onInputOnChange(event, \"nsampleqty\")}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                            value={props.selectedRecord[\"nsampleqty\"] || \"\"}\r\n                            isMandatory={true}\r\n                            isClearable={false}\r\n                            required={true}\r\n                            maxLength={6}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                        />\r\n\r\n                    </Col>\r\n                   \r\n                </Col>\r\n                <Col md={6}>\r\n                <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_UNIT\" })}\r\n                            isSearchable={true}\r\n                            name={\"nunitcode\"}\r\n                            isDisabled={props.operation == \"update\" ? true : false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            isClearable={false}\r\n                            options={props.unit}\r\n                            value={props.selectedRecord[\"nunitcode\"] || \"\"}\r\n                            defaultValue={props.selectedRecord[\"nunitcode\"]}\r\n                            onChange={(event) => props.onComboChange(event, \"nunitcode\")}\r\n\r\n                            closeMenuOnSelect={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    </Col>\r\n\r\n                    <Col md={props.userInfo.istimezoneshow === transactionStatus.YES ? 12 : 12}>\r\n                        <DateTimePicker\r\n                            name={\"dcollectiondate\"}\r\n                            label={props.intl.formatMessage({ id: \"IDS_SAMPLECOLLECTIONDATE\" })}\r\n                            className='form-control'\r\n                            placeholderText={props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                            //dateFormat={props.userInfo[\"ssitedatetime\"]}\r\n                            dateFormat={props.userInfo.ssitedatetime}\r\n                            timeInputLabel={props.intl.formatMessage({ id: \"IDS_SAMPLECOLLECTIONDATE\" })}\r\n                            showTimeInput={true}\r\n                            timeFormat={true}\r\n                            isClearable={false}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            // isDisabled={diableAllStatus === recordStatus}\r\n                            minDate={props.currentTime}\r\n                            minTime={props.currentTime}\r\n                            onChange={date => props.handleDateChangeSlidout(\"dcollectiondate\", date)}\r\n                            selected={props.selectedRecord ? props.selectedRecord[\"dcollectiondate\"] : new Date()} />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormTextarea\r\n                            label={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            name={\"scomments\"}\r\n                            onChange={(event) => props.onInputOnChange(event)}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"scomments\"] : \"\"}\r\n                            rows=\"2\"\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={\"255\"}\r\n                        >\r\n                        </FormTextarea>\r\n                    </Col>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {props.barcodedata && Object.entries(props.barcodedata).length !== 0 &&\r\n                    //<div className=' mb-2'>\r\n                    <Col md={12} className=' mb-2'>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                    <h4>{props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                </span>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    {\r\n                                        props.barcodeFields && props.barcodeFields.map(item => {\r\n                                            return (\r\n                                                props.barcodedata && Object.entries(props.barcodedata).map(([key, value]) => {\r\n                                                    if (item.sfieldname === key) {\r\n                                                        return (\r\n                                                            <Col md={6} key={`specInfo_${key}`}>\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>\r\n                                                                        {key}\r\n                                                                    </FormLabel>\r\n                                                                    <ReadOnlyText>{value}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        );\r\n                                                    } else {\r\n                                                        return null;\r\n                                                    }\r\n                                                })\r\n                                            );\r\n                                        })\r\n                                    }\r\n\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    //</Row></div>\r\n                }\r\n            </Row>\r\n        </>\r\n\r\n\r\n    )\r\n}\r\nexport default injectIntl(AddSampleCollection);\r\n"]},"metadata":{},"sourceType":"module"}