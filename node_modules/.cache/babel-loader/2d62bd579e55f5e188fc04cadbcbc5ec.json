{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { intl } from '../components/App';\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"nsamplestoragelocationcode\": parseInt(inputParam.nsamplestoragelocationcode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedSampleStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function editSampleStorageLocation(inputParam, userInfo, isOnlyDraft, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let selectedRecord = {};\n    let urlArray = [];\n    const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\n      \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode\n    });\n    const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': userInfo\n    });\n    urlArray = [getSampleStorageService, geStorageCategory];\n    Axios.all(urlArray).then(response => {\n      // masterData = {\n      //     ...masterData\n      // };\n      selectedRecord[\"ssamplestoragelocationname\"] = response[0].data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"];\n      const storageCategoryMap = constructOptionList(response[1].data || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, true);\n      const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n      storageCategoryList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nstoragecategorycode\"] ? selectedRecord[\"nstoragecategorycode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\n          selectedRecord,\n          openModal: true,\n          operation: \"update\",\n          loadTreeProperties: false,\n          storageCategoryList,\n          isOnlyDraft,\n          ncontrolcode: editId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function approveSampleStorageLocation(userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/ApproveSampleStorageLocation\", {\n      'userinfo': userInfo,\n      \"approvalStatus\": masterData.selectedSampleStorageVersion[\"napprovalstatus\"],\n      \"sampleStorageVersionCode\": masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"],\n      \"sampleStorageLocationCode\": masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\n    }).then(response => {\n      masterData = { ...masterData,\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export const openPropertyModal = (clickedItem, editId) => (dispatch) => {\n//     let selectedRecord = {};\n//     selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n//     selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n//     selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n//     dispatch({\n//         type: DEFAULT_RETURN,\n//         payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\", ncontrolcode: editId }\n//     });\n// };\n\nexport function openPropertyModal(inputParam, userInfo, clickedItem, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\n      \"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode\n    }).then(response => {\n      // masterData = {\n      //     ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      // };\n      // sortData(masterData);\n      // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {                       \n      //         loading: false\n      //     }\n      // });\n      let selectedRecord = {};\n      selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n      selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n      selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loadTreeProperties: true,\n          openModal: true,\n          clickedItem,\n          operation: \"update\",\n          ncontrolcode: editId,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchStorageCategory(param) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': param.userInfo\n    }).then(response => {\n      const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, true);\n      const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          storageCategoryList,\n          openModal: true,\n          selectedRecord: {\n            nstoragecategorycode: param.nfilterStorageCategory\n          },\n          loadTreeProperties: false,\n          treeData: [{\n            text: intl.formatMessage({\n              id: \"IDS_ROOT\"\n            }),\n            expanded: true,\n            editable: true,\n            root: true,\n            id: param.id\n          }],\n          operation: \"create\",\n          loading: false,\n          isOnlyDraft: false,\n          ncontrolcode: param.addId\n        }\n      });\n    }) // rsapi.post(\"/storagecategory/getStorageCategory\",\n    //     { 'userinfo': param.userInfo })\n    //     .then(response => {\n    //         const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\",\n    //             \"sstoragecategoryname\", undefined, undefined, true);\n    //         const storageCategoryList = storageCategoryMap.get(\"OptionList\");\n    //         dispatch({\n    //             type: DEFAULT_RETURN,\n    //             payload: {\n    //                 storageCategoryList, openModal: true, selectedRecord: {nstoragecategorycode: param.nfilterStorageCategory}, loadTreeProperties: false,\n    //                 treeData: [\n    //                     {\n    //                         text: \"root\",\n    //                         expanded: true,\n    //                         editable: true,\n    //                         root: true,\n    //                         id: param.id,\n    //                     },\n    //                 ], operation: \"create\",\n    //                 loading: false,\n    //                 isOnlyDraft: false,\n    //                 ncontrolcode: param.addId\n    //             }\n    //         });\n    //     })\n    .catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const changeStorageCategoryFilter = (inputParam, filterStorageCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getSampleStorageLocationByCategory\", inputParam.inputData).then(response => {\n      const masterData = response.data; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterStorageCategory,\n            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function copySampleStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/copySampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"sampleStorageVersionCode\": parseInt(inputParam.nsamplestorageversioncode),\n      \"sampleStorageLocationCode\": parseInt(inputParam.nsamplestoragelocationcode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n        sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const crudSampleStorageLocation = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/\" + inputParam.operation + \"SampleStorageLocation\", { ...inputParam.inputData\n    }).then(response => {\n      // sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            sampleStorageLocation: response.data[\"sampleStorageLocation\"],\n            selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\n            sampleStorageVersion: response.data[\"sampleStorageVersion\"],\n            selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"],\n            filterStorageCategory: response.data[\"filterStorageCategory\"],\n            selectedStorageCategoryName: response.data[\"selectedStorageCategoryName\"]\n          },\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: error.message,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterStatus: error.response.data,\n            errorCode: error.response.status,\n            loadEsign: false,\n            loading: false\n          }\n        });\n      } // toast.error(error.message);\n\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SampleStorageLocationAction.js"],"names":["rsapi","DEFAULT_RETURN","REQUEST_FAILURE","initRequest","sortData","constructOptionList","toast","Axios","intl","getSelectedSampleStorageLocation","inputParam","userInfo","masterData","dispatch","post","parseInt","nsamplestoragelocationcode","then","response","selectedSampleStorageLocation","data","sampleStorageVersion","selectedSampleStorageVersion","type","payload","loading","catch","error","status","message","warn","getSelectedSampleStorageVersion","nsamplestorageversioncode","editSampleStorageLocation","isOnlyDraft","editId","selectedRecord","urlArray","getSampleStorageService","geStorageCategory","all","storageCategoryMap","undefined","storageCategoryList","get","map","item","value","label","treeData","JSON","parse","openModal","operation","loadTreeProperties","ncontrolcode","approveSampleStorageLocation","openPropertyModal","clickedItem","locationlastnode","containerfirstnode","containerlastnode","fetchStorageCategory","param","nstoragecategorycode","nfilterStorageCategory","text","formatMessage","id","expanded","editable","root","addId","changeStorageCategoryFilter","filterStorageCategory","inputData","copySampleStorageVersion","crudSampleStorageLocation","sampleStorageLocation","selectedStorageCategoryName","masterStatus","errorCode","loadEsign"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getSelectedSampleStorageLocation(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            { 'userinfo': userInfo, \"nsamplestoragelocationcode\": parseInt(inputParam.nsamplestoragelocationcode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                    sampleStorageVersion: response.data[\"sampleStorageVersion\"],\r\n                    selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedSampleStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function editSampleStorageLocation(inputParam, userInfo, isOnlyDraft, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n        const getSampleStorageService = rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode });\r\n\r\n        const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            { 'userinfo': userInfo });\r\n\r\n\r\n        urlArray = [getSampleStorageService, geStorageCategory];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                // masterData = {\r\n                //     ...masterData\r\n                // };\r\n\r\n                selectedRecord[\"ssamplestoragelocationname\"] = response[0].data[\"selectedSampleStorageVersion\"][\"ssamplestoragelocationname\"]\r\n                const storageCategoryMap = constructOptionList(response[1].data || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n                const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n                storageCategoryList.map(item => item.value === response[0].data[\"selectedSampleStorageVersion\"][\"nstoragecategorycode\"] ?\r\n                    selectedRecord[\"nstoragecategorycode\"] = {\r\n                        \"label\": item.label,\r\n                        \"value\": item.value,\r\n                        \"item\": item.item\r\n                    }\r\n                    : \"\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // masterData,\r\n                        loading: false,\r\n                        treeData: JSON.parse(response[0].data[\"selectedSampleStorageVersion\"][\"jsondata\"].value).data,\r\n                        selectedRecord, openModal: true, operation: \"update\", loadTreeProperties: false, storageCategoryList,\r\n                        isOnlyDraft, ncontrolcode: editId\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function approveSampleStorageLocation(userInfo, masterData) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/ApproveSampleStorageLocation\",\r\n            {\r\n                'userinfo': userInfo, \"approvalStatus\": masterData.selectedSampleStorageVersion[\"napprovalstatus\"], \"sampleStorageVersionCode\": masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"],\r\n                \"sampleStorageLocationCode\": masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, sampleStorageVersion: response.data[\"sampleStorageVersion\"], selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// export const openPropertyModal = (clickedItem, editId) => (dispatch) => {\r\n//     let selectedRecord = {};\r\n//     selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\r\n//     selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\r\n//     selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\r\n\r\n\r\n//     dispatch({\r\n//         type: DEFAULT_RETURN,\r\n//         payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\", ncontrolcode: editId }\r\n//     });\r\n// };\r\n\r\nexport function openPropertyModal(inputParam, userInfo, clickedItem, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSampleStorageVersionByID\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": inputParam.nsamplestorageversioncode,\"nsamplestoragelocationcode\": inputParam.nsamplestoragelocationcode })\r\n            .then(response => {\r\n\r\n                // masterData = {\r\n                //     ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                // };\r\n                // sortData(masterData);\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {                       \r\n                //         loading: false\r\n\r\n                //     }\r\n                // });\r\n\r\n                let selectedRecord = {};\r\n                selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\r\n                selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\r\n                selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\r\n            \r\n            \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { selectedRecord, loadTreeProperties: true, openModal: true, clickedItem, operation: \"update\", ncontrolcode: editId, loading: false }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function fetchStorageCategory(param) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            { 'userinfo': param.userInfo })\r\n            .then(response => {\r\n                const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n                const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        storageCategoryList, openModal: true, selectedRecord: { nstoragecategorycode: param.nfilterStorageCategory }, loadTreeProperties: false,\r\n                        treeData: [\r\n                            {\r\n                                text: intl.formatMessage({ id: \"IDS_ROOT\"}),\r\n                                expanded: true,\r\n                                editable: true,\r\n                                root: true,\r\n                                id: param.id,\r\n                            },\r\n                        ], operation: \"create\",\r\n                        loading: false,\r\n                        isOnlyDraft: false,\r\n                        ncontrolcode: param.addId\r\n                    }\r\n                });\r\n            })\r\n            // rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            //     { 'userinfo': param.userInfo })\r\n            //     .then(response => {\r\n\r\n            //         const storageCategoryMap = constructOptionList(response.data || [], \"nstoragecategorycode\",\r\n            //             \"sstoragecategoryname\", undefined, undefined, true);\r\n\r\n            //         const storageCategoryList = storageCategoryMap.get(\"OptionList\");\r\n\r\n\r\n            //         dispatch({\r\n            //             type: DEFAULT_RETURN,\r\n            //             payload: {\r\n            //                 storageCategoryList, openModal: true, selectedRecord: {nstoragecategorycode: param.nfilterStorageCategory}, loadTreeProperties: false,\r\n            //                 treeData: [\r\n            //                     {\r\n            //                         text: \"root\",\r\n            //                         expanded: true,\r\n            //                         editable: true,\r\n            //                         root: true,\r\n            //                         id: param.id,\r\n            //                     },\r\n            //                 ], operation: \"create\",\r\n            //                 loading: false,\r\n            //                 isOnlyDraft: false,\r\n            //                 ncontrolcode: param.addId\r\n            //             }\r\n            //         });\r\n            //     })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeStorageCategoryFilter = (inputParam, filterStorageCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getSampleStorageLocationByCategory\", inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                // sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterStorageCategory,\r\n                            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory,\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function copySampleStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/copySampleStorageVersion\",\r\n            {\r\n                'userinfo': userInfo, \"sampleStorageVersionCode\": parseInt(inputParam.nsamplestorageversioncode),\r\n                \"sampleStorageLocationCode\": parseInt(inputParam.nsamplestoragelocationcode)\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                    sampleStorageVersion: response.data[\"sampleStorageVersion\"],\r\n                    selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const crudSampleStorageLocation = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/\" + inputParam.operation + \"SampleStorageLocation\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                // sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData, sampleStorageLocation: response.data[\"sampleStorageLocation\"], selectedSampleStorageLocation: response.data[\"selectedSampleStorageLocation\"],\r\n                            sampleStorageVersion: response.data[\"sampleStorageVersion\"], selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"],\r\n                            filterStorageCategory: response.data[\"filterStorageCategory\"], selectedStorageCategoryName: response.data[\"selectedStorageCategoryName\"]\r\n\r\n                        },\r\n                        openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    dispatch({\r\n                        type: REQUEST_FAILURE,\r\n                        payload: {\r\n                            error: error.message,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterStatus: error.response.data,\r\n                            errorCode: error.response.status,\r\n                            loadEsign: false,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // toast.error(error.message);\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}