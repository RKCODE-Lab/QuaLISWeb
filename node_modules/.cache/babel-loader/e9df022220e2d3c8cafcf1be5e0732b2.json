{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\EditTestGroupTest.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport { injectIntl } from 'react-intl';\n\nconst EditTestGroupTest = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"stestsynonym\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TESTSYNONYM\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTSYNONYM\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"stestsynonym\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SECTION\"\n    }),\n    name: \"nsectioncode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: true,\n    options: props.testGroupInputData.section,\n    optionId: \"nsectioncode\",\n    optionValue: \"ssectionname\",\n    onChange: value => props.onComboChange(value, \"nsectioncode\", 1),\n    value: props.selectedRecord ? props.selectedRecord[\"nsectioncode\"] : -1,\n    isSearchable: true,\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_METHOD\"\n    }),\n    name: \"nmethodcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: false,\n    options: props.testGroupInputData.method,\n    optionId: \"nmethodcode\",\n    optionValue: \"smethodname\",\n    onChange: value => props.onComboChange(value, \"nmethodcode\", 1),\n    value: props.selectedRecord ? props.selectedRecord[\"nmethodcode\"] : \"\",\n    isSearchable: true,\n    alphabeticalSort: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENTCATEGORY\"\n    }),\n    name: \"ninstrumentcatcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: false,\n    options: props.testGroupInputData.instrumentCategory,\n    optionId: \"ninstrumentcatcode\",\n    optionValue: \"sinstrumentcatname\",\n    onChange: value => props.onComboChange(value, \"ninstrumentcatcode\", 1),\n    value: props.selectedRecord ? props.selectedRecord[\"ninstrumentcatcode\"] : \"\",\n    isSearchable: true,\n    alphabeticalSort: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CONTAINERTYPE\"\n    }),\n    name: \"ncontainertypecode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: false,\n    options: props.testGroupInputData.containerType,\n    optionId: \"ncontainertypecode\",\n    optionValue: \"scontainertype\",\n    onChange: value => props.onComboChange(value, \"ncontainertypecode\", 1),\n    value: props.selectedRecord ? props.selectedRecord[\"ncontainertypecode\"] : \"\",\n    isSearchable: true,\n    alphabeticalSort: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_ATTACHMENT\"\n    }),\n    name: \"ntestfilecode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLEASESELECT\"\n    }),\n    isMandatory: false,\n    options: props.testGroupInputData.testFile,\n    optionId: \"ntestfilecode\",\n    optionValue: \"sfilename\",\n    onChange: value => props.onComboChange(value, \"ntestfilecode\", 1),\n    value: props.selectedRecord ? props.selectedRecord[\"ntestfilecode\"] : \"\",\n    isSearchable: true,\n    alphabeticalSort: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"ncost\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PRICE\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"ncost\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PRICE\"\n    }),\n    strict: true,\n    maxLength: 10,\n    onChange: value => props.onNumericInputChange(value, \"ncost\"),\n    noStyle: true,\n    precision: 2,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"nsorter\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SORTER\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"nsorter\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SORTER\"\n    }),\n    strict: true,\n    maxLength: 3,\n    onChange: value => props.onNumericInputChange(value, \"nsorter\"),\n    noStyle: true,\n    precision: 0,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"nrepeatcountno\",\n    label: props.intl.formatMessage({\n      id: \"IDS_REPLICATECOUNT\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"nrepeatcountno\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_REPEATCOUNTNO\"\n    }),\n    strict: true,\n    maxLength: 3,\n    onChange: value => props.onNumericInputChange(value, \"nrepeatcountno\"),\n    noStyle: true,\n    precision: 0,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(EditTestGroupTest);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/EditTestGroupTest.jsx"],"names":["React","Row","Col","FormInput","FormSelectSearch","FormNumericInput","injectIntl","EditTestGroupTest","props","intl","formatMessage","id","event","onInputOnChange","selectedRecord","testGroupInputData","section","value","onComboChange","method","instrumentCategory","containerType","testFile","onNumericInputChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nconst EditTestGroupTest = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormInput\r\n                    name={\"stestsynonym\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"stestsynonym\"] : \"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                {/* <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_SOURCE\" })}\r\n                    name={\"nsourcecode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={true}\r\n                    options={props.testGroupInputData.source}\r\n                    optionId='nsourcecode'\r\n                    optionValue='ssourcename'\r\n                    onChange={value => props.onComboChange(value, \"nsourcecode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nsourcecode\"] : -1}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch> */}\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_SECTION\" })}\r\n                    name={\"nsectioncode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={true}\r\n                    options={props.testGroupInputData.section}\r\n                    optionId='nsectioncode'\r\n                    optionValue='ssectionname'\r\n                    onChange={value => props.onComboChange(value, \"nsectioncode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nsectioncode\"] : -1}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_METHOD\" })}\r\n                    name={\"nmethodcode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.method}\r\n                    optionId='nmethodcode'\r\n                    optionValue='smethodname'\r\n                    onChange={value => props.onComboChange(value, \"nmethodcode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"nmethodcode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORY\" })}\r\n                    name={\"ninstrumentcatcode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.instrumentCategory}\r\n                    optionId='ninstrumentcatcode'\r\n                    optionValue='sinstrumentcatname'\r\n                    onChange={value => props.onComboChange(value, \"ninstrumentcatcode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ninstrumentcatcode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_CONTAINERTYPE\" })}\r\n                    name={\"ncontainertypecode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.containerType}\r\n                    optionId='ncontainertypecode'\r\n                    optionValue='scontainertype'\r\n                    onChange={value => props.onComboChange(value, \"ncontainertypecode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ncontainertypecode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_ATTACHMENT\" })}\r\n                    name={\"ntestfilecode\"}\r\n                    isDisabled={false}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PLEASESELECT\" })}\r\n                    isMandatory={false}\r\n                    options={props.testGroupInputData.testFile}\r\n                    optionId='ntestfilecode'\r\n                    optionValue='sfilename'\r\n                    onChange={value => props.onComboChange(value, \"ntestfilecode\", 1)}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ntestfilecode\"] : \"\"}\r\n                    isSearchable={true}\r\n                    alphabeticalSort={true}\r\n                    isClearable={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormNumericInput\r\n                    name={\"ncost\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"ncost\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    strict={true}\r\n                    maxLength={10}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"ncost\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n                <FormNumericInput\r\n                    name={\"nsorter\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_SORTER\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nsorter\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SORTER\" })}\r\n                    strict={true}\r\n                    maxLength={3}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nsorter\")}\r\n                    noStyle={true}\r\n                    precision={0}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n                <FormNumericInput\r\n                    name={\"nrepeatcountno\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_REPLICATECOUNT\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"nrepeatcountno\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_REPEATCOUNTNO\" })}\r\n                    strict={true}\r\n                    maxLength={3}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"nrepeatcountno\")}\r\n                    noStyle={true}\r\n                    precision={0}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default injectIntl(EditTestGroupTest);"]},"metadata":{},"sourceType":"module"}