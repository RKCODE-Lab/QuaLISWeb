{"ast":null,"code":"'use strict';\n\nvar _ = require('underscore');\n\nvar ValuesStore = require('../../utils/valuesStore');\n\nvar objectUtils = require('../../utils/object');\n\nvar templatesInit = require('./templates');\n\nvar blocksInit = require('./blocks');\n\nvar operatorsInit = require('./operators');\n\nvar modifiersInit = require('./modifiers');\n\nvar blockRegExp = /\\{([a-z0-9]+)\\}(.|$)/ig;\n\nvar Dialect = module.exports = function (builder) {\n  this.builder = builder;\n  this.templates = new ValuesStore();\n  this.blocks = new ValuesStore();\n  this.operators = {\n    comparison: new ValuesStore(),\n    logical: new ValuesStore(),\n    fetching: new ValuesStore(),\n    state: new ValuesStore()\n  };\n  this.modifiers = new ValuesStore(); // init templates\n\n  templatesInit(this); // init blocks\n\n  blocksInit(this); // init operators\n\n  operatorsInit(this); // init modifiers\n\n  modifiersInit(this);\n  this.identifierPartsRegexp = new RegExp('(\\\\' + this.config.identifierPrefix + '[^\\\\' + this.config.identifierSuffix + ']*\\\\' + this.config.identifierSuffix + '|[^\\\\.]+)', 'g');\n  this.wrappedIdentifierPartRegexp = new RegExp('^\\\\' + this.config.identifierPrefix + '.*\\\\' + this.config.identifierSuffix + '$');\n};\n\nDialect.prototype.config = {\n  identifierPrefix: '\"',\n  identifierSuffix: '\"'\n};\n\nDialect.prototype._wrapIdentifier = function (name) {\n  if (this.builder.options.wrappedIdentifiers) {\n    var self = this;\n    var nameParts = name.match(this.identifierPartsRegexp);\n    return _(nameParts).map(function (namePart) {\n      if (namePart !== '*' && !self.wrappedIdentifierPartRegexp.test(namePart)) {\n        namePart = self.config.identifierPrefix + namePart + self.config.identifierSuffix;\n      }\n\n      return namePart;\n    }).join('.');\n  }\n\n  return name;\n};\n\nDialect.prototype.buildLogicalOperator = function (params) {\n  var self = this;\n  var operator = params.operator;\n  var value = params.value;\n\n  if (objectUtils.isSimpleValue(value)) {\n    value = _.object([params.defaultFetchingOperator], [value]);\n  }\n\n  if (_.isEmpty(value)) return '';\n  var result;\n\n  if (_.isArray(value)) {\n    // if value is array: [{a: 1}, {b: 2}] process each item as logical operator\n    result = _(value).map(function (item) {\n      return self.buildOperator({\n        context: 'logical',\n        contextOperator: operator,\n        operator: '$and',\n        value: item,\n        states: [],\n        defaultFetchingOperator: params.defaultFetchingOperator\n      });\n    });\n  } else {\n    result = _(value).map(function (item, field) {\n      // if field name is not a operator convert it to {$field: {name: 'a', $eq: 'b'}}\n      if (field[0] !== '$') {\n        if (objectUtils.isSimpleValue(item) || _.isArray(item)) {\n          item = {\n            $eq: item\n          };\n        }\n\n        item = _.defaults({\n          name: field\n        }, item);\n        field = '$field';\n      }\n\n      return self.buildOperator({\n        context: 'logical',\n        contextOperator: operator,\n        operator: field,\n        value: item,\n        states: [],\n        defaultFetchingOperator: params.defaultFetchingOperator\n      });\n    });\n  }\n\n  return this.operators.logical.get(operator).fn(_.compact(result));\n};\n\nDialect.prototype.buildComparisonOperator = function (params) {\n  var self = this;\n  var operator = params.operator;\n\n  _(params.states).each(function (state) {\n    operator = self.operators.state.get(state).getOperator(operator);\n  });\n\n  var operatorParams = this.operators.comparison.get(operator);\n  var value = this.buildEndFetchingOperator({\n    context: 'comparison',\n    contextOperator: operator,\n    value: params.value,\n    states: params.states,\n    defaultFetchingOperator: operatorParams.defaultFetchingOperator || params.defaultFetchingOperator\n  });\n  return operatorParams.fn(params.field, value);\n};\n\nDialect.prototype.buildFetchingOperator = function (params) {\n  var operator = params.operator;\n  var value = params.value;\n  var field = this.operators.fetching.get(operator).fn(value, params.end);\n  var result;\n\n  if (params.end || objectUtils.isSimpleValue(value)) {\n    result = field;\n  } else {\n    result = this.buildOperatorsGroup({\n      context: 'fetching',\n      contextOperator: operator,\n      operator: '$and',\n      field: field,\n      value: value,\n      states: params.states,\n      defaultFetchingOperator: params.defaultFetchingOperator\n    });\n  }\n\n  return result;\n};\n\nDialect.prototype.buildEndFetchingOperator = function (params) {\n  var self = this;\n  var value = params.value;\n  var operator;\n\n  if (objectUtils.isObjectObject(value)) {\n    // get first query operator\n    operator = _(value).findKey(function (item, operator) {\n      return operator[0] === '$' && self.operators.fetching.has(operator);\n    });\n\n    if (operator) {\n      value = value[operator];\n    }\n  }\n\n  return this.buildOperator(_.extend({}, params, {\n    operator: operator || params.defaultFetchingOperator,\n    value: value,\n    end: true\n  }));\n};\n\nDialect.prototype.buildStateOperator = function (params) {\n  return this.buildOperatorsGroup(_.extend({}, params, {\n    context: 'state',\n    contextOperator: params.operator,\n    operator: '$and',\n    states: params.states.concat(params.operator)\n  }));\n};\n\nDialect.prototype.buildOperatorsGroup = function (params) {\n  var self = this;\n  var value = params.value;\n  var result;\n\n  if (objectUtils.isObjectObject(value)) {\n    result = this.operators.logical.get(params.operator).fn(_(value).chain().map(function (item, operator) {\n      if (operator[0] !== '$') return '';\n\n      if (self.operators.fetching.has(operator)) {\n        // convert {a: {$field: 'b'}} to {a: {$eq: {$field: 'b'}}}\n        item = _.object([operator], [item]);\n        operator = '$eq';\n      }\n\n      return self.buildOperator(_.extend({}, params, {\n        operator: operator,\n        value: item\n      }));\n    }).compact().value());\n    if (!result) result = params.field;\n  } else {\n    result = this.buildEndFetchingOperator(params);\n  }\n\n  return result;\n};\n\nDialect.prototype.buildOperator = function (params) {\n  var isContextValid = function isContextValid(expectedContexts, context) {\n    return _.contains(expectedContexts, context);\n  };\n\n  var context = params.context;\n  var operator = params.operator;\n  var result;\n\n  var contexts = _(this.operators).mapObject(function (operatorsGroup) {\n    return operatorsGroup.has(operator);\n  });\n\n  if (!_(contexts).some()) {\n    throw new Error('Unknown operator \"' + operator + '\"');\n  }\n\n  if (contexts.logical && isContextValid(['null', 'logical'], context)) {\n    result = this.buildLogicalOperator(params);\n  } else if (contexts.fetching && isContextValid(['logical', 'comparison'], context)) {\n    result = this.buildFetchingOperator(params);\n  } else if (contexts.comparison && isContextValid(['fetching', 'state'], context)) {\n    result = this.buildComparisonOperator(params);\n  } else if (contexts.state && isContextValid(['fetching', 'state'], context)) {\n    result = this.buildStateOperator(params);\n  } else {\n    var errMessage = 'Unexpected operator \"' + operator + '\" at ' + (context === 'null' ? 'null ' : '') + 'context';\n\n    if (params.contextOperator) {\n      errMessage += ' of operator \"' + params.contextOperator + '\"';\n    }\n\n    throw new Error(errMessage);\n  }\n\n  return result;\n};\n\nDialect.prototype.buildCondition = function (params) {\n  return this.buildOperator({\n    context: 'null',\n    operator: '$and',\n    value: params.value,\n    states: [],\n    defaultFetchingOperator: params.defaultFetchingOperator\n  });\n};\n\nDialect.prototype.buildModifier = function (params) {\n  var self = this;\n  return _(params.modifier).chain().map(function (values, field) {\n    var modifier;\n\n    if (field[0] === '$') {\n      modifier = field;\n    } else {\n      modifier = '$set';\n      values = _.object([field], [values]);\n    }\n\n    var modifierFn = self.modifiers.get(modifier);\n\n    if (!modifierFn) {\n      throw new Error('Unknown modifier \"' + modifier + '\"');\n    }\n\n    return _(values).map(function (value, field) {\n      field = self._wrapIdentifier(field);\n      value = self.buildBlock('term', {\n        term: value,\n        type: 'value'\n      });\n      return modifierFn(field, value);\n    });\n  }).flatten().compact().value().join(', ');\n};\n\nDialect.prototype.buildBlock = function (block, params) {\n  var blockFn = this.blocks.get(block);\n\n  if (!blockFn) {\n    throw new Error('Unknown block \"' + block + '\"');\n  }\n\n  return blockFn(params);\n};\n\nDialect.prototype.buildTemplate = function (type, params) {\n  var self = this;\n  var template = this.templates.get(type);\n\n  if (!template) {\n    throw new Error('Unknown template type \"' + type + '\"');\n  }\n\n  params = _.defaults({}, params, template.defaults);\n\n  if (template.validate) {\n    template.validate(type, params);\n  }\n\n  return template.pattern.replace(blockRegExp, function (fullMatch, block, space) {\n    if (_.isUndefined(params[block])) {\n      return '';\n    } else {\n      if (self.blocks.has(type + ':' + block)) block = type + ':' + block;\n      return self.buildBlock(block, params) + space;\n    }\n  }).trim();\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/json-sql/lib/dialects/base/index.js"],"names":["_","require","ValuesStore","objectUtils","templatesInit","blocksInit","operatorsInit","modifiersInit","blockRegExp","Dialect","module","exports","builder","templates","blocks","operators","comparison","logical","fetching","state","modifiers","identifierPartsRegexp","RegExp","config","identifierPrefix","identifierSuffix","wrappedIdentifierPartRegexp","prototype","_wrapIdentifier","name","options","wrappedIdentifiers","self","nameParts","match","map","namePart","test","join","buildLogicalOperator","params","operator","value","isSimpleValue","object","defaultFetchingOperator","isEmpty","result","isArray","item","buildOperator","context","contextOperator","states","field","$eq","defaults","get","fn","compact","buildComparisonOperator","each","getOperator","operatorParams","buildEndFetchingOperator","buildFetchingOperator","end","buildOperatorsGroup","isObjectObject","findKey","has","extend","buildStateOperator","concat","chain","isContextValid","expectedContexts","contains","contexts","mapObject","operatorsGroup","some","Error","errMessage","buildCondition","buildModifier","modifier","values","modifierFn","buildBlock","term","type","flatten","block","blockFn","buildTemplate","template","validate","pattern","replace","fullMatch","space","isUndefined","trim"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\nvar ValuesStore = require('../../utils/valuesStore');\nvar objectUtils = require('../../utils/object');\n\nvar templatesInit = require('./templates');\nvar blocksInit = require('./blocks');\nvar operatorsInit = require('./operators');\nvar modifiersInit = require('./modifiers');\n\nvar blockRegExp = /\\{([a-z0-9]+)\\}(.|$)/ig;\n\nvar Dialect = module.exports = function(builder) {\n\tthis.builder = builder;\n\n\tthis.templates = new ValuesStore();\n\tthis.blocks = new ValuesStore();\n\tthis.operators = {\n\t\tcomparison: new ValuesStore(),\n\t\tlogical: new ValuesStore(),\n\t\tfetching: new ValuesStore(),\n\t\tstate: new ValuesStore()\n\t};\n\tthis.modifiers = new ValuesStore();\n\n\t// init templates\n\ttemplatesInit(this);\n\n\t// init blocks\n\tblocksInit(this);\n\n\t// init operators\n\toperatorsInit(this);\n\n\t// init modifiers\n\tmodifiersInit(this);\n\n\tthis.identifierPartsRegexp = new RegExp(\n\t\t'(\\\\' + this.config.identifierPrefix + '[^\\\\' + this.config.identifierSuffix + ']*\\\\' +\n\t\t\tthis.config.identifierSuffix + '|[^\\\\.]+)', 'g'\n\t);\n\tthis.wrappedIdentifierPartRegexp = new RegExp(\n\t\t'^\\\\' + this.config.identifierPrefix + '.*\\\\' + this.config.identifierSuffix + '$'\n\t);\n};\n\nDialect.prototype.config = {\n\tidentifierPrefix: '\"',\n\tidentifierSuffix: '\"'\n};\n\nDialect.prototype._wrapIdentifier = function(name) {\n\tif (this.builder.options.wrappedIdentifiers) {\n\t\tvar self = this;\n\t\tvar nameParts = name.match(this.identifierPartsRegexp);\n\n\t\treturn _(nameParts).map(function(namePart) {\n\t\t\tif (namePart !== '*' && !self.wrappedIdentifierPartRegexp.test(namePart)) {\n\t\t\t\tnamePart = self.config.identifierPrefix + namePart + self.config.identifierSuffix;\n\t\t\t}\n\n\t\t\treturn namePart;\n\t\t}).join('.');\n\t}\n\n\treturn name;\n};\n\nDialect.prototype.buildLogicalOperator = function(params) {\n\tvar self = this;\n\n\tvar operator = params.operator;\n\tvar value = params.value;\n\n\tif (objectUtils.isSimpleValue(value)) {\n\t\tvalue = _.object([params.defaultFetchingOperator], [value]);\n\t}\n\n\tif (_.isEmpty(value)) return '';\n\n\tvar result;\n\n\tif (_.isArray(value)) {\n\t\t// if value is array: [{a: 1}, {b: 2}] process each item as logical operator\n\t\tresult = _(value).map(function(item) {\n\t\t\treturn self.buildOperator({\n\t\t\t\tcontext: 'logical',\n\t\t\t\tcontextOperator: operator,\n\t\t\t\toperator: '$and',\n\t\t\t\tvalue: item,\n\t\t\t\tstates: [],\n\t\t\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t\t\t});\n\t\t});\n\t} else {\n\t\tresult = _(value).map(function(item, field) {\n\t\t\t// if field name is not a operator convert it to {$field: {name: 'a', $eq: 'b'}}\n\t\t\tif (field[0] !== '$') {\n\t\t\t\tif (objectUtils.isSimpleValue(item) || _.isArray(item)) {\n\t\t\t\t\titem = {$eq: item};\n\t\t\t\t}\n\t\t\t\titem = _.defaults({name: field}, item);\n\t\t\t\tfield = '$field';\n\t\t\t}\n\n\t\t\treturn self.buildOperator({\n\t\t\t\tcontext: 'logical',\n\t\t\t\tcontextOperator: operator,\n\t\t\t\toperator: field,\n\t\t\t\tvalue: item,\n\t\t\t\tstates: [],\n\t\t\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t\t\t});\n\t\t});\n\t}\n\n\treturn this.operators.logical.get(operator).fn(_.compact(result));\n};\n\nDialect.prototype.buildComparisonOperator = function(params) {\n\tvar self = this;\n\n\tvar operator = params.operator;\n\n\t_(params.states).each(function(state) {\n\t\toperator = self.operators.state.get(state).getOperator(operator);\n\t});\n\n\tvar operatorParams = this.operators.comparison.get(operator);\n\n\tvar value = this.buildEndFetchingOperator({\n\t\tcontext: 'comparison',\n\t\tcontextOperator: operator,\n\t\tvalue: params.value,\n\t\tstates: params.states,\n\t\tdefaultFetchingOperator: operatorParams.defaultFetchingOperator ||\n\t\t\tparams.defaultFetchingOperator\n\t});\n\n\treturn operatorParams.fn(params.field, value);\n};\n\nDialect.prototype.buildFetchingOperator = function(params) {\n\tvar operator = params.operator;\n\tvar value = params.value;\n\n\tvar field = this.operators.fetching.get(operator).fn(value, params.end);\n\n\tvar result;\n\tif (params.end || objectUtils.isSimpleValue(value)) {\n\t\tresult = field;\n\t} else {\n\t\tresult = this.buildOperatorsGroup({\n\t\t\tcontext: 'fetching',\n\t\t\tcontextOperator: operator,\n\t\t\toperator: '$and',\n\t\t\tfield: field,\n\t\t\tvalue: value,\n\t\t\tstates: params.states,\n\t\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t\t});\n\t}\n\n\treturn result;\n};\n\nDialect.prototype.buildEndFetchingOperator = function(params) {\n\tvar self = this;\n\n\tvar value = params.value;\n\tvar operator;\n\n\tif (objectUtils.isObjectObject(value)) {\n\t\t// get first query operator\n\t\toperator = _(value).findKey(function(item, operator) {\n\t\t\treturn operator[0] === '$' && self.operators.fetching.has(operator);\n\t\t});\n\n\t\tif (operator) {\n\t\t\tvalue = value[operator];\n\t\t}\n\t}\n\n\treturn this.buildOperator(_.extend({}, params, {\n\t\toperator: operator || params.defaultFetchingOperator,\n\t\tvalue: value,\n\t\tend: true\n\t}));\n};\n\nDialect.prototype.buildStateOperator = function(params) {\n\treturn this.buildOperatorsGroup(_.extend({}, params, {\n\t\tcontext: 'state',\n\t\tcontextOperator: params.operator,\n\t\toperator: '$and',\n\t\tstates: params.states.concat(params.operator)\n\t}));\n};\n\nDialect.prototype.buildOperatorsGroup = function(params) {\n\tvar self = this;\n\n\tvar value = params.value;\n\n\tvar result;\n\tif (objectUtils.isObjectObject(value)) {\n\t\tresult = this.operators.logical.get(params.operator).fn(\n\t\t\t_(value)\n\t\t\t\t.chain()\n\t\t\t\t.map(function(item, operator) {\n\t\t\t\t\tif (operator[0] !== '$') return '';\n\n\t\t\t\t\tif (self.operators.fetching.has(operator)) {\n\t\t\t\t\t\t// convert {a: {$field: 'b'}} to {a: {$eq: {$field: 'b'}}}\n\t\t\t\t\t\titem = _.object([operator], [item]);\n\t\t\t\t\t\toperator = '$eq';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn self.buildOperator(_.extend({}, params, {\n\t\t\t\t\t\toperator: operator,\n\t\t\t\t\t\tvalue: item\n\t\t\t\t\t}));\n\t\t\t\t})\n\t\t\t\t.compact()\n\t\t\t\t.value()\n\t\t);\n\n\t\tif (!result) result = params.field;\n\t} else {\n\t\tresult = this.buildEndFetchingOperator(params);\n\t}\n\n\treturn result;\n};\n\nDialect.prototype.buildOperator = function(params) {\n\tvar isContextValid = function(expectedContexts, context) {\n\t\treturn _.contains(expectedContexts, context);\n\t};\n\n\tvar context = params.context;\n\tvar operator = params.operator;\n\n\tvar result;\n\n\tvar contexts = _(this.operators).mapObject(function(operatorsGroup) {\n\t\treturn operatorsGroup.has(operator);\n\t});\n\n\tif (!_(contexts).some()) {\n\t\tthrow new Error('Unknown operator \"' + operator + '\"');\n\t}\n\n\tif (contexts.logical && isContextValid(['null', 'logical'], context)) {\n\t\tresult = this.buildLogicalOperator(params);\n\t} else if (contexts.fetching && isContextValid(['logical', 'comparison'], context)) {\n\t\tresult = this.buildFetchingOperator(params);\n\t} else if (contexts.comparison && isContextValid(['fetching', 'state'], context)) {\n\t\tresult = this.buildComparisonOperator(params);\n\t} else if (contexts.state && isContextValid(['fetching', 'state'], context)) {\n\t\tresult = this.buildStateOperator(params);\n\t} else {\n\t\tvar errMessage = 'Unexpected operator \"' + operator + '\" at ' +\n\t\t\t(context === 'null' ? 'null ' : '') + 'context';\n\n\t\tif (params.contextOperator) {\n\t\t\terrMessage += ' of operator \"' + params.contextOperator + '\"';\n\t\t}\n\n\t\tthrow new Error(errMessage);\n\t}\n\n\treturn result;\n};\n\nDialect.prototype.buildCondition = function(params) {\n\treturn this.buildOperator({\n\t\tcontext: 'null',\n\t\toperator: '$and',\n\t\tvalue: params.value,\n\t\tstates: [],\n\t\tdefaultFetchingOperator: params.defaultFetchingOperator\n\t});\n};\n\nDialect.prototype.buildModifier = function(params) {\n\tvar self = this;\n\n\treturn _(params.modifier)\n\t\t.chain()\n\t\t.map(function(values, field) {\n\t\t\tvar modifier;\n\n\t\t\tif (field[0] === '$') {\n\t\t\t\tmodifier = field;\n\t\t\t} else {\n\t\t\t\tmodifier = '$set';\n\t\t\t\tvalues = _.object([field], [values]);\n\t\t\t}\n\n\t\t\tvar modifierFn = self.modifiers.get(modifier);\n\n\t\t\tif (!modifierFn) {\n\t\t\t\tthrow new Error('Unknown modifier \"' + modifier + '\"');\n\t\t\t}\n\n\t\t\treturn _(values).map(function(value, field) {\n\t\t\t\tfield = self._wrapIdentifier(field);\n\t\t\t\tvalue = self.buildBlock('term', {term: value, type: 'value'});\n\n\t\t\t\treturn modifierFn(field, value);\n\t\t\t});\n\t\t})\n\t\t.flatten()\n\t\t.compact()\n\t\t.value()\n\t\t.join(', ');\n};\n\nDialect.prototype.buildBlock = function(block, params) {\n\tvar blockFn = this.blocks.get(block);\n\n\tif (!blockFn) {\n\t\tthrow new Error('Unknown block \"' + block + '\"');\n\t}\n\n\treturn blockFn(params);\n};\n\nDialect.prototype.buildTemplate = function(type, params) {\n\tvar self = this;\n\n\tvar template = this.templates.get(type);\n\tif (!template) {\n\t\tthrow new Error('Unknown template type \"' + type + '\"');\n\t}\n\n\tparams = _.defaults({}, params, template.defaults);\n\n\tif (template.validate) {\n\t\ttemplate.validate(type, params);\n\t}\n\n\treturn template.pattern.replace(blockRegExp, function(fullMatch, block, space) {\n\t\tif (_.isUndefined(params[block])) {\n\t\t\treturn '';\n\t\t} else {\n\t\t\tif (self.blocks.has(type + ':' + block)) block = type + ':' + block;\n\t\t\treturn self.buildBlock(block, params) + space;\n\t\t}\n\t}).trim();\n};\n"]},"metadata":{},"sourceType":"script"}