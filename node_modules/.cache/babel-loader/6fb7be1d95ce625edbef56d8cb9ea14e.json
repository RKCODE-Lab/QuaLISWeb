{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\n/**\n * Represents the available `action` types for the `SchedulerSlotsSelectAction` objects.\n *\n * The available actions are:\n * - `SLOTS_SELECT_SELECT`\n * - `SLOTS_SELECT_RESET`\n * - `SLOTS_SELECT_ADD`\n */\n\nexport var SLOTS_SELECT_ACTION;\n\n(function (SLOTS_SELECT_ACTION) {\n  SLOTS_SELECT_ACTION[\"select\"] = \"SLOTS_SELECT_SELECT\";\n  SLOTS_SELECT_ACTION[\"reset\"] = \"SLOTS_SELECT_RESET\";\n  SLOTS_SELECT_ACTION[\"add\"] = \"SLOTS_SELECT_ADD\";\n})(SLOTS_SELECT_ACTION || (SLOTS_SELECT_ACTION = {}));\n/** @hidden */\n\n\nexport var useSlotsSelection = function (_slots) {\n  var _a = React.useState([]),\n      selectedSlots = _a[0],\n      setSelectedSlots = _a[1];\n\n  var handleSchedulerSlotsSelectAction = React.useCallback(function (action) {\n    switch (action.type) {\n      case SLOTS_SELECT_ACTION.select:\n        if (!action.slot) {\n          return;\n        }\n\n        setSelectedSlots([action.slot]);\n        break;\n\n      case SLOTS_SELECT_ACTION.reset:\n        setSelectedSlots([]);\n        break;\n\n      case SLOTS_SELECT_ACTION.add:\n        if (!action.slot) {\n          return;\n        }\n\n        if (!selectedSlots.some(function (ss) {\n          return ss === action.slot;\n        })) {\n          setSelectedSlots(__spreadArray(__spreadArray([], selectedSlots, true), [action.slot], false));\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }, [selectedSlots]);\n  return [selectedSlots, handleSchedulerSlotsSelectAction];\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@progress/kendo-react-scheduler/dist/es/hooks/use-slots-selection.js"],"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","React","SLOTS_SELECT_ACTION","useSlotsSelection","_slots","_a","useState","selectedSlots","setSelectedSlots","handleSchedulerSlotsSelectAction","useCallback","action","type","select","slot","reset","add","some","ss"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoBC,IAApB,EAA0B;AAC1E,MAAIA,IAAI,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAjC,EAAoC,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,IAAI,CAACG,MAApB,EAA4BG,EAAjC,EAAqCF,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;AACjF,QAAIE,EAAE,IAAI,EAAEF,CAAC,IAAIJ,IAAP,CAAV,EAAwB;AACpB,UAAI,CAACM,EAAL,EAASA,EAAE,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,IAA3B,EAAiC,CAAjC,EAAoCI,CAApC,CAAL;AACTE,MAAAA,EAAE,CAACF,CAAD,CAAF,GAAQJ,IAAI,CAACI,CAAD,CAAZ;AACH;AACJ;AACD,SAAOL,EAAE,CAACY,MAAH,CAAUL,EAAE,IAAIC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BV,IAA3B,CAAhB,CAAP;AACH,CARD;;AASA,OAAO,KAAKY,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAJ;;AACP,CAAC,UAAUA,mBAAV,EAA+B;AAC5BA,EAAAA,mBAAmB,CAAC,QAAD,CAAnB,GAAgC,qBAAhC;AACAA,EAAAA,mBAAmB,CAAC,OAAD,CAAnB,GAA+B,oBAA/B;AACAA,EAAAA,mBAAmB,CAAC,KAAD,CAAnB,GAA6B,kBAA7B;AACH,CAJD,EAIGA,mBAAmB,KAAKA,mBAAmB,GAAG,EAA3B,CAJtB;AAKA;;;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,MAAV,EAAkB;AAC7C,MAAIC,EAAE,GAAGJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAT;AAAA,MAA6BC,aAAa,GAAGF,EAAE,CAAC,CAAD,CAA/C;AAAA,MAAoDG,gBAAgB,GAAGH,EAAE,CAAC,CAAD,CAAzE;;AACA,MAAII,gCAAgC,GAAGR,KAAK,CAACS,WAAN,CAAkB,UAAUC,MAAV,EAAkB;AACvE,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKV,mBAAmB,CAACW,MAAzB;AACI,YAAI,CAACF,MAAM,CAACG,IAAZ,EAAkB;AACd;AACH;;AACDN,QAAAA,gBAAgB,CAAC,CAACG,MAAM,CAACG,IAAR,CAAD,CAAhB;AACA;;AACJ,WAAKZ,mBAAmB,CAACa,KAAzB;AACIP,QAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACA;;AACJ,WAAKN,mBAAmB,CAACc,GAAzB;AACI,YAAI,CAACL,MAAM,CAACG,IAAZ,EAAkB;AACd;AACH;;AACD,YAAI,CAACP,aAAa,CAACU,IAAd,CAAmB,UAAUC,EAAV,EAAc;AAAE,iBAAOA,EAAE,KAAKP,MAAM,CAACG,IAArB;AAA4B,SAA/D,CAAL,EAAuE;AACnEN,UAAAA,gBAAgB,CAACrB,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKoB,aAAL,EAAoB,IAApB,CAAd,EAAyC,CAACI,MAAM,CAACG,IAAR,CAAzC,EAAwD,KAAxD,CAAd,CAAhB;AACH;;AACD;;AACJ;AACI;AAnBR;AAqBH,GAtBsC,EAsBpC,CAACP,aAAD,CAtBoC,CAAvC;AAuBA,SAAO,CAACA,aAAD,EAAgBE,gCAAhB,CAAP;AACH,CA1BM","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\n/**\n * Represents the available `action` types for the `SchedulerSlotsSelectAction` objects.\n *\n * The available actions are:\n * - `SLOTS_SELECT_SELECT`\n * - `SLOTS_SELECT_RESET`\n * - `SLOTS_SELECT_ADD`\n */\nexport var SLOTS_SELECT_ACTION;\n(function (SLOTS_SELECT_ACTION) {\n    SLOTS_SELECT_ACTION[\"select\"] = \"SLOTS_SELECT_SELECT\";\n    SLOTS_SELECT_ACTION[\"reset\"] = \"SLOTS_SELECT_RESET\";\n    SLOTS_SELECT_ACTION[\"add\"] = \"SLOTS_SELECT_ADD\";\n})(SLOTS_SELECT_ACTION || (SLOTS_SELECT_ACTION = {}));\n/** @hidden */\nexport var useSlotsSelection = function (_slots) {\n    var _a = React.useState([]), selectedSlots = _a[0], setSelectedSlots = _a[1];\n    var handleSchedulerSlotsSelectAction = React.useCallback(function (action) {\n        switch (action.type) {\n            case SLOTS_SELECT_ACTION.select:\n                if (!action.slot) {\n                    return;\n                }\n                setSelectedSlots([action.slot]);\n                break;\n            case SLOTS_SELECT_ACTION.reset:\n                setSelectedSlots([]);\n                break;\n            case SLOTS_SELECT_ACTION.add:\n                if (!action.slot) {\n                    return;\n                }\n                if (!selectedSlots.some(function (ss) { return ss === action.slot; })) {\n                    setSelectedSlots(__spreadArray(__spreadArray([], selectedSlots, true), [action.slot], false));\n                }\n                break;\n            default:\n                break;\n        }\n    }, [selectedSlots]);\n    return [selectedSlots, handleSchedulerSlotsSelectAction];\n};\n"]},"metadata":{},"sourceType":"module"}