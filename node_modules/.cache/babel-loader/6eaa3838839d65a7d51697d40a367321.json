{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport Axios from 'axios';\nimport { checkBoxOperation } from '../components/Enumeration';\nexport function getMyJobsubSampleDetailTestWise(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      // nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode,\n      // checkBoxOperation: inputData.masterData.searchedSubSample ?  \n      //     inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation\n      checkBoxOperation: inputData.masterData.searchedSubSample ? inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation : checkBoxOperation.SINGLESELECT : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"testwisemyjobs/getMyJobsSubSampleDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          MJSelectedSample: inputData.MJSelectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.MJSelectedTest ? inputData.masterData.MJSelectedTest : [];\n        inputData.masterData.MJSelectedTest = responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n        let skipInfo = {};\n        let masterData = {};\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            MJSelectedSample: inputData.MJSelectedSample,\n            selectedPreregno: inputData.npreregno,\n            MJSelectedSubSample: inputData.masterData.MJ_SUBSAMPLE.length > 0 ? [inputData.masterData.MJ_SUBSAMPLE[0]] : []\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          } //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            const wholeSubSampleList = masterData.MJ_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                MJSelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const MJSelectedTest = oldSelectedTest.length > 0 ? getSameRecordFromTwoArrays(oldSelectedTest, masterData.MJSelectedSubSample, 'npreregno') : responseData.MJSelectedTest;\n            masterData = { ...masterData,\n              MJSelectedTest,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter\n            };\n          } //if (inputData.checkBoxOperation === 3) {\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT) {\n            masterData = { ...masterData,\n              MJSelectedTest: masterData.MJ_TEST.length > 0 ? [masterData.MJ_TEST[0]] : [],\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter\n            };\n          }\n\n          let {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.MJ_SUBSAMPLE.length < inputData.subSampleSkip) {\n            testskip = 0;\n            subSampleSkip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subSampleSkip,\n              subSampleTake\n            };\n          }\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          let masterData = { ...inputData.masterData,\n            MJSelectedSample: inputData.MJSelectedSample,\n            MJSelectedSubSample: inputData.masterData.MJSelectedSubSample,\n            MJSelectedTest: inputData.masterData.MJSelectedTest || [],\n            selectedPreregno: inputData.npreregno\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          }\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n\n          let ApprovalParameter = [];\n          let ResultUsedInstrument = [];\n          let ResultUsedTasks = [];\n          let RegistrationTestAttachment = [];\n          let ApprovalResultChangeHistory = [];\n          let RegistrationTestComment = [];\n          let ApprovalHistory = []; //if (inputData.checkBoxOperation === 1) {\n\n          if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n            let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n            } // } else if (inputData.checkBoxOperation === 5) {\n\n          } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n            }; //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\n\n            let list = [];\n            let dbData = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              default:\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } else {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n            }; //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0\n\n            let list = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let skipInfo = {};\n      let bool = false;\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.MJSelectedTest;\n      let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample;\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      let isGrandChildGetRequired = false;\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = []; // if(subSample)\n      // {\n      //     if (TestSelected.length > 0) {\n      //         isGrandChildGetRequired = false;\n      //     } else {\n      // if( TestSelected.length == 0 && subSampleSelected.length == 0)\n      // {\n      //     isGrandChildGetRequired = true;\n      // }\n      // else if(TestSelected.length == 0){\n      //     isGrandChildGetRequired = true;\n      // }\n      //         else\n      //         {\n      //             isGrandChildGetRequired = false;\n      //         }\n      //          isGrandChildGetRequired = true;\n      //     }\n      // }\n      // else\n      // {\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      } // }\n\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\n        let MJSelectedSample = inputData.MJSelectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let MJSelectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n        let MJSelectedSubSample = inputData.masterData.MJ_SUBSAMPLE;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.MJ_SUBSAMPLE, \"ntransactionsamplecode\");\n          MJSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.MJ_SUBSAMPLE[0]];\n\n          if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          MJSelectedSample,\n          MJSelectedSubSample,\n          MJSelectedTest\n        };\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        } // inputData = {\n        //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\n        //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\n        //         MJSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\n        // }\n\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          MJSelectedSample,\n          selectedPreregno,\n          MJSelectedTest,\n          MJSelectedSubSample,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          masterData,\n          ...skipInfo\n        };\n\n        if (subSample) {\n          if (MJSelectedTest.length === 0) {\n            inputData[\"npreregno\"] = MJSelectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = MJSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\"); //inputData[\"checkBoxOperation\"] = 3\n\n            inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n            inputData[\"childTabsKey\"] = [\"MJ_TEST\"];\n            dispatch(getMyJobTestDetailTestWise(inputData, true));\n          } else {\n            dispatch(getMJTestChildTabDetailTestWise(inputData, true));\n          }\n        } else {\n          dispatch(getMJTestChildTabDetailTestWise(inputData, true));\n        } // dispatch(getMJTestChildTabDetailTestWise(inputData, true));\n\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [],\n          MJSelectedSample: inputData.MJSelectedSample,\n          MJSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.MJ_SUBSAMPLE.length > 0 ? [inputData.masterData.MJ_SUBSAMPLE[0]] : []\n        };\n        let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (subSample) {\n          if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              // wholeApprovalParameter,\n              ApprovalParameter,\n              // wholeResultUsedInstrument,\n              ResultUsedInstrument,\n              // wholeResultUsedTasks,\n              ResultUsedTasks,\n              // wholeRegistrationTestAttachment,\n              RegistrationTestAttachment,\n              // wholeApprovalResultChangeHistory,\n              ApprovalResultChangeHistory,\n              // wholeRegistrationTestComments,\n              RegistrationTestComment,\n              ApprovalHistory,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    }\n  };\n}\nexport function getMyJobTestDetailTestWise(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      // nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      // ntranscode: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactiontestcode: 0,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ntransactionstatus: inputData.ntransactionstatus,\n      ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; //let masterData = {};\n    //let subSample = inputData.nneedsubsample;\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"testwisemyjobs/getMyJobsTestDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'npreregno');\n        inputData.searchTestRef.current.null = \"\";\n        let oldSelectedTest = inputData.masterData.MJSelectedTest;\n        inputData.masterData.MJSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          MJSelectedTest: inputData.masterData.MJSelectedTest,\n          MJSelectedSubSample: inputData.MJSelectedSubSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let ApprovalParameter = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ApprovalResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let ApprovalHistory = []; //if (inputData.checkBoxOperation === 1) {\n\n        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n          let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode; // if (oldSelectedTest.length > 0) {\n          //     keepOld = true\n          //     masterData = {\n          //         ...masterData,\n          //         selectedTest: oldSelectedTest\n          //     }\n          // } else {\n\n          ntransactiontestcode = masterData.MJSelectedTest[0].ntransactiontestcode; // }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n          } //} else if (inputData.checkBoxOperation === 5) {\n\n        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n          masterData = { ...masterData,\n            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n          }; //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\n\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          } //} else if (inputData.checkBoxOperation === 7) {\n\n        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n          //  let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\n          //let wholeTestListForSelectAll = masterData.MJ_TEST\n          // let wholeTestListForSelectSingleSelect =\n          //     oldSelectedTest.forEach((test, index) => {\n          //         if (!wholeTestList.includes(test.ntransactiontestcode)) {\n          //             oldSelectedTest.splice(index, 1)\n          //         }\n          //     })\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              MJSelectedTest: oldSelectedTest //oldSelectedTest\n\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n          }; // let ntransactiontestcode = response.data.MJSelectedTest ? response.data.MJSelectedTest.length > 0 ? \n          //      response.data.MJSelectedTest[0].ntransactiontestcode : inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ?  inputData.masterData.MJ_TEST[0].ntransactiontestcode :-1:-1:-1\n          //inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode: -1 : -1\n\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          ApprovalParameter,\n          ResultUsedInstrument,\n          ResultUsedTasks,\n          RegistrationTestAttachment,\n          ApprovalResultChangeHistory,\n          RegistrationTestComment,\n          ApprovalHistory\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              MJSelectedSubSample: inputData.MJSelectedSubSample,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              activeTestTab: inputData.activeTestTab,\n              activeSampleTab: inputData.activeSampleTab,\n              skip: undefined,\n              take: undefined,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.MJSelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\n        let MJSelectedSample = inputData.masterData.MJSelectedSample;\n        let selectedPreregno = inputData.npreregno; //let selectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\n\n        let MJSelectedSubSample = inputData.MJSelectedSubSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.MJ_TEST, \"ntransactiontestcode\");\n        let MJSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.MJ_TEST[0]];\n        let ntransactiontestcode = MJSelectedTest.length > 0 ? MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        } // inputData = {\n        //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\n        //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\n        //         MJSelectedSubSample, checkBoxOperation: 3, skipInfo\n        // }\n\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          MJSelectedSample,\n          selectedPreregno,\n          MJSelectedTest,\n          MJSelectedSubSample,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          skipInfo\n        };\n        dispatch(getMJTestChildTabDetailTestWise(inputData, true));\n      } else {\n        let keepOld = false;\n        let ntransactiontestcode;\n        let masterData = { ...inputData.masterData,\n          MJSelectedSubSample: inputData.MJSelectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\n        };\n        const wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            MJSelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ApprovalParameter,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              ApprovalResultChangeHistory,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            ...skipInfo,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    } //}\n\n  };\n}\nexport function getMJTestChildTabDetailTestWise(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\n              selectedTest: inputData.MJSelectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              MJSelectedSample: inputData.MJSelectedSample || inputData.masterData.MJSelectedSample,\n              MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\n              MJSelectedTest: inputData.MJSelectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            MJSelectedTest: inputData.MJSelectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        default:\n          RegistrationTestAttachment = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getMJSampleChildTabDetailTestWise(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"comments/getSampleComment\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(\"Please Select a Sample\");\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\n        MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\n        MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\n      }; // dispatch({type: DEFAULT_RETURN, payload:{\n      // masterData:{\n      //     ...inputParam.inputData.masterData,\n      //     ...response.data, \n      //     MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.MJ_SAMPLE,'npreregno'),\n      //     MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\n      //     MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.MJ_TEST,'ntransactiontestcode')\n      // },\n      //     loading:false ,\n      //     loadEsign:false,\n      //     openChildModal:false                     \n      // }}) \n\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),\n      //         MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\n      //         MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\n        MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\n        MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegTypeTestWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getRegistrationTypeBySampleType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\n            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeTestWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getRegistrationsubTypeByRegType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultRegTypeValue: inputData.defaultRegTypeValue,\n            realDesignTemplateMappingValue: inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputData.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestStatusTestWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAppConfigVersionTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getApprovalConfigVersionByRegSubType\", inputParam.inputData).then(response => {\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\n            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\n            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputParam.inputData.realDynamicDesignMappingList //nneedsubsample:inputParam.masterData.realRegSubTypeValue.nneedsubsample\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDesignTemplateTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getDesignTemplateByApprovalConfigVersion\", inputParam).then(response => {\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\n            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\n            realDesignTemplateMappingValue: inputParam.realDesignTemplateMappingValue,\n            realDynamicDesignMappingList: inputParam.realDynamicDesignMappingList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusSectionTestWise(inputData) {\n  return function (dispatch) {\n    const testStatusService = rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\", inputData);\n    const sectionService = rsapi.post(\"testwisemyjobs/getSectionByApproveVersion\", inputData);\n    let urlArray = [];\n    urlArray = [testStatusService, sectionService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionTestWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusTestWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMyJobsSampleTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/getMyTestWiseJobsDetails\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined; // masterData['searchedTests'] = undefined\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showTest: inputParam.inputData.showTest,\n          activeTestTab: inputParam.inputData.activeTestTab,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getAcceptTestTestWise(action,inputParam,MJSelectedTest,userInfo) {\n//     return function (dispatch) {\n//         let inputData = {\n//             nflag:3,\n//             ncheck:1,\n//             nsampletypecode :inputParam.nsampletypecode,\n//             nregtypecode :inputParam.nregtypecode,\n//             nregsubtypecode : inputParam.nregsubtypecode,\n//             ntransactionstatus :inputParam.ntransactionstatus,\n//             napprovalversioncode :inputParam.napprovalversioncode,\n//             nsectioncode :inputParam.nsectioncode,\n//             ntestcode :inputParam.ntestcode,\n//             fromdate: inputParam.dfrom,\n//             todate: inputParam.dto,\n//             npreregno :MJSelectedTest ? MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\n//             ntransactionsamplecode : MJSelectedTest ? MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\n//             transactiontestcode: MJSelectedTest ? MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n//             ntransactiontestcode: 0,\n//             ncontrolcode : action.ncontrolcode,\n//             nneedsubsample:inputParam.masterData.nneedsubsample,\n//             ndesigntemplatemappingcode :inputParam.ndesigntemplatemappingcode,\n//             checkBoxOperation:3,\n//             scontrolname : action.scontrolname,\n//             userinfo: userInfo\n//         }\n//         if (inputData.transactiontestcode && inputData.transactiontestcode.length > 0) {\n//             dispatch(initRequest(true));\n//             rsapi.post(\"testwisemyjobs/CreateAcceptTest\", inputData)\n//                 .then(response => {\n//                     let responseData = { ...response.data }\n//                     responseData = sortData(responseData)\n//                    let MJ_TEST= replaceUpdatedObject (response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\n//                    delete response.data.MJ_TEST;\n//                    let MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\n//                    // let MJ_TEST =[];\n//                    // MJ_TEST =responseData[\"MJ_TEST\"]\n//                     let masterData = {\n//                         ...inputParam.masterData,\n//                         ...response.data,\n//                         MJ_TEST, \n//                         MJSelectedTest\n//                     };\n//                     let respObject = {\n//                         masterData,\n//                         ...inputParam.inputData,\n//                         loading: false,\n//                         loadEsign: false,\n//                         openModal: false,\n//                         showSample: undefined\n//                     }\n//                     dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             ...responseData,\n//                             masterData,\n//                             loading: false,\n//                             operation: \"update\",              \n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(error.message);\n//                     }\n//                     else {\n//                         toast.warn(error.response.data);\n//                     }\n//                 })\n//         } else {\n//             dispatch({\n//                 type: DEFAULT_RETURN,\n//                 payload: {\n//                     multilingualMsg: \"IDS_SELECTTEST\",\n//                 }\n//             });\n//         }\n//     }\n// }\n\nexport function getAcceptTestTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"testwisemyjobs/CreateAcceptTest\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let MJ_TEST = replaceUpdatedObject(response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\n      delete response.data.MJ_TEST;\n      let MJSelectedTest = replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        MJ_TEST,\n        MJSelectedTest\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...responseData,\n          masterData,\n          loading: false,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforAccept(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"operation\"] === \"accept\") {\n          dispatch(getAcceptTestTestWise(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"MJSelectedTest\"], inputParam.inputData.userinfo));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/TestWiseMyJobsAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","filterRecordBasedOnPrimaryKeyName","postCRUDOrganiseTransSearch","Axios","checkBoxOperation","getMyJobsubSampleDetailTestWise","inputData","isServiceRequired","dispatch","inputParamData","ntype","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","searchedSubSample","length","SINGLESELECT","activeName","dataStateName","subSample","post","then","response","responseData","data","MJSelectedSample","oldSelectedTest","MJSelectedTest","MJ_TEST","skipInfo","searchTestRef","undefined","current","value","oldSelectedSubSample","MJSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","MJ_SUBSAMPLE","searchSubSampleRef","MULTISELECT","QUICKSELECTALL","QUICKSELECTSTATUS","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","ApprovalParameter","testskip","testtake","subSampleSkip","subSampleTake","bool","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","RegistrationTestComment","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","selectedTest","list","dbData","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","x","join","getMyJobTestDetailTestWise","getMJTestChildTabDetailTestWise","null","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","selectedTestCode","activeTabIndex","screenName","getMJSampleChildTabDetailTestWise","selectedSample","performAction","inputParam","MJ_SAMPLE","updatedSample","updatedSubSample","updatedTest","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","updateDecision","getRegTypeTestWise","defaultSampleTypeValue","realDesignTemplateMappingValue","realDynamicDesignMappingList","getRegSubTypeTestWise","defaultRegTypeValue","getTestStatusTestWise","RegSubTypeValue","getAppConfigVersionTestWise","Success","defaultRegSubTypeValue","getDesignTemplateTestWise","defaultApprovalVersionValue","ApprovalVersionValue","realApprovalVersionValue","getFilterStatusSectionTestWise","testStatusService","sectionService","urlArray","all","getSectionTestWise","defaultUserSectionValue","getFilterStatusTestWise","defaultFilterStatusValue","getMyJobsSampleTestWise","searchSampleRef","showTest","documentDataState","testCommentDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getAcceptTestTestWise","openModal","showSample","validateEsignforAccept","methodUrl","toLowerCase"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { checkBoxOperation } from '../components/Enumeration';\r\n\r\nexport function getMyJobsubSampleDetailTestWise(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n           // nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n           // checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n           //     inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation\r\n            checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n                inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:checkBoxOperation.SINGLESELECT:inputData.checkBoxOperation    \r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"testwisemyjobs/getMyJobsSubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, MJSelectedSample: inputData.MJSelectedSample }\r\n                    responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.MJSelectedTest ? inputData.masterData.MJSelectedTest : []\r\n                    inputData.masterData.MJSelectedTest = responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    \r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            MJSelectedSample: inputData.MJSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            MJSelectedSubSample: inputData.masterData.MJ_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.MJ_SUBSAMPLE[0]] : [],\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {    \r\n\r\n                            const wholeSubSampleList = masterData.MJ_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    MJSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const MJSelectedTest = oldSelectedTest.length >0 ? getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.MJSelectedSubSample, 'npreregno') : responseData.MJSelectedTest\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            }\r\n                        }\r\n                        //if (inputData.checkBoxOperation === 3) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT) {    \r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest: masterData.MJ_TEST.length > 0 ? [masterData.MJ_TEST[0]] : [],\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :masterData.ApprovalParameter : masterData.ApprovalParameter\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.MJ_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        }\r\n                    }\r\n                    else {\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                        let masterData = {\r\n                            ...inputData.masterData,\r\n                            MJSelectedSample: inputData.MJSelectedSample,\r\n                            MJSelectedSubSample: inputData.masterData.MJSelectedSubSample,\r\n                            MJSelectedTest: inputData.masterData.MJSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        //if (inputData.checkBoxOperation === 1) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                            let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                  \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                              \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                \r\n                                default:\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                            }\r\n                       // } else if (inputData.checkBoxOperation === 5) {\r\n                        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {    \r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                            }\r\n                            //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            switch (inputData.activeTestTab) {\r\n                               \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                               \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                               \r\n                                default:\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } else {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                            }\r\n                            //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            switch (inputData.activeTestTab) {\r\n                               \r\n                               \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                \r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                              \r\n                                default:\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.MJSelectedSubSample\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n            let isGrandChildGetRequired = false;\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n\r\n            // if(subSample)\r\n            // {\r\n            //     if (TestSelected.length > 0) {\r\n            //         isGrandChildGetRequired = false;\r\n            //     } else {\r\n                   \r\n                    // if( TestSelected.length == 0 && subSampleSelected.length == 0)\r\n                    // {\r\n                    //     isGrandChildGetRequired = true;\r\n                    // }\r\n                    // else if(TestSelected.length == 0){\r\n                    //     isGrandChildGetRequired = true;\r\n                    // }\r\n            //         else\r\n            //         {\r\n            //             isGrandChildGetRequired = false;\r\n            //         }\r\n            //          isGrandChildGetRequired = true;\r\n                   \r\n            //     }\r\n            // }\r\n            // else\r\n            // {\r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = false;\r\n                } else {\r\n                    isGrandChildGetRequired = true;\r\n                }\r\n           // }\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n        \r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let MJSelectedSample = inputData.MJSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let MJSelectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\r\n                let MJSelectedSubSample = inputData.masterData.MJ_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.MJ_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    MJSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.MJ_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, MJSelectedSample, MJSelectedSubSample, MJSelectedTest }\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                //         MJSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\r\n                // }\r\n\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                        MJSelectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT,masterData,...skipInfo\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (MJSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = MJSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = MJSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        //inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                        inputData[\"childTabsKey\"] = [\"MJ_TEST\"]\r\n                        dispatch(getMyJobTestDetailTestWise(inputData, true));\r\n                    } else {\r\n                        dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n                }\r\n\r\n                // dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    MJSelectedTest: TestSelected ? TestSelected :inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [],\r\n                    MJSelectedSample: inputData.MJSelectedSample,\r\n                    MJSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.MJ_SUBSAMPLE.length>0 ? [inputData.masterData.MJ_SUBSAMPLE[0]]:[]\r\n                }\r\n                let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                });\r\n\r\n                if(subSample)\r\n                {\r\n                    if (inputData.masterData.MJ_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n    \r\n                }\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    \r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                   \r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                  \r\n                    default:\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // wholeApprovalParameter,\r\n                            ApprovalParameter,\r\n                            // wholeResultUsedInstrument,\r\n                            ResultUsedInstrument,\r\n                            // wholeResultUsedTasks,\r\n                            ResultUsedTasks,\r\n                            // wholeRegistrationTestAttachment,\r\n                            RegistrationTestAttachment,\r\n                            // wholeApprovalResultChangeHistory,\r\n                            ApprovalResultChangeHistory,\r\n                            // wholeRegistrationTestComments,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory,\r\n                            ...skipInfo,\r\n                        },\r\n                        ...skipInfo,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getMyJobTestDetailTestWise(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n           // nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n           // ntranscode: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactiontestcode :0,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ntransactionstatus:inputData.ntransactionstatus,\r\n            ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        //let masterData = {};\r\n        //let subSample = inputData.nneedsubsample;\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"testwisemyjobs/getMyJobsTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData,'descending', 'npreregno')\r\n                    inputData.searchTestRef.current.null = \"\"\r\n\r\n                    let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n                    inputData.masterData.MJSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.MJSelectedTest ? responseData.MJSelectedTest : inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedTest: inputData.masterData.MJSelectedTest,\r\n                        MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n\r\n\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {    \r\n                        let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         selectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        ntransactiontestcode = masterData.MJSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n                    //} else if (inputData.checkBoxOperation === 5) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {    \r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                        }\r\n                        //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                          \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    //} else if (inputData.checkBoxOperation === 7) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                      //  let wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                        //let wholeTestListForSelectAll = masterData.MJ_TEST\r\n                        // let wholeTestListForSelectSingleSelect =\r\n                        //     oldSelectedTest.forEach((test, index) => {\r\n                        //         if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //             oldSelectedTest.splice(index, 1)\r\n                        //         }\r\n\r\n                        //     })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                MJSelectedTest: oldSelectedTest\r\n                                //oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                           \r\n                           \r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : []\r\n                        }\r\n                       // let ntransactiontestcode = response.data.MJSelectedTest ? response.data.MJSelectedTest.length > 0 ? \r\n                          //      response.data.MJSelectedTest[0].ntransactiontestcode : inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ?  inputData.masterData.MJ_TEST[0].ntransactiontestcode :-1:-1:-1\r\n                                \r\n                                //inputData.masterData.MJ_TEST ? inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode: -1 : -1\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                           \r\n                            default:\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...response.data.RegistrationTestAttachment]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            ...skipInfo,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.MJSelectedTest\r\n            let TestSelected = \r\n          inputData[\"statusNone\"] ?\r\n            getRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n            filterRecordBasedOnPrimaryKeyName(inputData.masterData.MJSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ? inputData.masterData.MJ_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let MJSelectedSample = inputData.masterData.MJSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.MJ_TEST.length > 0 ? [inputData.masterData.MJ_TEST[0]] : [];\r\n                let MJSelectedSubSample = inputData.MJSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.MJ_TEST, \"ntransactiontestcode\");\r\n                let MJSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.MJ_TEST[0]];\r\n                let ntransactiontestcode = MJSelectedTest.length > 0 ? MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n                if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n                }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                //         MJSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                // }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, MJSelectedSample, selectedPreregno, MJSelectedTest,\r\n                        MJSelectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT, skipInfo\r\n                }\r\n                dispatch(getMJTestChildTabDetailTestWise(inputData, true));\r\n            } \r\n            else {\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedSubSample: inputData.MJSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        MJSelectedTest: TestSelected ? TestSelected : inputData.masterData.MJ_TEST.length > 0 ?\r\n                            [inputData.masterData.MJ_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.MJ_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    });\r\n                    if (inputData.masterData.MJ_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            MJSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.MJ_TEST.length > 0 ?\r\n                            inputData.masterData.MJ_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        \r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                       \r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                       \r\n                        default:\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        //}\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getMJTestChildTabDetailTestWise(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample, selectedTest: inputData.MJSelectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                MJSelectedSample: inputData.MJSelectedSample || inputData.masterData.MJSelectedSample,\r\n                                MJSelectedSubSample: inputData.MJSelectedSubSample || inputData.masterData.MJSelectedSubSample,\r\n                                MJSelectedTest: inputData.MJSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTabIndex:inputData.activeTabIndex,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.MJSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        MJSelectedTest: inputData.MJSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                \r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n               \r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n               \r\n                default:\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getMJSampleChildTabDetailTestWise(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data,\r\n                    MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\r\n                    MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\r\n                }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.MJ_SAMPLE,'npreregno'),\r\n                //     MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.MJ_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         MJ_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.MJ_SAMPLE,'npreregno'),\r\n                //         MJ_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.MJ_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         MJ_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.MJ_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    MJ_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.MJ_SAMPLE, 'npreregno'),\r\n                    MJ_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.MJ_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    MJ_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.MJ_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegTypeTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\r\n                            realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegSubTypeTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue,\r\n                            realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestStatusTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\r\n                            realDesignTemplateMappingValue:inputParam.inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputParam.inputData.realDynamicDesignMappingList\r\n                            //nneedsubsample:inputParam.masterData.realRegSubTypeValue.nneedsubsample\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\r\n                            realDesignTemplateMappingValue:inputParam.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputParam.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getFilterStatusSectionTestWise(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"testwisemyjobs/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"testwisemyjobs/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusTestWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getMyJobsSampleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testwisemyjobs/getMyTestWiseJobsDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n                   // masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getAcceptTestTestWise(action,inputParam,MJSelectedTest,userInfo) {\r\n//     return function (dispatch) {\r\n//         let inputData = {\r\n//             nflag:3,\r\n//             ncheck:1,\r\n//             nsampletypecode :inputParam.nsampletypecode,\r\n//             nregtypecode :inputParam.nregtypecode,\r\n//             nregsubtypecode : inputParam.nregsubtypecode,\r\n//             ntransactionstatus :inputParam.ntransactionstatus,\r\n//             napprovalversioncode :inputParam.napprovalversioncode,\r\n//             nsectioncode :inputParam.nsectioncode,\r\n//             ntestcode :inputParam.ntestcode,\r\n//             fromdate: inputParam.dfrom,\r\n//             todate: inputParam.dto,\r\n//             npreregno :MJSelectedTest ? MJSelectedTest.map(sample => sample.npreregno).join(\",\") : \"\",\r\n//             ntransactionsamplecode : MJSelectedTest ? MJSelectedTest.map(subsample => subsample.ntransactionsamplecode).join(\",\") : \"\",\r\n//             transactiontestcode: MJSelectedTest ? MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n//             ntransactiontestcode: 0,\r\n//             ncontrolcode : action.ncontrolcode,\r\n//             nneedsubsample:inputParam.masterData.nneedsubsample,\r\n//             ndesigntemplatemappingcode :inputParam.ndesigntemplatemappingcode,\r\n//             checkBoxOperation:3,\r\n//             scontrolname : action.scontrolname,\r\n\r\n//             userinfo: userInfo\r\n//         }\r\n        \r\n//         if (inputData.transactiontestcode && inputData.transactiontestcode.length > 0) {\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"testwisemyjobs/CreateAcceptTest\", inputData)\r\n//                 .then(response => {\r\n//                     let responseData = { ...response.data }\r\n//                     responseData = sortData(responseData)\r\n\r\n//                    let MJ_TEST= replaceUpdatedObject (response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\r\n//                    delete response.data.MJ_TEST;\r\n//                    let MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n\r\n//                    // let MJ_TEST =[];\r\n//                    // MJ_TEST =responseData[\"MJ_TEST\"]\r\n\r\n//                     let masterData = {\r\n//                         ...inputParam.masterData,\r\n//                         ...response.data,\r\n//                         MJ_TEST, \r\n//                         MJSelectedTest\r\n//                     };\r\n//                     let respObject = {\r\n//                         masterData,\r\n//                         ...inputParam.inputData,\r\n//                         loading: false,\r\n//                         loadEsign: false,\r\n//                         openModal: false,\r\n//                         showSample: undefined\r\n//                     }\r\n//                     dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             ...responseData,\r\n//                             masterData,\r\n//                             loading: false,\r\n//                             operation: \"update\",              \r\n//                         }\r\n//                     })\r\n//                 })\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(error.message);\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(error.response.data);\r\n//                     }\r\n//                 })\r\n//         } else {\r\n//             dispatch({\r\n//                 type: DEFAULT_RETURN,\r\n//                 payload: {\r\n//                     multilingualMsg: \"IDS_SELECTTEST\",\r\n//                 }\r\n//             });\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nexport function getAcceptTestTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"testwisemyjobs/CreateAcceptTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n\r\n                   let MJ_TEST= replaceUpdatedObject (response.data.MJ_TEST, inputParam.masterData.MJ_TEST, 'ntransactiontestcode');\r\n                   delete response.data.MJ_TEST;\r\n                   let MJSelectedTest=replaceUpdatedObject(response.data[\"MJSelectedTest\"], inputParam.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n                   let masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...response.data,\r\n                        MJ_TEST, \r\n                        MJSelectedTest\r\n                    };\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            masterData,\r\n                            loading: false,\r\n                            operation: \"update\",              \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n} \r\nexport function validateEsignforAccept(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if (inputParam[\"operation\"] === \"accept\") {\r\n                        dispatch(getAcceptTestTestWise(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"MJSelectedTest\"], inputParam.inputData.userinfo))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}    \r\n"]},"metadata":{},"sourceType":"module"}