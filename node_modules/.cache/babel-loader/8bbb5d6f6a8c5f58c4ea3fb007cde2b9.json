{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\Client.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport AddClient from './AddClient';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel } from '../../components/add-client.styles';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getClientComboService } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Client extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getNestedFieldData = (nestedColumnArray, data) => nestedColumnArray.reduce((xs, x) => xs && xs[x] ? xs[x] : null, data);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.detailBand = props => {\n      const Dataitem = props.dataItem;\n      const OptionalFieldList = [{\n        datafield: \"saddress1\",\n        Column: \"Address1\"\n      }, {\n        datafield: \"saddress2\",\n        Column: \"Address2\"\n      }, {\n        datafield: \"saddress3\",\n        Column: \"Address3\"\n      }, {\n        datafield: \"sphoneno\",\n        Column: \"Phone No\"\n      }, {\n        datafield: \"smobileno\",\n        Column: \"Mobile No\"\n      }, {\n        datafield: \"sfaxno\",\n        Column: \"Fax No\"\n      }, {\n        datafield: \"sdisplaystatus\",\n        Column: \"DisplayStatus\"\n      }];\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }, OptionalFieldList.map(fields => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: \"6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: fields.Column,\n          message: fields.Column,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 40\n          }\n        })), /*#__PURE__*/React.createElement(MediaLabel, {\n          className: \"readonly-text font-weight-normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }\n        }, Dataitem[fields.datafield])));\n      }));\n    };\n\n    this.detailedFieldList = [{\n      dataField: \"saddress1\",\n      idsName: \"IDS_ADDRESS1\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"saddress2\",\n      idsName: \"IDS_ADDRESS2\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"saddress3\",\n      idsName: \"IDS_ADDRESS3\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sphoneno\",\n      idsName: \"IDS_PHONENO\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"smobileno\",\n      idsName: \"IDS_MOBILENO\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAXNO\",\n      columnSize: \"4\"\n    } //{ dataField: \"sdisplaystatus\", idsName: \"IDS_DISPLAYSTATUS\" , columnSize:\"4\"},\n    ];\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteparam => {\n      if (deleteparam.selectedRecord.expanded !== undefined) {\n        delete deleteparam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteparam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [deleteparam.methodUrl.toLowerCase()]: deleteparam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteparam.operation\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteparam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: deleteparam.screenName,\n            operation: deleteparam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      const isValidateEmail = this.state.selectedRecord[\"semail\"] ? validateEmail(this.state.selectedRecord[\"semail\"]) : true;\n\n      if (isValidateEmail) {\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let dataState = undefined;\n\n        if (this.props.Login.operation === \"update\") {\n          const selectedRecord = this.state.selectedRecord; // edit\n\n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {};\n          this.fieldList.map(item => {\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = selectedRecord[item] !== null ? selectedRecord[item] : \"\";\n          });\n          inputData[\"client\"][\"nclientcode\"] = selectedRecord[\"nclientcode\"] ? selectedRecord[\"nclientcode\"] : -1;\n          inputData[\"client\"][\"ncountrycode\"] = selectedRecord[\"ncountrycode\"] ? selectedRecord[\"ncountrycode\"].value : -1;\n          dataState = this.state.dataState;\n        } else {\n          //add               \n          inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n          this.fieldList.map(item => {\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n          });\n          inputData[\"client\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1;\n        }\n\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: this.props.Login.inputParam.methodUrl,\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          selectedId: this.state.selectedRecord[\"nclientcode\"],\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"create\",\n      dataResult: [],\n      dataState: _dataState,\n      clientData: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      countryList: []\n    };\n    this.mandatoryFields = [{\n      \"idsName\": \"IDS_CLIENTNAME\",\n      \"dataField\": \"sclientname\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"dataField\": \"saddress1\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRY\",\n      \"dataField\": \"ncountrycode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_CLIENTNAME\",\n      \"dataField\": \"sclientname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"dataField\": \"scountryname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EMAIL\",\n      \"dataField\": \"semail\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"100px\"\n    }];\n    this.fieldList = [\"sclientname\", \"saddress1\", \"saddress2\", \"saddress3\", \"sphoneno\", \"smobileno\", \"sfaxno\", \"semail\", \"ntransactionstatus\", \"ncountrycode\"];\n    const addId = this.state.controlMap.has(\"AddClient\") && this.state.controlMap.get(\"AddClient\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditClient\") && this.state.controlMap.get(\"EditClient\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteClient\") && this.state.controlMap.get(\"DeleteClient\").ncontrolcode;\n    const clientAddParam = {\n      screenName: \"Client\",\n      operation: \"create\",\n      primaryKeyField: \"nclientcode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const clientEditParam = {\n      screenName: \"Client\",\n      operation: \"update\",\n      primaryKeyField: \"nclientcode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const clientDeleteParam = {\n      screenName: \"Client\",\n      methodUrl: \"Client\",\n      operation: \"delete\",\n      ncontrolCode: deleteId\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nclientcode\",\n      expandField: \"expanded\",\n      detailedFieldList: this.detailedFieldList,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getClientComboService,\n      editParam: clientEditParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: clientDeleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.props.getClientComboService(clientAddParam),\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      hasDynamicColSize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddClient, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        countryList: this.state.countryList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.countryList !== previousProps.Login.countryList) {\n      const countryList = constructOptionList(this.props.Login.countryList || [], \"ncountrycode\", \"scountryname\", undefined, undefined, undefined);\n      const countryListClient = countryList.get(\"OptionList\");\n      this.setState({\n        countryList: countryListClient\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getClientComboService\n})(injectIntl(Client));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/contactmaster/Client.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","FormGroup","FormLabel","toast","process","DataGrid","AddClient","SlideOutModal","Esign","ListWrapper","MediaLabel","callService","crudMaster","updateStore","validateEsignCredential","getClientComboService","DEFAULT_RETURN","constructOptionList","getControlMap","showEsign","validateEmail","validatePhoneNumber","mapStateToProps","state","Login","Client","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","getNestedFieldData","nestedColumnArray","reduce","xs","x","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","detailBand","Dataitem","OptionalFieldList","datafield","Column","map","fields","detailedFieldList","dataField","idsName","columnSize","onComboChange","comboData","fieldName","onInputOnChange","target","type","name","checked","value","deleteRecord","deleteparam","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","reloadData","onSaveClick","saveType","formRef","isValidateEmail","fieldList","item","nmastersitecode","intl","formatMessage","id","info","validateEsign","sreason","password","createRef","extractedColumnList","skip","take","settings","parseInt","addScreen","masterStatus","error","clientData","controlMap","Map","countryList","mandatoryFields","getDerivedStateFromProps","warn","render","addId","has","get","ncontrolcode","editId","deleteId","clientAddParam","primaryKeyField","clientEditParam","clientDeleteParam","buttonCount","pageSizes","componentDidUpdate","previousProps","Object","values","push","countryListClient"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport AddClient from './AddClient';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel } from '../../components/add-client.styles';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, getClientComboService } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Client extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", operation: \"create\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            clientData: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {}, \r\n            countryList: []\r\n        };\r\n        this.mandatoryFields = [\r\n            { \"idsName\": \"IDS_CLIENTNAME\", \"dataField\": \"sclientname\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_ADDRESS1\", \"dataField\": \"saddress1\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_COUNTRY\", \"dataField\": \"ncountrycode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNestedFieldData = (nestedColumnArray, data) =>\r\n        nestedColumnArray.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, data);\r\n\r\n    render() {\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_CLIENTNAME\", \"dataField\": \"sclientname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_COUNTRYNAME\", \"dataField\": \"scountryname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_EMAIL\", \"dataField\": \"semail\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_STATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"100px\"},\r\n        ]\r\n\r\n        this.fieldList = [\"sclientname\", \"saddress1\", \"saddress2\", \"saddress3\", \"sphoneno\", \"smobileno\", \"sfaxno\", \"semail\", \"ntransactionstatus\", \"ncountrycode\"];\r\n\r\n        const addId = this.state.controlMap.has(\"AddClient\") && this.state.controlMap.get(\"AddClient\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditClient\") && this.state.controlMap.get(\"EditClient\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteClient\") && this.state.controlMap.get(\"DeleteClient\").ncontrolcode;\r\n\r\n        const clientAddParam = {\r\n            screenName: \"Client\", operation: \"create\", primaryKeyField: \"nclientcode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const clientEditParam = {\r\n            screenName: \"Client\", operation: \"update\", primaryKeyField: \"nclientcode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const clientDeleteParam = { screenName: \"Client\", methodUrl: \"Client\", operation: \"delete\", ncontrolCode: deleteId };\r\n\r\n        return (\r\n\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nclientcode\"}\r\n                                    expandField=\"expanded\"\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.getClientComboService}\r\n                                    editParam={clientEditParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={clientDeleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord={() => this.props.getClientComboService(clientAddParam)}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    hasDynamicColSize={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddClient\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                countryList={this.state.countryList || []}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n    detailBand = (props) => {\r\n\r\n        const Dataitem = props.dataItem\r\n        const OptionalFieldList = [\r\n            { datafield: \"saddress1\", Column: \"Address1\" },\r\n            { datafield: \"saddress2\", Column: \"Address2\" },\r\n            { datafield: \"saddress3\", Column: \"Address3\" },\r\n            { datafield: \"sphoneno\", Column: \"Phone No\" },\r\n            { datafield: \"smobileno\", Column: \"Mobile No\" },\r\n            { datafield: \"sfaxno\", Column: \"Fax No\" },\r\n            { datafield: \"sdisplaystatus\", Column: \"DisplayStatus\" },\r\n\r\n        ];\r\n        return (<Row>\r\n            {OptionalFieldList.map((fields) => {\r\n                return (\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <FormLabel><FormattedMessage id={fields.Column} message={fields.Column} /></FormLabel>\r\n                            <MediaLabel className=\"readonly-text font-weight-normal\">{Dataitem[fields.datafield]}</MediaLabel>\r\n                        </FormGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n            }\r\n        </Row>)\r\n    }\r\n    detailedFieldList = [\r\n        { dataField: \"saddress1\", idsName: \"IDS_ADDRESS1\" , columnSize:\"4\"},\r\n        { dataField: \"saddress2\", idsName: \"IDS_ADDRESS2\" , columnSize:\"4\"},\r\n        { dataField: \"saddress3\", idsName: \"IDS_ADDRESS3\", columnSize:\"4\" },\r\n        { dataField: \"sphoneno\", idsName: \"IDS_PHONENO\" , columnSize:\"4\"},\r\n        { dataField: \"smobileno\", idsName: \"IDS_MOBILENO\" , columnSize:\"4\"},\r\n        { dataField: \"sfaxno\", idsName: \"IDS_FAXNO\" , columnSize:\"4\"},\r\n        //{ dataField: \"sdisplaystatus\", idsName: \"IDS_DISPLAYSTATUS\" , columnSize:\"4\"},\r\n    ];\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.countryList !== previousProps.Login.countryList) {\r\n\r\n            const countryList = constructOptionList(this.props.Login.countryList || [], \"ncountrycode\",\r\n                \"scountryname\", undefined, undefined, undefined);\r\n            const countryListClient = countryList.get(\"OptionList\");\r\n\r\n            this.setState({ countryList: countryListClient });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\r\n            }\r\n        } else if (event.target.type === 'select-one') {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (deleteparam) => {\r\n        if (deleteparam.selectedRecord.expanded !== undefined) {\r\n            delete deleteparam.selectedRecord.expanded\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteparam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [deleteparam.methodUrl.toLowerCase()]: deleteparam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteparam.operation\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteparam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: deleteparam.screenName, operation: deleteparam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        const isValidateEmail = this.state.selectedRecord[\"semail\"]? validateEmail(this.state.selectedRecord[\"semail\"]): true;\r\n        if (isValidateEmail) {\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            if (this.props.Login.operation === \"update\") {\r\n                const selectedRecord=this.state.selectedRecord;\r\n                // edit\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {};\r\n\r\n                this.fieldList.map(item => {\r\n                    return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = selectedRecord[item] !== null ? selectedRecord[item] : \"\";\r\n               })\r\n               inputData[\"client\"][\"nclientcode\"] =selectedRecord[\"nclientcode\"] ? selectedRecord[\"nclientcode\"] : -1;\r\n               inputData[\"client\"][\"ncountrycode\"] = selectedRecord[\"ncountrycode\"] ? selectedRecord[\"ncountrycode\"].value : -1;\r\n                dataState = this.state.dataState;\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n\r\n                this.fieldList.map(item => {\r\n                    return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n                })\r\n                inputData[\"client\"][\"ncountrycode\"] = this.state.selectedRecord[\"ncountrycode\"] ? this.state.selectedRecord[\"ncountrycode\"].value : -1;\r\n            }\r\n     \r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                selectedId: this.state.selectedRecord[\"nclientcode\"],\r\n                operation: this.props.Login.operation, saveType, formRef, dataState\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }))\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    getClientComboService\r\n})(injectIntl(Client));"]},"metadata":{},"sourceType":"module"}