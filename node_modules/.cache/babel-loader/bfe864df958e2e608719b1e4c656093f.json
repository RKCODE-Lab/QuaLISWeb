{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\BarcodeTemplate\\\\BarcodeButton.jsx\";\nimport React from \"react\";\nimport { faBarcode } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button } from \"react-bootstrap\"; //import { openBarcodeModal } from '../../actions'\n\nimport { injectIntl } from \"react-intl\"; //import { connect } from \"react-redux\";\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from \"../audittrail/Esign\";\nimport { constructOptionList } from \"../../components/CommonScript\";\nimport rsapi from \"../../rsapi\";\nimport Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport AddBarcode from \"./AddBarcode\";\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport Preloader from '../../components/preloader/preloader.component';\n\nclass BarcodeButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openBarcodeModal = (selectedMaster, ncontrolCode, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const getPrinter = rsapi.post(\"barcode/getPrinter\", userinfo);\n      const getControlBasedBarcode = rsapi.post(\"barcodeconfiguration/checkConfiguration\", {\n        selectedMaster,\n        ncontrolCode,\n        userinfo,\n        Multiselect: Array.isArray(selectedMaster)\n      });\n      urlArray = [getPrinter, getControlBasedBarcode];\n      Axios.all(urlArray).then(response => {\n        const printer = constructOptionList(response[0].data || [], \"sprintername\", \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n        const barcode = constructOptionList(response[1].data.Barcode || [], \"sbarcodename\", \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\n        const selectedRecord = {};\n        if (printer.length > 0) selectedRecord['sprintername'] = printer[0];\n        if (barcode.length > 0) selectedRecord['nbarcode'] = barcode[0];\n        selectedRecord['nbarcodeprint'] = 1;\n        this.setState({\n          openBarcodeModal: true,\n          ncontrolCode,\n          Printer: printer,\n          BarcodeList: barcode,\n          operation: \"Printbarcode\",\n          nbarcodeprint: response[1].data.nbarcodeprint,\n          selectedRecord,\n          loadBarcode: true,\n          loading: false\n        });\n      }).catch(error => {\n        // dispatch(initRequest(false));\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    };\n\n    this.barcodeGeneration = () => {\n      //dispatch(initRequest(true));\n      this.setState({\n        loading: true\n      });\n      let list = [];\n      const selectedMaster = this.props.selectedMaster;\n\n      if (Array.isArray(selectedMaster)) {\n        list = selectedMaster;\n      } else {\n        list.push(selectedMaster);\n      }\n\n      rsapi.post(\"barcodeconfiguration/barcodeGeneration\", {\n        selectedMaster: list,\n        ncontrolCode: this.state.ncontrolCode,\n        userinfo: this.props.userInfo,\n        nbarcode: this.state.selectedRecord.nbarcode.item.nbarcode,\n        sprintername: this.state.selectedRecord.sprintername.value,\n        nbarcodeprintcount: this.state.selectedRecord.nbarcodeprintcount ? this.state.selectedRecord.nbarcodeprintcount : 1\n      }).then(response => {\n        toast.info(response.data);\n        this.setState({\n          openBarcodeModal: false,\n          loadEsign: false,\n          selectedRecord: {},\n          Printer: [],\n          BarcodeList: [],\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (event.target.name === 'nclientprinter' && event.target.checked === true) {//const printers =   window.navigator.printer.getPrinters();\n          /////const names = printers.map(printer => printer.name);\n          //selectedPrinterDatas {printername: { = names;\n          // this.setState({ selectedPrinterData });\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.state.loadEsign;\n      let openBarcodeModal = this.state.openBarcodeModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (loadEsign) {\n        this.setState({\n          loadEsign: false,\n          loading: false\n        });\n      } else {\n        this.setState({\n          loadEsign: false,\n          openBarcodeModal: false,\n          selectedRecord: {},\n          loading: false\n        });\n      }\n    };\n\n    this.mandatoryFields = () => {\n      const mandatory = [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_BARCODENAME\",\n        \"dataField\": \"nbarcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_PRINTER\",\n        \"dataField\": \"sprintername\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n      return mandatory;\n    };\n\n    this.state = {\n      selectedRecord: \"\",\n      ncontrolCode: -1,\n      nbarcodeprint: 1,\n      BarcodeList: [],\n      operation: \"Printbarcode\",\n      Printer: [],\n      openBarcodeModal: false,\n      loadEsign: false,\n      loadBarcode: false,\n      loading: false\n    };\n  }\n\n  render() {\n    const barcodeControl = this.props.controlMap && this.props.controlMap.has(this.props.methodUrl) && this.props.controlMap.get(this.props.methodUrl).ncontrolcode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }), this.props.isDataGrid ? /*#__PURE__*/React.createElement(FontIconWrap, {\n      className: \"d-font-icon action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BARCODEGENERATE\"\n      }),\n      \"data-place\": \"left\",\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(barcodeControl) === -1,\n      onClick: () => this.openBarcodeModal(this.props.selectedMaster, barcodeControl, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faBarcode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      role: \"button\",\n      hidden: this.props.userRoleControlRights.indexOf(barcodeControl) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BARCODEGENERATE\"\n      }),\n      onClick: () => this.openBarcodeModal(this.props.selectedMaster, barcodeControl, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faBarcode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    })), this.state.openBarcodeModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openBarcodeModal,\n      closeModal: this.closeModal,\n      operation: this.state.operation,\n      inputParam: {\n        methodUrl: this.props.methodUrl\n      },\n      screenName: this.props.screenName,\n      onSaveClick: this.barcodeGeneration,\n      esign: this.state.loadEsign,\n      validateEsign: this.validateEsign // masterStatus={this.props.Login.masterStatus}\n      // updateStore={this.props.updateStore}\n      ,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields(),\n      addComponent: this.state.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.state.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange //inputParam={this.props.Login.inputParam}\n        ,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddBarcode, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        BarcodeList: this.state.BarcodeList,\n        Printer: this.state.Printer,\n        nbarcodeprint: this.state.nbarcodeprint,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 34\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nexport default injectIntl(BarcodeButton);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/BarcodeTemplate/BarcodeButton.jsx"],"names":["React","faBarcode","FontAwesomeIcon","Button","injectIntl","SlideOutModal","Esign","constructOptionList","rsapi","Axios","toast","AddBarcode","FontIconWrap","Preloader","BarcodeButton","Component","constructor","props","openBarcodeModal","selectedMaster","ncontrolCode","userinfo","setState","loading","urlArray","getPrinter","post","getControlBasedBarcode","Multiselect","Array","isArray","all","then","response","printer","data","undefined","get","barcode","Barcode","selectedRecord","length","Printer","BarcodeList","operation","nbarcodeprint","loadBarcode","catch","error","status","message","warn","intl","formatMessage","id","barcodeGeneration","list","push","state","userInfo","nbarcode","item","sprintername","value","nbarcodeprintcount","info","loadEsign","onNumericInputChange","name","onInputOnChange","event","target","type","checked","onComboChange","comboData","fieldName","closeModal","mandatoryFields","mandatory","render","barcodeControl","controlMap","has","methodUrl","ncontrolcode","isDataGrid","userRoleControlRights","indexOf","screenName","validateEsign"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { faBarcode } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button } from \"react-bootstrap\";\r\n//import { openBarcodeModal } from '../../actions'\r\nimport { injectIntl } from \"react-intl\";\r\n//import { connect } from \"react-redux\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal'\r\nimport Esign from \"../audittrail/Esign\";\r\nimport { constructOptionList } from \"../../components/CommonScript\";\r\nimport rsapi from \"../../rsapi\";\r\nimport Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddBarcode from \"./AddBarcode\";\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport Preloader from '../../components/preloader/preloader.component'\r\n\r\n\r\nclass BarcodeButton extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n        this.state = {\r\n            selectedRecord: \"\",\r\n            ncontrolCode: -1,\r\n            nbarcodeprint: 1,\r\n            BarcodeList: [],\r\n            operation: \"Printbarcode\",\r\n            Printer: [],\r\n            openBarcodeModal: false,\r\n            loadEsign: false,\r\n            loadBarcode: false,\r\n            loading: false,\r\n        }\r\n    }\r\n\r\n    openBarcodeModal = (selectedMaster, ncontrolCode, userinfo) => {\r\n\r\n\r\n        this.setState({ loading: true })\r\n\r\n        let urlArray = [];\r\n        const getPrinter = rsapi.post(\"barcode/getPrinter\", userinfo);\r\n        const getControlBasedBarcode = rsapi.post(\"barcodeconfiguration/checkConfiguration\", { selectedMaster, ncontrolCode, userinfo, Multiselect: Array.isArray(selectedMaster) });\r\n        urlArray = [getPrinter, getControlBasedBarcode]\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n            const printer = constructOptionList(response[0].data || [], \"sprintername\",\r\n                \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n            const barcode = constructOptionList(response[1].data.Barcode || [], \"sbarcodename\",\r\n                \"sbarcodename\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n            const selectedRecord = {}\r\n\r\n            if (printer.length > 0)\r\n                selectedRecord['sprintername'] = printer[0];\r\n\r\n            if (barcode.length > 0) selectedRecord['nbarcode'] = barcode[0];\r\n            selectedRecord['nbarcodeprint'] = 1\r\n\r\n\r\n            this.setState({\r\n                openBarcodeModal: true, ncontrolCode, Printer: printer,\r\n                BarcodeList: barcode, operation: \"Printbarcode\",\r\n                nbarcodeprint: response[1].data.nbarcodeprint, selectedRecord, loadBarcode: true, loading: false\r\n            })\r\n        }).catch(error => {\r\n\r\n            // dispatch(initRequest(false));\r\n\r\n            if (error.response.status === 500) {\r\n\r\n                toast.error(error.message);\r\n\r\n            } else {\r\n\r\n                toast.warn(this.props.intl.formatMessage({\r\n\r\n                    id: error.response.data\r\n\r\n                }));\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    barcodeGeneration = () => {\r\n        //dispatch(initRequest(true));\r\n        this.setState({ loading: true })\r\n        let list = []\r\n        const selectedMaster = this.props.selectedMaster\r\n        if (Array.isArray(selectedMaster)) {\r\n            list = selectedMaster\r\n        } else {\r\n            list.push(selectedMaster)\r\n        }\r\n        rsapi.post(\"barcodeconfiguration/barcodeGeneration\", {\r\n            selectedMaster: list, ncontrolCode: this.state.ncontrolCode,\r\n            userinfo: this.props.userInfo, nbarcode: this.state.selectedRecord.nbarcode.item.nbarcode, sprintername: this.state.selectedRecord.sprintername.value,\r\n            nbarcodeprintcount: this.state.selectedRecord.nbarcodeprintcount ? this.state.selectedRecord.nbarcodeprintcount : 1\r\n        })\r\n            .then(response => {\r\n                toast.info(response.data)\r\n                this.setState({ openBarcodeModal: false, loadEsign: false, selectedRecord: {}, Printer: [], BarcodeList: [], loading: false })\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                } else {\r\n\r\n                    toast.warn(this.props.intl.formatMessage({\r\n\r\n                        id: error.response.data\r\n\r\n                    }));\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (event.target.name === 'nclientprinter' && event.target.checked === true) {\r\n                //const printers =   window.navigator.printer.getPrinters();\r\n                /////const names = printers.map(printer => printer.name);\r\n\r\n                //selectedPrinterDatas {printername: { = names;\r\n                // this.setState({ selectedPrinterData });\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.state.loadEsign;\r\n        let openBarcodeModal = this.state.openBarcodeModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n\r\n        if (loadEsign) {\r\n            this.setState({ loadEsign: false,loading:false })\r\n        }\r\n        else {\r\n            this.setState({ loadEsign: false, openBarcodeModal: false, selectedRecord: {} ,loading:false})\r\n        }\r\n\r\n    }\r\n\r\n\r\n    mandatoryFields = () => {\r\n\r\n        const mandatory = [\r\n            { \"mandatory\": true, \"idsName\": \"IDS_BARCODENAME\", \"dataField\": \"nbarcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        ]\r\n\r\n        return mandatory;\r\n    }\r\n\r\n\r\n    render() {\r\n        const barcodeControl = this.props.controlMap && this.props.controlMap.has(this.props.methodUrl) && this.props.controlMap.get(this.props.methodUrl).ncontrolcode;\r\n        return (\r\n            <>\r\n\r\n                <Preloader loading={this.state.loading} />\r\n\r\n                {this.props.isDataGrid ?\r\n\r\n                    <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                        data-tip={this.props.intl.formatMessage({ id: \"IDS_BARCODEGENERATE\" })}\r\n                        data-place=\"left\"\r\n                        hidden={this.props.\r\n                            userRoleControlRights && this.props.userRoleControlRights.indexOf(barcodeControl) === -1}\r\n                        onClick={() => this.openBarcodeModal(this.props.selectedMaster, barcodeControl, this.props.userInfo)}\r\n                    >\r\n                        <FontAwesomeIcon icon={faBarcode} />\r\n                    </FontIconWrap>\r\n                    :\r\n                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                        hidden={this.props.userRoleControlRights.indexOf(barcodeControl) === -1}\r\n                        data-tip={this.props.intl.formatMessage({ id: \"IDS_BARCODEGENERATE\" })}\r\n                        onClick={() => this.openBarcodeModal(this.props.selectedMaster, barcodeControl, this.props.userInfo)}>\r\n                        <FontAwesomeIcon icon={faBarcode} />\r\n                    </Button>\r\n                }\r\n\r\n                {this.state.openBarcodeModal &&\r\n                    <SlideOutModal\r\n                        show={this.state.openBarcodeModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.state.operation}\r\n                        inputParam={{ methodUrl: this.props.methodUrl }}\r\n                        screenName={this.props.screenName}\r\n                        onSaveClick={this.barcodeGeneration}\r\n                        esign={this.state.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        // masterStatus={this.props.Login.masterStatus}\r\n                        // updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields()}\r\n                        addComponent={this.state.loadEsign ?\r\n                            <Esign operation={this.state.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                //inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> : <AddBarcode\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputChange={this.onNumericInputChange}\r\n                                onComboChange={this.onComboChange}\r\n                                BarcodeList={this.state.BarcodeList}\r\n                                Printer={this.state.Printer}\r\n                                nbarcodeprint={this.state.nbarcodeprint}\r\n                            >\r\n                            </AddBarcode>\r\n                        }\r\n                    ></SlideOutModal>\r\n\r\n                }\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default (injectIntl(BarcodeButton));"]},"metadata":{},"sourceType":"module"}