{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { toast } from 'react-toastify';\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedInsCat !== null) {\n      let urlArray = [];\n      const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\n        \"userinfo\": userInfo\n      });\n      const Supplier = rsapi.post(\"/instrument/getSupplier\", {\n        \"userinfo\": userInfo\n      });\n      const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\n        \"userinfo\": userInfo\n      });\n      const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\n        \"userinfo\": userInfo\n      });\n      const Lab = rsapi.post(\"/section/getSection\", {\n        \"userinfo\": userInfo\n      });\n      const Period = rsapi.post(\"/instrument/getPeriod\", {\n        \"ncontrolcode\": ncontrolCode,\n        \"userinfo\": userInfo\n      });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\n        \"ncontrolcode\": ncontrolCode,\n        \"userinfo\": userInfo\n      });\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      const validationStatus = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n        \"userinfo\": userInfo\n      });\n      const calibrationStatus = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n        \"userinfo\": userInfo\n      });\n      const maintenanceStatus = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n        \"userinfo\": userInfo\n      });\n\n      if (operation === \"create\") {\n        urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService, validationStatus, calibrationStatus, maintenanceStatus];\n      } else {\n        const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\n          [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\n          \"userinfo\": userInfo\n        }); //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\n\n        urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let expiryDate = undefined;\n        let currentTime = undefined;\n        const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n        const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, false);\n        const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\", \"smanufname\", undefined, undefined, false);\n        const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, false);\n        const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false); // const validationMap={};\n        // const calibrationMap ={};\n        // const maintenanceMap ={};\n\n        let ValidationStatus = [];\n        let CalibrationStatus = [];\n        let MaintenanceStatus = [];\n        const InstrumentCategory = instcatMap.get(\"OptionList\");\n        const Supplier = supplierMap.get(\"OptionList\");\n        const Manufacturer = manufMap.get(\"OptionList\");\n        const InstrumentStatus = inststatusMap.get(\"OptionList\");\n        const Lab = sectionMap.get(\"OptionList\");\n        const Period = periodMap.get(\"OptionList\");\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        let selectedRecord = {\n          \"ninstrumentcatcode\": {\n            \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\n            \"label\": masterData.SelectedInsCat.sinstrumentcatname\n          }\n        }; // let selectedRecord = {\n        //     \"ninstrumentcatcode\": {\n        //         \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\n        //         \"label\": masterData.SelectedInsCat.sinstrumentcatname\n        //     },\n        //     \"ntzmanufdate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     //\"stzmanufdate\":userInfo.stimezoneid\n        //     \"ntzpodate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzpodate\": userInfo.stimezoneid,\n        //     \"ntzreceivedate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzreceivedate\": userInfo.stimezoneid,\n        //     \"ntzinstallationdate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzinstallationdate\": userInfo.stimezoneid,\n        //     \"ntzexpirydate\": {\n        //         \"value\": userInfo.ntimezonecode,\n        //         \"label\": userInfo.stimezoneid\n        //     },\n        //     \"stzexpirydate\": userInfo.stimezoneid\n        // };\n\n        let instrumentCategory = [];\n        let supplier = [];\n        let manufacturer = [];\n        let instrumentstatus = [];\n        let nwindowsperiodminusunit = [];\n        let nwindowsperiodplusunit = [];\n        ;\n        let lab = [];\n        let ntzmanufdate = [];\n        let ntzpodate = [];\n        let ntzreceivedate = [];\n        let ntzinstallationdate = [];\n        let ntzexpirydate = [];\n        let susername = [];\n        let service = [];\n        let validation = [];\n        let calibration = [];\n        let maintenance = []; //if (operation === \"create\") {\n        // let date = rearrangeDateFormat(userInfo, response[8].data);\n        // selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\n        // selectedRecord[\"dpodate\"] = date;\n        // selectedRecord[\"dreceiveddate\"] = date;\n        // selectedRecord[\"dinstallationdate\"] = date;\n        // currentTime = date;\n        // if (response[7].data[\"ExpiryDate\"] !== \"\") {\n        //     expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\n        //     selectedRecord[\"dexpirydate\"] = expiryDate;\n        // }\n        //   }\n\n        if (operation === \"update\") {\n          selectedRecord = response[7].data;\n          instrumentCategory.push({\n            \"value\": response[7].data[\"ninstrumentcatcode\"],\n            \"label\": response[7].data[\"sinstrumentcatname\"]\n          });\n          supplier.push({\n            \"value\": response[7].data[\"nsuppliercode\"],\n            \"label\": response[7].data[\"ssuppliername\"]\n          });\n          service.push({\n            \"value\": response[7].data[\"nservicecode\"],\n            \"label\": response[7].data[\"sserviceby\"]\n          });\n          manufacturer.push({\n            \"value\": response[7].data[\"nmanufcode\"],\n            \"label\": response[7].data[\"smanufname\"]\n          });\n          instrumentstatus.push({\n            \"value\": response[7].data[\"ntranscode\"],\n            \"label\": response[7].data[\"sactivestatus\"]\n          });\n          nwindowsperiodminusunit.push({\n            \"value\": response[7].data[\"nwindowsperiodminusunit\"],\n            \"label\": response[7].data[\"swindowsperiodminusunit\"]\n          });\n          nwindowsperiodplusunit.push({\n            \"value\": response[7].data[\"nwindowsperiodplusunit\"],\n            \"label\": response[7].data[\"swindowsperiodplusunit\"]\n          });\n          lab.push({\n            \"value\": response[7].data[\"nsectioncode\"],\n            \"label\": response[7].data[\"ssectionname\"]\n          });\n          ntzmanufdate.push({\n            \"value\": response[7].data[\"ntzmanufdate\"],\n            \"label\": response[7].data[\"stzmanufdate\"]\n          });\n          ntzpodate.push({\n            \"value\": response[7].data[\"ntzpodate\"],\n            \"label\": response[7].data[\"stzpodate\"]\n          });\n          ntzreceivedate.push({\n            \"value\": response[7].data[\"ntzreceivedate\"],\n            \"label\": response[7].data[\"stzreceivedate\"]\n          });\n          ntzinstallationdate.push({\n            \"value\": response[7].data[\"ntzinstallationdate\"],\n            \"label\": response[7].data[\"stzinstallationdate\"]\n          });\n          ntzexpirydate.push({\n            \"value\": response[7].data[\"ntzexpirydate\"],\n            \"label\": response[7].data[\"stzexpirydate\"]\n          });\n          susername.push({\n            \"value\": response[7].data[\"nusercode1\"],\n            \"label\": response[7].data[\"susername\"]\n          }); // validation.push({\n          //     \"value\": response[8].data[\"ntranscode\"],\n          //     \"label\": response[8].data[\"stransdisplaystatus\"]\n          // })\n          // calibration.push({\n          //     \"value\": response[9].data[\"ntranscode\"],\n          //     \"label\": response[9].data[\"stransdisplaystatus\"]\n          // })\n          // maintenance.push({\n          //     \"value\": response[10].data[\"ntranscode\"],\n          //     \"label\": response[10].data[\"stransdisplaystatus\"]\n          // })\n\n          if (response[7].data[\"smanufacdate\"] !== \"\") {\n            selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n\n          if (response[7].data[\"spodate\"] !== \"\") {\n            selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\n          } // else{\n          //     selectedRecord[\"dpodate\"] = \" \";\n          // }\n\n\n          if (response[7].data[\"sreceiveddate\"] !== \"\") {\n            selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\n          }\n\n          if (response[7].data[\"sinstallationdate\"] !== \"\") {\n            selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\n          }\n\n          if (response[7].data[\"sexpirydate\"] !== \"\") {\n            selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\n          }\n\n          selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\n          selectedRecord[\"nsuppliercode\"] = supplier[0];\n          selectedRecord[\"nservicecode\"] = service[0];\n          if (manufacturer[0].value !== -1) selectedRecord[\"nmanufcode\"] = manufacturer[0];\n          if (instrumentstatus[0].value !== -1) selectedRecord[\"ntranscode\"] = instrumentstatus[0];\n          if (nwindowsperiodminusunit[0].value !== -1) selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\n          if (nwindowsperiodplusunit[0].value !== -1) selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\n          selectedRecord[\"nsectioncode\"] = lab[0];\n          selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\n          selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n          selectedRecord[\"ntzpodate\"] = ntzpodate[0];\n          selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n          selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\n          selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n          selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\n          selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n          selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\n          selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n          selectedRecord[\"susername\"] = susername[0]; //  selectedRecord[\"ntranscode\"] = validation[0];\n          //  selectedRecord[\"ntranscode\"] = calibration[0];\n          //     selectedRecord[\"ntranscode\"] = maintenance[0];\n        } else {\n          const validationMap = constructOptionList(response[9].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          const calibrationMap = constructOptionList(response[10].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          const maintenanceMap = constructOptionList(response[11].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          ValidationStatus = validationMap.get(\"OptionList\");\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n          const timezone = TimeZoneList.filter(x => x.value === userInfo.ntimezonecode);\n          selectedRecord[\"ntzmanufdate\"] = timezone; // selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\n\n          selectedRecord[\"ntzpodate\"] = timezone; // selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\n\n          selectedRecord[\"ntzreceivedate\"] = timezone; // selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\n\n          selectedRecord[\"ntzinstallationdate\"] = timezone; // selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\n\n          selectedRecord[\"ntzexpirydate\"] = timezone; //selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\n\n          let date = rearrangeDateFormat(userInfo, response[8].data);\n          selectedRecord[\"dclosedate\"] = date;\n          selectedRecord[\"dopendate\"] = date;\n          selectedRecord[\"dlastcalibrationdate\"] = date;\n          selectedRecord[\"dlastmaintenancedate\"] = date;\n          selectedRecord[\"dduedate\"] = date;\n          selectedRecord[\"dvalidationdate\"] = date;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            InstrumentCategory,\n            Supplier,\n            Manufacturer,\n            InstrumentStatus,\n            instrumentCategory: instrumentCategory,\n            supplier: supplier,\n            manufacturer: manufacturer,\n            Lab,\n            Period,\n            TimeZoneList,\n            ValidationStatus,\n            CalibrationStatus,\n            MaintenanceStatus,\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            currentTime,\n            expiryDate\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CONFIGINSTRUMENTCATAGORY\"\n      }));\n    }\n  };\n}\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getSectionBasedUser\", {\n      \"nsectioncode\": nsectioncode\n    }, {\n      userinfo: userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n\n      if (screenName === \"IDS_SECTION\") {\n        //let sectionusers=[];\n        const userName = constructOptionList(response.data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n        Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"]=\"\";\n\n        selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\n      } else {\n        Users = response.data;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"instrument/getInstrument\", {\n      ninstrumentcode: Instrument.ninstrumentcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = '';\n    url = \"/instrument/getUsers\";\n    return rsapi.post(url, {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const userMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const Lab = secMap.get(\"OptionList\");\n      const LabDefault = secMap.get(\"DefaultValue\");\n\n      if (LabDefault !== undefined) {\n        selectedRecord = {\n          \"nsectioncode\": {\n            \"value\": LabDefault.value,\n            \"label\": LabDefault.label\n          }\n        };\n      }\n\n      const Users = userMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Lab,\n          Users,\n          isOpen: true,\n          selectedRecord,\n          operation: \"create\",\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          instItem: instItem,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 417) {\n        toast.info(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterInstrumentCategory,\n            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const addInstrumentFile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\n      userinfo: inputParam.userInfo,\n      Instrumentfile: inputParam.selectedRecord\n    }));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let editObject = {};\n      let operation = \"update\";\n      editObject = response[0].data;\n      selectedRecord = {\n        ninstrumentfilecode: editObject.ninstrumentfilecode,\n        sfiledesc: editObject.sfiledesc,\n        sfilename: editObject.sfilename,\n        sdescription: editObject.sdescription,\n        ssystemfilename: editObject.ssystemfilename\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n    const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\n      \"userinfo\": userInfo\n    });\n\n    if (operation === \"create\") {\n      urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\n    } else {\n      const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\n        [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let ValidationData = [];\n      const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const ValidationStatus = validationMap.get(\"OptionList\");\n      let ntzvalidationdate = [];\n      const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n      const TimeZoneList = timezoneMap.get(\"OptionList\");\n\n      if (operation === \"create\") {\n        selectedRecord = {\n          \"ntzvalidationdate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stzvalidationdate\": userInfo.stimezoneid\n        };\n        let date = rearrangeDateFormat(userInfo, response[1].data);\n        selectedRecord[\"dvalidationdate\"] = date;\n      }\n\n      if (operation === \"update\") {\n        ValidationData.push({\n          \"value\": response[3].data[\"nvalidationstatus\"],\n          \"label\": response[3].data[\"stransdisplaystatus\"]\n        });\n        selectedRecord = response[3].data;\n        selectedRecord[\"ntranscode\"] = ValidationData[0];\n        ntzvalidationdate.push({\n          \"value\": response[3].data[\"ntzvalidationdate\"],\n          \"label\": response[3].data[\"stzvalidationdate\"]\n        });\n        selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\n\n        if (response[3].data[\"svalidationdate\"] !== \"\") {\n          selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ValidationStatus,\n          TimeZoneList,\n          selectedRecord: selectedRecord,\n          isOpen: true,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\n      \"userinfo\": userInfo\n    });\n    const LastCalibrationDateService = rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\n      \"userinfo\": userInfo,\n      ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n    });\n\n    if (operation === \"create\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 1,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\n    } else {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\n        [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let CalibrationStatus = [];\n      let TimeZoneList = [];\n\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let selectedRecord = {};\n        let CalibrationData = [];\n        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        CalibrationStatus = calibrationMap.get(\"OptionList\");\n        let Action;\n        let ntzlastcalibrationdate = [];\n        let ntzduedate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          selectedRecord = {\n            \"ntzlastcalibrationdate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzlastcalibrationdate\": userInfo.stimezoneid,\n            \"ntzduedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzduedate\": userInfo.stimezoneid\n          };\n          let date = rearrangeDateFormat(userInfo, response[1].data.date);\n          selectedRecord[\"dlastcalibrationdate\"] = date;\n          selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n          Action = 'Add';\n        }\n\n        if (operation === \"update\") {\n          Action = 'Edit';\n          CalibrationData.push({\n            \"value\": response[4].data[\"ncalibrationstatus\"],\n            \"label\": response[4].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[4].data;\n          selectedRecord[\"ntranscode\"] = CalibrationData[0];\n          ntzlastcalibrationdate.push({\n            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\n            \"label\": response[4].data[\"stzlastcalibrationdate\"]\n          });\n          ntzduedate.push({\n            \"value\": response[4].data[\"ntzduedate\"],\n            \"label\": response[4].data[\"stzduedate\"]\n          });\n          selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\n          selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n          if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\n            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\n          }\n\n          if (response[4].data[\"sduedate\"] !== \"\") {\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            CalibrationStatus,\n            Action: Action,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getTabDetails = inputParam => {\n  return function (dispatch) {\n    const instrumentValidation = inputParam.instrumentValidation;\n    const instrumentCalibration = inputParam.instrumentCalibration;\n    const instrumentMaintenance = inputParam.instrumentMaintenance;\n    let urlArray = [];\n    dispatch(initRequest(true));\n\n    if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentValidation.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentCalibration.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\n        userinfo: inputParam.userInfo\n      }));\n    } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\n      urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\n        ninstrumentcode: instrumentMaintenance.ninstrumentcode,\n        \"nFlag\": inputParam.nFlag,\n        ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\n        userinfo: inputParam.userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let masterData = inputParam.masterData;\n      masterData = { ...masterData,\n        ...response[0].data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const LastMaintenanceDateService = rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\n      \"userinfo\": userInfo,\n      ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n    });\n    const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\n      \"userinfo\": userInfo\n    });\n\n    if (operation === \"create\") {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 1,\n        ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\n      });\n      urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\n        [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let MaintenanceStatus = [];\n      let TimeZoneList = [];\n\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let selectedRecord = {};\n        let MaintenanceData = [];\n        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        let Action;\n        let ntzlastmaintenancedate = [];\n        let ntzduedate = [];\n        const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        TimeZoneList = timezoneMap.get(\"OptionList\");\n\n        if (operation === \"create\") {\n          selectedRecord = {\n            \"ntzlastmaintenancedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzlastmaintenancedate\": userInfo.stimezoneid,\n            \"ntzduedate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stzduedate\": userInfo.stimezoneid\n          };\n          let date = rearrangeDateFormat(userInfo, response[1].data.date);\n          selectedRecord[\"dlastmaintenancedate\"] = date;\n          selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\n          Action = 'Add';\n        }\n\n        if (operation === \"update\") {\n          Action = 'Edit';\n          MaintenanceData.push({\n            \"value\": response[4].data[\"nmaintenancestatus\"],\n            \"label\": response[4].data[\"stransdisplaystatus\"]\n          });\n          selectedRecord = response[4].data;\n          selectedRecord[\"ntranscode\"] = MaintenanceData[0];\n          ntzlastmaintenancedate.push({\n            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\n            \"label\": response[4].data[\"stzlastmaintenancedate\"]\n          });\n          ntzduedate.push({\n            \"value\": response[4].data[\"ntzduedate\"],\n            \"label\": response[4].data[\"stzduedate\"]\n          });\n          selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\n          selectedRecord[\"ntzduedate\"] = ntzduedate[0];\n\n          if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\n            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n\n          if (response[4].data[\"sduedate\"] !== \"\") {\n            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            MaintenanceStatus,\n            Action: Action,\n            TimeZoneList,\n            selectedRecord: selectedRecord,\n            isOpen: true,\n            operation: operation,\n            screenName: screenName,\n            openModal: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: screenName,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 3,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\n      });\n      urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 3,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\n      });\n      urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let CalibrationStatus = {};\n        let MaintenanceStatus = {};\n        let selectedRecord = {};\n        const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        selectedRecord = {\n          \"ntzopendate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stzopendate\": userInfo.stimezoneid\n        };\n        let date = rearrangeDateFormat(userInfo, response[2].data);\n        selectedRecord[\"dopendate\"] = date;\n\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n        } else {\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        }\n\n        let operation = \"create\";\n        let modalTitle = \"IDS_OPENDATE\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            modalTitle: modalTitle,\n            CalibrationStatus: CalibrationStatus,\n            MaintenanceStatus: MaintenanceStatus,\n            TimeZoneList: TimeZoneList,\n            screenName: screenName,\n            modalShow: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\n  return function (dispatch) {\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n      const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 4,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\n        ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\n      });\n      const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\n      });\n      urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\n    } else {\n      const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\n        \"userinfo\": userInfo,\n        nFlag: 4,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\n        ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\n      });\n      const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\n        \"userinfo\": userInfo,\n        nFlag: 2,\n        ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\n      });\n      urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[3].data.OpenCloseStatus === \"Success\") {\n        let CalibrationStatus = [];\n        let MaintenanceStatus = {};\n        let selectedRecord = {};\n        const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, false);\n        const TimeZoneList = timezoneMap.get(\"OptionList\");\n        selectedRecord = {\n          \"ntzclosedate\": {\n            \"value\": userInfo.ntimezonecode,\n            \"label\": userInfo.stimezoneid\n          },\n          \"stzclosedate\": userInfo.stimezoneid\n        };\n        let date = rearrangeDateFormat(userInfo, response[2].data);\n        selectedRecord[\"dclosedate\"] = date;\n\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\n          const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          CalibrationStatus = calibrationMap.get(\"OptionList\");\n        } else {\n          const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n          MaintenanceStatus = maintenanceMap.get(\"OptionList\");\n        }\n\n        let operation = \"create\";\n        let modalTitle = \"IDS_CLOSEDATE\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isOpen: true,\n            selectedRecord: selectedRecord,\n            operation: operation,\n            modalTitle: modalTitle,\n            CalibrationStatus: CalibrationStatus,\n            MaintenanceStatus: MaintenanceStatus,\n            TimeZoneList: TimeZoneList,\n            screenName: screenName,\n            modalShow: true,\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[3].data.Status\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/InstrumentAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","Axios","initRequest","intl","toast","getInstrumentCombo","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","SelectedInsCat","urlArray","InstrumentCategory","post","Supplier","Manufacturer","InstrumentStatus","Lab","Period","timeZoneService","Instrumentdate","UTCtimeZoneService","userinfo","validationStatus","calibrationStatus","maintenanceStatus","InstrumentId","selectedInstrument","all","then","response","expiryDate","undefined","currentTime","instcatMap","data","supplierMap","manufMap","inststatusMap","sectionMap","periodMap","timezoneMap","ValidationStatus","CalibrationStatus","MaintenanceStatus","get","TimeZoneList","selectedRecord","ninstrumentcatcode","sinstrumentcatname","instrumentCategory","supplier","manufacturer","instrumentstatus","nwindowsperiodminusunit","nwindowsperiodplusunit","lab","ntzmanufdate","ntzpodate","ntzreceivedate","ntzinstallationdate","ntzexpirydate","susername","service","validation","calibration","maintenance","push","value","label","validationMap","calibrationMap","maintenanceMap","timezone","filter","x","ntimezonecode","date","type","payload","isOpen","openModal","loading","catch","error","status","formatMessage","id","message","warn","getSectionUsers","nsectioncode","Users","userName","getInstrumentDetail","Instrument","ninstrumentcode","modalName","dataState","getAvailableInstData","instItem","url","key","secMap","Section","userMap","LabDefault","info","changeInstrumentCategoryFilter","inputParam","filterInstrumentCategory","methodUrl","inputData","nfilterInstrumentCategory","addInstrumentFile","Instrumentfile","editObject","ninstrumentfilecode","sfiledesc","sfilename","sdescription","ssystemfilename","showSaveContinue","editFiles","nattachmenttypecode","getDataForAddEditValidation","validationStatusService","ValidationById","selectedInstrumentValidation","ninstrumentvalidationcode","ValidationData","ntzvalidationdate","stimezoneid","getDataForAddEditCalibration","calibrationStatusService","LastCalibrationDateService","calibrationValidationService","nFlag","ninstrumentcalibrationcode","selectedInstrumentCalibration","CalibrationById","OpenCloseStatus","CalibrationData","Action","ntzlastcalibrationdate","ntzduedate","Date","Status","getTabDetails","instrumentValidation","instrumentCalibration","instrumentMaintenance","ninstrumentmaintenancecode","getDataForAddEditMaintenance","LastMaintenanceDateService","maintenanceStatusService","maintenanceValidationService","selectedInstrumentMaintenance","MaintenanceById","MaintenanceData","ntzlastmaintenancedate","OpenDate","modalTitle","modalShow","CloseDate"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    sortData,\r\n    constructOptionList,\r\n    rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\n\r\nexport function getInstrumentCombo(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedInsCat!==null) {\r\n        let urlArray = [];\r\n        const InstrumentCategory = rsapi.post(\"/instrumentcategory/fetchinstrumentcategory\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Supplier = rsapi.post(\"/instrument/getSupplier\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Manufacturer = rsapi.post(\"/instrument/getManufacturer\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const InstrumentStatus = rsapi.post(\"/instrument/getInstrumentStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Lab = rsapi.post(\"/section/getSection\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const Period = rsapi.post(\"/instrument/getPeriod\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        const Instrumentdate = rsapi.post(\"/instrument/addInstrumentDate\", {\r\n            \"ncontrolcode\": ncontrolCode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n        const validationStatus = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const calibrationStatus = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const maintenanceStatus = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        if (operation === \"create\") {\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, Instrumentdate, UTCtimeZoneService,validationStatus,calibrationStatus,maintenanceStatus];\r\n\r\n        } else {\r\n            const InstrumentId = rsapi.post(\"/instrument/getActiveInstrumentById\", {\r\n                [primaryKeyName]: masterData.selectedInstrument[primaryKeyName],\r\n                \"userinfo\": userInfo\r\n            });\r\n            //const ManufacturerByID = rsapi.post(\"/manufacturer/getManufacturerById\", { [primaryKeyName] :masterData.selectedManufacturer[primaryKeyName], \"userinfo\": userInfo });\r\n            urlArray = [InstrumentCategory, Supplier, Manufacturer, InstrumentStatus, Lab, Period, timeZoneService, InstrumentId, Instrumentdate, UTCtimeZoneService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                let expiryDate = undefined;\r\n                let currentTime = undefined;\r\n                const instcatMap = constructOptionList(response[0].data || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, false);\r\n\r\n                const supplierMap = constructOptionList(response[1].data.Supplier || [], \"nsuppliercode\",\r\n                    \"ssuppliername\", undefined, undefined, false);\r\n\r\n                const manufMap = constructOptionList(response[2].data.Manufacturer || [], \"nmanufcode\",\r\n                    \"smanufname\", undefined, undefined, false);\r\n\r\n                const inststatusMap = constructOptionList(response[3].data || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const periodMap = constructOptionList(response[5].data || [], \"nperiodcode\",\r\n                    \"speriodname\", undefined, undefined, false);\r\n\r\n                const timezoneMap = constructOptionList(response[6].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                // const validationMap={};\r\n                // const calibrationMap ={};\r\n                // const maintenanceMap ={};\r\n                let ValidationStatus =[];\r\n                let CalibrationStatus=[];\r\n                let MaintenanceStatus=[];\r\n\r\n                const InstrumentCategory = instcatMap.get(\"OptionList\");\r\n                const Supplier = supplierMap.get(\"OptionList\");\r\n                const Manufacturer = manufMap.get(\"OptionList\");\r\n                const InstrumentStatus = inststatusMap.get(\"OptionList\");\r\n                const Lab = sectionMap.get(\"OptionList\");\r\n                const Period = periodMap.get(\"OptionList\");\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                \r\n\r\n                let selectedRecord = {\"ninstrumentcatcode\": {\r\n                            \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\r\n                             \"label\": masterData.SelectedInsCat.sinstrumentcatname\r\n                         }};\r\n                // let selectedRecord = {\r\n                //     \"ninstrumentcatcode\": {\r\n                //         \"value\": masterData.SelectedInsCat.ninstrumentcatcode,\r\n                //         \"label\": masterData.SelectedInsCat.sinstrumentcatname\r\n                //     },\r\n                //     \"ntzmanufdate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     //\"stzmanufdate\":userInfo.stimezoneid\r\n\r\n                //     \"ntzpodate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzpodate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzreceivedate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzreceivedate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzinstallationdate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzinstallationdate\": userInfo.stimezoneid,\r\n\r\n\r\n                //     \"ntzexpirydate\": {\r\n                //         \"value\": userInfo.ntimezonecode,\r\n                //         \"label\": userInfo.stimezoneid\r\n                //     },\r\n                //     \"stzexpirydate\": userInfo.stimezoneid\r\n                // };\r\n                let instrumentCategory = [];\r\n                let supplier = [];\r\n                let manufacturer = [];\r\n                let instrumentstatus = [];\r\n                let nwindowsperiodminusunit = [];\r\n                let nwindowsperiodplusunit = [];;\r\n                let lab = [];\r\n                let ntzmanufdate = [];\r\n                let ntzpodate = [];\r\n                let ntzreceivedate = [];\r\n                let ntzinstallationdate = [];\r\n                let ntzexpirydate = [];\r\n                let susername = [];\r\n                let service = [];\r\n                let validation = [];\r\n                let calibration = [];\r\n                let maintenance = [];\r\n\r\n                //if (operation === \"create\") {\r\n                    // let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                    // selectedRecord[\"dmanufacdate\"] = date; //new Date(response[8].data);\r\n                    // selectedRecord[\"dpodate\"] = date;\r\n                    // selectedRecord[\"dreceiveddate\"] = date;\r\n                    // selectedRecord[\"dinstallationdate\"] = date;\r\n                    // currentTime = date;\r\n                    // if (response[7].data[\"ExpiryDate\"] !== \"\") {\r\n                    //     expiryDate = rearrangeDateFormat(userInfo, response[7].data[\"ExpiryDate\"]); //new Date(response[7].data[\"ExpiryDate\"]);\r\n                    //     selectedRecord[\"dexpirydate\"] = expiryDate;\r\n                    // }\r\n             //   }\r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[7].data;\r\n                    instrumentCategory.push({\r\n                        \"value\": response[7].data[\"ninstrumentcatcode\"],\r\n                        \"label\": response[7].data[\"sinstrumentcatname\"]\r\n                    });\r\n                    supplier.push({\r\n                        \"value\": response[7].data[\"nsuppliercode\"],\r\n                        \"label\": response[7].data[\"ssuppliername\"]\r\n                    });\r\n                    service.push({\r\n                        \"value\": response[7].data[\"nservicecode\"],\r\n                        \"label\": response[7].data[\"sserviceby\"]\r\n                    });\r\n                    manufacturer.push({\r\n                        \"value\": response[7].data[\"nmanufcode\"],\r\n                        \"label\": response[7].data[\"smanufname\"]\r\n                    });\r\n                    instrumentstatus.push({\r\n                        \"value\": response[7].data[\"ntranscode\"],\r\n                        \"label\": response[7].data[\"sactivestatus\"]\r\n                    });\r\n                    nwindowsperiodminusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodminusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodminusunit\"]\r\n                    });\r\n                    nwindowsperiodplusunit.push({\r\n                        \"value\": response[7].data[\"nwindowsperiodplusunit\"],\r\n                        \"label\": response[7].data[\"swindowsperiodplusunit\"]\r\n                    });\r\n                    lab.push({\r\n                        \"value\": response[7].data[\"nsectioncode\"],\r\n                        \"label\": response[7].data[\"ssectionname\"]\r\n                    })\r\n                    ntzmanufdate.push({\r\n                        \"value\": response[7].data[\"ntzmanufdate\"],\r\n                        \"label\": response[7].data[\"stzmanufdate\"]\r\n                    })\r\n                    ntzpodate.push({\r\n                        \"value\": response[7].data[\"ntzpodate\"],\r\n                        \"label\": response[7].data[\"stzpodate\"]\r\n                    })\r\n                    ntzreceivedate.push({\r\n                        \"value\": response[7].data[\"ntzreceivedate\"],\r\n                        \"label\": response[7].data[\"stzreceivedate\"]\r\n                    })\r\n                    ntzinstallationdate.push({\r\n                        \"value\": response[7].data[\"ntzinstallationdate\"],\r\n                        \"label\": response[7].data[\"stzinstallationdate\"]\r\n                    })\r\n                    ntzexpirydate.push({\r\n                        \"value\": response[7].data[\"ntzexpirydate\"],\r\n                        \"label\": response[7].data[\"stzexpirydate\"]\r\n                    })\r\n                    susername.push({\r\n                        \"value\": response[7].data[\"nusercode1\"],\r\n                        \"label\": response[7].data[\"susername\"]\r\n                    })\r\n                    // validation.push({\r\n                    //     \"value\": response[8].data[\"ntranscode\"],\r\n                    //     \"label\": response[8].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    // calibration.push({\r\n                    //     \"value\": response[9].data[\"ntranscode\"],\r\n                    //     \"label\": response[9].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    // maintenance.push({\r\n                    //     \"value\": response[10].data[\"ntranscode\"],\r\n                    //     \"label\": response[10].data[\"stransdisplaystatus\"]\r\n                    // })\r\n                    if (response[7].data[\"smanufacdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dmanufacdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"smanufacdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"spodate\"] !== \"\") {\r\n                        selectedRecord[\"dpodate\"] = rearrangeDateFormat(userInfo, response[7].data[\"spodate\"]); //new Date(response[7].data[\"spodate\"]);\r\n                    }\r\n                    // else{\r\n                    //     selectedRecord[\"dpodate\"] = \" \";\r\n                    // }\r\n\r\n                    if (response[7].data[\"sreceiveddate\"] !== \"\") {\r\n                        selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sreceiveddate\"]); //new Date(response[7].data[\"sreceiveddate\"]);\r\n                    }\r\n                    if (response[7].data[\"sinstallationdate\"] !== \"\") {\r\n                        selectedRecord[\"dinstallationdate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sinstallationdate\"]); //new Date(response[7].data[\"sinstallationdate\"]);\r\n                    }\r\n\r\n                    if (response[7].data[\"sexpirydate\"] !== \"\") {\r\n                        selectedRecord[\"dexpirydate\"] = rearrangeDateFormat(userInfo, response[7].data[\"sexpirydate\"]); //new Date(response[7].data[\"sexpirydate\"]);\r\n                    }\r\n\r\n\r\n                    selectedRecord[\"ninstrumentcatcode\"] = instrumentCategory[0];\r\n                    selectedRecord[\"nsuppliercode\"] = supplier[0];\r\n                    selectedRecord[\"nservicecode\"] = service[0];\r\n                    if (manufacturer[0].value !== -1)\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n                    if (instrumentstatus[0].value !== -1)\r\n                        selectedRecord[\"ntranscode\"] = instrumentstatus[0];\r\n                    if (nwindowsperiodminusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodminusunit\"] = nwindowsperiodminusunit[0];\r\n                    if (nwindowsperiodplusunit[0].value !== -1)\r\n                        selectedRecord[\"nwindowsperiodplusunit\"] = nwindowsperiodplusunit[0];\r\n                    selectedRecord[\"nsectioncode\"] = lab[0];\r\n                    selectedRecord[\"ntzmanufdate\"] = ntzmanufdate[0];\r\n                    selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                    selectedRecord[\"ntzpodate\"] = ntzpodate[0];\r\n                    selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                    selectedRecord[\"ntzreceivedate\"] = ntzreceivedate[0];\r\n                    selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                    selectedRecord[\"ntzinstallationdate\"] = ntzinstallationdate[0];\r\n                    selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                    selectedRecord[\"ntzexpirydate\"] = ntzexpirydate[0];\r\n                    selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n                    selectedRecord[\"susername\"] = susername[0];\r\n                  //  selectedRecord[\"ntranscode\"] = validation[0];\r\n                 //  selectedRecord[\"ntranscode\"] = calibration[0];\r\n               //     selectedRecord[\"ntranscode\"] = maintenance[0];\r\n\r\n                }\r\n                else{\r\n                    const validationMap = constructOptionList(response[9].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    const calibrationMap = constructOptionList(response[10].data.CalibrationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                    const maintenanceMap = constructOptionList(response[11].data.MaintenanceStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                 ValidationStatus = validationMap.get(\"OptionList\");\r\n                 CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                 MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n\r\n                   const timezone=  TimeZoneList.filter(x=>x.value===userInfo.ntimezonecode);\r\n\r\n                   selectedRecord[\"ntzmanufdate\"] = timezone;\r\n                  // selectedRecord[\"stzmanufdate\"] = ntzmanufdate[0].label;\r\n                   selectedRecord[\"ntzpodate\"] = timezone;\r\n                  // selectedRecord[\"stzpodate\"] = ntzpodate[0].label;\r\n                   selectedRecord[\"ntzreceivedate\"] = timezone;\r\n                  // selectedRecord[\"stzreceivedate\"] = ntzreceivedate[0].label;\r\n                   selectedRecord[\"ntzinstallationdate\"] = timezone;\r\n                  // selectedRecord[\"stzinstallationdate\"] = ntzinstallationdate[0].label;\r\n                   selectedRecord[\"ntzexpirydate\"] = timezone;\r\n                   //selectedRecord[\"stzexpirydate\"] = ntzexpirydate[0].label;\r\n\r\n\r\n                   let date = rearrangeDateFormat(userInfo, response[8].data);\r\n                     selectedRecord[\"dclosedate\"] = date; \r\n                     selectedRecord[\"dopendate\"] = date;\r\n                     selectedRecord[\"dlastcalibrationdate\"] = date; \r\n                     selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                     selectedRecord[\"dduedate\"] = date; \r\n                     selectedRecord[\"dvalidationdate\"] = date;\r\n                }\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        InstrumentCategory,\r\n                        Supplier,\r\n                        Manufacturer,\r\n                        InstrumentStatus,\r\n                        instrumentCategory: instrumentCategory,\r\n                        supplier: supplier,\r\n                        manufacturer: manufacturer,\r\n                        Lab,\r\n                        Period,\r\n                        TimeZoneList,\r\n                        ValidationStatus,\r\n                        CalibrationStatus,\r\n                        MaintenanceStatus,\r\n                        isOpen: true,\r\n                        selectedRecord: selectedRecord,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false,\r\n                        currentTime,\r\n                        expiryDate\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CONFIGINSTRUMENTCATAGORY\" }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getSectionUsers(nsectioncode, userInfo, selectedRecord, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getSectionBasedUser\", {\r\n                \"nsectioncode\": nsectioncode\r\n            }, {\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n                let Users = [];\r\n                if (screenName === \"IDS_SECTION\") {\r\n                    //let sectionusers=[];\r\n                    const userName = constructOptionList(response.data || [], \"nusercode\",\r\n                        \"susername\", undefined, undefined, false);\r\n                    Users = userName.get(\"OptionList\");\r\n                    //selectedRecord[\"nusercode\"]=\"\";\r\n                    selectedRecord[\"nusercode\"] = undefined; //{label:SectionUsers[0].label,value:SectionUsers[0].value,item:SectionUsers[0]};\r\n                } else {\r\n                    Users = response.data;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function getInstrumentDetail(Instrument, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"instrument/getInstrument\", {\r\n                ninstrumentcode: Instrument.ninstrumentcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        operation: null,\r\n                        modalName: undefined,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getAvailableInstData = (instItem, url, key, screenName, userInfo, ncontrolCode, selectedRecord) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = ''\r\n\r\n        url = \"/instrument/getUsers\";\r\n\r\n        return rsapi.post(url, {\r\n                \"userinfo\": userInfo\r\n            })\r\n            .then(response => {\r\n\r\n                const secMap = constructOptionList(response.data.Section || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n                const userMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, false);\r\n                const Lab = secMap.get(\"OptionList\");\r\n                const LabDefault = secMap.get(\"DefaultValue\");\r\n                if (LabDefault !== undefined) {\r\n                    selectedRecord = {\r\n                        \"nsectioncode\": {\r\n                            \"value\": LabDefault.value,\r\n                            \"label\": LabDefault.label\r\n                        },\r\n                    }\r\n                }\r\n                const Users = userMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        Lab,\r\n                        Users,\r\n                        isOpen: true,\r\n                        selectedRecord,\r\n                        operation: \"create\",\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        instItem: instItem,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const changeInstrumentCategoryFilter = (inputParam, filterInstrumentCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/instrument/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                    \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterInstrumentCategory,\r\n                            nfilterInstrumentCategory: inputParam.inputData.nfilterInstrumentCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addInstrumentFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        urlArray.push(rsapi.post(\"/instrument/editInstrumentFile\", {\r\n            userinfo: inputParam.userInfo,\r\n            Instrumentfile: inputParam.selectedRecord\r\n        }))\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let editObject = {};\r\n                let operation = \"update\";\r\n                editObject = response[0].data;\r\n\r\n                selectedRecord = {\r\n                    ninstrumentfilecode: editObject.ninstrumentfilecode,\r\n                    sfiledesc: editObject.sfiledesc,\r\n\r\n                    sfilename: editObject.sfilename,\r\n                    sdescription: editObject.sdescription,\r\n                    ssystemfilename: editObject.ssystemfilename\r\n                };\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        operation: operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditValidation = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {userinfo: userInfo});\r\n        const validationStatusService = rsapi.post(\"instrument/getInstrumentValidationStatus\", {\"userinfo\": userInfo});\r\n\r\n        if (operation === \"create\") {\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService];\r\n\r\n        } else {\r\n            const ValidationById = rsapi.post(\"instrument/getActiveInstrumentValidationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentValidation.ninstrumentvalidationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n            urlArray = [validationStatusService, UTCtimeZoneService, timeZoneService, ValidationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let ValidationData = [];\r\n\r\n\r\n                const validationMap = constructOptionList(response[0].data.ValidationStatus || [], \"ntranscode\",\r\n                    \"stransstatus\", undefined, undefined, false);\r\n\r\n                const ValidationStatus = validationMap.get(\"OptionList\");\r\n\r\n                let ntzvalidationdate = [];\r\n                const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, false);\r\n\r\n                const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                if (operation === \"create\") {\r\n                     selectedRecord = {\r\n                        \"ntzvalidationdate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzvalidationdate\": userInfo.stimezoneid,\r\n                    };\r\n                    let date = rearrangeDateFormat(userInfo, response[1].data);\r\n                    selectedRecord[\"dvalidationdate\"] = date;\r\n\r\n                }\r\n                if (operation === \"update\") {\r\n\r\n                    ValidationData.push({\r\n                        \"value\": response[3].data[\"nvalidationstatus\"],\r\n                        \"label\": response[3].data[\"stransdisplaystatus\"]\r\n                    });\r\n                    selectedRecord = response[3].data;\r\n                    selectedRecord[\"ntranscode\"] = ValidationData[0];\r\n\r\n                    ntzvalidationdate.push({\r\n                        \"value\": response[3].data[\"ntzvalidationdate\"],\r\n                        \"label\": response[3].data[\"stzvalidationdate\"]\r\n                    });\r\n                    selectedRecord[\"ntzvalidationdate\"] = ntzvalidationdate[0];\r\n                    if (response[3].data[\"svalidationdate\"] !== \"\") {\r\n\r\n                        selectedRecord[\"dvalidationdate\"] = rearrangeDateFormat(userInfo, response[3].data[\"svalidationdate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                    }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ValidationStatus,\r\n                        TimeZoneList,\r\n                        selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true,\r\n                        ncontrolCode: ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const getDataForAddEditCalibration = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n     \r\n        const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationStatus\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const LastCalibrationDateService =\r\n        rsapi.post(\"instrument/getInstrumentLastCalibrationDate\", {\r\n            \"userinfo\": userInfo,\r\n            ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n\r\n        });\r\n        if (operation === \"create\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n           \r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService];\r\n\r\n        } else {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n\r\n            });\r\n\r\n            const CalibrationById = rsapi.post(\"instrument/getActiveInstrumentCalibrationById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [calibrationStatusService, LastCalibrationDateService, timeZoneService, calibrationValidationService, CalibrationById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let CalibrationStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let CalibrationData = [];\r\n\r\n\r\n                    const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                    CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastcalibrationdate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        selectedRecord = {\r\n                            \"ntzlastcalibrationdate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzlastcalibrationdate\": userInfo.stimezoneid,\r\n\r\n                            \"ntzduedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzduedate\": userInfo.stimezoneid\r\n                        };\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastcalibrationdate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        CalibrationData.push({\r\n                            \"value\": response[4].data[\"ncalibrationstatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = CalibrationData[0];\r\n\r\n                        ntzlastcalibrationdate.push({\r\n                            \"value\": response[4].data[\"ntzlastcalibrationdate\"],\r\n                            \"label\": response[4].data[\"stzlastcalibrationdate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastcalibrationdate\"] = ntzlastcalibrationdate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastcalibrationdate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastcalibrationdate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastcalibrationdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            CalibrationStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: { \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getTabDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n\r\n        const instrumentValidation = inputParam.instrumentValidation;\r\n        const instrumentCalibration = inputParam.instrumentCalibration;\r\n        const instrumentMaintenance = inputParam.instrumentMaintenance;\r\n        let urlArray = [];\r\n        dispatch(initRequest(true));\r\n        if (inputParam.screenName === \"IDS_INSTRUMENTVALIDATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentValidation.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentvalidationcode: instrumentValidation.ninstrumentvalidationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentCalibration.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentcalibrationcode: instrumentCalibration.ninstrumentcalibrationcode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        } else if (inputParam.screenName === \"IDS_INSTRUMENTMAINTENANCE\") {\r\n            urlArray.push(rsapi.post(\"/instrument/getothertabdetails\", {\r\n                ninstrumentcode: instrumentMaintenance.ninstrumentcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ninstrumentmaintenancecode: instrumentMaintenance.ninstrumentmaintenancecode,\r\n                userinfo: inputParam.userInfo\r\n            }))\r\n        }\r\n\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response[0].data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDataForAddEditMaintenance = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        \r\n        const LastMaintenanceDateService =\r\n                rsapi.post(\"instrument/getInstrumentLastMaintenanceDate\", {\r\n                    \"userinfo\": userInfo,\r\n                    ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n        });\r\n        \r\n        const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceStatus\", {\r\n            \"userinfo\": userInfo  \r\n         });\r\n\r\n        if (operation === \"create\") {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 1,\r\n                ninstrumentcode: masterData.selectedInstrument.ninstrumentcode\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService];\r\n\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const MaintenanceById = rsapi.post(\"instrument/getActiveInstrumentMaintenanceById\", {\r\n                [primaryKeyName]: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            urlArray = [maintenanceStatusService, LastMaintenanceDateService, timeZoneService, maintenanceValidationService, MaintenanceById];\r\n\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let MaintenanceStatus = [];\r\n                let TimeZoneList = [];\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n                    let selectedRecord = {};\r\n                    let MaintenanceData = [];\r\n\r\n                    const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                        \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    let Action;\r\n                    let ntzlastmaintenancedate = [];\r\n                    let ntzduedate = [];\r\n                    const timezoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    if (operation === \"create\") {\r\n                        selectedRecord = {\r\n                            \"ntzlastmaintenancedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzlastmaintenancedate\": userInfo.stimezoneid,\r\n\r\n                            \"ntzduedate\": {\r\n                                \"value\": userInfo.ntimezonecode,\r\n                                \"label\": userInfo.stimezoneid\r\n                            },\r\n                            \"stzduedate\": userInfo.stimezoneid\r\n                        };\r\n                        let date = rearrangeDateFormat(userInfo, response[1].data.date);\r\n                        selectedRecord[\"dlastmaintenancedate\"] = date;\r\n                        selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, new Date());\r\n                        Action = 'Add';\r\n\r\n                    }\r\n                    if (operation === \"update\") {\r\n                        Action = 'Edit';\r\n\r\n                        MaintenanceData.push({\r\n                            \"value\": response[4].data[\"nmaintenancestatus\"],\r\n                            \"label\": response[4].data[\"stransdisplaystatus\"]\r\n                        });\r\n                        selectedRecord = response[4].data;\r\n                        selectedRecord[\"ntranscode\"] = MaintenanceData[0];\r\n\r\n                        ntzlastmaintenancedate.push({\r\n                            \"value\": response[4].data[\"ntzlastmaintenancedate\"],\r\n                            \"label\": response[4].data[\"stzlastmaintenancedate\"]\r\n                        });\r\n                        ntzduedate.push({\r\n                            \"value\": response[4].data[\"ntzduedate\"],\r\n                            \"label\": response[4].data[\"stzduedate\"]\r\n                        });\r\n                        selectedRecord[\"ntzlastmaintenancedate\"] = ntzlastmaintenancedate[0];\r\n                        selectedRecord[\"ntzduedate\"] = ntzduedate[0];\r\n                        if (response[4].data[\"slastmaintenancedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dlastmaintenancedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"slastmaintenancedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n                        if (response[4].data[\"sduedate\"] !== \"\") {\r\n\r\n                            selectedRecord[\"dduedate\"] = rearrangeDateFormat(userInfo, response[4].data[\"sduedate\"]); //new Date(response[7].data[\"smanufacdate\"]);\r\n                        }\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            MaintenanceStatus,\r\n                            Action: Action,\r\n                            TimeZoneList,\r\n                            selectedRecord: selectedRecord,\r\n                            isOpen: true,\r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {  \r\n                            operation: operation,\r\n                            screenName: screenName,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const OpenDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 3,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = {};\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    selectedRecord = {\r\n                        \"ntzopendate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzopendate\": userInfo.stimezoneid,\r\n                    };\r\n\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dopendate\"] = date;\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n                        \r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n                    \r\n                    }\r\n\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_OPENDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const CloseDate = (screenName, userInfo, ncontrolCode, selectedRecord, masterData) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: userInfo\r\n        });\r\n\r\n        if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n            const calibrationValidationService = rsapi.post(\"instrument/getInstrumentCalibrationValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode,\r\n                ninstrumentcode: masterData.selectedInstrumentCalibration.ninstrumentcode\r\n            });\r\n\r\n            const calibrationStatusService = rsapi.post(\"instrument/getInstrumentCalibrationOpenDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentcalibrationcode: masterData.selectedInstrumentCalibration.ninstrumentcalibrationcode\r\n            });\r\n            urlArray = [calibrationStatusService, timeZoneService, UTCtimeZoneService, calibrationValidationService];\r\n        } else {\r\n            const maintenanceValidationService = rsapi.post(\"instrument/getInstrumentMaintenanceValidation\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 4,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode,\r\n                ninstrumentcode: masterData.selectedInstrumentMaintenance.ninstrumentcode\r\n            });\r\n\r\n            const maintenanceStatusService = rsapi.post(\"instrument/getInstrumentMaintenanceOpenCloseDateStatus\", {\r\n                \"userinfo\": userInfo,\r\n                nFlag: 2,\r\n                ninstrumentmaintenancecode: masterData.selectedInstrumentMaintenance.ninstrumentmaintenancecode\r\n            });\r\n            urlArray = [maintenanceStatusService, timeZoneService, UTCtimeZoneService, maintenanceValidationService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[3].data.OpenCloseStatus === \"Success\") {\r\n\r\n                    let CalibrationStatus = [];\r\n                    let MaintenanceStatus = {};\r\n\r\n                    let selectedRecord = {};\r\n                    \r\n                    const timezoneMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, false);\r\n\r\n                    const TimeZoneList = timezoneMap.get(\"OptionList\");\r\n                    selectedRecord = {\r\n                        \"ntzclosedate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stzclosedate\": userInfo.stimezoneid,\r\n                    };\r\n                    let date = rearrangeDateFormat(userInfo, response[2].data);\r\n                    selectedRecord[\"dclosedate\"] = date;\r\n                    if (screenName === \"IDS_INSTRUMENTCALIBRATION\") {\r\n                        const calibrationMap = constructOptionList(response[0].data.CalibrationStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        CalibrationStatus = calibrationMap.get(\"OptionList\");\r\n\r\n                        \r\n                    } else {\r\n                        const maintenanceMap = constructOptionList(response[0].data.MaintenanceStatus || [], \"ntranscode\",\r\n                            \"stransstatus\", undefined, undefined, false);\r\n\r\n                        MaintenanceStatus = maintenanceMap.get(\"OptionList\");\r\n\r\n                       \r\n                    }\r\n                    let operation = \"create\";\r\n                    let modalTitle = \"IDS_CLOSEDATE\";\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isOpen: true,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: operation,\r\n                            modalTitle: modalTitle,\r\n                            CalibrationStatus: CalibrationStatus,\r\n                            MaintenanceStatus: MaintenanceStatus,\r\n                            TimeZoneList: TimeZoneList,\r\n                            screenName: screenName,\r\n                            modalShow: true,\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[3].data.Status\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}