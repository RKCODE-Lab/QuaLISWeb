{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{constructOptionList,replaceUpdatedObject,sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat}from'../components/CommonScript';import{postCRUDOrganiseTransSearch}from'./ServiceAction';import Axios from'axios';export function getRegTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationTypeBySampleType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultSampleTypeValue:inputData.defaultSampleTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRegSubTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultRegTypeValue:inputData.defaultRegTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAppConfigVersionJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultRegSubTypeValue:inputParam.masterData.defaultRegSubTypeValue,RegSubTypeValue:inputParam.masterData.realRegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSectionJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultUserSectionValue:inputData.masterData.defaultUserSectionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultFilterStatusValue:inputData.masterData.defaultFilterStatusValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusSectionJobAllocation(inputData){return function(dispatch){var testStatusService=rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData);var sectionService=rsapi.post(\"joballocation/getSectionByApproveVersion\",inputData);var urlArray=[];urlArray=[testStatusService,sectionService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultApprovalVersionValue:inputData.masterData.defaultApprovalVersionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RegSubTypeValue:inputData.RegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getJobAllcationFilterSubmit(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationDetails\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);var masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);if(inputParam.searchSampleRef!==undefined&&inputParam.searchSampleRef.current!==null){inputParam.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParam.searchSubSampleRef!==undefined&&inputParam.searchSubSampleRef.current!==null){inputParam.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParam.searchTestRef!==undefined&&inputParam.searchTestRef.current!==null){inputParam.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,showTest:inputParam.inputData.showTest,activeTestTab:inputParam.inputData.activeTestTab,showFilter:false,sampleskip:0,sampletake:inputParam.sampletake,subsampleskip:0,subsampletake:inputParam.subsampletake,testskip:0,testtake:inputParam.testtake,documentDataState:_objectSpread(_objectSpread({},inputParam.documentDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParam.testCommentDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ReceiveinLabStatusWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_SAMPLE\"],inputParam.inputData.masterData.JA_SAMPLE,\"npreregno\");replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"],inputParam.inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_SAMPLE\"];delete response.data[\"JA_SUBSAMPLE\"];delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedSample:replaceUpdatedObject(response.data[\"JASelectedSample\"],inputParam.inputData.masterData.JASelectedSample,\"npreregno\"),JASelectedSubSample:replaceUpdatedObject(response.data[\"JASelectedSubSample\"],inputParam.inputData.masterData.JASelectedSubSample,\"ntransactionsamplecode\"),JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){toast.error(error.message);});};}export function getAllottedTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData).then(function(response){var TechniqueMap=constructOptionList(response.data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentCategoryMap=constructOptionList(response.data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentPeriodMap=constructOptionList(response.data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var Technique=TechniqueMap.get(\"OptionList\");var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var Instrument=InstrumentMap.get(\"OptionList\");var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");var selectedRecord={};selectedRecord[\"duserblockfromdatetime\"]=new Date();//selectedRecord [\"dinstblockfromdatetime\"] = new Date();\ndispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,Instrument:Instrument,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllotAnotherUserTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData).then(function(response){var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var selectedRecord={};selectedRecord[\"duserblockfromdatetime\"]=new Date();dispatch({type:DEFAULT_RETURN,payload:{Users:Users,UsersPeriod:UsersPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRescheduleTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData).then(function(response){var TechniqueMap=constructOptionList(response.data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentCategoryMap=constructOptionList(response.data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentPeriodMap=constructOptionList(response.data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var selectedRecord={};selectedRecord[\"duserblockfromdatetime\"]=new Date();var Technique=TechniqueMap.get(\"OptionList\");var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var Instrument=InstrumentMap.get(\"OptionList\");var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,Instrument:Instrument,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentBasedCategory\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo}).then(function(response){var Instrument=[];var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);Instrument=InstrumentMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Instrument:Instrument,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getUsers(ntechniquecode,JASelectedTest,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getUsersBasedTechnique\",{\"ntechniquecode\":ntechniquecode,\"ssectioncode\":JASelectedTest.JASelectedSample?JASelectedTest.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(\",\"):\"\",\"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\"userinfo\":userInfo}).then(function(response){var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Users:Users,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ViewAnalystCalendar(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/viewAnalystCalendar\",inputParam.inputData).then(function(response){var masterData=_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data);var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Users:Users,screenName:inputParam.inputData.screenName,loading:false,openModal:true,masterData:masterData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function CancelTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/CancelTest\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){toast.error(error.message);});};}export function getJobAllocationSubSampleDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(\",\"),ssectioncode:inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(\",\"),ntranscode:String(inputData.ntransactionstatus),ntransactiontestcode:0,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestKey:inputData.activeTestKey,activeSampleKey:inputData.activeSampleKey,activeSubSampleKey:inputData.activeSubSampleKey,nneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedtemplatebasedflow:inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,checkBoxOperation:inputData.checkBoxOperation};var activeName=\"\";var dataStateName=\"\";dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){sortData(response.data);var oldSelectedTest=inputData.masterData.JASelectedTest;inputData.masterData.JA_SUBSAMPLE=response.data.JA_SUBSAMPLE;inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;inputData.masterData.JA_TEST=response.data.JA_TEST;inputData.masterData.JASelectedTest=response.data.JASelectedTest;inputData.masterData.RegistrationAttachment=response.data.RegistrationAttachment;inputData.masterData.RegistrationSampleAttachment=response.data.RegistrationSampleAttachment;inputData.masterData.RegistrationComment=response.data.RegistrationComment;inputData.masterData.RegistrationSampleComment=response.data.RegistrationSampleComment;var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake;var bool=false;var skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;var npreregno;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;npreregno=masterData.JASelectedSample[0].npreregno;}switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationComment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"npreregno\");activeName=\"RegistrationTestAttachment\";dataStateName=\" testAttachmentDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_SAMPLECOMMENTS\":dbData=response.data.RegistrationComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationComment),_toConsumableArray(dbData));RegistrationComment=getRecordBasedOnPrimaryKeyName(list,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list=[];switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":RegistrationComment=response.data.RegistrationComment?_toConsumableArray(response.data.RegistrationComment):[];activeName=\"RegistrationComment\";dataStateName=\"sampleCommentsDataState\";break;default:_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else{var _list2=[];if(!inputData.masterData.realRegSubTypeValue.nneedsubsample){var _wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!_wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var _keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}}switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list2=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":_list2=response.data.RegistrationComment?sortData(response.data.RegistrationComment,'descending','nregcommentcode'):[];RegistrationComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");activeName=\"RegistrationComment\";dataStateName=\"sampleChangeDataState\";break;default:_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationComment:RegistrationComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var JASelectedSample=inputData.JASelectedSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];var JASelectedSubSample=inputData.masterData.JA_SUBSAMPLE;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");JASelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.JA_SUBSAMPLE[0]];if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=JASelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');var npreregno=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(',');var nsectioncode=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(',');var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedSample:JASelectedSample,JASelectedSubSample:JASelectedSubSample,JASelectedTest:JASelectedTest});inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,npreregno:npreregno,nsectioncode:nsectioncode,ntransactionsamplecode:ntransactionsamplecode,JASelectedSample:JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:JASelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey,masterData:masterData});if(JASelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{masterData:masterData,childTabsKey:[\"JA_TEST\"]});dispatch(getJobAllocationTestDetail(inputData,true));}}else{var _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:TestSelected?TestSelected:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample,JASelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.JA_SUBSAMPLE.length>0?[inputData.masterData.JA_SUBSAMPLE[0]]:[]});var subsamplecheck=true;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});if(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.JA_SUBSAMPLE[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"JA_TEST\"];subsamplecheck=false;dispatch(getJobAllocationTestDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!_wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=inputData.masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData),{},{JASelectedSample:inputData.JASelectedSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},_skipInfo)});}}};}export function getJobAllocationTestDetail(inputData,isServiceRequired){return function(dispatch){var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ssectioncode:inputData.nsectioncode,ntransactiontestcode:0,ntranscode:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestKey:inputData.activeTestKey,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample};var subSample=inputData.nneedsubsample;if(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationTestDetails\",inputParamData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','npreregno');var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample||[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.masterData.JASelectedSample,JASelectedSubSample:inputData.JASelectedSubSample||inputData.masterData.JASelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;var bool=false;var skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationSampleComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list3=[];var _dbData=[];var testList=reArrangeArrays(inputData.masterData.JA_SUBSAMPLE,responseData.JA_TEST,\"ntransactionsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:[testList[0]],JA_TEST:testList});switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":_dbData=response.data.TestView||[];_list3=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(_dbData));TestView=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list4=[];switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;case\"IDS_TESTCOMMENTS\":_list4=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list4=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list4=response.data.RegistrationSampleComment?sortData(response.data.RegistrationSampleComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_SUBSAMPLE.length>0?inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"testCommentDataState\";break;default:_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;}}if(subSample){var wholeSubsampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.map(function(test,index){if(!wholeSubsampleList.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});var _keepOld2=false;var ntransactionsamplecode;if(oldSelectedSubSample.length>0){_keepOld2=true;}else{ntransactionsamplecode=masterData.selectedSubSample[0].ntransactionsamplecode;}switch(inputData.activeSubSampleTab){case\"IDS_SUBSAMPLECOMMENTS\":RegistrationSampleComment=_keepOld2?inputData.masterData.RegistrationSampleComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"subSampleCommentDataState\";break;default:RegistrationSampleAttachment=_keepOld2?inputData.masterData.RegistrationSampleAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subSampleAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationSampleComment:RegistrationSampleComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,activeTestTab:inputData.activeTestKey,screenName:inputData.activeTestKey},skipInfo)});}).catch(function(error){console.log(\"error:\",error);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var JASelectedSubSample=inputData.RESelectedSubSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestView\",\"RegistrationTestAttachment\",\"RegistrationTestComment\"],ntransactiontestcode:ntransactiontestcode,JASelectedSample:inputData.masterData.JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:JASelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSubSample:inputData.JASelectedSubSample});var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode3;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode3,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:inputData.JASelectedSubSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey,activeTestTab:inputData.activeTestKey},skipInfo)});}}};}export function getTestChildTabDetailJobAllocation(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.JASelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,ssectioncode:inputData.JASelectedTest.map(function(sample){return sample.nsectioncode;}).join(\",\"),ntransactionsamplecode:inputData.JASelectedTest.map(function(test){return test.ntransactionsamplecode;}).join(\",\"),ndesigntemplatemappingcode:inputData.masterData.realDesignTemplateMappingValue&&inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";var url=\"\";switch(inputData.activeTestKey){case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"RegistrationSampleAttachment\";dataStateName=\"sampleAttachmentDataState\";break;case\"IDS_TESTVIEW\":url=\"joballocation/getTestView\";activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread(_objectSpread({},response.data),{},{JASelectedSample:inputData.JASelectedSample||inputData.masterData.JASelectedSample,JASelectedTest:inputData.JASelectedTest,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId});var skipInfo={};fillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{JASelectedTest:inputData.JASelectedTest});if(inputData[dataStateName]&&masterData[activeName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId,activeTestTab:inputData.activeTestKey,loading:false,activeTestKey:inputData.activeTestKey,screenName:inputData.activeTestKey,testskip:undefined,testtake:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.JASelectedTest});if(masterData[activeName].length<=inputData.skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}};}export function updatedObjectWithNewElement1(oldList,newList){oldList=[].concat(_toConsumableArray(newList),_toConsumableArray(oldList));return oldList;}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","TechniqueMap","Technique","UsersMap","Users","UsersPeriodMap","Period","InstrumentCategoryMap","InstrumentCategory","InstrumentMap","Instrument","InstrumentPeriodMap","currentTime","userinfo","CurrentTime","body","get","UsersPeriod","InstrumentPeriod","selectedRecord","Date","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","getRescheduleTestWise","getInstrument","ninstrumentcatcode","ncalibrationreq","userInfo","getUsers","ntechniquecode","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","getJobAllocationSubSampleDetail","isServiceRequired","inputParamData","nsampletypecode","npreregno","ssectioncode","ntranscode","String","ntransactionstatus","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","activeSubSampleKey","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","checkBoxOperation","activeName","dataStateName","oldSelectedTest","RegistrationAttachment","RegistrationSampleAttachment","RegistrationComment","RegistrationSampleComment","length","bool","skipInfo","RegistrationTestAttachment","RegistrationTestComment","TestView","wholeTestList","b","test","index","includes","splice","keepOld","list","dbData","skip","take","oldSelectedSubSample","TestSelected","subSampleSelected","removeElementFromArray","nregistrationsectioncode","isGrandChildGetRequired","childTabsKey","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","activeSampleTab","nflag","ntype","subSample","testList","wholeSubsampleList","selectedSubSample","activeSubSampleTab","console","log","RESelectedSubSample","realDesignTemplateMappingValue","url","activeTabIndex","activeTabId","updatedObjectWithNewElement1","oldList","newList"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, replaceUpdatedObject, sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\n\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip :0,\r\n                        subsampletake :inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"npreregno\");\r\n                        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                        delete response.data[\"JA_SAMPLE\"];\r\n                        delete response.data[\"JA_SUBSAMPLE\"];\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"npreregno\"),\r\n                            JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        toast.error(error.message);                   \r\n                })\r\n    }\r\n} \r\n\r\nexport function getAllottedTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n                 \r\n                let selectedRecord ={};\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n                //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation:inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData)\r\n                .then(response => {\r\n                    \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);  \r\n\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n               \r\n                let selectedRecord ={};\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {                           \r\n                            Users,\r\n                            UsersPeriod, \r\n                            currentTime,  \r\n                            selectedRecord,                         \r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getRescheduleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);   \r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                let selectedRecord ={};\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode,JASelectedTest, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\"ntechniquecode\": ntechniquecode,\r\n                          \"ssectioncode\":JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample=>sample.nsectioncode).join(\",\"):\"\", \r\n                          \"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\r\n                          \"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }  \r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {                       \r\n                        Users,                        \r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal:true,\r\n                        masterData,\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CancelTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        toast.error(error.message);                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            activeSubSampleKey: inputData.activeSubSampleKey,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;           \r\n\r\n                    inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n                    \r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestKey) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                             case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {                  \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                                \r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestKey) {                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;    \r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }                \r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                        ntransactiontestcode, \"ntransactiontestcode\");    \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ssectioncode :inputData.nsectioncode,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;   \r\n                           \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break; \r\n                          \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                                \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,                      \r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\",\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                 const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        activeTestTab: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode :inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url=\"\";\r\n       \r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;           \r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;    \r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}