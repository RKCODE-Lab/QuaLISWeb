{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction'; //import { intl } from '../components/App';\n\nimport { getComboLabelValue } from \"../components/CommonScript\";\nexport function getprojectytpe(addAliqutoplanId, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"aliquotplan/getProjectType\", {\n      \"addAliqutoplanId\": addAliqutoplanId,\n      userinfo: userInfo\n    }).then(response => {\n      const constructType = constructOptionList(response.data || [], \"nprojectcode\", \"sprojecttypename\", undefined, undefined, false);\n      const projecttypeList = constructType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          projecttypeList: projecttypeList,\n          processtypeList: [],\n          sampletypeList: [],\n          collectiontubeList: [],\n          patientcatgoryList: [],\n          visitnameList: [],\n          selectedRecord: {},\n          screenName: \"IDS_ALIQUOTPLAN\",\n          operation: \"create\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleTypeandPatientCatgeroy(sampletypevalue, sampletypename, userInfo) {\n  return function (dispatch) {\n    const getPatientCatgory = rsapi.post(\"aliquotplan/getPatientCatgory\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    const getSampleType = rsapi.post(\"aliquotplan/getSampleType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    const collectiontubeList = rsapi.post(\"aliquotplan/getCollectionTubeType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    const getVisitName = rsapi.post(\"aliquotplan/getVisitName\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    const getUnitList = rsapi.post(\"aliquotplan/getUnit\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    });\n    let urlArray = [];\n    urlArray = [getPatientCatgory, getSampleType, collectiontubeList, getVisitName, getUnitList];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const patientcatgoryconstructType = constructOptionList(response[0].data || [], \"npatientcode\", \"spatientcatname\", undefined, undefined, false);\n      const sampletypeconstructType = constructOptionList(response[1].data || [], \"nproductsamplecode\", \"sproductname\", undefined, undefined, false);\n      const collectiontubeListconstruct = constructOptionList(response[2].data || [], \"ncollectiontubecode\", \"stubename\", undefined, undefined, false);\n      const VisitNameconstruct = constructOptionList(response[3].data || [], \"nvisitcode\", \"svisitnumber\", undefined, undefined, false);\n      const getUnitList = constructOptionList(response[4].data || [], \"nunitbasiccode\", \"sunitname\", undefined, undefined, false);\n      const patientcatgoryList = patientcatgoryconstructType.get(\"OptionList\");\n      const sampletypeList = sampletypeconstructType.get(\"OptionList\");\n      const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\n      const visitnameList = VisitNameconstruct.get(\"OptionList\");\n      const unitList = getUnitList.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          sampletypeList: sampletypeList,\n          patientcatgoryList: patientcatgoryList,\n          collectiontubeList: collectiontubeListconstructList,\n          visitnameList: visitnameList,\n          unitList: unitList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getCollectionTubeType(sampletypevalue,sampletypename,userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"aliquotplan/getCollectionTubeType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo})\n//             .then(response => {\n//                 const constructType = constructOptionList(response.data || [], \"ncollectiontubecode\",\n//                 \"stubename\", undefined, undefined, false);\n//                 const collectiontubeList = constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal:true,\n//                         collectiontubeList:collectiontubeList,\n//                         patientcatgoryList: [],\n//                         visitnameList:[]\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }  \n// }\n// export function getVisitName(sampletypevalue,sampletypename,userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"aliquotplan/getVisitName\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo})\n//         .then(response => {\n//             const constructType = constructOptionList(response.data || [], \"nvisitcode\",\n//             \"svisitnumber\", undefined, undefined, false);\n//                 const visitnameList=constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal:true,\n//                         visitnameList:visitnameList\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }  \n// }\n\nexport function getUnit(sampletypevalue, sampletypename, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"aliquotplan/getUnit\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfo\n    }).then(response => {\n      const constructType = constructOptionList(response.data || [], \"nunitbasiccode\", \"sunitname\", undefined, undefined, false);\n      const unitList = constructType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          unitList: unitList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveAliquotPlanById(editParam, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const ncontrolCode = editParam.ncontrolCode;\n    const sampletypevalue = editParam.editRow.nprojectcode;\n    const sampletypename = editParam.editRow.sprojecttypename;\n    const userInfoPass = editParam.userInfo;\n    const projectytpe = rsapi.post(\"aliquotplan/getProjectType\", {\n      \"editAliquotplan\": ncontrolCode,\n      userinfo: userInfoPass\n    });\n    const sampletypeList = rsapi.post(\"aliquotplan/getSampleType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const collectiontubeList = rsapi.post(\"aliquotplan/getCollectionTubeType\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const getPatientCatgory = rsapi.post(\"aliquotplan/getPatientCatgory\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const getVisitName = rsapi.post(\"aliquotplan/getVisitName\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const getUnitList = rsapi.post(\"aliquotplan/getUnit\", {\n      \"sampletypevalue\": sampletypevalue,\n      \"sampletypename\": sampletypename,\n      userinfo: userInfoPass\n    });\n    const getActiveAliquotplanById = rsapi.post(\"aliquotplan/getActiveAliquotPlanById\", {\n      naliquotplancode: editParam.editRow.naliquotplancode,\n      userinfo: userInfoPass\n    });\n    let urlArray = [];\n    urlArray = [getActiveAliquotplanById, projectytpe, sampletypeList, collectiontubeList, getPatientCatgory, getVisitName, getUnitList];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const selectedRecord = response[0].data;\n      const projectytpeconstruct = constructOptionList(response[1].data || [], \"nprojectcode\", \"sprojecttypename\", undefined, undefined, false);\n      const sampletypeListconstruct = constructOptionList(response[2].data || [], \"nproductsamplecode\", \"sproductname\", undefined, undefined, false);\n      const collectiontubeListconstruct = constructOptionList(response[3].data || [], \"ncollectiontubecode\", \"stubename\", undefined, undefined, false);\n      const patientcatgoryconstruct = constructOptionList(response[4].data || [], \"npatientcode\", \"spatientcatname\", undefined, undefined, false);\n      const VisitNameconstruct = constructOptionList(response[5].data || [], \"nvisitcode\", \"svisitnumber\", undefined, undefined, false);\n      const Unitconstruct = constructOptionList(response[6].data || [], \"nunitbasiccode\", \"sunitname\", undefined, undefined, false);\n      selectedRecord[\"sprojecttypename\"] = getComboLabelValue(response[0].data, response[1].data, \"nprojectcode\", \"sprojecttypename\");\n      selectedRecord[\"sproductname\"] = getComboLabelValue(response[0].data, response[2].data, \"nproductsamplecode\", \"sproductname\");\n      selectedRecord[\"stubename\"] = getComboLabelValue(response[0].data, response[3].data, \"ncollectiontubecode\", \"stubename\");\n      selectedRecord[\"spatientcatname\"] = getComboLabelValue(response[0].data, response[4].data, \"npatientcode\", \"spatientcatname\");\n      selectedRecord[\"svisitnumber\"] = getComboLabelValue(response[0].data, response[5].data, \"nvisitcode\", \"svisitnumber\");\n      selectedRecord[\"sunitname\"] = getComboLabelValue(response[0].data, response[6].data, \"nunitbasiccode\", \"sunitname\");\n      selectedRecord[\"saliquotno\"] = response[0].data.saliquotno;\n      selectedRecord[\"squantity\"] = response[0].data.squantity;\n      selectedRecord[\"sdescription\"] = response[0].data.sdescription; //selectedRecord[\"spatientcatname\"]=response[0].data.spatientcatname.label;\n\n      const projectytpeconstructList = projectytpeconstruct.get(\"OptionList\");\n      const sampletypeListconstructList = sampletypeListconstruct.get(\"OptionList\");\n      const collectiontubeListconstructList = collectiontubeListconstruct.get(\"OptionList\");\n      const patientcatgoryList = patientcatgoryconstruct.get(\"OptionList\");\n      const visitnameList = VisitNameconstruct.get(\"OptionList\");\n      const unitList = Unitconstruct.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          projecttypeList: projectytpeconstructList,\n          sampletypeList: sampletypeListconstructList,\n          collectiontubeList: collectiontubeListconstructList,\n          patientcatgoryList: patientcatgoryList,\n          visitnameList: visitnameList,\n          unitList: unitList,\n          selectedRecord: selectedRecord,\n          selectedId: editParam.editRow.naliquotplancode,\n          ncontrolCode: editParam.ncontrolCode,\n          screenName: \"IDS_ALIQUOTPLAN\",\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/AliquotPlanAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","toast","Axios","initRequest","getComboLabelValue","getprojectytpe","addAliqutoplanId","userInfo","dispatch","post","userinfo","then","response","constructType","data","undefined","projecttypeList","get","type","payload","loading","openModal","processtypeList","sampletypeList","collectiontubeList","patientcatgoryList","visitnameList","selectedRecord","screenName","operation","catch","error","status","message","warn","getSampleTypeandPatientCatgeroy","sampletypevalue","sampletypename","getPatientCatgory","getSampleType","getVisitName","getUnitList","urlArray","all","patientcatgoryconstructType","sampletypeconstructType","collectiontubeListconstruct","VisitNameconstruct","collectiontubeListconstructList","unitList","getUnit","getActiveAliquotPlanById","editParam","ncontrolCode","editRow","nprojectcode","sprojecttypename","userInfoPass","projectytpe","getActiveAliquotplanById","naliquotplancode","projectytpeconstruct","sampletypeListconstruct","patientcatgoryconstruct","Unitconstruct","saliquotno","squantity","sdescription","projectytpeconstructList","sampletypeListconstructList","selectedId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\nimport { getComboLabelValue } from \"../components/CommonScript\";\r\n\r\n\r\n\r\nexport function getprojectytpe(addAliqutoplanId,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"aliquotplan/getProjectType\",{\"addAliqutoplanId\":addAliqutoplanId,userinfo: userInfo})\r\n            .then(response => {\r\n                const constructType = constructOptionList(response.data || [], \"nprojectcode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const projecttypeList = constructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        projecttypeList:projecttypeList,\r\n                        processtypeList : [],\r\n                        sampletypeList : [],\r\n                        collectiontubeList : [],\r\n                        patientcatgoryList: [],\r\n                        visitnameList:[],\r\n                        selectedRecord : {},\r\n                        screenName:\"IDS_ALIQUOTPLAN\",\r\n                        operation: \"create\"\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getSampleTypeandPatientCatgeroy(sampletypevalue,sampletypename,userInfo) {\r\n    return function (dispatch) {\r\n\r\n        const getPatientCatgory = rsapi.post(\"aliquotplan/getPatientCatgory\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo});\r\n        \r\n        const getSampleType = rsapi.post(\"aliquotplan/getSampleType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo});\r\n\r\n        const collectiontubeList = rsapi.post(\"aliquotplan/getCollectionTubeType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo});\r\n                \r\n        const getVisitName = rsapi.post(\"aliquotplan/getVisitName\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo});\r\n\r\n        const getUnitList= rsapi.post(\"aliquotplan/getUnit\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo});\r\n\r\n\r\n        let urlArray = [];\r\n        urlArray = [getPatientCatgory,getSampleType,collectiontubeList,getVisitName,getUnitList];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const patientcatgoryconstructType = constructOptionList(response[0].data || [], \"npatientcode\",\r\n                \"spatientcatname\", undefined, undefined, false);\r\n\r\n                const sampletypeconstructType = constructOptionList(response[1].data || [], \"nproductsamplecode\",\r\n                \"sproductname\", undefined, undefined, false);\r\n\r\n                const collectiontubeListconstruct = constructOptionList(response[2].data || [], \"ncollectiontubecode\",\r\n                    \"stubename\", undefined, undefined, false);\r\n    \r\n                const VisitNameconstruct = constructOptionList(response[3].data || [], \"nvisitcode\",\r\n                    \"svisitnumber\", undefined, undefined, false);\r\n\r\n                const getUnitList = constructOptionList(response[4].data || [], \"nunitbasiccode\",\r\n                        \"sunitname\", undefined, undefined, false);\r\n\r\n                const patientcatgoryList = patientcatgoryconstructType.get(\"OptionList\");\r\n                const sampletypeList = sampletypeconstructType.get(\"OptionList\");\r\n                const collectiontubeListconstructList=collectiontubeListconstruct.get(\"OptionList\");\r\n                const visitnameList=VisitNameconstruct.get(\"OptionList\");\r\n                const unitList = getUnitList.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        sampletypeList:sampletypeList,\r\n                        patientcatgoryList:patientcatgoryList,\r\n                        collectiontubeList:collectiontubeListconstructList,\r\n                        visitnameList:visitnameList,\r\n                        unitList:unitList\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }  \r\n}\r\n\r\n\r\n// export function getCollectionTubeType(sampletypevalue,sampletypename,userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"aliquotplan/getCollectionTubeType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo})\r\n//             .then(response => {\r\n//                 const constructType = constructOptionList(response.data || [], \"ncollectiontubecode\",\r\n//                 \"stubename\", undefined, undefined, false);\r\n\r\n//                 const collectiontubeList = constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal:true,\r\n//                         collectiontubeList:collectiontubeList,\r\n//                         patientcatgoryList: [],\r\n//                         visitnameList:[]\r\n                        \r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }  \r\n// }\r\n\r\n// export function getVisitName(sampletypevalue,sampletypename,userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n        \r\n//         return rsapi.post(\"aliquotplan/getVisitName\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo})\r\n//         .then(response => {\r\n//             const constructType = constructOptionList(response.data || [], \"nvisitcode\",\r\n//             \"svisitnumber\", undefined, undefined, false);\r\n\r\n//                 const visitnameList=constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal:true,\r\n//                         visitnameList:visitnameList\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }  \r\n// }\r\n\r\n\r\nexport function getUnit(sampletypevalue,sampletypename,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"aliquotplan/getUnit\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfo})\r\n            .then(response => {\r\n                const constructType = constructOptionList(response.data || [], \"nunitbasiccode\",\r\n                \"sunitname\", undefined, undefined, false);\r\n\r\n                const unitList = constructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        unitList:unitList\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }  \r\n} \r\n\r\n\r\nexport function getActiveAliquotPlanById(editParam,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const ncontrolCode=editParam.ncontrolCode;\r\n\r\n        const sampletypevalue=editParam.editRow.nprojectcode;\r\n\r\n        const sampletypename=editParam.editRow.sprojecttypename;\r\n\r\n        const userInfoPass=editParam.userInfo;\r\n\r\n        const projectytpe = rsapi.post(\"aliquotplan/getProjectType\",{\"editAliquotplan\":ncontrolCode,userinfo: userInfoPass});\r\n        \r\n        const sampletypeList = rsapi.post(\"aliquotplan/getSampleType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfoPass});\r\n\r\n        const collectiontubeList = rsapi.post(\"aliquotplan/getCollectionTubeType\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfoPass});\r\n        \r\n        const getPatientCatgory = rsapi.post(\"aliquotplan/getPatientCatgory\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfoPass});\r\n        \r\n        const getVisitName = rsapi.post(\"aliquotplan/getVisitName\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfoPass});\r\n\r\n        const getUnitList = rsapi.post(\"aliquotplan/getUnit\",{\"sampletypevalue\":sampletypevalue,\"sampletypename\":sampletypename,userinfo: userInfoPass});\r\n\r\n        \r\n        const getActiveAliquotplanById = rsapi.post(\"aliquotplan/getActiveAliquotPlanById\",\r\n        {naliquotplancode:editParam.editRow.naliquotplancode,userinfo: userInfoPass});\r\n\r\n        let urlArray = [];\r\n        urlArray = [getActiveAliquotplanById,projectytpe, sampletypeList, collectiontubeList, getPatientCatgory,getVisitName,getUnitList];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const selectedRecord =response[0].data; \r\n\r\n                const projectytpeconstruct = constructOptionList(response[1].data || [], \"nprojectcode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const sampletypeListconstruct = constructOptionList(response[2].data || [], \"nproductsamplecode\",\r\n                \"sproductname\", undefined, undefined, false);\r\n\r\n                const collectiontubeListconstruct = constructOptionList(response[3].data || [], \"ncollectiontubecode\",\r\n                \"stubename\", undefined, undefined, false);\r\n\r\n                const patientcatgoryconstruct = constructOptionList(response[4].data || [], \"npatientcode\",\r\n                \"spatientcatname\", undefined, undefined, false);\r\n\r\n                const VisitNameconstruct = constructOptionList(response[5].data || [], \"nvisitcode\",\r\n                \"svisitnumber\", undefined, undefined, false);\r\n\r\n                const Unitconstruct = constructOptionList(response[6].data|| [], \"nunitbasiccode\",\r\n                \"sunitname\", undefined, undefined, false);\r\n\r\n\r\n                selectedRecord[\"sprojecttypename\"] = getComboLabelValue(response[0].data,response[1].data, \r\n                \"nprojectcode\", \"sprojecttypename\");  \r\n                    \r\n                selectedRecord[\"sproductname\"] = getComboLabelValue(response[0].data,response[2].data, \r\n                \"nproductsamplecode\", \"sproductname\");\r\n\r\n                selectedRecord[\"stubename\"] = getComboLabelValue(response[0].data,response[3].data, \r\n                \"ncollectiontubecode\", \"stubename\");\r\n\r\n                selectedRecord[\"spatientcatname\"] = getComboLabelValue(response[0].data,response[4].data, \r\n                \"npatientcode\", \"spatientcatname\");\r\n\r\n                selectedRecord[\"svisitnumber\"] = getComboLabelValue(response[0].data,response[5].data, \r\n                \"nvisitcode\", \"svisitnumber\");\r\n\r\n                selectedRecord[\"sunitname\"] = getComboLabelValue(response[0].data,response[6].data, \r\n                \"nunitbasiccode\", \"sunitname\");\r\n         \r\n                selectedRecord[\"saliquotno\"]=response[0].data.saliquotno;\r\n\r\n                selectedRecord[\"squantity\"]=response[0].data.squantity;\r\n\r\n                selectedRecord[\"sdescription\"]=response[0].data.sdescription;\r\n\r\n                //selectedRecord[\"spatientcatname\"]=response[0].data.spatientcatname.label;\r\n\r\n                const projectytpeconstructList=projectytpeconstruct.get(\"OptionList\");\r\n                const sampletypeListconstructList=sampletypeListconstruct.get(\"OptionList\");\r\n                const collectiontubeListconstructList=collectiontubeListconstruct.get(\"OptionList\");\r\n                const patientcatgoryList = patientcatgoryconstruct.get(\"OptionList\");\r\n                const visitnameList=VisitNameconstruct.get(\"OptionList\");\r\n                const unitList=Unitconstruct.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true, \r\n                        projecttypeList:projectytpeconstructList,\r\n                        sampletypeList:sampletypeListconstructList,\r\n                        collectiontubeList:collectiontubeListconstructList,\r\n                        patientcatgoryList:patientcatgoryList,\r\n                        visitnameList:visitnameList,\r\n                        unitList:unitList,\r\n                        selectedRecord:selectedRecord,\r\n                        selectedId:editParam.editRow.naliquotplancode,\r\n                        ncontrolCode: editParam.ncontrolCode,\r\n                        screenName:\"IDS_ALIQUOTPLAN\",\r\n                        operation:\"update\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}