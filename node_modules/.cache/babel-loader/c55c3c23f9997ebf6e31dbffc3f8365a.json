{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\edqmmaster\\\\EDQMProduct.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddEDQMProduct from './AddEDQMProduct';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap'; //, Card, Form, Modal\n\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { MediaLabel } from '../../components/add-client.styles';\nimport rsapi from '../../rsapi';\nimport Axios from 'axios';\nimport { callService, crudMaster, updateStore, validateEsignCredential, edqmProductFetchRecord } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass EDQMProduct extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      this.setState({\n        safetyMarkByID: [],\n        productTypeByID: []\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          operation: this.props.Login.operation\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getNestedFieldData = (nestedColumnArray, data) => nestedColumnArray.reduce((xs, x) => xs && xs[x] ? xs[x] : null, data);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.detailBand = props => {\n      const Dataitem = props.dataItem;\n      const OptionalFieldList = [{\n        datafield: \"sproducttype\",\n        Column: \"Product Type\"\n      }, {\n        datafield: \"sbulktype\",\n        Column: \"Bulk Type\"\n      }, {\n        datafield: \"scomponentbulkgroup\",\n        Column: \"Component Bulk Group\"\n      }, {\n        datafield: \"smasterfiletype\",\n        Column: \"Master File Type\"\n      }, {\n        datafield: \"ssafetymarkername\",\n        Column: \"Safety Marker Name\"\n      }];\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 17\n        }\n      }, OptionalFieldList.map(fields => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: \"6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: fields.Column,\n          message: fields.Column,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 40\n          }\n        })), /*#__PURE__*/React.createElement(MediaLabel, {\n          className: \"readonly-text font-weight-normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }\n        }, Dataitem[fields.datafield])));\n      }));\n    };\n\n    this.detailedFieldList = [{\n      dataField: \"sproducttype\",\n      idsName: \"IDS_PRODUCTTYPE\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sbulktype\",\n      idsName: \"IDS_BULKTYPE\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"scomponentbulkgroup\",\n      idsName: \"IDS_COMPONENTBULKGROUP\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"smasterfiletype\",\n      idsName: \"IDS_MASTERFILETYPE\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"ssafetymarkername\",\n      idsName: \"IDS_SAFETYMARKNAME\",\n      columnSize: \"4\"\n    } //{ \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"20%\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\n    ];\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData.value;\n\n        if (fieldName === \"nproductdesccode\") {\n          this.getProductTypeMandatory(comboData.value, selectedRecord);\n        }\n\n        if (fieldName === \"nproducttypecode\") {\n          this.getSafetyMarkerMandatory(comboData.value, selectedRecord);\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.fetchRecord = (primaryKeyName, primaryKeyValue, operation) => {\n      const productDomainData = rsapi.post(\"edqmproductdomain/getEDQMProductDomain\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const productDescData = rsapi.post(\"edqmproductdescription/getEDQMProductDescription\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const productTypeData = rsapi.post(\"edqmproducttype/getAllEDQMProductType\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const bulkTypeData = rsapi.post(\"edqmbulktype/getAllEDQMBulkType\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const componentBulkData = rsapi.post(\"edqmcomponentbulkgroup/getAllEDQMComponentBulkGroup\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const masterFileData = rsapi.post(\"edqmmasterfiletype/getAllEDQMMasterFileType\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      const safetyFileData = rsapi.post(\"edqmsafetymarker/getAllEDQMSafetyMarker\", {\n        \"userinfo\": this.props.Login.userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"update\") {\n        const productData = rsapi.post(this.props.Login.inputParam.classUrl + \"/getActive\" + this.props.Login.inputParam.methodUrl + \"ById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": this.props.Login.userInfo\n        });\n        urlArray = [productDomainData, productDescData, productTypeData, bulkTypeData, componentBulkData, masterFileData, safetyFileData, productData];\n      } else {\n        urlArray = [productDomainData, productDescData, productTypeData, bulkTypeData, componentBulkData, masterFileData, safetyFileData];\n      }\n\n      Axios.all(urlArray).then(Axios.spread((...response) => {\n        let nproductdomaincode = [];\n        let nproductdesccode = [];\n        let nproducttypecode = [];\n        let nbulktypecode = [];\n        let ncomponentbulkgroupcode = [];\n        let nmasterfiletypecode = [];\n        let nsafetymarkercode = [];\n\n        if (operation === \"update\") {\n          nproductdomaincode.push({\n            label: response[7].data[\"sproductdomain\"],\n            value: response[7].data[\"nproductdomaincode\"]\n          });\n          nproductdesccode.push({\n            label: response[7].data[\"sproductclass\"],\n            value: response[7].data[\"nproductdesccode\"]\n          });\n          nproducttypecode.push({\n            label: response[7].data[\"sproducttype\"],\n            value: response[7].data[\"nproducttypecode\"]\n          });\n          nbulktypecode.push({\n            label: response[7].data[\"sbulktype\"],\n            value: response[7].data[\"nbulktypecode\"]\n          });\n          ncomponentbulkgroupcode.push({\n            label: response[7].data[\"scomponentbulkgroup\"],\n            value: response[7].data[\"ncomponentbulkgroupcode\"]\n          });\n          nmasterfiletypecode.push({\n            label: response[7].data[\"smasterfiletype\"],\n            value: response[7].data[\"nmasterfiletypecode\"]\n          });\n          nsafetymarkercode.push({\n            label: response[7].data[\"ssafetymarkername\"],\n            value: response[7].data[\"nsafetymarkercode\"]\n          });\n        }\n\n        this.setState({\n          productDomainData: response[0].data,\n          productDescData: response[1].data,\n          productTypeData: response[2].data,\n          bulkTypeData: response[3].data,\n          componentBulkData: response[4].data,\n          masterFileData: response[5].data,\n          safetyFileData: response[6].data,\n          nproductdomaincode,\n          nproductdesccode,\n          nproducttypecode,\n          nbulktypecode,\n          ncomponentbulkgroupcode,\n          nmasterfiletypecode,\n          nsafetymarkercode,\n          isOpen: true,\n          selectedRecord: operation === \"update\" ? response[7].data : undefined,\n          operation: operation\n        });\n      })).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        if (event.target.name === \"nproductdesccode\") {\n          this.getProductTypeMandatory(event.target.value);\n        }\n\n        if (event.target.name === \"nproducttypecode\") {\n          this.getSafetyMarkerMandatory(event.target.value);\n        }\n\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null; // let selectedRecord = {};\n\n      if (this.props.Login.operation === \"update\") {\n        selectedId = this.props.Login.selectedId; // edit\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\n        this.fieldList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item];\n        });\n        dataState = this.state.dataState;\n      } else {\n        //add       this.fieldList = [\"sofficialproductname\", \"nproductdomaincode\", \"nproductdesccode\", \"nproducttypecode\", \n        //\"nbulktypecode\", \"ncomponentbulkgroupcode\", \"nmasterfiletypecode\", \"nsafetymarkercode\"];            \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"sofficialproductname\"] = this.state.selectedRecord[\"sofficialproductname\"];\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nproductdomaincode\"] = this.state.selectedRecord[\"nproductdomaincode\"];\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nproductdesccode\"] = this.state.selectedRecord[\"nproductdesccode\"];\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nproducttypecode\"] = this.state.selectedRecord[\"nproducttypecode\"] ? this.state.selectedRecord[\"nproducttypecode\"] : -1;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nbulktypecode\"] = this.state.selectedRecord[\"nbulktypecode\"] ? this.state.selectedRecord[\"nbulktypecode\"] : -1;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ncomponentbulkgroupcode\"] = this.state.selectedRecord[\"ncomponentbulkgroupcode\"] ? this.state.selectedRecord[\"ncomponentbulkgroupcode\"] : -1;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nmasterfiletypecode\"] = this.state.selectedRecord[\"nmasterfiletypecode\"] ? this.state.selectedRecord[\"nmasterfiletypecode\"] : -1;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nsafetymarkercode\"] = this.state.selectedRecord[\"nsafetymarkercode\"] ? this.state.selectedRecord[\"nsafetymarkercode\"] : -1; // this.fieldList.map(item => {\n        //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\n        // })\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation,\n            selectedId\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n\n      this.setState({\n        safetyMarkByID: [],\n        productTypeByID: []\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      addScreen: false,\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"create\",\n      dataResult: [],\n      dataState: _dataState,\n      productDomainData: [],\n      productDescData: [],\n      productTypeData: [],\n      bulkTypeData: [],\n      componentBulkData: [],\n      masterFileData: [],\n      safetyFileData: [],\n      productTypeByID: [],\n      productTypeMandatory: 0,\n      safetyMarkByID: [],\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedRecord: {},\n      nproductdomaincode: [],\n      nproductdesccode: [],\n      nproducttypecode: [],\n      nbulktypecode: [],\n      ncomponentbulkgroupcode: [],\n      nmasterfiletypecode: [],\n      nsafetymarkercode: [],\n      //mandatoryFields:[]\n      validationColumnList: [{\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sofficialproductname\",\n        \"width\": \"300px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTDOMAIN\",\n        \"dataField\": \"nproductdomaincode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTDESC\",\n        \"dataField\": \"nproductdesccode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }]\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    //let primaryKeyField = \"\";\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_PRODUCTNAME\",\n      \"dataField\": \"sofficialproductname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_PRODUCTDOMAIN\",\n      \"dataField\": \"sproductdomain\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PRODUCTCLASS\",\n      \"dataField\": \"sproductclass\",\n      \"width\": \"200px\"\n    } // { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"sproducttype\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_BULKTYPE\", \"dataField\": \"sbulktype\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_COMPONENTBULKGROUP\", \"dataField\": \"scomponentbulkgroup\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_MASTERFILETYPE\", \"dataField\": \"smasterfiletype\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"ssafetymarkername\", \"width\": \"200px\" },\n    ]; //primaryKeyField = \"nofficialproductcode\";\n    //let validationColumnList = [];\n\n    this.fieldList = [\"sofficialproductname\", \"nproductdomaincode\", \"nproductdesccode\", \"nproducttypecode\", \"nbulktypecode\", \"ncomponentbulkgroupcode\", \"nmasterfiletypecode\", \"nsafetymarkercode\"]; // validationColumnList = [\n    //     { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sofficialproductname\", \"width\": \"300px\", \"mandatory\": true },\n    //     { \"idsName\": \"IDS_PRODUCTDOMAIN\", \"dataField\": \"nproductdomaincode\", \"width\": \"200px\", \"mandatory\": true },\n    //     { \"idsName\": \"IDS_PRODUCTDESC\", \"dataField\": \"nproductdesccode\", \"width\": \"200px\", \"mandatory\": true },\n    // ]\n    // if (this.state.productTypeByID.nproducttypemand === transactionStatus.YES && this.state.safetyMarkByID.nsafetymarkermand === 3) {\n    //     this.validationColumnList.push(\n    //         { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"nproducttypecode\", \"width\": \"200px\", \"mandatory\": true },\n    //         { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"nsafetymarkercode\", \"width\": \"200px\", \"mandatory\": true },\n    //     );\n    // }\n    // else {\n    // if (this.state.productTypeByID.nproducttypemand === transactionStatus.YES) {\n    //     validationColumnList.push(\n    //         { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"nproducttypecode\", \"width\": \"200px\", \"mandatory\": true },\n    //     );\n    // }\n    // if (this.state.safetyMarkByID.nsafetymarkermand === transactionStatus.YES) {\n    //     validationColumnList.push(\n    //        { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"nsafetymarkercode\", \"width\": \"200px\", \"mandatory\": true },\n    //     );\n    // }\n    //}\n\n    const mandatoryFields = [];\n    this.state.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const edqmAddParam = {\n      screenName: \"EDQM Product\",\n      operation: \"create\",\n      primaryKeyField: \"nofficialproductcode\",\n      primaryKeyValue: null,\n      masterData: null,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const edqmEditParam = {\n      screenName: \"EDQM Product\",\n      operation: \"update\",\n      primaryKeyField: \"nofficialproductcode\",\n      masterData: null,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const edqmDeleteParam = {\n      screenName: \"EDQMProduct\",\n      methodUrl: \"EDQMProduct\",\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nofficialproductcode\",\n      expandField: \"expanded\",\n      detailedFieldList: this.detailedFieldList,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.edqmProductFetchRecord,\n      editParam: edqmEditParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: edqmDeleteParam,\n      reloadData: this.reloadData,\n      addRecord: () => this.props.edqmProductFetchRecord(edqmAddParam),\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true // isComponent={true}\n      ,\n      selectedId: this.props.Login.selectedId,\n      hasDynamicColSize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddEDQMProduct, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        productDomainData: this.state.productDomainData || [] //{this.props.Login.productDomainData}\n        ,\n        productDescData: this.state.productDescData || [] //{this.props.Login.productDescData}\n        ,\n        productTypeData: this.state.productTypeData || [] //{this.props.Login.productTypeData}\n        ,\n        productTypeByID: this.state.productTypeByID //{this.props.Login.productTypeByID}\n        ,\n        bulkTypeData: this.state.bulkTypeData || [] //{this.props.Login.bulkTypeData}\n        ,\n        componentBulkData: this.state.componentBulkData || [] //{this.props.Login.componentBulkData}\n        ,\n        masterFileData: this.state.masterFileData || [] //{this.props.Login.masterFileData}\n        ,\n        safetyFileData: this.state.safetyFileData //{this.props.Login.safetyFileData}\n        ,\n        safetyMarkByID: this.state.safetyMarkByID //{this.props.Login.safetyMarkByID}\n        ,\n        nproductdomaincode: this.props.Login.nproductdomaincode,\n        nproductdesccode: this.props.Login.nproductdesccode,\n        nproducttypecode: this.props.Login.nproducttypecode,\n        nbulktypecode: this.props.Login.nbulktypecode,\n        ncomponentbulkgroupcode: this.props.Login.ncomponentbulkgroupcode,\n        nmasterfiletypecode: this.props.Login.nmasterfiletypecode,\n        nsafetymarkercode: this.props.Login.nsafetymarkercode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.productDomainData !== previousProps.Login.productDomainData || this.props.Login.productDescData !== previousProps.Login.productDescData || this.props.Login.productTypeData !== previousProps.Login.productTypeData || this.props.Login.bulkTypeData !== previousProps.Login.bulkTypeData || this.props.Login.componentBulkData !== previousProps.Login.componentBulkData || this.props.Login.masterFileData !== previousProps.Login.masterFileData || this.props.Login.safetyFileData !== previousProps.Login.safetyFileData) {\n      const productDomainData = constructOptionList(this.props.Login.productDomainData || [], \"nproductdomaincode\", \"sproductdomain\", undefined, undefined, undefined);\n      const productDomainDataEDQM = productDomainData.get(\"OptionList\");\n      const productDescData = constructOptionList(this.props.Login.productDescData || [], \"nproductdesccode\", \"sproductclass\", undefined, undefined, undefined);\n      const productDescDataEDQM = productDescData.get(\"OptionList\");\n      const productTypeData = constructOptionList(this.props.Login.productTypeData || [], \"nproducttypecode\", \"sproducttype\", undefined, undefined, undefined);\n      const productTypeDataEDQM = productTypeData.get(\"OptionList\");\n      const bulkTypeData = constructOptionList(this.props.Login.bulkTypeData || [], \"nbulktypecode\", \"sbulktype\", undefined, undefined, undefined);\n      const bulkTypeDataEDQM = bulkTypeData.get(\"OptionList\");\n      const componentBulkData = constructOptionList(this.props.Login.componentBulkData || [], \"ncomponentbulkgroupcode\", \"scomponentbulkgroup\", undefined, undefined, undefined);\n      const componentBulkDataEDQM = componentBulkData.get(\"OptionList\");\n      const masterFileData = constructOptionList(this.props.Login.masterFileData || [], \"nmasterfiletypecode\", \"smasterfiletype\", undefined, undefined, undefined);\n      const masterFileDataEDQM = masterFileData.get(\"OptionList\");\n      const safetyFileData = constructOptionList(this.props.Login.safetyFileData || [], \"nsafetymarkercode\", \"ssafetymarkername\", undefined, undefined, undefined);\n      const safetyFileDataEDQM = safetyFileData.get(\"OptionList\");\n      this.setState({\n        productDomainData: productDomainDataEDQM,\n        productDescData: productDescDataEDQM,\n        productTypeData: productTypeDataEDQM,\n        bulkTypeData: bulkTypeDataEDQM,\n        componentBulkData: componentBulkDataEDQM,\n        masterFileData: masterFileDataEDQM,\n        safetyFileData: safetyFileDataEDQM\n      });\n    }\n  }\n\n  getProductTypeMandatory(ProductDescCode, selectedRecord) {\n    const url = \"edqmproductdescription/getActiveEDQMProductDescriptionById\";\n    rsapi.post(url, {\n      \"nproductdesccode\": parseInt(ProductDescCode),\n      \"userinfo\": this.props.Login.userInfo\n    }).then(response => {\n      const productTypeByID = response.data;\n      const validationColumnList = this.state.validationColumnList;\n\n      if (productTypeByID.nproducttypemand === transactionStatus.YES) {\n        validationColumnList.push({\n          \"idsName\": \"IDS_PRODUCTTYPE\",\n          \"dataField\": \"nproducttypecode\",\n          \"width\": \"200px\",\n          \"mandatory\": true\n        });\n      }\n\n      this.setState({\n        productTypeByID,\n        selectedRecord,\n        validationColumnList\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  }\n\n  getSafetyMarkerMandatory(ProductTypeCode, selectedRecord) {\n    const url = rsapi.post(\"edqmproducttype/getActiveEDQMProductTypeById\", {\n      \"nproducttypecode\": parseInt(ProductTypeCode),\n      \"userinfo\": this.props.Login.userInfo\n    });\n    const safetyMarkert = rsapi.post(\"edqmsafetymarker/getSafetyMarkers\", {\n      \"nproducttypecode\": parseInt(ProductTypeCode),\n      \"userinfo\": this.props.Login.userInfo\n    });\n    let urlArray = [url, safetyMarkert];\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      const safetyFileData1 = constructOptionList(response[1].data || [], \"nsafetymarkercode\", \"ssafetymarkername\", undefined, undefined, undefined);\n      const safetyFileDataEDQM = safetyFileData1.get(\"OptionList\");\n      const safetyMarkByID = response[0].data;\n      const validationColumnList = this.state.validationColumnList;\n\n      if (safetyMarkByID.nsafetymarkermand === transactionStatus.YES) {\n        validationColumnList.push({\n          \"idsName\": \"IDS_SAFETYMARKNAME\",\n          \"dataField\": \"nsafetymarkercode\",\n          \"width\": \"200px\",\n          \"mandatory\": true\n        });\n      } else {\n        let index = validationColumnList.findIndex(data => data.idsName === \"IDS_SAFETYMARKNAME\");\n\n        if (index > -1) {\n          validationColumnList.splice(index, 1);\n        }\n      }\n\n      this.setState({\n        safetyFileData: safetyFileDataEDQM,\n        safetyMarkByID,\n        isOpen: true,\n        selectedRecord,\n        validationColumnList\n      });\n    })).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  edqmProductFetchRecord\n})(injectIntl(EDQMProduct));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/edqmmaster/EDQMProduct.jsx"],"names":["React","connect","FormattedMessage","injectIntl","DataGrid","SlideOutModal","Esign","AddEDQMProduct","ListWrapper","Row","Col","FormGroup","FormLabel","toast","process","MediaLabel","rsapi","Axios","callService","crudMaster","updateStore","validateEsignCredential","edqmProductFetchRecord","DEFAULT_RETURN","constructOptionList","getControlMap","showEsign","transactionStatus","mapStateToProps","state","Login","EDQMProduct","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","safetyMarkByID","productTypeByID","updateInfo","typeName","selectedId","getNestedFieldData","nestedColumnArray","reduce","xs","x","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","detailBand","Dataitem","OptionalFieldList","datafield","Column","map","fields","detailedFieldList","dataField","idsName","columnSize","onComboChange","comboData","fieldName","value","getProductTypeMandatory","getSafetyMarkerMandatory","fetchRecord","primaryKeyName","primaryKeyValue","productDomainData","post","userInfo","productDescData","productTypeData","bulkTypeData","componentBulkData","masterFileData","safetyFileData","urlArray","productData","inputParam","classUrl","methodUrl","all","then","spread","response","nproductdomaincode","nproductdesccode","nproducttypecode","nbulktypecode","ncomponentbulkgroupcode","nmasterfiletypecode","nsafetymarkercode","push","label","isOpen","catch","error","status","message","warn","onInputOnChange","target","type","name","checked","deleteRecord","deleteParam","displayName","inputData","toLowerCase","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","reloadData","onSaveClick","saveType","formRef","fieldList","item","nmastersitecode","intl","formatMessage","id","validateEsign","sreason","nreasoncode","spredefinedreason","password","createRef","extractedColumnList","skip","take","settings","parseInt","addScreen","masterStatus","productTypeMandatory","controlMap","Map","validationColumnList","getDerivedStateFromProps","render","mandatoryFields","forEach","mandatory","addId","has","concat","get","ncontrolcode","editId","edqmAddParam","primaryKeyField","edqmEditParam","edqmDeleteParam","buttonCount","pageSizes","componentDidUpdate","previousProps","Object","values","productDomainDataEDQM","productDescDataEDQM","productTypeDataEDQM","bulkTypeDataEDQM","componentBulkDataEDQM","masterFileDataEDQM","safetyFileDataEDQM","ProductDescCode","url","nproducttypemand","YES","ProductTypeCode","safetyMarkert","safetyFileData1","nsafetymarkermand","index","findIndex","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddEDQMProduct from './AddEDQMProduct';\r\n\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { Row, Col, FormGroup, FormLabel } from 'react-bootstrap';//, Card, Form, Modal\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { MediaLabel } from '../../components/add-client.styles';\r\nimport rsapi from '../../rsapi';\r\nimport Axios from 'axios';\r\nimport { callService, crudMaster, updateStore, validateEsignCredential, edqmProductFetchRecord } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass EDQMProduct extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n       \r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            addScreen: false, data: [], masterStatus: \"\", error: \"\", operation: \"create\",\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            productDomainData: [], productDescData: [], productTypeData: [], bulkTypeData: [], componentBulkData: [],\r\n            masterFileData: [], safetyFileData: [],\r\n            productTypeByID: [], productTypeMandatory: 0,\r\n            safetyMarkByID: [], isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedRecord: {},\r\n            nproductdomaincode: [], nproductdesccode: [], nproducttypecode: [], nbulktypecode: [],\r\n            ncomponentbulkgroupcode: [], nmasterfiletypecode: [], nsafetymarkercode: [],\r\n            //mandatoryFields:[]\r\n\r\n            validationColumnList: [\r\n                { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sofficialproductname\", \"width\": \"300px\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_PRODUCTDOMAIN\", \"dataField\": \"nproductdomaincode\", \"width\": \"200px\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                { \"idsName\": \"IDS_PRODUCTDESC\", \"dataField\": \"nproductdesccode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            ]\r\n        };\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        this.setState({ safetyMarkByID: [], productTypeByID: [] });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null, operation: this.props.Login.operation }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNestedFieldData = (nestedColumnArray, data) =>\r\n        nestedColumnArray.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, data);\r\n\r\n    render() {\r\n\r\n        //let primaryKeyField = \"\";\r\n        \r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sofficialproductname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_PRODUCTDOMAIN\", \"dataField\": \"sproductdomain\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PRODUCTCLASS\", \"dataField\": \"sproductclass\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"sproducttype\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_BULKTYPE\", \"dataField\": \"sbulktype\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_COMPONENTBULKGROUP\", \"dataField\": \"scomponentbulkgroup\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_MASTERFILETYPE\", \"dataField\": \"smasterfiletype\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"ssafetymarkername\", \"width\": \"200px\" },\r\n\r\n\r\n        ]\r\n        //primaryKeyField = \"nofficialproductcode\";\r\n        //let validationColumnList = [];\r\n        this.fieldList = [\"sofficialproductname\", \"nproductdomaincode\", \"nproductdesccode\", \"nproducttypecode\", \"nbulktypecode\", \"ncomponentbulkgroupcode\", \"nmasterfiletypecode\", \"nsafetymarkercode\"];\r\n        // validationColumnList = [\r\n        //     { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sofficialproductname\", \"width\": \"300px\", \"mandatory\": true },\r\n        //     { \"idsName\": \"IDS_PRODUCTDOMAIN\", \"dataField\": \"nproductdomaincode\", \"width\": \"200px\", \"mandatory\": true },\r\n        //     { \"idsName\": \"IDS_PRODUCTDESC\", \"dataField\": \"nproductdesccode\", \"width\": \"200px\", \"mandatory\": true },\r\n        // ]\r\n        // if (this.state.productTypeByID.nproducttypemand === transactionStatus.YES && this.state.safetyMarkByID.nsafetymarkermand === 3) {\r\n        //     this.validationColumnList.push(\r\n        //         { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"nproducttypecode\", \"width\": \"200px\", \"mandatory\": true },\r\n        //         { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"nsafetymarkercode\", \"width\": \"200px\", \"mandatory\": true },\r\n        //     );\r\n        // }\r\n        // else {\r\n        // if (this.state.productTypeByID.nproducttypemand === transactionStatus.YES) {\r\n        //     validationColumnList.push(\r\n        //         { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"nproducttypecode\", \"width\": \"200px\", \"mandatory\": true },\r\n\r\n        //     );\r\n        // }\r\n        // if (this.state.safetyMarkByID.nsafetymarkermand === transactionStatus.YES) {\r\n        //     validationColumnList.push(\r\n        //        { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"nsafetymarkercode\", \"width\": \"200px\", \"mandatory\": true },\r\n        //     );\r\n        // }\r\n        //}\r\n        const mandatoryFields = [];\r\n        this.state.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        const edqmAddParam = {\r\n            screenName: \"EDQM Product\", operation: \"create\", primaryKeyField: \"nofficialproductcode\",\r\n            primaryKeyValue: null, masterData: null, userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: addId\r\n        };\r\n\r\n        const edqmEditParam = {\r\n            screenName: \"EDQM Product\", operation: \"update\", primaryKeyField: \"nofficialproductcode\",\r\n            masterData: null, userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editId\r\n        };\r\n        const edqmDeleteParam = { screenName: \"EDQMProduct\", methodUrl: \"EDQMProduct\", operation: \"delete\" };\r\n\r\n        return (\r\n\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\"> */}\r\n                            {/* <HeaderName className=\"header-primary-md\">\r\n                                    {this.props.Login.inputParam && this.props.Login.inputParam.displayName ?\r\n                                        <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                                </HeaderName> */}\r\n\r\n                            {/* <Button className=\"btn btn-user btn-primary-blue\"\r\n                                    hidden={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                    onClick={() => this.props.edqmProductFetchRecord(edqmAddParam)} role=\"button\">\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id={\"IDS_ADD\"} defaultMessage='Add' />\r\n                                </Button>\r\n                            </PrimaryHeader> */}\r\n\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nofficialproductcode\"}\r\n                                    expandField=\"expanded\"\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.edqmProductFetchRecord}\r\n                                    editParam={edqmEditParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={edqmDeleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    addRecord={() => this.props.edqmProductFetchRecord(edqmAddParam)}\r\n                                    pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    // isComponent={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    hasDynamicColSize={true}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddEDQMProduct\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                productDomainData={this.state.productDomainData || []}//{this.props.Login.productDomainData}\r\n                                productDescData={this.state.productDescData || []}//{this.props.Login.productDescData}\r\n                                productTypeData={this.state.productTypeData || []}//{this.props.Login.productTypeData}\r\n                                productTypeByID={this.state.productTypeByID}//{this.props.Login.productTypeByID}\r\n                                bulkTypeData={this.state.bulkTypeData || []}//{this.props.Login.bulkTypeData}\r\n                                componentBulkData={this.state.componentBulkData || []}//{this.props.Login.componentBulkData}\r\n                                masterFileData={this.state.masterFileData || []}//{this.props.Login.masterFileData}\r\n                                safetyFileData={this.state.safetyFileData}//{this.props.Login.safetyFileData}\r\n                                safetyMarkByID={this.state.safetyMarkByID}//{this.props.Login.safetyMarkByID}\r\n                                nproductdomaincode={this.props.Login.nproductdomaincode}\r\n                                nproductdesccode={this.props.Login.nproductdesccode}\r\n                                nproducttypecode={this.props.Login.nproducttypecode}\r\n                                nbulktypecode={this.props.Login.nbulktypecode}\r\n                                ncomponentbulkgroupcode={this.props.Login.ncomponentbulkgroupcode}\r\n                                nmasterfiletypecode={this.props.Login.nmasterfiletypecode}\r\n                                nsafetymarkercode={this.props.Login.nsafetymarkercode}\r\n\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n\r\n    detailBand = (props) => {\r\n\r\n        const Dataitem = props.dataItem\r\n        const OptionalFieldList = [\r\n            { datafield: \"sproducttype\", Column: \"Product Type\" },\r\n            { datafield: \"sbulktype\", Column: \"Bulk Type\" },\r\n            { datafield: \"scomponentbulkgroup\", Column: \"Component Bulk Group\" },\r\n            { datafield: \"smasterfiletype\", Column: \"Master File Type\" },\r\n            { datafield: \"ssafetymarkername\", Column: \"Safety Marker Name\" },\r\n        ];\r\n        return (<Row>\r\n            {OptionalFieldList.map((fields) => {\r\n                return (\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <FormLabel><FormattedMessage id={fields.Column} message={fields.Column} /></FormLabel>\r\n                            <MediaLabel className=\"readonly-text font-weight-normal\">{Dataitem[fields.datafield]}</MediaLabel>\r\n                        </FormGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n            }\r\n        </Row>)\r\n    }\r\n\r\n    detailedFieldList = [\r\n        { dataField: \"sproducttype\", idsName: \"IDS_PRODUCTTYPE\" , columnSize:\"4\"},\r\n        { dataField: \"sbulktype\", idsName: \"IDS_BULKTYPE\" , columnSize:\"4\"},\r\n        { dataField: \"scomponentbulkgroup\", idsName: \"IDS_COMPONENTBULKGROUP\" , columnSize:\"4\"},\r\n        { dataField: \"smasterfiletype\", idsName: \"IDS_MASTERFILETYPE\" , columnSize:\"4\"},\r\n        { dataField: \"ssafetymarkername\", idsName: \"IDS_SAFETYMARKNAME\" , columnSize:\"4\"},\r\n        //{ \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"20%\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\r\n\r\n    ];\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData.value;\r\n\r\n            if (fieldName === \"nproductdesccode\") {\r\n                this.getProductTypeMandatory(comboData.value, selectedRecord)\r\n            }\r\n            if (fieldName === \"nproducttypecode\") {\r\n                this.getSafetyMarkerMandatory(comboData.value, selectedRecord)\r\n            }\r\n            else {\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.productDomainData !== previousProps.Login.productDomainData || this.props.Login.productDescData !== previousProps.Login.productDescData || this.props.Login.productTypeData !== previousProps.Login.productTypeData ||\r\n            this.props.Login.bulkTypeData !== previousProps.Login.bulkTypeData || this.props.Login.componentBulkData !== previousProps.Login.componentBulkData || this.props.Login.masterFileData !== previousProps.Login.masterFileData ||\r\n            this.props.Login.safetyFileData !== previousProps.Login.safetyFileData) {\r\n\r\n            const productDomainData = constructOptionList(this.props.Login.productDomainData || [], \"nproductdomaincode\",\r\n                \"sproductdomain\", undefined, undefined, undefined);\r\n            const productDomainDataEDQM = productDomainData.get(\"OptionList\");\r\n\r\n            const productDescData = constructOptionList(this.props.Login.productDescData || [], \"nproductdesccode\",\r\n                \"sproductclass\", undefined, undefined, undefined);\r\n            const productDescDataEDQM = productDescData.get(\"OptionList\");\r\n\r\n            const productTypeData = constructOptionList(this.props.Login.productTypeData || [], \"nproducttypecode\",\r\n                \"sproducttype\", undefined, undefined, undefined);\r\n            const productTypeDataEDQM = productTypeData.get(\"OptionList\");\r\n\r\n            const bulkTypeData = constructOptionList(this.props.Login.bulkTypeData || [], \"nbulktypecode\",\r\n                \"sbulktype\", undefined, undefined, undefined);\r\n            const bulkTypeDataEDQM = bulkTypeData.get(\"OptionList\");\r\n\r\n            const componentBulkData = constructOptionList(this.props.Login.componentBulkData || [], \"ncomponentbulkgroupcode\",\r\n                \"scomponentbulkgroup\", undefined, undefined, undefined);\r\n            const componentBulkDataEDQM = componentBulkData.get(\"OptionList\");\r\n\r\n            const masterFileData = constructOptionList(this.props.Login.masterFileData || [], \"nmasterfiletypecode\",\r\n                \"smasterfiletype\", undefined, undefined, undefined);\r\n            const masterFileDataEDQM = masterFileData.get(\"OptionList\");\r\n\r\n            const safetyFileData = constructOptionList(this.props.Login.safetyFileData || [], \"nsafetymarkercode\",\r\n                \"ssafetymarkername\", undefined, undefined, undefined);\r\n            const safetyFileDataEDQM = safetyFileData.get(\"OptionList\");\r\n\r\n            this.setState({\r\n                productDomainData: productDomainDataEDQM, productDescData: productDescDataEDQM, productTypeData: productTypeDataEDQM,\r\n                bulkTypeData: bulkTypeDataEDQM, componentBulkData: componentBulkDataEDQM, masterFileData: masterFileDataEDQM, safetyFileData: safetyFileDataEDQM\r\n            });\r\n        }\r\n    }\r\n\r\n    fetchRecord = (primaryKeyName, primaryKeyValue, operation) => {\r\n\r\n        const productDomainData = rsapi.post(\"edqmproductdomain/getEDQMProductDomain\", { \"userinfo\": this.props.Login.userInfo });\r\n        const productDescData = rsapi.post(\"edqmproductdescription/getEDQMProductDescription\", { \"userinfo\": this.props.Login.userInfo });\r\n        const productTypeData = rsapi.post(\"edqmproducttype/getAllEDQMProductType\", { \"userinfo\": this.props.Login.userInfo });\r\n        const bulkTypeData = rsapi.post(\"edqmbulktype/getAllEDQMBulkType\", { \"userinfo\": this.props.Login.userInfo });\r\n        const componentBulkData = rsapi.post(\"edqmcomponentbulkgroup/getAllEDQMComponentBulkGroup\", { \"userinfo\": this.props.Login.userInfo });\r\n        const masterFileData = rsapi.post(\"edqmmasterfiletype/getAllEDQMMasterFileType\", { \"userinfo\": this.props.Login.userInfo });\r\n        const safetyFileData = rsapi.post(\"edqmsafetymarker/getAllEDQMSafetyMarker\", { \"userinfo\": this.props.Login.userInfo });\r\n\r\n        let urlArray = [];\r\n\r\n        if (operation === \"update\") {\r\n            const productData = rsapi.post(this.props.Login.inputParam.classUrl + \"/getActive\" + this.props.Login.inputParam.methodUrl + \"ById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": this.props.Login.userInfo });\r\n\r\n            urlArray = [productDomainData, productDescData, productTypeData, bulkTypeData, componentBulkData, masterFileData, safetyFileData, productData];\r\n        }\r\n        else {\r\n            urlArray = [productDomainData, productDescData, productTypeData, bulkTypeData, componentBulkData, masterFileData, safetyFileData];\r\n\r\n        }\r\n\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                let nproductdomaincode = [];\r\n                let nproductdesccode = [];\r\n                let nproducttypecode = [];\r\n                let nbulktypecode = [];\r\n                let ncomponentbulkgroupcode = [];\r\n                let nmasterfiletypecode = [];\r\n                let nsafetymarkercode = [];\r\n\r\n                if (operation === \"update\") {\r\n\r\n                    nproductdomaincode.push({\r\n                        label: response[7].data[\"sproductdomain\"],\r\n                        value: response[7].data[\"nproductdomaincode\"]\r\n                    });\r\n\r\n                    nproductdesccode.push({\r\n                        label: response[7].data[\"sproductclass\"],\r\n                        value: response[7].data[\"nproductdesccode\"]\r\n                    });\r\n\r\n                    nproducttypecode.push({\r\n                        label: response[7].data[\"sproducttype\"],\r\n                        value: response[7].data[\"nproducttypecode\"]\r\n                    });\r\n\r\n                    nbulktypecode.push({\r\n                        label: response[7].data[\"sbulktype\"],\r\n                        value: response[7].data[\"nbulktypecode\"]\r\n                    });\r\n\r\n                    ncomponentbulkgroupcode.push({\r\n                        label: response[7].data[\"scomponentbulkgroup\"],\r\n                        value: response[7].data[\"ncomponentbulkgroupcode\"]\r\n                    });\r\n\r\n                    nmasterfiletypecode.push({\r\n                        label: response[7].data[\"smasterfiletype\"],\r\n                        value: response[7].data[\"nmasterfiletypecode\"]\r\n                    });\r\n\r\n                    nsafetymarkercode.push({\r\n                        label: response[7].data[\"ssafetymarkername\"],\r\n                        value: response[7].data[\"nsafetymarkercode\"]\r\n                    });\r\n                }\r\n                this.setState({\r\n                    productDomainData: response[0].data, productDescData: response[1].data,\r\n                    productTypeData: response[2].data, bulkTypeData: response[3].data,\r\n                    componentBulkData: response[4].data, masterFileData: response[5].data,\r\n                    safetyFileData: response[6].data,\r\n                    nproductdomaincode, nproductdesccode, nproducttypecode, nbulktypecode,\r\n                    ncomponentbulkgroupcode, nmasterfiletypecode, nsafetymarkercode,\r\n                    isOpen: true, selectedRecord: operation === \"update\" ? response[7].data : undefined, operation: operation\r\n                });\r\n\r\n\r\n            }))\r\n\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n            if (event.target.name === \"nproductdesccode\") {\r\n\r\n                this.getProductTypeMandatory((event.target.value))\r\n            }\r\n            if (event.target.name === \"nproducttypecode\") {\r\n                this.getSafetyMarkerMandatory((event.target.value))\r\n            }\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n\r\n                [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n\r\n            operation: deleteParam.operation, dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n\r\n                    screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    getProductTypeMandatory(ProductDescCode, selectedRecord) {\r\n        const url = \"edqmproductdescription/getActiveEDQMProductDescriptionById\";\r\n        rsapi.post(url, { \"nproductdesccode\": parseInt(ProductDescCode), \"userinfo\": this.props.Login.userInfo })\r\n            .then(response => {\r\n                const productTypeByID = response.data;\r\n                const validationColumnList = this.state.validationColumnList;\r\n                if (productTypeByID.nproducttypemand === transactionStatus.YES) {\r\n                    validationColumnList.push(\r\n                        { \"idsName\": \"IDS_PRODUCTTYPE\", \"dataField\": \"nproducttypecode\", \"width\": \"200px\", \"mandatory\": true },\r\n\r\n                    );\r\n                }\r\n\r\n                this.setState({ productTypeByID, selectedRecord, validationColumnList });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    getSafetyMarkerMandatory(ProductTypeCode, selectedRecord) {\r\n\r\n        const url = rsapi.post(\"edqmproducttype/getActiveEDQMProductTypeById\", { \"nproducttypecode\": parseInt(ProductTypeCode), \"userinfo\": this.props.Login.userInfo });\r\n        const safetyMarkert = rsapi.post(\"edqmsafetymarker/getSafetyMarkers\", { \"nproducttypecode\": parseInt(ProductTypeCode), \"userinfo\": this.props.Login.userInfo });\r\n        let urlArray = [url, safetyMarkert];\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n                const safetyFileData1 = constructOptionList(response[1].data || [], \"nsafetymarkercode\",\r\n                    \"ssafetymarkername\", undefined, undefined, undefined);\r\n                const safetyFileDataEDQM = safetyFileData1.get(\"OptionList\");\r\n                const safetyMarkByID = response[0].data;\r\n                const validationColumnList = this.state.validationColumnList;\r\n\r\n                if (safetyMarkByID.nsafetymarkermand === transactionStatus.YES) {\r\n                    validationColumnList.push(\r\n                        { \"idsName\": \"IDS_SAFETYMARKNAME\", \"dataField\": \"nsafetymarkercode\", \"width\": \"200px\", \"mandatory\": true },\r\n                    );\r\n                }\r\n                else {\r\n                    let index = validationColumnList.findIndex(data => data.idsName === \"IDS_SAFETYMARKNAME\");\r\n                    if (index > -1) {\r\n                        validationColumnList.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    safetyFileData: safetyFileDataEDQM,\r\n                    safetyMarkByID,\r\n                    isOpen: true,\r\n                    selectedRecord, validationColumnList\r\n                });\r\n            }))\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        // let selectedRecord = {};\r\n\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            selectedId = this.props.Login.selectedId;\r\n            // edit\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n\r\n            this.fieldList.map(item => {\r\n                return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n            //add       this.fieldList = [\"sofficialproductname\", \"nproductdomaincode\", \"nproductdesccode\", \"nproducttypecode\", \r\n            //\"nbulktypecode\", \"ncomponentbulkgroupcode\", \"nmasterfiletypecode\", \"nsafetymarkercode\"];            \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"sofficialproductname\"] = this.state.selectedRecord[\"sofficialproductname\"];\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nproductdomaincode\"] = this.state.selectedRecord[\"nproductdomaincode\"];\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nproductdesccode\"] = this.state.selectedRecord[\"nproductdesccode\"];\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nproducttypecode\"] = this.state.selectedRecord[\"nproducttypecode\"] ?\r\n                this.state.selectedRecord[\"nproducttypecode\"] : -1;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nbulktypecode\"] = this.state.selectedRecord[\"nbulktypecode\"] ?\r\n                this.state.selectedRecord[\"nbulktypecode\"] : -1;\r\n\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ncomponentbulkgroupcode\"] = this.state.selectedRecord[\"ncomponentbulkgroupcode\"] ?\r\n                this.state.selectedRecord[\"ncomponentbulkgroupcode\"] : -1\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nmasterfiletypecode\"] = this.state.selectedRecord[\"nmasterfiletypecode\"] ?\r\n                this.state.selectedRecord[\"nmasterfiletypecode\"] : -1\r\n\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nsafetymarkercode\"] = this.state.selectedRecord[\"nsafetymarkercode\"] ?\r\n                this.state.selectedRecord[\"nsafetymarkercode\"] : -1\r\n            // this.fieldList.map(item => {\r\n            //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            // })\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation, saveType, formRef, dataState, selectedId\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation, selectedId\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n     this.setState({ safetyMarkByID: [], productTypeByID: [] }); \r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential,\r\n    edqmProductFetchRecord\r\n})(injectIntl(EDQMProduct));"]},"metadata":{},"sourceType":"module"}