{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\checklist\\\\checklist\\\\Checklist.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getChecklistVersion, getVersionQB, viewVersionTemplate, onSaveTemplate, showChecklistAddScreen, fetchChecklistRecordByID, filterColumnData } from '../../../actions';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport TemplateForm from './TemplateForm';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport ChecklistForms from './ChecklistForms';\nimport { getSaveInputData, versionCreate, templateChangeHandler } from './checklistMethods';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../../components/CommonScript'; // import ConfirmDialog from '../../../components/confirm-alert/confirm-alert.component';\n\nimport { ProductList } from '../../testmanagement/testmaster-styled';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\nimport ChecklistVersionAccordion from './ChecklistVersionAccordion';\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Checklist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let templateData = this.props.Login.templateData;\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n          templateData = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        templateData = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          templateData,\n          selectedId: null,\n          operation\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.id === 'checklist' ? 'openModal' : 'openChildModal';\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modalName);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let modalName = \"\";\n\n      if (this.props.Login.id === 'checklistversion') {\n        if (this.props.Login.masterData.selectedchecklist) {\n          let inputParam = versionCreate(this.state.selectedRecord, this.props.Login.masterData.selectedchecklist, this.props.Login);\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openChildModal: true,\n                operation: this.props.Login.operation,\n                screenName: '',\n                id: this.props.Login.id\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n          }\n        }\n      } else {\n        modalName = this.props.Login.id === 'checklist' ? 'openModal' : 'openChildModal';\n        let inputParam = getSaveInputData(this.props.Login.id, this.props.Login.operation, this.props.Login, this.props.Login.availableQBCategory, this.state.selectedRecord, this.props.Login.masterData.selectedversion, formRef, this.searchRef, this.state.dataState);\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              operation: this.props.Login.operation,\n              id: this.props.Login.id\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, modalName);\n        }\n      }\n    };\n\n    this.approveVersion = (version, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"checklistversion\"] = {\n        \"schecklistversionname\": version.schecklistversionname,\n        \"nchecklistversioncode\": version.nchecklistversioncode,\n        \"nchecklistcode\": version.nchecklistcode\n      };\n      const postParam = {\n        inputListName: \"checklist\",\n        selectedObject: \"selectedchecklist\",\n        primaryKeyField: \"nchecklistcode\",\n        primaryKeyValue: this.props.Login.masterData.selectedchecklist.nchecklistcode,\n        fetchUrl: \"checklist/getChecklistVersion\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"ChecklistVersion\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation: \"approve\"\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            operation: 'approve',\n            screenName: '',\n            id: 'checklistversion'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.deleteRecord = qbDeleteParam => {\n      let modalName = 'openChildModal';\n      let selectedRecord = qbDeleteParam.selectedRecord;\n      delete selectedRecord.expanded;\n      let postParam = undefined;\n\n      if (qbDeleteParam.methodUrl === 'Checklist') {\n        postParam = {\n          inputListName: \"checklist\",\n          selectedObject: \"selectedchecklist\",\n          primaryKeyField: \"nchecklistcode\",\n          primaryKeyValue: this.props.Login.masterData.selectedchecklist.nchecklistcode,\n          fetchUrl: \"checklist/getChecklistVersion\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        modalName = 'openModal';\n      }\n\n      const inputParam = {\n        methodUrl: qbDeleteParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: {\n          [qbDeleteParam.key]: selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        postParam,\n        displayName: qbDeleteParam.methodUrl,\n        dataState: this.state.dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, qbDeleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            operation: 'delete',\n            screenName: qbDeleteParam.methodUrl,\n            id: qbDeleteParam.methodUrl.toLowerCase()\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName);\n      }\n    };\n\n    this.ConfirmDelete = deleteParam => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteParam));\n    };\n\n    this.checklistVersionAccordion = versionList => {\n      const accordionMap = new Map();\n      versionList.map(version => accordionMap.set(version.nchecklistversioncode, /*#__PURE__*/React.createElement(ChecklistVersionAccordion, {\n        version: version,\n        userRoleControlRights: this.state.userRoleControlRights,\n        controlMap: this.state.controlMap,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        showChecklistAddScreen: this.props.showChecklistAddScreen,\n        dataResult: process(this.props.Login.masterData.checklistversionqb ? this.props.Login.masterData.checklistversionqb : [], this.state.dataState),\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        fetchChecklistRecordByID: this.props.fetchChecklistRecordByID,\n        ConfirmDelete: this.ConfirmDelete,\n        selectedId: this.props.Login.selectedId,\n        approveVersion: this.approveVersion,\n        deleteRecord: this.deleteRecord,\n        viewVersionTemplate: this.props.viewVersionTemplate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nchecklistqbcategorycode\") {\n        //only go inside when combo has value\n        if (comboData) {\n          selectedRecord[\"schecklistqbcategoryname\"] = comboData.label;\n          selectedRecord[selectedRecord[\"schecklistqbcategoryname\"]] = this.state.selectedRecord ? this.state.selectedRecord[comboData.label] ? this.state.selectedRecord[comboData.label] : \"\" : \"\";\n          this.setState({\n            availableQB: this.props.Login.listQb[comboData.label],\n            selectedRecord\n          });\n        } else {\n          selectedRecord[\"schecklistqbcategoryname\"] = \"\";\n          this.setState({\n            selectedRecord,\n            availableQB: []\n          });\n        }\n      } else {\n        selectedRecord[this.state.selectedRecord.schecklistqbcategoryname] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"checklist\",\n        methodUrl: \"Checklist\",\n        displayName: \"IDS_CHECKLIST\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.searchRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      dataState: dataState,\n      selectedRecord: {},\n      availableQB: [],\n      QBCategory: undefined,\n      QB: undefined,\n      listQb: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      sidebarview: false\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const filterParam = {\n      inputListName: \"checklist\",\n      selectedObject: \"selectedchecklist\",\n      primaryKeyField: \"nchecklistcode\",\n      fetchUrl: \"checklist/getChecklistVersion\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"schecklistname\", \"sdescription\"]\n    };\n    const addChecklistId = this.state.controlMap.has(\"AddChecklist\") && this.state.controlMap.get(\"AddChecklist\").ncontrolcode;\n    const editChecklistId = this.state.controlMap.has(\"EditChecklist\") && this.state.controlMap.get(\"EditChecklist\").ncontrolcode;\n    const deleteChecklistId = this.state.controlMap.has(\"DeleteChecklist\") && this.state.controlMap.get(\"DeleteChecklist\").ncontrolcode;\n    const createVersionId = this.state.controlMap.has(\"CreateChecklistVersion\") && this.state.controlMap.get(\"CreateChecklistVersion\").ncontrolcode;\n    this.props.Login.showAccordion = true;\n    const checklistEditParam = {\n      screenName: \"Checklist\",\n      operation: \"update\",\n      primaryKeyField: \"nchecklistcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      primaryKeyValue: this.props.Login.masterData.selectedchecklist ? this.props.Login.masterData.selectedchecklist.nchecklistcode : -1,\n      ncontrolCode: editChecklistId\n    };\n    const checklistDeleteParam = {\n      screenName: \"Checklist\",\n      methodUrl: \"Checklist\",\n      operation: \"delete\",\n      key: 'checklist',\n      ncontrolCode: deleteChecklistId,\n      selectedRecord: this.props.Login.masterData.selectedchecklist ? this.props.Login.masterData.selectedchecklist : {}\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 29\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_CHECKLIST\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.checklist,\n      getMasterDetail: checklist => this.props.getChecklistVersion(checklist, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedchecklist,\n      primaryKeyField: \"nchecklistcode\",\n      mainField: \"schecklistname\",\n      filterColumnData: this.props.filterColumnData,\n      openModal: () => this.props.showChecklistAddScreen(null, 'checklist', addChecklistId, this.props.Login.userInfo),\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addChecklistId,\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      hidePaging: true,\n      reloadData: this.reloadData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.selectedchecklist ? Object.entries(this.props.Login.masterData.selectedchecklist).length > 0 ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedchecklist.schecklistname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(editChecklistId) === -1,\n      onClick: () => this.props.fetchChecklistRecordByID(checklistEditParam) //\"Checklist\",\"nchecklistcode\",this.props.Login.masterData.selectedchecklist.nchecklistcode)\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteChecklistId) === -1,\n      onClick: () => this.ConfirmDelete(checklistDeleteParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 65\n      }\n    }))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedchecklist.sdescription)))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      id: \"checklistvsersion\",\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(createVersionId) === -1,\n      onClick: () => this.props.showChecklistAddScreen(null, 'checklistversion', createVersionId, this.props.Login.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 81\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      defaultMessage: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 81\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.checklistversion && this.props.Login.masterData.checklistversion.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"ChecklistVersion\",\n      accordionTitle: \"schecklistversionname\",\n      accordionComponent: this.checklistVersionAccordion(this.props.Login.masterData.checklistversion),\n      inputParam: {\n        masterData: this.props.Login.masterData,\n        userInfo: this.props.Login.userInfo\n      },\n      accordionClick: this.props.getVersionQB,\n      accordionPrimaryKey: \"nchecklistversioncode\",\n      accordionObjectName: \"version\",\n      selectedKey: this.props.Login.masterData.selectedversion.nchecklistversioncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 77\n      }\n    }) : \"\")))))))))) : \"\" : \"\"))), this.props.Login.operation && this.props.Login.inputParam && this.props.Login.id && /*#__PURE__*/React.createElement(ChecklistForms, {\n      Login: this.props.Login,\n      isOpen: this.props.Login.id ? this.props.Login.id === 'checklist' ? this.props.Login.openModal : this.props.Login.openChildModal : false,\n      onInputOnChange: this.onInputOnChange,\n      handleClose: this.handleClose,\n      onSaveClick: this.onSaveClick,\n      onComboChange: this.onComboChange,\n      id: this.props.Login.id ? this.props.Login.id : \"\",\n      operation: this.props.Login.operation ? this.props.Login.operation : '',\n      selectedRecord: this.state.selectedRecord,\n      QBCategory: this.props.Login.QBCategory,\n      availableQBCategory: this.props.Login.availableQBCategory,\n      QB: this.props.Login.QB,\n      availableQB: this.state.selectedRecord ? this.state.availableQB : [],\n      validateEsign: this.validateEsign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 21\n      }\n    }), this.props.Login.templateData && this.props.Login.templateData.length > 0 ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.templateData,\n      needSaveButton: this.props.Login.masterData.selectedversion.ntransactionstatus === transactionStatus.DRAFT ? true : false,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.handleClose,\n      onTemplateComboChange: this.onTemplateComboChange,\n      onSaveClick: this.props.onSaveTemplate,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord,\n      onTemplateDateChange: this.onTemplateDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.Login.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.state.dataState.take\n        };\n        this.setState({\n          dataState\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getChecklistVersion,\n  getVersionQB,\n  viewVersionTemplate,\n  onSaveTemplate,\n  showChecklistAddScreen,\n  fetchChecklistRecordByID,\n  filterColumnData\n})(injectIntl(Checklist));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/checklist/checklist/Checklist.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPlus","faPencilAlt","faTrashAlt","connect","injectIntl","FormattedMessage","callService","crudMaster","validateEsignCredential","updateStore","getChecklistVersion","getVersionQB","viewVersionTemplate","onSaveTemplate","showChecklistAddScreen","fetchChecklistRecordByID","filterColumnData","process","toast","TemplateForm","ListMaster","ChecklistForms","getSaveInputData","versionCreate","templateChangeHandler","DEFAULT_RETURN","showEsign","getControlMap","ProductList","transactionStatus","CustomAccordion","ChecklistVersionAccordion","ContentPanel","ReadOnlyText","ConfirmMessage","mapStateToProps","state","Login","Checklist","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","handleClose","loadEsign","openModal","openChildModal","selectedRecord","templateData","operation","undefined","updateInfo","typeName","data","selectedId","validateEsign","modalName","id","inputParam","inputData","userInfo","sreason","nreasoncode","value","spredefinedreason","label","password","screenData","onSaveClick","saveType","formRef","masterData","selectedchecklist","userRoleControlRights","nformcode","ncontrolcode","screenName","availableQBCategory","selectedversion","searchRef","dataState","approveVersion","version","ncontrolCode","schecklistversionname","nchecklistversioncode","nchecklistcode","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","userinfo","methodUrl","classUrl","deleteRecord","qbDeleteParam","expanded","key","displayName","toLowerCase","ConfirmDelete","deleteParam","confirmMessage","confirm","intl","formatMessage","checklistVersionAccordion","versionList","accordionMap","Map","map","set","controlMap","checklistversionqb","dataStateChange","event","onInputOnChange","target","type","name","checked","YES","NO","onComboChange","comboData","fieldName","availableQB","listQb","schecklistqbcategoryname","onTemplateInputChange","control","onTemplateComboChange","onTemplateDateChange","dateData","reloadData","current","createRef","skip","take","settings","parseInt","masterStatus","error","QBCategory","QB","getDerivedStateFromProps","warn","render","filterParam","searchFieldList","addChecklistId","has","get","editChecklistId","deleteChecklistId","createVersionId","showAccordion","checklistEditParam","checklistDeleteParam","searchedData","checklist","Object","entries","length","schecklistname","indexOf","sdescription","checklistversion","ntransactionstatus","DRAFT","openTemplateModal","componentDidUpdate","previousProps","values","item","push","componentWillUnmount"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getChecklistVersion, getVersionQB, viewVersionTemplate, onSaveTemplate,\r\n    showChecklistAddScreen, fetchChecklistRecordByID, filterColumnData\r\n} from '../../../actions';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport TemplateForm from './TemplateForm';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport ChecklistForms from './ChecklistForms';\r\nimport { getSaveInputData, versionCreate, templateChangeHandler } from './checklistMethods'\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\n// import ConfirmDialog from '../../../components/confirm-alert/confirm-alert.component';\r\nimport { ProductList } from '../../testmanagement/testmaster-styled';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\r\nimport ChecklistVersionAccordion from './ChecklistVersionAccordion';\r\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Checklist extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.searchRef = React.createRef();\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n\r\n            masterStatus: \"\", error: \"\",\r\n            dataState: dataState,\r\n            selectedRecord: {},\r\n            availableQB: [], QBCategory: undefined, QB: undefined, listQb: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            sidebarview: false\r\n        };\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let templateData = this.props.Login.templateData;\r\n        let operation = this.props.Login.operation\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n                templateData = {};\r\n                operation = undefined\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n            templateData = {}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, openChildModal, loadEsign, selectedRecord, templateData, selectedId: null, operation }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n    validateEsign = () => {\r\n        let modalName = this.props.Login.id === 'checklist' ? 'openModal' : 'openChildModal'\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        let modalName = \"\";\r\n        if (this.props.Login.id === 'checklistversion') {\r\n            if (this.props.Login.masterData.selectedchecklist) {\r\n\r\n                let inputParam = versionCreate(this.state.selectedRecord, this.props.Login.masterData.selectedchecklist, this.props.Login)\r\n\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, openChildModal: true, operation: this.props.Login.operation, screenName: '', id: this.props.Login.id\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n                }\r\n            }\r\n        } else {\r\n            modalName = this.props.Login.id === 'checklist' ? 'openModal' : 'openChildModal'\r\n            let inputParam = getSaveInputData(this.props.Login.id, this.props.Login.operation, this.props.Login,\r\n                this.props.Login.availableQBCategory, this.state.selectedRecord, this.props.Login.masterData.selectedversion, formRef, this.searchRef, this.state.dataState)\r\n\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                        operation: this.props.Login.operation, id: this.props.Login.id\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, modalName);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    approveVersion = (version, ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"checklistversion\"] = {\r\n            \"schecklistversionname\": version.schecklistversionname,\r\n            \"nchecklistversioncode\": version.nchecklistversioncode,\r\n            \"nchecklistcode\": version.nchecklistcode\r\n        }\r\n        const postParam = {\r\n            inputListName: \"checklist\", selectedObject: \"selectedchecklist\",\r\n            primaryKeyField: \"nchecklistcode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedchecklist.nchecklistcode,\r\n            fetchUrl: \"checklist/getChecklistVersion\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"ChecklistVersion\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation: \"approve\"\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openChildModal: true, operation: 'approve', screenName: '', id: 'checklistversion'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n\r\n    //to delete a recoed\r\n    deleteRecord = (qbDeleteParam) => {\r\n        let modalName = 'openChildModal'\r\n        let selectedRecord = qbDeleteParam.selectedRecord\r\n        delete selectedRecord.expanded\r\n        let postParam = undefined\r\n        if (qbDeleteParam.methodUrl === 'Checklist') {\r\n            postParam = {\r\n                inputListName: \"checklist\", selectedObject: \"selectedchecklist\",\r\n                primaryKeyField: \"nchecklistcode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedchecklist.nchecklistcode,\r\n                fetchUrl: \"checklist/getChecklistVersion\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n\r\n            }\r\n            modalName = 'openModal'\r\n        }\r\n        const inputParam = {\r\n            methodUrl: qbDeleteParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: { [qbDeleteParam.key]: selectedRecord, \"userinfo\": this.props.Login.userInfo },\r\n            operation: \"delete\", postParam,\r\n            displayName: qbDeleteParam.methodUrl,\r\n            dataState: this.state.dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, qbDeleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                    operation: 'delete', screenName: qbDeleteParam.methodUrl, id: qbDeleteParam.methodUrl.toLowerCase()\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, modalName);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        const filterParam = {\r\n            inputListName: \"checklist\", selectedObject: \"selectedchecklist\", primaryKeyField: \"nchecklistcode\",\r\n            fetchUrl: \"checklist/getChecklistVersion\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"schecklistname\", \"sdescription\"]\r\n        }\r\n\r\n        const addChecklistId = this.state.controlMap.has(\"AddChecklist\") && this.state.controlMap.get(\"AddChecklist\").ncontrolcode;\r\n        const editChecklistId = this.state.controlMap.has(\"EditChecklist\") && this.state.controlMap.get(\"EditChecklist\").ncontrolcode;\r\n        const deleteChecklistId = this.state.controlMap.has(\"DeleteChecklist\") && this.state.controlMap.get(\"DeleteChecklist\").ncontrolcode\r\n        const createVersionId = this.state.controlMap.has(\"CreateChecklistVersion\") && this.state.controlMap.get(\"CreateChecklistVersion\").ncontrolcode\r\n\r\n\r\n        this.props.Login.showAccordion = true;\r\n        const checklistEditParam = {\r\n            screenName: \"Checklist\", operation: \"update\", primaryKeyField: \"nchecklistcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            primaryKeyValue: this.props.Login.masterData.selectedchecklist ? this.props.Login.masterData.selectedchecklist.nchecklistcode : -1,\r\n            ncontrolCode: editChecklistId\r\n        };\r\n\r\n        const checklistDeleteParam = {\r\n            screenName: \"Checklist\", methodUrl: \"Checklist\", operation: \"delete\", key: 'checklist', ncontrolCode: deleteChecklistId,\r\n            selectedRecord: this.props.Login.masterData.selectedchecklist ? this.props.Login.masterData.selectedchecklist : {}\r\n        };\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-4\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                            <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                                {!this.state.sidebarview ?\r\n                                    <i class=\"fa fa-less-than\"></i> :\r\n                                    <i class=\"fa fa-greater-than\"></i> \r\n                                }\r\n                            </span>\r\n                            <ListMaster\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_CHECKLIST\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.checklist}\r\n                                getMasterDetail={(checklist) => this.props.getChecklistVersion(checklist, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedchecklist}\r\n                                primaryKeyField={\"nchecklistcode\"}\r\n                                mainField=\"schecklistname\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                openModal={() => this.props.showChecklistAddScreen(null, 'checklist', addChecklistId, this.props.Login.userInfo)}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addChecklistId}\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                hidePaging={true}\r\n                                reloadData={this.reloadData}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                            {this.props.Login.masterData.selectedchecklist ? Object.entries(this.props.Login.masterData.selectedchecklist).length > 0 ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <ContentPanel className=\"panel-main-content\">\r\n                                            <Card className=\"border-0\">\r\n                                                <Card.Header>\r\n                                                    <Card.Title className=\"product-title-main\">\r\n                                                        {this.props.Login.masterData.selectedchecklist.schecklistname}\r\n                                                    </Card.Title>\r\n                                                    <Card.Subtitle>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                        <ProductList className=\"d-flex justify-content-end\">\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //    data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editChecklistId) === -1}\r\n                                                                onClick={() => this.props.fetchChecklistRecordByID(checklistEditParam)\r\n\r\n                                                                    //\"Checklist\",\"nchecklistcode\",this.props.Login.masterData.selectedchecklist.nchecklistcode)\r\n                                                                }>\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                              //  data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteChecklistId) === -1}\r\n                                                                onClick={() => this.ConfirmDelete(checklistDeleteParam)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <ConfirmDialog\r\n                                                                        name=\"deleteMessage\"\r\n                                                                        message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                        doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                        doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                        icon={faTrashAlt}\r\n                                                                        //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteChecklistId) === -1}\r\n                                                                        handleClickDelete={() => this.deleteRecord(checklistDeleteParam)}\r\n                                                                    /> */}\r\n                                                            </Nav.Link>\r\n                                                        </ProductList>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>\r\n                                                    {/* <Card.Text> */}\r\n                                                    <Row>\r\n                                                        <Col md={12}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_DESCRIPTION\" message=\"Description\" /></FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.selectedchecklist.sdescription}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                    {/* </Card.Text> */}\r\n                                                    <Row noGutters={true}>\r\n                                                        <Col md={12}>\r\n                                                            <Card id=\"checklistvsersion\" className=\"at-tabs border-0\">\r\n                                                                <Row noGutters={true} >\r\n                                                                    <Col md={12}>\r\n                                                                        <div className=\"d-flex justify-content-end\">\r\n                                                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                                            <Nav.Link className=\"add-txt-btn\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(createVersionId) === -1}\r\n                                                                                onClick={() => this.props.showChecklistAddScreen(null, 'checklistversion', createVersionId, this.props.Login.userInfo)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                                                <FormattedMessage id='IDS_VERSION' defaultMessage='Version' />\r\n                                                                            </Nav.Link>\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                                <Row noGutters={true}>\r\n                                                                    <Col md={12}>\r\n                                                                        {this.props.Login.masterData.checklistversion && this.props.Login.masterData.checklistversion.length > 0 ?\r\n                                                                            <CustomAccordion\r\n                                                                                key=\"ChecklistVersion\"\r\n                                                                                accordionTitle={\"schecklistversionname\"}\r\n                                                                                accordionComponent={this.checklistVersionAccordion(this.props.Login.masterData.checklistversion)}\r\n                                                                                inputParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                                                                accordionClick={this.props.getVersionQB}\r\n                                                                                accordionPrimaryKey={\"nchecklistversioncode\"}\r\n                                                                                accordionObjectName={\"version\"}\r\n                                                                                selectedKey={this.props.Login.masterData.selectedversion.nchecklistversioncode}\r\n                                                                            />\r\n                                                                            : \"\"}\r\n                                                                    </Col>\r\n                                                                </Row>\r\n\r\n                                                            </Card>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </ContentPanel>\r\n                                    </Col>\r\n                                </Row>\r\n                                : \"\" : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                {this.props.Login.operation && this.props.Login.inputParam && this.props.Login.id &&\r\n                    <ChecklistForms\r\n                        Login={this.props.Login}\r\n                        isOpen={this.props.Login.id ? this.props.Login.id === 'checklist' ? this.props.Login.openModal : this.props.Login.openChildModal : false}\r\n                        onInputOnChange={this.onInputOnChange}\r\n                        handleClose={this.handleClose}\r\n                        onSaveClick={this.onSaveClick}\r\n                        onComboChange={this.onComboChange}\r\n                        id={this.props.Login.id ? this.props.Login.id : \"\"}\r\n                        operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        QBCategory={this.props.Login.QBCategory}\r\n                        availableQBCategory={this.props.Login.availableQBCategory}\r\n                        QB={this.props.Login.QB}\r\n                        availableQB={this.state.selectedRecord ? this.state.availableQB : []}\r\n                        validateEsign={this.validateEsign}\r\n                    />\r\n                }\r\n                {this.props.Login.templateData && this.props.Login.templateData.length > 0 ?\r\n                    <TemplateForm\r\n                        templateData={this.props.Login.templateData}\r\n                        needSaveButton={this.props.Login.masterData.selectedversion.ntransactionstatus === transactionStatus.DRAFT ? true : false}\r\n                        formRef={this.formRef}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        handleClose={this.handleClose}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        onSaveClick={this.props.onSaveTemplate}\r\n                        Login={this.props.Login}\r\n                        viewScreen={this.props.Login.openTemplateModal}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    /> : \"\"\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            let { dataState } = this.state;\r\n            if (this.props.Login.dataState === undefined) {\r\n                dataState = { skip: 0 , take:this.state.dataState.take}\r\n                this.setState({ dataState });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    ConfirmDelete = (deleteParam) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(deleteParam));\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    checklistVersionAccordion = (versionList) => {\r\n        const accordionMap = new Map();\r\n        versionList.map((version) =>\r\n            accordionMap.set(version.nchecklistversioncode,\r\n                <ChecklistVersionAccordion\r\n                    version={version}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    controlMap={this.state.controlMap}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    masterData={this.props.Login.masterData}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    showChecklistAddScreen={this.props.showChecklistAddScreen}\r\n                    dataResult={process(this.props.Login.masterData.checklistversionqb ? this.props.Login.masterData.checklistversionqb : [], this.state.dataState)}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    fetchChecklistRecordByID={this.props.fetchChecklistRecordByID}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    selectedId={this.props.Login.selectedId}\r\n                    approveVersion={this.approveVersion}\r\n                    deleteRecord={this.deleteRecord}\r\n                    viewVersionTemplate={this.props.viewVersionTemplate}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === \"nchecklistqbcategorycode\") {\r\n            //only go inside when combo has value\r\n            if (comboData) {\r\n                selectedRecord[\"schecklistqbcategoryname\"] = comboData.label;\r\n                selectedRecord[selectedRecord[\"schecklistqbcategoryname\"]] = this.state.selectedRecord ? this.state.selectedRecord[comboData.label] ?\r\n                    this.state.selectedRecord[comboData.label] : \"\" : \"\"\r\n                this.setState({ availableQB: this.props.Login.listQb[comboData.label], selectedRecord });\r\n            } else {\r\n                selectedRecord[\"schecklistqbcategoryname\"] = \"\"\r\n                this.setState({ selectedRecord, availableQB: [] });\r\n            }\r\n        } else {\r\n            selectedRecord[this.state.selectedRecord.schecklistqbcategoryname] = comboData\r\n            this.setState({ selectedRecord })\r\n        }\r\n    }\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"checklist\",\r\n            methodUrl: \"Checklist\",\r\n            displayName: \"IDS_CHECKLIST\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getChecklistVersion, getVersionQB, viewVersionTemplate, onSaveTemplate,\r\n    showChecklistAddScreen, fetchChecklistRecordByID, filterColumnData\r\n})(injectIntl(Checklist));"]},"metadata":{},"sourceType":"module"}