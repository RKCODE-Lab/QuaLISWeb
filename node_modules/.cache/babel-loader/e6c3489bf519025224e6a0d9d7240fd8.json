{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\HolidayPlannerTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddCommonHolidays from '../configurationmaster/AddCommonHolidays';\nimport AddPublicHolidays from '../configurationmaster/AddPublicHolidays';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, formatInputDate } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport HolidayPlannerTabsAccordion from '../configurationmaster/HolidayPlannerTabsAccordion';\nimport CommonHolidaysTab from '../configurationmaster/CommonHolidaysTab';\nimport PublicHolidaysTab from '../configurationmaster/PublicHolidaysTab';\nimport UserBasedHolidays from '../configurationmaster/UserBasedHolidays';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddUserBasedHolidays from '../configurationmaster/AddUserBasedHolidays'; // import ReactTooltip from 'react-tooltip';\n\nclass HolidayPlannerTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.PublicHolidays, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.dataStateChangeUserBasedHolidays = event => {\n      this.setState({\n        userBasedDataResult: process(this.state.UserBasedHolidays, event.dataState),\n        userBasedDataState: event.dataState\n      });\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.holidayYearVersionAccordion = yearVersion => {\n      const accordionMap = new Map();\n      yearVersion.map(version => accordionMap.set(version.nholidayyearversion, /*#__PURE__*/React.createElement(HolidayPlannerTabsAccordion, {\n        version: version,\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        userInfo: this.props.userInfo,\n        sendApproveYearVersion: this.approveVersion,\n        ConfirmDelete: this.ConfirmDelete,\n        masterData: this.props.masterData // deleteRecord={this.Delete}\n        ,\n        tabDetail: this.tabDetail(version),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.tabDetail = version => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_COMMONHOLIDAYS\", /*#__PURE__*/React.createElement(CommonHolidaysTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_COMMONHOLIDAYS\",\n        getCommonHolidays: this.sendCommonHolidays,\n        masterData: this.props.masterData,\n        version: version,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 42\n        }\n      }));\n      tabMap.set(\"IDS_PUBLICHOLIDAYS\", /*#__PURE__*/React.createElement(PublicHolidaysTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_PUBLICHOLIDAYS\",\n        getPublicHolidays: this.getPublicHolidays,\n        masterData: this.props.masterData,\n        version: version,\n        dataResult: process(this.state.PublicHolidays || [], this.state.dataState),\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        publicHolidaysColumns: this.publicHolidaysColumns,\n        deleteRecord: this.Delete,\n        selectedId: this.props.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 42\n        }\n      }));\n      tabMap.set(\"IDS_USERBASEDHOLIDAYS\", /*#__PURE__*/React.createElement(UserBasedHolidays, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_USERBASEDHOLIDAYS\",\n        getUserBasedHolidays: this.getUserBasedHolidays,\n        masterData: this.props.masterData,\n        version: version,\n        dataResult: process(this.state.UserBasedHolidays || [], this.state.userBasedDataState),\n        dataState: this.state.userBasedDataState,\n        dataStateChange: this.dataStateChangeUserBasedHolidays,\n        userBasedHolidaysColumns: this.userBasedHolidaysColumns,\n        deleteRecord: this.Delete,\n        selectedId: this.props.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.getPublicHolidays = inputParam => {\n      if (this.props.masterData.selectedYearVersion.ntransactionstatus === transactionStatus.DRAFT) {\n        this.props.getPublicHolidays(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      }\n    };\n\n    this.getUserBasedHolidays = inputParam => {\n      if (this.props.masterData.selectedYearVersion.ntransactionstatus === transactionStatus.DRAFT) {\n        this.props.getUserBasedHolidays(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      }\n    };\n\n    this.sendCommonHolidays = (screenName, operation, masterData, userInfo, editID) => {\n      // if (masterData.selectedYearVersion && masterData.selectedYearVersion.ntransactionstatus === transactionStatus.APPROVED) {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\n      // }\n      // else {\n      this.props.getCommonHolidays(screenName, operation, masterData, userInfo, editID); // }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (fieldName === \"ntzddate\") {\n        if (comboData === null) {\n          selectedRecord[\"ntzddate\"] = 0;\n          selectedRecord[\"stzddate\"] = \"\";\n        } else {\n          selectedRecord[\"stzddate\"] = comboData.label;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n        } else {\n          if (this.props.screenName === \"HolidayYearVersion\") {\n            openChildModal = false;\n          }\n\n          loadEsign = false;\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.approveVersion = (yearVersion, approveYearVersion) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      inputData[\"holidayyearversion\"] = {\n        \"nyearcode\": yearVersion.nyearcode,\n        \"nholidayyearversion\": yearVersion.nholidayyearversion,\n        \"ntransactionstatus\": yearVersion.ntransactionstatus\n      };\n      const inputParam = {\n        classUrl: this.props.inputParam.classUrl,\n        methodUrl: \"HolidayYearVersion\",\n        inputData: inputData,\n        operation: approveYearVersion.operation\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, approveYearVersion.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: approveYearVersion.screenName,\n            operation: approveYearVersion.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let validDate = false;\n      let clearSelectedRecordField = []; // if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.stransdisplaystatus === intl.formatMessage({ id: \"IDS_APPROVED\" })) {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\n      // }\n      // else {\n\n      if (this.props.screenName === \"IDS_COMMONHOLIDAYS\") {\n        validDate = true;\n        inputParam = this.UpdateCommonHolidays(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\") {\n        let year = new Date(this.state.selectedRecord[\"ddate\"]).getFullYear();\n        validDate = String(year).length === 4 && String(year) === this.props.masterData.selectedYear.syear ? true : false;\n        inputParam = this.SavePublicHolidays(saveType, formRef); //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\n\n        clearSelectedRecordField = [{\n          \"idsName\": \"IDS_DESCRIPTION\",\n          \"dataField\": \"sdescription\",\n          \"width\": \"250px\",\n          \"isClearField\": true\n        }];\n      } else if (this.props.screenName === \"IDS_USERBASEDHOLIDAYS\") {\n        let year = new Date(this.state.selectedRecord[\"ddate\"]).getFullYear();\n        validDate = String(year).length === 4 && String(year) === this.props.masterData.selectedYear.syear ? true : false;\n        inputParam = this.SaveUserBasedHolidays(saveType, formRef); //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\n\n        clearSelectedRecordField = [{\n          \"idsName\": \"IDS_DESCRIPTION\",\n          \"dataField\": \"sdescription\",\n          \"width\": \"250px\",\n          \"isClearField\": true\n        }];\n      }\n\n      if (validDate) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\n          if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\" || this.props.screenName === \"IDS_USERBASEDHOLIDAYS\") {\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", \"\", \"\", clearSelectedRecordField);\n          } else {\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDDATE\"\n        }));\n      } // }\n\n    };\n\n    this.addVersion = addParam => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      let fieldList = [\"nholidayyearversion\", \"nversioncode\"];\n\n      if (this.props.operation === \"update\") {\n        inputData[\"holidayyearversion\"] = {\n          \"nyearcode\": this.props.masterData.selectedYear.nyearcode\n        };\n        fieldList.map(item => {\n          return inputData[\"holidayyearversion\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n      } else {\n        inputData[\"holidayyearversion\"] = {\n          \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n          \"nversioncode\": 0\n        };\n      }\n\n      const inputParam = {\n        classUrl: this.props.inputParam.classUrl,\n        methodUrl: \"HolidayYearVersion\",\n        inputData: inputData,\n        operation: \"create\",\n        saveType: addParam.saveType\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, addParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: addParam.screenName,\n            operation: addParam.operation,\n            saveType: addParam.saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      } // this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.ntransactionstatus !== transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\"\n        }));\n      } else {\n        inputData[deleteParam.methodUrl.toLowerCase()] = deleteParam.selectedRecord;\n        inputData[\"userinfo\"] = this.props.userInfo;\n        const inputParam = {\n          methodUrl: deleteParam.methodUrl,\n          classUrl: this.props.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\",\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.masterData\n                },\n                openChildModal: true,\n                screenName: deleteParam.screenName,\n                operation: deleteParam.operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n          }\n        }\n      } //this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      versionSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      CommonHolidays: this.props.masterData.CommonHolidays,\n      PublicHolidays: this.props.masterData.PublicHolidays,\n      Country: [],\n      CurrentYearVersion: this.props.masterData.CurrentYearVersion,\n      activeTab: 'common-tab',\n      selectedRecord: {},\n      UserBasedHolidays: this.props.masterData.UserBasedHolidays,\n      userBasedDataState: dataState,\n      userBasedDataResult: []\n    };\n    this.publicHolidaysColumns = [{\n      \"idsName\": \"IDS_DATE\",\n      \"dataField\": \"sdate\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"400px\"\n    }];\n    this.userBasedHolidaysColumns = [{\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_DATE\",\n      \"dataField\": \"sdate\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"400px\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    this.mandatoryPublicHolidaysColumns = [{\n      \"idsName\": \"IDS_DATE\",\n      \"dataField\": \"ddate\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzddate\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n\n    if (this.props.screenName === \"IDS_USERBASEDHOLIDAYS\") {\n      this.mandatoryPublicHolidaysColumns.push({\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"nusercode\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const addYearVersionId = this.props.controlMap.has(\"AddHolidayYearVersion\") && this.props.controlMap.get(\"AddHolidayYearVersion\").ncontrolcode; // const deleteYearVersionId = this.props.controlMap.has(\"DeleteHolidayYearVersion\") && this.props.controlMap.get(\"DeleteHolidayYearVersion\").ncontrolcode\n    // const addCommonHolidaysId = this.props.controlMap.has(\"AddCommonHolidays\") && this.props.controlMap.get(\"AddCommonHolidays\").ncontrolcode\n    // const editCommonHolidaysId = this.props.controlMap.has(\"EditCommonHolidays\") && this.props.controlMap.get(\"EditCommonHolidays\").ncontrolcode;\n    // const deleteCommonHolidaysId = this.props.controlMap.has(\"DeleteCommonHolidays\") && this.props.controlMap.get(\"DeleteCommonHolidays\").ncontrolcode\n    // const addPublicHolidaysId = this.props.controlMap.has(\"AddPublicHolidays\") && this.props.controlMap.get(\"AddPublicHolidays\").ncontrolcode\n    // const editPublicHolidaysId = this.props.controlMap.has(\"EditPublicHolidays\") && this.props.controlMap.get(\"EditPublicHolidays\").ncontrolcode;\n    // const deletePublicHolidaysId = this.props.controlMap.has(\"DeletePublicHolidays\") && this.props.controlMap.get(\"DeletePublicHolidays\").ncontrolcode\n\n    const AddYearVersionParam = {\n      screenName: \"HolidayYearVersion\",\n      operation: \"create\",\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      ncontrolCode: addYearVersionId,\n      saveType: 1\n    };\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\" || this.props.screenName === \"IDS_USERBASEDHOLIDAYS\") {\n      this.mandatoryPublicHolidaysColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\" // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDVERSION\" })}\n      ,\n      hidden: this.props.userRoleControlRights.indexOf(addYearVersionId) === -1,\n      onClick: e => this.addVersion(AddYearVersionParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      defaultMessage: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 37\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, this.props.masterData.YearVersion && this.props.masterData.YearVersion.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"sversionno\",\n      accordionComponent: this.holidayYearVersionAccordion(this.props.masterData.YearVersion),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getCommonAndPublicHolidays,\n      accordionPrimaryKey: \"nholidayyearversion\",\n      accordionObjectName: \"version\",\n      selectedKey: this.props.masterData.selectedYearVersion.nholidayyearversion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      showSaveContinue: this.props.screenName === \"IDS_PUBLICHOLIDAYS\" || this.props.screenName === \"IDS_USERBASEDHOLIDAYS\" ? true : false,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_COMMONHOLIDAYS\" ? /*#__PURE__*/React.createElement(AddCommonHolidays, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_PUBLICHOLIDAYS\" ? /*#__PURE__*/React.createElement(AddPublicHolidays, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        timeZoneList: this.props.timeZoneList || [],\n        userInfo: this.props.userInfo,\n        minDate: new Date(\"01-01-\" + this.props.masterData.selectedYear.syear),\n        maxDate: new Date(\"12-31-\" + this.props.masterData.selectedYear.syear),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(AddUserBasedHolidays, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        timeZoneList: this.props.timeZoneList || [],\n        userInfo: this.props.userInfo,\n        minDate: new Date(\"01-01-\" + this.props.masterData.selectedYear.syear),\n        maxDate: new Date(\"12-31-\" + this.props.masterData.selectedYear.syear),\n        Users: this.props.Users,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 37\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  UpdateCommonHolidays(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmonday\", \"ntuesday\", \"nwednesday\", \"nthursday\", \"nfriday\", \"nsaturday\", \"nsunday\"];\n\n    if (this.props.operation === \"update\") {\n      inputData[\"commonholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion,\n        \"ncommonholidaycode\": this.props.masterData.CommonHolidays[0].ncommonholidaycode\n      };\n      fieldList.map(item => {\n        return inputData[\"commonholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"CommonHolidays\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef\n    };\n    return inputParam;\n  }\n\n  SaveUserBasedHolidays(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo; // let fieldList = [\"npublicholidaycode\", \"ddate\", \"sdescription\"];\n\n    if (this.props.operation === \"update\") {\n      inputData[\"userbasedholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\n      }; // fieldList.map(item => {\n      //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      // })\n\n      inputData[\"userbasedholidays\"][\"nuserbasedholidaycode\"] = this.state.selectedRecord[\"nuserbasedholidaycode\"] ? this.state.selectedRecord[\"nuserbasedholidaycode\"] : 0;\n      inputData[\"userbasedholidays\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : -1;\n      inputData[\"userbasedholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\n      inputData[\"userbasedholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\n      inputData[\"userbasedholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\n      inputData[\"userbasedholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\n    } else {\n      inputData[\"userbasedholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\n      }; // fieldList.map(item => {\n      //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item]\n      // })\n\n      inputData[\"userbasedholidays\"][\"nuserbasedholidaycode\"] = this.state.selectedRecord[\"nuserbasedholidaycode\"] ? this.state.selectedRecord[\"nuserbasedholidaycode\"] : 0;\n      inputData[\"userbasedholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\n      inputData[\"userbasedholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\n      inputData[\"userbasedholidays\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : -1;\n      inputData[\"userbasedholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\n      inputData[\"userbasedholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\n    }\n\n    const publicHolidayDate = inputData[\"userbasedholidays\"][\"ddate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n    inputData[\"userbasedholidays\"][\"ddate\"] = formatInputDate(publicHolidayDate, false);\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"UserBasedHolidays\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SavePublicHolidays(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo; // let fieldList = [\"npublicholidaycode\", \"ddate\", \"sdescription\"];\n\n    if (this.props.operation === \"update\") {\n      inputData[\"publicholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\n      }; // fieldList.map(item => {\n      //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      // })\n\n      inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\n      inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\n      inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\n      inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\n      inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\n    } else {\n      inputData[\"publicholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\n      }; // fieldList.map(item => {\n      //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item]\n      // })\n\n      inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\n      inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\n      inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\n      inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\n      inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\n    }\n\n    const publicHolidayDate = inputData[\"publicholidays\"][\"ddate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n    inputData[\"publicholidays\"][\"ddate\"] = formatInputDate(publicHolidayDate, false);\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"PublicHolidays\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  } // Delete = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let selectedRecord = this.props.selectedRecord || this.state.selectedRecord;\n      let {\n        dataState,\n        userBasedDataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n        userBasedDataState = { ...dataState\n        };\n      }\n\n      if (this.props.operation === \"create\" && this.props.inputParam.saveType === 2) {\n        this.props.inputParam.formRef && this.props.inputParam.formRef.current.reset();\n        selectedRecord = {\n          //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\n          //ddate: new Date(),\n          sdescription: '',\n          ntzddate: {\n            \"value\": this.props.userInfo.ntimezonecode,\n            \"label\": this.props.userInfo.stimezoneid\n          },\n          stzddate: this.props.userInfo.stimezoneid\n        };\n      }\n\n      this.setState({\n        YearVersion: this.props.masterData.YearVersion,\n        CommonHolidays: this.props.masterData.CommonHolidays,\n        CurrentYearVersion: this.props.masterData.CurrentYearVersion,\n        PublicHolidays: this.props.masterData.PublicHolidays,\n        UserBasedHolidays: this.props.masterData.UserBasedHolidays,\n        dataState,\n        selectedRecord,\n        userBasedDataState\n      });\n    } else if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(HolidayPlannerTab);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/configurationmaster/HolidayPlannerTab.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormattedMessage","injectIntl","FontAwesomeIcon","faPlus","process","SlideOutModal","AddCommonHolidays","AddPublicHolidays","DEFAULT_RETURN","showEsign","formatInputDate","Esign","CustomAccordion","HolidayPlannerTabsAccordion","CommonHolidaysTab","PublicHolidaysTab","UserBasedHolidays","transactionStatus","toast","ConfirmMessage","AddUserBasedHolidays","HolidayPlannerTab","constructor","props","dataStateChange","event","setState","dataResult","state","PublicHolidays","dataState","dataStateChangeUserBasedHolidays","userBasedDataResult","userBasedDataState","ConfirmDelete","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","holidayYearVersionAccordion","yearVersion","accordionMap","Map","map","version","set","nholidayyearversion","userRoleControlRights","controlMap","userInfo","approveVersion","masterData","tabDetail","onTabChange","tabMap","inputParam","sendCommonHolidays","getPublicHolidays","publicHolidaysColumns","selectedId","getUserBasedHolidays","userBasedHolidaysColumns","selectedYearVersion","ntransactionstatus","DRAFT","warn","screenName","operation","editID","getCommonHolidays","onComboChange","comboData","fieldName","selectedRecord","label","tabProps","updateInfo","typeName","data","updateStore","closeModal","loadEsign","openChildModal","handleDateChange","dateName","dateValue","onInputOnChange","target","type","name","checked","ACTIVE","DEACTIVE","YES","NO","value","approveYearVersion","inputData","nyearcode","classUrl","methodUrl","esignRights","nformcode","ncontrolCode","screenData","crudMaster","onSaveClick","saveType","formRef","validDate","clearSelectedRecordField","UpdateCommonHolidays","year","Date","getFullYear","String","length","selectedYear","syear","SavePublicHolidays","SaveUserBasedHolidays","addVersion","addParam","fieldList","item","deleteParam","toLowerCase","validateEsign","sreason","nreasoncode","spredefinedreason","password","validateEsignCredential","skip","take","settings","parseInt","versionSelectedRecord","CommonHolidays","Country","CurrentYearVersion","activeTab","render","mandatoryPublicHolidaysColumns","push","addYearVersionId","has","get","ncontrolcode","AddYearVersionParam","mandatoryFields","forEach","mandatory","indexOf","e","YearVersion","getCommonAndPublicHolidays","timeZoneList","Users","ncommonholidaycode","publicHolidayDate","componentDidUpdate","previousProps","undefined","current","reset","sdescription","ntzddate","ntimezonecode","stimezoneid","stzddate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddCommonHolidays from '../configurationmaster/AddCommonHolidays';\r\nimport AddPublicHolidays from '../configurationmaster/AddPublicHolidays';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, formatInputDate } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport HolidayPlannerTabsAccordion from '../configurationmaster/HolidayPlannerTabsAccordion';\r\nimport CommonHolidaysTab from '../configurationmaster/CommonHolidaysTab';\r\nimport PublicHolidaysTab from '../configurationmaster/PublicHolidaysTab';\r\nimport UserBasedHolidays from '../configurationmaster/UserBasedHolidays';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddUserBasedHolidays from '../configurationmaster/AddUserBasedHolidays';\r\n\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nclass HolidayPlannerTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            versionSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, CommonHolidays: this.props.masterData.CommonHolidays,\r\n            PublicHolidays: this.props.masterData.PublicHolidays, Country: [],\r\n            CurrentYearVersion: this.props.masterData.CurrentYearVersion,\r\n            activeTab: 'common-tab', selectedRecord: {},\r\n            UserBasedHolidays: this.props.masterData.UserBasedHolidays, userBasedDataState: dataState, userBasedDataResult: []\r\n        };\r\n        this.publicHolidaysColumns = [\r\n            { \"idsName\": \"IDS_DATE\", \"dataField\": \"sdate\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"400px\" }\r\n        ];\r\n        this.userBasedHolidaysColumns = [\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_DATE\", \"dataField\": \"sdate\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"400px\" }\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.PublicHolidays, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChangeUserBasedHolidays = (event) => {\r\n        this.setState({\r\n            userBasedDataResult: process(this.state.UserBasedHolidays, event.dataState),\r\n            userBasedDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        this.mandatoryPublicHolidaysColumns = [\r\n            { \"idsName\": \"IDS_DATE\", \"dataField\": \"ddate\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzddate\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ];\r\n\r\n        if(this.props.screenName === \"IDS_USERBASEDHOLIDAYS\"){\r\n            this.mandatoryPublicHolidaysColumns.push({ \"idsName\": \"IDS_USER\", \"dataField\": \"nusercode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n        }\r\n\r\n  \r\n\r\n        const addYearVersionId = this.props.controlMap.has(\"AddHolidayYearVersion\") && this.props.controlMap.get(\"AddHolidayYearVersion\").ncontrolcode\r\n\r\n        // const deleteYearVersionId = this.props.controlMap.has(\"DeleteHolidayYearVersion\") && this.props.controlMap.get(\"DeleteHolidayYearVersion\").ncontrolcode\r\n\r\n\r\n        // const addCommonHolidaysId = this.props.controlMap.has(\"AddCommonHolidays\") && this.props.controlMap.get(\"AddCommonHolidays\").ncontrolcode\r\n        // const editCommonHolidaysId = this.props.controlMap.has(\"EditCommonHolidays\") && this.props.controlMap.get(\"EditCommonHolidays\").ncontrolcode;\r\n        // const deleteCommonHolidaysId = this.props.controlMap.has(\"DeleteCommonHolidays\") && this.props.controlMap.get(\"DeleteCommonHolidays\").ncontrolcode\r\n\r\n        // const addPublicHolidaysId = this.props.controlMap.has(\"AddPublicHolidays\") && this.props.controlMap.get(\"AddPublicHolidays\").ncontrolcode\r\n        // const editPublicHolidaysId = this.props.controlMap.has(\"EditPublicHolidays\") && this.props.controlMap.get(\"EditPublicHolidays\").ncontrolcode;\r\n        // const deletePublicHolidaysId = this.props.controlMap.has(\"DeletePublicHolidays\") && this.props.controlMap.get(\"DeletePublicHolidays\").ncontrolcode\r\n\r\n        const AddYearVersionParam = {\r\n            screenName: \"HolidayYearVersion\", operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addYearVersionId,\r\n            saveType: 1\r\n        };\r\n\r\n        const mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\"||this.props.screenName === \"IDS_USERBASEDHOLIDAYS\") {\r\n            this.mandatoryPublicHolidaysColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        } \r\n        return (\r\n            <>\r\n                {/* <Row className=\"no-gutters\">\r\n                    <Col md={12}> */}\r\n                <Card className=\"at-tabs border-0\">\r\n                    <Row noGutters={true} >\r\n                        <Col md={12}>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                <Nav.Link className=\"add-txt-btn\"\r\n                                    // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDVERSION\" })}\r\n                                    hidden={this.props.userRoleControlRights.indexOf(addYearVersionId) === -1}\r\n                                    onClick={(e) => this.addVersion(AddYearVersionParam)}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id='IDS_VERSION' defaultMessage='Version' />\r\n                                </Nav.Link>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* <Row className=\"no-gutters text-right border-bottom pt-2 pb-2\" > */}\r\n                    {/* <Col md={4}> */}\r\n                    {/* <Nav.Link className=\"add-txt-btn\"\r\n                                        onClick={(e) => this.addVersion(AddYearVersionParam)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id='IDS_ADDVERSION' defaultMessage='Add Version' />\r\n                                    </Nav.Link> */}\r\n                    {/* </Col> */}\r\n                    {/* </Row> */}\r\n                    <Row className=\"no-gutters\">\r\n                        <Col md={12}>\r\n                            {this.props.masterData.YearVersion && this.props.masterData.YearVersion.length > 0 ?\r\n                                <CustomAccordion key=\"filter\"\r\n                                    accordionTitle={\"sversionno\"}\r\n                                    accordionComponent={this.holidayYearVersionAccordion(this.props.masterData.YearVersion)}\r\n                                    inputParam={{ masterData: this.props.masterData, userInfo: this.props.userInfo }}\r\n                                    accordionClick={this.props.getCommonAndPublicHolidays}\r\n                                    accordionPrimaryKey={\"nholidayyearversion\"}\r\n                                    accordionObjectName={\"version\"}\r\n                                    selectedKey={this.props.masterData.selectedYearVersion.nholidayyearversion}\r\n                                />\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n                {/* </Col>\r\n                </Row> */}\r\n                {this.props.openChildModal &&\r\n                    <SlideOutModal show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        updateStore={this.props.updateStore}\r\n                        esign={this.props.loadEsign}\r\n                        showSaveContinue={this.props.screenName === \"IDS_PUBLICHOLIDAYS\"|| this.props.screenName === \"IDS_USERBASEDHOLIDAYS\"? true : false}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign operation={this.props.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_COMMONHOLIDAYS\" ?\r\n                                <AddCommonHolidays selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                />\r\n                                : this.props.screenName === \"IDS_PUBLICHOLIDAYS\" ?\r\n                                    <AddPublicHolidays\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        timeZoneList={this.props.timeZoneList || []}\r\n                                        userInfo={this.props.userInfo}\r\n                                        minDate={new Date(\"01-01-\" + this.props.masterData.selectedYear.syear)}\r\n                                        maxDate={new Date(\"12-31-\" + this.props.masterData.selectedYear.syear)}\r\n                                    />\r\n                                    :\r\n                                    <AddUserBasedHolidays\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        timeZoneList={this.props.timeZoneList || []}\r\n                                        userInfo={this.props.userInfo}\r\n                                        minDate={new Date(\"01-01-\" + this.props.masterData.selectedYear.syear)}\r\n                                        maxDate={new Date(\"12-31-\" + this.props.masterData.selectedYear.syear)}\r\n                                        Users={this.props.Users}\r\n                                    />\r\n\r\n                        }\r\n                    />}\r\n            </>\r\n        );\r\n    }\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    holidayYearVersionAccordion = (yearVersion) => {\r\n        const accordionMap = new Map();\r\n        yearVersion.map((version) =>\r\n            accordionMap.set(version.nholidayyearversion,\r\n                <HolidayPlannerTabsAccordion version={version}\r\n                    userRoleControlRights={this.props.userRoleControlRights}\r\n                    controlMap={this.props.controlMap}\r\n                    userInfo={this.props.userInfo}\r\n                    sendApproveYearVersion={this.approveVersion}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    masterData={this.props.masterData}\r\n                    // deleteRecord={this.Delete}\r\n                    tabDetail={this.tabDetail(version)}\r\n                    onTabChange={this.onTabChange}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    tabDetail = (version) => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_COMMONHOLIDAYS\", <CommonHolidaysTab userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            screenName={\"IDS_COMMONHOLIDAYS\"}\r\n            getCommonHolidays={this.sendCommonHolidays}\r\n            masterData={this.props.masterData}\r\n            version={version}\r\n        />)\r\n        tabMap.set(\"IDS_PUBLICHOLIDAYS\", <PublicHolidaysTab userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            screenName={\"IDS_PUBLICHOLIDAYS\"}\r\n            getPublicHolidays={this.getPublicHolidays}\r\n            masterData={this.props.masterData}\r\n            version={version}\r\n            dataResult={process(this.state.PublicHolidays || [], this.state.dataState)}\r\n            dataState={this.state.dataState}\r\n            dataStateChange={this.dataStateChange}\r\n            publicHolidaysColumns={this.publicHolidaysColumns}\r\n            deleteRecord={this.Delete}\r\n            selectedId={this.props.selectedId}\r\n        />)\r\n        tabMap.set(\"IDS_USERBASEDHOLIDAYS\", <UserBasedHolidays userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            screenName={\"IDS_USERBASEDHOLIDAYS\"}\r\n            getUserBasedHolidays={this.getUserBasedHolidays}\r\n            masterData={this.props.masterData}\r\n            version={version}\r\n            dataResult={process(this.state.UserBasedHolidays || [], this.state.userBasedDataState)}\r\n            dataState={this.state.userBasedDataState}\r\n            dataStateChange={this.dataStateChangeUserBasedHolidays}\r\n            userBasedHolidaysColumns={this.userBasedHolidaysColumns}\r\n            deleteRecord={this.Delete}\r\n            selectedId={this.props.selectedId}\r\n        />)\r\n        return tabMap;\r\n    }\r\n    getPublicHolidays = (inputParam) => {\r\n\r\n        if (this.props.masterData.selectedYearVersion.ntransactionstatus === transactionStatus.DRAFT) {\r\n            this.props.getPublicHolidays(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    getUserBasedHolidays = (inputParam) => {\r\n\r\n        if (this.props.masterData.selectedYearVersion.ntransactionstatus === transactionStatus.DRAFT) {\r\n            this.props.getUserBasedHolidays(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        }\r\n    }\r\n\r\n    sendCommonHolidays = (screenName, operation, masterData, userInfo, editID) => {\r\n        // if (masterData.selectedYearVersion && masterData.selectedYearVersion.ntransactionstatus === transactionStatus.APPROVED) {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\r\n        // }\r\n        // else {\r\n        this.props.getCommonHolidays(screenName, operation, masterData, userInfo, editID);\r\n        // }\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        if (fieldName === \"ntzddate\") {\r\n            if (comboData === null) {\r\n                selectedRecord[\"ntzddate\"] = 0;\r\n                selectedRecord[\"stzddate\"] = \"\";\r\n            }\r\n            else {\r\n                selectedRecord[\"stzddate\"] = comboData.label;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n            }\r\n            else {\r\n                if (this.props.screenName === \"HolidayYearVersion\") {\r\n                    openChildModal = false;\r\n                }\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n\r\n        }\r\n\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    approveVersion = (yearVersion, approveYearVersion) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        inputData[\"holidayyearversion\"] = { \"nyearcode\": yearVersion.nyearcode, \"nholidayyearversion\": yearVersion.nholidayyearversion, \"ntransactionstatus\": yearVersion.ntransactionstatus };\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"HolidayYearVersion\",\r\n            inputData: inputData,\r\n            operation: approveYearVersion.operation\r\n        }\r\n\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, approveYearVersion.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: approveYearVersion.screenName, operation: approveYearVersion.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputParam = {};\r\n        let validDate = false;\r\n        let clearSelectedRecordField=[];\r\n        // if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.stransdisplaystatus === intl.formatMessage({ id: \"IDS_APPROVED\" })) {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\r\n        // }\r\n        // else {\r\n        if (this.props.screenName === \"IDS_COMMONHOLIDAYS\") {\r\n            validDate = true;\r\n            inputParam = this.UpdateCommonHolidays(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\") {\r\n\r\n            let year = new Date(this.state.selectedRecord[\"ddate\"]).getFullYear()\r\n            validDate = String(year).length === 4 && String(year) === this.props.masterData.selectedYear.syear ? true : false;\r\n            inputParam = this.SavePublicHolidays(saveType, formRef);\r\n\r\n           //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\r\n            clearSelectedRecordField=[\r\n                {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\",\"width\":\"250px\",\"isClearField\":true},\r\n                \r\n              ];\r\n\r\n        }\r\n        else if (this.props.screenName === \"IDS_USERBASEDHOLIDAYS\") {\r\n\r\n            let year = new Date(this.state.selectedRecord[\"ddate\"]).getFullYear()\r\n            validDate = String(year).length === 4 && String(year) === this.props.masterData.selectedYear.syear ? true : false;\r\n            inputParam = this.SaveUserBasedHolidays(saveType, formRef);\r\n            //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\r\n            clearSelectedRecordField=[\r\n                {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\",\"width\":\"250px\",\"isClearField\":true},\r\n                \r\n              ];\r\n        }\r\n        if (validDate) {\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\r\n                if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\" || this.props.screenName === \"IDS_USERBASEDHOLIDAYS\")\r\n                {\r\n                    this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\",\"\",\"\",clearSelectedRecordField);\r\n                }\r\n                else\r\n                {\r\n                   this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n                }\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_INVALIDDATE\" }))\r\n        }\r\n        // }\r\n    }\r\n    addVersion = (addParam) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nholidayyearversion\", \"nversioncode\"];\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"holidayyearversion\"] = { \"nyearcode\": this.props.masterData.selectedYear.nyearcode };\r\n            fieldList.map(item => {\r\n                return inputData[\"holidayyearversion\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"holidayyearversion\"] = { \"nyearcode\": this.props.masterData.selectedYear.nyearcode, \"nversioncode\": 0 };\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"HolidayYearVersion\",\r\n            inputData: inputData,\r\n            operation: \"create\", saveType: addParam.saveType\r\n        }\r\n\r\n\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, addParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: addParam.screenName, operation: addParam.operation, saveType: addParam.saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    UpdateCommonHolidays(saveType, formRef) {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmonday\", \"ntuesday\", \"nwednesday\",\r\n            \"nthursday\", \"nfriday\", \"nsaturday\", \"nsunday\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"commonholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion, \"ncommonholidaycode\": this.props.masterData.CommonHolidays[0].ncommonholidaycode\r\n            };\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"commonholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"CommonHolidays\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef\r\n        }\r\n        return inputParam;\r\n\r\n    }\r\n\r\n    SaveUserBasedHolidays(saveType, formRef) {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        // let fieldList = [\"npublicholidaycode\", \"ddate\", \"sdescription\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"userbasedholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\r\n            };\r\n            // fieldList.map(item => {\r\n            //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            // })\r\n            inputData[\"userbasedholidays\"][\"nuserbasedholidaycode\"] = this.state.selectedRecord[\"nuserbasedholidaycode\"] ? this.state.selectedRecord[\"nuserbasedholidaycode\"] : 0;\r\n            inputData[\"userbasedholidays\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value  : -1;\r\n            inputData[\"userbasedholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\r\n            inputData[\"userbasedholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\r\n\r\n            inputData[\"userbasedholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\r\n            inputData[\"userbasedholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\r\n        }\r\n        else {\r\n\r\n            inputData[\"userbasedholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\r\n            };\r\n\r\n            // fieldList.map(item => {\r\n            //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item]\r\n            // })\r\n\r\n            inputData[\"userbasedholidays\"][\"nuserbasedholidaycode\"] = this.state.selectedRecord[\"nuserbasedholidaycode\"] ? this.state.selectedRecord[\"nuserbasedholidaycode\"] : 0;\r\n            inputData[\"userbasedholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\r\n            inputData[\"userbasedholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\r\n            inputData[\"userbasedholidays\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : -1;\r\n            inputData[\"userbasedholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\r\n            inputData[\"userbasedholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\r\n        }\r\n\r\n        const publicHolidayDate = inputData[\"userbasedholidays\"][\"ddate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        inputData[\"userbasedholidays\"][\"ddate\"] = formatInputDate(publicHolidayDate, false);\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"UserBasedHolidays\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef,\r\n            //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    SavePublicHolidays(saveType, formRef) {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        // let fieldList = [\"npublicholidaycode\", \"ddate\", \"sdescription\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"publicholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\r\n            };\r\n            // fieldList.map(item => {\r\n            //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            // })\r\n            inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\r\n            inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\r\n            inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\r\n\r\n            inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\r\n            inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\r\n        }\r\n        else {\r\n\r\n            inputData[\"publicholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\r\n            };\r\n\r\n            // fieldList.map(item => {\r\n            //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item]\r\n            // })\r\n\r\n            inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\r\n            inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\r\n            inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\r\n\r\n            inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\r\n            inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\r\n        }\r\n\r\n        const publicHolidayDate = inputData[\"publicholidays\"][\"ddate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        inputData[\"publicholidays\"][\"ddate\"] = formatInputDate(publicHolidayDate, false);\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"PublicHolidays\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef,\r\n            //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    // Delete = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n\r\n        if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.ntransactionstatus !== transactionStatus.DRAFT) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\r\n        }\r\n        else {\r\n            inputData[deleteParam.methodUrl.toLowerCase()] = deleteParam.selectedRecord;\r\n            inputData[\"userinfo\"] = this.props.userInfo;\r\n            const inputParam = {\r\n                methodUrl: deleteParam.methodUrl,\r\n                classUrl: this.props.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: \"delete\",\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                            openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n                }\r\n            }\r\n        }\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let selectedRecord = this.props.selectedRecord || this.state.selectedRecord;\r\n            let { dataState,userBasedDataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n                userBasedDataState={...dataState}\r\n            }\r\n            if (this.props.operation === \"create\" && this.props.inputParam.saveType === 2) {\r\n\r\n                this.props.inputParam.formRef && this.props.inputParam.formRef.current.reset();\r\n                selectedRecord = {\r\n                    //ALPD-5262 Holiday Planner-add publicHoliday and UserHoliday Save&Continue--> Infinate Loading...\r\n                    //ddate: new Date(),\r\n                     sdescription: '',\r\n                    ntzddate: {\r\n                        \"value\": this.props.userInfo.ntimezonecode,\r\n                        \"label\": this.props.userInfo.stimezoneid\r\n                    },\r\n                    stzddate: this.props.userInfo.stimezoneid\r\n                };\r\n            }\r\n            this.setState({\r\n                YearVersion: this.props.masterData.YearVersion,\r\n                CommonHolidays: this.props.masterData.CommonHolidays,\r\n                CurrentYearVersion: this.props.masterData.CurrentYearVersion, \r\n                PublicHolidays: this.props.masterData.PublicHolidays,\r\n                UserBasedHolidays: this.props.masterData.UserBasedHolidays,\r\n                dataState, selectedRecord,userBasedDataState\r\n\r\n            });\r\n        }\r\n        else if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\nexport default injectIntl(HolidayPlannerTab);"]},"metadata":{},"sourceType":"module"}