{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, editFieldConfigService, auditFieldConfigService, mappingFieldConfigService, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService, exportFieldConfigService, configureCheckList, getConfigureCheckListLatestVersion, reportFilterType } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, constructOptionList, validateCreateView, getFilterConditionsBasedonDataType, queryBuilderfillingColumns, checkFilterIsEmptyQueryBuilder } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, SampleType, transactionStatus, templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\n// SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\n//SAMPLETEMPLATEFIELDS, \n//SUBSAMPLETEMPLATEFIELDS, \ndesignComponents, QUALISFORMS //ARNOMULTILINGUAL, SUBARNOMULTILINGUAL\n} from '../../components/Enumeration';\nimport AddSynonym from '../../components/droparea/AddSynonym';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport ConfigureScreenFields from './ConfigureScreenFields';\nimport ConfigureEditFields from './ConfigureEditFields';\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\nimport ConfigureAuditFields from './ConfigureAuditFields';\nimport CustomPopover from '../../components/customPopover';\nimport ConfigureSendToStoreFields from './configureSendToStoreFields'; //import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfigureExportFields from './ConfigureExportFields';\nimport ConfigureCheckList from './ConfigureCheckList';\nimport ConfigureCheckListAdd from './ConfigureCheckListAdd';\nimport { process } from '@progress/kendo-data-query';\nimport ConfigureReportFilterType from './ConfigureReportFilterType'; //import {Utils as QbUtils,} from \"@react-awesome-query-builder/ui\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === SampleType.Masters) {\n            const masterTypeArray = this.state.masterTypeArray;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  masterTypeArray,\n                  defaultMasterType: masterTypeArray[0],\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1\n                }\n              }\n            };\n            this.props.updateStore(updateInfo); //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025  \n          } else if (event.value === SampleType.GOODSIN || event.value === SampleType.PROTOCOL) {\n            let masterData = { ...this.props.Login.masterData,\n              defaultsampletype: event\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1,\n                  defaultform: {\n                    value: -1,\n                    label: \"-\"\n                  }\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            inputParam[\"masterData\"][\"defaultform\"] = {\n              value: -1,\n              label: \"-\"\n            };\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldname === \"masterType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultMasterType: event\n          };\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: SampleType.Masters\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === 1) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onChangeExportFields = (event, dataItem, field, dataIndex, formCode, operation) => {\n      const sampleexportdataResult = this.props.Login.sampleexportdataResult;\n      sampleexportdataResult[formCode][dataIndex] = { ...sampleexportdataResult[formCode][dataIndex],\n        sampleexportfields: event.target.checked\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          sampleexportdataResult\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onChangeReportFilterTypeFields = (event, dataItem, field, dataIndex, formCode, operation) => {\n      let count = 0; //let reportFilterType=[];\n\n      const sampleReportFilterTypeData = this.props.Login.sampleReportFilterTypeData;\n      sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex],\n        samplefiltertypefields: event.target.checked\n      };\n      sampleReportFilterTypeData.sample.map(x => {\n        if (x.samplefiltertypefields === true) {\n          count++; //reportFilterType.push(x);\n        }\n      });\n\n      if (count > parseInt(this.props.Login.settings && this.props.Login.settings['48'])) {\n        sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex],\n          samplefiltertypefields: false\n        };\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_MAXIMUMSELECTIONEXCEEDSFILTEERTYPE\"\n        }));\n      } else {\n        let extractedColumnList = queryBuilderfillingColumns(this.props.Login.sampleReportFilterTypeData[\"sample\"], this.props.Login.userInfo.slanguagetypecode);\n        let fields = getFilterConditionsBasedonDataType(extractedColumnList, this.props.Login.comboValues);\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            sampleReportFilterTypeData,\n            fields\n          } //,reportFilterType }\n\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onClickAddCheckList = () => {\n      this.props.getConfigureCheckListLatestVersion(this.props.Login.userInfo);\n    };\n\n    this.onComboChangeCheckList = (event, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[field] = event;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.queryBuilderfillingColumns = data => {\n      const temparray = [];\n      data && data.map(option => {\n        if (option.samplefiltertypefields === true) {\n          temparray.push({\n            \"idsName\": option.realData[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n            \"dataField\": option.realData[designProperties.LISTITEM] === 'combo' ? \"(r.jsondata->'\" + option.realData[designProperties.VALUE] + \"'->>'\" + option.realData[designProperties.PRIMARYKEY] + \"')::int\" : option.realData[designProperties.LISTITEM] === 'Numeric' ? \"(r.jsondata->>'\" + option.realData[designProperties.VALUE] + \"')::int\" : \"(r.jsondata->>'\" + option.realData[designProperties.VALUE] + \"')\",\n            \"width\": \"200px\",\n            \"filterinputtype\": option.realData[designProperties.LISTITEM]\n          });\n        }\n\n        ;\n      });\n      return temparray;\n    };\n\n    this.openModal = (ncontrolcode, operation) => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: operation,\n          ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      console.log(\"this.props.Login.masterData:\", this.props.Login.masterData);\n      const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n      const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n      const sampleType = this.props.Login.masterData.realSampleValue.value;\n      const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n      const tabMap = new Map();\n      tabMap.set(\"IDS_TEMPLATE\", /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 13\n        }\n      }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 29\n        }\n      }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / item.children.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 41\n        }\n      }, column.children.map(component => {\n        return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 61\n          }\n        }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n          md: componentrow && componentrow.length || 4,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 77\n          }\n        }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 77\n          }\n        }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 65\n          }\n        }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 65\n          }\n        }, \" \", \"-\"));\n      }))) : \"\")) : \"\"))); //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n      if (sampleType !== SampleType.Masters && sampleType !== SampleType.GOODSIN && sampleType !== SampleType.PROTOCOL && (needsubsample || sampleType === SampleType.STABILITY)) {\n        tabMap.set(\"IDS_SUBSAMPLETEMPLATE\", /*#__PURE__*/React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 970,\n            columnNumber: 17\n          }\n        }, subSampleLayout ? subSampleLayout.map(item => /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 974,\n            columnNumber: 33\n          }\n        }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n          md: 12 / item.children.length,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 45\n          }\n        }, column.children.map(component => {\n          return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 982,\n              columnNumber: 65\n            }\n          }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n            md: componentrow && componentrow.length || 4,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 985,\n              columnNumber: 73\n            }\n          }, /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 986,\n              columnNumber: 77\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 987,\n              columnNumber: 81\n            }\n          }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 988,\n              columnNumber: 81\n            }\n          }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 65\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 997,\n              columnNumber: 69\n            }\n          }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 998,\n              columnNumber: 69\n            }\n          }, \" \", \"-\"));\n        }))) : \"\")) : \"\")));\n      }\n\n      return tabMap;\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateCL: event.dataState\n      });\n    };\n\n    this.actionMethod = value => {\n      if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, \"configure\");\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configureedit');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, 'configuresubsample');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configuresubsampleedit');\n      } else if (value.method === templateMappingAction.CONFIGUNIQUE) {\n        this.openCombinationUniqueFieldConfiguration(value.controlId);\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\n        this.auditFieldConfiguration(value.controlId, 'configureaudit');\n      } // else if (value.method === templateMappingAction.CONFIGSENDTOSTORE) {\n      //     this.mappingFieldConfiguration(value.controlId, 'configuresendtostore')\n      // }\n      else if (value.method === templateMappingAction.CONFIGEXPORTFIELDS) {\n        this.exportFieldConfiguration(value.controlId, 'configureexportfields');\n      } else if (value.method === templateMappingAction.CONFIGURECHECKLIST) {\n        this.configureCheckList(value.controlId, 'configurechecklist');\n      } else if (value.method === templateMappingAction.CONFIGURERELEASESAMPLEFILTER) {\n        this.configureReportFilterType(value.controlId, 'configurereleasesamplefilter');\n      }\n    };\n\n    this.configureCheckList = (controlCode, operation) => {\n      let ncontrolcode = controlCode;\n      let screenName = \"\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          userinfo: this.props.Login.userInfo //  nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.configureCheckList(inputParam);\n    };\n\n    this.exportFieldConfiguration = (controlCode, operation) => {\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.exportFieldConfigService(inputParam);\n    };\n\n    this.configureReportFilterType = (controlCode, operation) => {\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.reportFilterType(inputParam);\n    };\n\n    this.reloadData = () => {\n      //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\n      if (this.searchRef && this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025  \n        nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n        nformcode: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? formCode.GOODSIN : this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL ? formCode.PROTOCOL : this.props.Login.masterData.defaultsampletype.value === SampleType.STABILITY ? formCode.STUDYALLOCATION : parseInt(this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1)\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025   \n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN || this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN || this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? formCode.GOODSIN : this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL ? formCode.PROTOCOL : this.props.Login.masterData.defaultsampletype.value === SampleType.STABILITY ? formCode.STUDYALLOCATION : parseInt(this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1)\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode; // if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //              openModal: true,\n        //             operation: \"approve\", ncontrolCode: ncontrolCode\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // } else {\n\n        let inputData = {}; //Modified by sonia on 13-JUN-2024 for JIRA ID:4386 ComboBox Selection Issue\n        //ALPD-5264--Vignesh R(27-01-2025)--->Sample Category-->Cant able to delete the record 500 error occurs\n\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL) {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n        } else if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGoodsInJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n        } else if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY) {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getStabilityJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n        } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n        else if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getProtocolJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n        } // console.log(\"deleteValidation 2:\", deleteValidation);\n        //let inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\n\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping; // inputData[\"deletevalidationlist\"] = deleteValidation;\n\n        inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: { ...inputData\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          screenName: 'Template Mapping',\n          operation: \"Approve\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType; // console.log(\"approve:\", inputParam);\n\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"Approve\",\n              screenName: 'Template Mapping'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } //  }\n      else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.configureunique = () => {\n      let inputData = [];\n      let operation = this.props.Login.operation;\n      let designData = this.props.Login.designData; //  let formCodeArray = Object.keys(this.state.selectedRecord);\n\n      let isCheckedSampleMandatory = false;\n      let isCheckedSubSampleMandatory = this.props.Login.dataListSubSample.length === 0 ? true : false;\n      const dataList = [];\n      const dataListsubsample = [];\n      let dataListKeyvalue = [];\n      let dataListsubsampleKeyvalue = [];\n      this.props.Login.dataListSubSample.map(x => {\n        if (Object.keys(x).length !== 0) {\n          dataListsubsample.push(x);\n          dataListsubsampleKeyvalue = Object.keys(x);\n        }\n      });\n      this.props.Login.dataList.map(x => {\n        if (Object.keys(x).length !== 0) {\n          dataList.push(x);\n          dataListKeyvalue = Object.keys(x);\n        }\n      });\n      designData.sampletemplatemandatoryfields && designData.sampletemplatemandatoryfields.map(item => {\n        dataListKeyvalue.map(value => {\n          if (value === item[2]) {\n            isCheckedSampleMandatory = true;\n          }\n        });\n      });\n      designData.subsampletemplatemandatoryfields && designData.subsampletemplatemandatoryfields.map(item => {\n        dataListsubsampleKeyvalue.map(value => {\n          if (value === item[2]) {\n            isCheckedSubSampleMandatory = true;\n          }\n        });\n      });\n      designData.templatemandatoryfields && designData.templatemandatoryfields.map(item => {\n        dataListKeyvalue.map(value => {\n          if (value === item[2]) {\n            isCheckedSampleMandatory = true;\n          }\n        });\n      });\n\n      if (isCheckedSampleMandatory && isCheckedSubSampleMandatory) {\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n          designData['mastercombinationunique'] = dataList;\n        } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n        else if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\n          designData['combinationunique'] = dataList;\n        } else {\n          designData['samplecombinationunique'] = dataList;\n          designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList; // this.props.Login.dataListSubSample.map(x => {\n          //     if (Object.keys(x).length !== 0) {\n          //         dataListsubsample.push(x);\n          //     }\n          // })\n\n          designData['subsamplecombinationunique'] = dataListsubsample;\n          designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample;\n        }\n\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n        let postParam = undefined;\n        const inputParam = {\n          classUrl: \"designtemplatemapping\",\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation,\n          postParam,\n          searchRef: this.searchRef,\n          dataList: [],\n          dataListCount: [],\n          dataListCountSubSample: [],\n          dataListSubSample: []\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              dataList: [],\n              dataListCount: [],\n              dataListCountSubSample: [],\n              dataListSubSample: []\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        if (!isCheckedSampleMandatory) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYONEMANDATORYFIELD\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYONEMANDATORYFIELDINSUBSAMPLE\"\n          }));\n        }\n      }\n    };\n\n    this.configurereportfiltertype = () => {\n      let inputData = [];\n      let operation = this.props.Login.operation;\n      let isMandatoryTree = this.checkMandatoryFilter(this.props.Login.filterQueryTreeStr, this.props.Login.awesomeConfig);\n\n      if (isMandatoryTree) {\n        let isFilterEmpty = checkFilterIsEmptyQueryBuilder(this.props.Login.filterQueryTreeStr);\n        let ismandatory = false;\n\n        if (isFilterEmpty) {\n          let designData = this.props.Login.designData;\n          const dataList = [];\n          this.state.sampleReportFilterTypeData.sample.map(x => {\n            if (x.samplefiltertypefields === true) {\n              dataList.push({ ...x.realData,\n                \"ismandatory\": x.ismandatory\n              });\n\n              if (x.ismandatory) {\n                ismandatory = true;\n              }\n            }\n          });\n\n          if (ismandatory && (this.props.Login.filterquery === \"\" || this.props.Login.filterquery === undefined)) {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_PROVIDEVALUESFORINPUTS\"\n            }));\n          } else {\n            designData[formCode.SAMPLEREGISTRATION]['samplefiltertypefields'] = dataList;\n            designData[formCode.RELEASE]['samplefiltertypefields'] = dataList;\n            designData[formCode.RELEASE]['defaultstructure'] = {\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.value,\n              nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.value,\n              awesomeTree: this.props.Login.awesomeTree,\n              awesomeConfig: this.props.Login.awesomeConfig,\n              filterquery: this.props.Login.filterquery,\n              filterQueryTreeStr: this.props.Login.filterQueryTreeStr\n            };\n            inputData = {\n              designtemplatemapping: {\n                ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n                jsondataobj: designData\n              },\n              userinfo: this.props.Login.userInfo\n            };\n            operation = 'configure';\n            let postParam = undefined;\n            const inputParam = {\n              classUrl: \"designtemplatemapping\",\n              methodUrl: \"DesignTemplateMapping\",\n              inputData: inputData,\n              operation,\n              postParam,\n              searchRef: this.searchRef,\n              dataList: [],\n              dataListCount: [],\n              dataListCountSubSample: [],\n              dataListSubSample: []\n            };\n            const masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  dataList: [],\n                  dataListCount: [],\n                  dataListCountSubSample: [],\n                  dataListSubSample: []\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, masterData, \"openModal\");\n            }\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PROVIDEVALUESFORINPUTS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREMANDATORYFIELDS\"\n        }));\n      }\n    };\n\n    this.checkMandatoryFilter = (treeData, config) => {\n      let ParentItem = { ...treeData\n      };\n      let mandatoryList = [];\n      let treeDateList = [];\n      let isFilterEmpty = false;\n      let childArray = ParentItem.children1;\n      this.state.sampleReportFilterTypeData.sample.map(x => {\n        if (x['ismandatory']) {\n          mandatoryList.push(x);\n        }\n\n        if (childArray && childArray.length > 0 && childArray !== undefined) {\n          for (var i = 0; i < childArray.length; i++) {\n            let childData = childArray[i];\n\n            if (!childData.hasOwnProperty('children1')) {\n              if (config && config.fields[childData.properties.field]['label'] === x['label'] && x['ismandatory']) {\n                isFilterEmpty = true;\n                treeDateList.push(childData.properties.field);\n              }\n            } else {\n              if (childData) {\n                ParentItem = checkFilterIsEmptyQueryBuilder(childData);\n\n                if (!ParentItem) {\n                  return ParentItem;\n                }\n              }\n            }\n          }\n        }\n      });\n      let uniqueSet = new Set(treeDateList);\n      let uniqueArray = Array.from(uniqueSet);\n\n      if (uniqueArray.length !== mandatoryList.length) {\n        isFilterEmpty = false;\n      }\n\n      if (mandatoryList.length === 0) {\n        isFilterEmpty = true;\n      }\n\n      return isFilterEmpty;\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\",\n          primaryKeyValue: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n          fetchUrl: \"designtemplatemapping/getDesignTemplateMappingById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          inputData: { ...inputData,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          screenName: 'Template Mapping',\n          operation: \"delete\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\",\n              screenName: 'Template Mapping'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.deleteCombinationUnique = (index, eventKey) => {\n      if (eventKey === \"subsample\") {\n        let dataList = this.props.Login.subsampledataList || [];\n        let dataListCount = this.props.Login.subsampledataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            subsampledataListCount: dataListCount,\n            subsampledataList: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        let dataList = this.props.Login.dataList || [];\n        let dataListCount = this.props.Login.dataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.addCombinatonUnique = (designData, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCountSubSample || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCountSubSample: dataListCount,\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCount || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.openCombinationUniqueFieldConfiguration = controlCode => {\n      let openModal = true;\n      let operation = 'configureunique';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL && this.props.Login.masterData.realSampleValue.value !== SampleType.STABILITY) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.combinationUniqueConfigService(inputParam);\n    };\n\n    this.openFieldConfiguration = (controlCode, operation) => {\n      let openModal = true; //let operation = 'configure';\n\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL // && this.props.Login.masterData.realSampleValue.value !== SampleType.STABILITY\n      ) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.editFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n          nregtypecode: this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\n      //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      //  }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.editFieldConfigService(inputParam);\n    };\n\n    this.mappingFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let displayname = \"ConfigSendTOStore\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping\n          },\n          userinfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData\n        },\n        operation,\n        ncontrolcode,\n        screenName,\n        displayname\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.mappingFieldConfigService(inputParam);\n    };\n\n    this.auditFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          //nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.auditFieldConfigService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.loadEsign) {\n        if (operation === \"configurechecklistadd\") {\n          selectedRecord = {};\n          loadEsign = false;\n          operation = \"configurechecklist\";\n        } else if (operation === \"Approve\" || operation === \"delete\") {\n          loadEsign = false;\n          openModal = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? true : false;\n          selectedRecord = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.state.selectedRecord : {};\n        } else {\n          loadEsign = false;\n        }\n      } else if (operation === \"configurechecklistadd\") {\n        selectedRecord = {};\n        operation = \"configurechecklist\";\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation,\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          dataList: [],\n          dataListCount: [],\n          dataListSubSample: [],\n          dataListCountSubSample: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, screenName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (screenName === \"Sample\") {\n        if (fieldName == \"Quantity\") {\n          selectedRecord[\"Quantity\"] = comboData;\n        } else {\n          selectedRecord[\"Unit\"] = comboData;\n        }\n      } else if (screenName === \"SubSample\") {\n        if (fieldName == \"Quantity\") {\n          selectedRecord[\"SubQuantity\"] = comboData;\n        } else {\n          selectedRecord[\"SubUnit\"] = comboData;\n        }\n      } else if (screenName === \"Masters\") {\n        selectedRecord[\"nnewmodule\"] = comboData;\n        selectedRecord[\"nmodulecode\"] = [];\n      } else {\n        selectedRecord[fieldName] = comboData;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onConfigureComboChange = (comboData, formCode, item) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (item === \"Quantity\" || item === \"Unit\") {\n        const fieldName = item;\n        selectedRecord[fieldName] = comboData;\n      } else {\n        const fieldName = item.label;\n\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\n          selectedRecord = { ...selectedRecord,\n            [fieldName]: comboData\n          };\n        } else {\n          selectedRecord[formCode] = { ...selectedRecord[formCode],\n            [fieldName]: comboData\n          };\n          selectedRecord[244] = { ...selectedRecord[244],\n            [fieldName]: comboData\n          };\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sviewname\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validateCreateView(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          } //  selectedRecord[event.target.name] =  event.target.value.replace(/[^a-z]/g, '');\n\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = (templatedata, task) => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let templatemandatoryfields = [];\n      const masterexportfields = [];\n      let deleteValidation = [];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"ndynamicmastercode\",\n        \"displayname\": {\n          \"en-US\": \"DynamicMaster Code PK\",\n          \"ru-RU\": \"Код DynamicMaster ПК\",\n          \"tg-TG\": \"Рамзи DynamicMaster PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              if (componentRow.isExportField) {\n                masterexportfields.push(componentRow);\n              }\n\n              if (componentRow.mandatory) {\n                templatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n                });\n              }\n\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              });\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": componentRow.label,\n                  \"valuemember\": componentRow.valuemember,\n                  \"displaymember\": componentRow.displaymember,\n                  \"mastertablename\": componentRow.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"foreigntableformcode\": componentRow.table.item.nformcode,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  \"parentforeignPK\": componentRow.displaymember,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              }\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            if (component.isExportField) {\n              masterexportfields.push(component);\n            }\n\n            if (component.mandatory) {\n              templatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n              });\n            }\n\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              }\n            }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsonuidata\"\n            });\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"foreigntableformcode\": component.table.item.nformcode,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                \"parentforeignPK\": component.displaymember,\n                ...comboDataInputObject\n              });\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"viewvaluemember\": component.label,\n                \"valuemember\": component.valuemember,\n                \"displaymember\": component.displaymember,\n                \"mastertablename\": component.source,\n                \"needmasterdata\": true,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields,\n        masterexportfields,\n        templatemandatoryfields\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey: \"ndynamicmastercode\",\n        deleteValidation,\n        jsqlquerycolumns,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect\n      };\n    };\n\n    this.getGoodsInJsondata = (templatedata, task) => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let datefields = [];\n      let dateconstraints = [];\n      let uniquevalidation = [];\n      let combinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let templatefields = [];\n      let nonmandatoryExportFields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let deleteValidation = [];\n      let exportFields = [];\n      let templatemandatoryfields = [];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"ngoodsinsamplecode\",\n        \"displayname\": {\n          \"en-US\": \"GoodsIn Sample Code PK\",\n          \"ru-RU\": \"Товары в коде PK\",\n          \"tg-TG\": \"МолҳоДар Кодекси PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // if (componentRow.isExportField) {\n              //     exportFields.push(componentRow)\n              // }\n              if (componentRow.mandatory === true) {\n                exportFields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              } else {\n                nonmandatoryExportFields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              if (componentRow.mandatory) {\n                templatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\n\n                });\n              } // if(componentRow.mandatory === false){\n              //     nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // }\n\n\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              });\n              componentRow.unique && uniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && combinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": componentRow.label,\n                  \"valuemember\": componentRow.valuemember,\n                  \"displaymember\": componentRow.displaymember,\n                  \"mastertablename\": componentRow.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"foreigntableformcode\": componentRow.table.item.nformcode,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  \"parentforeignPK\": componentRow.displaymember,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              }\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                datefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              templatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            // if (component.isExportField) {\n            //     exportFields.push(component)\n            // }\n            if (component.mandatory === true) {\n              exportFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            } else {\n              nonmandatoryExportFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            }\n\n            if (component.mandatory) {\n              templatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            } // if(component.mandatory === false){\n            //     nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\n            // }\n\n\n            component.unique && uniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && combinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsonuidata\"\n            });\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            templatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"foreigntableformcode\": component.table.item.nformcode,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                \"parentforeignPK\": component.displaymember,\n                ...comboDataInputObject\n              });\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"viewvaluemember\": component.label,\n                \"valuemember\": component.valuemember,\n                \"displaymember\": component.displaymember,\n                \"mastertablename\": component.source,\n                \"needmasterdata\": true,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              datefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        datefields,\n        dateconstraints,\n        uniquevalidation,\n        editable,\n        templatefields,\n        combinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields,\n        exportFields,\n        nonmandatoryExportFields,\n        templatemandatoryfields\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey: \"ngoodsinsamplecode\",\n        deleteValidation,\n        jsqlquerycolumns,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect\n      };\n    };\n\n    this.getProtocolJsondata = (templatedata, task) => {\n      let maximumCount = parseInt(this.props.Login.settings && this.props.Login.settings['60']);\n      let gridItem = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ProtocolId\"] && this.props.Login.genericLabel[\"ProtocolId\"][\"jsondata\"][\"sdisplayname\"],\n        [designProperties.VALUE]: 'sprotocolid'\n      }];\n      let gridMoreItem = [];\n      let datefields = [];\n      let dateconstraints = [];\n      let uniquevalidation = [];\n      let combinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let templatefields = [];\n      let nonmandatoryExportFields = [];\n      let sampleAuditFields = [\"sprotocolid\", \"stransactionstatus\"];\n      let sampleAuditEditable = [\"sprotocolid\", \"stransactionstatus\"];\n      let sampleAuditMultilingualFields = [{\n        \"sprotocolid\": this.props.Login.genericLabel[\"ProtocolId\"] && this.props.Login.genericLabel[\"ProtocolId\"][\"jsondata\"][\"sdisplayname\"],\n        \"stransactionstatus\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]\n      }];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let deleteValidation = [];\n      let exportFields = [];\n      let templatemandatoryfields = [];\n      let searchfields = [\"sprotocolid\", \"stransdisplaystatus\", \"sactivestatus\"];\n      let listItem = [];\n      let displayFields = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ProtocolId\"] && this.props.Login.genericLabel[\"ProtocolId\"][\"jsondata\"][\"sdisplayname\"],\n        [designProperties.VALUE]: 'sprotocolid'\n      }];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"nprotocolcode\",\n        \"displayname\": {\n          \"en-US\": \"Protocol Code PK\",\n          \"ru-RU\": \"Protocol Code PK\",\n          \"tg-TG\": \"Protocol Code PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // if (componentRow.isExportField) {\n              //     exportFields.push(componentRow)\n              // }\n              if (componentRow.mandatory === true) {\n                exportFields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              } else {\n                nonmandatoryExportFields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              if (componentRow.mandatory) {\n                templatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              } // if(componentRow.mandatory === false){\n              //     nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // }\n\n\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              });\n              componentRow.unique && uniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && combinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                }\n              });\n\n              if (componentRow.name === undefined) {\n                searchfields.push(componentRow.label);\n              }\n\n              displayFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n\n              if (!(listItem.length >= maximumCount)) {\n                componentRow.mandatory && listItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? \"protocol\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": componentRow.label,\n                  \"valuemember\": componentRow.valuemember,\n                  \"displaymember\": componentRow.displaymember,\n                  \"mastertablename\": componentRow.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"foreigntableformcode\": componentRow.table.item.nformcode,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  \"parentforeignPK\": componentRow.displaymember,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              }\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                datefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              templatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            // if (component.isExportField) {\n            //     exportFields.push(component)\n            // }\n            if (component.mandatory === true) {\n              exportFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            } else {\n              nonmandatoryExportFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.mandatory) {\n              templatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            } // if(component.mandatory === false){\n            //     nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\n            // }\n\n\n            component.unique && uniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && combinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsonuidata\"\n            });\n\n            if (component.name === undefined) {\n              searchfields.push(component.label);\n            }\n\n            displayFields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n\n            if (!(listItem.length >= maximumCount)) {\n              component.mandatory && listItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            }\n\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            templatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? \"protocolversion\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"foreigntableformcode\": component.table.item.nformcode,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                \"parentforeignPK\": component.displaymember,\n                ...comboDataInputObject\n              });\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"viewvaluemember\": component.label,\n                \"valuemember\": component.valuemember,\n                \"displaymember\": component.displaymember,\n                \"mastertablename\": component.source,\n                \"needmasterdata\": true,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              datefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        datefields,\n        dateconstraints,\n        uniquevalidation,\n        editable,\n        templatefields,\n        combinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields,\n        exportFields,\n        nonmandatoryExportFields,\n        templatemandatoryfields,\n        searchfields,\n        listItem,\n        displayFields\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey: \"nprotocolcode\",\n        deleteValidation,\n        jsqlquerycolumns,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      let maximumCount = parseInt(this.props.Login.settings && this.props.Login.settings['60']); //let displayFields = [];\n      //ALPD-533\n\n      let displayFields = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        //{ ...ARNOMULTILINGUAL },\n        [designProperties.VALUE]: 'sarno'\n      } //Below commented code only for NFC project\n      // {\n      //     [designProperties.LABEL]: this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\n      //     [designProperties.VALUE]: 'ntestcount'  \n      //         }\n      ];\n      let listItem = []; // let gridItem = [];\n\n      let gridItem = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        //{ ...ARNOMULTILINGUAL }, \n        [designProperties.VALUE]: \"sarno\"\n      }];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\", \"sstoragestatus\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\", \"sstoragestatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let samplecombinationunique = [];\n      let subsamplecombinationunique = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let subSampleAuditFields = [];\n      let subSampleAuditEditable = [];\n      let subSampleAuditMultilingualFields = [];\n      let deleteValidation = [];\n      let sampletemplatemandatoryfields = [];\n      let subsampletemplatemandatoryfields = [];\n      const sampleExportFields = [];\n      const subSampleExportFields = [];\n      const sampletemplatemandatory = []; //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \n\n      sampleAuditFields = [\"sarno\"];\n      sampleAuditEditable = [\"sarno\"];\n      sampleAuditMultilingualFields = [{\n        \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...ARNOMULTILINGUAL } \n\n      }];\n      subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditMultilingualFields = [{\n        \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...ARNOMULTILINGUAL } \n\n      }, {\n        \"ssamplearno\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...SUBARNOMULTILINGUAL } \n\n      }]; //}\n      ////////////////////////////////////////////\n      // let sampleAuditFields = SAMPLEAUDITFIELDS;\n      // let sampleAuditEditable = SAMPLEAUDITEDITABLE\n      // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\n      // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\n      // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\n      // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\n\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }, {\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }]; //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              if (componentRow.isExportField) {\n                subSampleExportFields.push(componentRow.label);\n              }\n\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && subsamplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                }\n              });\n              subsamplesearchfields.push(componentRow.label);\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype,\n                [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n              });\n\n              if (componentRow.mandatory) {\n                subsampletemplatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.table.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                  \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n              }\n\n              subSampleAuditFields.push(componentRow.label);\n              subSampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.mandatory) {\n                subSampleAuditEditable.push(componentRow.label);\n              }\n\n              if (componentRow.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              });\n            });\n          } else {\n            if (component.templatemandatory) {\n              sampletemplatemandatory.push(component.label);\n            }\n\n            if (component.isExportField) {\n              subSampleExportFields.push(component.label);\n            }\n\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && subsamplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              }\n            });\n            subsamplesearchfields.push(component.label);\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype,\n              [designProperties.PRIMARYKEY]: component.valuemember,\n              [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n            });\n\n            if (component.mandatory) {\n              subsampletemplatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            }\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.table.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                \"stranstableforeignkeyname\": component.table.valuemember,\n                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                //\"nformcode\":component.table.item.nformcode,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            subSampleAuditFields.push(component.label);\n            subSampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.mandatory) {\n              subSampleAuditEditable.push(component.label);\n            }\n\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n            if (component.hasOwnProperty('children')) {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                // let combinedField = [];\n                component.children.map(componentRow => {\n                  if (componentRow.templatemandatory) {\n                    sampletemplatemandatory.push(componentRow.label);\n                  }\n\n                  if (componentRow.isExportField) {\n                    sampleExportFields.push(componentRow.label);\n                  } // combinedField.push(componentRow.label)\n\n\n                  jdynamiccolumns.push({\n                    columnname: componentRow.label,\n                    displayname: componentRow.displayname\n                  });\n\n                  if (componentRow.hasOwnProperty('child')) {\n                    componentRow.child.map(childData => {\n                      jnumericcolumns.push({\n                        \"columnname\": componentRow.label,\n                        \"displayname\": componentRow.displayname,\n                        \"foriegntablePK\": componentRow.label,\n                        // \"ismultilingual\": true,\n                        // \"conditionstring\": \" and nformcode in (140) \",\n                        \"tablecolumnname\": childData.tablecolumnname,\n                        \"foriegntablename\": \"dynamicmaster\"\n                      });\n                    });\n                  }\n\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.table.valuemember,\n                      \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                      \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                      //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      //\"nformcode\":componentRow.table.item.nformcode,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                    });\n                  }\n\n                  componentRow.unique && sampleuniquevalidation.push({\n                    [designProperties.LABEL]: componentRow.label\n                  });\n                  componentRow.unique && samplecombinationunique.push({\n                    [componentRow.label]: {\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    }\n                  });\n\n                  if (componentRow.name === undefined || componentRow.name !== 'manualsampleid') {\n                    samplesearchfields.push(componentRow.label);\n                    sampletemplatefields.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype,\n                      [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                      [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode,\n                      [designProperties.TABLENAME]: componentRow.table && componentRow.table.item && componentRow.table.item.stablename,\n                      [designProperties.COLUMNNAME]: componentRow.column && componentRow.column.item && componentRow.column.item.columnname,\n                      [designProperties.component]: componentRow.isMultiLingual ? \"isMultiLingual\" : undefined,\n                      [designProperties.RECORDTYPE]: \"dynamic\"\n                    });\n\n                    if (componentRow.mandatory) {\n                      sampletemplatemandatoryfields.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label\n                      });\n                    }\n\n                    displayFields.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype\n                    });\n\n                    if (!(listItem.length >= maximumCount)) {\n                      componentRow.mandatory && listItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label,\n                        [designProperties.LISTITEM]: componentRow.inputtype\n                      });\n                    }\n\n                    if (componentRow.mandatory || componentRow.templatemandatory) {\n                      gridItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label,\n                        [designProperties.LISTITEM]: componentRow.inputtype\n                      });\n                      sampleAuditEditable.push(componentRow.label);\n                    } else {\n                      gridMoreItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label,\n                        [designProperties.LISTITEM]: componentRow.inputtype\n                      });\n                    }\n\n                    if (componentRow.templatemandatory) {\n                      editable.push({\n                        label: componentRow.label,\n                        editableuntill: []\n                      });\n                    } else {\n                      if (componentRow.readonly) editable.push({\n                        label: componentRow.label,\n                        editableuntill: []\n                      });else editable.push({\n                        label: componentRow.label,\n                        editableuntill: [transactionStatus.PREREGISTER]\n                      });\n                    }\n                  }\n\n                  sampleAuditFields.push(componentRow.label);\n                  sampleAuditMultilingualFields.push({\n                    [componentRow.label]: componentRow.displayname\n                  });\n\n                  if (componentRow.inputtype === 'date') {\n                    sampledatefields.push({\n                      [designProperties.VALUE]: componentRow.label,\n                      dateonly: componentRow.dateonly || false\n                    });\n                    sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                  }\n\n                  return null;\n                }); // let fieldSet = combinedField.join(\"&\")\n                // displayFields.push(fieldSet);\n                // componentRow.templatemandatory && listItem.push(fieldSet)\n                // gridMoreItem.push(fieldSet);\n              }\n            } else {\n              if (component.templatemandatory) {\n                sampletemplatemandatory.push(component.label);\n              }\n\n              if (component.isExportField) {\n                sampleExportFields.push(component.label);\n              }\n\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                //console.log(\"componentRow main:\", component);\n                jdynamiccolumns.push({\n                  columnname: component.label,\n                  displayname: component.displayname\n                });\n\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.table.valuemember,\n                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                    \"stranstableforeignkeyname\": component.table.valuemember,\n                    //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n\n                if (component.hasOwnProperty('child')) {\n                  component.child.map(childData => {\n                    jnumericcolumns.push({\n                      \"columnname\": component.label,\n                      \"displayname\": component.displayname,\n                      \"foriegntablePK\": component.label,\n                      // \"ismultilingual\": true,\n                      // \"conditionstring\": \" and nformcode in (140) \",\n                      \"tablecolumnname\": childData.tablecolumnname,\n                      \"foriegntablename\": \"dynamicmaster\"\n                    });\n                  });\n                }\n\n                component.unique && sampleuniquevalidation.push({\n                  [designProperties.LABEL]: component.label\n                });\n                component.unique && samplecombinationunique.push({\n                  [component.label]: {\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype\n                  }\n                });\n\n                if (component.name === undefined || component.name !== 'manualsampleid') {\n                  samplesearchfields.push(component.label);\n                  sampletemplatefields.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype,\n                    [designProperties.PRIMARYKEY]: component.valuemember,\n                    [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode,\n                    [designProperties.TABLENAME]: component.table && component.table.item && component.table.item.stablename,\n                    [designProperties.COLUMNNAME]: component.column && component.column.item && component.column.item.columnname,\n                    [designProperties.MULTILINGUAL]: component.isMultiLingual ? \"isMultiLingual\" : undefined,\n                    [designProperties.RECORDTYPE]: \"dynamic\"\n                  });\n\n                  if (component.mandatory) {\n                    sampletemplatemandatoryfields.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label\n                    });\n                  }\n\n                  displayFields.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype\n                  });\n\n                  if (component.mandatory) {\n                    gridItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype\n                    });\n\n                    if (!(listItem.length >= maximumCount)) {\n                      listItem.push({\n                        [designProperties.LABEL]: component.displayname,\n                        [designProperties.VALUE]: component.label,\n                        [designProperties.LISTITEM]: component.inputtype,\n                        mandatory: true\n                      });\n                    }\n\n                    sampleAuditEditable.push(component.label);\n                  } else {\n                    gridMoreItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype\n                    });\n                  }\n\n                  if (component.templatemandatory) {\n                    editable.push({\n                      label: component.label,\n                      editableuntill: []\n                    });\n                  } else {\n                    // editable.push({ label: component.label, editableuntill: [17] })\n                    if (component.readonly) editable.push({\n                      label: component.label,\n                      editableuntill: []\n                    });else editable.push({\n                      label: component.label,\n                      editableuntill: [transactionStatus.PREREGISTER]\n                    });\n                  }\n                }\n\n                sampleAuditFields.push(component.label);\n                sampleAuditMultilingualFields.push({\n                  [component.label]: component.displayname\n                });\n\n                if (component.inputtype === 'date') {\n                  sampledatefields.push({\n                    [designProperties.VALUE]: component.label,\n                    dateonly: component.dateonly || false\n                  });\n                  sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                }\n\n                return null;\n              }\n            }\n          }\n        });\n      }));\n      displayFields.push({\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\n        [designProperties.VALUE]: 'dregdate'\n      });\n      const testListFields = { ...this.props.Login.testListFields\n      };\n      testListFields.testlistitem.push({\n        \"1\": this.props.Login.genericLabel[\"AnalyserName\"] && this.props.Login.genericLabel[\"AnalyserName\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"AnalyserName\"\n      }); //Below commented code only for NFC\n      //     if(!(listItem.length >= maximumCount)){\n      //     listItem.push({\n      //         [designProperties.LABEL]: this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\n      //         [designProperties.VALUE]: 'ntestcount'  \n      //     })\n      // }\n\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        samplecombinationunique,\n        testListFields,\n        deleteValidation,\n        samplefilteritem: []\n      };\n      sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\n      sampleAuditEditable.push(\"stransdisplaystatus\");\n      subSampleAuditFields.push(\"stransdisplaystatus\");\n      subSampleAuditEditable.push(\"stransdisplaystatus\");\n      sampleAuditMultilingualFields.push({\n        \"dregdate\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"]\n      }, {\n        \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]\n      });\n      subSampleAuditMultilingualFields.push({\n        \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"] //{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } \n\n      });\n      let SAMPLETEMPLATEFIELDS = [{\n        \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sarno\",\n        \"3\": \"textinput\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"Specification\"] && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sspecname\",\n        \"3\": \"textinput\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"dregdate\",\n        \"3\": \"date\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"stransdisplaystatus\",\n        \"3\": \"textinput\"\n      } // ,\n      // {\n      //     \"1\": this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\n      //     \"2\": \"ntestcount\",\n      //     \"3\":\"numeric\"\n      // }\n      ];\n      let SUBSAMPLETEMPLATEFIELDS = [{\n        \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sarno\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"ssamplearno\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"stransdisplaystatus\"\n      }];\n      let RELEASESAMPLETEMPLATEFIELDS = [{\n        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ReleaseNo.\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sreportno\"\n      }];\n      let jsondata = {\n        subsamplecombinationunique,\n        samplecombinationunique,\n        sampletemplatefields: [...RELEASESAMPLETEMPLATEFIELDS, ...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\n        sampletemplatemandatoryfields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatemandatoryfields],\n        subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],\n        //: subsamplesearchfields,\n        subsampletemplatemandatoryfields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatemandatoryfields],\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique,\n          sampleExportFields,\n          subSampleExportFields\n        },\n        [formCode.STUDYALLOCATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique,\n          sampleExportFields,\n          subSampleExportFields\n        },\n        // ALPD-4914 Added codes for scheduler configuration screen\n        [formCode.SCHEDULERCONFIGURATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique,\n          sampleExportFields,\n          subSampleExportFields\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj,\n          samplegriditem: [...obj.samplegriditem, {\n            \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Section\"\n          }],\n          samplesearchfields: [...obj.samplesearchfields, \"Section\"],\n          subsamplesearchfields: [...obj.subsamplesearchfields, \"ssectionname\"],\n          testgriditem: [{\n            \"1\": this.props.Login.genericLabel[\"TestSynonym\"] && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"stestsynonym\"\n          }, {\n            \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }, {\n            \"1\": this.props.Login.genericLabel[\"Technique\"] && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Technique\"\n          }, {\n            \"1\": this.props.Login.genericLabel[\"Users\"] && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Users\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentCategory\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentName\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentName\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentId\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentId\"\n          }],\n          samplelistitem: [...obj.samplelistitem, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Section\"\n          } //Below commented code only for NFC\n          // ,\n          // {\n          //     [designProperties.LABEL]: this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\n          //     [designProperties.VALUE]: 'ntestcount'  \n          // }\n          ],\n          subsamplelistitem: [...obj.subsamplelistitem, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }],\n          testdisplayfields: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"stestsynonym\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Technique\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Users\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentCategory\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentName\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentName\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentId\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentId\"\n          }],\n          testgridmoreitem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserStartDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserStartDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserEndDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserEndDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserDuration\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserDuration\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentStartDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentStartDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentEndDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentEndDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentDuration\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentDuration\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Comments\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Comments\"\n          }]\n        },\n        [formCode.MYJOBS]: { ...obj\n        },\n        [formCode.WORKLIST]: { ...obj\n        },\n        [formCode.BATCHCREATION]: {\n          samplegriditem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"sarno\"\n          }, ...obj.samplegriditem],\n          subsamplelistitem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem],\n          ...obj\n        },\n        [formCode.TESTWISEMYJOBS]: { ...obj\n        },\n        [formCode.RELEASE]: { ...obj,\n          subsamplelistitem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem],\n          sampledisplayfields: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ReleaseNo.\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"sreportno\"\n          }, ...obj.sampledisplayfields],\n          samplegriditem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ReleaseNo.\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"sreportno\"\n          }, ...obj.samplegriditem] //Below commented code only for NFC\n          //     ,\n          // {\n          //     \"1\": this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\n          //     \"2\": \"ntestcount\"\n          // }\n\n        },\n        sampleAuditEditable,\n        sampleAuditFields,\n        sampleAuditMultilingualFields,\n        subSampleAuditEditable,\n        subSampleAuditFields,\n        subSampleAuditMultilingualFields,\n        deleteValidation,\n        sampletemplatemandatory\n      };\n      return jsondata;\n    };\n\n    this.getStabilityJsondata = templatedata => {\n      let maximumCount = parseInt(this.props.Login.settings && this.props.Login.settings['60']);\n      let displayFields = [];\n      let listItem = [];\n      let gridItem = [];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let samplecombinationunique = [];\n      let subsamplecombinationunique = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let subSampleAuditFields = [];\n      let subSampleAuditEditable = [];\n      let subSampleAuditMultilingualFields = [];\n      let deleteValidation = [];\n      let sampletemplatemandatoryfields = [];\n      let subsampletemplatemandatoryfields = [];\n      const sampleExportFields = [];\n      const subSampleExportFields = [];\n      const sampletemplatemandatory = [];\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              if (componentRow.isExportField) {\n                subSampleExportFields.push(componentRow.label);\n              }\n\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && subsamplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              subsamplesearchfields.push(componentRow.label);\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n              });\n\n              if (componentRow.mandatory) {\n                subsampletemplatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.table.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistrationsample\",\n                  \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n              }\n\n              subSampleAuditFields.push(componentRow.label);\n              subSampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.mandatory) {\n                subSampleAuditEditable.push(componentRow.label);\n              }\n\n              if (componentRow.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              });\n            });\n          } else {\n            if (component.templatemandatory) {\n              sampletemplatemandatory.push(component.label);\n            }\n\n            if (component.isExportField) {\n              subSampleExportFields.push(component.label);\n            }\n\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && subsamplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            subsamplesearchfields.push(component.label);\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.PRIMARYKEY]: component.valuemember,\n              [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n            });\n\n            if (component.mandatory) {\n              subsampletemplatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.table.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistrationsample\",\n                \"stranstableforeignkeyname\": component.table.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            subSampleAuditFields.push(component.label);\n            subSampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.mandatory) {\n              subSampleAuditEditable.push(component.label);\n            }\n\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n            if (component.hasOwnProperty('children')) {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                component.children.map(componentRow => {\n                  if (componentRow.templatemandatory) {\n                    sampletemplatemandatory.push(componentRow.label);\n                  }\n\n                  if (componentRow.isExportField) {\n                    sampleExportFields.push(componentRow.label);\n                  }\n\n                  jdynamiccolumns.push({\n                    columnname: componentRow.label,\n                    displayname: componentRow.displayname\n                  });\n\n                  if (componentRow.hasOwnProperty('child')) {\n                    componentRow.child.map(childData => {\n                      jnumericcolumns.push({\n                        \"columnname\": componentRow.label,\n                        \"displayname\": componentRow.displayname,\n                        \"foriegntablePK\": componentRow.label,\n                        \"tablecolumnname\": childData.tablecolumnname,\n                        \"foriegntablename\": \"dynamicmaster\"\n                      });\n                    });\n                  }\n\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.table.valuemember,\n                      \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistration\",\n                      \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                      //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      //\"nformcode\":componentRow.table.item.nformcode,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                    });\n                  }\n\n                  componentRow.unique && sampleuniquevalidation.push({\n                    [designProperties.LABEL]: componentRow.label\n                  });\n                  componentRow.unique && samplecombinationunique.push({\n                    [componentRow.label]: {\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    }\n                  });\n\n                  if (componentRow.name === undefined || componentRow.name !== 'manualsampleid') {\n                    samplesearchfields.push(componentRow.label);\n                    sampletemplatefields.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype,\n                      [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                      [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode,\n                      [designProperties.TABLENAME]: componentRow.table && componentRow.table.item && componentRow.table.item.stablename,\n                      [designProperties.COLUMNNAME]: componentRow.column && componentRow.column.item && componentRow.column.item.columnname,\n                      [designProperties.component]: componentRow.isMultiLingual ? \"isMultiLingual\" : undefined,\n                      [designProperties.RECORDTYPE]: \"dynamic\"\n                    });\n\n                    if (componentRow.mandatory) {\n                      sampletemplatemandatoryfields.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label\n                      });\n                    }\n\n                    displayFields.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype\n                    });\n\n                    if (!(listItem.length >= maximumCount)) {\n                      componentRow.mandatory && listItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label,\n                        [designProperties.LISTITEM]: componentRow.inputtype\n                      });\n                    }\n\n                    if (componentRow.mandatory || componentRow.templatemandatory) {\n                      gridItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label\n                      });\n                      sampleAuditEditable.push(componentRow.label);\n                    } else {\n                      gridMoreItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label,\n                        [designProperties.LISTITEM]: componentRow.inputtype\n                      });\n                    }\n\n                    if (componentRow.templatemandatory) {\n                      editable.push({\n                        label: componentRow.label,\n                        editableuntill: []\n                      });\n                    } else {\n                      if (componentRow.readonly) editable.push({\n                        label: componentRow.label,\n                        editableuntill: []\n                      });else editable.push({\n                        label: componentRow.label,\n                        editableuntill: [transactionStatus.PREREGISTER]\n                      });\n                    }\n                  }\n\n                  sampleAuditFields.push(componentRow.label);\n                  sampleAuditMultilingualFields.push({\n                    [componentRow.label]: componentRow.displayname\n                  });\n\n                  if (componentRow.inputtype === 'date') {\n                    sampledatefields.push({\n                      [designProperties.VALUE]: componentRow.label,\n                      dateonly: componentRow.dateonly || false\n                    });\n                    sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                  }\n\n                  return null;\n                });\n              }\n            } else {\n              if (component.templatemandatory) {\n                sampletemplatemandatory.push(component.label);\n              }\n\n              if (component.isExportField) {\n                sampleExportFields.push(component.label);\n              }\n\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                //console.log(\"componentRow main:\", component);\n                jdynamiccolumns.push({\n                  columnname: component.label,\n                  displayname: component.displayname\n                });\n\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.table.valuemember,\n                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistration\",\n                    \"stranstableforeignkeyname\": component.table.valuemember,\n                    //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n\n                if (component.hasOwnProperty('child')) {\n                  component.child.map(childData => {\n                    jnumericcolumns.push({\n                      \"columnname\": component.label,\n                      \"displayname\": component.displayname,\n                      \"foriegntablePK\": component.label,\n                      // \"ismultilingual\": true,\n                      // \"conditionstring\": \" and nformcode in (140) \",\n                      \"tablecolumnname\": childData.tablecolumnname,\n                      \"foriegntablename\": \"dynamicmaster\"\n                    });\n                  });\n                }\n\n                component.unique && sampleuniquevalidation.push({\n                  [designProperties.LABEL]: component.label\n                });\n                component.unique && samplecombinationunique.push({\n                  [component.label]: {\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label\n                  }\n                });\n\n                if (component.name === undefined || component.name !== 'manualsampleid') {\n                  samplesearchfields.push(component.label);\n                  sampletemplatefields.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype,\n                    [designProperties.PRIMARYKEY]: component.valuemember,\n                    [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode,\n                    [designProperties.TABLENAME]: component.table && component.table.item && component.table.item.stablename,\n                    [designProperties.COLUMNNAME]: component.column && component.column.item && component.column.item.columnname,\n                    [designProperties.MULTILINGUAL]: component.isMultiLingual ? \"isMultiLingual\" : undefined,\n                    [designProperties.RECORDTYPE]: \"dynamic\"\n                  });\n\n                  if (component.mandatory) {\n                    sampletemplatemandatoryfields.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label\n                    });\n                  }\n\n                  displayFields.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype\n                  });\n\n                  if (component.mandatory) {\n                    gridItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype\n                    });\n\n                    if (!(listItem.length >= maximumCount)) {\n                      listItem.push({\n                        [designProperties.LABEL]: component.displayname,\n                        [designProperties.VALUE]: component.label,\n                        [designProperties.LISTITEM]: component.inputtype,\n                        mandatory: true\n                      });\n                    }\n\n                    sampleAuditEditable.push(component.label);\n                  } else {\n                    gridMoreItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype\n                    });\n                  }\n\n                  if (component.templatemandatory) {\n                    editable.push({\n                      label: component.label,\n                      editableuntill: []\n                    });\n                  } else {\n                    // editable.push({ label: component.label, editableuntill: [17] })\n                    if (component.readonly) editable.push({\n                      label: component.label,\n                      editableuntill: []\n                    });else editable.push({\n                      label: component.label,\n                      editableuntill: [transactionStatus.PREREGISTER]\n                    });\n                  }\n                }\n\n                sampleAuditFields.push(component.label);\n                sampleAuditMultilingualFields.push({\n                  [component.label]: component.displayname\n                });\n\n                if (component.inputtype === 'date') {\n                  sampledatefields.push({\n                    [designProperties.VALUE]: component.label,\n                    dateonly: component.dateonly || false\n                  });\n                  sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                }\n\n                return null;\n              }\n            }\n          }\n        });\n      }));\n      const testListFields = { ...this.props.Login.testListFields\n      };\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        samplecombinationunique,\n        testListFields,\n        deleteValidation,\n        samplefilteritem: []\n      };\n      let jsondata = {\n        subsamplecombinationunique,\n        samplecombinationunique,\n        sampletemplatefields: [...sampletemplatefields],\n        sampletemplatemandatoryfields: [...sampletemplatemandatoryfields],\n        subsampletemplatefields: [...subsampletemplatefields],\n        subsampletemplatemandatoryfields: [...subsampletemplatemandatoryfields],\n        [formCode.STUDYALLOCATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique,\n          sampleExportFields,\n          subSampleExportFields\n        },\n        sampleAuditEditable,\n        sampleAuditFields,\n        sampleAuditMultilingualFields,\n        subSampleAuditEditable,\n        subSampleAuditFields,\n        subSampleAuditMultilingualFields,\n        deleteValidation,\n        sampletemplatemandatory\n      };\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n\n      if (operation === 'configureaudit') {\n        designData = this.props.Login.auditFieldDesignData;\n        dataResult = this.props.Login.auditFieldDataResult;\n      }\n\n      let tableName = \"registration\";\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        tableName = \"dynamicmaster\";\n      }\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n        tableName = \"goodsinsample\";\n      } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\n        tableName = \"protocol\";\n      }\n\n      if (formCode === undefined) {\n        dataResult[dataIndex][field] = event.target.checked;\n\n        if (event.target.checked) {\n          designData[field].splice(dataIndex, 0, dataItem.realData);\n        } else {\n          designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      } else {\n        //dataResult[formCode][dataIndex][field] = event.target.checked;\n        if (event.target.checked) {\n          let maximumCount = parseInt(this.props.Login.settings && this.props.Login.settings['60']);\n\n          if (field === 'samplelistitem' && designData[formCode][field].length >= maximumCount) {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n            }));\n          } else {\n            if (field === 'sampledisplayfields') {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n              if (formCode == 43) dataResult[244][dataIndex][field] = event.target.checked;\n              designData[244]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n              designData[244][field].splice(dataIndex, 0, dataItem.realData);\n            } else if (field === 'sampleauditfields') {\n              dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'sampleauditeditfields') {\n              dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\n              dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else if (field === 'subsampleauditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'subsampleauditeditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else if (field === 'samplefilteritem') {\n              if (dataResult[formCode][dataIndex]['sampledisplayfields']) {\n                let maximumCount = parseInt(this.props.Login.settings && this.props.Login.settings['55']);\n\n                if (designData[formCode]['samplefilteritem'].length >= maximumCount) {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: \"IDS_MAXIMUMSELECTIONFORTHISFILTERITEM\"\n                  }) + maximumCount);\n                } else {\n                  let index = designData['sampletemplatefields'].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]);\n                  dataResult[formCode][dataIndex][field] = event.target.checked;\n                  designData[formCode]['samplefilteritem'].push(designData['sampletemplatefields'][index]);\n                  designData[244]['samplefilteritem'].push(designData['sampletemplatefields'][index]);\n                }\n              } else {\n                toast.warn(this.props.intl.formatMessage({\n                  id: \"IDS_ENABLEDISPLAYFIELDSFORTHISFIELD\"\n                }));\n              }\n            } else {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n              if (formCode == 43) dataResult[244][dataIndex][field] = event.target.checked;\n              designData[244][field].splice(dataIndex, 0, dataItem.realData);\n            }\n          }\n        } else {\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n            const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]); //ALPD-4941--Vignesh R(09-12-2024)---Sample configuration screen Audit\n\n            if (formCode == 43) dataResult[244][dataIndex][field] = event.target.checked;\n            designData[244][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n            const index1 = designData[244]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode]['samplesearchfields'].splice(index, 1);\n              if (formCode === 43) designData[244]['samplesearchfields'].splice(index1, 1);\n            }\n          } else if (field === 'sampleauditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode][tableName][field].splice(index, 1);\n            }\n\n            const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index1 !== -1) {\n              designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\n            }\n\n            const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'sampleauditeditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index4 !== -1) {\n              designData[formCode][tableName][field].splice(index4, 1);\n            }\n          } else if (field === 'subsampleauditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n\n            const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index2 !== -1) {\n              designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\n            }\n\n            const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'subsampleauditeditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n          } else {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1);\n            if (formCode == 43) dataResult[244][dataIndex][field] = event.target.checked;\n            designData[244][field].splice(designData[244][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1);\n          }\n        }\n      }\n\n      let data = {\n        designData,\n        dataResult\n      };\n\n      if (operation === 'configureaudit') {\n        data = {\n          auditFieldDesignData: designData,\n          auditFieldDataResult: dataResult\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: { ...data\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onApproveSaveClick = () => {\n      this.onApproveClick();\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\n      //console.log(\"data:\", this.props.Login.editFieldDesignData)\n      let inputData = [];\n      let operation = this.props.Login.operation; //const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n      //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n      const needsubsample = this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n      if (operation === 'Approve') {\n        this.onApproveClick();\n      } else if (operation === 'configureunique') {\n        this.configureunique();\n      } else if (operation === 'configurereleasesamplefilter') {\n        this.configurereportfiltertype();\n      } else {\n        if (operation === 'configure' || operation === 'configuresubsample') {\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: this.props.Login.designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\n          let designData = this.props.Login.editFieldDesignData;\n          let formCodeArray = Object.keys(this.state.selectedRecord); //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n          if (this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\n            const data = this.state.selectedRecord;\n            let editableData = designData['editable'];\n            Object.keys(data).map(label => {\n              const editableuntil = [];\n              data[label].map(statusItem => editableuntil.push(statusItem.value));\n              const index = editableData.findIndex(item => item.label === label);\n\n              if (index === -1) {\n                editableData.push({\n                  \"label\": label,\n                  \"editableuntill\": editableuntil\n                });\n              } else {\n                editableData[index] = {\n                  \"label\": label,\n                  \"editableuntill\": editableuntil\n                };\n              }\n            });\n          } else {\n            formCodeArray.forEach(formCode => {\n              const data = this.state.selectedRecord[formCode];\n              let editableData = designData[formCode]['sampleeditable'];\n              ;\n\n              if (operation === 'configuresubsampleedit') {\n                editableData = designData[formCode]['subsampleeditable'];\n                ;\n              }\n\n              Object.keys(data).map(label => {\n                const editableuntil = [];\n                data[label].map(statusItem => editableuntil.push(statusItem.value));\n                const index = editableData.findIndex(item => item.label === label);\n\n                if (index === -1) {\n                  editableData.push({\n                    \"label\": label,\n                    \"editableuntill\": editableuntil\n                  });\n                } else {\n                  editableData[index] = {\n                    \"label\": label,\n                    \"editableuntill\": editableuntil\n                  };\n                } //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\n\n              });\n            });\n          }\n\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } // else if (operation === 'configureunique') {\n        //     let designData = this.props.Login.designData;\n        //     //  let formCodeArray = Object.keys(this.state.selectedRecord);\n        //     const dataList = []\n        //     const dataListsubsample = []\n        //     this.props.Login.dataList.map(x => {\n        //         if (Object.keys(x).length !== 0) {\n        //             dataList.push(x);\n        //         }\n        //     })\n        //     if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        //         designData['mastercombinationunique'] = dataList\n        //     }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n        //         designData['combinationunique'] = dataList\n        //     } \n        //     else {\n        //         designData['samplecombinationunique'] = dataList\n        //         designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\n        //         this.props.Login.dataListSubSample.map(x => {\n        //             if (Object.keys(x).length !== 0) {\n        //                 dataListsubsample.push(x);\n        //             }\n        //         })\n        //         designData['subsamplecombinationunique'] = dataListsubsample\n        //         designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\n        //     }\n        //     inputData = {\n        //         designtemplatemapping: {\n        //             ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n        //             jsondataobj: designData\n        //         },\n        //         userinfo: this.props.Login.userInfo\n        //     }\n        //     operation = 'configure';\n        // }\n        else if (operation === 'configureexportfields') {\n          let designData = this.props.Login.designData;\n\n          if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n            const dataList = [];\n            this.props.Login.sampleexportdataResult.master.map(x => {\n              if (x.sampleexportfields === true) {\n                dataList.push(x.realData[designProperties.VALUE]);\n              }\n            });\n            designData['masterexportfields'] = dataList;\n          } else if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n            this.props.Login.sampleexportdataResult.master.map(x => {\n              if (x.sampleexportfields === true) {\n                let checkArray = designData['exportFields'].map(item => item['2']);\n\n                if (checkArray.includes(x.realData['2']) === false) {\n                  designData['exportFields'].push(x.realData);\n                }\n              } else {\n                let index = designData['exportFields'].findIndex(y => y['2'] === x.realData['2']);\n\n                if (index !== -1) {\n                  designData['exportFields'].splice(index, 1);\n                }\n              }\n            });\n          } else {\n            const dataList = [];\n            this.props.Login.sampleexportdataResult.sample.map(x => {\n              if (x.sampleexportfields === true) {\n                dataList.push(x.realData[designProperties.VALUE]);\n              }\n            });\n\n            if (this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY) {\n              designData[formCode.STUDYALLOCATION]['sampleExportFields'] = dataList;\n              const dataListSub = [];\n              this.props.Login.sampleexportdataResult.subsample.map(x => {\n                if (x.sampleexportfields === true) {\n                  dataListSub.push(x.realData[designProperties.VALUE]);\n                }\n              });\n              designData[formCode.STUDYALLOCATION]['subSampleExportFields'] = dataListSub;\n            } else {\n              designData[formCode.SAMPLEREGISTRATION]['sampleExportFields'] = dataList;\n            }\n\n            if (this.props.Login.masterData && this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample) {\n              const dataListSub = [];\n              this.props.Login.sampleexportdataResult.subsample.map(x => {\n                if (x.sampleexportfields === true) {\n                  dataListSub.push(x.realData[designProperties.VALUE]);\n                }\n              });\n              designData[formCode.SAMPLEREGISTRATION]['subSampleExportFields'] = dataListSub;\n            }\n          }\n\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } // else if (operation === 'configurereportfiltertype') {\n        //     let designData = this.props.Login.designData;\n        //         const dataList = []\n        //         this.state.sampleReportFilterTypeData.sample.map(x => {\n        //             if (x.samplefiltertypefields === true) {\n        //                 dataList.push(x.realData);\n        //             }\n        //         })\n        //         designData[formCode.SAMPLEREGISTRATION]['samplefiltertypefields'] = dataList;\n        //         designData[formCode.RELEASE]['samplefiltertypefields'] = dataList;\n        //         let isFilterEmpty = checkFilterIsEmptyQueryBuilder(this.props.Login.filterQueryTreeStr);\n        //         if(isFilterEmpty){\n        //         designData[formCode.RELEASE]['defaultstructure']={\n        //             nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value,\n        //             nsampletypecode:this.props.Login.masterData.realSampleValue.value,\n        //             nregtypecode:this.props.Login.masterData.realRegTypeValue.value,\n        //             awesomeTree:this.props.Login.awesomeTree,\n        //             awesomeConfig:this.props.Login.awesomeConfig}\n        //     inputData = {\n        //         designtemplatemapping: {\n        //             ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n        //             jsondataobj: designData\n        //         },\n        //         userinfo: this.props.Login.userInfo\n        //     }\n        //     operation = 'configure';\n        // } else {\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\n        //   }\n        // }\n        else if (operation === 'configurechecklistadd') {\n          let designData = this.props.Login.designData;\n\n          if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n            designData['checklist'] = {\n              \"nchecklistversioncode\": this.state.selectedRecord.nchecklistversioncode.value\n            };\n          }\n\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureaudit') {\n          //console.log(\"auditFieldDesignData:\", this.props.Login);\n          inputData = {\n            //dynamicaudit: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            auditdata: this.props.Login.auditData,\n            //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \n            //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \n            //nformcode:43, stablename:'registration',\n            // },\n            userinfo: this.props.Login.userInfo\n          }; //operation = 'configure';\n        } else if (operation === 'configuresendtostore') {\n          // const sampleQty = new Map();\n          //  const sampleUnit = new Map();\n          // let inputData=[];\n          //  let subsamplefields = [];\n          //  let senttostoragefields=[];\n          let samqty = {\n            \"1\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.label : \"\"\n          };\n          let samunit = {\n            \"1\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.label : \"\"\n          };\n          let subsamqty = {\n            \"1\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.label : \"\"\n          };\n          let subsamunit = {\n            \"1\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.label : \"\"\n          };\n          let sample = {\n            \"nsampleqty\": samqty,\n            \"nunitcode\": samunit\n          };\n          let subsample = {\n            \"nsampleqty\": subsamqty,\n            \"nunitcode\": subsamunit\n          };\n          let str = {\n            \"samplefields\": sample,\n            \"subsamplefields\": subsample\n          };\n          let senttostoragefields = {\n            \"senttostoragefields\": str\n          }; // console.log(JSON.stringify(senttostoragefields));\n\n          inputData = {\n            \"userinfo\": this.props.Login.userInfo,\n            \"senttostoragefields\": senttostoragefields,\n            \"updatesendtostore\": senttostoragefields.senttostoragefields,\n            \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          };\n        } else if (operation === 'approve') {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\"); // console.log(\"deleteValidation 2:\", deleteValidation);\n\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"userinfo\"] = this.props.Login.userInfo;\n          inputData[\"designtemplatemapping\"] = {\n            \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n          };\n          inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n          inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\n        } else {\n          // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey\n          } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? this.getGoodsInJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? this.getProtocolJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n          : {};\n          let auditData = {};\n          let dataObject = {};\n\n          if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL //&&\n          //this.props.Login.masterData.realSampleValue.value !== SampleType.STABILITY\n          ) {\n            //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n            dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata); // console.log(\"json:\",dataObject);\n\n            auditData = {\n              \"registration\": {\n                editmandatoryfields: dataObject[\"sampleAuditEditable\"],\n                auditcapturefields: dataObject[\"sampleAuditFields\"],\n                multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\n              },\n              //ALPD-4941--Vignesh R(09-12-2024)---Sample configuration screen Audit\n              \"schedulersampledetail\": {\n                editmandatoryfields: dataObject[\"sampleAuditEditable\"],\n                auditcapturefields: dataObject[\"sampleAuditFields\"],\n                multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\n              }\n            };\n\n            if (needsubsample) {\n              auditData = { ...auditData,\n                registrationsample: {\n                  editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\n                  auditcapturefields: dataObject[\"subSampleAuditFields\"],\n                  multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\n                },\n                //ALPD-4941--Vignesh R(09-12-2024)---Sample configuration screen Audit\n                schedulersubsampledetail: {\n                  editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\n                  auditcapturefields: dataObject[\"subSampleAuditFields\"],\n                  multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\n                }\n              };\n              delete dataObject[\"subSampleAuditEditable\"];\n              delete dataObject[\"subSampleAuditFields\"];\n              delete dataObject[\"subSampleAuditMultilingualFields\"];\n            }\n\n            delete dataObject[\"sampleAuditEditable\"];\n            delete dataObject[\"sampleAuditFields\"];\n            delete dataObject[\"sampleAuditMultilingualFields\"];\n          } else {\n            if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n              auditData = {\n                \"dynamicmaster\": {\n                  editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n                  auditcapturefields: jsondata[\"sampleAuditFields\"],\n                  multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n                }\n              };\n            } else if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n              auditData = {\n                \"goodsinsample\": {\n                  editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n                  auditcapturefields: jsondata[\"sampleAuditFields\"],\n                  multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n                }\n              }; //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \n            } else if (this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\n              auditData = {\n                \"protocol\": {\n                  editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n                  auditcapturefields: jsondata[\"sampleAuditFields\"],\n                  multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n                }\n              };\n            } // else if(this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY){\n            //     dataObject=this.getStabilityJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)  \n            //     auditData = {\n            //         \"stbregistration\": {\n            //             editmandatoryfields: dataObject[\"sampleAuditEditable\"],\n            //             auditcapturefields: dataObject[\"sampleAuditFields\"],\n            //             multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\n            //         }\n            //     }\n            //         auditData = {\n            //             ...auditData,\n            //             stbregistrationsample: {\n            //                 editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\n            //                 auditcapturefields: dataObject[\"subSampleAuditFields\"],\n            //                 multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\n            //             },\n            //         }\n            //         delete dataObject[\"subSampleAuditEditable\"];\n            //         delete dataObject[\"subSampleAuditFields\"];\n            //         delete dataObject[\"subSampleAuditMultilingualFields\"];\n            //     //}\n            //     delete dataObject[\"sampleAuditEditable\"];\n            //     delete dataObject[\"sampleAuditFields\"];\n            //     delete dataObject[\"sampleAuditMultilingualFields\"];\n            //     };\n\n          }\n\n          inputData = {\n            \"userinfo\": this.props.Login.userInfo,\n            \"ncontrolcode\": this.props.Login.ncontrolCode,\n            \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n            \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n            \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n            \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n            \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? \"\" : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\n            \"nformcode\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? formCode.GOODSIN : this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? formCode.PROTOCOL : this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY ? formCode.STUDYALLOCATION : this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n            \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n            \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? jsondata : dataObject,\n            auditdata: auditData,\n            needsubsample: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false //needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\n\n          };\n          inputData[\"designtemplatemapping\"] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n\n          if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n            let qf_jsonData = {\n              sdisplayname: {}\n            };\n            let qbt_jsonData = {\n              tablename: {}\n            };\n            this.props.Login.languageList.map(lang => {\n              qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n              qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n            });\n            let qm_jsonData = {\n              sdisplayname: {}\n            };\n            let nmodulecode = 0;\n            let smoduledisplayname = \"\";\n\n            if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\n              smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\n              this.props.Login.languageList.map(lang => {\n                qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\n              });\n            } else {\n              nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n            }\n\n            inputData = { ...inputData,\n              sformname: this.state.selectedRecord.sformname,\n              sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n              nmodulecode,\n              smoduledisplayname,\n              qm_jsonData,\n              qf_jsonData,\n              qbt_jsonData,\n              sprimarykeyname: templatePrimaryKey,\n              jdynamiccolumns,\n              jnumericcolumns\n            };\n          } else {\n            inputData = { ...inputData,\n              sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n              sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n              ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\n              sprimarykeyname: templatePrimaryKey,\n              jdynamiccolumns,\n              jnumericcolumns\n            };\n          } // this.designtemplatemappingFieldList.map(item => {\n          //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n          // });\n\n        } //console.log(\"input:\", inputData);\n\n\n        let postParam = undefined;\n        const inputParam = {\n          classUrl: \"designtemplatemapping\",\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          dataList: [],\n          dataListCount: [],\n          dataListCountSubSample: [],\n          dataListSubSample: []\n        };\n\n        if (operation === 'configureaudit') {\n          inputParam[\"methodUrl\"] = \"DynamicAudit\";\n          inputParam[\"operation\"] = \"configure\"; //operation = 'configure';\n        }\n\n        if (operation === 'configuresendtostore') {\n          inputParam[\"methodUrl\"] = \"ConfigureSendToStore\";\n          inputParam[\"operation\"] = \"update\"; //operation = 'configure';\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              dataList: [],\n              dataListCount: [],\n              dataListCountSubSample: [],\n              dataListSubSample: []\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.childDataChange = datas => {\n      let masterData = this.props.Login.masterData;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: { ...datas,\n          masterData: { ...masterData,\n            fieldName: datas.fieldName,\n            fieldIndex: datas.fieldIndex\n          },\n          isInitialRender: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const dataStateCL = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      //selectedRecord: {},\n      operation: \"\",\n      dataStateCL,\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      sidebarview: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\",\n      masterTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMASTER\"\n        }),\n        value: 1,\n        item: {\n          nmastertypecode: 1,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_NEWMASTER\"\n          })\n        }\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMASTER\"\n        }),\n        value: 2,\n        item: {\n          nmastertypecode: 2,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_EXISTINGMASTER\"\n          })\n        }\n      }],\n      newMasterForm: {\n        value: -2,\n        label: \"-\"\n      },\n      moduleTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMODULE\"\n        }),\n        value: 3\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMODULE\"\n        }),\n        value: 4\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let fieldName = this.props.Login.masterData && this.props.Login.masterData.fieldName;\n    let fieldIndex = this.props.Login.masterData && this.props.Login.masterData.fieldIndex;\n\n    if (fieldName && this.props.Login.sampleReportFilterTypeData[fieldName][fieldIndex] === nextProps.Login.sampleReportFilterTypeData[fieldName][fieldIndex] && this.props.Login.openModal === nextProps.Login.openModal && nextProps.Login.isInitialRender === false) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n    const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\n    const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\n    const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\n    const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\n    const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\n    const sendToStoreId = this.state.controlMap.has(\"ConfigureSendToStore\") && this.state.controlMap.get(\"ConfigureSendToStore\").ncontrolcode; //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\n\n    const exportFieldsID = this.state.controlMap.has(\"ConfigureExportFields\") && this.state.controlMap.get(\"ConfigureExportFields\").ncontrolcode;\n    const checkListId = this.state.controlMap.has(\"ConfigureCheckList\") && this.state.controlMap.get(\"ConfigureCheckList\").ncontrolcode;\n    const reportFilterTypeId = this.state.controlMap.has(\"ConfigureReportFilterType\") && this.state.controlMap.get(\"ConfigureReportFilterType\").ncontrolcode;\n    const actionList = [];\n    let validationColumnList = [];\n\n    if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n        }),\n        \"controlId\": sampleFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEEDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREEDITFIELDS\"\n        }),\n        \"controlId\": sampleEditFieldId\n      }); //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \n\n      if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL && this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n        if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n            }),\n            \"controlId\": subSampleFieldId\n          });\n        }\n\n        if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\"\n            }),\n            \"controlId\": subSampleEditFieldId\n          });\n        }\n      }\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGUNIQUE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      //sampleAuditConfigId\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEAUDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREAUDITFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    } // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\n    //     this.state.userRoleControlRights.indexOf(sendToStoreId) !== -1) {\n    //     actionList.push({ \"method\": templateMappingAction.CONFIGSENDTOSTORE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESENDTOSTORE\" }), \"controlId\": sendToStoreId })\n    // }\n\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN && this.state.userRoleControlRights.indexOf(checkListId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGURECHECKLIST,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECHECKLIST\"\n        }),\n        \"controlId\": checkListId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL && this.state.userRoleControlRights.indexOf(exportFieldsID) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGEXPORTFIELDS,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREEXPORTFIELD\"\n        }),\n        \"controlId\": exportFieldsID\n      });\n    } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \n\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL && this.state.userRoleControlRights.indexOf(reportFilterTypeId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGURERELEASESAMPLEFILTER,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURERELEASESAMPLEFILTER\"\n        }),\n        \"controlId\": reportFilterTypeId\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        nregtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\n        nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\n        //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\n        //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\n        nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value == -2 ? // Object.keys(this.props.Login.masterData.length > 0) && this.props.Login.masterData.realFormValue  !== undefined && this.props.Login.masterData.realFormValue.value==-2 ?\n    validationColumnList.push({\n      \"idsName\": \"IDS_FORMNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_MODULENAME\",\n      \"dataField\": \"nmodulecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }) : validationColumnList.push({\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }); //ALPD-903\n    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025  \n\n    if (this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.Masters && this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.GOODSIN && this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.PROTOCOL && this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n      validationColumnList.push({\n        \"idsName\": \"IDS_SUBSAMPLETEMPLATE\",\n        \"dataField\": \"nsubsampletemplatecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const mandatoryFields = [];\n    validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, //defaultMasterType\n    // {\n    //     \"label\": \"IDS_MASTERTYPE\",\n    //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    // },\n    {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025   \n    this.props.Login.masterData[\"realSampleValue\"] && (this.props.Login.masterData[\"realSampleValue\"].value === SampleType.GOODSIN || this.props.Login.masterData[\"realSampleValue\"].value === SampleType.PROTOCOL // ||this.props.Login.masterData[\"realSampleValue\"].value === SampleType.STABILITY\n    ) ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n      realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n      realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n      controlId: addId,\n      moduleTypeArray: this.state.moduleTypeArray\n    }; // console.log(\"render, props, state:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(addParam),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          masterTypeArray: this.props.Login.masterData.masterTypeArray || [],\n          defaultMasterType: this.props.Login.masterData.defaultMasterType || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      // onClick={() => this.onApproveClick()}\n      ,\n      onClick: e => this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN // || this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY\n      ? this.openModal(approveId, 'Approve') : this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp // title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} - ALPD-5396 - commented by gowtham - Template Mapping Approve Button shows 2 tool tip\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \" btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 69\n      }\n    })), actionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: actionList,\n      Button: false,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      icon: faChevronCircleDown // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\n      ,\n      dynamicButton: value => this.actionMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 69\n      }\n    }) : \"\"))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 65\n      }\n    }, \"   \", this.props.Login.masterData.selectedDesignTemplateMapping.smodulename))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sformname))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 57\n      }\n    }))))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal // size={(this.props.Login.operation === 'configure'\n      //     || this.props.Login.operation === 'configuresubsample'\n      //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\n      ,\n      size: this.props.Login.screenName === \"\" || this.props.Login.screenName === 'Template Mapping' || this.props.Login.operation === 'Approve' ? 'lg' : \"xl\" //\"xl\"\n      ,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      hideSave: this.props.Login.operation === 'configurechecklist',\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'Approve' ? [{\n        \"idsName\": \"IDS_VIEWNAME\",\n        \"dataField\": \"sviewname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === 'configurechecklistadd' ? [{\n        \"idsName\": \"IDS_CHECKLIST\",\n        \"dataField\": \"nchecklistversioncode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' || this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' || this.props.Login.operation === 'configureunique' || this.props.Login.operation === 'configureaudit' || this.props.Login.operation === 'configuresendtostore' || this.props.Login.operation === 'configureexportfields' || this.props.Login.operation === 'configurereleasesamplefilter' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'Approve' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        name: \"sviewname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }) // value={this.state.selectedRecord[\"sviewname\"]}\n        ,\n        value: this.props.Login.selectedRecord[\"sviewname\"],\n        isMandatory: true,\n        maxLength: 30,\n        onPaste: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.dataResult || [] : this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 37\n        }\n      }) : this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' ? /*#__PURE__*/React.createElement(ConfigureEditFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.editFieldDesignData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.editFieldDataResult || [] : this.props.Login.editFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onConfigureComboChange // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\n        ,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 41\n        }\n      }) : this.props.Login.operation === 'configureaudit' ? /*#__PURE__*/React.createElement(ConfigureAuditFields, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.auditFieldDesignData || {},\n        auditTable: this.props.Login.auditTable || {},\n        auditData: this.props.Login.auditData || {},\n        inputParam: this.props.Login.inputParam,\n        formName: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.auditFieldDataResult || [] : this.props.Login.auditFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeToggle,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 45\n        }\n      }) : this.props.Login.operation === 'configureunique' ? /*#__PURE__*/React.createElement(ConfigureUniqueFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\n        //     this.props.Login.dataResult || [] :\n        //     this.props.Login.dataResult || {}}\n        ,\n        dataList: this.props.Login.dataList || [],\n        dataListCount: this.props.Login.dataListCount || [],\n        dataListsubsample: this.props.Login.dataListSubSample || [],\n        dataListCountsubsample: this.props.Login.dataListCountSubSample || [],\n        onInputOnChange: this.onInputOnChangeForUnique,\n        addCombinatonUnique: this.addCombinatonUnique,\n        deleteCombinationUnique: this.deleteCombinationUnique,\n        slanguagetypecode: this.props.Login.userInfo.slanguagetypecode,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 49\n        }\n      }) : this.props.Login.operation === 'configureexportfields' ? /*#__PURE__*/React.createElement(ConfigureExportFields, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        formName: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n        dataResult: this.props.Login.sampleexportdataResult || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeExportFields,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 53\n        }\n      }) : this.props.Login.operation === 'configurechecklist' ? /*#__PURE__*/React.createElement(ConfigureCheckList, {\n        operation: this.props.Login.operation,\n        version: this.props.Login.checkListData || {},\n        checkListQB: this.props.Login.checkListQB || {},\n        onClickAddCheckList: this.onClickAddCheckList,\n        dataResult: process(this.props.Login.checkListQB ? this.props.Login.checkListQB : [], this.state.dataStateCL),\n        dataState: this.state.dataStateCL,\n        dataStateChange: this.dataStateChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 57\n        }\n      }) : this.props.Login.operation === 'configurechecklistadd' ? /*#__PURE__*/React.createElement(ConfigureCheckListAdd, {\n        checkList: this.props.Login.checkList || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChangeCheckList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 61\n        }\n      }) : // this.props.Login.operation === 'configuresendtostore' ?\n      //     <ConfigureSendToStoreFields\n      //         operation={this.props.Login.operation}\n      //         SampleName={this.props.Login.samplename || {}}\n      //         needSubSample={this.props.Login.needsubsample || {}}\n      //         MainSampleList={this.props.Login.SampleTemplateNumber || []}\n      //         MainSubSampleList={this.props.Login.SampleTemplatecombobox}\n      //         SampleList={this.props.Login.subSampleTemplateNumber || []}\n      //         SubSampleList={this.props.Login.subSampleTemplateCombobox}\n      //         selectedRecord={this.state.selectedRecord || {}}\n      //         // onChangeToggle={this.onChangeToggle}\n      //         onComboChange={this.onComboChange}\n      //         selectedValue={this.props.Login.selectedValue[0]}\n      //     />\n      //     :\n      this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"nmodulecode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 69\n        }\n      }) : this.props.Login.operation === 'configurereleasesamplefilter' ? /*#__PURE__*/React.createElement(ConfigureReportFilterType, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        formName: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n        dataResult: this.props.Login.sampleReportFilterTypeData || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeReportFilterTypeFields,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        onChangeAwesomeQueryBuilder: this.onChangeAwesomeQueryBuilder,\n        awesomeTree: this.props.Login.awesomeTree,\n        userInfo: this.props.Login.userInfo //fields={ this.state.fields}\n        ,\n        fields: this.props.Login.fields || {},\n        sampleReportFilterTypeData: this.state.sampleReportFilterTypeData,\n        settingsCount: parseInt(this.props.Login.settings && this.props.Login.settings['48']),\n        childDataChange: this.childDataChange,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 69\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? false //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \n        : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designTemplateQualisModule: this.props.Login.designTemplateQualisModule,\n        language: this.props.Login.language,\n        moduleTypeArray: this.state.moduleTypeArray || [],\n        sampleTypeValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844,\n          columnNumber: 71\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms,\n      fields,\n      sampleReportFilterTypeData\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    const selectedInput = {};\n    let Taglstsampletype;\n    let TaglistRegistrationType;\n    let TaglistRegistrationSubType;\n    let ListFormsMap;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n    }\n\n    if (this.props.Login.fields !== previousProps.Login.fields) {\n      updateState = true;\n      fields = this.props.Login.fields;\n    }\n\n    if (this.props.Login.sampleReportFilterTypeData !== previousProps.Login.sampleReportFilterTypeData) {\n      updateState = true;\n      sampleReportFilterTypeData = this.props.Login.sampleReportFilterTypeData;\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listSampletype,\n        listRegistrationType,\n        listRegistrationSubType,\n        selectedInput,\n        listForms,\n        fields,\n        sampleReportFilterTypeData\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined,\n        isInitialRender: true\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  editFieldConfigService,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  auditFieldConfigService,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit,\n  combinationUniqueConfigService,\n  mappingFieldConfigService,\n  exportFieldConfigService,\n  configureCheckList,\n  getConfigureCheckListLatestVersion,\n  reportFilterType\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faThumbsUp","faChevronCircleDown","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","editFieldConfigService","auditFieldConfigService","mappingFieldConfigService","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","combinationUniqueConfigService","exportFieldConfigService","configureCheckList","getConfigureCheckListLatestVersion","reportFilterType","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","constructOptionList","validateCreateView","getFilterConditionsBasedonDataType","queryBuilderfillingColumns","checkFilterIsEmptyQueryBuilder","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","SampleType","transactionStatus","templateMappingAction","designComponents","QUALISFORMS","AddSynonym","Affix","ConfirmMessage","ConfigureScreenFields","ConfigureEditFields","ConfigureUniqueFields","ConfigureAuditFields","CustomPopover","ConfigureSendToStoreFields","FormInput","CustomTabs","ConfigureExportFields","ConfigureCheckList","ConfigureCheckListAdd","process","ConfigureReportFilterType","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","Masters","masterTypeArray","updateInfo","typeName","data","defaultMasterType","qualisforms","defaultform","newMasterForm","nregtypecode","nregsubtypecode","GOODSIN","PROTOCOL","label","defaultregtype","defaultregsubtype","onChangeExportFields","dataItem","field","dataIndex","operation","sampleexportdataResult","sampleexportfields","target","checked","onChangeReportFilterTypeFields","count","sampleReportFilterTypeData","samplefiltertypefields","sample","map","x","settings","warn","intl","formatMessage","id","extractedColumnList","slanguagetypecode","fields","comboValues","onClickAddCheckList","onComboChangeCheckList","selectedRecord","temparray","option","push","realData","LABEL","LISTITEM","VALUE","PRIMARYKEY","openModal","ncontrolcode","selectedId","screenName","displayName","onTabChange","tabProps","tabDetail","console","log","Layout","selectedDesignTemplateMapping","jsondata","subSampleLayout","subsamplejsondata","sampleType","realSampleValue","needsubsample","realRegSubTypeValue","item","nneedsubsample","tabMap","Map","set","children","length","column","component","hasOwnProperty","componentrow","inputtype","displayname","STABILITY","dataStateChange","dataStateCL","dataState","actionMethod","method","CONFIGSAMPLEDISPLAY","openFieldConfiguration","controlId","CONFIGSAMPLEEDIT","editFieldConfiguration","CONFIGSUBSAMPLEDISPLAY","CONFIGSUBSAMPLEEDIT","CONFIGUNIQUE","openCombinationUniqueFieldConfiguration","CONFIGSAMPLEAUDIT","auditFieldConfiguration","CONFIGEXPORTFIELDS","exportFieldConfiguration","CONFIGURECHECKLIST","CONFIGURERELEASESAMPLEFILTER","configureReportFilterType","controlCode","designtemplatemapping","ndesigntemplatemappingcode","reloadData","searchRef","current","NA","realRegTypeValue","nformcode","STUDYALLOCATION","realFormValue","openFilter","showFilter","closeFilter","onFilterSubmit","onApproveClick","ntransactionstatus","RETIRED","ncontrolCode","controlMap","has","get","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","deleteValidation","jsqlquerycolumns","sampleQuerybuilderViewCondition","sampleQuerybuilderViewSelect","getGridJsondata","sprimarykeyname","getGoodsInJsondata","getStabilityJsondata","getProtocolJsondata","postParam","undefined","Value","sviewname","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","configureunique","designData","isCheckedSampleMandatory","isCheckedSubSampleMandatory","dataListSubSample","dataList","dataListsubsample","dataListKeyvalue","dataListsubsampleKeyvalue","Object","keys","sampletemplatemandatoryfields","subsampletemplatemandatoryfields","templatemandatoryfields","SAMPLEREGISTRATION","jsondataobj","dataListCount","dataListCountSubSample","configurereportfiltertype","isMandatoryTree","checkMandatoryFilter","filterQueryTreeStr","awesomeConfig","isFilterEmpty","ismandatory","filterquery","RELEASE","awesomeTree","treeData","config","ParentItem","mandatoryList","treeDateList","childArray","children1","i","childData","properties","uniqueSet","Set","uniqueArray","Array","from","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","primaryKeyValue","fetchUrl","fecthInputObject","deleteCombinationUnique","index","eventKey","subsampledataList","subsampledataListCount","slice","addCombinatonUnique","napprovalconfigcode","mappingFieldConfiguration","validateEsign","sreason","nreasoncode","spredefinedreason","password","closeModal","onComboChange","comboData","fieldName","onConfigureComboChange","onInputOnChange","type","name","YES","NO","onInputOnChangeForUnique","radiotext","multilinguallabel","handleDateChange","dateName","dateValue","templatedata","task","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","mastertemplatefields","sampleAuditFields","sampleAuditEditable","sampleAuditMultilingualFields","masterexportfields","row","componentRow","isExportField","mandatory","unique","filterinputtype","comboDataInputObject","componentcode","COMBOBOX","table","stablename","valuemember","nquerybuildertablecode","displaymember","source","isMultiLingual","dateonly","dateConstraintArraySQL","default","columnname","templatemandatory","editableuntill","selectedSubSampleTemplate","griditem","gridmoreitem","datefields","dateconstraints","uniquevalidation","combinationunique","templatefields","nonmandatoryExportFields","exportFields","maximumCount","genericLabel","searchfields","listItem","displayFields","getJsondata","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","sampleuniquevalidation","subsampleuniquevalidation","samplecombinationunique","subsamplecombinationunique","subSampleAuditFields","subSampleAuditEditable","subSampleAuditMultilingualFields","sampleExportFields","subSampleExportFields","sampletemplatemandatory","testdatefields","nsubsampletemplatecode","QUERYBUILDERTABLECODE","readonly","PREREGISTER","child","tablecolumnname","TABLENAME","COLUMNNAME","RECORDTYPE","MULTILINGUAL","testListFields","testlistitem","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","samplefilteritem","SAMPLETEMPLATEFIELDS","SUBSAMPLETEMPLATEFIELDS","RELEASESAMPLETEMPLATEFIELDS","sampleeditable","SCHEDULERCONFIGURATION","RESULTENTRY","APPROVAL","JOBALLOCATION","testgriditem","testdisplayfields","testgridmoreitem","MYJOBS","WORKLIST","BATCHCREATION","TESTWISEMYJOBS","onChangeToggle","dataResult","auditFieldDesignData","auditFieldDataResult","tableName","splice","findIndex","indexOf","index1","object","index3","index4","index2","onApproveSaveClick","onSaveClick","formRef","editFieldDesignData","formCodeArray","editableData","editableuntil","statusItem","forEach","master","checkArray","includes","y","dataListSub","subsample","nchecklistversioncode","auditdata","auditData","samqty","Quantity","samunit","Unit","subsamqty","SubQuantity","subsamunit","SubUnit","str","senttostoragefields","nreactregtemplatecode","dataObject","editmandatoryfields","auditcapturefields","multilingualfields","registrationsample","schedulersubsampledetail","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","qm_jsonData","nmodulecode","smoduledisplayname","sregtemplatename","ssubregtemplatename","childDataChange","datas","fieldIndex","isInitialRender","skip","take","isOpen","designtemplatemappingData","masterStatus","error","userLogged","showAccordian","selectedInput","nmastertypecode","smastertype","moduleTypeArray","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","shouldComponentUpdate","nextProps","nextState","render","addId","deleteId","approveId","sampleFieldId","sampleEditFieldId","subSampleFieldId","subSampleEditFieldId","combinationUniqueFieldId","sendToStoreId","exportFieldsID","checkListId","reportFilterTypeId","actionList","validationColumnList","filterParam","mandatoryFields","breadCrumbData","addParam","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","parentFunction","sversionno","APPROVED","stransdisplaystatus","e","smodulename","approvedRegSubTypeVersion","editFieldDataResult","auditTable","checkListData","checkListQB","checkList","showSynonym","onChangeAwesomeQueryBuilder","designtemplatemappingList","subSampleTemplateList","designTemplateQualisModule","language","componentDidUpdate","previousProps","updateState","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail,\r\n    getMappedFieldProps, editFieldConfigService, auditFieldConfigService, mappingFieldConfigService,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping,\r\n    getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService,\r\n    exportFieldConfigService, configureCheckList, getConfigureCheckListLatestVersion,reportFilterType\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, constructOptionList, validateCreateView,getFilterConditionsBasedonDataType \r\n    ,queryBuilderfillingColumns,checkFilterIsEmptyQueryBuilder} from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport {\r\n    designProperties, formCode, SampleType, transactionStatus,\r\n    templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\r\n    // SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\r\n    //SAMPLETEMPLATEFIELDS, \r\n    //SUBSAMPLETEMPLATEFIELDS, \r\n    designComponents,\r\n    QUALISFORMS,\r\n    //ARNOMULTILINGUAL, SUBARNOMULTILINGUAL\r\n} from '../../components/Enumeration';\r\n\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\nimport ConfigureEditFields from './ConfigureEditFields';\r\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\r\nimport ConfigureAuditFields from './ConfigureAuditFields';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport ConfigureSendToStoreFields from './configureSendToStoreFields'\r\n//import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfigureExportFields from './ConfigureExportFields';\r\nimport ConfigureCheckList from './ConfigureCheckList';\r\nimport ConfigureCheckListAdd from './ConfigureCheckListAdd';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ConfigureReportFilterType from './ConfigureReportFilterType';\r\n//import {Utils as QbUtils,} from \"@react-awesome-query-builder/ui\";\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataStateCL = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            //selectedRecord: {},\r\n            operation: \"\",\r\n            dataStateCL,\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n            sidebarview: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n            masterTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }), value: 1, item: { nmastertypecode: 1, smastertype: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }) } },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }), value: 2, item: { nmastertypecode: 2, smastertype: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }) } }],\r\n            newMasterForm: { value: -2, label: \"-\" },\r\n            moduleTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMODULE\" }), value: 3 },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMODULE\" }), value: 4 }]\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n    \r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === SampleType.Masters) {\r\n                    const masterTypeArray = this.state.masterTypeArray\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                masterTypeArray,\r\n                                defaultMasterType: masterTypeArray[0],\r\n                                qualisforms: [], defaultform: this.state.newMasterForm,\r\n                                nregtypecode: -1, nregsubtypecode: -1\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025  \r\n                } else if (event.value === SampleType.GOODSIN || event.value === SampleType.PROTOCOL) {\r\n                    let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                nregtypecode: -1, nregsubtypecode: -1,defaultform: { value: -1, label: \"-\" }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    inputParam[\"masterData\"][\"defaultform\"] = { value: -1, label: \"-\" };\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldname === \"masterType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultMasterType: event }\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: SampleType.Masters,\r\n                }\r\n\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === 1) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData: { ...masterData, qualisforms: [], defaultform: this.state.newMasterForm } }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n\r\n            } else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        let fieldName=this.props.Login.masterData && this.props.Login.masterData.fieldName;\r\n        let fieldIndex=this.props.Login.masterData && this.props.Login.masterData.fieldIndex;\r\n        if (fieldName && this.props.Login.sampleReportFilterTypeData[fieldName][fieldIndex] === nextProps.Login.sampleReportFilterTypeData[fieldName][fieldIndex] \r\n            && this.props.Login.openModal === nextProps.Login.openModal && nextProps.Login.isInitialRender === false ) {\r\n            return false;\r\n        }  else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    onChangeExportFields = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        const sampleexportdataResult = this.props.Login.sampleexportdataResult\r\n        sampleexportdataResult[formCode][dataIndex] = { ...sampleexportdataResult[formCode][dataIndex], sampleexportfields: event.target.checked }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { sampleexportdataResult }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onChangeReportFilterTypeFields = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        let count=0;\r\n        //let reportFilterType=[];\r\n        const sampleReportFilterTypeData = this.props.Login.sampleReportFilterTypeData\r\n        sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex], samplefiltertypefields: event.target.checked }\r\n\r\n        sampleReportFilterTypeData.sample.map(x=>{\r\n            if(x.samplefiltertypefields===true){\r\n                count++\r\n                //reportFilterType.push(x);\r\n            }\r\n        })\r\n        if(count>parseInt(this.props.Login.settings && this.props.Login.settings['48'])){\r\n            sampleReportFilterTypeData[formCode][dataIndex] = { ...sampleReportFilterTypeData[formCode][dataIndex], samplefiltertypefields: false }\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDSFILTEERTYPE\" })) \r\n         }else{\r\n            let  extractedColumnList=queryBuilderfillingColumns(this.props.Login.sampleReportFilterTypeData[\"sample\"],this.props.Login.userInfo.slanguagetypecode)\r\n            let fields =getFilterConditionsBasedonDataType(extractedColumnList,this.props.Login.comboValues);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { sampleReportFilterTypeData,fields}//,reportFilterType }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    }\r\n\r\n\r\n    onClickAddCheckList = () => {\r\n\r\n        this.props.getConfigureCheckListLatestVersion(this.props.Login.userInfo);\r\n\r\n    }\r\n\r\n    onComboChangeCheckList = (event, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        selectedRecord[field] = event\r\n        this.setState({ selectedRecord })\r\n    }\r\n\r\n    render() {\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\r\n\r\n        const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\r\n        const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\r\n        const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\r\n        const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\r\n        const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\r\n        const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\r\n        const sendToStoreId = this.state.controlMap.has(\"ConfigureSendToStore\") && this.state.controlMap.get(\"ConfigureSendToStore\").ncontrolcode;\r\n        //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\r\n        const exportFieldsID = this.state.controlMap.has(\"ConfigureExportFields\") && this.state.controlMap.get(\"ConfigureExportFields\").ncontrolcode;\r\n        const checkListId = this.state.controlMap.has(\"ConfigureCheckList\") && this.state.controlMap.get(\"ConfigureCheckList\").ncontrolcode;\r\n        const reportFilterTypeId = this.state.controlMap.has(\"ConfigureReportFilterType\") && this.state.controlMap.get(\"ConfigureReportFilterType\").ncontrolcode;\r\n        const actionList = [];\r\n        let validationColumnList=[];\r\n        if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" }), \"controlId\": sampleFieldId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\r\n            this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" }), \"controlId\": sampleEditFieldId })\r\n\r\n            //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \r\n            if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && \r\n                this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\r\n                this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL &&\r\n                this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n                if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" }), \"controlId\": subSampleFieldId })\r\n                }\r\n\r\n                if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" }), \"controlId\": subSampleEditFieldId })\r\n                }\r\n            }\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGUNIQUE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {//sampleAuditConfigId\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEAUDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\r\n        //     this.state.userRoleControlRights.indexOf(sendToStoreId) !== -1) {\r\n        //     actionList.push({ \"method\": templateMappingAction.CONFIGSENDTOSTORE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESENDTOSTORE\" }), \"controlId\": sendToStoreId })\r\n        // }\r\n\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN &&\r\n            this.state.userRoleControlRights.indexOf(checkListId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGURECHECKLIST, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECHECKLIST\" }), \"controlId\": checkListId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL &&\r\n            this.state.userRoleControlRights.indexOf(exportFieldsID) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGEXPORTFIELDS, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEXPORTFIELD\" }), \"controlId\": exportFieldsID })\r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN \r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL &&\r\n            this.state.userRoleControlRights.indexOf(reportFilterTypeId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGURERELEASESAMPLEFILTER, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURERELEASESAMPLEFILTER\" }), \"controlId\": reportFilterTypeId })\r\n        }        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: {\r\n                nregtypecode: this.props.Login.masterData.realSampleValue ?\r\n                    this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\r\n\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\r\n                //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\r\n                //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\r\n                nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1,\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n      this.props.Login.masterData.realFormValue  && this.props.Login.masterData.realFormValue.value==-2 ?\r\n       // Object.keys(this.props.Login.masterData.length > 0) && this.props.Login.masterData.realFormValue  !== undefined && this.props.Login.masterData.realFormValue.value==-2 ?\r\n         validationColumnList.push( \r\n            { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"nmodulecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        )\r\n        :validationColumnList.push(\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n           )\r\n        //ALPD-903\r\n\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025  \r\n        if (this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.Masters \r\n            && this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.GOODSIN\r\n            && this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.PROTOCOL\r\n            && this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n            validationColumnList.push({ \"idsName\": \"IDS_SUBSAMPLETEMPLATE\", \"dataField\": \"nsubsampletemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },);\r\n        }\r\n\r\n        const mandatoryFields = [];\r\n           validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                },\r\n                //defaultMasterType\r\n                // {\r\n                //     \"label\": \"IDS_MASTERTYPE\",\r\n                //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025   \r\n            this.props.Login.masterData[\"realSampleValue\"] && (this.props.Login.masterData[\"realSampleValue\"].value === SampleType.GOODSIN \r\n            || this.props.Login.masterData[\"realSampleValue\"].value === SampleType.PROTOCOL \r\n           // ||this.props.Login.masterData[\"realSampleValue\"].value === SampleType.STABILITY\r\n             )  ?\r\n                breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                    }\r\n                ] :\r\n             \r\n                breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                    }, {\r\n                        \"label\": \"IDS_REGTYPE\",\r\n                        \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                    }, {\r\n                        \"label\": \"IDS_REGSUBTYPE\",\r\n                        \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                    }\r\n                ];\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" }),\r\n            operation: \"create\",\r\n            userInfo: this.props.Login.userInfo,\r\n            realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n            controlId: addId,\r\n            moduleTypeArray: this.state.moduleTypeArray\r\n        }\r\n\r\n       \r\n\r\n        // console.log(\"render, props, state:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                                masterTypeArray={this.props.Login.masterData.masterTypeArray || []}\r\n                                                defaultMasterType={this.props.Login.masterData.defaultMasterType || {}}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                    // onClick={() => this.onApproveClick()}\r\n                                                                    onClick={(e) => this.props.Login.masterData.realSampleValue && \r\n                                                                        this.props.Login.masterData.realSampleValue.value === SampleType.Masters \r\n                                                                         || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                                                                        // || this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY\r\n                                                                          ? this.openModal(approveId, 'Approve') : this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} \r\n                                                                        // title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} - ALPD-5396 - commented by gowtham - Template Mapping Approve Button shows 2 tool tip\r\n                                                                    />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\" btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                {actionList.length > 0 ?\r\n                                                                    <CustomPopover\r\n                                                                        nav={true}\r\n                                                                        data={actionList}\r\n                                                                        Button={false}\r\n                                                                        hideIcon={true}\r\n                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                        textKey=\"value\"\r\n                                                                        icon={faChevronCircleDown}\r\n                                                                        // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\r\n                                                                        dynamicButton={(value) => this.actionMethod(value)}\r\n                                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    \"\"}\r\n\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                                                    this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 &&\r\n                                                    <Row>\r\n                                                        <Col md={6}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>   {this.props.Login.masterData.selectedDesignTemplateMapping.smodulename}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Col>\r\n                                                        <Col md={6}>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.selectedDesignTemplateMapping.sformname}\r\n                                                            </ReadOnlyText>\r\n\r\n                                                        </Col>\r\n                                                    </Row>}\r\n\r\n                                                <Row>\r\n                                                    <Col md={12} >\r\n                                                        <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        // size={(this.props.Login.operation === 'configure'\r\n                        //     || this.props.Login.operation === 'configuresubsample'\r\n                        //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\r\n                        size={this.props.Login.screenName === \"\" || this.props.Login.screenName === 'Template Mapping' || this.props.Login.operation === 'Approve' ? 'lg' : \"xl\"}//\"xl\"\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        hideSave={this.props.Login.operation === 'configurechecklist'}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n\r\n                        mandatoryFields={this.props.Login.operation === 'Approve' ? [{ \"idsName\": \"IDS_VIEWNAME\", \"dataField\": \"sviewname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n                        ] : this.props.Login.operation === 'configurechecklistadd' ? [{ \"idsName\": \"IDS_CHECKLIST\", \"dataField\": \"nchecklistversioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" }\r\n                        ] : (this.props.Login.operation === 'configure'\r\n                            || this.props.Login.operation === 'configuresubsample'\r\n                            || this.props.Login.operation === 'configureedit'\r\n                            || this.props.Login.operation === 'configuresubsampleedit'\r\n                            || this.props.Login.operation === 'configureunique'\r\n                            || this.props.Login.operation === 'configureaudit'\r\n                            || this.props.Login.operation === 'configuresendtostore'\r\n                            || this.props.Login.operation === 'configureexportfields'\r\n                            ||this.props.Login.operation === 'configurereleasesamplefilter') ? [] : mandatoryFields}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'Approve' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                            name={\"sviewname\"}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                           // value={this.state.selectedRecord[\"sviewname\"]}\r\n                                            value={this.props.Login.selectedRecord[\"sviewname\"]}\r\n                                            isMandatory={true}\r\n                                            maxLength={30}\r\n                                            onPaste={true}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ?\r\n                                    <ConfigureScreenFields\r\n                                        operation={this.props.Login.operation}\r\n                                        designData={this.props.Login.designData || {}}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                            this.props.Login.dataResult || [] :\r\n                                            this.props.Login.dataResult || {}}\r\n                                        onChangeToggle={this.onChangeToggle}\r\n                                        approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                        selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                    />\r\n                                    : (this.props.Login.operation === 'configureedit'\r\n                                        || this.props.Login.operation === 'configuresubsampleedit') ?\r\n                                        <ConfigureEditFields\r\n                                            operation={this.props.Login.operation}\r\n                                            designData={this.props.Login.editFieldDesignData || {}}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                this.props.Login.editFieldDataResult || [] :\r\n                                                this.props.Login.editFieldDataResult || {}}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            // onChangeToggle={this.onChangeToggle}\r\n                                            onComboChange={this.onConfigureComboChange}\r\n                                            // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                            selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                        />\r\n                                        : (this.props.Login.operation === 'configureaudit') ?\r\n                                            <ConfigureAuditFields\r\n                                                operation={this.props.Login.operation}\r\n                                                needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                    this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                designData={this.props.Login.auditFieldDesignData || {}}\r\n                                                auditTable={this.props.Login.auditTable || {}}\r\n                                                auditData={this.props.Login.auditData || {}}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                formName={this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label}\r\n                                                dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                    this.props.Login.auditFieldDataResult || [] :\r\n                                                    this.props.Login.auditFieldDataResult || {}}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onChangeToggle={this.onChangeToggle}\r\n                                                selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                            />\r\n                                            : this.props.Login.operation === 'configureunique' ?\r\n                                                <ConfigureUniqueFields\r\n                                                    designData={this.props.Login.designData || {}}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                    //     this.props.Login.dataResult || [] :\r\n                                                    //     this.props.Login.dataResult || {}}\r\n                                                    dataList={this.props.Login.dataList || []}\r\n                                                    dataListCount={this.props.Login.dataListCount || []}\r\n                                                    dataListsubsample={this.props.Login.dataListSubSample || []}\r\n                                                    dataListCountsubsample={this.props.Login.dataListCountSubSample || []}\r\n                                                    onInputOnChange={this.onInputOnChangeForUnique}\r\n                                                    addCombinatonUnique={this.addCombinatonUnique}\r\n                                                    deleteCombinationUnique={this.deleteCombinationUnique}\r\n                                                    slanguagetypecode={this.props.Login.userInfo.slanguagetypecode}\r\n                                                    approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                                    selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                                /> : this.props.Login.operation === 'configureexportfields' ?\r\n                                                    <ConfigureExportFields\r\n                                                        operation={this.props.Login.operation}\r\n                                                        needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                            this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                        designData={this.props.Login.designData || {}}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        formName={this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label}\r\n                                                        dataResult={this.props.Login.sampleexportdataResult || {}}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onChangeToggle={this.onChangeExportFields}\r\n                                                        selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                                    />\r\n                                                    : this.props.Login.operation === 'configurechecklist' ?\r\n                                                        <ConfigureCheckList\r\n                                                            operation={this.props.Login.operation}\r\n                                                            version={this.props.Login.checkListData || {}}\r\n                                                            checkListQB={this.props.Login.checkListQB || {}}\r\n                                                            onClickAddCheckList={this.onClickAddCheckList}\r\n                                                            dataResult={process(this.props.Login.checkListQB ? this.props.Login.checkListQB : [], this.state.dataStateCL)}\r\n                                                            dataState={this.state.dataStateCL}\r\n                                                            dataStateChange={this.dataStateChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                        />\r\n\r\n\r\n                                                        : this.props.Login.operation === 'configurechecklistadd' ?\r\n                                                            <ConfigureCheckListAdd\r\n                                                                checkList={this.props.Login.checkList || {}}\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                onComboChange={this.onComboChangeCheckList}\r\n\r\n                                                            />\r\n\r\n                                                            :\r\n                                                            // this.props.Login.operation === 'configuresendtostore' ?\r\n                                                            //     <ConfigureSendToStoreFields\r\n                                                            //         operation={this.props.Login.operation}\r\n                                                            //         SampleName={this.props.Login.samplename || {}}\r\n                                                            //         needSubSample={this.props.Login.needsubsample || {}}\r\n                                                            //         MainSampleList={this.props.Login.SampleTemplateNumber || []}\r\n                                                            //         MainSubSampleList={this.props.Login.SampleTemplatecombobox}\r\n                                                            //         SampleList={this.props.Login.subSampleTemplateNumber || []}\r\n                                                            //         SubSampleList={this.props.Login.subSampleTemplateCombobox}\r\n                                                            //         selectedRecord={this.state.selectedRecord || {}}\r\n                                                            //         // onChangeToggle={this.onChangeToggle}\r\n                                                            //         onComboChange={this.onComboChange}\r\n                                                            //         selectedValue={this.props.Login.selectedValue[0]}\r\n                                                            //     />\r\n                                                            //     :\r\n                                                                this.state.showSynonym ?\r\n                                                                    <AddSynonym\r\n                                                                        selectedFieldRecord={this.state.selectedRecord}\r\n                                                                        onInputOnChange={this.onInputOnChange}\r\n                                                                        languages={this.props.Login.languageList || []}\r\n                                                                        fieldName=\"nmodulecode\"\r\n                                                                    />\r\n                                                                    :this.props.Login.operation === 'configurereleasesamplefilter'?\r\n\r\n                                                                    <ConfigureReportFilterType\r\n                                                                    operation={this.props.Login.operation}\r\n                                                                    needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                                        this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                                    designData={this.props.Login.designData || {}}\r\n                                                                    inputParam={this.props.Login.inputParam}\r\n                                                                    formName={this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label}\r\n                                                                    dataResult={this.props.Login.sampleReportFilterTypeData || {}}\r\n                                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                                    onChangeToggle={this.onChangeReportFilterTypeFields}\r\n                                                                    selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                                                    onChangeAwesomeQueryBuilder={this.onChangeAwesomeQueryBuilder}\r\n                                                                    awesomeTree={this.props.Login.awesomeTree}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    //fields={ this.state.fields}\r\n                                                                    fields={this.props.Login.fields||{}}\r\n                                                                    sampleReportFilterTypeData = {this.state.sampleReportFilterTypeData}\r\n                                                                    settingsCount={parseInt(this.props.Login.settings && this.props.Login.settings['48'])}\r\n                                                                    childDataChange={this.childDataChange}\r\n                                                                    updateStore={this.props.updateStore}\r\n                                                                />\r\n                                                                    : <AddDesignTemplateMapping\r\n                                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                                        onInputOnChange={this.onInputOnChange}\r\n                                                                        onComboChange={this.onComboChange}\r\n                                                                        handleDateChange={this.handleDateChange}\r\n                                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                                        designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                                                        subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                                                        selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                                                        operation={this.props.Login.operation}\r\n                                                                        userLogged={this.props.Login.userLogged}\r\n                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        nformcode={this.props.Login.masterData.realFormValue ? \r\n                                                                            this.props.Login.masterData.realFormValue.value : -1}\r\n                                                                        needSubSample={this.props.Login.masterData.realSampleValue.value === SampleType.Masters \r\n                                                                            || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN \r\n                                                                            || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? false  //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \r\n                                                                            : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                                        designTemplateQualisModule={this.props.Login.designTemplateQualisModule}\r\n                                                                        language={this.props.Login.language}\r\n                                                                        moduleTypeArray={this.state.moduleTypeArray || []}\r\n                                                                        sampleTypeValue={ this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1}\r\n                                                                    />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    queryBuilderfillingColumns=(data)=>{\r\n        const temparray =[];\r\n         data && data.map((option) => {  \r\n           if(option.samplefiltertypefields ===true) { \r\n            temparray.push( {\r\n                \"idsName\": option.realData[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n                \"dataField\": option.realData[designProperties.LISTITEM]==='combo'? \"(r.jsondata->'\"+option.realData[designProperties.VALUE]+\"'->>'\"+option.realData[designProperties.PRIMARYKEY]+\"')::int\" : option.realData[designProperties.LISTITEM]==='Numeric'?\"(r.jsondata->>'\"+option.realData[designProperties.VALUE]+\"')::int\":\"(r.jsondata->>'\"+option.realData[designProperties.VALUE]+\"')\", \"width\": \"200px\", \"filterinputtype\": option.realData[designProperties.LISTITEM]\r\n            })\r\n        };\r\n        });\r\n        return temparray;\r\n    }\r\n    openModal = (ncontrolcode, operation) => {     \r\n              const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: operation, ncontrolcode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n\r\n        console.log(\"this.props.Login.masterData:\", this.props.Login.masterData);\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\r\n\r\n        const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n        const sampleType = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_TEMPLATE\", <Card>\r\n            {/* <Card.Header><FormattedMessage id=\"IDS_TEMPLATE\" message=\"Template\" /></Card.Header> */}\r\n            <Card.Body>\r\n                {\r\n                    Layout ?\r\n                        Layout.map((item) =>\r\n                            <Row>\r\n                                {item.children.length > 0 ?\r\n                                    item.children.map((column) =>\r\n                                        <Col md={12 / item.children.length}>\r\n                                            {\r\n                                                column.children.map((component) => {\r\n                                                    return (\r\n                                                        component.hasOwnProperty(\"children\") ?\r\n                                                            <Row>\r\n                                                                {component.children.map(componentrow =>\r\n                                                                    componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                    <Col md={componentrow && componentrow.length || 4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                            <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                }\r\n                                                            </Row>\r\n                                                            :\r\n                                                            component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                            <FormGroup>\r\n                                                                <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    )\r\n                                    : \"\"}\r\n                            </Row>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                }\r\n            </Card.Body>\r\n        </Card>);\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (sampleType !== SampleType.Masters && sampleType !== SampleType.GOODSIN && sampleType !== SampleType.PROTOCOL && (needsubsample||sampleType===SampleType.STABILITY)) {\r\n            tabMap.set(\"IDS_SUBSAMPLETEMPLATE\", <Card>\r\n                {/* <Card.Header><FormattedMessage id=\"IDS_SUBSAMPLETEMPLATE\" message=\"Sub Sample Template\" /></Card.Header> */}\r\n                <Card.Body>\r\n                    {\r\n                        subSampleLayout ?\r\n                            subSampleLayout.map((item) =>\r\n                                <Row>\r\n                                    {item.children.length > 0 ?\r\n                                        item.children.map((column) =>\r\n                                            <Col md={12 / item.children.length}>\r\n                                                {\r\n                                                    column.children.map((component) => {\r\n                                                        return (\r\n                                                            component.hasOwnProperty(\"children\") ?\r\n                                                                <Row>\r\n                                                                    {component.children.map(componentrow =>\r\n                                                                        componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                        <Col md={componentrow && componentrow.length || 4}>\r\n                                                                            <FormGroup>\r\n                                                                                <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                            </FormGroup>\r\n                                                                        </Col>\r\n                                                                    )\r\n                                                                    }\r\n                                                                </Row>\r\n                                                                :\r\n                                                                component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                    <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </Col>\r\n                                        )\r\n                                        : \"\"}\r\n                                </Row>\r\n                            )\r\n                            :\r\n                            \"\"\r\n                    }\r\n                </Card.Body>\r\n            </Card>);\r\n        }\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateCL: event.dataState\r\n        });\r\n    }\r\n\r\n    actionMethod = (value) => {\r\n        if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, \"configure\");\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configureedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, 'configuresubsample')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configuresubsampleedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGUNIQUE) {\r\n            this.openCombinationUniqueFieldConfiguration(value.controlId)\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\r\n            this.auditFieldConfiguration(value.controlId, 'configureaudit')\r\n        }\r\n        // else if (value.method === templateMappingAction.CONFIGSENDTOSTORE) {\r\n        //     this.mappingFieldConfiguration(value.controlId, 'configuresendtostore')\r\n        // }\r\n        else if (value.method === templateMappingAction.CONFIGEXPORTFIELDS) {\r\n            this.exportFieldConfiguration(value.controlId, 'configureexportfields')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGURECHECKLIST) {\r\n            this.configureCheckList(value.controlId, 'configurechecklist')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGURERELEASESAMPLEFILTER) {\r\n            this.configureReportFilterType(value.controlId, 'configurereleasesamplefilter')\r\n        }\r\n    }\r\n\r\n\r\n    configureCheckList = (controlCode, operation) => {\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                //  nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.configureCheckList(inputParam)\r\n    }\r\n\r\n    exportFieldConfiguration = (controlCode, operation) => {\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.exportFieldConfigService(inputParam)\r\n    }\r\n\r\n    configureReportFilterType = (controlCode, operation) => {\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.reportFilterType(inputParam)\r\n    }\r\n\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\r\n        if (this.searchRef && this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n          }\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025  \r\n            nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters  || \r\n                          this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN  || \r\n                          this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ?\r\n                          transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? \r\n                          this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n\r\n            nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || \r\n                             this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ||\r\n                             this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ?\r\n                             transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ?\r\n                             this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n\r\n            // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n            nformcode: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? formCode.GOODSIN \r\n            : this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL ? formCode.PROTOCOL \r\n            : this.props.Login.masterData.defaultsampletype.value === SampleType.STABILITY ? formCode.STUDYALLOCATION \r\n            : parseInt(this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1)\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms,fields ,sampleReportFilterTypeData} = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        const selectedInput = {};\r\n        let Taglstsampletype;\r\n        let TaglistRegistrationType;\r\n        let TaglistRegistrationSubType;\r\n        let ListFormsMap;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }\r\n        }\r\n        if (this.props.Login.fields !== previousProps.Login.fields) {\r\n            updateState = true;\r\n            fields=this.props.Login.fields\r\n        }\r\n        if (this.props.Login.sampleReportFilterTypeData !== previousProps.Login.sampleReportFilterTypeData) {\r\n            updateState = true;\r\n            sampleReportFilterTypeData=this.props.Login.sampleReportFilterTypeData\r\n        }\r\n        \r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights,\r\n                listSampletype, listRegistrationType, listRegistrationSubType,\r\n                selectedInput, listForms,fields,sampleReportFilterTypeData\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025   \r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: (this.props.Login.masterData.defaultsampletype.value === SampleType.Masters\r\n             || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN \r\n             || this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL) ?\r\n              transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value\r\n                 || -1 : -1),\r\n            nregsubtypecode: (this.props.Login.masterData.defaultsampletype.value === SampleType.Masters ||\r\n             this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN || \r\n             this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL) ?\r\n              transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? \r\n                this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? formCode.GOODSIN \r\n            : this.props.Login.masterData.defaultsampletype.value === SampleType.PROTOCOL ? formCode.PROTOCOL \r\n            : this.props.Login.masterData.defaultsampletype.value === SampleType.STABILITY ? formCode.STUDYALLOCATION\r\n            : parseInt(this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1)\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            // if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //              openModal: true,\r\n            //             operation: \"approve\", ncontrolCode: ncontrolCode\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n\r\n            // } else {\r\n\r\n\r\n            let inputData ={};\r\n\r\n            //Modified by sonia on 13-JUN-2024 for JIRA ID:4386 ComboBox Selection Issue\r\n           \r\n\t\t//ALPD-5264--Vignesh R(27-01-2025)--->Sample Category-->Cant able to delete the record 500 error occurs\r\n\t\t if((this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN )\r\n                &&( this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL)){\r\n               let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect }=  this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n\r\n\r\n            }else if(this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN){\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } =\r\n                 this.getGoodsInJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n\r\n    \r\n            }\r\n            else if(this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY){\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } =\r\n                 this.getStabilityJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n\r\n    \r\n            }\r\n            //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n            else if(this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL){\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } = this.getProtocolJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n\r\n    \r\n            }\r\n            // console.log(\"deleteValidation 2:\", deleteValidation);\r\n\r\n            //let inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n           // inputData[\"deletevalidationlist\"] = deleteValidation;\r\n            inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\r\n            postParam = {\r\n                inputListName: \"DesignTemplateMapping\",\r\n                selectedObject: \"selectedDesignTemplateMapping\",\r\n                primaryKeyField: \"ndesigntemplatemappingcode\"\r\n            };\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    ...inputData\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                screenName: 'Template Mapping',\r\n                operation: \"Approve\", postParam,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n            let saveType;\r\n\r\n            // console.log(\"approve:\", inputParam);\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"Approve\", screenName: 'Template Mapping'\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n\r\n        //  }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n    configureunique=()=>{\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n        let designData = this.props.Login.designData;\r\n        //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n        let isCheckedSampleMandatory=false\r\n        let isCheckedSubSampleMandatory=this.props.Login.dataListSubSample.length===0?true:false\r\n        const dataList = []\r\n        const dataListsubsample = []\r\n        let dataListKeyvalue=[];\r\n        let dataListsubsampleKeyvalue=[];\r\n        this.props.Login.dataListSubSample.map(x => {\r\n            if (Object.keys(x).length !== 0) {\r\n                dataListsubsample.push(x);\r\n                dataListsubsampleKeyvalue=Object.keys(x);\r\n            }\r\n        })\r\n        this.props.Login.dataList.map(x => {\r\n            if (Object.keys(x).length !== 0) {\r\n                dataList.push(x);\r\n                dataListKeyvalue=Object.keys(x);\r\n            }\r\n        })\r\n        designData.sampletemplatemandatoryfields && designData.sampletemplatemandatoryfields.map(item=>{\r\n            dataListKeyvalue.map(value=>{\r\n                if(value===item[2])\r\n                    {isCheckedSampleMandatory=true;}\r\n        })});\r\n\r\n        designData.subsampletemplatemandatoryfields && designData.subsampletemplatemandatoryfields.map(item=>{\r\n            dataListsubsampleKeyvalue.map(value=>{\r\n                if(value===item[2])\r\n                    {isCheckedSubSampleMandatory=true;}\r\n         })});\r\n\r\n        designData.templatemandatoryfields && designData.templatemandatoryfields.map(item=>{\r\n            dataListKeyvalue.map(value=>{\r\n                    if(value===item[2])\r\n                        {isCheckedSampleMandatory=true;}\r\n        })});\r\n\r\n\r\n            \r\n        if(isCheckedSampleMandatory && isCheckedSubSampleMandatory) {\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            designData['mastercombinationunique'] = dataList\r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n             || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\r\n            designData['combinationunique'] = dataList\r\n        }else {\r\n            designData['samplecombinationunique'] = dataList\r\n            designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n            // this.props.Login.dataListSubSample.map(x => {\r\n            //     if (Object.keys(x).length !== 0) {\r\n            //         dataListsubsample.push(x);\r\n            //     }\r\n            // })\r\n            designData['subsamplecombinationunique'] = dataListsubsample\r\n            designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n        }\r\n\r\n\r\n        inputData = {\r\n            designtemplatemapping: {\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                jsondataobj: designData\r\n            },\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        operation = 'configure';\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation,\r\n             postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }else{\r\n        if(!isCheckedSampleMandatory){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEMANDATORYFIELD\" }));\r\n        }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEMANDATORYFIELDINSUBSAMPLE\" }));\r\n        }\r\n    }\r\n    }\r\n    configurereportfiltertype=()=>{\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n       \r\n        let isMandatoryTree=this.checkMandatoryFilter(this.props.Login.filterQueryTreeStr,this.props.Login.awesomeConfig);\r\n        if(isMandatoryTree){\r\n            let isFilterEmpty = checkFilterIsEmptyQueryBuilder(this.props.Login.filterQueryTreeStr);\r\n            let ismandatory=false;\r\n        if(isFilterEmpty){\r\n        let designData = this.props.Login.designData;\r\n\r\n                    const dataList = []\r\n                    this.state.sampleReportFilterTypeData.sample.map(x => {\r\n                        if (x.samplefiltertypefields === true) {\r\n                            dataList.push({...x.realData,\"ismandatory\":x.ismandatory});\r\n                            if(x.ismandatory){\r\n                                ismandatory=true\r\n                            }\r\n                        }\r\n                    })\r\n                    if(ismandatory && (this.props.Login.filterquery===\"\" || this.props.Login.filterquery===undefined)){\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n                    }else{\r\n                    designData[formCode.SAMPLEREGISTRATION]['samplefiltertypefields'] = dataList;\r\n                    designData[formCode.RELEASE]['samplefiltertypefields'] = dataList;\r\n                    designData[formCode.RELEASE]['defaultstructure']={\r\n                        nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value,\r\n                        nsampletypecode:this.props.Login.masterData.realSampleValue.value,\r\n                        nregtypecode:this.props.Login.masterData.realRegTypeValue.value,\r\n                        awesomeTree:this.props.Login.awesomeTree,\r\n                        awesomeConfig:this.props.Login.awesomeConfig,\r\n                        filterquery:this.props.Login.filterquery,\r\n                        filterQueryTreeStr:this.props.Login.filterQueryTreeStr}\r\n                   \r\n\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n         \r\n\r\n              let postParam = undefined;\r\n              const inputParam = {\r\n                  classUrl: \"designtemplatemapping\",\r\n                  methodUrl: \"DesignTemplateMapping\",\r\n                  inputData: inputData,\r\n                  operation,\r\n                   postParam, searchRef: this.searchRef,\r\n                   dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n              }\r\n              const masterData = this.props.Login.masterData;\r\n              if (\r\n                  showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                  const updateInfo = {\r\n                      typeName: DEFAULT_RETURN,\r\n                      data: {\r\n                          loadEsign: true, screenData: { inputParam, masterData }, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                      }\r\n                  }\r\n                  this.props.updateStore(updateInfo);\r\n              }\r\n              else {\r\n                  this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n              }\r\n            }\r\n          }\r\n         else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n          }\r\n        }else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CONFIGUREMANDATORYFIELDS\" })); \r\n        }\r\n    }\r\n\r\n    checkMandatoryFilter =(treeData,config)=> {\r\n        let ParentItem = { ...treeData };\r\n        let mandatoryList=[];\r\n        let treeDateList=[];\r\n        let isFilterEmpty=false;\r\n            let childArray = ParentItem.children1;\r\n            this.state.sampleReportFilterTypeData.sample.map(x=>{\r\n                if( x['ismandatory']){\r\n                mandatoryList.push(x);\r\n                }\r\n            if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    if (!childData.hasOwnProperty('children1')) {\r\n                       if(config && config.fields[childData.properties.field]['label']===x['label'] && x['ismandatory']){\r\n                        isFilterEmpty=true;\r\n                        treeDateList.push(childData.properties.field);\r\n                       }\r\n                    } else {\r\n                        if (childData) {\r\n                            ParentItem = checkFilterIsEmptyQueryBuilder(childData)\r\n                            if(!ParentItem){\r\n                                return ParentItem;\r\n                            }\r\n                        } \r\n                    }\r\n                }\r\n            }\r\n        })\r\n        let uniqueSet = new Set(treeDateList);\r\n        let uniqueArray = Array.from(uniqueSet);\r\n        if(uniqueArray.length !== mandatoryList.length){\r\n            isFilterEmpty=false;\r\n        }\r\n        if(mandatoryList.length === 0){\r\n            isFilterEmpty=true;\r\n        }\r\n            return isFilterEmpty;\r\n      }\r\n\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = {\r\n                inputListName: \"DesignTemplateMapping\",\r\n                selectedObject: \"selectedDesignTemplateMapping\",\r\n                primaryKeyField: \"ndesigntemplatemappingcode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                fetchUrl: \"designtemplatemapping/getDesignTemplateMappingById\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    ...inputData,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                screenName: 'Template Mapping',\r\n                operation: \"delete\", postParam,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\", screenName: 'Template Mapping'\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n\r\n    deleteCombinationUnique = (index, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            let dataList = this.props.Login.subsampledataList || []\r\n            let dataListCount = this.props.Login.subsampledataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { subsampledataListCount: dataListCount, subsampledataList: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            let dataList = this.props.Login.dataList || []\r\n            let dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    addCombinatonUnique = (designData, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCountSubSample || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCountSubSample: dataListCount, dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    openCombinationUniqueFieldConfiguration = (controlCode) => {\r\n        let openModal = true;\r\n        let operation = 'configureunique';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (this.props.Login.masterData.realSampleValue \r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters \r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN \r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL\r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.STABILITY) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.combinationUniqueConfigService(inputParam)\r\n    }\r\n\r\n    openFieldConfiguration = (controlCode, operation) => {\r\n        let openModal = true;\r\n        //let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (this.props.Login.masterData.realSampleValue \r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters\r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN \r\n            && this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL\r\n           // && this.props.Login.masterData.realSampleValue.value !== SampleType.STABILITY\r\n        ) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n\r\n    editFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                nregtypecode: this.props.Login.masterData.realSampleValue && \r\n                              this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && \r\n                              this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && \r\n                              this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ?\r\n                              this.props.Login.masterData.defaultregtype.value :-1 ,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue && \r\n                                 this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && \r\n                                 this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && \r\n                                 this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ?\r\n                                 this.props.Login.masterData.defaultregsubtype.value:-1,\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\r\n        //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        //  }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.editFieldConfigService(inputParam)\r\n    }\r\n\r\n    mappingFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let displayname = \"ConfigSendTOStore\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName, displayname\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n        this.props.mappingFieldConfigService(inputParam)\r\n    }\r\n\r\n    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n    auditFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || \r\n                this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || \r\n                this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ||\r\n                this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || \r\n                this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                //nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.auditFieldConfigService(inputParam)\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.loadEsign) {\r\n            if (operation === \"configurechecklistadd\") {\r\n                selectedRecord = {}\r\n                loadEsign = false;\r\n                operation = \"configurechecklist\"\r\n            }\r\n            else if (operation === \"Approve\"\r\n                || operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? true : false;\r\n                selectedRecord = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.state.selectedRecord : {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else if (operation === \"configurechecklistadd\") {\r\n            selectedRecord = {}\r\n            operation = \"configurechecklist\"\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { operation, openModal, loadEsign, selectedRecord, selectedId: null, dataList: [], dataListCount: [], dataListSubSample: [], dataListCountSubSample: [] }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, screenName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (screenName === \"Sample\") {\r\n            if (fieldName == \"Quantity\") {\r\n                selectedRecord[\"Quantity\"] = comboData;\r\n            } else {\r\n                selectedRecord[\"Unit\"] = comboData;\r\n            }\r\n        }\r\n        else if (screenName === \"SubSample\") {\r\n            if (fieldName == \"Quantity\") {\r\n                selectedRecord[\"SubQuantity\"] = comboData;\r\n            } else {\r\n                selectedRecord[\"SubUnit\"] = comboData;\r\n            }\r\n        }\r\n        else if(screenName === \"Masters\"){\r\n           selectedRecord[\"nnewmodule\"] = comboData;\r\n           selectedRecord[\"nmodulecode\"]= [];\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n//Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n    onConfigureComboChange = (comboData, formCode, item) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (item === \"Quantity\" || item === \"Unit\") {\r\n            const fieldName = item;\r\n            selectedRecord[fieldName] = comboData;\r\n        } else {\r\n            const fieldName = item.label;\r\n            if( this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL){\r\n                selectedRecord = { ...selectedRecord, [fieldName]: comboData };  \r\n            }else {\r\n            selectedRecord[formCode] = { ...selectedRecord[formCode], [fieldName]: comboData };\r\n            selectedRecord[244] = { ...selectedRecord[244], [fieldName]: comboData };\r\n\r\n        }\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n//   commented by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n    // onConfigureComboChange = (comboData, formCode, item) => {\r\n    //     if (item === \"Quantity\") {\r\n    //         const fieldName = item;\r\n    //         const selectedRecord = this.state.selectedRecord || {};\r\n    //         selectedRecord[fieldName] = comboData;\r\n    //         this.setState({ selectedRecord });\r\n    //     } else if (item === \"Unit\") {\r\n    //         const fieldName = item;\r\n    //         const selectedRecord = this.state.selectedRecord || {};\r\n    //         selectedRecord[fieldName] = comboData;\r\n    //         this.setState({ selectedRecord });\r\n    //     } else {\r\n    //         const fieldName = item.label;\r\n    //         const selectedRecord = this.state.selectedRecord || {};\r\n    //         selectedRecord[formCode] = { ...selectedRecord[formCode], [fieldName]: comboData };\r\n\r\n    //         this.setState({ selectedRecord });\r\n    //     }\r\n        // let designData = this.props.Login.editFieldDesignData;\r\n        // let dataResult = this.props.Login.editFieldDataResult;\r\n        // if (formCode === undefined){\r\n        //     dataResult[dataIndex][field] = event.target.checked;\r\n        //     if (event.target.checked) {\r\n        //         designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n        //     } else {\r\n        //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     dataResult[formCode][\"sampleeditable\"] = comboData;\r\n        //     if (event.target.checked) {\r\n        //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n        //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n        //         } else {\r\n        //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n        //         }\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n        //         }\r\n        //     } else {\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n        //         }\r\n        //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { designData, dataResult }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n    //}\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            if (event.target.name === \"sviewname\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validateCreateView(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                //  selectedRecord[event.target.name] =  event.target.value.replace(/[^a-z]/g, '');\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata, task) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let templatemandatoryfields =[];\r\n        const masterexportfields = []\r\n        let deleteValidation = [];\r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"ndynamicmastercode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"DynamicMaster Code PK\",\r\n                \"ru-RU\": \"Код DynamicMaster ПК\",\r\n                \"tg-TG\": \"Рамзи DynamicMaster PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            if (componentRow.isExportField) {\r\n                                masterexportfields.push(componentRow)\r\n                            }\r\n\r\n                            if(componentRow.mandatory){\r\n                                templatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                    [designProperties.LISTITEM]: componentRow.inputtype //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                })\r\n                            }\r\n\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype } })\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"foreigntableformcode\": componentRow.table.item.nformcode,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    \"tablecolumnname\": componentRow.label,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    \"parentforeignPK\": componentRow.displaymember,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label ,[designProperties.LISTITEM] : componentRow.inputtype }) //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM] : componentRow.inputtype  }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label ,[designProperties.LISTITEM] : componentRow.inputtype }) //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (component.isExportField) {\r\n                            masterexportfields.push(component)\r\n                        }\r\n\r\n                        if(component.mandatory){\r\n                            templatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                                [designProperties.LISTITEM]: component.inputtype //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                            })\r\n                        }\r\n\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype } }) //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsonuidata\"\r\n                        })\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype }) //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"foreigntableformcode\": component.table.item.nformcode,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                \"parentforeignPK\": component.displaymember,\r\n                                ...comboDataInputObject\r\n                            })\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"viewvaluemember\": component.label,\r\n                                \"valuemember\": component.valuemember,\r\n                                \"displaymember\": component.displaymember,\r\n                                \"mastertablename\": component.source,\r\n                                \"needmasterdata\": true,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                            || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype }) //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype }); //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {\r\n\r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields,\r\n            masterexportfields,\r\n            templatemandatoryfields,\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey: \"ndynamicmastercode\", deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n    }\r\n\r\n    getGoodsInJsondata = (templatedata, task) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let datefields = [];\r\n        let dateconstraints = [];\r\n        let uniquevalidation = [];\r\n        let combinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let templatefields = [];\r\n        let nonmandatoryExportFields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let deleteValidation = [];\r\n        let exportFields =[];\r\n        let templatemandatoryfields =[];\r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"ngoodsinsamplecode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"GoodsIn Sample Code PK\",\r\n                \"ru-RU\": \"Товары в коде PK\",\r\n                \"tg-TG\": \"МолҳоДар Кодекси PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            // if (componentRow.isExportField) {\r\n                            //     exportFields.push(componentRow)\r\n                            // }\r\n\r\n                            if(componentRow.mandatory === true){\r\n                               exportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }else {\r\n                                nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }\r\n\r\n\r\n                            if(componentRow.mandatory){\r\n                                templatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                    [designProperties.LISTITEM]: componentRow.inputtype //ALPD-5328 added by Dhanushya RI,to hide label input type in template mapping screen\r\n                                })\r\n                            }\r\n\r\n                            // if(componentRow.mandatory === false){\r\n                            //     nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // }\r\n\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            componentRow.unique && uniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && combinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype } })\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"foreigntableformcode\": componentRow.table.item.nformcode,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    \"tablecolumnname\": componentRow.label,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    \"parentforeignPK\": componentRow.displaymember,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                datefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }\r\n                            templatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n\r\n                        // if (component.isExportField) {\r\n                        //     exportFields.push(component)\r\n                        // }\r\n\r\n                        if(component.mandatory === true){\r\n                           exportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                        }else{\r\n                            nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype });\r\n\r\n                        }\r\n\r\n                        if(component.mandatory){\r\n                            templatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                                [designProperties.LISTITEM]: component.inputtype\r\n                            })\r\n                        }\r\n\r\n                        // if(component.mandatory === false){\r\n                        //     nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        // }\r\n\r\n\r\n                        component.unique && uniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && combinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsonuidata\"\r\n                        })\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        templatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"foreigntableformcode\": component.table.item.nformcode,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                \"parentforeignPK\": component.displaymember,\r\n                                ...comboDataInputObject\r\n                            })\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"viewvaluemember\": component.label,\r\n                                \"valuemember\": component.valuemember,\r\n                                \"displaymember\": component.displaymember,\r\n                                \"mastertablename\": component.source,\r\n                                \"needmasterdata\": true,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            datefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                            || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {\r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            datefields,\r\n            dateconstraints,\r\n            uniquevalidation,\r\n            editable,\r\n            templatefields,\r\n            combinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields,\r\n            exportFields,\r\n            nonmandatoryExportFields,\r\n            templatemandatoryfields,\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey: \"ngoodsinsamplecode\", deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n    }\r\n\r\n    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n    getProtocolJsondata = (templatedata, task) => {\r\n        let maximumCount=parseInt(this.props.Login.settings && this.props.Login.settings['60']);\r\n        let gridItem = [{\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"ProtocolId\"] && this.props.Login.genericLabel[\"ProtocolId\"][\"jsondata\"][\"sdisplayname\"],\r\n            [designProperties.VALUE]: 'sprotocolid'\r\n\r\n        }];\r\n        let gridMoreItem = [];\r\n        let datefields = [];\r\n        let dateconstraints = [];\r\n        let uniquevalidation = [];\r\n        let combinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let templatefields = [];\r\n        let nonmandatoryExportFields = [];\r\n        let sampleAuditFields = [\"sprotocolid\",\"stransactionstatus\"];\r\n        let sampleAuditEditable = [\"sprotocolid\",\"stransactionstatus\"];\r\n        let sampleAuditMultilingualFields = [{\r\n            \"sprotocolid\": this.props.Login.genericLabel[\"ProtocolId\"] && this.props.Login.genericLabel[\"ProtocolId\"][\"jsondata\"][\"sdisplayname\"],\r\n            \"stransactionstatus\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]\r\n        }];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let deleteValidation = [];\r\n        let exportFields =[];\r\n        let templatemandatoryfields =[];\r\n        let searchfields = [\"sprotocolid\",\"stransdisplaystatus\",\"sactivestatus\"];\r\n        let listItem = [ ];\r\n        let displayFields = [{\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"ProtocolId\"] && this.props.Login.genericLabel[\"ProtocolId\"][\"jsondata\"][\"sdisplayname\"],\r\n            [designProperties.VALUE]: 'sprotocolid'\r\n\r\n        } ];\r\n        \r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"nprotocolcode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Protocol Code PK\",\r\n                \"ru-RU\": \"Protocol Code PK\",\r\n                \"tg-TG\": \"Protocol Code PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            // if (componentRow.isExportField) {\r\n                            //     exportFields.push(componentRow)\r\n                            // }\r\n\r\n                            if(componentRow.mandatory === true){\r\n                               exportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }else {\r\n                                nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }\r\n\r\n\r\n                            if(componentRow.mandatory){\r\n                                templatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                    [designProperties.LISTITEM]: componentRow.inputtype\r\n                                })\r\n                            }\r\n\r\n                            // if(componentRow.mandatory === false){\r\n                            //     nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // }\r\n\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            componentRow.unique && uniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && combinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype  } })\r\n\r\n                            if(componentRow.name === undefined){\r\n                                searchfields.push(componentRow.label)\r\n\r\n                            }\r\n\r\n                            displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n\r\n                            if(!(listItem.length >= maximumCount)){\r\n                                componentRow.mandatory && \r\n                               listItem.push({ [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                    [designProperties.LISTITEM]: componentRow.inputtype })\r\n                            }\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? \"protocol\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"foreigntableformcode\": componentRow.table.item.nformcode,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    \"tablecolumnname\": componentRow.label,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    \"parentforeignPK\": componentRow.displaymember,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                datefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }\r\n                            templatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype  })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n\r\n                        // if (component.isExportField) {\r\n                        //     exportFields.push(component)\r\n                        // }\r\n\r\n                        if(component.mandatory === true){\r\n                           exportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                        }else{\r\n                            nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n\r\n                        }\r\n\r\n                        if(component.mandatory){\r\n                            templatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                                [designProperties.LISTITEM]: component.inputtype \r\n                            })\r\n                        }\r\n\r\n                        // if(component.mandatory === false){\r\n                        //     nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        // }\r\n\r\n\r\n                        component.unique && uniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && combinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsonuidata\"\r\n                        })\r\n\r\n                        if(component.name === undefined){\r\n                            searchfields.push(component.label)\r\n\r\n                        }\r\n                        displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n\r\n                        if(!(listItem.length >= maximumCount)){\r\n                            component.mandatory && \r\n                           listItem.push({ [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                                [designProperties.LISTITEM]: component.inputtype })\r\n                        }\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        templatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label ,[designProperties.LISTITEM]: component.inputtype })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? \"protocolversion\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"foreigntableformcode\": component.table.item.nformcode,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                \"parentforeignPK\": component.displaymember,\r\n                                ...comboDataInputObject\r\n                            })\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"viewvaluemember\": component.label,\r\n                                \"valuemember\": component.valuemember,\r\n                                \"displaymember\": component.displaymember,\r\n                                \"mastertablename\": component.source,\r\n                                \"needmasterdata\": true,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            datefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                            || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {\r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            datefields,\r\n            dateconstraints,\r\n            uniquevalidation,\r\n            editable,\r\n            templatefields,\r\n            combinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields,\r\n            exportFields,\r\n            nonmandatoryExportFields,\r\n            templatemandatoryfields,\r\n            searchfields,\r\n            listItem,\r\n            displayFields,\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey: \"nprotocolcode\", deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n    }\r\n\r\n    getJsondata = (templatedata) => {\r\n        let maximumCount=parseInt(this.props.Login.settings && this.props.Login.settings['60']);\r\n        //let displayFields = [];\r\n        //ALPD-533\r\n        let displayFields = [{\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL },\r\n            [designProperties.VALUE]: 'sarno'\r\n        },\r\n            //Below commented code only for NFC project\r\n    // {\r\n    //     [designProperties.LABEL]: this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\r\n    //     [designProperties.VALUE]: 'ntestcount'  \r\n    //         }\r\n        ];\r\n        let listItem = [ ]\r\n        // let gridItem = [];\r\n        let gridItem = [{\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL }, \r\n            [designProperties.VALUE]: \"sarno\"\r\n        }];\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\",\"sstoragestatus\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\",\"sstoragestatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let samplecombinationunique = [];\r\n        let subsamplecombinationunique = [];\r\n\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let subSampleAuditFields = [];\r\n        let subSampleAuditEditable = [];\r\n        let subSampleAuditMultilingualFields = [];\r\n        let deleteValidation = [];\r\n        let sampletemplatemandatoryfields = [];\r\n        let subsampletemplatemandatoryfields = [];\r\n\r\n        const sampleExportFields = []\r\n        const subSampleExportFields = []\r\n        const sampletemplatemandatory = []\r\n\r\n        //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \r\n\r\n        sampleAuditFields = [\"sarno\"];\r\n        sampleAuditEditable = [\"sarno\"];\r\n        sampleAuditMultilingualFields = [{\r\n            \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL } \r\n        }];\r\n        subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditMultilingualFields = [{\r\n            \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL } \r\n        },\r\n        {\r\n            \"ssamplearno\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"]//{ ...SUBARNOMULTILINGUAL } \r\n        }];\r\n        //}\r\n\r\n        ////////////////////////////////////////////\r\n        // let sampleAuditFields = SAMPLEAUDITFIELDS;\r\n        // let sampleAuditEditable = SAMPLEAUDITEDITABLE\r\n        // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\r\n        // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\r\n        // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\r\n        // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\r\n\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false },\r\n        { [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            if (componentRow.isExportField) {\r\n                                subSampleExportFields.push(componentRow.label)\r\n                            }\r\n\r\n\r\n\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && subsamplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype } })\r\n                            subsamplesearchfields.push(componentRow.label);\r\n\r\n                            subsampletemplatefields.push({\r\n                                [designProperties.LABEL]: componentRow.displayname,\r\n                                [designProperties.VALUE]: componentRow.label,\r\n                                [designProperties.LISTITEM]: componentRow.inputtype,\r\n                                [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                            })\r\n                            if(componentRow.mandatory){\r\n                                subsampletemplatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                    [designProperties.LISTITEM]: componentRow.inputtype\r\n                            })\r\n                        }\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                    \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n                            }\r\n                            subSampleAuditFields.push(componentRow.label);\r\n                            subSampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n                            if (componentRow.mandatory) {\r\n                                subSampleAuditEditable.push(componentRow.label);\r\n                            }\r\n\r\n                            if (componentRow.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype })\r\n                        }\r\n                        )\r\n                    } else {\r\n\r\n                        if (component.templatemandatory) {\r\n                            sampletemplatemandatory.push(component.label)\r\n                        }\r\n                        if (component.isExportField) {\r\n                            subSampleExportFields.push(component.label)\r\n                        }\r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && subsamplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label ,[designProperties.LISTITEM]: component.inputtype} })\r\n                        subsamplesearchfields.push(component.label);\r\n\r\n                        subsampletemplatefields.push({\r\n                            [designProperties.LABEL]: component.displayname,\r\n                            [designProperties.VALUE]: component.label,\r\n                            [designProperties.LISTITEM]: component.inputtype,\r\n                            [designProperties.PRIMARYKEY]: component.valuemember,\r\n                            [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                        })\r\n                        if(component.mandatory){\r\n                            subsampletemplatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                                [designProperties.LISTITEM]: component.inputtype\r\n                        })\r\n                    }\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.table.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                //\"nformcode\":component.table.item.nformcode,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n                        subSampleAuditFields.push(component.label);\r\n                        subSampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.mandatory) {\r\n                            subSampleAuditEditable.push(component.label);\r\n                        }\r\n                        if (component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n\r\n\r\n                    if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                        if (component.hasOwnProperty('children')) {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                // let combinedField = [];\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.templatemandatory) {\r\n                                        sampletemplatemandatory.push(componentRow.label)\r\n                                    }\r\n\r\n\r\n                                    if (componentRow.isExportField) {\r\n                                        sampleExportFields.push(componentRow.label)\r\n                                    }\r\n                                    // combinedField.push(componentRow.label)\r\n                                    jdynamiccolumns.push({\r\n                                        columnname: componentRow.label,\r\n                                        displayname: componentRow.displayname\r\n                                    })\r\n                                    if (componentRow.hasOwnProperty('child')) {\r\n                                        componentRow.child.map(childData => {\r\n                                            jnumericcolumns.push({\r\n                                                \"columnname\": componentRow.label,\r\n                                                \"displayname\": componentRow.displayname,\r\n                                                \"foriegntablePK\": componentRow.label,\r\n                                                // \"ismultilingual\": true,\r\n                                                // \"conditionstring\": \" and nformcode in (140) \",\r\n                                                \"tablecolumnname\": childData.tablecolumnname,\r\n                                                \"foriegntablename\": \"dynamicmaster\"\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                            \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                            \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                            //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            //\"nformcode\":componentRow.table.item.nformcode,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                        });\r\n                                    }\r\n                                    componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                                    componentRow.unique && samplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                                    if (componentRow.name === undefined || componentRow.name !== 'manualsampleid') {\r\n                                        samplesearchfields.push(componentRow.label)\r\n                                        sampletemplatefields.push({\r\n                                            [designProperties.LABEL]: componentRow.displayname,\r\n                                            [designProperties.VALUE]: componentRow.label,\r\n                                            [designProperties.LISTITEM]: componentRow.inputtype,    \r\n                                            [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                            [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode,\r\n                                            [designProperties.TABLENAME]: componentRow.table && componentRow.table.item && componentRow.table.item.stablename,\r\n                                            [designProperties.COLUMNNAME]: componentRow.column && componentRow.column.item &&  componentRow.column.item.columnname,\r\n                                            [designProperties.component]:  componentRow.isMultiLingual ?\"isMultiLingual\" :undefined ,\r\n                                            [designProperties.RECORDTYPE]: \"dynamic\"  \r\n                                        })\r\n                                        if(componentRow.mandatory){\r\n                                            sampletemplatemandatoryfields.push({\r\n                                                [designProperties.LABEL]: componentRow.displayname,\r\n                                                [designProperties.VALUE]: componentRow.label,\r\n                                            })\r\n                                        }\r\n                                        displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype });\r\n\r\n                                        if(!(listItem.length >= maximumCount)){\r\n                                         componentRow.mandatory && \r\n                                        listItem.push({ [designProperties.LABEL]: componentRow.displayname,\r\n                                             [designProperties.VALUE]: componentRow.label,\r\n                                              [designProperties.LISTITEM]: componentRow.inputtype })\r\n                                        }\r\n\r\n\r\n                                        if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                            gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype })\r\n                                            sampleAuditEditable.push(componentRow.label);\r\n                                        }\r\n                                        else {\r\n                                            gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype });\r\n                                        }\r\n                                        if (componentRow.templatemandatory) {\r\n                                            editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                        }\r\n                                        else {\r\n                                            if (componentRow.readonly)\r\n                                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                            else\r\n                                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    sampleAuditFields.push(componentRow.label);\r\n                                    sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n                                    if (componentRow.inputtype === 'date') {\r\n                                        sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                        sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                    return null;\r\n                                })\r\n                                // let fieldSet = combinedField.join(\"&\")\r\n                                // displayFields.push(fieldSet);\r\n                                // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                                // gridMoreItem.push(fieldSet);\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n\r\n\r\n                            if (component.templatemandatory) {\r\n                                sampletemplatemandatory.push(component.label)\r\n                            }\r\n                            if (component.isExportField) {\r\n                                sampleExportFields.push(component.label)\r\n                            }\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                //console.log(\"componentRow main:\", component);\r\n                                jdynamiccolumns.push({\r\n                                    columnname: component.label,\r\n                                    displayname: component.displayname\r\n                                });\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.table.valuemember,\r\n                                        \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                        \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                        //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                                if (component.hasOwnProperty('child')) {\r\n                                    component.child.map(childData => {\r\n                                        jnumericcolumns.push({\r\n                                            \"columnname\": component.label,\r\n                                            \"displayname\": component.displayname,\r\n                                            \"foriegntablePK\": component.label,\r\n                                            // \"ismultilingual\": true,\r\n                                            // \"conditionstring\": \" and nformcode in (140) \",\r\n                                            \"tablecolumnname\": childData.tablecolumnname,\r\n                                            \"foriegntablename\": \"dynamicmaster\"\r\n                                        })\r\n                                    })\r\n                                }\r\n                                component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                                component.unique && samplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype } })\r\n\r\n\r\n\r\n                                if (component.name === undefined || component.name !== 'manualsampleid') {\r\n\r\n                                    samplesearchfields.push(component.label)\r\n                                    sampletemplatefields.push({\r\n                                        [designProperties.LABEL]: component.displayname,\r\n                                        [designProperties.VALUE]: component.label,\r\n                                        [designProperties.LISTITEM]: component.inputtype,\r\n                                        [designProperties.PRIMARYKEY]: component.valuemember,\r\n                                        [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode,\r\n                                        [designProperties.TABLENAME]: component.table && component.table.item && component.table.item.stablename,\r\n                                        [designProperties.COLUMNNAME]: component.column && component.column.item && component.column.item.columnname,\r\n                                        [designProperties.MULTILINGUAL]: component.isMultiLingual ?\"isMultiLingual\" :undefined ,\r\n                                        [designProperties.RECORDTYPE]: \"dynamic\"  \r\n                                    })\r\n                                    if(component.mandatory){\r\n                                        sampletemplatemandatoryfields.push({\r\n                                            [designProperties.LABEL]: component.displayname,\r\n                                            [designProperties.VALUE]: component.label,\r\n                                        })\r\n                                    }\r\n\r\n                                    displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype })\r\n                                    if (component.mandatory ) {\r\n                                        gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype })\r\n                                        if(!(listItem.length >= maximumCount)){\r\n                                        listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype, mandatory: true })\r\n                                        }\r\n                                        sampleAuditEditable.push(component.label);\r\n                                    } else {\r\n                                        gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n                                    }\r\n                                    if (component.templatemandatory) {\r\n                                        editable.push({ label: component.label, editableuntill: [] })\r\n                                    }\r\n                                    else {\r\n                                        // editable.push({ label: component.label, editableuntill: [17] })\r\n                                        if (component.readonly)\r\n                                            editable.push({ label: component.label, editableuntill: [] })\r\n                                        else\r\n                                            editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                    }\r\n\r\n                                }\r\n                                sampleAuditFields.push(component.label);\r\n                                sampleAuditMultilingualFields.push({ [component.label]: component.displayname })\r\n                                if (component.inputtype === 'date') {\r\n                                    sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                                    sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                }\r\n\r\n                                return null;\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n\r\n        displayFields.push({\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\r\n            [designProperties.VALUE]: 'dregdate'\r\n        });\r\n        const testListFields = { ...this.props.Login.testListFields };\r\n\r\n        testListFields.testlistitem.push({\r\n            \"1\": this.props.Login.genericLabel[\"AnalyserName\"] && this.props.Login.genericLabel[\"AnalyserName\"][\"jsondata\"][\"sdisplayname\"],\r\n            \"2\": \"AnalyserName\"\r\n        })\r\n    \r\n        //Below commented code only for NFC\r\n    //     if(!(listItem.length >= maximumCount)){\r\n    //     listItem.push({\r\n    //         [designProperties.LABEL]: this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\r\n    //         [designProperties.VALUE]: 'ntestcount'  \r\n    //     })\r\n    // }\r\n\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            samplecombinationunique,\r\n            testListFields,\r\n            deleteValidation,samplefilteritem:[]\r\n        }\r\n\r\n\r\n        sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\r\n        sampleAuditEditable.push(\"stransdisplaystatus\");\r\n        subSampleAuditFields.push(\"stransdisplaystatus\");\r\n        subSampleAuditEditable.push(\"stransdisplaystatus\");\r\n        sampleAuditMultilingualFields.push({ \"dregdate\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"] },\r\n            { \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"] });\r\n        subSampleAuditMultilingualFields.push({\r\n            \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]//{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } \r\n        });\r\n        let SAMPLETEMPLATEFIELDS =[{\r\n                \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sarno\",\r\n                \"3\":\"textinput\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"Specification\"] && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sspecname\",\r\n                \"3\":\"textinput\"\r\n            },\r\n             {\r\n                \"1\": this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"dregdate\",\r\n                \"3\":\"date\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"stransdisplaystatus\",\r\n                \"3\":\"textinput\"\r\n            }\r\n            // ,\r\n            // {\r\n            //     \"1\": this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\r\n            //     \"2\": \"ntestcount\",\r\n            //     \"3\":\"numeric\"\r\n            // }\r\n        ];\r\n\r\n    let  SUBSAMPLETEMPLATEFIELDS=[\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sarno\"\r\n            },\r\n             {\r\n                \"1\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"ssamplearno\"\r\n            },\r\n             {\r\n                \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"stransdisplaystatus\"\r\n            }\r\n         ];\r\n    \r\n        let RELEASESAMPLETEMPLATEFIELDS=[\r\n            {\r\n                \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ReleaseNo.\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sreportno\"\r\n            }\r\n        ];\r\n\r\n        let jsondata = {\r\n\r\n            subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            sampletemplatefields: [...RELEASESAMPLETEMPLATEFIELDS, ...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\r\n            sampletemplatemandatoryfields:[...SAMPLETEMPLATEFIELDS, ...sampletemplatemandatoryfields],\r\n            subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],//: subsamplesearchfields,\r\n            subsampletemplatemandatoryfields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatemandatoryfields],\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique,\r\n                sampleExportFields,\r\n                subSampleExportFields,\r\n\r\n            },\r\n            [formCode.STUDYALLOCATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique,\r\n                sampleExportFields,\r\n                subSampleExportFields,\r\n\r\n            },\r\n            // ALPD-4914 Added codes for scheduler configuration screen\r\n            [formCode.SCHEDULERCONFIGURATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique,\r\n                sampleExportFields,\r\n                subSampleExportFields,\r\n\r\n            },\r\n            [formCode.RESULTENTRY]: { ...obj, },\r\n            [formCode.APPROVAL]: { ...obj, },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n                samplegriditem: [\r\n                    ...obj.samplegriditem,\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Section\"\r\n                    },\r\n                ],\r\n                samplesearchfields: [\r\n                    ...obj.samplesearchfields,\r\n                    \"Section\"\r\n                ],\r\n                subsamplesearchfields: [\r\n                    ...obj.subsamplesearchfields,\r\n                    \"ssectionname\"\r\n                ],    \r\n\r\n                testgriditem: [\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"TestSynonym\"] && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"stestsynonym\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"Technique\"] && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Technique\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"Users\"] && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Users\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentCategory\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentName\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentName\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentId\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentId\"\r\n                    }\r\n                ],\r\n                samplelistitem: [\r\n                    ...obj.samplelistitem,\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Section\"\r\n                    }\r\n                    //Below commented code only for NFC\r\n                    // ,\r\n                    // {\r\n                    //     [designProperties.LABEL]: this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\r\n                    //     [designProperties.VALUE]: 'ntestcount'  \r\n                    // }\r\n                ],\r\n                subsamplelistitem: [\r\n                    ...obj.subsamplelistitem,\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                ],\r\n                testdisplayfields: [\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"stestsynonym\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Technique\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Users\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentCategory\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentName\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentName\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentId\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentId\"\r\n                    }\r\n                ],\r\n                testgridmoreitem: [\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserStartDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserStartDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserEndDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserEndDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserDuration\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserDuration\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentStartDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentStartDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentEndDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentEndDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentDuration\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentDuration\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Comments\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Comments\"\r\n                    }\r\n                ]\r\n\r\n            },\r\n            [formCode.MYJOBS]: { ...obj, },\r\n            [formCode.WORKLIST]: { ...obj, },\r\n            [formCode.BATCHCREATION]: {\r\n\r\n                samplegriditem: [\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"sarno\"\r\n                    },\r\n                    ...obj.samplegriditem,\r\n\r\n                ],\r\n\r\n                subsamplelistitem: [{\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem,\r\n                ],\r\n                ...obj,\r\n            },\r\n            [formCode.TESTWISEMYJOBS]: { ...obj, },\r\n            [formCode.RELEASE]: {\r\n                ...obj,\r\n                subsamplelistitem: [{\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem],\r\n                sampledisplayfields: [{\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ReleaseNo.\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"sreportno\"\r\n                }, ...obj.sampledisplayfields],\r\n                samplegriditem: [{\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ReleaseNo.\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"sreportno\"\r\n                }, ...obj.samplegriditem]\r\n                //Below commented code only for NFC\r\n                //     ,\r\n                // {\r\n                //     \"1\": this.props.Login.genericLabel[\"TestCount\"] && this.props.Login.genericLabel[\"TestCount\"][\"jsondata\"][\"sdisplayname\"],\r\n                //     \"2\": \"ntestcount\"\r\n                // }\r\n            },\r\n            sampleAuditEditable,\r\n            sampleAuditFields,\r\n            sampleAuditMultilingualFields,\r\n            subSampleAuditEditable,\r\n            subSampleAuditFields,\r\n            subSampleAuditMultilingualFields,\r\n            deleteValidation,\r\n            sampletemplatemandatory\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n    getStabilityJsondata= (templatedata) => {\r\n        let maximumCount=parseInt(this.props.Login.settings && this.props.Login.settings['60']);\r\n        let displayFields = [];\r\n        let listItem = [ ]\r\n        let gridItem = [];\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let samplecombinationunique = [];\r\n        let subsamplecombinationunique = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let subSampleAuditFields = [];\r\n        let subSampleAuditEditable = [];\r\n        let subSampleAuditMultilingualFields = [];\r\n        let deleteValidation = [];\r\n        let sampletemplatemandatoryfields = [];\r\n        let subsampletemplatemandatoryfields = [];\r\n\r\n        const sampleExportFields = []\r\n        const subSampleExportFields = []\r\n        const sampletemplatemandatory = []\r\n    \r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            if (componentRow.isExportField) {\r\n                                subSampleExportFields.push(componentRow.label)\r\n                            }\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && subsamplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            subsamplesearchfields.push(componentRow.label);\r\n\r\n                            subsampletemplatefields.push({\r\n                                [designProperties.LABEL]: componentRow.displayname,\r\n                                [designProperties.VALUE]: componentRow.label,\r\n                                [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                            })\r\n                            if(componentRow.mandatory){\r\n                                subsampletemplatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                            })\r\n                        }\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistrationsample\",\r\n                                    \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n                            }\r\n                            subSampleAuditFields.push(componentRow.label);\r\n                            subSampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n                            if (componentRow.mandatory) {\r\n                                subSampleAuditEditable.push(componentRow.label);\r\n                            }\r\n\r\n                            if (componentRow.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype })\r\n                        }\r\n                        )\r\n                    } else {\r\n\r\n                        if (component.templatemandatory) {\r\n                            sampletemplatemandatory.push(component.label)\r\n                        }\r\n                        if (component.isExportField) {\r\n                            subSampleExportFields.push(component.label)\r\n                        }\r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && subsamplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        subsamplesearchfields.push(component.label);\r\n\r\n                        subsampletemplatefields.push({\r\n                            [designProperties.LABEL]: component.displayname,\r\n                            [designProperties.VALUE]: component.label,\r\n                            [designProperties.PRIMARYKEY]: component.valuemember,\r\n                            [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                        })\r\n                        if(component.mandatory){\r\n                            subsampletemplatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                        })\r\n                    }\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.table.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistrationsample\",\r\n                                \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n                        subSampleAuditFields.push(component.label);\r\n                        subSampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.mandatory) {\r\n                            subSampleAuditEditable.push(component.label);\r\n                        }\r\n                        if (component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                        if (component.hasOwnProperty('children')) {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.templatemandatory) {\r\n                                        sampletemplatemandatory.push(componentRow.label)\r\n                                    }\r\n\r\n\r\n                                    if (componentRow.isExportField) {\r\n                                        sampleExportFields.push(componentRow.label)\r\n                                    }\r\n                                    jdynamiccolumns.push({\r\n                                        columnname: componentRow.label,\r\n                                        displayname: componentRow.displayname\r\n                                    })\r\n                                    if (componentRow.hasOwnProperty('child')) {\r\n                                        componentRow.child.map(childData => {\r\n                                            jnumericcolumns.push({\r\n                                                \"columnname\": componentRow.label,\r\n                                                \"displayname\": componentRow.displayname,\r\n                                                \"foriegntablePK\": componentRow.label,\r\n                                                \"tablecolumnname\": childData.tablecolumnname,\r\n                                                \"foriegntablename\": \"dynamicmaster\"\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                            \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistration\",\r\n                                            \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                            //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            //\"nformcode\":componentRow.table.item.nformcode,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                        });\r\n                                    }\r\n                                    componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                                    componentRow.unique && samplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                                    if (componentRow.name === undefined || componentRow.name !== 'manualsampleid') {\r\n                                        samplesearchfields.push(componentRow.label)\r\n                                        sampletemplatefields.push({\r\n                                            [designProperties.LABEL]: componentRow.displayname,\r\n                                            [designProperties.VALUE]: componentRow.label,\r\n                                            [designProperties.LISTITEM]: componentRow.inputtype,    \r\n                                            [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                            [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode,\r\n                                            [designProperties.TABLENAME]: componentRow.table && componentRow.table.item && componentRow.table.item.stablename,\r\n                                            [designProperties.COLUMNNAME]: componentRow.column && componentRow.column.item &&  componentRow.column.item.columnname,\r\n                                            [designProperties.component]:  componentRow.isMultiLingual ?\"isMultiLingual\" :undefined ,\r\n                                            [designProperties.RECORDTYPE]: \"dynamic\"  \r\n                                        })\r\n                                        if(componentRow.mandatory){\r\n                                            sampletemplatemandatoryfields.push({\r\n                                                [designProperties.LABEL]: componentRow.displayname,\r\n                                                [designProperties.VALUE]: componentRow.label,\r\n                                            })\r\n                                        }\r\n                                        displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype });\r\n\r\n                                        if(!(listItem.length >= maximumCount)){\r\n                                         componentRow.mandatory && \r\n                                        listItem.push({ [designProperties.LABEL]: componentRow.displayname,\r\n                                             [designProperties.VALUE]: componentRow.label,\r\n                                              [designProperties.LISTITEM]: componentRow.inputtype })\r\n                                        }\r\n\r\n\r\n                                        if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                            gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                            sampleAuditEditable.push(componentRow.label);\r\n                                        }\r\n                                        else {\r\n                                            gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype });\r\n                                        }\r\n                                        if (componentRow.templatemandatory) {\r\n                                            editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                        }\r\n                                        else {\r\n                                            if (componentRow.readonly)\r\n                                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                            else\r\n                                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    sampleAuditFields.push(componentRow.label);\r\n                                    sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n                                    if (componentRow.inputtype === 'date') {\r\n                                        sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                        sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                    return null;\r\n                                })\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (component.templatemandatory) {\r\n                                sampletemplatemandatory.push(component.label)\r\n                            }\r\n                            if (component.isExportField) {\r\n                                sampleExportFields.push(component.label)\r\n                            }\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                //console.log(\"componentRow main:\", component);\r\n                                jdynamiccolumns.push({\r\n                                    columnname: component.label,\r\n                                    displayname: component.displayname\r\n                                });\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.table.valuemember,\r\n                                        \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"stbregistration\",\r\n                                        \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                        //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                                if (component.hasOwnProperty('child')) {\r\n                                    component.child.map(childData => {\r\n                                        jnumericcolumns.push({\r\n                                            \"columnname\": component.label,\r\n                                            \"displayname\": component.displayname,\r\n                                            \"foriegntablePK\": component.label,\r\n                                            // \"ismultilingual\": true,\r\n                                            // \"conditionstring\": \" and nformcode in (140) \",\r\n                                            \"tablecolumnname\": childData.tablecolumnname,\r\n                                            \"foriegntablename\": \"dynamicmaster\"\r\n                                        })\r\n                                    })\r\n                                }\r\n                                component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                                component.unique && samplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                                if (component.name === undefined || component.name !== 'manualsampleid') {\r\n                                    samplesearchfields.push(component.label)\r\n                                    sampletemplatefields.push({\r\n                                        [designProperties.LABEL]: component.displayname,\r\n                                        [designProperties.VALUE]: component.label,\r\n                                        [designProperties.LISTITEM]: component.inputtype,\r\n                                        [designProperties.PRIMARYKEY]: component.valuemember,\r\n                                        [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode,\r\n                                        [designProperties.TABLENAME]: component.table && component.table.item && component.table.item.stablename,\r\n                                        [designProperties.COLUMNNAME]: component.column && component.column.item && component.column.item.columnname,\r\n                                        [designProperties.MULTILINGUAL]: component.isMultiLingual ?\"isMultiLingual\" :undefined ,\r\n                                        [designProperties.RECORDTYPE]: \"dynamic\"  \r\n                                    })\r\n                                    if(component.mandatory){\r\n                                        sampletemplatemandatoryfields.push({\r\n                                            [designProperties.LABEL]: component.displayname,\r\n                                            [designProperties.VALUE]: component.label,\r\n                                        })\r\n                                    }\r\n\r\n                                    displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype })\r\n                                    if (component.mandatory ) {\r\n                                        gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype })\r\n                                        if(!(listItem.length >= maximumCount)){\r\n                                        listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype, mandatory: true })\r\n                                        }\r\n                                        sampleAuditEditable.push(component.label);\r\n                                    } else {\r\n                                        gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n                                    }\r\n                                    if (component.templatemandatory) {\r\n                                        editable.push({ label: component.label, editableuntill: [] })\r\n                                    }\r\n                                    else {\r\n                                        // editable.push({ label: component.label, editableuntill: [17] })\r\n                                        if (component.readonly)\r\n                                            editable.push({ label: component.label, editableuntill: [] })\r\n                                        else\r\n                                            editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                    }\r\n\r\n                                }\r\n                                sampleAuditFields.push(component.label);\r\n                                sampleAuditMultilingualFields.push({ [component.label]: component.displayname })\r\n                                if (component.inputtype === 'date') {\r\n                                    sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                                    sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                }\r\n\r\n                                return null;\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n\r\n        const testListFields = { ...this.props.Login.testListFields };\r\n\r\n\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            samplecombinationunique,\r\n            testListFields,\r\n            deleteValidation,samplefilteritem:[]\r\n        }\r\n\r\n        let jsondata = {\r\n            subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            sampletemplatefields: [  ...sampletemplatefields],\r\n            sampletemplatemandatoryfields:[ ...sampletemplatemandatoryfields],\r\n            subsampletemplatefields: [ ...subsampletemplatefields],\r\n            subsampletemplatemandatoryfields: [ ...subsampletemplatemandatoryfields],\r\n           \r\n            [formCode.STUDYALLOCATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique,\r\n                sampleExportFields,\r\n                subSampleExportFields,\r\n\r\n            },\r\n            sampleAuditEditable,\r\n            sampleAuditFields,\r\n            sampleAuditMultilingualFields,\r\n            subSampleAuditEditable,\r\n            subSampleAuditFields,\r\n            subSampleAuditMultilingualFields,\r\n            deleteValidation,\r\n            sampletemplatemandatory\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        if (operation === 'configureaudit') {\r\n            designData = this.props.Login.auditFieldDesignData;\r\n            dataResult = this.props.Login.auditFieldDataResult;\r\n        }\r\n\r\n        let tableName = \"registration\";\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            tableName = \"dynamicmaster\";\r\n        }\r\n\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n            tableName = \"goodsinsample\"\r\n        }\r\n\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL) {\r\n            tableName = \"protocol\"\r\n        }\r\n\r\n\r\n        if (formCode === undefined) {\r\n            dataResult[dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n            } else {\r\n                designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        else {\r\n            //dataResult[formCode][dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                let maximumCount=parseInt(this.props.Login.settings && this.props.Login.settings['60']);\r\n                if (field === 'samplelistitem' && designData[formCode][field].length >= maximumCount) {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n                }\r\n                else {\r\n\r\n                    if (field === 'sampledisplayfields') {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                        if(formCode==43)\r\n                        dataResult[244][dataIndex][field] = event.target.checked;\r\n                        designData[244]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\r\n                        designData[244][field].splice(dataIndex, 0, dataItem.realData);\r\n\r\n                    }\r\n                    else if (field === 'sampleauditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'sampleauditeditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditeditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (field === 'samplefilteritem') {\r\n                         if(dataResult[formCode][dataIndex]['sampledisplayfields']){\r\n                            let maximumCount=parseInt(this.props.Login.settings && this.props.Login.settings['55']);\r\n                            if(designData[formCode]['samplefilteritem'].length>=maximumCount){\r\n                                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONFORTHISFILTERITEM\"})+maximumCount)  \r\n                            }else{\r\n                             let index=designData['sampletemplatefields'].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE])\r\n                            dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                            designData[formCode]['samplefilteritem'].push(designData['sampletemplatefields'][index]);\r\n                            designData[244]['samplefilteritem'].push(designData['sampletemplatefields'][index]);\r\n\r\n                            }\r\n                         }else{\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENABLEDISPLAYFIELDSFORTHISFIELD\" })) \r\n                         }\r\n                        }\r\n                    else {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                        if(formCode==43)\r\n                        dataResult[244][dataIndex][field] = event.target.checked;\r\n\r\n                        designData[244][field].splice(dataIndex, 0, dataItem.realData);\r\n\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    \r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n\r\n                    const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n\t\t\t//ALPD-4941--Vignesh R(09-12-2024)---Sample configuration screen Audit\r\n                    if(formCode==43)\r\n                        dataResult[244][dataIndex][field] = event.target.checked;\r\n                        designData[244][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n                        const index1 = designData[244]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n    \r\n                    if (index !== -1) {\r\n                        designData[formCode]['samplesearchfields'].splice(index, 1)\r\n                        if(formCode===43)\r\n                        designData[244]['samplesearchfields'].splice(index1, 1)\r\n\r\n                    }\r\n                }\r\n                else if (field === 'sampleauditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode][tableName][field].splice(index, 1);\r\n                    }\r\n\r\n                    const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\r\n                    }\r\n\r\n                    const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'sampleauditeditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index4 !== -1) {\r\n                        designData[formCode][tableName][field].splice(index4, 1);\r\n                    }\r\n                }\r\n                else if (field === 'subsampleauditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1)\r\n                    }\r\n\r\n                    const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index2 !== -1) {\r\n                        designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\r\n                    }\r\n                    const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'subsampleauditeditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1);\r\n                    }\r\n                }\r\n                else {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1)\r\n\r\n                    if(formCode==43)\r\n                    dataResult[244][dataIndex][field] = event.target.checked;\r\n                    designData[244][field].splice(designData[244][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1)\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        let data = { designData, dataResult };\r\n        if (operation === 'configureaudit') {\r\n            data = {\r\n                auditFieldDesignData: designData,\r\n                auditFieldDataResult: dataResult\r\n            };\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { ...data }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onApproveSaveClick = () => {\r\n        this.onApproveClick();\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\r\n        //console.log(\"data:\", this.props.Login.editFieldDesignData)\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n        //const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        const needsubsample = this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN \r\n        || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? false \r\n        : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n        if (operation === 'Approve') {\r\n            this.onApproveClick()\r\n        } \r\n        else if (operation === 'configureunique') {\r\n            this.configureunique();\r\n        }\r\n        else if (operation === 'configurereleasesamplefilter') {\r\n                this.configurereportfiltertype();\r\n        }\r\n        else {\r\n            if (operation === 'configure' || operation === 'configuresubsample') {\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: this.props.Login.designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n                operation = 'configure'\r\n            }\r\n            else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\r\n\r\n                let designData = this.props.Login.editFieldDesignData;\r\n                let formCodeArray = Object.keys(this.state.selectedRecord);\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                if(this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL){                    \r\n                        const data = this.state.selectedRecord;    \r\n                        let editableData = designData['editable'];\r\n                        Object.keys(data).map(label => {\r\n                            const editableuntil = [];\r\n                            data[label].map(statusItem =>\r\n                                editableuntil.push(statusItem.value)\r\n                            )\r\n                            const index = editableData.findIndex(item => item.label === label);\r\n                            if (index === -1) {\r\n                                editableData.push({ \"label\": label, \"editableuntill\": editableuntil });\r\n                            }\r\n                            else {\r\n                                editableData[index] = { \"label\": label, \"editableuntill\": editableuntil };\r\n                            }\r\n                        })\r\n\r\n                \r\n                }else {\r\n                formCodeArray.forEach(formCode => {\r\n                    const data = this.state.selectedRecord[formCode];\r\n\r\n                    let editableData = designData[formCode]['sampleeditable'];;\r\n                    if (operation === 'configuresubsampleedit') {\r\n                        editableData = designData[formCode]['subsampleeditable'];;\r\n                    }\r\n\r\n                    Object.keys(data).map(label => {\r\n                        const editableuntil = [];\r\n                        data[label].map(statusItem =>\r\n                            editableuntil.push(statusItem.value)\r\n                        )\r\n                        const index = editableData.findIndex(item => item.label === label);\r\n                        if (index === -1) {\r\n                            editableData.push({ \"label\": label, \"editableuntill\": editableuntil });\r\n                        }\r\n                        else {\r\n                            editableData[index] = { \"label\": label, \"editableuntill\": editableuntil };\r\n                        }\r\n                        //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\r\n                    })\r\n\r\n                })\r\n                }\r\n\r\n                \r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n            }\r\n            // else if (operation === 'configureunique') {\r\n            //     let designData = this.props.Login.designData;\r\n            //     //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n            //     const dataList = []\r\n            //     const dataListsubsample = []\r\n            //     this.props.Login.dataList.map(x => {\r\n            //         if (Object.keys(x).length !== 0) {\r\n            //             dataList.push(x);\r\n            //         }\r\n            //     })\r\n            //     if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            //         designData['mastercombinationunique'] = dataList\r\n            //     }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n            //         designData['combinationunique'] = dataList\r\n            //     } \r\n            //     else {\r\n            //         designData['samplecombinationunique'] = dataList\r\n            //         designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n            //         this.props.Login.dataListSubSample.map(x => {\r\n            //             if (Object.keys(x).length !== 0) {\r\n            //                 dataListsubsample.push(x);\r\n            //             }\r\n            //         })\r\n            //         designData['subsamplecombinationunique'] = dataListsubsample\r\n            //         designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n            //     }\r\n\r\n\r\n\r\n            //     inputData = {\r\n            //         designtemplatemapping: {\r\n            //             ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n            //             jsondataobj: designData\r\n            //         },\r\n            //         userinfo: this.props.Login.userInfo\r\n            //     }\r\n\r\n            //     operation = 'configure';\r\n            // }\r\n            else if (operation === 'configureexportfields') {\r\n                let designData = this.props.Login.designData;\r\n\r\n                if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n                    const dataList = []\r\n                    this.props.Login.sampleexportdataResult.master.map(x => {\r\n                        if (x.sampleexportfields === true) {\r\n                            dataList.push(x.realData[designProperties.VALUE]);\r\n                        }\r\n                    })\r\n                    designData['masterexportfields'] = dataList\r\n                }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN){\r\n                    this.props.Login.sampleexportdataResult.master.map(x => {\r\n                    if(x.sampleexportfields === true){                        \r\n                        let checkArray=designData['exportFields'].map(item=>item['2'])\r\n                        if((checkArray.includes(x.realData['2']))=== false) {\r\n                            designData['exportFields'].push(x.realData)\r\n                        }\r\n\r\n                    }else{\r\n                        let index=designData['exportFields'].findIndex(y=>y['2']===x.realData['2'])\r\n                        if(index!==-1){\r\n                            designData['exportFields'].splice(index, 1);                           \r\n                        }\r\n                    }                    \r\n                    })   \r\n                } \r\n                else {\r\n                    const dataList = []\r\n                    this.props.Login.sampleexportdataResult.sample.map(x => {\r\n                        if (x.sampleexportfields === true) {\r\n                            dataList.push(x.realData[designProperties.VALUE]);\r\n                        }\r\n                    })\r\n                    if(this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY){\r\n                    designData[formCode.STUDYALLOCATION]['sampleExportFields'] = dataList\r\n                    const dataListSub = []\r\n                    this.props.Login.sampleexportdataResult.subsample.map(x => {\r\n                        if (x.sampleexportfields === true) {\r\n                            dataListSub.push(x.realData[designProperties.VALUE]);\r\n                        }\r\n                    })\r\n                    designData[formCode.STUDYALLOCATION]['subSampleExportFields'] = dataListSub\r\n                    }else{\r\n                    designData[formCode.SAMPLEREGISTRATION]['sampleExportFields'] = dataList\r\n\r\n                    }\r\n\r\n                    if(this.props.Login.masterData && this.props.Login.masterData.defaultregsubtype &&\r\n                        this.props.Login.masterData.defaultregsubtype.item && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample ){\r\n                        const dataListSub = []\r\n                        this.props.Login.sampleexportdataResult.subsample.map(x => {\r\n                            if (x.sampleexportfields === true) {\r\n                                dataListSub.push(x.realData[designProperties.VALUE]);\r\n                            }\r\n                        })\r\n                        designData[formCode.SAMPLEREGISTRATION]['subSampleExportFields'] = dataListSub\r\n                    }\r\n                    \r\n                }\r\n\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n            }\r\n            // else if (operation === 'configurereportfiltertype') {\r\n            //     let designData = this.props.Login.designData;\r\n\r\n            //         const dataList = []\r\n            //         this.state.sampleReportFilterTypeData.sample.map(x => {\r\n            //             if (x.samplefiltertypefields === true) {\r\n            //                 dataList.push(x.realData);\r\n            //             }\r\n            //         })\r\n            //         designData[formCode.SAMPLEREGISTRATION]['samplefiltertypefields'] = dataList;\r\n            //         designData[formCode.RELEASE]['samplefiltertypefields'] = dataList;\r\n            //         let isFilterEmpty = checkFilterIsEmptyQueryBuilder(this.props.Login.filterQueryTreeStr);\r\n            //         if(isFilterEmpty){\r\n            //         designData[formCode.RELEASE]['defaultstructure']={\r\n            //             nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value,\r\n            //             nsampletypecode:this.props.Login.masterData.realSampleValue.value,\r\n            //             nregtypecode:this.props.Login.masterData.realRegTypeValue.value,\r\n            //             awesomeTree:this.props.Login.awesomeTree,\r\n            //             awesomeConfig:this.props.Login.awesomeConfig}\r\n                   \r\n\r\n            //     inputData = {\r\n            //         designtemplatemapping: {\r\n            //             ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n            //             jsondataobj: designData\r\n            //         },\r\n            //         userinfo: this.props.Login.userInfo\r\n            //     }\r\n\r\n            //     operation = 'configure';\r\n            // } else {\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n            //   }\r\n            // }\r\n            else if (operation === 'configurechecklistadd') {\r\n                let designData = this.props.Login.designData;\r\n\r\n\r\n                if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n                    designData['checklist'] = { \"nchecklistversioncode\": this.state.selectedRecord.nchecklistversioncode.value }\r\n                }\r\n\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n            }\r\n            else if (operation === 'configureaudit') {\r\n                //console.log(\"auditFieldDesignData:\", this.props.Login);\r\n\r\n                inputData = {\r\n                    //dynamicaudit: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    auditdata: this.props.Login.auditData,\r\n                    //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \r\n                    //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \r\n                    //nformcode:43, stablename:'registration',\r\n\r\n                    // },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                //operation = 'configure';\r\n            } \r\n            else if (operation === 'configuresendtostore') {\r\n                // const sampleQty = new Map();\r\n                //  const sampleUnit = new Map();\r\n                // let inputData=[];\r\n                //  let subsamplefields = [];\r\n                //  let senttostoragefields=[];\r\n\r\n                let samqty = {\r\n                    \"1\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.label : \"\"\r\n                }\r\n                let samunit = {\r\n                    \"1\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.label : \"\"\r\n                }\r\n                let subsamqty = {\r\n                    \"1\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.label : \"\"\r\n                }\r\n                let subsamunit = {\r\n                    \"1\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.label : \"\"\r\n                }\r\n                let sample = { \"nsampleqty\": samqty, \"nunitcode\": samunit };\r\n                let subsample = { \"nsampleqty\": subsamqty, \"nunitcode\": subsamunit };\r\n                let str = { \"samplefields\": sample, \"subsamplefields\": subsample };\r\n                let senttostoragefields = { \"senttostoragefields\": str };\r\n                // console.log(JSON.stringify(senttostoragefields));\r\n                inputData = {\r\n                    \"userinfo\": this.props.Login.userInfo, \"senttostoragefields\": senttostoragefields, \"updatesendtostore\": senttostoragefields.senttostoragefields,\r\n                    \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                };\r\n            }\r\n            else if (operation === 'approve') {\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                // console.log(\"deleteValidation 2:\", deleteValidation);\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n                inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n                inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\r\n            }\r\n            else {\r\n                // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ?\r\n                    this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                    : this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? this.getGoodsInJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                    : this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? this.getProtocolJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)  //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                        : {};\r\n\r\n                let auditData = {};\r\n\r\n                let dataObject = {};\r\n                if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && \r\n                    this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\r\n                    this.props.Login.masterData.realSampleValue.value !== SampleType.PROTOCOL //&&\r\n                    //this.props.Login.masterData.realSampleValue.value !== SampleType.STABILITY\r\n                ) { //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n                    dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata);\r\n                    // console.log(\"json:\",dataObject);\r\n\r\n                    auditData = {\r\n                        \"registration\": {\r\n                            editmandatoryfields: dataObject[\"sampleAuditEditable\"],\r\n                            auditcapturefields: dataObject[\"sampleAuditFields\"],\r\n                            multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n\t\t\t//ALPD-4941--Vignesh R(09-12-2024)---Sample configuration screen Audit\r\n                        \"schedulersampledetail\": {\r\n                            editmandatoryfields: dataObject[\"sampleAuditEditable\"],\r\n                            auditcapturefields: dataObject[\"sampleAuditFields\"],\r\n                            multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n\r\n                    if (needsubsample) {\r\n                        auditData = {\r\n                            ...auditData,\r\n                            registrationsample: {\r\n                                editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\r\n                                auditcapturefields: dataObject[\"subSampleAuditFields\"],\r\n                                multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\r\n                            },\r\n\t\t\t//ALPD-4941--Vignesh R(09-12-2024)---Sample configuration screen Audit\r\n                            schedulersubsampledetail: {\r\n                                editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\r\n                                auditcapturefields: dataObject[\"subSampleAuditFields\"],\r\n                                multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\r\n                            },\r\n                        }\r\n                        delete dataObject[\"subSampleAuditEditable\"];\r\n                        delete dataObject[\"subSampleAuditFields\"];\r\n                        delete dataObject[\"subSampleAuditMultilingualFields\"];\r\n                    }\r\n                    delete dataObject[\"sampleAuditEditable\"];\r\n                    delete dataObject[\"sampleAuditFields\"];\r\n                    delete dataObject[\"sampleAuditMultilingualFields\"];\r\n                }\r\n               \r\n                else {\r\n                     if(this.props.Login.masterData.realSampleValue.value === SampleType.Masters){\r\n                    auditData = {\r\n                        \"dynamicmaster\": {\r\n                            editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                            auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                            multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n                    } else if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN){\r\n                    auditData = {\r\n                        \"goodsinsample\": {\r\n                            editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                            auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                            multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n                //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \r\n                } else if(this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL){\r\n                    auditData = {\r\n                        \"protocol\": {\r\n                            editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                            auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                            multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n                }\r\n                // else if(this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY){\r\n                //     dataObject=this.getStabilityJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)  \r\n                //     auditData = {\r\n                //         \"stbregistration\": {\r\n                //             editmandatoryfields: dataObject[\"sampleAuditEditable\"],\r\n                //             auditcapturefields: dataObject[\"sampleAuditFields\"],\r\n                //             multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\r\n                //         }\r\n                //     }\r\n                //         auditData = {\r\n                //             ...auditData,\r\n                //             stbregistrationsample: {\r\n                //                 editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\r\n                //                 auditcapturefields: dataObject[\"subSampleAuditFields\"],\r\n                //                 multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\r\n                //             },\r\n\t\t\t\r\n                //         }\r\n                //         delete dataObject[\"subSampleAuditEditable\"];\r\n                //         delete dataObject[\"subSampleAuditFields\"];\r\n                //         delete dataObject[\"subSampleAuditMultilingualFields\"];\r\n                //     //}\r\n                //     delete dataObject[\"sampleAuditEditable\"];\r\n                //     delete dataObject[\"sampleAuditFields\"];\r\n                //     delete dataObject[\"sampleAuditMultilingualFields\"];\r\n                //     };\r\n                }\r\n\r\n                inputData = {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                    \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                    \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                    \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters \r\n                    || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN \r\n                    || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? -1 \r\n                    : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                    \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                    \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                     || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                      || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? \"\" :\r\n                       this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\r\n                    \"nformcode\": this.props.Login.masterData.realSampleValue.value ===SampleType.GOODSIN ? \r\n                    formCode.GOODSIN : this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL?\r\n                     formCode.PROTOCOL  :this.props.Login.masterData.realSampleValue.value === SampleType.STABILITY? formCode.STUDYALLOCATION : this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                    \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                    \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                     || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN \r\n                     || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL ? jsondata\r\n                        : dataObject,\r\n                    auditdata: auditData,\r\n                    needsubsample: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN \r\n                    || this.props.Login.masterData.realSampleValue.value === SampleType.PROTOCOL\r\n                    ? false : this.props.Login.masterData.realRegSubTypeValue ? \r\n                    this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\r\n                    //needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\r\n                }\r\n\r\n                inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n                if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                    let qf_jsonData = { sdisplayname: {} };\r\n                    let qbt_jsonData = { tablename: {} };\r\n\r\n                    this.props.Login.languageList.map(lang => {\r\n                        qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                        qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                    })\r\n\r\n                    let qm_jsonData = { sdisplayname: {} };\r\n\r\n                    let nmodulecode = 0;\r\n                    let smoduledisplayname = \"\";\r\n\r\n                    if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\r\n                        smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\r\n                        this.props.Login.languageList.map(lang => {\r\n                            qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\r\n                        })\r\n                    }\r\n                    else {\r\n                        nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                    }\r\n                    inputData = {\r\n                        ...inputData,\r\n                        sformname: this.state.selectedRecord.sformname,\r\n                        sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                        nmodulecode,\r\n                        smoduledisplayname,\r\n                        qm_jsonData,\r\n                        qf_jsonData,\r\n                        qbt_jsonData,\r\n                        sprimarykeyname: templatePrimaryKey,\r\n                        jdynamiccolumns,\r\n                        jnumericcolumns\r\n                    }\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\r\n                        sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                        ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\r\n                        sprimarykeyname: templatePrimaryKey,\r\n                        jdynamiccolumns,\r\n                        jnumericcolumns\r\n\r\n                    }\r\n                }\r\n                // this.designtemplatemappingFieldList.map(item => {\r\n                //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n                // });\r\n            }\r\n\r\n            //console.log(\"input:\", inputData);\r\n            let postParam = undefined;\r\n            const inputParam = {\r\n                classUrl: \"designtemplatemapping\",\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n            }\r\n            if (operation === 'configureaudit') {\r\n                inputParam[\"methodUrl\"] = \"DynamicAudit\";\r\n                inputParam[\"operation\"] = \"configure\";\r\n                //operation = 'configure';\r\n            }\r\n            if (operation === 'configuresendtostore') {\r\n                inputParam[\"methodUrl\"] = \"ConfigureSendToStore\";\r\n                inputParam[\"operation\"] = \"update\";\r\n                //operation = 'configure';\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,isInitialRender:true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n    //     const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n    //     const filterQueryTreeStr = QbUtils.getTree(immutableTree);\r\n\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: {\r\n    //             awesomeTree: immutableTree, awesomeConfig: config, filterquery, filterQueryTreeStr\r\n    //         }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo)\r\n\r\n\r\n    // };\r\n    childDataChange=(datas)=>{\r\n        let masterData = this.props.Login.masterData;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n            ...datas,masterData:{...masterData,fieldName:datas.fieldName,fieldIndex:datas.fieldIndex},isInitialRender:false\r\n        }\r\n    }\r\n    this.props.updateStore(updateInfo)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, editFieldConfigService,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, auditFieldConfigService,\r\n    reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit,\r\n    combinationUniqueConfigService, mappingFieldConfigService, exportFieldConfigService, configureCheckList, getConfigureCheckListLatestVersion,reportFilterType\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}