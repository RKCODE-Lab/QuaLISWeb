{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\AlertSlide.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Media, ListGroup, Form } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { getSelectedAlert } from '../../actions';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListMasterWrapper } from '../../components/list-master/list-master.styles';\nimport { ListView } from '@progress/kendo-react-listview';\nimport { ClientList, ContentPanel, MediaHeader } from '../../components/App.styles';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { ProductList } from '../product/product.styled';\nimport './Alert.css';\nimport { Tooltip } from '@progress/kendo-react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass AlertSlide extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.ListDesign = props => {\n      let item = props.dataItem;\n      const labelColor = ['label-orange', 'label-green', 'label-yellow', 'label-purple'];\n      return /*#__PURE__*/React.createElement(Tooltip, {\n        position: \"bottom\",\n        anchorElement: \"target\",\n        openDelay: 100,\n        parentTitle: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n        key: `listKey_${props.index}`,\n        as: \"li\",\n        onClick: () => this.listItemClick(item),\n        className: `list-bgcolor ${this.props.Login.selectedAlertView ? this.props.Login.selectedAlertView[\"nsqlquerycode\"] === item[\"nsqlquerycode\"] ? \"active\" : \"\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Media, {\n        tilte: item.sscreenheader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Media.Body, {\n        className: \"d-flex p-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(MediaHeader, {\n        title: item.sscreenheader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }\n      }, item.sscreenheader)), /*#__PURE__*/React.createElement(Form.Check.Label, {\n        className: `label-circle1 mr-3 label-circle ${labelColor[props.index % 4]}`,\n        htmlFor: `tm_customCheck_${props.index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, item.ncount))));\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.gridColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      data: [],\n      dataResult: [],\n      dataState: dataState,\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      currentPageNo: 0,\n      openModal: false\n    };\n    this.searchRef = React.createRef();\n  } // dataStateChange = (event) => {\n  //     this.setState({\n  //         dataResult: process(this.props.Login.selectedAlertView1, event.data),\n  //         dataState: event.data\n  //     });\n  // }\n\n\n  render() {\n    const gridColumnList = [];\n\n    if (this.props.Login.selectedAlertView1 && this.props.Login.selectedAlertView1.length > 0) {\n      Object.keys(this.props.Login.selectedAlertView1[0]).forEach(key => {\n        gridColumnList.push({\n          \"idsName\": this.props.intl.formatMessage({\n            id: key\n          }),\n          \"dataField\": key,\n          \"width\": \"300px\" // \"isIdsField\":key.includes(\"STATUS\")\n\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap wide-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMasterWrapper, {\n      className: \"accordian-dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ClientList, {\n      className: \"product-list list_rightborder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"height-xl height-xxd no-bottom-pad\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      as: \"ul\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ListView, {\n      data: this.props.Login.alert,\n      item: props => this.ListDesign(props),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 61\n      }\n    }))))))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }\n    }, this.props.Login.alert && this.props.Login.alert.length > 0 && this.props.Login.selectedAlertView ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"p-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 49\n      }\n    }, this.props.Login.selectedAlertView.sscreenheader)), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsqlquerycode\",\n      data: this.props.Login.selectedAlertView1,\n      dataResult: process(this.props.Login.selectedAlertView1, this.state.dataState),\n      dataState: this.state.dataState,\n      dataStateChange: event => this.setState({\n        dataState: event.dataState\n      }),\n      extractedColumnList: gridColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isComponent: false,\n      isActionRequired: false,\n      isToolBarRequired: true,\n      hideColumnFilter: false,\n      isRefreshRequired: false,\n      selectedId: 0,\n      gridHeight: 'calc(100vh - 170px)' // name=\"IDS_ALERTVIEW\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 53\n      }\n    })))), \" \") : \"\")))));\n  } // closeModal = () => {\n  //     let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\n  //     openModalForHomeDashBoard = false;\n  //     const updateInfo = {\n  //         typeName: DEFAULT_RETURN,\n  //         data: { openModalForHomeDashBoard }\n  //     }\n  //     this.props.updateStore(updateInfo);\n  // }\n\n\n  listItemClick(item) {\n    if (item !== undefined && item.nsqlquerycode > 0) {\n      this.props.getSelectedAlert(item, this.props.Login.userInfo);\n    }\n  } // componentDidUpdate (previousProps){\n  //     if(this.props.Login.selectedAlertView1!==previousProps.selectedAlertView1){\n  //         this.setState({dataState:{skip:0, take:this.state.dataState.take}})\n  //     }\n  // }\n  //  componentDidUpdate(previousProps) {\n  //     if (this.props.Login.selectedRecordStatic !== previousProps.Login.selectedRecordStatic) {\n  //          this.setState({ selectedRecordStatic: this.props.Login.selectedRecordStatic });\n  //      }\n  //      if (this.props.Login.openModalForHomeDashBoard !== previousProps.Login.openModalForHomeDashBoard) {\n  //          this.setState({ openModal: this.props.Login.openModalForHomeDashBoard });\n  //      }\n  //  } \n\n\n}\n\nexport default connect(mapStateToProps, {\n  getSelectedAlert\n})(injectIntl(AlertSlide));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/dashboardtypes/AlertSlide.jsx"],"names":["React","Row","Col","Card","Media","ListGroup","Form","connect","injectIntl","getSelectedAlert","process","DataGrid","ListMasterWrapper","ListView","ClientList","ContentPanel","MediaHeader","PerfectScrollbar","AtTableWrap","ProductList","Tooltip","mapStateToProps","state","Login","AlertSlide","Component","constructor","props","ListDesign","item","dataItem","labelColor","index","listItemClick","selectedAlertView","sscreenheader","ncount","formRef","createRef","extractedColumnList","gridColumnList","dataState","skip","take","data","dataResult","controlMap","Map","userRoleControlRights","currentPageNo","openModal","searchRef","render","selectedAlertView1","length","Object","keys","forEach","key","push","intl","formatMessage","id","alert","event","setState","userInfo","undefined","nsqlquerycode"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Media, ListGroup, Form } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n     getSelectedAlert\r\n} from '../../actions';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListMasterWrapper } from '../../components/list-master/list-master.styles';\r\nimport { ListView } from '@progress/kendo-react-listview';\r\nimport { ClientList, ContentPanel, MediaHeader } from '../../components/App.styles';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport './Alert.css';\r\nimport { Tooltip } from '@progress/kendo-react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\nclass AlertSlide extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.gridColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10\r\n        };\r\n\r\n        this.state = {\r\n            data: [],\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            controlMap: new Map(), userRoleControlRights: [],\r\n            currentPageNo: 0,\r\n            openModal: false\r\n        }\r\n        this.searchRef = React.createRef();\r\n    }\r\n    // dataStateChange = (event) => {\r\n    //     this.setState({\r\n    //         dataResult: process(this.props.Login.selectedAlertView1, event.data),\r\n    //         dataState: event.data\r\n    //     });\r\n    // }\r\n\r\n    ListDesign = props => {\r\n        let item = props.dataItem;\r\n        const labelColor = ['label-orange', 'label-green', 'label-yellow', 'label-purple'];\r\n        return (\r\n            <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                <ListGroup.Item key={`listKey_${props.index}`} as=\"li\" onClick={() => this.listItemClick(item)}\r\n                    className={`list-bgcolor ${this.props.Login.selectedAlertView ? this.props.Login.selectedAlertView[\"nsqlquerycode\"] === item[\"nsqlquerycode\"] ? \"active\" : \"\" : \"\"}`}>\r\n                    <Media tilte={item.sscreenheader}>\r\n                        {/* <Form.Check.Label className={`mr-3 label-circle ${labelColor[props.index % 4]}`} htmlFor={`tm_customCheck_${props.index}`}>{item.sscreenheader && item.sscreenheader.substring(0, 1).toUpperCase()}</Form.Check.Label> */}\r\n\r\n                        <Media.Body className=\"d-flex p-2\">\r\n                            <MediaHeader title={item.sscreenheader}>\r\n                                {item.sscreenheader}\r\n                            </MediaHeader>\r\n                            {/* <h5 tilte={item.sscreenheader}>{item.sscreenheader}</h5> */}\r\n                            {/* <div className=\"pl-1\"> <Badge pill bsPrefix=\"badge_colour\">{item.ncount}</Badge></div> */}\r\n                        </Media.Body>\r\n\r\n                        <Form.Check.Label className={`label-circle1 mr-3 label-circle ${labelColor[props.index % 4]}`} htmlFor={`tm_customCheck_${props.index}`}>{item.ncount}</Form.Check.Label>\r\n                        {/* <div style={{ \"font-size\": \"70%!important\" }}>\r\n                        <Badge pill variant=\"danger\">{item.ncount}</Badge>\r\n                    </div> */}\r\n                    </Media>\r\n                </ListGroup.Item>\r\n            </Tooltip>\r\n\r\n        )\r\n    }\r\n    render() {\r\n\r\n        const gridColumnList = [];\r\n        if (this.props.Login.selectedAlertView1 && this.props.Login.selectedAlertView1.length > 0) {\r\n            Object.keys(this.props.Login.selectedAlertView1[0]).forEach(key => {\r\n                gridColumnList.push(\r\n                    {\r\n                        \"idsName\": this.props.intl.formatMessage({ id: key }),\r\n                        \"dataField\": key,\r\n                        \"width\": \"300px\",\r\n                        // \"isIdsField\":key.includes(\"STATUS\")\r\n                    }\r\n                );\r\n            });\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap wide-grid\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            {/* <div className=\"list-fixed-wrap\"> */}\r\n                                {/* <> */}\r\n                                    {/* <> */}\r\n                                        <ListMasterWrapper className={\"accordian-dropdown\"}>\r\n                                            <ClientList className=\"product-list list_rightborder\">\r\n                                                <PerfectScrollbar>\r\n                                                    <div className = \"height-xl height-xxd no-bottom-pad\">\r\n                                                        <ListGroup as=\"ul\">\r\n                                                            <ListView\r\n                                                                data={this.props.Login.alert}\r\n                                                                item={(props) => this.ListDesign(props)}\r\n                                                            />\r\n                                                        </ListGroup>\r\n                                                    </div>\r\n                                                </PerfectScrollbar>\r\n\r\n                                            </ClientList>\r\n                                        </ListMasterWrapper>\r\n                                    {/* </> */}\r\n                                {/* </> */}\r\n                            {/* </div> */}\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.alert && this.props.Login.alert.length > 0 && this.props.Login.selectedAlertView ?\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        <Card className=\"border-0\">\r\n                                            <Card.Header className=\"p-1\">\r\n                                                <Card.Title className=\"product-title-main ml-2\">{this.props.Login.selectedAlertView.sscreenheader}</Card.Title>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <AtTableWrap className=\"at-list-table\">\r\n                                                    <DataGrid\r\n                                                        primaryKeyField={\"nsqlquerycode\"}\r\n                                                        data={this.props.Login.selectedAlertView1}\r\n                                                        dataResult={process(this.props.Login.selectedAlertView1,this.state.dataState)}\r\n                                                        dataState={this.state.dataState}\r\n                                                        dataStateChange={(event) => this.setState({ dataState: event.dataState })}\r\n                                                        extractedColumnList={gridColumnList}\r\n                                                        controlMap={this.state.controlMap}\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        pageable={true}\r\n                                                        scrollable={\"scrollable\"}\r\n                                                        isComponent={false}\r\n                                                        isActionRequired={false}\r\n                                                        isToolBarRequired={true}\r\n                                                        hideColumnFilter={false}\r\n                                                        isRefreshRequired={false}\r\n                                                        selectedId={0}\r\n                                                        gridHeight={'calc(100vh - 170px)'}\r\n                                                    // name=\"IDS_ALERTVIEW\"\r\n                                                    />\r\n                                                </AtTableWrap>\r\n                                            </Card.Body>\r\n                                        </Card> </ContentPanel> : \"\"}\r\n                            </ProductList>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // closeModal = () => {\r\n    //     let openModalForHomeDashBoard = this.props.Login.openModalForHomeDashBoard;\r\n    //     openModalForHomeDashBoard = false;\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { openModalForHomeDashBoard }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    listItemClick(item) {\r\n        if (item !== undefined && item.nsqlquerycode > 0) {\r\n\r\n            this.props.getSelectedAlert(item, this.props.Login.userInfo);\r\n\r\n        }\r\n    }\r\n    // componentDidUpdate (previousProps){\r\n    //     if(this.props.Login.selectedAlertView1!==previousProps.selectedAlertView1){\r\n    //         this.setState({dataState:{skip:0, take:this.state.dataState.take}})\r\n    //     }\r\n    // }\r\n\r\n        //  componentDidUpdate(previousProps) {\r\n        //     if (this.props.Login.selectedRecordStatic !== previousProps.Login.selectedRecordStatic) {\r\n        //          this.setState({ selectedRecordStatic: this.props.Login.selectedRecordStatic });\r\n        //      }\r\n        //      if (this.props.Login.openModalForHomeDashBoard !== previousProps.Login.openModalForHomeDashBoard) {\r\n        //          this.setState({ openModal: this.props.Login.openModalForHomeDashBoard });\r\n        //      }\r\n        //  } \r\n}\r\n\r\nexport default connect(mapStateToProps, {getSelectedAlert\r\n})(injectIntl(AlertSlide));"]},"metadata":{},"sourceType":"module"}