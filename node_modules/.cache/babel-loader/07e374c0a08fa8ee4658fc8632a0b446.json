{"ast":null,"code":"import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{sortData,constructOptionList,rearrangeDateFormat}from'../components/CommonScript';import{intl}from'../components/App';import{transactionStatus}from'../components/Enumeration';export function getClockMonitoringComboService(inputParam){return function(dispatch){// if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED){\n//     toast.warn(intl.formatMessage({id: \"IDS_ALREADYCERTIFIED\"}));\n// }\nif(inputParam.selectedBatch.ntransactionstatus===transactionStatus.CERTIFIED||inputParam.selectedBatch.ntransactionstatus===transactionStatus.NULLIFIED||inputParam.selectedBatch.ntransactionstatus===transactionStatus.SENT){//const message = \"IDS_CANNOTDELETE\"+inputParam.selectedBatch.stransactionstatus.toUpperCase() +\"RECORD\";\ntoast.warn(intl.formatMessage({id:\"IDS_CANNOTEDITCERTIFIEDCLOCK\"}));}else{var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var utcTimeZoneService=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:inputParam.userInfo});var urlArray=[];//let selectedId = null;\nvar valid=true;var msg=\"IDS_CANNOTCREATEAUTOCLOCK\";;if(inputParam.operation===\"create\"){urlArray=[timeZoneService,utcTimeZoneService];}else{var editRow=inputParam.editRow;if(editRow.nactiontype===transactionStatus.AUTO){valid=false;msg=\"IDS_CANNOTEDITAUTOCLOCK\";}else{var _rsapi$post;var activeClockById=rsapi.post(\"clockmonitoring/getActiveClockHistoryById\",(_rsapi$post={},_defineProperty(_rsapi$post,inputParam.primaryKeyField,inputParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",inputParam.userInfo),_rsapi$post));urlArray=[timeZoneService,utcTimeZoneService,activeClockById];//selectedId = inputParam.primaryKeyValue;\n}}if(valid){dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var timeZoneMap=constructOptionList(response[0].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,true);var timeZoneList=timeZoneMap.get(\"OptionList\");var selectedRecord={};if(inputParam.operation===\"update\"){var selectedClock=response[2].data;selectedRecord=JSON.parse(JSON.stringify(response[2].data));var selectedTimeZone=response[0].data.filter(function(item){return item.ntimezonecode===selectedRecord.ntzapproveddate;});selectedRecord[\"dapproveddate\"]=rearrangeDateFormat(inputParam.userInfo,selectedClock[\"sapproveddate\"]);selectedRecord[\"ntzapproveddate\"]={\"value\":selectedTimeZone[0].ntimezonecode,\"label\":selectedTimeZone[0].stimezoneid};selectedRecord[\"stzapproveddate\"]=selectedTimeZone[0].stimezoneid;}else{selectedRecord={\"dapproveddate\":rearrangeDateFormat(inputParam.userInfo,response[1].data),\"ntzapproveddate\":{\"value\":inputParam.userInfo.ntimezonecode,\"label\":inputParam.userInfo.stimezoneid},\"stzapproveddate\":inputParam.userInfo.stimezoneid};}dispatch({type:DEFAULT_RETURN,payload:{timeZoneList:timeZoneList,operation:inputParam.operation,screenName:inputParam.screenName,selectedRecord:selectedRecord,openModal:true,clockAction:inputParam.clockAction,ncontrolCode:inputParam.ncontrolCode,loading:false,selectedId:inputParam.primaryKeyValue}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{toast.warn(intl.formatMessage({id:msg}));}}};}export function getClockBatchCreationDetail(inputParam){return function(dispatch){dispatch(initRequest(true));//const batchParam = inputParam.batchParam;\nvar masterData=inputParam.masterData;return rsapi.post(\"clockmonitoring/getClockMonitoring\",{nreleasebatchcode:parseInt(inputParam.nreleasebatchcode),userinfo:inputParam.userInfo}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function reloadClockMonitoring(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"clockmonitoring/getClockMonitoring\",_objectSpread({},inputParam.inputData)).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);var masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);if(inputParam.searchRef!==undefined&&inputParam.searchRef.current!==null){inputParam.searchRef.current.value=\"\";masterData['searchedData']=undefined;}dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,showFilter:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/ClockMonitoringAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","sortData","constructOptionList","rearrangeDateFormat","intl","transactionStatus","getClockMonitoringComboService","inputParam","dispatch","selectedBatch","ntransactionstatus","CERTIFIED","NULLIFIED","SENT","warn","formatMessage","id","timeZoneService","post","utcTimeZoneService","userinfo","userInfo","urlArray","valid","msg","operation","editRow","nactiontype","AUTO","activeClockById","primaryKeyField","primaryKeyValue","all","then","response","timeZoneMap","data","undefined","timeZoneList","get","selectedRecord","selectedClock","JSON","parse","stringify","selectedTimeZone","filter","item","ntimezonecode","ntzapproveddate","stimezoneid","type","payload","screenName","openModal","clockAction","ncontrolCode","loading","selectedId","catch","error","status","message","getClockBatchCreationDetail","masterData","nreleasebatchcode","parseInt","reloadClockMonitoring","inputData","responseData","searchRef","current","value","showFilter"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport {sortData, constructOptionList, rearrangeDateFormat} from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport {transactionStatus} from '../components/Enumeration';\r\n\r\nexport function getClockMonitoringComboService(inputParam){   \r\n    return function (dispatch) {          \r\n\r\n        // if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED){\r\n        //     toast.warn(intl.formatMessage({id: \"IDS_ALREADYCERTIFIED\"}));\r\n        // }\r\n        if (inputParam.selectedBatch.ntransactionstatus === transactionStatus.CERTIFIED\r\n            || inputParam.selectedBatch.ntransactionstatus === transactionStatus.NULLIFIED\r\n            || inputParam.selectedBatch.ntransactionstatus === transactionStatus.SENT)\r\n        {\r\n            //const message = \"IDS_CANNOTDELETE\"+inputParam.selectedBatch.stransactionstatus.toUpperCase() +\"RECORD\";\r\n            toast.warn(intl.formatMessage({id:\"IDS_CANNOTEDITCERTIFIEDCLOCK\"}));\r\n        }\r\n        else\r\n        {\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\"); \r\n            const utcTimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });      \r\n            let urlArray = [];\r\n\r\n            //let selectedId = null;\r\n            let valid = true;\r\n            let msg = \"IDS_CANNOTCREATEAUTOCLOCK\";;\r\n            if (inputParam.operation === \"create\"){\r\n                urlArray = [timeZoneService, utcTimeZoneService];\r\n            }\r\n            else{\r\n                const editRow = inputParam.editRow;\r\n                if (editRow.nactiontype === transactionStatus.AUTO){\r\n                    valid = false;\r\n                    msg =\"IDS_CANNOTEDITAUTOCLOCK\";\r\n                }\r\n                else{\r\n                    const activeClockById =  rsapi.post(\"clockmonitoring/getActiveClockHistoryById\", \r\n                                { [inputParam.primaryKeyField] :inputParam.primaryKeyValue , \r\n                                    \"userinfo\": inputParam.userInfo} );\r\n                    urlArray = [timeZoneService, utcTimeZoneService, activeClockById];\r\n                    //selectedId = inputParam.primaryKeyValue;\r\n                }\r\n            }\r\n            if(valid){\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n            \r\n                .then(response=>{   \r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                                        \"stimezoneid\", undefined, undefined, true);\r\n\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n                    let selectedRecord =  {}; \r\n\r\n                    if (inputParam.operation === \"update\"){\r\n                    \r\n                        const selectedClock = response[2].data; \r\n                        selectedRecord = JSON.parse(JSON.stringify(response[2].data));\r\n\r\n                        const selectedTimeZone = response[0].data.filter(item=>item.ntimezonecode === selectedRecord.ntzapproveddate);\r\n\r\n                    \r\n                        selectedRecord[\"dapproveddate\"] = rearrangeDateFormat(inputParam.userInfo, selectedClock[\"sapproveddate\"]);\r\n                        selectedRecord[\"ntzapproveddate\"] = {\"value\": selectedTimeZone[0].ntimezonecode, \r\n                                                            \"label\": selectedTimeZone[0].stimezoneid};\r\n                        selectedRecord[\"stzapproveddate\"] = selectedTimeZone[0].stimezoneid;\r\n                    }\r\n                    else{\r\n                        selectedRecord =  {\"dapproveddate\" : rearrangeDateFormat(inputParam.userInfo,response[1].data),\r\n                                        \"ntzapproveddate\":{\"value\": inputParam.userInfo.ntimezonecode, \r\n                                                            \"label\": inputParam.userInfo.stimezoneid},\r\n                                        \"stzapproveddate\":inputParam.userInfo.stimezoneid\r\n                                    };\r\n                    }\r\n                                    \r\n                    dispatch({type: DEFAULT_RETURN, payload:{  \r\n                                        timeZoneList,                                                                                     \r\n                                        operation:inputParam.operation, screenName:inputParam.screenName,   \r\n                                        selectedRecord, \r\n                                        openModal : true,\r\n                                        clockAction:inputParam.clockAction,\r\n                                        ncontrolCode:inputParam.ncontrolCode,\r\n                                        loading:false, selectedId:inputParam.primaryKeyValue\r\n                                        }});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                }) \r\n            }\r\n            else{\r\n                toast.warn(intl.formatMessage({id: msg}));\r\n            }\r\n        }\r\n        \r\n}}\r\n\r\nexport function getClockBatchCreationDetail(inputParam) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true)); \r\n    //const batchParam = inputParam.batchParam;\r\n    let masterData = inputParam.masterData;\r\n   \r\n    return rsapi.post(\"clockmonitoring/getClockMonitoring\", {nreleasebatchcode:parseInt(inputParam.nreleasebatchcode), \r\n                    userinfo:inputParam.userInfo})\r\n   .then(response=>{ \r\n      \r\n        masterData = {...masterData, ...response.data};        \r\n        sortData(masterData);     \r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(intl.formatMessage({id: error.message}));\r\n       } \r\n       else{               \r\n           toast.warn(intl.formatMessage({id: error.response.data}));\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport function reloadClockMonitoring(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"clockmonitoring/getClockMonitoring\", {...inputParam.inputData})\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}