{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { constructOptionList, convertDateValuetoString } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nexport function getProjectBarcodceConfig(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodegeneration/getProjectBarcodceConfig\", inputParam.inputData).then(response => {\n      let bulkbarcodeconfigMap = [];\n      let bulkbarcodeconfig = [];\n      bulkbarcodeconfigMap = constructOptionList(response.data.bulkBarcodeConfig || [], \"nbulkbarcodeconfigcode\", \"sconfigname\", undefined, undefined, false);\n      bulkbarcodeconfig = bulkbarcodeconfigMap.get(\"OptionList\");\n      /*    let selectedRecord={...inputParam.selectedRecord};\r\n         if(bulkbarcodeconfig.length>0){\r\n              selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":bulkbarcodeconfig[0]}\r\n         }else{\r\n             selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":\"\"}\r\n           }\r\n      */\n\n      let masterData = { ...inputParam.masterData,\n        defaultBarcodeConfig: response.data.defaultBarcodeConfig,\n        defaultProjectType: inputParam.inputData.defaultProjectType,\n        bulkBarcodeConfig: response.data.bulkBarcodeConfig\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          isInitialRender: false,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.warn(error.response.data);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function importBulkBarcodeGeneration(inputParam) {\n  return function (dispatch) {\n    const formData = inputParam.formData;\n    formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodegeneration/importBulkBarcodeGeneration\", formData).then(response => {\n      /*    let bulkbarcodeconfigMap=[];\r\n          let bulkbarcodeconfig=[];\r\n          bulkbarcodeconfigMap = constructOptionList(response.data.bulkBarcodeConfig || [], \"nbulkbarcodeconfigcode\",\r\n                  \"sconfigname\", undefined, undefined, false);\r\n                   bulkbarcodeconfig=bulkbarcodeconfigMap.get(\"OptionList\");\r\n               /*    let selectedRecord={...inputParam.selectedRecord};\r\n                  if(bulkbarcodeconfig.length>0){\r\n                       selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":bulkbarcodeconfig[0]}\r\n                  }else{\r\n                      selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":\"\"}\r\n                        }\r\n      */\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"sfilename\": \"\",\n        \"simportfilename\": \"\",\n        \"sdescription\": \"\"\n      };\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        \"searchedData\": undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          addedComponentList: [],\n          isInitialRender: true,\n          selectAll: false,\n          loading: false,\n          selectedRecord,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.warn(error.response.data);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTabBulkBarcodeGeneration(bulkbarcodegeneration, userInfo, masterData, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let obj = convertDateValuetoString(masterData.FromDate, masterData.ToDate, userInfo);\n    let fromDate = obj.fromDate;\n    let toDate = obj.toDate;\n    return rsapi.post(\"bulkbarcodegeneration/getSelectedBarcodeGenerationDetail\", {\n      nbulkbarcodegenerationcode: bulkbarcodegeneration.nbulkbarcodegenerationcode,\n      nprojecttypecode: masterData.realProjectType.value,\n      nbulkbarcodeconfigcode: masterData.realBarcodeConfig.value,\n      userinfo: userInfo,\n      fromDate: fromDate,\n      toDate: toDate\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      selectedRecord = { ...selectedRecord,\n        \"isInitialRender\": true\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          isInitialRender: true,\n          addedComponentList: [],\n          selectAll: false,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBulkBarcodeGenData(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodegeneration/getBulkBarcodeGenData\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBulkBarcodeGeneration(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodegeneration/getBulkBarcodeGeneration\", inputParam.inputData).then(response => {\n      //ALPD-4617-Vignesh R(31-07-2024)--Bulk barcode generation-->Blank page occurs, when submit the filter.\n      let masterData = { ...inputParam.masterData,\n        \"searchedData\": undefined,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          addedComponentList: [],\n          selectAll: false,\n          isInitialRender: true,\n          //addSelectAll:false,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteBulkBarcodeGeneration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodegeneration/deleteBulkBarcodeGeneration\", inputParam.inputData).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          addedComponentList: [],\n          selectAll: false,\n          isInitialRender: true,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteBarcodeData(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"bulkbarcodegeneration/deleteBarcodeData\", inputParam.inputData).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          //addedComponentList:[],selectAll:false,\n          isInitialRender: true,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/BulkBarcodeGenerationAction.js"],"names":["rsapi","Axios","toast","constructOptionList","convertDateValuetoString","DEFAULT_RETURN","initRequest","getProjectBarcodceConfig","inputParam","dispatch","post","inputData","then","response","bulkbarcodeconfigMap","bulkbarcodeconfig","data","bulkBarcodeConfig","undefined","get","masterData","defaultBarcodeConfig","defaultProjectType","type","payload","isInitialRender","loading","catch","error","status","warn","importBulkBarcodeGeneration","formData","append","JSON","stringify","userinfo","selectedRecord","addedComponentList","selectAll","openModal","getTabBulkBarcodeGeneration","bulkbarcodegeneration","userInfo","obj","FromDate","ToDate","fromDate","toDate","nbulkbarcodegenerationcode","nprojecttypecode","realProjectType","value","nbulkbarcodeconfigcode","realBarcodeConfig","operation","modalName","message","getBulkBarcodeGenData","getBulkBarcodeGeneration","deleteBulkBarcodeGeneration","deleteBarcodeData"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    constructOptionList, convertDateValuetoString\r\n    \r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\n\r\nexport function getProjectBarcodceConfig(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"bulkbarcodegeneration/getProjectBarcodceConfig\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                let bulkbarcodeconfigMap = [];\r\n                let bulkbarcodeconfig = [];\r\n                bulkbarcodeconfigMap = constructOptionList(response.data.bulkBarcodeConfig || [], \"nbulkbarcodeconfigcode\",\r\n                    \"sconfigname\", undefined, undefined, false);\r\n                bulkbarcodeconfig = bulkbarcodeconfigMap.get(\"OptionList\");\r\n                /*    let selectedRecord={...inputParam.selectedRecord};\r\n                   if(bulkbarcodeconfig.length>0){\r\n                        selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":bulkbarcodeconfig[0]}\r\n                   }else{\r\n                       selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":\"\"}\r\n\r\n                   }\r\n*/\r\n              \r\n                let masterData = { ...inputParam.masterData,defaultBarcodeConfig:response.data.defaultBarcodeConfig, defaultProjectType: inputParam.inputData.defaultProjectType, bulkBarcodeConfig: response.data.bulkBarcodeConfig  }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,  isInitialRender:false, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function importBulkBarcodeGeneration(inputParam) {\r\n    return function (dispatch) {\r\n        const formData = inputParam.formData;\r\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"bulkbarcodegeneration/importBulkBarcodeGeneration\", formData)\r\n            .then(response => {\r\n\r\n                /*    let bulkbarcodeconfigMap=[];\r\n                    let bulkbarcodeconfig=[];\r\n                    bulkbarcodeconfigMap = constructOptionList(response.data.bulkBarcodeConfig || [], \"nbulkbarcodeconfigcode\",\r\n                            \"sconfigname\", undefined, undefined, false);\r\n                             bulkbarcodeconfig=bulkbarcodeconfigMap.get(\"OptionList\");\r\n                         /*    let selectedRecord={...inputParam.selectedRecord};\r\n                            if(bulkbarcodeconfig.length>0){\r\n                                 selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":bulkbarcodeconfig[0]}\r\n                            }else{\r\n                                selectedRecord={...selectedRecord,\"nbulkbarcodeconfigcode\":\"\"}\r\n    \r\n                            }\r\n    */\r\n                let selectedRecord = { ...inputParam.selectedRecord, \"sfilename\": \"\", \"simportfilename\": \"\", \"sdescription\": \"\" }\r\n                let masterData = { ...inputParam.masterData, ...response.data,\"searchedData\":undefined }\r\n                dispatch({  \r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,addedComponentList: [], isInitialRender:true,selectAll:false,loading: false, selectedRecord,\r\n                        openModal: false,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTabBulkBarcodeGeneration(bulkbarcodegeneration, userInfo, masterData,selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let obj = convertDateValuetoString(masterData.FromDate, masterData.ToDate, userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        return rsapi.post(\"bulkbarcodegeneration/getSelectedBarcodeGenerationDetail\", { nbulkbarcodegenerationcode: bulkbarcodegeneration.nbulkbarcodegenerationcode, nprojecttypecode: masterData.realProjectType.value, nbulkbarcodeconfigcode: masterData.realBarcodeConfig.value, userinfo: userInfo, fromDate: fromDate, toDate: toDate })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                selectedRecord={...selectedRecord,\"isInitialRender\":true}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,isInitialRender:true,addedComponentList:[],selectAll:false,\r\n                         operation: null, modalName: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getBulkBarcodeGenData(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"bulkbarcodegeneration/getBulkBarcodeGenData\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getBulkBarcodeGeneration(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"bulkbarcodegeneration/getBulkBarcodeGeneration\", inputParam.inputData)\r\n            .then(response => {\r\n                //ALPD-4617-Vignesh R(31-07-2024)--Bulk barcode generation-->Blank page occurs, when submit the filter.\r\n                let masterData = { ...inputParam.masterData,\"searchedData\":undefined, ...response.data };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,addedComponentList:[],selectAll:false,  isInitialRender:true,//addSelectAll:false,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteBulkBarcodeGeneration(inputParam,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"bulkbarcodegeneration/deleteBulkBarcodeGeneration\", inputParam.inputData)\r\n            .then(response => {\r\n                 masterData = { ...masterData, ...response.data };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       addedComponentList:[],selectAll:false,\r\n                        isInitialRender:true,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function deleteBarcodeData(inputParam,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"bulkbarcodegeneration/deleteBarcodeData\", inputParam.inputData)\r\n            .then(response => {\r\n                 masterData = { ...masterData, ...response.data };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        //addedComponentList:[],selectAll:false,\r\n                        isInitialRender:true,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}