{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React, { PureComponent } from \"react\";\nimport { Utils } from \"@react-awesome-query-builder/core\";\nimport PropTypes from \"prop-types\";\nimport { truncateString } from \"../../utils/stuff\";\nimport { useOnPropsChanged } from \"../../utils/reactUtils\";\nimport last from \"lodash/last\";\nimport keys from \"lodash/keys\";\nvar clone = Utils.clone;\nvar getFieldConfig = Utils.ConfigUtils.getFieldConfig;\nvar _Utils$RuleUtils = Utils.RuleUtils,\n    getFieldPath = _Utils$RuleUtils.getFieldPath,\n    getFieldPathLabels = _Utils$RuleUtils.getFieldPathLabels,\n    getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp; //tip: this.props.value - right value, this.props.field - left value\n\nvar ValueField = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ValueField, _PureComponent);\n\n  var _super = _createSuper(ValueField);\n\n  function ValueField(props) {\n    var _this;\n\n    _classCallCheck(this, ValueField);\n\n    _this = _super.call(this, props);\n    useOnPropsChanged(_assertThisInitialized(_this));\n\n    _this.onPropsChanged(props);\n\n    return _this;\n  }\n\n  _createClass(ValueField, [{\n    key: \"onPropsChanged\",\n    value: function onPropsChanged(nextProps) {\n      var prevProps = this.props;\n      var keysForItems = [\"config\", \"field\", \"operator\", \"isFuncArg\", \"parentField\"];\n      var keysForMeta = [\"config\", \"field\", \"operator\", \"value\", \"placeholder\", \"isFuncArg\", \"parentField\"];\n      var needUpdateItems = !this.items || keysForItems.map(function (k) {\n        return nextProps[k] !== prevProps[k];\n      }).filter(function (ch) {\n        return ch;\n      }).length > 0;\n      var needUpdateMeta = !this.meta || keysForMeta.map(function (k) {\n        return nextProps[k] !== prevProps[k];\n      }).filter(function (ch) {\n        return ch;\n      }).length > 0;\n\n      if (needUpdateItems) {\n        this.items = this.getItems(nextProps);\n      }\n\n      if (needUpdateMeta) {\n        this.meta = this.getMeta(nextProps);\n      }\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems(_ref) {\n      var config = _ref.config,\n          field = _ref.field,\n          operator = _ref.operator,\n          parentField = _ref.parentField,\n          isFuncArg = _ref.isFuncArg,\n          fieldDefinition = _ref.fieldDefinition;\n      var canCompareFieldWithField = config.settings.canCompareFieldWithField;\n      var fieldSeparator = config.settings.fieldSeparator;\n      var parentFieldPath = typeof parentField == \"string\" ? parentField.split(fieldSeparator) : parentField;\n      var parentFieldConfig = parentField ? getFieldConfig(config, parentField) : null;\n      var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config.fields;\n      var filteredFields = this.filterFields(config, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition);\n      var items = this.buildOptions(parentFieldPath, config, filteredFields, parentFieldPath);\n      return items;\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(_ref2) {\n      var config = _ref2.config,\n          field = _ref2.field,\n          operator = _ref2.operator,\n          value = _ref2.value,\n          customPlaceholder = _ref2.placeholder,\n          isFuncArg = _ref2.isFuncArg,\n          parentField = _ref2.parentField;\n      var _config$settings = config.settings,\n          fieldPlaceholder = _config$settings.fieldPlaceholder,\n          fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;\n      var selectedKey = value;\n      var isFieldSelected = !!value;\n      var leftFieldConfig = getFieldConfig(config, field);\n      var leftFieldWidgetField = leftFieldConfig.widgets.field;\n      var leftFieldWidgetFieldProps = leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};\n      var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;\n      var currField = isFieldSelected ? getFieldConfig(config, selectedKey) : null;\n      var selectedOpts = currField || {};\n      var selectedKeys = getFieldPath(selectedKey, config);\n      var selectedPath = getFieldPath(selectedKey, config, true);\n      var selectedLabel = this.getFieldLabel(currField, selectedKey, config);\n      var partsLabels = getFieldPathLabels(selectedKey, config);\n      var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;\n      if (selectedFullLabel == selectedLabel || parentField) selectedFullLabel = null;\n      var selectedAltLabel = selectedOpts.label2;\n      return {\n        placeholder: placeholder,\n        selectedKey: selectedKey,\n        selectedKeys: selectedKeys,\n        selectedPath: selectedPath,\n        selectedLabel: selectedLabel,\n        selectedOpts: selectedOpts,\n        selectedAltLabel: selectedAltLabel,\n        selectedFullLabel: selectedFullLabel\n      };\n    }\n  }, {\n    key: \"filterFields\",\n    value: function filterFields(config, fields, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition) {\n      fields = clone(fields);\n      var fieldSeparator = config.settings.fieldSeparator;\n      var leftFieldConfig = getFieldConfig(config, leftFieldFullkey);\n      var _relyOnWidgetType = false; //TODO: remove this, see issue #758\n\n      var widget = getWidgetForFieldOp(config, leftFieldFullkey, operator, \"value\");\n      var widgetConfig = config.widgets[widget];\n      var expectedType;\n\n      if (isFuncArg && fieldDefinition) {\n        expectedType = fieldDefinition.type;\n      } else if (_relyOnWidgetType && widgetConfig) {\n        expectedType = widgetConfig.type;\n      } else {\n        expectedType = leftFieldConfig.type;\n      }\n\n      function _filter(list, path) {\n        for (var rightFieldKey in list) {\n          var subfields = list[rightFieldKey].subfields;\n          var subpath = (path ? path : []).concat(rightFieldKey);\n          var rightFieldFullkey = subpath.join(fieldSeparator);\n          var rightFieldConfig = getFieldConfig(config, rightFieldFullkey);\n\n          if (!rightFieldConfig) {\n            delete list[rightFieldKey];\n          } else if (rightFieldConfig.type == \"!struct\" || rightFieldConfig.type == \"!group\") {\n            if (_filter(subfields, subpath) == 0) delete list[rightFieldKey];\n          } else {\n            // tip: LHS field can be used as arg in RHS function\n            var canUse = rightFieldConfig.type == expectedType && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);\n            var fn = canCompareFieldWithField || config.settings.canCompareFieldWithField;\n            if (fn) canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);\n            if (!canUse) delete list[rightFieldKey];\n          }\n        }\n\n        return keys(list).length;\n      }\n\n      _filter(fields, parentFieldPath || []);\n\n      return fields;\n    }\n  }, {\n    key: \"buildOptions\",\n    value: function buildOptions(parentFieldPath, config, fields) {\n      var _this2 = this;\n\n      var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var optGroupLabel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      if (!fields) return null;\n      var _config$settings2 = config.settings,\n          fieldSeparator = _config$settings2.fieldSeparator,\n          fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;\n      var prefix = path ? path.join(fieldSeparator) + fieldSeparator : \"\";\n      return keys(fields).map(function (fieldKey) {\n        var field = fields[fieldKey];\n\n        var label = _this2.getFieldLabel(field, fieldKey, config);\n\n        var partsLabels = getFieldPathLabels(fieldKey, config);\n        var fullLabel = partsLabels.join(fieldSeparatorDisplay);\n        if (fullLabel == label || parentFieldPath) fullLabel = null;\n        var altLabel = field.label2;\n        var tooltip = field.tooltip;\n        var subpath = (path ? path : []).concat(fieldKey);\n        if (field.hideForCompare) return undefined;\n\n        if (field.type == \"!struct\" || field.type == \"!group\") {\n          return {\n            key: fieldKey,\n            path: prefix + fieldKey,\n            label: label,\n            fullLabel: fullLabel,\n            altLabel: altLabel,\n            tooltip: tooltip,\n            items: _this2.buildOptions(parentFieldPath, config, field.subfields, subpath, label)\n          };\n        } else {\n          return {\n            key: fieldKey,\n            path: prefix + fieldKey,\n            label: label,\n            fullLabel: fullLabel,\n            altLabel: altLabel,\n            tooltip: tooltip,\n            grouplabel: optGroupLabel\n          };\n        }\n      }).filter(function (o) {\n        return !!o;\n      });\n    }\n  }, {\n    key: \"getFieldLabel\",\n    value: function getFieldLabel(fieldOpts, fieldKey, config) {\n      if (!fieldKey) return null;\n      var fieldSeparator = config.settings.fieldSeparator;\n      var maxLabelsLength = config.settings.maxLabelsLength;\n      var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);\n      var label = fieldOpts.label || last(fieldParts);\n      label = truncateString(label, maxLabelsLength);\n      return label;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          config = _this$props.config,\n          customProps = _this$props.customProps,\n          setValue = _this$props.setValue,\n          readonly = _this$props.readonly,\n          id = _this$props.id,\n          groupId = _this$props.groupId;\n      var renderField = config.settings.renderField;\n\n      var renderProps = _objectSpread({\n        config: config,\n        customProps: customProps,\n        setField: setValue,\n        readonly: readonly,\n        items: this.items,\n        id: id,\n        groupId: groupId\n      }, this.meta);\n\n      return renderField(renderProps);\n    }\n  }]);\n\n  return ValueField;\n}(PureComponent);\n\nValueField.propTypes = {\n  id: PropTypes.string,\n  groupId: PropTypes.string,\n  setValue: PropTypes.func.isRequired,\n  config: PropTypes.object.isRequired,\n  field: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  operator: PropTypes.string,\n  customProps: PropTypes.object,\n  readonly: PropTypes.bool,\n  parentField: PropTypes.string,\n  fieldDefinition: PropTypes.object,\n  isFuncArg: PropTypes.bool\n};\nexport { ValueField as default };","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/ui/esm/components/rule/ValueField.js"],"names":["_defineProperty","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_possibleConstructorReturn","_getPrototypeOf","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","React","PureComponent","Utils","PropTypes","truncateString","useOnPropsChanged","last","clone","getFieldConfig","ConfigUtils","_Utils$RuleUtils","RuleUtils","getFieldPath","getFieldPathLabels","getWidgetForFieldOp","ValueField","_PureComponent","_super","props","_this","onPropsChanged","value","nextProps","prevProps","keysForItems","keysForMeta","needUpdateItems","items","map","k","ch","needUpdateMeta","meta","getItems","getMeta","_ref","config","field","operator","parentField","isFuncArg","fieldDefinition","canCompareFieldWithField","settings","fieldSeparator","parentFieldPath","split","parentFieldConfig","sourceFields","subfields","fields","filteredFields","filterFields","buildOptions","_ref2","customPlaceholder","placeholder","_config$settings","fieldPlaceholder","fieldSeparatorDisplay","selectedKey","isFieldSelected","leftFieldConfig","leftFieldWidgetField","widgets","leftFieldWidgetFieldProps","widgetProps","valuePlaceholder","currField","selectedOpts","selectedKeys","selectedPath","selectedLabel","getFieldLabel","partsLabels","selectedFullLabel","join","selectedAltLabel","label2","leftFieldFullkey","_relyOnWidgetType","widget","widgetConfig","expectedType","type","_filter","list","path","rightFieldKey","subpath","concat","rightFieldFullkey","rightFieldConfig","canUse","fn","_this2","undefined","optGroupLabel","_config$settings2","prefix","fieldKey","label","fullLabel","altLabel","tooltip","hideForCompare","grouplabel","o","fieldOpts","maxLabelsLength","fieldParts","Array","isArray","render","_this$props","customProps","setValue","readonly","id","groupId","renderField","renderProps","setField","propTypes","string","func","isRequired","bool","default"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { PureComponent } from \"react\";\nimport { Utils } from \"@react-awesome-query-builder/core\";\nimport PropTypes from \"prop-types\";\nimport { truncateString } from \"../../utils/stuff\";\nimport { useOnPropsChanged } from \"../../utils/reactUtils\";\nimport last from \"lodash/last\";\nimport keys from \"lodash/keys\";\nvar clone = Utils.clone;\nvar getFieldConfig = Utils.ConfigUtils.getFieldConfig;\nvar _Utils$RuleUtils = Utils.RuleUtils,\n  getFieldPath = _Utils$RuleUtils.getFieldPath,\n  getFieldPathLabels = _Utils$RuleUtils.getFieldPathLabels,\n  getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;\n\n//tip: this.props.value - right value, this.props.field - left value\nvar ValueField = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ValueField, _PureComponent);\n  var _super = _createSuper(ValueField);\n  function ValueField(props) {\n    var _this;\n    _classCallCheck(this, ValueField);\n    _this = _super.call(this, props);\n    useOnPropsChanged(_assertThisInitialized(_this));\n    _this.onPropsChanged(props);\n    return _this;\n  }\n  _createClass(ValueField, [{\n    key: \"onPropsChanged\",\n    value: function onPropsChanged(nextProps) {\n      var prevProps = this.props;\n      var keysForItems = [\"config\", \"field\", \"operator\", \"isFuncArg\", \"parentField\"];\n      var keysForMeta = [\"config\", \"field\", \"operator\", \"value\", \"placeholder\", \"isFuncArg\", \"parentField\"];\n      var needUpdateItems = !this.items || keysForItems.map(function (k) {\n        return nextProps[k] !== prevProps[k];\n      }).filter(function (ch) {\n        return ch;\n      }).length > 0;\n      var needUpdateMeta = !this.meta || keysForMeta.map(function (k) {\n        return nextProps[k] !== prevProps[k];\n      }).filter(function (ch) {\n        return ch;\n      }).length > 0;\n      if (needUpdateItems) {\n        this.items = this.getItems(nextProps);\n      }\n      if (needUpdateMeta) {\n        this.meta = this.getMeta(nextProps);\n      }\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems(_ref) {\n      var config = _ref.config,\n        field = _ref.field,\n        operator = _ref.operator,\n        parentField = _ref.parentField,\n        isFuncArg = _ref.isFuncArg,\n        fieldDefinition = _ref.fieldDefinition;\n      var canCompareFieldWithField = config.settings.canCompareFieldWithField;\n      var fieldSeparator = config.settings.fieldSeparator;\n      var parentFieldPath = typeof parentField == \"string\" ? parentField.split(fieldSeparator) : parentField;\n      var parentFieldConfig = parentField ? getFieldConfig(config, parentField) : null;\n      var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config.fields;\n      var filteredFields = this.filterFields(config, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition);\n      var items = this.buildOptions(parentFieldPath, config, filteredFields, parentFieldPath);\n      return items;\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(_ref2) {\n      var config = _ref2.config,\n        field = _ref2.field,\n        operator = _ref2.operator,\n        value = _ref2.value,\n        customPlaceholder = _ref2.placeholder,\n        isFuncArg = _ref2.isFuncArg,\n        parentField = _ref2.parentField;\n      var _config$settings = config.settings,\n        fieldPlaceholder = _config$settings.fieldPlaceholder,\n        fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;\n      var selectedKey = value;\n      var isFieldSelected = !!value;\n      var leftFieldConfig = getFieldConfig(config, field);\n      var leftFieldWidgetField = leftFieldConfig.widgets.field;\n      var leftFieldWidgetFieldProps = leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};\n      var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;\n      var currField = isFieldSelected ? getFieldConfig(config, selectedKey) : null;\n      var selectedOpts = currField || {};\n      var selectedKeys = getFieldPath(selectedKey, config);\n      var selectedPath = getFieldPath(selectedKey, config, true);\n      var selectedLabel = this.getFieldLabel(currField, selectedKey, config);\n      var partsLabels = getFieldPathLabels(selectedKey, config);\n      var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;\n      if (selectedFullLabel == selectedLabel || parentField) selectedFullLabel = null;\n      var selectedAltLabel = selectedOpts.label2;\n      return {\n        placeholder: placeholder,\n        selectedKey: selectedKey,\n        selectedKeys: selectedKeys,\n        selectedPath: selectedPath,\n        selectedLabel: selectedLabel,\n        selectedOpts: selectedOpts,\n        selectedAltLabel: selectedAltLabel,\n        selectedFullLabel: selectedFullLabel\n      };\n    }\n  }, {\n    key: \"filterFields\",\n    value: function filterFields(config, fields, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition) {\n      fields = clone(fields);\n      var fieldSeparator = config.settings.fieldSeparator;\n      var leftFieldConfig = getFieldConfig(config, leftFieldFullkey);\n      var _relyOnWidgetType = false; //TODO: remove this, see issue #758\n      var widget = getWidgetForFieldOp(config, leftFieldFullkey, operator, \"value\");\n      var widgetConfig = config.widgets[widget];\n      var expectedType;\n      if (isFuncArg && fieldDefinition) {\n        expectedType = fieldDefinition.type;\n      } else if (_relyOnWidgetType && widgetConfig) {\n        expectedType = widgetConfig.type;\n      } else {\n        expectedType = leftFieldConfig.type;\n      }\n      function _filter(list, path) {\n        for (var rightFieldKey in list) {\n          var subfields = list[rightFieldKey].subfields;\n          var subpath = (path ? path : []).concat(rightFieldKey);\n          var rightFieldFullkey = subpath.join(fieldSeparator);\n          var rightFieldConfig = getFieldConfig(config, rightFieldFullkey);\n          if (!rightFieldConfig) {\n            delete list[rightFieldKey];\n          } else if (rightFieldConfig.type == \"!struct\" || rightFieldConfig.type == \"!group\") {\n            if (_filter(subfields, subpath) == 0) delete list[rightFieldKey];\n          } else {\n            // tip: LHS field can be used as arg in RHS function\n            var canUse = rightFieldConfig.type == expectedType && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);\n            var fn = canCompareFieldWithField || config.settings.canCompareFieldWithField;\n            if (fn) canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);\n            if (!canUse) delete list[rightFieldKey];\n          }\n        }\n        return keys(list).length;\n      }\n      _filter(fields, parentFieldPath || []);\n      return fields;\n    }\n  }, {\n    key: \"buildOptions\",\n    value: function buildOptions(parentFieldPath, config, fields) {\n      var _this2 = this;\n      var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var optGroupLabel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      if (!fields) return null;\n      var _config$settings2 = config.settings,\n        fieldSeparator = _config$settings2.fieldSeparator,\n        fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;\n      var prefix = path ? path.join(fieldSeparator) + fieldSeparator : \"\";\n      return keys(fields).map(function (fieldKey) {\n        var field = fields[fieldKey];\n        var label = _this2.getFieldLabel(field, fieldKey, config);\n        var partsLabels = getFieldPathLabels(fieldKey, config);\n        var fullLabel = partsLabels.join(fieldSeparatorDisplay);\n        if (fullLabel == label || parentFieldPath) fullLabel = null;\n        var altLabel = field.label2;\n        var tooltip = field.tooltip;\n        var subpath = (path ? path : []).concat(fieldKey);\n        if (field.hideForCompare) return undefined;\n        if (field.type == \"!struct\" || field.type == \"!group\") {\n          return {\n            key: fieldKey,\n            path: prefix + fieldKey,\n            label: label,\n            fullLabel: fullLabel,\n            altLabel: altLabel,\n            tooltip: tooltip,\n            items: _this2.buildOptions(parentFieldPath, config, field.subfields, subpath, label)\n          };\n        } else {\n          return {\n            key: fieldKey,\n            path: prefix + fieldKey,\n            label: label,\n            fullLabel: fullLabel,\n            altLabel: altLabel,\n            tooltip: tooltip,\n            grouplabel: optGroupLabel\n          };\n        }\n      }).filter(function (o) {\n        return !!o;\n      });\n    }\n  }, {\n    key: \"getFieldLabel\",\n    value: function getFieldLabel(fieldOpts, fieldKey, config) {\n      if (!fieldKey) return null;\n      var fieldSeparator = config.settings.fieldSeparator;\n      var maxLabelsLength = config.settings.maxLabelsLength;\n      var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);\n      var label = fieldOpts.label || last(fieldParts);\n      label = truncateString(label, maxLabelsLength);\n      return label;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        config = _this$props.config,\n        customProps = _this$props.customProps,\n        setValue = _this$props.setValue,\n        readonly = _this$props.readonly,\n        id = _this$props.id,\n        groupId = _this$props.groupId;\n      var renderField = config.settings.renderField;\n      var renderProps = _objectSpread({\n        config: config,\n        customProps: customProps,\n        setField: setValue,\n        readonly: readonly,\n        items: this.items,\n        id: id,\n        groupId: groupId\n      }, this.meta);\n      return renderField(renderProps);\n    }\n  }]);\n  return ValueField;\n}(PureComponent);\nValueField.propTypes = {\n  id: PropTypes.string,\n  groupId: PropTypes.string,\n  setValue: PropTypes.func.isRequired,\n  config: PropTypes.object.isRequired,\n  field: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  operator: PropTypes.string,\n  customProps: PropTypes.object,\n  readonly: PropTypes.bool,\n  parentField: PropTypes.string,\n  fieldDefinition: PropTypes.object,\n  isFuncArg: PropTypes.bool\n};\nexport { ValueField as default };"]},"metadata":{},"sourceType":"module"}