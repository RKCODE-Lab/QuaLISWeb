{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\Registration.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues, getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail, acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService, cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction, preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail } from '../../actions';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { MediaHeader, ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport { designProperties, RegistrationType, transactionStatus } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\nimport AddSubSample from './AddSubSample';\n\nclass Registration extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        flag: 1,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        RealDesignTemplateMappingValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        if (inputData.ndesigntemplatemappingcode) {\n          const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n          inputData['FromDate'] = obj.fromDate;\n          inputData['ToDate'] = obj.toDate;\n          const selectedFilter = {};\n          selectedFilter[\"fromdate\"] = RealFromDate;\n          selectedFilter[\"todate\"] = RealToDate;\n          const inputParam = {\n            masterData,\n            inputData,\n            searchSubSampleRef: this.searchSubSampleRef,\n            searchSampleRef: this.searchSampleRef,\n            searchTestRef: this.searchTestRef,\n            selectedFilter\n          };\n          this.props.getRegistrationSample(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectedRecord[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"Sample Name\"] = comboData.label;\n          selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          selectedRecord[\"ntestgrouptestcode\"] = [];\n          this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent, this.props.Login.Conponent);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputOnSubSampleChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents, control.child, \"label\");\n        childColumnList = {};\n        childColumnList = childComboList.map(columnList => {\n          const val = comboChild(this.state.regSubSamplecomboComponents, columnList, childColumnList, false); //  childColumnList = val.childColumnList\n\n          return val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent, control.child, \"label\");\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData, childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { selectedRecord }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n\n      if (operation === 'create') {\n        let objSubSample = this.state.selectedRecord;\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        const userInfo = this.props.Login.userInfo;\n        let saveSubSample = {};\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno');\n        const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\n\n        if (this.props.Login.specBasedComponent) {\n          saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1;\n          saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1;\n        } else {\n          const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n          saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\n        }\n\n        saveSubSample[\"jsondata\"] = {};\n        saveSubSample[\"jsonuidata\"] = {};\n        const dateList = [];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                //let componentrowlabel = ''\n                // let componentrowvalue = ''\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? {\n                      value: objSubSample[componentrow.label].value,\n                      label: objSubSample[componentrow.label].label\n                    } : -1;\n                    saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"; // if (componentrow.mandatory || objSubSample[componentrow.label]) {\n                    //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n                    //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\n                    // }\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo);\n                      saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label];\n                    } else {\n                      saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\n                      saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label];\n                    }\n\n                    if (componentrow.timezone) {\n                      saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ? {\n                        value: objSubSample[`tz${componentrow.label}`].value,\n                        label: objSubSample[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label] : \"\";\n                    saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]; // if (objSubSample[componentrow.label]) {\n                    //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\n                    //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\n                    // }\n                  }\n\n                  return saveSubSample;\n                }); //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n              } else {\n                if (component.inputtype === \"combo\") {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? {\n                    value: objSubSample[component.label].value,\n                    label: objSubSample[component.label].label\n                  } : -1;\n                  saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\";\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo);\n                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                  } else {\n                    saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : \"\";\n                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                  }\n\n                  if (component.timezone) {\n                    saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ? {\n                      value: objSubSample[`tz${component.label}`].value,\n                      label: objSubSample[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label] : \"\";\n                  saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                }\n              }\n\n              return saveSubSample;\n            });\n            return saveSubSample;\n          });\n          return saveSubSample;\n        });\n        saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1; // Component.unshift(saveSubSample);\n\n        let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\n        const selectedTestArray = [];\n        selectedTestData && selectedTestData.map(item => {\n          return selectedTestArray.push(item.item);\n        }); // const Test = this.props.Login.Test || [];\n        // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n        //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\n\n        const map = {};\n        map['RegistrationSample'] = saveSubSample;\n        map['subsampleDateList'] = dateList;\n        map['subsampledateconstraints'] = this.state.subsampledateconstraints;\n        map['testgrouptest'] = selectedTestArray;\n        map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\");\n        map['userinfo'] = userInfo;\n        map['checkBoxOperation'] = 3;\n        map['ntype'] = 3;\n        map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n        map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n        map[\"checkBoxOperation\"] = 3;\n        map[\"masterData\"] = this.props.Login.masterData;\n        map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        const inputParam = {\n          inputData: map,\n          postParamList: this.postParamList\n        };\n        this.props.saveSubSample(inputParam);\n      } else {\n        this.onUpdateSubSampleRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (regSubSample) {\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatory.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n\n                return mandatory;\n              }) : component.mandatory === true ? mandatory.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\"); //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const inputData = {\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef,\n        postParamList: this.postParamList\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode;\n\n      if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\n        let data = [];\n        const withoutCombocomponent = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n              });\n            });\n          });\n          const comboComponents = data;\n          let childColumnList = {};\n          data.map(columnList => {\n            const val = this.comboChild(data, columnList, childColumnList, true);\n            data = val.data;\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          const mapOfFilterRegData = {\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename);\n        } else {\n          toast.info(\"Configure the preregister template for this registrationtype\");\n        }\n      } else {\n        toast.info(\"select the approved design template\");\n      }\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n\n              return data;\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n\n                return null;\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subsampleskip: e.skip,\n        subsampletake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.selectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            testAttachmentDataState: this.state.testAttachmentDataState\n          };\n          this.props.getTestChildTabDetailRegistration(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props));\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n              Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\n              ;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 3;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_ACCEPTREGISTRATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.acceptRegistrationConfirm(inputParam, registerId));\n            } else {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\", \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadRegSubSample = this.props.Login.loadRegSubSample;\n      let loadFile = this.props.Login.loadFile;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        selectedRecord = {};\n      } else if (this.props.Login.loadRegSubSample) {\n        loadRegSubSample = false;\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadRegSubSample,\n          screenName,\n          showSaveContinue,\n          loadFile,\n          loadChildTest,\n          openModal,\n          parentPopUpSize: \"xl\",\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let openPortal = this.props.Login.openPortal;\n      let Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        selectedRecord = {};\n        openPortal = false;\n        subSampleDataGridList = [];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            openPortal,\n            Component,\n            subSampleDataGridList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2955,\n          columnNumber: 39\n        }\n      }));\n      tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2995,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || []\n        },\n        selectedListName: \"IDS_SUBSAMPLE\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3051,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsubsamplecommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3091,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3147,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3157,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3198,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let testList = [];\n\n        if (this.props.Login.masterData.searchedTest !== undefined) {\n          testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n        } else {\n          testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelSubSampleRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedSubSample || (this.props.Login.masterData.RegistrationGetSubSample ? [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\n          Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n          // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\n          //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3; // Map[\"withoutgetparameter\"] = 3;\n\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.addSubSample = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\n            //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\n            //   if (findApprovalVersion.length === 1) {\n            const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\n            const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n            const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n            if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n              {\n                let data = [];\n                const regSubSamplewithoutCombocomponent = [];\n                const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n                if (Layout !== undefined) {\n                  Layout.map(row => {\n                    return row.children.map(column => {\n                      return column.children.map(component => {\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                          if (componentrow.inputtype === \"combo\") {\n                            data.push(componentrow);\n                          } else {\n                            regSubSamplewithoutCombocomponent.push(componentrow);\n                          }\n\n                          return null;\n                        }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n                      });\n                    });\n                  });\n                  const regSubSamplecomboComponents = data;\n                  let regchildColumnList = {};\n                  data.map(columnList => {\n                    const val = comboChild(data, columnList, regchildColumnList, true);\n                    data = val.data;\n                    regchildColumnList = val.childColumnList;\n                    return null;\n                  }); //const Map={}\n                  // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\n                  // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\n\n                  Map[\"nallottedspeccode\"] = findSampleSpec[0];\n                  Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\n                  Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n                  Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n                  Map[\"npreregno\"] = addSubSampleList && addSubSampleList.map(sample => sample.npreregno).join(\",\");\n                  Map[\"registrationsample\"] = addSubSampleList;\n                  this.props.addsubSampleRegistration(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectedRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, controlcode, findComponentReqSpec[0] === 3 ? true : false);\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\"\n                  }));\n                }\n              } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n              }));\n            } // } else {\n            //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\n            // }\n\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOSUBSAMPLE\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          return ntransstatus.push(sam.ntransactionstatus);\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.editRegistration = inputParam => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        this.props.getEditRegistrationComboService(inputParam, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.editSubSampleRegistration = inputParam => {\n      let data = [];\n      const regSubSamplewithoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  regSubSamplewithoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n            });\n          });\n        });\n        const regSubSamplecomboComponents = data;\n        let regSubSamplechildColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, regSubSamplechildColumnList, true);\n          data = val.data;\n          regSubSamplechildColumnList = val.childColumnList;\n          return null;\n        });\n        const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\");\n        this.props.getEditSubSampleComboService(inputParam, data, this.state.selectedRecord, regSubSamplechildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, sampleList[0].ncomponentrequired === 3 ? true : false);\n      } else {\n        toast.info(\"Configure the sub sample template for this registrationtype\");\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined;\n    this.breadCrumbData = []; //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\n\n    this.state = {\n      layout: 1,\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      sampleSearchFied: [],\n      subsampleSearchFied: [],\n      testSearchFied: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'npreregno'\n        }]\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      testAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      sampleCommentsDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }, {\n          field: 'stestsynonym'\n        }]\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      subsampleskip: 0,\n      subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [],\n      childColumnList: [],\n      columnList: [],\n      regSubSamplecomboComponents: [],\n      regSubSamplewithoutCombocomponent: [],\n      regparentSubSampleColumnList: [],\n      DynamicSubSampleColumns: [],\n      DynamicTestColumns: [],\n      DynamicGridItem: [],\n      DynamicGridMoreField: [],\n      SingleItem: [],\n      testMoreField: [],\n      testListColumns: [],\n      SubSampleDynamicGridItem: [],\n      SubSampleDynamicGridMoreField: [],\n      SubSampleSingleItem: [],\n      cancelId: -1,\n      preRegisterId: -1,\n      registerId: -1,\n      editSampleId: -1,\n      quarantineId: -1,\n      addTestId: -1,\n      printBarcodeId: -1,\n      cancelSampleId: -1,\n      addSubSampleId: -1,\n      editSubSampleId: -1,\n      cancelSubSampleId: -1,\n      stateSampleType: [],\n      stateRegistrationType: [],\n      stateRegistrationSubType: [],\n      stateFilterStatus: [],\n      stateDynamicDesign: [],\n      testGetParam: {},\n      testChildGetParam: {},\n      subSampleGetParam: {},\n      filterSampleParam: {},\n      filterTestParam: {},\n      editRegParam: {},\n      editSubSampleRegParam: {},\n      addTestParam: {},\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: [],\n      filterSubSampleParam: {},\n      initialVerticalWidth: \"40vh\" // specBasedComponent: this.props.Login.settings\n      //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\n\n    }; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  gridViewChange(layout) {\n    this.setState({\n      layout: layout\n    });\n  } // verticalPaneSizeChange = (val) => {\n  //     this.setState({\n  //         initialVerticalWidth: val - 150\n  //     })\n  // }\n\n\n  render() {\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\n    let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n    // let testGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     userinfo: this.props.Login.userInfo,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     npreregno: this.props.Login.masterData.selectedSample &&\n    //         this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     searchTestRef: this.searchTestRef,\n    //     testskip: this.state.testskip,\n    //     subsampleskip: this.state.subsampleskip,\n    //     resultDataState: this.state.resultDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    // }\n    // let testChildGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     userinfo: this.props.Login.userInfo,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n    //     ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\n    //         this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     resultDataState: this.state.resultDataState,\n    //     testCommentDataState: this.state.testCommentDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    // }\n\n    this.confirmMessage = new ConfirmMessage(); // let subSampleGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     testskip: this.state.testskip,\n    //     subsampleskip: this.state.subsampleskip,\n    //     searchTestRef: this.searchTestRef,\n    //     resultDataState: this.state.resultDataState,\n    //     testCommentDataState: this.state.testCommentDataState,\n    //     sampleGridDataState: this.state.sampleGridDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\n    //     , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\n    //     , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\n    // const filterSampleParam = {\n    //     inputListName: \"RegistrationGetSample\",\n    //     selectedObject: \"selectedSample\",\n    //     primaryKeyField: \"npreregno\",\n    //     fetchUrl: \"registration/getRegistrationSubSample\",\n    //     childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n    //     fecthInputObject: {\n    //         nflag: 2,\n    //         ntype: 2,\n    //         masterData: this.props.Login.masterData,\n    //         ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //         userinfo: this.props.Login.userInfo,\n    //         nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //         nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //         nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //         activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //         activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: sampleSearchField,\n    //     changeList: [\n    //         \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\n    //         \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\n    //         \"selectedTest\", \"RegistrationParameter\"\n    //     ]\n    // };\n    // let filterTestParam = {\n    //     inputListName: \"RegistrationGetTest\",\n    //     selectedObject: \"selectedTest\",\n    //     primaryKeyField: \"ntransactiontestcode\",\n    //     fetchUrl: this.getActiveTestURL(),\n    //     fecthInputObject: {\n    //         ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n    //         userinfo: this.props.Login.userInfo\n    //     },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\n    //         \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\n    //     changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n    // }\n\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: { ...this.state.subSampleGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"registration/getRegistrationTestSample\",\n      fecthInputObject: { ...this.state.testGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSubSample\",\n      inputListName: \"AP_SUBSAMPLE\",\n      updatedListname: \"selectedSubSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"selectedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectedObject: \"selectedTest\",\n      inputListName: \"RegistrationGetTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }]; // let editRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let editSubSampleRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // const addTestParam = {\n    //     selectedsample: this.props.Login.masterData.selectedSample,\n    //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\n    //     skip: this.state.skip, take: (this.state.skip + this.state.take),\n    //     userinfo: this.props.Login.userInfo,\n    //     sampleList: this.props.Login.masterData.RegistrationGetSample,\n    //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\n    //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    // };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 33\n      }\n    }, this.state.layout === 1 ? /*#__PURE__*/React.createElement(TransactionListMasterJson // paneHeight={this.state.firstPane}\n    , {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: { ...this.state.subSampleGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\",\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needMultiSelect: true,\n      showStatusBlink: true,\n      filterParam: { ...this.state.filterSampleParam,\n        childRefs: [{\n          ref: this.searchSubSampleRef,\n          childFilteredListName: \"searchedSubSample\"\n        }, {\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n        onClick: this.props.getPrinterComboService,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: this.state.printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ACCEPT\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.registerId) === -1,\n        onClick: () => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1,\n        onClick: () => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 57\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          DesignTemplateMapping: this.props.Login.masterData.DesignTemplateMapping,\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 70\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 41\n      }\n    }) : this.state.layout === 2 ? /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n      ,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getRegistrationTestDetail,\n      inputParam: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"selectedSubSample\",\n      objectName: \"subsample\",\n      listName: \"IDS_SUBSAMPLE\" //jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSubSampleColumns,\n      searchRef: this.searchSubSampleRef,\n      skip: this.state.subsampleskip,\n      take: this.state.subsampletake,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      needMultiSelect: true,\n      selectionColorField: \"scolorhexcode\",\n      subFieldsLabel: false,\n      handlePageChange: this.handleSubSamplePageChange,\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\"],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n        onClick: this.editSubSampleRegistration,\n        inputData: {\n          primaryKeyName: \"ntransactionsamplecode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1,\n        onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n        onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 65\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 45\n      }\n    }) : this.state.layout === 3 ? /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" //jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 69\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 913,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 69\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 49\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 37\n      }\n    }, this.state.layout === 1 ? /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1 // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n      ,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"block\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 941,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 73\n      }\n    }, \"Sub Sample\"))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n      ,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getRegistrationTestDetail,\n      inputParam: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSubSample\",\n      searchRef: this.searchSubSampleRef,\n      filterParam: { ...this.state.filterSubSampleParam,\n        childRefs: [{\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"selectedSubSample\",\n      objectName: \"subsample\",\n      listName: \"IDS_SUBSAMPLE\" // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSubSampleColumns,\n      skip: this.state.subsampleskip,\n      take: this.state.subsampletake,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      needMultiSelect: true,\n      selectionColorField: \"scolorhexcode\",\n      subFieldsLabel: false,\n      handlePageChange: this.handleSubSamplePageChange,\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\"],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n        onClick: this.editSubSampleRegistration,\n        inputData: {\n          primaryKeyName: \"ntransactionsamplecode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1028,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1,\n        onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 89\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n        onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 89\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064,\n        columnNumber: 77\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" // jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1132,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1144,\n          columnNumber: 93\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 93\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"none\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 85\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 85\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1190,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 85\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1193,\n        columnNumber: 93\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\" //jsonField={\"jsondata\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204,\n        columnNumber: 93\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1293,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298,\n        columnNumber: 69\n      }\n    }, this.props.intl.formatMessage({\n      id: this.state.showSample ? \"IDS_SAMPLE\" : this.state.showSubSample ? \"IDS_SUBSAMPLE\" : \"IDS_TEST\"\n    }))), this.state.showSample ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showSubSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314,\n        columnNumber: 73\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_SUBSAMPLE\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1317,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 73\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))) : this.state.showSubSample ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1323,\n        columnNumber: 71\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 73\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1332,\n        columnNumber: 77\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 77\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showSubSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344,\n        columnNumber: 77\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_SUBSAMPLE\"\n    })))))), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1352,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 57\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 65\n      }\n    }) : this.state.showSubSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSubSampleTab ? this.props.Login.activeSubSampleTab === 'IDS_SUBSAMPLEATTACHMENTS' ? 'IDS_SUBSAMPLEATTACHMENTS' : this.props.Login.activeSubSampleTab : 'IDS_SUBSAMPLEATTACHMENTS',\n      tabDetail: this.subsampleTabDetail(),\n      onTabChange: this.onSubSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1359,\n        columnNumber: 69\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 73\n      }\n    }) // <Card>\n\n    /* <Card.Header style={{ \"borderBottom\": \"0px\", \"padding-top\": \"1px\" }}>\r\n        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n            <h4 className=\"card-title\">Parameter Results</h4>\r\n        </span>\r\n    </Card.Header> */\n    // </Card>\n    // : this.state.showSubSample ?\n    //     <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\n    //         tabDetail={this.subsampleTabDetail()}\n    //         onTabChange={this.onSubSampleTabChange} />\n    //     : \"\"}\n    : \"\")))) : this.state.layout === 2 ? /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1387,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      secondaryInitialSize: 400 // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1390,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1399,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1401,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1405,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1406,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1407,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1408,\n        columnNumber: 105\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1413,\n        columnNumber: 105\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" //  jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1474,\n          columnNumber: 113\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1476,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1486,\n          columnNumber: 121\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1489,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1496,\n          columnNumber: 121\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419,\n        columnNumber: 101\n      }\n    })))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1510,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1511,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1512,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1513,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1514,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1515,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1516,\n        columnNumber: 97\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1518,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 97\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1524,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1525,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 105\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\" //  jsonField={\"jsondata\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1539,\n        columnNumber: 105\n      }\n    }))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1562,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1564,\n        columnNumber: 77\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1566,\n        columnNumber: 85\n      }\n    }) : this.state.showTest ?\n    /*#__PURE__*/\n    // <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\n    React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1569,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1570,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1571,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1572,\n        columnNumber: 101\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1575,\n        columnNumber: 93\n      }\n    })) : \"\")))))))) : this.state.layout === 3 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 61\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1596,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1597,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1598,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1599,\n        columnNumber: 77\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1602,\n        columnNumber: 69\n      }\n    })) : \"\") : \"\")))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1617,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      postParamList: this.postParamList,\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      updateStore: this.props.updateStore,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate //  specBasedComponent={this.state.specBasedComponent}\n      ,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1618,\n        columnNumber: 29\n      }\n    })) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.props.Login.loadRegSubSample || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.loadTest || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadPrinter, this.props.Login.loadFile, this.props.Login.loadChildTest, this.props.Login.loadRegSubSample),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1668,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadRegSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n        editfield: this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value),\n        Component: this.props.Login.lstComponent || [],\n        selectComponent: this.state.selectedRecord,\n        templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        handleDateChange: this.handleDateSubSampleChange,\n        onInputOnChange: this.onInputOnSubSampleChange,\n        onNumericInputChange: this.onNumericInputSubSampleChange,\n        comboData: this.props.Login.regSubSamplecomboData,\n        onComboChange: this.onComboSubSampleChange,\n        onComponentChange: this.onComponentChange,\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.onComboChange,\n        selectedTestData: this.state.selectedRecord,\n        childoperation: this.props.Login.operation,\n        specBasedComponent: this.props.Login.specBasedComponent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1674,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1696,\n          columnNumber: 63\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1706,\n          columnNumber: 41\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1710,\n          columnNumber: 79\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1642,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showSample() {\n    this.setState({\n      showSample: true,\n      showSubSample: false,\n      showTest: false\n    });\n  }\n\n  showTest() {\n    this.setState({\n      showSample: false,\n      showSubSample: false,\n      showTest: true\n    });\n  }\n\n  showSubSample() {\n    this.setState({\n      showSample: false,\n      showTest: false,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.columnList !== previousProps.Login.columnList) {\n      this.setState({\n        columnList: this.props.Login.columnList,\n        childColumnList: this.props.Login.childColumnList,\n        withoutCombocomponent: this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n      this.setState({\n        regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n        regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\n      const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n      const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n      const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\n      const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n      const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\n      const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n      const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\n      const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n      const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n      const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        cancelId,\n        preRegisterId,\n        registerId,\n        editSampleId,\n        quarantineId,\n        addTestId,\n        printBarcodeId,\n        cancelSampleId,\n        addSubSampleId,\n        editSubSampleId,\n        cancelSubSampleId\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState,\n        popUptestDataState,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        SingleItem,\n        testMoreField,\n        testListColumns,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        testAttachmentDataState,\n        sampleCommentDataState,\n        sampledateconstraints,\n        subsampledateconstraints\n      } = this.state;\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n        DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n        SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\n        SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\n        SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : []; //console.log(\"Subsample\",SubSampleSingleItem)\n\n        testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n        testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n        subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n        testSearchField = dynamicColumn.testsearchfields ? dynamicColumn.testsearchfields : [];\n        sampledateconstraints = dynamicColumn.sampledateconstraints || [];\n        subsampledateconstraints = dynamicColumn.subsampledateconstraints || []; // specBasedComponent = true;\n      }\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      let stateSampleType = this.state.stateSampleType;\n      let stateRegistrationType = this.state.stateRegistrationType;\n      let stateRegistrationSubType = this.state.stateRegistrationSubType;\n      let stateFilterStatus = this.state.stateFilterStatus;\n      let stateDynamicDesign = this.state.stateDynamicDesign;\n\n      if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n        const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n        stateSampleType = sampleTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\n        const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationType = registrationTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n        const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\n        const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\n        stateFilterStatus = filterStatusMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n        stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n      } // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip;\n      subsampletake = this.props.Login.subsampletake || subsampletake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\n        testAttachmentDataState = this.props.Login.testAttachmentDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      const testGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //searchTestRef: this.searchTestRef,\n        // testskip: testskip,\n        //subsampleskip: subsampleskip,\n        // resultDataState: resultDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode\n      };\n      const testChildGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode\n      };\n      const subSampleGetParam = {\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        // testskip: testskip,\n        // subsampleskip: subsampleskip,\n        // searchTestRef: this.searchTestRef,\n        //resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        //sampleGridDataState: sampleGridDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const filterSampleParam = {\n        inputListName: \"RegistrationGetSample\",\n        selectedObject: \"selectedSample\",\n        primaryKeyField: \"npreregno\",\n        fetchUrl: \"registration/getRegistrationSubSample\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: sampleSearchField,\n        changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterSubSampleParam = {\n        inputListName: \"RegistrationGetSubSample\",\n        selectedObject: \"selectedSubSample\",\n        primaryKeyField: \"ntransactionsamplecode\",\n        fetchUrl: \"registration/getRegistrationTest\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3,\n          npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: subsampleSearchField,\n        changeList: [\"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterTestParam = {\n        inputListName: \"RegistrationGetTest\",\n        selectedObject: \"selectedTest\",\n        primaryKeyField: \"ntransactiontestcode\",\n        fetchUrl: this.getActiveTestURL(),\n        fecthInputObject: {\n          ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: testSearchField,\n        changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n      }; // let postParamList = [\n      //     {\n      //         filteredListName: \"searchedSample\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchSampleRef,\n      //         primaryKeyField: \"npreregno\",\n      //         fetchUrl: \"registration/getRegistrationSubSample\",\n      //         fecthInputObject: subSampleGetParam,\n      //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n      //         selectedObject: \"selectedSample\",\n      //         inputListName: \"AP_SAMPLE\",\n      //         updatedListname: \"selectedSample\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      //     , {\n      //         filteredListName: \"searchedTest\",\n      //         updatedListname: \"selectedTest\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchTestRef,\n      //         primaryKeyField: \"ntransactiontestcode\",\n      //         fetchUrl: \"approval/getApprovalTest\",\n      //         fecthInputObject: testGetParam,\n      //         selectedObject: \"selectedTest\",\n      //         inputListName: \"RegistrationGetTest\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      // ];\n\n      const editRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const editSubSampleRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const addTestParam = {\n        selectedSample: this.props.Login.masterData.selectedSample,\n        selectedSubSample: this.props.Login.masterData.selectedSubSample,\n        // skip: skip, take: (skip + take),\n        userinfo: this.props.Login.userInfo,\n        sampleList: this.props.Login.masterData.RegistrationGetSample,\n        snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n      };\n      const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      this.breadCrumbData = [{\n        \"label\": \"IDS_FROM\",\n        \"value\": breadCrumbobj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": breadCrumbobj.breadCrumbto\n      }, {\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n      }, {\n        \"label\": \"IDS_REGSUBTYPE\",\n        \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n      }, {\n        \"label\": \"IDS_DESIGNTEMPLATE\",\n        \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\n      }, {\n        \"label\": \"IDS_FILTERSTATUS\",\n        \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n      }];\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType,\n        stateRegistrationType,\n        stateRegistrationSubType,\n        stateFilterStatus,\n        stateDynamicDesign,\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        subsampleskip,\n        subsampletake,\n        testtake,\n        testCommentDataState,\n        testAttachmentDataState,\n        resultDataState,\n        sampleGridDataState,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        testGetParam,\n        testChildGetParam,\n        subSampleGetParam,\n        filterSampleParam,\n        filterTestParam,\n        editRegParam,\n        editSubSampleRegParam,\n        addTestParam,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        filterSubSampleParam,\n        sampledateconstraints,\n        subsampledateconstraints\n      });\n    }\n  }\n\n  onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 5,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n      checkBoxOperation: 3,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistrationSubSample(this.state.selectedRecord, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone);\n    inputData[\"registrationsample\"] = param.sampleRegistration;\n    inputData[\"SubSampleDateList\"] = param.dateList;\n    inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SubSampleRegistration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSubSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      testAttachmentDataState: this.state.testAttachmentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.onUpdateSubSampleRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetailRegistration,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues,\n  getRegistrationSample,\n  getRegistrationsubSampleDetail,\n  getRegistrationTestDetail,\n  acceptRegistration,\n  addMoreTest,\n  createRegistrationTest,\n  getEditRegistrationComboService,\n  cancelTestAction,\n  cancelSampleAction,\n  addsubSampleRegistration,\n  saveSubSample,\n  getEditSubSampleComboService,\n  onUpdateSubSampleRegistration,\n  cancelSubSampleAction,\n  preregRecordToQuarantine,\n  componentTest,\n  getSubSampleChildTabDetail\n})(injectIntl(Registration));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/Registration.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetailRegistration","getPreviewTemplate","getChildValues","getRegistrationSample","getRegistrationsubSampleDetail","getRegistrationTestDetail","acceptRegistration","addMoreTest","createRegistrationTest","getEditRegistrationComboService","cancelTestAction","cancelSampleAction","addsubSampleRegistration","saveSubSample","getEditSubSampleComboService","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","componentTest","getSubSampleChildTabDetail","Button","Card","Col","Nav","Row","toast","SlideOutModal","getControlMap","showEsign","sortData","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","convertDateTimetoString","comboChild","RegistrationFilter","Esign","injectIntl","MediaHeader","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","designProperties","RegistrationType","transactionStatus","BreadcrumbComponent","ScrollBar","ListWrapper","TransactionListMasterJson","FontAwesomeIcon","faEye","faPlus","faSync","ContentPanel","SampleInfoView","CustomTabs","ConfirmMessage","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveSampleComments","onSaveTestComments","onSaveSampleAttachment","onSaveTestAttachment","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PortalModal","PreRegisterSlideOutModal","PerfectScrollbar","checkTestPresent","getRegistrationSubSample","AddSubSample","Registration","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","activeSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","ndesigntemplatemappingcode","RealDesignTemplateMappingValue","nneedsubsample","checkBoxOperation","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","warn","intl","formatMessage","id","onFilterSubmit","fromdate","todate","DesignTemplateMappingValue","paneSizeChange","d","setState","splitChangeWidthPercentage","handleDateSubSampleChange","dateValue","dateName","selectedRecord","onComponentChange","comboData","fieldName","label","item","nspecsampletypecode","specBasedComponent","Conponent","onInputOnSubSampleChange","event","target","type","name","checked","value","onComboSubSampleChange","control","customName","parentList","childComboList","childColumnList","comboName","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","length","regSubSamplecomboComponents","map","columnList","val","regSubSamplewithoutCombocomponent","regSubSamplecomboData","onNumericInputSubSampleChange","onSaveSubSampleClick","saveType","formRef","operation","objSubSample","defaulttimezone","sampleList","searchedSample","undefined","RegistrationGetSample","slice","skip","take","selectedSample","findSampleAlloSpec","Set","nallottedspeccode","findSampleSpec","dateList","SubSampleTemplate","jsondata","row","children","column","component","hasOwnProperty","componentrow","inputtype","mandatory","Date","loadcurrentdate","timezone","push","selectedTestData","selectedTestArray","subsampledateconstraints","join","postParamList","mandatoryList","prereg","printer","file","childtest","regSubSample","deleteAttachment","selectedFile","actionType","onSaveChildTestClick","selectedSubsample","selectedSubSample","ntransactionsamplecode","x","TestGroupTest","ntestgrouptestcode","RegistrationSample","ntype","sample","classUrl","methodUrl","responseKeyList","controlMap","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","getRegistrationComboService","ScreenName","primaryKeyField","editId","ndesigntemplatemappingcodefilter","withoutCombocomponent","Layout","registrationTemplate","comboComponents","mapOfFilterRegData","parseInt","sregsubtypename","info","retunObj","childList","childData","index","findIndex","y","handlePageChange","e","setTimeout","_scrollBarRef","updateScroll","handleTestPageChange","testskip","testtake","handleSubSamplePageChange","subsampleskip","subsampletake","openFilter","showFilter","onFilterChange","labelname","onSampleTabChange","tabProps","screenName","onSubSampleTabChange","activeSubSampleTab","ontestTabChange","selectedTest","ntransactiontestcode","String","resultDataState","testCommentDataState","testAttachmentDataState","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","confirmMessage","confirm","booleanFlag","insertRegistration","closeFilter","booleanmanuf","PLASMA_POOL","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","selectComponent","onSampleTypeChange","Map","ConfirmComponent","getComponentfromJava","onRegTypeChange","registerId","acceptList","every","checkPreregisterAndQuarentine","RegistrationGetTest","action","acceptRegistrationConfirm","userRoleControlRights","openModal","selectQuarantine","quarantineId","splice","quarentineList","checkPreregisterRecordQuarantine","onRegSubTypeChange","onDesignTemplateChange","onInputOnChange","onComboChange","PrinterChange","selectedPrinterData","closeChildModal","loadRegSubSample","showSaveContinue","loadChildTest","PopUpLabel","closeModal","loadPreregister","openChildModal","pare","loadPrinter","openPortal","subSampleDataGridList","insertSourcePreregno","onSaveClick","onSavePrinterClick","insertlist","displayName","insertPrinterPreregno","sprintername","npreregno1","ncontrolcode","onSaveFileClick","acceptedFiles","sfilename","formData","FormData","forEach","append","JSON","stringify","ntemplatemanipulationcode","ImportFile","sampleInfoDataStateChange","sampleGridDataState","dataState","dataStateChange","sourceDataState","testdataStateChange","popUptestDataState","testStateChange","testDataState","sampleTabDetail","tabMap","selectedSampleList","set","onAttachmentSaveClick","RegistrationAttachment","attachmentskip","attachmenttake","settings","esignRights","masterList","onCommentsSaveClick","RegistrationComment","testDataStateChange","has","get","subsampleTabDetail","subsampleList","RegistrationGetSubSample","selectedSubSampleList","RegistrationSampleAttachment","RegistrationSampleComment","testTabDetail","testTabMap","testList","selectedTestList","test","RegistrationTestAttachment","RegistrationTestComment","saveParam","isTestComment","searchedTest","selectedMaster","cancelSubSampleRecord","controlcode","searchedSubSample","transValidation","transactionValidation","stransdisplaystatus","cancelRecord","addSubSample","addSubSampleList","findTransactionStatus","PREREGISTER","findComponentReqSpec","ncomponentrequired","findSampleSpectemplate","regchildColumnList","handleEditDateChange","onNumericInputEditChange","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","ntransstatus","translist","sam","selectdata","check","sam1","includes","validateEsign","sreason","password","validateEsignforRegistration","editRegistration","editSubSampleRegistration","regSubSamplechildColumnList","mastertoedit","createRef","PrevoiusLoginData","breadCrumbData","layout","masterStatus","error","showAccordian","filterCollection","breadCrumb","showTest","showSample","showSubSample","sampleSearchFied","subsampleSearchFied","testSearchFied","DynamicSampleColumns","group","field","sampleCommentsDataState","historyDataState","grandparentheight","regparentSubSampleColumnList","DynamicSubSampleColumns","DynamicTestColumns","DynamicGridItem","DynamicGridMoreField","SingleItem","testMoreField","testListColumns","SubSampleDynamicGridItem","SubSampleDynamicGridMoreField","SubSampleSingleItem","cancelId","preRegisterId","editSampleId","addTestId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","cancelSubSampleId","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","stateDynamicDesign","testGetParam","testChildGetParam","subSampleGetParam","filterSampleParam","filterTestParam","editRegParam","editSubSampleRegParam","addTestParam","sampleSearchField","subsampleSearchField","testSearchField","filterSubSampleParam","initialVerticalWidth","getDerivedStateFromProps","getActiveTestURL","url","activeTestKey","gridViewChange","render","subSampleList","filteredListName","clearFilter","searchRef","fetchUrl","fecthInputObject","childRefs","ref","childFilteredListName","selectedObject","inputListName","updatedListname","unchangeList","ALL","FilterStatus","title","controlname","objectName","hidden","indexOf","onClick","primaryKeyName","getPrinterComboService","DesignTemplateMapping","split","setting","display","background","borderBottom","marginTop","float","height","gridfillingColumn","showTestAndSample","loadComponent","loadTest","loadSource","loadPoolSource","selectedSourceData","DynamicDesign","parse","lstComponent","timeZoneList","defaultTimeZone","TestCombined","availableTest","showSampleInfo","showTestDetails","QUARANTINE","temparray","option","LABEL","slanguagetypecode","VALUE","componentDidUpdate","previousProps","Object","values","sampleCommentDataState","sampledateconstraints","dynamicColumn","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","subsamplegriditem","subsamplegridmoreitem","subsampledisplayfields","testlistmoreitems","samplesearchfields","subsamplesearchfields","testsearchfields","SampleType","sampleTypeMap","registrationTypeMap","RegistrationSubType","registrationSubTypeMap","filterStatusMap","DesignTemplateMappingMap","sfromdate","stodate","searchFieldList","changeList","snspecsampletypecode","breadCrumbobj","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregtemplatename","initialParam","nflag","param","sampleRegistration","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange,\r\n    getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail,\r\n    getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues,\r\n    getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService,\r\n    cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction,\r\n    preregRecordToQuarantine, componentTest,getSubSampleChildTabDetail\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    getControlMap, showEsign, sortData, constructOptionList,\r\n    onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild\r\n} from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { MediaHeader, ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport { designProperties, RegistrationType, transactionStatus } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\r\nimport AddSubSample from './AddSubSample';\r\n\r\nclass Registration extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData = undefined;\r\n        this.breadCrumbData = [];\r\n        //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.state = {\r\n            layout: 1,\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            sampleSearchFied: [],\r\n            subsampleSearchFied: [],\r\n            testSearchFied: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'npreregno' }] },\r\n            testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            testAttachmentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            sampleCommentsDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] },\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            subsampleskip: 0,\r\n            subsampletake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            childColumnList: [],\r\n            columnList: [],\r\n            regSubSamplecomboComponents: [],\r\n            regSubSamplewithoutCombocomponent: [],\r\n            regparentSubSampleColumnList: [],\r\n            DynamicSubSampleColumns: [],\r\n            DynamicTestColumns: [],\r\n            DynamicGridItem: [],\r\n            DynamicGridMoreField: [],\r\n            SingleItem: [],\r\n            testMoreField: [],\r\n            testListColumns: [],\r\n            SubSampleDynamicGridItem: [],\r\n            SubSampleDynamicGridMoreField: [],\r\n            SubSampleSingleItem: [],\r\n            cancelId: -1,\r\n            preRegisterId: -1,\r\n            registerId: -1,\r\n            editSampleId: -1,\r\n            quarantineId: -1,\r\n            addTestId: -1,\r\n            printBarcodeId: -1,\r\n            cancelSampleId: -1,\r\n            addSubSampleId: -1,\r\n            editSubSampleId: -1,\r\n            cancelSubSampleId: -1,\r\n            stateSampleType: [],\r\n            stateRegistrationType: [],\r\n            stateRegistrationSubType: [],\r\n            stateFilterStatus: [],\r\n            stateDynamicDesign: [],\r\n            testGetParam: {},\r\n            testChildGetParam: {},\r\n            subSampleGetParam: {},\r\n            filterSampleParam: {},\r\n            filterTestParam: {},\r\n            editRegParam: {},\r\n            editSubSampleRegParam: {},\r\n            addTestParam: {},\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n            filterSubSampleParam: {},\r\n            initialVerticalWidth: \"40vh\"\r\n            // specBasedComponent: this.props.Login.settings\r\n            //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\r\n\r\n        };\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue, RegSubTypeValue, FilterStatusValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            flag: 1,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, RealDesignTemplateMappingValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue\r\n                && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            if (inputData.ndesigntemplatemappingcode) {\r\n                const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                    this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n                inputData['FromDate'] = obj.fromDate;\r\n                inputData['ToDate'] = obj.toDate;\r\n                const selectedFilter = {};\r\n                selectedFilter[\"fromdate\"] = RealFromDate;\r\n                selectedFilter[\"todate\"] = RealToDate;\r\n                const inputParam = {\r\n                    masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchSampleRef: this.searchSampleRef,\r\n                    searchTestRef: this.searchTestRef, selectedFilter\r\n                }\r\n                this.props.getRegistrationSample(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    gridViewChange(layout) {\r\n        this.setState({\r\n            layout: layout\r\n        })\r\n    }\r\n    // verticalPaneSizeChange = (val) => {\r\n    //     this.setState({\r\n    //         initialVerticalWidth: val - 150\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n\r\n\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\r\n        let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n        // let testGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     npreregno: this.props.Login.masterData.selectedSample &&\r\n        //         this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     searchTestRef: this.searchTestRef,\r\n        //     testskip: this.state.testskip,\r\n        //     subsampleskip: this.state.subsampleskip,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        // }\r\n        // let testChildGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n        //     ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     testCommentDataState: this.state.testCommentDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        // }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        // let subSampleGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     testskip: this.state.testskip,\r\n        //     subsampleskip: this.state.subsampleskip,\r\n        //     searchTestRef: this.searchTestRef,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     testCommentDataState: this.state.testCommentDataState,\r\n        //     sampleGridDataState: this.state.sampleGridDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n        // let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n        //     , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n        //     , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\r\n\r\n\r\n        // const filterSampleParam = {\r\n        //     inputListName: \"RegistrationGetSample\",\r\n        //     selectedObject: \"selectedSample\",\r\n        //     primaryKeyField: \"npreregno\",\r\n        //     fetchUrl: \"registration/getRegistrationSubSample\",\r\n        //     childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n        //     fecthInputObject: {\r\n        //         nflag: 2,\r\n        //         ntype: 2,\r\n        //         masterData: this.props.Login.masterData,\r\n        //         ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //         userinfo: this.props.Login.userInfo,\r\n        //         nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //         nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //         nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //         activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //         activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: sampleSearchField,\r\n        //     changeList: [\r\n        //         \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n        //         \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n        //         \"selectedTest\", \"RegistrationParameter\"\r\n        //     ]\r\n        // };\r\n\r\n        // let filterTestParam = {\r\n        //     inputListName: \"RegistrationGetTest\",\r\n        //     selectedObject: \"selectedTest\",\r\n        //     primaryKeyField: \"ntransactiontestcode\",\r\n        //     fetchUrl: this.getActiveTestURL(),\r\n        //     fecthInputObject: {\r\n        //         ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n        //         userinfo: this.props.Login.userInfo\r\n        //     },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\r\n        //         \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\r\n        //     changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n        // }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.subSampleGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTestSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSubSample\",\r\n                inputListName: \"AP_SUBSAMPLE\",\r\n                updatedListname: \"selectedSubSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"selectedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam,\r\n                    searchTestRef: this.searchTestRef,\r\n                    testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    resultDataState: this.state.resultDataState\r\n                },\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"RegistrationGetTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        // let editRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // let editSubSampleRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // const addTestParam = {\r\n        //     selectedsample: this.props.Login.masterData.selectedSample,\r\n        //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n        //     skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n        //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        // };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    {/* <div className='btn-list'>\r\n                        <button className={`btn-primary-head ${this.state.layout === 1 ? 'active' : ''} `} onClick={() => this.gridViewChange(1)}>Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 2 ? 'active' : ''} `} onClick={() => this.gridViewChange(2)}>Sub Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 3 ? 'active' : ''} `} onClick={() => this.gridViewChange(3)}>Test</button>\r\n                    </div> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper >\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n                                <SplitterLayout borderColor=\"#999\"\r\n                                    primaryIndex={1} percentage={true}\r\n                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    primaryMinSize={40}\r\n                                    secondaryMinSize={20}\r\n                                >\r\n                                    {this.state.layout === 1 ?\r\n                                        <TransactionListMasterJson\r\n                                            // paneHeight={this.state.firstPane}\r\n                                            splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                            masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                            selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                            primaryKeyField=\"npreregno\"\r\n                                            filterColumnData={this.props.filterTransactionList}\r\n                                            getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                            inputParam={{\r\n                                                ...this.state.subSampleGetParam,\r\n                                                searchTestRef: this.searchTestRef,\r\n                                                searchSubSampleRef: this.searchSubSampleRef,\r\n                                                testskip: this.state.testskip,\r\n                                                subsampleskip: this.state.subsampleskip,\r\n                                                resultDataState: this.state.resultDataState\r\n                                            }}\r\n                                            selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                            selectionColorField=\"scolorhexcode\"\r\n                                            mainField={\"sarno\"}\r\n                                            showStatusLink={true}\r\n                                            showStatusName={true}\r\n                                            statusFieldName=\"stransdisplaystatus\"\r\n                                            statusField=\"ntransactionstatus\"\r\n                                            selectedListName=\"selectedSample\"\r\n                                            searchListName=\"searchedSample\"\r\n                                            searchRef={this.searchSampleRef}\r\n                                            objectName=\"sample\"\r\n                                            listName=\"IDS_SAMPLE\"\r\n                                            selectionField=\"ntransactionstatus\"\r\n                                            selectionFieldName=\"stransdisplaystatus\"\r\n                                            showFilter={this.props.Login.showFilter}\r\n                                            openFilter={this.openFilter}\r\n                                            closeFilter={this.closeFilter}\r\n                                            onFilterSubmit={this.onFilterSubmit}\r\n                                            subFields={this.state.DynamicSampleColumns}\r\n                                            // jsonField={'jsondata'}\r\n                                            //jsonDesignFields={true}\r\n                                            needMultiSelect={true}\r\n                                            showStatusBlink={true}\r\n                                            filterParam={{\r\n                                                ...this.state.filterSampleParam,\r\n                                                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                            }}\r\n                                            subFieldsLabel={false}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            skip={this.state.skip}\r\n                                            take={this.state.take}\r\n                                            splitModeClass={this.state.splitChangeWidthPercentage\r\n                                                && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                                : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                            childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                                \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                            actionIcons={\r\n                                                [\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                        controlname: \"faPencilAlt\",\r\n                                                        objectName: \"mastertoedit\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\r\n                                                        onClick: this.editRegistration,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"update\",\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam: {\r\n                                                                ...this.state.editRegParam,\r\n                                                                ncontrolCode: this.state.editSampleId\r\n                                                            }\r\n                                                        },\r\n                                                    },\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                        controlname: \"faPrint\",\r\n                                                        objectName: \"sample\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                                        onClick: this.props.getPrinterComboService,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"print\",\r\n                                                            ncontrolcode: this.state.printBarcodeId,\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam: {\r\n                                                                ...this.state.editRegParam,\r\n                                                                ncontrolCode: this.state.editSampleId\r\n                                                            }\r\n                                                        },\r\n                                                    },\r\n\r\n                                                ]\r\n                                            }\r\n                                            needFilter={true}\r\n                                            commonActions={\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1}\r\n                                                        onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                            this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId)}>\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.registerId) === -1}\r\n                                                        onClick={() => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take)} >\r\n                                                        <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1}\r\n                                                        onClick={() => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take)} >\r\n                                                        <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1}\r\n                                                        onClick={() => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                        <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        onClick={() => this.onReload()} >\r\n\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                </ProductList>\r\n                                            }\r\n                                            filterComponent={[\r\n                                                {\r\n                                                    \"Sample Filter\": <RegistrationFilter\r\n                                                        SampleType={this.state.stateSampleType || []}\r\n                                                        RegistrationType={this.state.stateRegistrationType || []}\r\n                                                        RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                        userInfo={this.props.Login.userInfo || {}}\r\n                                                        SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                        RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                        RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                        FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                        DesignTemplateMapping={this.props.Login.masterData.DesignTemplateMapping}\r\n                                                        DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || {}}\r\n                                                        FilterStatus={this.state.stateFilterStatus || []}\r\n                                                        FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                        ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                        onSampleTypeChange={this.onSampleTypeChange}\r\n                                                        onRegTypeChange={this.onRegTypeChange}\r\n                                                        onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                        onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                        DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                        handleFilterDateChange={this.handleFilterDateChange}\r\n                                                        onFilterChange={this.onFilterChange}\r\n                                                    />\r\n                                                }\r\n                                            ]}\r\n\r\n                                        />\r\n                                        : this.state.layout === 2 ?\r\n                                            <TransactionListMasterJson\r\n                                                paneHeight={this.state.initialVerticalWidth}\r\n                                                // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                                                selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                                primaryKeyField=\"ntransactionsamplecode\"\r\n                                                getMasterDetail={this.props.getRegistrationTestDetail}\r\n                                                inputParam={{\r\n                                                    ...this.state.testGetParam,\r\n                                                    searchTestRef: this.searchTestRef,\r\n                                                    testskip: this.state.testskip,\r\n                                                    subsampleskip: this.state.subsampleskip,\r\n                                                    resultDataState: this.state.resultDataState\r\n                                                }}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                mainField=\"ssamplearno\"\r\n                                                selectedListName=\"selectedSubSample\"\r\n                                                objectName=\"subsample\"\r\n                                                listName=\"IDS_SUBSAMPLE\"\r\n                                                //jsonField={'jsondata'}\r\n                                                //jsonDesignFields={true}\r\n                                                needValidation={true}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSubSampleColumns}\r\n                                                searchRef={this.searchSubSampleRef}\r\n                                                skip={this.state.subsampleskip}\r\n                                                take={this.state.subsampletake}\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                needMultiSelect={true}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                subFieldsLabel={false}\r\n                                                handlePageChange={this.handleSubSamplePageChange}\r\n                                                selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                    && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                childTabsKey={[\"RegistrationAttachment\",\r\n                                                    \"RegistrationGetTest\"]}\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"mastertoedit\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                                            onClick: this.editSubSampleRegistration,\r\n                                                            inputData: {\r\n                                                                primaryKeyName: \"ntransactionsamplecode\",\r\n                                                                operation: \"update\",\r\n                                                                masterData: this.props.Login.masterData,\r\n                                                                userInfo: this.props.Login.userInfo,\r\n                                                                editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSampleId }\r\n                                                            },\r\n                                                        }\r\n\r\n\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                            <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                //title={\"Add Test\"}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                                                onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPlus} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link\r\n                                                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                //title={\"Cancel/Reject Test\"}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                                                onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                                                <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                            </Nav.Link>\r\n                                                        </ProductList>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n\r\n\r\n                                            : this.state.layout === 3 ?\r\n                                                <TransactionListMasterJson\r\n                                                    paneHeight={this.state.initialVerticalWidth}\r\n                                                    masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                    selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                    primaryKeyField=\"ntransactiontestcode\"\r\n                                                    getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                                                    inputParam={{\r\n                                                        ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                                                        testCommentDataState: this.state.testCommentDataState,\r\n                                                        testAttachmentDataState: this.state.testAttachmentDataState,\r\n                                                    }}\r\n                                                    additionalParam={[]}\r\n                                                    mainField=\"stestsynonym\"\r\n                                                    selectedListName=\"selectedTest\"\r\n                                                    objectName=\"test\"\r\n                                                    listName=\"IDS_TEST\"\r\n                                                    //jsonField={'jsondata'}\r\n                                                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                    showStatusLink={true}\r\n                                                    subFieldsLabel={true}\r\n                                                    statusFieldName=\"stransdisplaystatus\"\r\n                                                    statusField=\"ntransactionstatus\"\r\n                                                    needMultiSelect={true}\r\n                                                    subFields={this.state.testListColumns || []}\r\n                                                    moreField={this.state.testMoreField}\r\n                                                    needValidation={false}\r\n                                                    showStatusName={true}\r\n                                                    needFilter={false}\r\n                                                    filterColumnData={this.props.filterTransactionList}\r\n                                                    searchListName=\"searchedTest\"\r\n                                                    searchRef={this.searchTestRef}\r\n                                                    filterParam={this.state.filterTestParam}\r\n                                                    selectionField=\"ntransactionstatus\"\r\n                                                    selectionFieldName=\"stransdisplaystatus\"\r\n                                                    // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                    childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"]}\r\n                                                    handlePageChange={this.handleTestPageChange}\r\n                                                    buttonCount={5}\r\n                                                    skip={this.state.testskip}\r\n                                                    take={this.state.testtake}\r\n                                                    showMoreResetList={true}\r\n                                                    showMoreResetListName=\"RegistrationGetSample\"\r\n                                                    selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                    selectionColorField=\"scolorhexcode\"\r\n                                                    // selectionList=\r\n                                                    // actionIcons={\r\n                                                    //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                    //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                    //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                    //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                    // }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                    //title={\"Add Test\"}\r\n                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                                                    onClick={() => this.props.addMoreTest({\r\n                                                                        ...this.state.addTestParam,\r\n                                                                        skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                                                    }, this.state.addTestId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link\r\n                                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                    //title={\"Cancel/Reject Test\"}\r\n                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                                                    onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                    <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                </Nav.Link>\r\n                                                            </ProductList>\r\n                                                            {/* </Tooltip> */}\r\n                                                        </>\r\n                                                    }\r\n                                                /> : \"\"}\r\n\r\n                                    <PerfectScrollbar>\r\n                                        {this.state.layout === 1 ?\r\n                                            <SplitterLayout\r\n                                                customClassName=\"detailed-inner\"\r\n                                                vertical\r\n                                                borderColor=\"#999\"\r\n                                                primaryIndex={1}\r\n                                                // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                                secondaryInitialSize={400}\r\n                                            >\r\n                                                <div>\r\n                                                    <div style={this.state.showTest === true ?\r\n                                                        { display: \"block\", background: \"#FFFF\" } : { display: \"block\", background: \"#FFFF\" }} >\r\n                                                        <SplitterLayout borderColor=\"#999\"\r\n                                                            primaryIndex={1} percentage={true}\r\n                                                            secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                            onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                            primaryMinSize={40}\r\n                                                            secondaryMinSize={30}\r\n                                                        >\r\n                                                            <Card>\r\n                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                        <h4 className=\"card-title\">Sub Sample</h4>\r\n                                                                    </span>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body className='p-0'>\r\n                                                                    <TransactionListMasterJson\r\n                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                        // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                                        masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                                                                        selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                                                        primaryKeyField=\"ntransactionsamplecode\"\r\n                                                                        getMasterDetail={this.props.getRegistrationTestDetail}\r\n                                                                        inputParam={{\r\n                                                                            ...this.state.testGetParam,\r\n                                                                            searchTestRef: this.searchTestRef,\r\n                                                                            searchSubSampleRef: this.searchSubSampleRef,\r\n                                                                            testskip: this.state.testskip,\r\n                                                                            subsampleskip: this.state.subsampleskip,\r\n                                                                            resultDataState: this.state.resultDataState\r\n                                                                        }}\r\n                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                        searchListName=\"searchedSubSample\"\r\n                                                                        searchRef={this.searchSubSampleRef}\r\n                                                                        filterParam={{\r\n                                                                            ...this.state.filterSubSampleParam,\r\n                                                                            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }]\r\n                                                                        }}\r\n                                                                        additionalParam={['napprovalversioncode']}\r\n                                                                        showStatusLink={true}\r\n                                                                        showStatusName={true}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        mainField=\"ssamplearno\"\r\n                                                                        selectedListName=\"selectedSubSample\"\r\n                                                                        objectName=\"subsample\"\r\n                                                                        listName=\"IDS_SUBSAMPLE\"\r\n                                                                        // jsonField={'jsondata'}\r\n                                                                        //jsonDesignFields={true}\r\n                                                                        needValidation={true}\r\n                                                                        validationKey=\"napprovalversioncode\"\r\n                                                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                                        subFields={this.state.DynamicSubSampleColumns}\r\n                                                                        skip={this.state.subsampleskip}\r\n                                                                        take={this.state.subsampletake}\r\n                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                                                        needMultiSelect={true}\r\n                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                        subFieldsLabel={false}\r\n                                                                        handlePageChange={this.handleSubSamplePageChange}\r\n                                                                        selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                                            && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                        childTabsKey={[\"RegistrationAttachment\",\r\n                                                                            \"RegistrationGetTest\"]}\r\n                                                                        actionIcons={\r\n                                                                            [\r\n                                                                                {\r\n                                                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                                    controlname: \"faPencilAlt\",\r\n                                                                                    objectName: \"mastertoedit\",\r\n                                                                                    hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                                                                    onClick: this.editSubSampleRegistration,\r\n                                                                                    inputData: {\r\n                                                                                        primaryKeyName: \"ntransactionsamplecode\",\r\n                                                                                        operation: \"update\",\r\n                                                                                        masterData: this.props.Login.masterData,\r\n                                                                                        userInfo: this.props.Login.userInfo,\r\n                                                                                        editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSampleId }\r\n                                                                                    },\r\n                                                                                }\r\n\r\n\r\n                                                                            ]\r\n                                                                        }\r\n                                                                        needFilter={false}\r\n                                                                        commonActions={\r\n                                                                            <>\r\n                                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                        //title={\"Add Test\"}\r\n                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                                                                        onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                                                    </Nav.Link>\r\n                                                                                    <Nav.Link\r\n                                                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                        //title={\"Cancel/Reject Test\"}\r\n                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                                                                        onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                                                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                    </Nav.Link>\r\n                                                                                </ProductList>\r\n                                                                                {/* </Tooltip> */}\r\n                                                                            </>\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            <ContentPanel>\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\" }}>\r\n                                                                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                        </button>\r\n                                                                        {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showSubSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                        </button> */}\r\n\r\n                                                                        {/* </div> */}\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body className='p-0'>\r\n\r\n                                                                        <TransactionListMasterJson\r\n                                                                            paneHeight={this.state.initialVerticalWidth}\r\n                                                                            masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                            selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                            primaryKeyField=\"ntransactiontestcode\"\r\n                                                                            getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                                                                            inputParam={{\r\n                                                                                ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                                                                                testCommentDataState: this.state.testCommentDataState,\r\n                                                                                testAttachmentDataState: this.state.testAttachmentDataState,\r\n                                                                            }}\r\n                                                                            additionalParam={[]}\r\n                                                                            mainField=\"stestsynonym\"\r\n                                                                            selectedListName=\"selectedTest\"\r\n                                                                            objectName=\"test\"\r\n                                                                            listName=\"IDS_TEST\"\r\n                                                                            // jsonField={'jsondata'}\r\n                                                                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                            showStatusLink={true}\r\n                                                                            subFieldsLabel={true}\r\n                                                                            statusFieldName=\"stransdisplaystatus\"\r\n                                                                            statusField=\"ntransactionstatus\"\r\n                                                                            needMultiSelect={true}\r\n                                                                            subFields={this.state.testListColumns || []}\r\n                                                                            moreField={this.state.testMoreField}\r\n                                                                            needValidation={false}\r\n                                                                            showStatusName={true}\r\n                                                                            needFilter={false}\r\n                                                                            filterColumnData={this.props.filterTransactionList}\r\n                                                                            searchListName=\"searchedTest\"\r\n                                                                            searchRef={this.searchTestRef}\r\n                                                                            filterParam={this.state.filterTestParam}\r\n                                                                            selectionField=\"ntransactionstatus\"\r\n                                                                            selectionFieldName=\"stransdisplaystatus\"\r\n                                                                            // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                            childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"]}\r\n                                                                            handlePageChange={this.handleTestPageChange}\r\n                                                                            buttonCount={5}\r\n                                                                            skip={this.state.testskip}\r\n                                                                            take={this.state.testtake}\r\n                                                                            showMoreResetList={true}\r\n                                                                            showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                            selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                            selectionColorField=\"scolorhexcode\"\r\n                                                                            // selectionList=\r\n                                                                            // actionIcons={\r\n                                                                            //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                            //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                            //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                            //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                            // }\r\n                                                                            commonActions={\r\n                                                                                <>\r\n                                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                    <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                        <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                            //title={\"Add Test\"}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                                                                            onClick={() => this.props.addMoreTest({\r\n                                                                                                ...this.state.addTestParam,\r\n                                                                                                skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                                                                            }, this.state.addTestId)}\r\n                                                                                        >\r\n                                                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                                                        </Nav.Link>\r\n\r\n                                                                                        <Nav.Link\r\n                                                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                            //title={\"Cancel/Reject Test\"}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                                                                            onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                            <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                        </Nav.Link>\r\n                                                                                    </ProductList>\r\n                                                                                    {/* </Tooltip> */}\r\n                                                                                </>\r\n                                                                            }\r\n                                                                        />\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n                                                        </SplitterLayout>\r\n                                                    </div>\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"none\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Card className='p-0'>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                    <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                </span>\r\n                                                                                {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showSubSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                                </button> */}\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                                    onClick={() => this.showTest()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                </button>\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body>\r\n                                                                                <PerfectScrollbar>\r\n                                                                                    <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                        {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                            <SampleInfoView\r\n                                                                                                data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                    this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                                SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                    this.state.SingleItem : []}\r\n                                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                            />\r\n\r\n                                                                                            :\r\n                                                                                            <SampleGridTab\r\n                                                                                                userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                                masterData={this.props.Login.masterData}\r\n                                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                                dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                                primaryKeyField={\"npreregno\"}\r\n                                                                                                expandField=\"expanded\"\r\n                                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            //jsonField={\"jsondata\"}\r\n                                                                                            />\r\n                                                                                        }\r\n                                                                                    </div>\r\n                                                                                </PerfectScrollbar>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                    {/* <ContentPanel style={this.state.showSubSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Card className='p-0'>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                    <h4 >{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                                                                                </span>\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                </button>\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                                    onClick={() => this.showTest()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                </button>\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body>\r\n                                                                                <PerfectScrollbar>\r\n                                                                                    <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                        {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                            <SampleInfoView\r\n                                                                                                data={(this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.length > 0) ?\r\n                                                                                                    this.props.Login.masterData.selectedSubSample[this.props.Login.masterData.selectedSubSample.length - 1] : {}}\r\n                                                                                                SingleItem={this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample ?\r\n                                                                                                    this.state.SubSampleSingleItem : []}\r\n                                                                                                screenName=\"IDS_SUBSAMPLEINFO\"\r\n                                                                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                            />\r\n\r\n                                                                                            :\r\n                                                                                            <SampleGridTab\r\n                                                                                                userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                GridData={this.props.Login.masterData.selectedSubSample || []}\r\n                                                                                                masterData={this.props.Login.masterData}\r\n                                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                                dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                extractedColumnList={this.gridfillingColumn(this.state.SubSamDynamicGridItem) || []}\r\n                                                                                                detailedFieldList={this.gridfillingColumn(this.state.SubSamDynamicGridMoreField) || []}\r\n                                                                                                primaryKeyField={\"npreregno\"}\r\n                                                                                                expandField=\"expanded\"\r\n                                                                                                screenName=\"IDS_SUBSAMPLEINFO\"\r\n                                                                                                jsonField={\"jsondata\"}\r\n                                                                                            />\r\n                                                                                        }\r\n                                                                                    </div>\r\n                                                                                </PerfectScrollbar>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel> */}\r\n                                                </div>\r\n                                                <div>\r\n                                                    {/* <SearchAdd className=\"d-flex justify-content-between\"> */}\r\n                                                    <Card className='p-0'>\r\n                                                        <Card.Body className='p-0'>\r\n                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                {/* <MediaHeader> */}\r\n                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                    <h4 >{this.props.intl.formatMessage({\r\n                                                                        id: this.state.showSample ? \"IDS_SAMPLE\" :\r\n                                                                            this.state.showSubSample ? \"IDS_SUBSAMPLE\" : \"IDS_TEST\"\r\n                                                                    })}</h4>\r\n                                                                </span>\r\n                                                                {/* <h4 style={{ fontWeight: \"bold\" }}>{\r\n                                                                this.props.intl.formatMessage({\r\n                                                                    id: this.state.showSample ? \"IDS_SAMPLE\" :\r\n                                                                        this.state.showSubSample ? \"IDS_SUBSAMPLE\" : \"IDS_TEST\"\r\n                                                                })}</h4> */}\r\n                                                                {/* </MediaHeader> */}\r\n\r\n                                                                {this.state.showSample ? <>\r\n                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                        onClick={() => this.showSubSample()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                    </button>\r\n                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                        onClick={() => this.showTest()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                    </button></> : this.state.showSubSample ?\r\n                                                                    <><button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                        onClick={() => this.showSample()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                    </button>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showTest()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button></> : <>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                        </button>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showSubSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                        </button></>\r\n                                                                }\r\n                                                            </Card.Header>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                    {/* </SearchAdd> */}\r\n                                                    <PerfectScrollbar>\r\n                                                        <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                            {this.state.showSample ?\r\n\r\n                                                                <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                    tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                                this.state.showSubSample ?\r\n                                                                    <CustomTabs activeKey={this.props.Login.activeSubSampleTab ? this.props.Login.activeSubSampleTab === 'IDS_SUBSAMPLEATTACHMENTS' ? 'IDS_SUBSAMPLEATTACHMENTS' : this.props.Login.activeSubSampleTab : 'IDS_SUBSAMPLEATTACHMENTS'}\r\n                                                                        tabDetail={this.subsampleTabDetail()} onTabChange={this.onSubSampleTabChange} />\r\n                                                                    : this.state.showTest ?\r\n                                                                        <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                            tabDetail={this.testTabDetail()}\r\n                                                                            onTabChange={this.ontestTabChange} />\r\n                                                                        // <Card>\r\n                                                                        /* <Card.Header style={{ \"borderBottom\": \"0px\", \"padding-top\": \"1px\" }}>\r\n                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                                <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                            </span>\r\n                                                                        </Card.Header> */\r\n\r\n                                                                        // </Card>\r\n                                                                        // : this.state.showSubSample ?\r\n                                                                        //     <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                        //         tabDetail={this.subsampleTabDetail()}\r\n                                                                        //         onTabChange={this.onSubSampleTabChange} />\r\n\r\n                                                                        //     : \"\"}\r\n                                                                        : \"\"}\r\n                                                        </div>\r\n                                                    </PerfectScrollbar>\r\n                                                </div>\r\n                                            </SplitterLayout>\r\n                                            :\r\n                                            this.state.layout === 2 ?\r\n                                                <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                                    <div className=\"\">\r\n                                                        <>\r\n                                                            <div className=\"card_group\">\r\n                                                                <SplitterLayout\r\n                                                                    customClassName=\"detailed-inner\"\r\n                                                                    vertical\r\n                                                                    borderColor=\"#999\"\r\n                                                                    primaryIndex={1}\r\n                                                                    secondaryInitialSize={400}\r\n                                                                // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n\r\n                                                                >\r\n                                                                    <div>\r\n                                                                        <ContentPanel style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                                            <Card className=\"border-0\">\r\n                                                                                <Card.Body className='p-0'>\r\n                                                                                    <Row className='no-gutters'>\r\n                                                                                        <Col md={12}>\r\n                                                                                            <Card>\r\n                                                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                                    <span style={{ display: \"inline-block\" }}>\r\n                                                                                                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                                                    </span>\r\n                                                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                                        onClick={() => this.showTestAndSample()}\r\n                                                                                                    >\r\n                                                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                                                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                                    </button>\r\n                                                                                                    {/* </div> */}\r\n                                                                                                </Card.Header>\r\n                                                                                                <Card.Body className='p-0'>\r\n                                                                                                    <TransactionListMasterJson\r\n                                                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                                                        masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                                                        selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                                                        primaryKeyField=\"ntransactiontestcode\"\r\n                                                                                                        getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                                                                                                        inputParam={{\r\n                                                                                                            ...this.state.testChildGetParam,\r\n                                                                                                            resultDataState: this.state.resultDataState,\r\n                                                                                                            testCommentDataState: this.state.testCommentDataState,\r\n                                                                                                            testAttachmentDataState: this.state.testAttachmentDataState,\r\n                                                                                                        }}\r\n                                                                                                        additionalParam={[]}\r\n                                                                                                        mainField=\"stestsynonym\"\r\n                                                                                                        selectedListName=\"selectedTest\"\r\n                                                                                                        objectName=\"test\"\r\n                                                                                                        listName=\"IDS_TEST\"\r\n                                                                                                        //  jsonField={'jsondata'}\r\n                                                                                                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                                                        showStatusLink={true}\r\n                                                                                                        subFieldsLabel={true}\r\n                                                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                                                        statusField=\"ntransactionstatus\"\r\n                                                                                                        needMultiSelect={true}\r\n                                                                                                        subFields={this.state.testListColumns || []}\r\n                                                                                                        moreField={this.state.testMoreField}\r\n                                                                                                        needValidation={false}\r\n                                                                                                        showStatusName={true}\r\n                                                                                                        needFilter={false}\r\n                                                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                                                        searchListName=\"searchedTest\"\r\n                                                                                                        searchRef={this.searchTestRef}\r\n                                                                                                        filterParam={this.state.filterTestParam}\r\n                                                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                                                                                        // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                                                        childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\"]}\r\n                                                                                                        handlePageChange={this.handleTestPageChange}\r\n                                                                                                        buttonCount={5}\r\n                                                                                                        skip={this.state.testskip}\r\n                                                                                                        take={this.state.testtake}\r\n                                                                                                        showMoreResetList={true}\r\n                                                                                                        showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                                                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                                                        // selectionList=\r\n                                                                                                        // actionIcons={\r\n                                                                                                        //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                                                        //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                                                        //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                                                        //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                                                        // }\r\n                                                                                                        commonActions={\r\n                                                                                                            <>\r\n                                                                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                                        //title={\"Add Test\"}\r\n                                                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                                                                                                        onClick={() => this.props.addMoreTest({\r\n                                                                                                                            ...this.state.addTestParam,\r\n                                                                                                                            skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                                                                                                        }, this.state.addTestId)}\r\n                                                                                                                    >\r\n                                                                                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                                                                                    </Nav.Link>\r\n\r\n                                                                                                                    <Nav.Link\r\n                                                                                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                                        //title={\"Cancel/Reject Test\"}\r\n                                                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                                                                                                        onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                                                    </Nav.Link>\r\n                                                                                                                </ProductList>\r\n                                                                                                                {/* </Tooltip> */}\r\n                                                                                                            </>\r\n                                                                                                        }\r\n                                                                                                    />\r\n                                                                                                </Card.Body>\r\n                                                                                            </Card>\r\n                                                                                        </Col>\r\n                                                                                    </Row>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </ContentPanel>\r\n                                                                        <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                                            <Card className=\"border-0\">\r\n                                                                                <Card.Body className='p-0'>\r\n                                                                                    <Card className='p-0'>\r\n                                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                            </span>\r\n                                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                                onClick={() => this.showTestAndSample()}>\r\n                                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                            </button>\r\n                                                                                        </Card.Header>\r\n                                                                                        <Card.Body>\r\n                                                                                            <PerfectScrollbar>\r\n                                                                                                <div style={{ height: this.state.initialVerticalWidth }}>\r\n\r\n                                                                                                    {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                                        <SampleInfoView\r\n                                                                                                            data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                                this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                                            SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                                this.state.SingleItem : []}\r\n                                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                                        />\r\n                                                                                                        :\r\n                                                                                                        <SampleGridTab\r\n                                                                                                            userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                            GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                                            masterData={this.props.Login.masterData}\r\n                                                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                                                            dataState={this.state.sampleGridDataState}\r\n                                                                                                            dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                                            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                                            primaryKeyField={\"npreregno\"}\r\n                                                                                                            expandField=\"expanded\"\r\n                                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                        //  jsonField={\"jsondata\"}\r\n                                                                                                        />\r\n                                                                                                    }\r\n                                                                                                </div>\r\n                                                                                            </PerfectScrollbar>\r\n                                                                                        </Card.Body>\r\n                                                                                    </Card>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </ContentPanel>\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        <PerfectScrollbar>\r\n                                                                            <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                                                {this.state.showSample ?\r\n                                                                                    <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'} tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                                                    this.state.showTest ?\r\n                                                                                        // <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\r\n                                                                                        <Card>\r\n                                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                                                    <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                                                </span>\r\n                                                                                            </Card.Header>\r\n                                                                                            <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                                                tabDetail={this.testTabDetail()}\r\n                                                                                                onTabChange={this.ontestTabChange} />\r\n                                                                                        </Card>\r\n                                                                                        : \"\"}\r\n                                                                            </div>\r\n                                                                        </PerfectScrollbar>\r\n                                                                    </div>\r\n                                                                </SplitterLayout>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    </div>\r\n                                                </ScrollBar> :\r\n                                                this.state.layout === 3 ?\r\n                                                    <>\r\n                                                        {this.state.showSample ?\r\n\r\n                                                            <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                            this.state.showTest ?\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                        </span>\r\n                                                                    </Card.Header>\r\n                                                                    <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                        tabDetail={this.testTabDetail()}\r\n                                                                        onTabChange={this.ontestTabChange} />\r\n                                                                </Card>\r\n                                                                : \"\"}\r\n                                                    </>\r\n                                                    : \"\"}\r\n                                    </PerfectScrollbar>\r\n                                </SplitterLayout>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {\r\n                    this.props.Login.openPortal ?\r\n                        <PortalModal>\r\n                            <PreRegisterSlideOutModal\r\n                                postParamList={this.postParamList}\r\n                                PrevoiusLoginData={this.PrevoiusLoginData}\r\n                                closeModal={this.closeModal}\r\n                                operation={\"create\"}\r\n                                screenName={\"IDS_REGISTRATION\"}\r\n                                onSaveClick={this.onSaveClick}\r\n                                validateEsign={this.validateEsign}\r\n                                updateStore={this.props.updateStore}\r\n                                comboComponents={this.state.comboComponents}\r\n                                withoutCombocomponent={this.state.withoutCombocomponent}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                fromDate={this.fromDate}\r\n                                toDate={this.toDate}\r\n                                //  specBasedComponent={this.state.specBasedComponent}\r\n                                mandatoryFields={[\r\n                                    { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                            />\r\n                        </PortalModal>\r\n                        : \"\"\r\n                }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.props.Login.loadRegSubSample ||\r\n                            this.props.Login.loadFile ||\r\n                            this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.loadTest || this.props.Login.loadFile ?\r\n                            this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick :\r\n                            this.props.Login.loadPrinter ? this.onSavePrinterClick :\r\n                                this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                            : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryList(this.props.Login.loadPreregister,\r\n                            this.props.Login.loadPrinter, this.props.Login.loadFile,\r\n                            this.props.Login.loadChildTest, this.props.Login.loadRegSubSample)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.loadRegSubSample ?\r\n                                <AddSubSample\r\n                                    editfield={this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)}\r\n                                    Component={this.props.Login.lstComponent || []}\r\n                                    selectComponent={this.state.selectedRecord}\r\n                                    templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                        this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                    handleDateChange={this.handleDateSubSampleChange}\r\n                                    onInputOnChange={this.onInputOnSubSampleChange}\r\n                                    onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                    comboData={this.props.Login.regSubSamplecomboData}\r\n                                    onComboChange={this.onComboSubSampleChange}\r\n                                    onComponentChange={this.onComponentChange}\r\n                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                    TestChange={this.onComboChange}\r\n                                    selectedTestData={this.state.selectedRecord}\r\n                                    childoperation={this.props.Login.operation}\r\n                                    specBasedComponent={this.props.Login.specBasedComponent}\r\n\r\n                                />\r\n                                : this.props.Login.loadFile ? <AddFile\r\n                                    selectedFile={this.state.selectedFile || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onDrop={this.onDropComponentFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    actionType={this.state.actionType}\r\n                                    maxSize={20}\r\n                                    maxFiles={1}\r\n                                /> :\r\n                                    this.props.Login.loadPrinter ?\r\n                                        <AddPrinter\r\n                                            printer={this.props.Login.printer}\r\n                                            selectedPrinterData={this.state.selectedPrinterData}\r\n                                            PrinterChange={this.PrinterChange}\r\n                                        /> : this.props.Login.loadChildTest ? <AddTest\r\n                                            TestCombined={this.props.Login.availableTest}\r\n                                            selectedTestData={this.state.selectedRecord}\r\n                                            TestChange={this.onComboChange}\r\n                                        /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectedRecord[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectedRecord })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectedRecord[fieldName] = comboData;\r\n                selectedRecord[\"Sample Name\"] = comboData.label;\r\n                selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                selectedRecord[\"ntestgrouptestcode\"] = [];\r\n\r\n                this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent,\r\n                    this.props.Login.Conponent)\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputOnSubSampleChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents,\r\n                control.child, \"label\")\r\n            childColumnList = {};\r\n            childColumnList = childComboList.map(columnList => {\r\n                const val = comboChild(this.state.regSubSamplecomboComponents,\r\n                    columnList, childColumnList, false);\r\n                //  childColumnList = val.childColumnList\r\n                return val.childColumnList;\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent,\r\n                control.child, \"label\")\r\n\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData,\r\n                childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent,\r\n                [...childComboList, ...parentList])\r\n        } else {\r\n            this.setState({ selectedRecord })\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { selectedRecord }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        if (operation === 'create') {\r\n            let objSubSample = this.state.selectedRecord;\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            const userInfo = this.props.Login.userInfo;\r\n\r\n            let saveSubSample = {};\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno')\r\n\r\n            const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\r\n            if (this.props.Login.specBasedComponent) {\r\n                saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n                saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n            } else {\r\n                const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n                saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\r\n            }\r\n\r\n            saveSubSample[\"jsondata\"] = {}\r\n            saveSubSample[\"jsonuidata\"] = {}\r\n            const dateList = []\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                //let componentrowlabel = ''\r\n                                // let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\r\n\r\n                                        saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\r\n\r\n                                        // if (componentrow.mandatory || objSubSample[componentrow.label]) {\r\n                                        //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                        //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\r\n                                        // }\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                objSubSample[componentrow.label] : new Date(), userInfo);\r\n\r\n                                            saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n                                        } else {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) :\r\n                                                objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n                                            saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\r\n                                                { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            objSubSample[componentrow.label] : \"\"\r\n\r\n                                        saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n\r\n                                        // if (objSubSample[componentrow.label]) {\r\n                                        //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\r\n                                        //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\r\n                                        // }\r\n                                    }\r\n                                    return saveSubSample;\r\n                                })\r\n                                //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\r\n\r\n                                    saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ?\r\n                                            objSubSample[component.label] : new Date(), userInfo);\r\n\r\n                                        saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                    } else {\r\n                                        saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) :\r\n                                            objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) : \"\";\r\n                                        saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\r\n                                            { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        objSubSample[component.label] : \"\"\r\n\r\n                                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return saveSubSample;\r\n                        }\r\n                        )\r\n                        return saveSubSample;\r\n                    })\r\n                    return saveSubSample;\r\n                })\r\n\r\n            saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // Component.unshift(saveSubSample);\r\n\r\n            let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n\r\n            // const Test = this.props.Login.Test || [];\r\n            // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            const map = {}\r\n            map['RegistrationSample'] = saveSubSample\r\n            map['subsampleDateList'] = dateList\r\n            map['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n            map['testgrouptest'] = selectedTestArray\r\n            map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\")\r\n            map['userinfo'] = userInfo\r\n            map['checkBoxOperation'] = 3\r\n            map['ntype'] = 3\r\n            map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n            map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n            map[\"checkBoxOperation\"] = 3\r\n            map[\"masterData\"] = this.props.Login.masterData\r\n            map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n            map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n\r\n            const inputParam = {\r\n                inputData: map,\r\n                postParamList: this.postParamList,\r\n            }\r\n\r\n            this.props.saveSubSample(inputParam);\r\n        } else {\r\n            this.onUpdateSubSampleRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (regSubSample) {\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        mandatory.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                    }\r\n                                    return mandatory;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n\r\n        else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        const inputData = {\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        }\r\n\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef,\r\n            postParamList: this.postParamList,\r\n\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    getRegistrationComboService = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId) => {\r\n        const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue &&\r\n            this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode\r\n        if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\r\n            let data = [];\r\n            const withoutCombocomponent = []\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.inputtype === \"combo\" ?\r\n                                    data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n\r\n                })\r\n                const comboComponents = data\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = this.comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n                const mapOfFilterRegData = {\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                }\r\n                this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n                    data, this.state.selectedRecord, childColumnList,\r\n                    comboComponents, withoutCombocomponent, true, false,\r\n                    mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename)\r\n            } else {\r\n                toast.info(\"Configure the preregister template for this registrationtype\")\r\n            }\r\n        } else {\r\n            toast.info(\"select the approved design template\")\r\n        }\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                        return data;\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subsampleskip: e.skip,\r\n            subsampletake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                }\r\n                this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showSample() {\r\n        this.setState({\r\n            showSample: true, showSubSample: false,\r\n            showTest: false\r\n        })\r\n    }\r\n\r\n    showTest() {\r\n        this.setState({\r\n            showSample: false, showSubSample: false,\r\n            showTest: true\r\n        })\r\n    }\r\n\r\n    showSubSample() {\r\n        this.setState({\r\n            showSample: false, showTest: false,\r\n            showSubSample: !this.state.showSubSample\r\n        })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        } else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample\r\n                && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\r\n                        Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 3;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    } else {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\",\r\n                            \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n\r\n\r\n    closeChildModal = () => {\r\n        let loadRegSubSample = this.props.Login.loadRegSubSample;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        else if (this.props.Login.loadRegSubSample) {\r\n            loadRegSubSample = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadRegSubSample, screenName, showSaveContinue,\r\n                loadFile, loadChildTest,\r\n                openModal,\r\n                parentPopUpSize: \"xl\", selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let openPortal = this.props.Login.openPortal;\r\n        let Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl'\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, parentPopUpSize }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            selectedRecord = {};\r\n            openPortal = false;\r\n            subSampleDataGridList = []\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadPreregister, selectedRecord,\r\n                    screenName, insertSourcePreregno: undefined,\r\n                    loadPrinter, openPortal,\r\n                    Component, subSampleDataGridList\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ?\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLE\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSubSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsubsamplecommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLES\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let testList = [];\r\n            if (this.props.Login.masterData.searchedTest !== undefined) {\r\n                testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n            } else {\r\n                testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n\r\n    cancelSubSampleRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedSubSample ||\r\n            (this.props.Login.masterData.RegistrationGetSubSample ?\r\n                [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                // Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addSubSample = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n            const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\r\n                    //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\r\n                    //   if (findApprovalVersion.length === 1) {\r\n                    const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\r\n                    const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n                    const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                    {\r\n                        let data = []\r\n                        const regSubSamplewithoutCombocomponent = []\r\n                        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                        if (Layout !== undefined) {\r\n                            Layout.map(row => {\r\n                                return row.children.map(column => {\r\n                                    return column.children.map(component => {\r\n                                        return component.hasOwnProperty(\"children\") ?\r\n                                            component.children.map(componentrow => {\r\n                                                if (componentrow.inputtype === \"combo\") {\r\n                                                    data.push(componentrow)\r\n                                                } else {\r\n                                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                                }\r\n                                                return null;\r\n                                            })\r\n                                            : component.inputtype === \"combo\" ? data.push(component) :\r\n                                                regSubSamplewithoutCombocomponent.push(component)\r\n                                    })\r\n                                })\r\n\r\n                            })\r\n                            const regSubSamplecomboComponents = data\r\n                            let regchildColumnList = {};\r\n                            data.map(columnList => {\r\n                                const val = comboChild(data, columnList, regchildColumnList, true);\r\n                                data = val.data;\r\n                                regchildColumnList = val.childColumnList\r\n                                return null;\r\n                            })\r\n                            //const Map={}\r\n                            // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                            // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\r\n                            Map[\"nallottedspeccode\"] = findSampleSpec[0];\r\n                            Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\r\n                            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                            Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                            Map[\"npreregno\"] = addSubSampleList &&\r\n                                addSubSampleList.map(sample => sample.npreregno).join(\",\");\r\n                            Map[\"registrationsample\"] = addSubSampleList;\r\n\r\n                            this.props.addsubSampleRegistration(this.props.Login.masterData,\r\n                                this.props.Login.userInfo, data, this.state.selectedRecord,\r\n                                regchildColumnList, regSubSamplecomboComponents,\r\n                                regSubSamplewithoutCombocomponent,\r\n                                Map, controlcode, findComponentReqSpec[0] === 3 ? true : false)\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\" }));\r\n                        }\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                    }\r\n                    // } else {\r\n                    //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                    // }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\r\n                }\r\n            }\r\n\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOSUBSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.columnList !== previousProps.Login.columnList) {\r\n\r\n            this.setState({\r\n                columnList: this.props.Login.columnList,\r\n                childColumnList: this.props.Login.childColumnList,\r\n                withoutCombocomponent: this.props.Login.withoutCombocomponent,\r\n                comboComponents: this.props.Login.comboComponents\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n            this.setState({\r\n                regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n                regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n                regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\r\n            const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n            const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n            const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n            const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n            const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n            const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n            const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n            const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n            const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n            const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\r\n\r\n            this.setState({\r\n                userRoleControlRights, controlMap, cancelId,\r\n                preRegisterId, registerId, editSampleId, quarantineId, addTestId, printBarcodeId,\r\n                cancelSampleId, addSubSampleId, editSubSampleId, cancelSubSampleId\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n\r\n            let { skip, take, testskip, testtake, subsampleskip, subsampletake, testCommentDataState,\r\n                resultDataState, sampleGridDataState, popUptestDataState, DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem, DynamicGridMoreField, SingleItem, testMoreField, testListColumns,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField, SubSampleSingleItem, sampleSearchField, subsampleSearchField,\r\n                testSearchField, testAttachmentDataState, sampleCommentDataState, sampledateconstraints, subsampledateconstraints } = this.state\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n                DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n                DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n\r\n                SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\r\n                SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\r\n                SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : [];\r\n                //console.log(\"Subsample\",SubSampleSingleItem)\r\n                testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n                testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n\r\n                sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n                subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n                testSearchField = dynamicColumn.testsearchfields ? dynamicColumn.testsearchfields : [];\r\n\r\n                sampledateconstraints = dynamicColumn.sampledateconstraints || [];\r\n                subsampledateconstraints = dynamicColumn.subsampledateconstraints || [];\r\n\r\n                // specBasedComponent = true;\r\n            }\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            let stateSampleType = this.state.stateSampleType\r\n            let stateRegistrationType = this.state.stateRegistrationType\r\n            let stateRegistrationSubType = this.state.stateRegistrationSubType\r\n            let stateFilterStatus = this.state.stateFilterStatus\r\n            let stateDynamicDesign = this.state.stateDynamicDesign\r\n            if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n\r\n                const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n                stateSampleType = sampleTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\r\n\r\n                const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                    \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationType = registrationTypeMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n                const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\r\n\r\n\r\n                const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                    \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateFilterStatus = filterStatusMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                    \"sregtemplatename\", undefined, undefined, false);\r\n\r\n                stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip\r\n            subsampletake = this.props.Login.subsampletake || subsampletake\r\n\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\r\n                testAttachmentDataState = this.props.Login.testAttachmentDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n\r\n            const testGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample &&\r\n                    this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //searchTestRef: this.searchTestRef,\r\n                // testskip: testskip,\r\n                //subsampleskip: subsampleskip,\r\n                // resultDataState: resultDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            }\r\n            const testChildGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            }\r\n\r\n            const subSampleGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                // testskip: testskip,\r\n                // subsampleskip: subsampleskip,\r\n                // searchTestRef: this.searchTestRef,\r\n                //resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                //sampleGridDataState: sampleGridDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\r\n            }\r\n\r\n\r\n            const filterSampleParam = {\r\n                inputListName: \"RegistrationGetSample\",\r\n                selectedObject: \"selectedSample\",\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: sampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                    \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterSubSampleParam = {\r\n                inputListName: \"RegistrationGetSubSample\",\r\n                selectedObject: \"selectedSubSample\",\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTest\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    npreregno: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: subsampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\",\r\n                    \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterTestParam = {\r\n                inputListName: \"RegistrationGetTest\",\r\n                selectedObject: \"selectedTest\",\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: {\r\n                    ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: testSearchField,\r\n                changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n            }\r\n\r\n            // let postParamList = [\r\n            //     {\r\n            //         filteredListName: \"searchedSample\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchSampleRef,\r\n            //         primaryKeyField: \"npreregno\",\r\n            //         fetchUrl: \"registration/getRegistrationSubSample\",\r\n            //         fecthInputObject: subSampleGetParam,\r\n            //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            //         selectedObject: \"selectedSample\",\r\n            //         inputListName: \"AP_SAMPLE\",\r\n            //         updatedListname: \"selectedSample\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            //     , {\r\n            //         filteredListName: \"searchedTest\",\r\n            //         updatedListname: \"selectedTest\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchTestRef,\r\n            //         primaryKeyField: \"ntransactiontestcode\",\r\n            //         fetchUrl: \"approval/getApprovalTest\",\r\n            //         fecthInputObject: testGetParam,\r\n            //         selectedObject: \"selectedTest\",\r\n            //         inputListName: \"RegistrationGetTest\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            // ];\r\n\r\n\r\n            const editRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            }\r\n\r\n            const editSubSampleRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            }\r\n\r\n            const addTestParam = {\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                // skip: skip, take: (skip + take),\r\n                userinfo: this.props.Login.userInfo,\r\n                sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n                snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n            };\r\n\r\n            const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n            this.breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": breadCrumbobj.breadCrumbFrom\r\n                }, {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": breadCrumbobj.breadCrumbto\r\n                }, {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }, {\r\n                    \"label\": \"IDS_DESIGNTEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\r\n                },\r\n                {\r\n                    \"label\": \"IDS_FILTERSTATUS\",\r\n                    \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n                }\r\n            ]\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField,\r\n                testListColumns, stateSampleType,\r\n                stateRegistrationType,\r\n                stateRegistrationSubType,\r\n                stateFilterStatus,\r\n                stateDynamicDesign,\r\n                popUptestDataState,\r\n                showSample, showTest, skip, take, testskip,\r\n                subsampleskip, subsampletake,\r\n                testtake, testCommentDataState, testAttachmentDataState,\r\n                resultDataState, sampleGridDataState,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField,\r\n                SubSampleSingleItem,\r\n                testGetParam, testChildGetParam, subSampleGetParam,\r\n                filterSampleParam, filterTestParam,\r\n                editRegParam, editSubSampleRegParam,\r\n                addTestParam, sampleSearchField, subsampleSearchField,\r\n                testSearchField, filterSubSampleParam, sampledateconstraints, subsampledateconstraints\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest &&\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                Map[\"withoutgetparameter\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 5,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistrationSubSample(\r\n            this.state.selectedRecord,\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone);\r\n\r\n        inputData[\"registrationsample\"] = param.sampleRegistration\r\n        inputData[\"SubSampleDateList\"] = param.dateList\r\n        inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubSampleRegistration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSubSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            testAttachmentDataState: this.state.testAttachmentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.onUpdateSubSampleRegistration(inputParam,\r\n                this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n\r\n\r\n    editRegistration = (inputParam) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n            this.props.getEditRegistrationComboService(inputParam,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    editSubSampleRegistration = (inputParam) => {\r\n        let data = [];\r\n        const regSubSamplewithoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : regSubSamplewithoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const regSubSamplecomboComponents = data\r\n            let regSubSamplechildColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, regSubSamplechildColumnList, true);\r\n                data = val.data;\r\n                regSubSamplechildColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n\r\n            const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\")\r\n\r\n            this.props.getEditSubSampleComboService(inputParam,\r\n                data, this.state.selectedRecord, regSubSamplechildColumnList,\r\n                regSubSamplecomboComponents, regSubSamplewithoutCombocomponent,\r\n                sampleList[0].ncomponentrequired === 3 ? true : false)\r\n        } else {\r\n            toast.info(\"Configure the sub sample template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange, getRegSubTypeChange,\r\n    getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential,\r\n    getSampleChildTabDetail, getTestChildTabDetailRegistration,\r\n    ReloadData, showUnderDevelopment, getPreviewTemplate,\r\n    getChildValues, getRegistrationSample,\r\n    getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest,\r\n    getEditRegistrationComboService, cancelTestAction,\r\n    cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration,\r\n    cancelSubSampleAction, preregRecordToQuarantine, componentTest,getSubSampleChildTabDetail\r\n})(injectIntl(Registration));"]},"metadata":{},"sourceType":"module"}