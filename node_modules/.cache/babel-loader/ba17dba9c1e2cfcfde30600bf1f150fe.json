{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { ageCalculate, ageCalculateOnlyForYear, childComboClear, comboChild, convertDateTimetoString, extractFieldHeader, filterRecordBasedOnTwoArrays, formatDate, formatInputDate, formatInputDateWithoutT, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, showEsign, sortByField, validateEmail } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, callService, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler, testPackageTest, rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"react-awesome-query-builder\";\nimport Esign from '../audittrail/Esign';\nimport { ThemeConsumer } from 'styled-components';\nimport PatientMaster from '../contactmaster/PatientMaster';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList'; //import SplitterLayout from 'react-splitter-layout';\n\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      selectedTestPackageData: {},\n      selectPackage: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false,\n      specBasedTestPackage: false,\n      selectedMaster: []\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const filterquery = this.props.Login.filterquery;\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date')) {\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: filterquery\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n      const newdata = {\n        label: item1[component['displaymember']],\n        value: item1[component['valuemember']],\n        item: {\n          jsondata: { ...item1,\n            jsondata: { ...item1\n            }\n          }\n        }\n      };\n      this.onComboChange(newdata, component, component['label']);\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord; // console.log(\"handle save:\", selectedRecord);\n\n      if (this.props.Login.addMaster) {\n        const masterIndex = this.props.Login.masterIndex;\n        mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true);\n        selectedRecord = this.state.selectedMaster[masterIndex];\n      } else if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              // console.log(\"component1:\", component);\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                //  console.log(\"componentrow:\", componentrow);\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      //componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          //\"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          // \"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      if (this.props.Login.loadEsign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } //  console.log(\"mandate fields:\", mandatoryFields);\n\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.addMaster) {\n            this.onSaveMasterRecord(saveType, this.formRef);\n          } else if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": \"IDS_COMPONENT\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec,\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {}; //console.log(\"Control:\", control);\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false; //let projectType = false;\n\n        let project = false; //let nprojecttypecode = -1\n\n        let nprojectmastercode = -1; //console.log(\"this.props.Login.masterData.RealSampleTypeValue:\", this.props.Login.masterData.RealSampleTypeValue);\n\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1;\n\n        if (nsampletypecode === SampleType.CLINICALTYPE) {\n          if (control.table.item.nquerybuildertablecode === 228 && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\n            selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid'];\n          }\n        }\n\n        const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired) : transactionStatus.NO;\n        const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired) : transactionStatus.NO;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\n        };\n\n        if (comboData) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            \"pkey\": control.valuemember,\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\n            source: control.source\n          };\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {} else {\n            if (ncategorybasedflow !== transactionStatus.YES) {\n              product = true;\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n            }\n          }\n        } else if (control.name === 'Instrument') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === 3) {} else {\n            if (ncategorybasedflow === transactionStatus.YES) {\n              productCategory = true;\n            } else {\n              inputParem[\"ProductName\"] = Product[0].label; // nproductcode = selectedRecord[comboName] &&\n              // selectedRecord[comboName].value;\n\n              product = true;\n            } // else {\n            //     if (this.props.Login.settings &&\n            //         parseInt(this.props.Login.settings[20]) !== transactionStatus.YES \n            //         && nsampletypecode !== SampleType.CLINICALTYPE) {\n            //         inputParem[\"ProductName\"] = Product[0].label\n            //         // nproductcode = selectedRecord[comboName] &&\n            //         // selectedRecord[comboName].value;\n            //         product = true;\n            //     }\n            // }\n\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        } else if (control.name === 'Project Code') {\n          //project = true;\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            nproductcode = selectedRecord[Product[0].label] && selectedRecord[Product[0].label].value;\n          }\n\n          nprojectmastercode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            project = true;\n          } // else{\n          //     if (ncategorybasedflow === 3) {\n          //         productCategory = true;\n          //     }\n          //     else{\n          //         product =true;\n          //     }\n          // }\n\n        }\n\n        if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n          product = false;\n          productCategory = false;\n          materialType = false;\n          instrument = false;\n          instrumentCategory = false;\n          material = false;\n          materialCategory = false;\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode,\n            nprojectmastercode,\n            nprojectSpecReqd,\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType, undefined, project);\n        } else {\n          // if (productCategory) {\n          //     const ncategorybasedflow = selectedRecord[comboName] &&\n          //         selectedRecord[comboName].value;\n          // } else if\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType || project) {\n            // const nproductcode = selectedRecord[comboName] &&\n            //     selectedRecord[comboName].value;\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode,\n              nprojectmastercode,\n              nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, undefined, undefined, project);\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord,\n                loadCustomSearchFilter: false\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectComponent[event.target.name] = radiotext;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            source: control.source\n          } : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: \"IDS_SUBSAMPLE\"\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          source: control.source\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectComponent = this.state.selectComponent;\n\n      if (selectComponent[control.label]) {\n        if (control.max) {\n          if (!(selectComponent[control.label] < parseFloat(control.max))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectComponent[control.label] > parseFloat(control.min))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n        const age = ageCalculate(dateValue);\n        selectedRecord[ageComp[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: \"Specification\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let isValid = true;\n        const selectedSpecification = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        let selectedRecord = selectedComponent; //  if(componentBasedSpec){\n\n        if (nneedsubsample) {\n          if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n            delete selectedComponent[\"selected\"];\n          } else {\n            isValid = false;\n          }\n        } else {\n          selectedRecord = selectedSpecification;\n        } // }\n        // else{\n        //     selectedRecord = selectedSpecification;          \n        // }\n\n\n        if (isValid) {\n          this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        } // } \n        // else {\n        //     const selectedComponent1 = {\n        //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        //         slno: 1\n        //     }\n        //     this.props.getTest(selectedComponent1,\n        //         this.props.Login,\n        //         nneedsubsample, specBasedComponent);\n        // }\n\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          kendoFilter: {\n            logic: \"and\",\n            filters: []\n          },\n          kendoSkip: 0,\n          kendoTake: 5,\n          awesomeConfig: undefined,\n          awesomeTree: undefined\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\n    };\n\n    this.closeAddMaster = e => {\n      let masterIndex = this.props.Login.masterIndex;\n      let updateInfo = {};\n\n      if (masterIndex !== 0) {\n        const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n        const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex);\n        const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex);\n        const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n        const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex);\n        const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex);\n        const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n        const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n        const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n        const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex);\n        masterIndex = masterIndex - 1;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster,\n            selectedControl,\n            masterextractedColumnList,\n            masterfieldList,\n            masterdataList,\n            mastercomboComponents,\n            masterwithoutCombocomponent,\n            masterComboColumnFiled,\n            masterDesign,\n            masterIndex,\n            screenName\n          }\n        }; // updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectedMaster: {}, selectedControl: {},\n        //         masterextractedColumnList: [], masterfieldList: {},\n        //         masterprimaryKeyField: \"\", addMaster: false,\n        //         mastercomboComponents: [],\n        //         masterComboColumnFiled: [],\n        //         screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\n        //             this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        //     }\n        // }\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: [],\n            selectedControl: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            addMaster: false,\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterIndex: undefined,\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeDynamicView = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isDynamicViewSlideOut: false,\n          selectedDynamicViewControl: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          masterStatus: \"\",\n          TestPackage: [],\n          //Test:[]\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode; // selectComponent[\"nneedsubsample\"] = nneedsubsample;\n\n          selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onTestPackageChange = (comboData, fieldName, nneedsubsample) => {\n      const selectPackage = this.state.selectPackage || {};\n      const selectedTestData = this.state.selectedTestData || {};\n\n      if (comboData !== null) {\n        selectPackage[fieldName] = comboData;\n        selectPackage[\"stestpackagename\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample);\n      } else {\n        let availableTest = [];\n\n        if (selectPackage[\"ntestpackagecode\"]) {\n          delete selectPackage[\"ntestpackagecode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          let Test = this.props.Login.Test || [];\n          let testData = this.props.Login.AllTest || [];\n          let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectPackage,\n            TestCombined: availableTest\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const comp1 = this.props.Login.Component;\n      const Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = comp1.findIndex(x => x.slno === dataItem.slno);\n      const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\n      let updateInfo = {};\n      let incslno = comp1.length - 1;\n\n      if (comp1.length !== dataItem.slno) {\n        subSampleDataGridList = []; //  let slno = Component[index].slno\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        const preList = comp1.splice(0, index);\n        const afterList = comp1.splice(index, comp1.length);\n        preList.map(x => {\n          Test[incslno] = Test && Test[x.slno];\n          x.slno = incslno;\n          incslno = incslno - 1;\n          return null;\n        });\n        const Component1 = [...preList, ...afterList];\n        Component1.map(x => {\n          subSampleDataGridList.push({ ...x.jsonuidata,\n            ...x\n          });\n        });\n        sortByField(subSampleDataGridList, 'desc', 'slno');\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component1[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component1,\n            selectedComponent: Component1[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      } else {\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        }\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = (specBasedComponent, specBasedTestPackage) => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const component = [...data, ...SubSamplewithoutCombocomponent];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (component.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.screenName !== 'scheduler') {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistration(true);\n          }\n        }\n      } else {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistrationScheduler(true);\n          }\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = {\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\n                      nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\n                      source: selectedMaster[masterIndex][componentrow.label].item.source\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: selectedMaster[masterIndex][component.label].item.pkey,\n                    nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\n                    source: selectedMaster[masterIndex][component.label].item.source\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 137) {\n        inputData[\"noneedfilter\"] = 1;\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2;\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent : this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents : this.props.Login.comboComponents,\n        selectedRecord: this.props.Login.loadSubSample ? this.state.selectComponent : this.state.selectedRecord,\n        selectedRecordName: this.props.Login.loadSubSample ? 'selectComponent' : 'selectedRecord',\n        loadSubSample: this.props.Login.loadSubSample,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.loadSubSample ? this.props.Login.SubSamplecomboData : this.props.Login.comboData,\n        comboName: this.props.Login.loadSubSample ? 'SubSamplecomboData' : 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: \"create\",\n        saveType,\n        formRef,\n        screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n    };\n\n    this.onClickView = selectedControl => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\n        this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + \" \" + selectedControl.label);\n      }\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENT\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.info(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false; // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\n      //     this.props.Login.userRoleControlRights !== undefined ? true : false\n\n      const specBasedTestPackage = this.props.Login.userRoleControlRights && this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false;\n      this.subSampleDataGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                // \"idsName\": component.label,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                width: \"150px\"\n              });\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent,\n        specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\n      this.setState({\n        selectedTestPackageData: this.props.Login.selectedTestPackageData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\n      this.setState({\n        selectPackage: this.props.Login.selectPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\n      this.setState({\n        specBasedTestPackage: this.props.Login.specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.info(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList,\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      });\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        //selectComponent:this.props.Login.saveContinueData,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList,\n        //selectedTestData: {}\n        saveContinueData: this.props.Login.saveContinueData\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      checkBoxOperation: 3,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents); //console.log(\"edit reg:\", param);\n\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample; // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistrationScheduler() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ? this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\n      Map[\"nregtypecode\"] = 1;\n      Map[\"nregsubtypecode\"] = 1;\n      Map[\"nsampletypecode\"] = 1; // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = false;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false; // Map[\"checkBoxOperation\"] = 3;\n\n      const param = getRegistrationScheduler(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.schedulerTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\n      Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false); //Map[\"nflag\"] = 2;\n      // Map[\"ntype\"] = 2;\n      //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData);\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"checkBoxOperation\"] = 3;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n        }\n\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\"\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  // addPatient =() => {\n  //     // const addParam = {\n  //     //     screenName: \"IDS_PATIENTMASTER\",\n  //     //     operation: \"create\",\n  //     //     primaryKeyName: \"npatientcode\",\n  //     //     masterData: this.props.Login.masterData,\n  //     //     userInfo: this.props.Login.userInfo,\n  //     //     ncontrolcode: addId,\n  //     //   };\n  //     // this.props.getPatientComboService(addParam);\n  //         const currentUserInfo = JSON.parse(JSON.stringify(this.props.Login.userInfo));\n  //         const userInfo = {\n  //             ...this.props.Login.userInfo, \n  //             \"nformcode\": 137,\n  //             \"nmodulecode\": 15, \"sformname\" : 'Patient Master', \n  //             \"smodulename\" : 'Contacts'\n  //         }\n  //         const inputParam = {\n  //             currentUserInfo,\n  //             inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) },\n  //             classUrl:'patient', methodUrl:'Patient', displayName:'IDS_PATIENT'\n  //         };\n  //         this.props.callService(inputParam);\n  // }\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3244,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3262,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3263,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3266,\n        columnNumber: 33\n      }\n    }) : this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3268,\n        columnNumber: 37\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3270,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3274,\n        columnNumber: 53\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3279,\n        columnNumber: 61\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3285,\n        columnNumber: 53\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView : this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3290,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3295,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3298,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3299,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3300,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3304,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3305,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3306,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3309,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3310,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3311,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3314,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3315,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3316,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3320,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3323,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3326,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3327,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3328,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3331,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3332,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3333,\n        columnNumber: 53\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false) ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3337,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3338,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3339,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3345,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3346,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3347,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"popup-fixed-center-headed-full-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3351,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3352,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3353,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3363,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3364,\n        columnNumber: 33\n      }\n    }, this.props.Login.patientRegistration ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3367,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3368,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PatientMaster, {\n      Login: this.props.Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3369,\n        columnNumber: 49\n      }\n    }))) : this.props.Login.isDynamicViewSlideOut ? /*#__PURE__*/React.createElement(ExternalOrderSlideout, {\n      dynamicExternalSample: this.props.Login.dynamicExternalSample,\n      dynamicExternalTestChild: this.props.Login.dynamicExternalTestChild,\n      dynamicGridSelectedId: this.props.Login.dynamicGridSelectedId || null,\n      selectedRecord: this.state.selectedRecord,\n      selectedDynamicViewControl: this.props.Login.selectedDynamicViewControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3372,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.props.Login.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3382,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.props.Login.awesomeTree,\n      config: this.props.Login.awesomeConfig,\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3394,\n        columnNumber: 58\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3409,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      TestPackage: this.props.Login.TestPackage || [],\n      selectPackage: this.state.selectPackage,\n      onTestPackageChange: this.onTestPackageChange,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3421,\n        columnNumber: 57\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3431,\n        columnNumber: 61\n      }\n    }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n      selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n      fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n      extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n      ,\n      selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n      onInputOnChange: this.onInputOnChangeMaster,\n      onComboChange: this.onComboChangeMaster,\n      handleDateChange: this.handleDateChangeMaster,\n      dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n      onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n      masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n      mastertimeZoneList: this.props.Login.mastertimeZoneList,\n      masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n      onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n      handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n      onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n      onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n      onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n      userInfo: this.props.Login.userInfo,\n      Login: this.props.Login,\n      addMasterRecord: this.addMasterRecord,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      masterIndex: this.props.Login.masterIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3449,\n        columnNumber: 65\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      onNumericBlur: this.onNumericBlurSubSample,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      selectPackage: this.state.selectPackage,\n      selectedTestPackageData: this.state.selectedTestPackageData,\n      TestPackage: this.props.Login.TestPackage || [],\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      onTestPackageChange: this.onTestPackageChange,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      addMasterRecord: this.addMasterRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3475,\n        columnNumber: 69\n      }\n    }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n      operation: this.props.Login.operation,\n      onInputOnChange: this.onInputOnChange,\n      inputParam: this.props.Login.inputParam,\n      selectedRecord: this.props.Login.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3508,\n        columnNumber: 73\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut //addPatient={this.addPatient}\n    , {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userRoleControlRights1: this.props.Login.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate ? this.props.Login.masterData.registrationTemplate.jsondata : this.props.Login.masterData.schedulerTemplate ? this.props.Login.masterData.schedulerTemplate.jsondata : {},\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onNumericBlur: this.onNumericBlur,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      testDataStateChange: this.testDataStateChange,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      specBasedTestPackage: this.state.specBasedTestPackage,\n      custombuttonclick: this.custombuttonclick,\n      addMasterRecord: this.addMasterRecord,\n      onClickView: this.onClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3515,\n        columnNumber: 75\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  callService,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  insertRegistrationScheduler,\n  testPackageTest,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  viewExternalportalDetail\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","Row","Col","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","SampleType","transactionStatus","formCode","designComponents","faCalculator","ageCalculate","ageCalculateOnlyForYear","childComboClear","comboChild","convertDateTimetoString","extractFieldHeader","filterRecordBasedOnTwoArrays","formatDate","formatInputDate","formatInputDateWithoutT","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","removeIndex","showEsign","sortByField","validateEmail","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","callService","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","insertRegistrationScheduler","testPackageTest","rearrangeDateFormatforKendoDataTool","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","viewExternalportalDetail","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationScheduler","getRegistrationSubSample","SubSample","TestListManipulation","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","Esign","ThemeConsumer","PatientMaster","getFieldSpecification","getFieldSpecification1","getFieldSpecification3","AddMasterRecords","ExternalOrderSlideout","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","selectedTestPackageData","selectPackage","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","specBasedTestPackage","selectedMaster","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","kendoTake","handleFilterChange","kendoFilter","filter","handleExecuteClick","undefined","includes","seletedFilterComponent","info","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","newdata","label","value","item","jsondata","onComboChange","handleSaveClick","saveType","startLabel","mandatoryFields","addMaster","masterIndex","masterextractedColumnList","x","mandatory","loadComponent","loadSubSample","masterData","SubSampleTemplate","map","row","children","column","hasOwnProperty","componentrow","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","displayname","slanguagetypecode","loadTest","loadSpec","registrationTemplate","esign","loadEsign","forEach","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","validateEsign","onSaveMasterRecord","ncomponentrequired","YES","subSampleDataGridList","width","selectedComponent","SelectedTest","Test","screenName","RealRegSubTypeValue","sregsubtypename","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","project","nprojectmastercode","nsampletypecode","RealSampleTypeValue","CLINICALTYPE","table","nquerybuildertablecode","sampleTypeCatBasedFlow","ncategorybasedflowrequired","nprojectSpecReqd","nprojectspecrequired","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","name","ProductCategory","comboComponents","ncategorybasedflow","PROJECTSAMPLETYPE","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","val","withoutCombocomponent","mapOfFilter","nneedsubsample","loadCustomSearchFilter","temp","components","temp1","onInputOnChange","radiotext","target","type","index","indexOf","indexcomma","slice","setState","onInputOnSubSampleChange","onComboSubSampleChange","pkey","SubSamplecomboData","onNumericInputChange","onNumericBlurSubSample","max","parseFloat","precision","min","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","SampleTypeValue","ageComp","age","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","componentBasedSpec","nallottedspeccode","isValid","selectedSpecification","slno","Object","keys","closeSpec","closeKendoFilter","logic","filters","closeAddMaster","selectedControl","masterfieldList","masterdataList","mastercomboComponents","masterComboColumnFiled","masterwithoutCombocomponent","masterDesign","closeDynamicView","isDynamicViewSlideOut","selectedDynamicViewControl","closeComponent","closeTest","TestCombined","closeSubSample","selectedSubSample","showSaveContinue","masterStatus","TestPackage","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","checked","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","onTestPackageChange","availableTest","testData","AllTest","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","objComponent","nregsubtypecode","timezone","deleteComponent","comp1","subSampleIndex","incslno","preList","afterList","Component1","jsonuidata","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","onUpdateRegistration","onNumericBlur","onComboChangeMaster","nformcode","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","toLowerCase","nmastersitecode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","dateList","slideoutdesign","loadcurrentdate","Date","JSON","stringify","isJsonField","jsonObjectName","controlType","dateField","controlName","selectedRecordName","classUrl","onClickView","warn","fieldList","extractedColumnList","get","values","primaryKeyField","masterprimaryKeyField","ndesigncomponentcode","COMBOBOX","onComboChangeMasterDyanmic","childParam","mastedataList","onInputOnChangeMasterDynamic","test","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","myRef","PrevoiusLoginData","componentColumnList","sampleeditable","parse","DynamicDesign","getDerivedStateFromProps","componentDidUpdate","previousProps","check","userRoleControlRights","TESTPACKAGE","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","saveContinueData","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","RealDesignTemplateMappingValue","napproveconfversioncode","RealApprovalConfigVersionValue","nneedtemplatebasedflow","RegSubTypeValue","checkBoxOperation","activeSampleTab","activeTestTab","activeSubSampleTab","param","sampledateconstraints","samplecombinationunique","subsamplecombinationunique","selectedSample","displayName","sloginid","action","showConfirmAlert","resultDataState","testCommentDataState","ncontrolCode","screenData","openModal","openPortal","findSubsampleDateList","subsampletemplate","schedulerSubSampleTemplate","schedulerTemplate","defaultTimeZone","SelectedScheduler","postParamList","PREREGISTER","dateComp","genderComp","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","className","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","showSave","patientRegistration","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","lstPatient","fields","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","hideQualisForms","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","mastertimeZoneList","masterdefaultTimeZone","loadPreregister","handleChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    ageCalculate,\r\n    ageCalculateOnlyForYear,\r\n    childComboClear,\r\n    comboChild, convertDateTimetoString,\r\n    extractFieldHeader,\r\n    filterRecordBasedOnTwoArrays,\r\n    formatDate,\r\n    formatInputDate,\r\n    formatInputDateWithoutT,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, showEsign, sortByField, validateEmail\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, callService,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest,\r\n    rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"react-awesome-query-builder\";\r\nimport Esign from '../audittrail/Esign';\r\nimport { ThemeConsumer } from 'styled-components';\r\nimport PatientMaster from '../contactmaster/PatientMaster';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n//import SplitterLayout from 'react-splitter-layout';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        selectedTestPackageData: {},\r\n        selectPackage: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false,\r\n        specBasedTestPackage: false,\r\n        selectedMaster: []\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.info(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n    handleExecuteClick = (event) => {\r\n        const filterquery = this.props.Login.filterquery\r\n        if (filterquery !== \"\" && filterquery !== undefined\r\n            && !filterquery.includes('Invalid date')) {\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: filterquery\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTALLINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n\r\n        const newdata = {\r\n            label: item1[component['displaymember']],\r\n            value: item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } }\r\n        }\r\n\r\n\r\n        this.onComboChange(newdata, component, component['label'])\r\n    };\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         if (this.props.Login.loadSubSample) {\r\n    //             const selectComponent = this.state.selectComponent;\r\n    //             component.child.map(y => {\r\n    //                 const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 // if (readonlyfields !== -1) {\r\n\r\n    //                 //     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                 //             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n    //                 //     } else {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                 //     }\r\n    //                 // }\r\n\r\n    //                 if (readonlyfields !== -1) {\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectComponent[y.label + 'value'] = selectComponent[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectComponent[y.label]);\r\n\r\n    //                                     selectComponent[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     } else {\r\n    //                         if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                     selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         } else {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         }\r\n    //                     }\r\n\r\n\r\n    //                 } else {\r\n    //                     const comboComponents = this.state.SubSamplecomboComponents;\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n\r\n    //                             const val = this.props.Login.SubSamplecomboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectComponent[y.label] = val[0]\r\n\r\n    //                             //selectComponent[y.label] = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectComponent,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: \"SubSample\",\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         } else {\r\n    //             const selectedRecord = this.state.selectedRecord;\r\n    //             component.child.map(y => {\r\n    //                 // component.filterfields.filter(x=>x.)\r\n    //                 const withoutCombocomponent = this.props.withoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                     selectedRecord[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     }\r\n    //                     else if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 } else {\r\n    //                     const comboComponents = this.props.comboComponents || [];\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n    //                             const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectedRecord[y.label] = val[0]\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectedRecord,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        // console.log(\"handle save:\", selectedRecord);\r\n\r\n        if (this.props.Login.addMaster) {\r\n            const masterIndex = this.props.Login.masterIndex\r\n            mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true)\r\n            selectedRecord = this.state.selectedMaster[masterIndex]\r\n        }\r\n        else if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // console.log(\"component1:\", component);\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    //  console.log(\"componentrow:\", componentrow);\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label,\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        //\"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        // \"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        //  console.log(\"mandate fields:\", mandatoryFields);\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.addMaster) {\r\n                    this.onSaveMasterRecord(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec,\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //console.log(\"Control:\", control);\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n\r\n            //let projectType = false;\r\n            let project = false;\r\n            //let nprojecttypecode = -1\r\n            let nprojectmastercode = -1;\r\n\r\n            //console.log(\"this.props.Login.masterData.RealSampleTypeValue:\", this.props.Login.masterData.RealSampleTypeValue);\r\n\r\n\r\n\r\n            const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                : 1\r\n\r\n            if (nsampletypecode === SampleType.CLINICALTYPE) {\r\n                if (control.table.item.nquerybuildertablecode === 228\r\n                    && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\r\n                    selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid']\r\n                }\r\n            }\r\n\r\n            const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired)\r\n                : transactionStatus.NO\r\n\r\n            const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired)\r\n                : transactionStatus.NO;\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                    this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\r\n            }\r\n            if (comboData) {\r\n                comboData[\"item\"] = {\r\n                    ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                    \"nquerybuildertablecode\": control.nquerybuildertablecode, source: control.source\r\n                };\r\n\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) { }\r\n                else {\r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n                        product = true;\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === 3) { }\r\n                else {\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n                        productCategory = true;\r\n                    }\r\n                    else {\r\n                        inputParem[\"ProductName\"] = Product[0].label;\r\n                        // nproductcode = selectedRecord[comboName] &&\r\n                        // selectedRecord[comboName].value;\r\n                        product = true\r\n                    }\r\n                    // else {\r\n                    //     if (this.props.Login.settings &&\r\n                    //         parseInt(this.props.Login.settings[20]) !== transactionStatus.YES \r\n                    //         && nsampletypecode !== SampleType.CLINICALTYPE) {\r\n                    //         inputParem[\"ProductName\"] = Product[0].label\r\n                    //         // nproductcode = selectedRecord[comboName] &&\r\n                    //         // selectedRecord[comboName].value;\r\n                    //         product = true;\r\n                    //     }\r\n                    // }\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n            else if (control.name === 'Project Code') {\r\n                //project = true;\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    nproductcode = selectedRecord[Product[0].label] &&\r\n                        selectedRecord[Product[0].label].value;\r\n                }\r\n                nprojectmastercode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    project = true;\r\n                }\r\n                // else{\r\n                //     if (ncategorybasedflow === 3) {\r\n                //         productCategory = true;\r\n                //     }\r\n                //     else{\r\n                //         product =true;\r\n                //     }\r\n                // }\r\n\r\n            }\r\n\r\n            if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                product = false;\r\n                productCategory = false;\r\n                materialType = false;\r\n                instrument = false;\r\n                instrumentCategory = false;\r\n                material = false;\r\n                materialCategory = false;\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                    nprojectmastercode, nprojectSpecReqd,\r\n                    nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\r\n                }\r\n                this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType, undefined, project)\r\n            } else {\r\n\r\n                // if (productCategory) {\r\n                //     const ncategorybasedflow = selectedRecord[comboName] &&\r\n                //         selectedRecord[comboName].value;\r\n\r\n                // } else if\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType\r\n                    || project) {\r\n                    // const nproductcode = selectedRecord[comboName] &&\r\n                    //     selectedRecord[comboName].value;\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                        nprojectmastercode,\r\n                        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material,\r\n                        undefined, undefined, project)\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord, loadCustomSearchFilter: false, }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectComponent[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? { ...comboData.item, pkey: control.valuemember, nquerybuildertablecode: control.nquerybuildertablecode, source: control.source } : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: \"IDS_SUBSAMPLE\"\r\n            }\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], pkey: control.valuemember,\r\n                nquerybuildertablecode: control.nquerybuildertablecode,\r\n                source: control.source\r\n            };\r\n\r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectComponent = this.state.selectComponent\r\n        if (selectComponent[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectComponent[control.label] < parseFloat(control.max))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectComponent[control.label] > parseFloat(control.min))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n            const age = ageCalculate(dateValue);\r\n            selectedRecord[ageComp[0].label] = age;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n\r\n        if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n            check = true;\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n            // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n            //     this.props.Login.userRoleControlRights !== undefined ? true : false\r\n            const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n                this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false\r\n\r\n            this.subSampleDataGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"150px\"\r\n                                        })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory)\r\n                                    this.subSampleDataGridList.push({\r\n                                        \"mandatory\": true,// \"idsName\": component.label,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"150px\"\r\n                                    });\r\n\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent, specBasedTestPackage\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\r\n            this.setState({ selectedTestPackageData: this.props.Login.selectedTestPackageData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\r\n            this.setState({ selectPackage: this.props.Login.selectPackage });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\r\n            this.setState({ specBasedTestPackage: this.props.Login.specBasedTestPackage });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.info(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: \"Specification\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let isValid = true;\r\n            const selectedSpecification = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            };\r\n            let selectedRecord = selectedComponent;\r\n            //  if(componentBasedSpec){\r\n            if (nneedsubsample) {\r\n                if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                    delete selectedComponent[\"selected\"];\r\n                }\r\n                else {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord = selectedSpecification;\r\n            }\r\n            // }\r\n            // else{\r\n            //     selectedRecord = selectedSpecification;          \r\n            // }\r\n\r\n            if (isValid) {\r\n                this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n            // } \r\n            // else {\r\n            //     const selectedComponent1 = {\r\n            //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            //         slno: 1\r\n            //     }\r\n            //     this.props.getTest(selectedComponent1,\r\n            //         this.props.Login,\r\n            //         nneedsubsample, specBasedComponent);\r\n            // }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                kendoFilter: { logic: \"and\", filters: [] },\r\n                kendoSkip: 0,\r\n                kendoTake: 5,\r\n                awesomeConfig: undefined,\r\n                awesomeTree: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n\r\n\r\n    closeAddMaster = (e) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let updateInfo = {}\r\n        if (masterIndex !== 0) {\r\n\r\n            const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n            const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex)\r\n            const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n            const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n            const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex)\r\n            const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n            const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n            const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n            const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex)\r\n            masterIndex = masterIndex - 1;\r\n\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster,\r\n                    selectedControl,\r\n                    masterextractedColumnList,\r\n                    masterfieldList,\r\n                    masterdataList,\r\n                    mastercomboComponents,\r\n                    masterwithoutCombocomponent,\r\n                    masterComboColumnFiled,\r\n                    masterDesign,\r\n                    masterIndex,\r\n                    screenName\r\n                }\r\n\r\n            }\r\n\r\n            // updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectedMaster: {}, selectedControl: {},\r\n            //         masterextractedColumnList: [], masterfieldList: {},\r\n            //         masterprimaryKeyField: \"\", addMaster: false,\r\n            //         mastercomboComponents: [],\r\n            //         masterComboColumnFiled: [],\r\n            //         screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n            //             this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n            //     }\r\n            // }\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: [],\r\n                    selectedControl: [],\r\n                    masterextractedColumnList: [],\r\n                    masterfieldList: [],\r\n                    addMaster: false,\r\n                    masterdataList: [],\r\n                    mastercomboComponents: [],\r\n                    masterwithoutCombocomponent: [],\r\n                    masterComboColumnFiled: [],\r\n                    masterDesign: [],\r\n                    masterIndex: undefined,\r\n                    screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeDynamicView = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isDynamicViewSlideOut: false,\r\n                selectedDynamicViewControl: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                TestCombined: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                masterStatus: \"\",\r\n                TestPackage: [],\r\n                //Test:[]\r\n                TestCombined: []\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                // selectComponent[\"nneedsubsample\"] = nneedsubsample;\r\n                selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onTestPackageChange = (comboData, fieldName, nneedsubsample) => {\r\n        const selectPackage = this.state.selectPackage || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n\r\n        if (comboData !== null) {\r\n            selectPackage[fieldName] = comboData;\r\n            selectPackage[\"stestpackagename\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n\r\n            this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent\r\n                : this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            if (selectPackage[\"ntestpackagecode\"]) {\r\n                delete selectPackage[\"ntestpackagecode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n\r\n                let Test = this.props.Login.Test || [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectPackage, TestCombined: availableTest }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList,\r\n                    masterStatus: \"\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                //selectComponent:this.props.Login.saveContinueData,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList,\r\n                //selectedTestData: {}\r\n                saveContinueData: this.props.Login.saveContinueData,\r\n            }\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const comp1 = this.props.Login.Component\r\n        const Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n\r\n        const index = comp1.findIndex(x => x.slno === dataItem.slno);\r\n        const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\r\n        let updateInfo = {};\r\n        let incslno = comp1.length - 1;\r\n        if (comp1.length !== dataItem.slno) {\r\n            subSampleDataGridList = []\r\n            //  let slno = Component[index].slno\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            const preList = comp1.splice(0, index);\r\n            const afterList = comp1.splice(index, comp1.length);\r\n\r\n\r\n            preList.map(x => {\r\n                Test[incslno] = Test && Test[x.slno]\r\n                x.slno = incslno;\r\n                incslno = incslno - 1;\r\n                return null;\r\n            })\r\n\r\n\r\n            const Component1 = [...preList, ...afterList];\r\n\r\n            Component1.map(x => {\r\n                subSampleDataGridList.push({ ...x.jsonuidata, ...x })\r\n\r\n            })\r\n            sortByField(subSampleDataGridList, 'desc', 'slno')\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component1[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component1, selectedComponent: Component1[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n\r\n        } else {\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue ?\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent, specBasedTestPackage) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const component = [...data, ...SubSamplewithoutCombocomponent]\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (component.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                        || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.screenName !== 'scheduler') {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistration(true);\r\n                }\r\n            }\r\n        } else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistrationScheduler(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            checkBoxOperation: 3,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        //console.log(\"edit reg:\", param);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistrationScheduler() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n                this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ?\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\r\n            Map[\"nregtypecode\"] = 1;\r\n            Map[\"nregsubtypecode\"] = 1;\r\n            Map[\"nsampletypecode\"] = 1;\r\n            // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = false;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistrationScheduler(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.schedulerTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n\r\n            Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false)\r\n            //Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n                }\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\"\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // addPatient =() => {\r\n    //     // const addParam = {\r\n    //     //     screenName: \"IDS_PATIENTMASTER\",\r\n    //     //     operation: \"create\",\r\n    //     //     primaryKeyName: \"npatientcode\",\r\n    //     //     masterData: this.props.Login.masterData,\r\n    //     //     userInfo: this.props.Login.userInfo,\r\n    //     //     ncontrolcode: addId,\r\n    //     //   };\r\n    //     // this.props.getPatientComboService(addParam);\r\n    //         const currentUserInfo = JSON.parse(JSON.stringify(this.props.Login.userInfo));\r\n    //         const userInfo = {\r\n    //             ...this.props.Login.userInfo, \r\n    //             \"nformcode\": 137,\r\n    //             \"nmodulecode\": 15, \"sformname\" : 'Patient Master', \r\n    //             \"smodulename\" : 'Contacts'\r\n    //         }\r\n    //         const inputParam = {\r\n    //             currentUserInfo,\r\n    //             inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) },\r\n    //             classUrl:'patient', methodUrl:'Patient', displayName:'IDS_PATIENT'\r\n    //         };\r\n\r\n    //         this.props.callService(inputParam);\r\n\r\n    // }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' :\r\n                                this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.Login.loadEsign === true ?\r\n                                    <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                    : this.props.loginoperation ?\r\n                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                        : <>\r\n                                            {this.props.operation ?\r\n                                                <>\r\n                                                    <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase())}\r\n                                                        defaultMessage='Add' />\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        this.props.Login.screenName ?\r\n                                                            <FormattedMessage id={this.props.Login.screenName} />\r\n                                                            : \"\"\r\n                                                    }\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName ?\r\n                                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                                    : \"\"}\r\n                                        </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.Login.isDynamicViewSlideOut?this.closeDynamicView:this.props.Login.addMaster ? this.closeAddMaster :\r\n                        this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.loadSpec ?\r\n                            this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                                this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                    this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ?\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                                            : this.props.Login.loadCustomSearchFilter ? \"\" :\r\n                                                <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                                    <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                                </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && (this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false)) ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body className='popup-fixed-center-headed-full-width'>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n\r\n                                    {this.props.Login.patientRegistration ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <PatientMaster Login={this.props.Login} />\r\n                                            </Col>\r\n                                        </Row> : this.props.Login.isDynamicViewSlideOut ?\r\n                                            <ExternalOrderSlideout\r\n                                                dynamicExternalSample={this.props.Login.dynamicExternalSample}\r\n                                                dynamicExternalTestChild={this.props.Login.dynamicExternalTestChild}\r\n                                                dynamicGridSelectedId={this.props.Login.dynamicGridSelectedId || null}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedDynamicViewControl={this.props.Login.selectedDynamicViewControl}\r\n                                            />\r\n\r\n                                            : this.props.Login.loadCustomSearchFilter ?\r\n                                                this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                                    <KendoDatatoolFilter\r\n                                                        filter={this.props.Login.kendoFilter}\r\n                                                        handleFilterChange={this.handleFilterChange}\r\n                                                        filterData={this.props.Login.lstPatient || []}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        fields={this.props.Login.fields || []}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                    /> : <FilterQueryBuilder\r\n                                                        fields={this.props.Login.fields || {}}\r\n                                                        onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                        tree={this.props.Login.awesomeTree}\r\n                                                        config={this.props.Login.awesomeConfig}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        filterData={this.props.Login.lstPatient}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        handleExecuteClick={this.handleExecuteClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                    /> :\r\n                                                this.props.Login.loadSpec ?\r\n                                                    <AddSpecification\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        handleTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.ActiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                    />\r\n                                                    : this.props.Login.loadTest ?\r\n                                                        <AddTest\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.props.Login.selectedTestData}\r\n                                                            TestPackage={this.props.Login.TestPackage || []}\r\n                                                            selectPackage={this.state.selectPackage}\r\n                                                            onTestPackageChange={this.onTestPackageChange}\r\n                                                            hideQualisForms={this.props.Login.hideQualisForms}\r\n\r\n                                                        /> : this.props.Login.loadComponent ?\r\n                                                            <AddComponentPopUp\r\n                                                                ref={this.myScrollRef}\r\n                                                                selectComponent={this.state.selectComponent || {}}\r\n                                                                RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                                RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                                RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                                RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                                formatMessage={this.props.intl.formatMessage}\r\n                                                                handleDateChange={this.handleDateChangeComp}\r\n                                                                Component={this.props.Login.lstComponent || []}\r\n                                                                onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                // onComboChange={this.onComponentComboChange}\r\n                                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                                onComponentChange={this.onComponentChange}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                                CurrentTime={this.props.Login.CurrentTime}\r\n                                                            /> : this.props.Login.addMaster ?\r\n                                                                <AddMasterRecords\r\n                                                                    selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                                                    fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                                                    extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                                                    // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                                                    selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                                                    onInputOnChange={this.onInputOnChangeMaster}\r\n                                                                    onComboChange={this.onComboChangeMaster}\r\n                                                                    handleDateChange={this.handleDateChangeMaster}\r\n                                                                    dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                                                    onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                                                    masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                                                    mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                                                    masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                                                    onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                                                    handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                                                    onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                                                    onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                                                    onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    Login={this.props.Login}\r\n                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                    userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                    masterIndex={this.props.Login.masterIndex}\r\n                                                                />\r\n                                                                : this.props.Login.loadSubSample ?\r\n                                                                    <AddSubSample\r\n                                                                        Component={this.props.Login.lstComponent || []}\r\n                                                                        selectComponent={this.state.selectComponent}\r\n                                                                        selectedRecord={this.state.selectedRecord}\r\n                                                                        onComponentChange={this.onComponentChange}\r\n                                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                                        onNumericBlur={this.onNumericBlurSubSample}\r\n                                                                        comboData={this.props.Login.SubSamplecomboData}\r\n                                                                        onComboChange={this.onComboSubSampleChange}\r\n                                                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                                                        TestChange={this.TestChange}\r\n                                                                        selectedTestData={this.state.selectedTestData}\r\n                                                                        selectPackage={this.state.selectPackage}\r\n                                                                        selectedTestPackageData={this.state.selectedTestPackageData}\r\n                                                                        TestPackage={this.props.Login.TestPackage || []}\r\n                                                                        childoperation={this.props.Login.childoperation}\r\n                                                                        specBasedComponent={this.state.specBasedComponent}\r\n                                                                        onTestPackageChange={this.onTestPackageChange}\r\n                                                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                                        addMasterRecord={this.addMasterRecord}\r\n\r\n                                                                    />\r\n                                                                    : this.props.Login.loadEsign ?\r\n\r\n                                                                        <Esign\r\n\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                                                        />\r\n                                                                        : <RegisterSlideOut\r\n                                                                            //addPatient={this.addPatient}\r\n                                                                            editfield={this.sampleeditable &&\r\n                                                                                this.sampleeditable['sampleeditable']}\r\n                                                                            ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                                this.props.Login.masterData.selectedSample.length > 0\r\n                                                                                && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                                            loadPreregister={this.props.Login.loadPreregister}\r\n                                                                            selectedSpec={this.state.selectedSpec}\r\n                                                                            selectedRecord={this.state.selectedRecord}\r\n                                                                            selectedComponent={this.props.Login.selectedComponent}\r\n                                                                            subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                                            SelectedTest={this.props.Login.SelectedTest}\r\n                                                                            selectedTestData={this.state.selectedTestData}\r\n                                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                            userRoleControlRights1={this.props.Login.userRoleControlRights}\r\n                                                                            templateData={this.props.Login.masterData.registrationTemplate ?\r\n                                                                                this.props.Login.masterData.registrationTemplate.jsondata :\r\n                                                                                this.props.Login.masterData.schedulerTemplate ?\r\n                                                                                    this.props.Login.masterData.schedulerTemplate.jsondata : {}}\r\n                                                                            handleChange={this.props.handleChange}\r\n                                                                            handleDateChange={this.handleDateChange}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                                            onNumericBlur={this.onNumericBlur}\r\n                                                                            comboData={this.props.Login.comboData}\r\n                                                                            onComboChange={this.onComboChange}\r\n                                                                            userInfo={this.props.Login.userInfo}\r\n                                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                            AddSpec={this.AddSpec}\r\n                                                                            addTest={this.addTestslide}\r\n                                                                            handleComponentRowClick={this.handleComponentRowClick}\r\n                                                                            nneedsubsample={this.props.Login.masterData\r\n                                                                                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false}\r\n                                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                                            AddComponent={this.AddComponent}\r\n                                                                            deleteComponent={this.deleteComponent}\r\n                                                                            deleteTest={this.deleteTest}\r\n                                                                            editComponent={this.editComponent}\r\n                                                                            componentColumnList={this.componentColumnList}\r\n                                                                            Component={this.props.Login.Component}\r\n                                                                            TestChange={this.TestChange}\r\n                                                                            testDataState={this.state.testDataState}\r\n                                                                            subSampleDataState={this.state.subSampleDataState}\r\n                                                                            testDataStateChange={this.testDataStateChange}\r\n                                                                            subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                                            addsubSample={this.addsubSample}\r\n                                                                            editSubSample={this.editSubSample}\r\n                                                                            subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                                            selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            specBasedTestPackage={this.state.specBasedTestPackage}\r\n                                                                            custombuttonclick={this.custombuttonclick}\r\n                                                                            addMasterRecord={this.addMasterRecord}\r\n                                                                            onClickView={this.onClickView}\r\n\r\n                                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: selectedMaster[masterIndex][componentrow.label].item.pkey,\r\n                                                nquerybuildertablecode: selectedMaster[masterIndex][componentrow.label].item.nquerybuildertablecode,\r\n                                                source: selectedMaster[masterIndex][componentrow.label].item.source\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: selectedMaster[masterIndex][component.label].item.pkey,\r\n                                            nquerybuildertablecode: selectedMaster[masterIndex][component.label].item.nquerybuildertablecode,\r\n                                            source: selectedMaster[masterIndex][component.label].item.source\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            inputData[\"noneedfilter\"] = 1\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2\r\n            }\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n        const inputParam = {\r\n            withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent\r\n                : this.props.Login.withoutCombocomponent,\r\n            comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents\r\n                : this.props.Login.comboComponents,\r\n            selectedRecord: this.props.Login.loadSubSample ?\r\n                this.state.selectComponent\r\n                : this.state.selectedRecord,\r\n            selectedRecordName: this.props.Login.loadSubSample ?\r\n                'selectComponent'\r\n                : 'selectedRecord',\r\n            loadSubSample: this.props.Login.loadSubSample,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.loadSubSample ?\r\n                this.props.Login.SubSamplecomboData : this.props.Login.comboData,\r\n            comboName: this.props.Login.loadSubSample ?\r\n                'SubSamplecomboData' : 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: \"create\",\r\n            saveType, formRef,\r\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n\r\n    }\r\n\r\n    onClickView = (selectedControl) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\r\n            this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + \" \" + selectedControl.label);\r\n        }\r\n\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue, callService,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}