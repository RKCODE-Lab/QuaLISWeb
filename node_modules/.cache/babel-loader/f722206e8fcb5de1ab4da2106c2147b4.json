{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\ComboBoxControl.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { Row, Col } from 'react-bootstrap';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues } from '../../actions';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { constructOptionList } from '../../components/CommonScript';\n\nclass ComboBoxControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //data: items.slice(),\n      ComboVal: '',\n      dataarr: [],\n      Fieldarr: [],\n      FieldColValue: [],\n      ChartTempType: 0,\n      DBType: [],\n      SqlQuery: [],\n      QueryCode: 0\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    const url = \"sqlquery/getColumnValues\";\n    rsapi.post(url, {\n      \"tablename\": this.props.tableName,\n      \"fieldname\": this.props.fieldName,\n      \"displayparam\": this.props.displayParam\n    }).then(response => {\n      this.setState({\n        FieldColValue: constructOptionList(response.data[1], this.props.fieldName, this.props.displayParam, undefined, undefined, undefined).get(\"OptionList\")\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  }\n\n  onChange(event) {\n    if (event.label != null) {\n      this.setState({\n        ComboVal: event.label\n      });\n      this.props.onvaluechange(event.value); //event.target.value);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: this.props.labelName\n      }),\n      isSearchable: true,\n      name: this.props.fieldName,\n      placeholder: \"Please Select...\",\n      isMandatory: true,\n      options: this.state.FieldColValue || [],\n      optionId: this.props.fieldName,\n      optionValue: this.props.displayParam.length > 0 ? this.props.displayParam : this.props.fieldName,\n      showOption: true,\n      onChange: this.onChange.bind(this),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues\n})(injectIntl(ComboBoxControl));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/dashboard/ComboBoxControl.jsx"],"names":["React","connect","injectIntl","FormSelectSearch","Row","Col","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","rsapi","toast","constructOptionList","ComboBoxControl","Component","constructor","props","state","ComboVal","dataarr","Fieldarr","FieldColValue","ChartTempType","DBType","SqlQuery","QueryCode","onChange","bind","componentDidMount","url","post","tableName","fieldName","displayParam","then","response","setState","data","undefined","get","catch","error","status","message","warn","event","label","onvaluechange","value","render","intl","formatMessage","id","labelName","length","mapStateToProps","Login"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues\r\n} from '../../actions';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\n\r\nclass ComboBoxControl extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //data: items.slice(),\r\n            ComboVal: '', dataarr: [], Fieldarr: [], FieldColValue: [],\r\n            ChartTempType: 0, DBType: [], SqlQuery: [], QueryCode: 0\r\n\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = \"sqlquery/getColumnValues\";\r\n        rsapi.post(url, { \"tablename\": this.props.tableName, \r\n                            \"fieldname\": this.props.fieldName, \r\n                            \"displayparam\": this.props.displayParam })\r\n        .then(response => {\r\n                    this.setState({ FieldColValue: constructOptionList(response.data[1], this.props.fieldName,\r\n                        this.props.displayParam, undefined, undefined, undefined).get(\"OptionList\") });         \r\n        })\r\n        .catch(error => {\r\n\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange(event) {\r\n        if (event.label != null) {\r\n            this.setState({ComboVal: event.label});\r\n            this.props.onvaluechange(event.value)   //event.target.value);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col lg={12}>\r\n                    <FormSelectSearch\r\n                        formLabel={this.props.intl.formatMessage({ id: this.props.labelName })}\r\n                        isSearchable={true}\r\n                        name={this.props.fieldName}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={true}\r\n                        options={this.state.FieldColValue || []}\r\n                        optionId={this.props.fieldName}\r\n                        optionValue={this.props.displayParam.length > 0 ? this.props.displayParam : this.props.fieldName}\r\n\r\n                        showOption={true}\r\n                        onChange={this.onChange.bind(this)}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n\r\n                    />\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData, validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType, executeUserQuery, comboColumnValues\r\n})(injectIntl(ComboBoxControl));"]},"metadata":{},"sourceType":"module"}