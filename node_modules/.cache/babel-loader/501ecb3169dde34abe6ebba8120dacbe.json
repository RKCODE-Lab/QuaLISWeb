{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\Registration.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetail, getTestByComponentChange, getPreviewTemplate, getChildValues, getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail, acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService, cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction } from '../../actions';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { formatInputDate, getControlMap, listDataFromDynamicArray, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, checkCancelAndReject, convertDateTimetoString, comboChild } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport { designProperties, RegistrationSubType, RegistrationType, transactionStatus } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\nimport AddSubSample from './AddSubSample';\n\nclass Registration extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let activeSampleTab = this.props.Login.activeSampleTab;\n      let activeTestTab = this.props.Login.activeTestTab;\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        flag: 1,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let activeSampleTab = this.props.Login.activeSampleTab;\n\n      if (this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode !== RegistrationType.PLASMA_POOL) {\n        activeSampleTab = \"IDS_SAMPLEATTACHMENTS\";\n      }\n\n      let activeTestTab = this.props.Login.activeTestTab;\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        const selectedFilter = {};\n        selectedFilter[\"fromdate\"] = RealFromDate;\n        selectedFilter[\"todate\"] = RealToDate;\n        const inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter\n        };\n        this.props.getRegistrationSample(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      console.log(\"val\", val);\n      this.setState({\n        initialVerticalWidth: val - 150\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.state.regSubSamplecomboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent, control.child, \"label\");\n        this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData, childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { selectedRecord }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n\n      if (operation === 'create') {\n        let objSubSample = this.state.selectedRecord;\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        const userInfo = this.props.Login.userInfo;\n        let saveSubSample = {};\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\n        }\n\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno');\n        const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n        const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\n        saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\n        saveSubSample[\"jsondata\"] = {};\n        const dateList = [];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                let componentrowlabel = '';\n                let componentrowvalue = '';\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? {\n                      value: objSubSample[componentrow.label].value,\n                      label: objSubSample[componentrow.label].label\n                    } : -1;\n\n                    if (componentrow.mandatory || objSubSample[componentrow.label]) {\n                      componentrowlabel = componentrowlabel + '&' + componentrow.label;\n                      componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label;\n                    }\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo);\n                    } else {\n                      saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\n                    }\n\n                    if (componentrow.timezone) {\n                      saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ? {\n                        value: objSubSample[`tz${componentrow.label}`].value,\n                        label: objSubSample[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label] : \"\";\n\n                    if (objSubSample[componentrow.label]) {\n                      componentrowlabel = componentrowlabel + '&' + objSubSample.label;\n                      componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label];\n                    }\n                  }\n                });\n                saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue;\n              } else {\n                if (component.inputtype === \"combo\") {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? {\n                    value: objSubSample[component.label].value,\n                    label: objSubSample[component.label].label\n                  } : -1;\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo);\n                  } else {\n                    saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (component.timezone) {\n                    saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ? {\n                      value: objSubSample[`tz${component.label}`].value,\n                      label: objSubSample[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label] : \"\";\n                }\n              }\n            });\n          });\n        });\n        saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1; // Component.unshift(saveSubSample);\n\n        let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\n        const selectedTestArray = [];\n        selectedTestData && selectedTestData.map(item => {\n          return selectedTestArray.push(item.item);\n        }); // const Test = this.props.Login.Test || [];\n        // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n        //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\n\n        const map = {};\n        map['RegistrationSample'] = saveSubSample;\n        map['subsampleDateList'] = dateList;\n        map['testgrouptest'] = selectedTestArray;\n        map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\");\n        map['userinfo'] = userInfo;\n        map['checkBoxOperation'] = 3;\n        map['ntype'] = 3;\n        map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n        map[\"checkBoxOperation\"] = 3;\n        map[\"masterData\"] = this.props.Login.masterData;\n        this.props.saveSubSample(map);\n      } else {\n        this.onUpdateSubSampleRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.mandatoryList = (printer, file, childtest, regSubSample) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (regSubSample) {\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatory.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatory.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\"); //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const inputData = {\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const mapOfFilterRegData = {\n          nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n        };\n        this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subsampleskip: e.skip,\n        subsampletake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getTestChildTabDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props));\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_ACCEPTREGISTRATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.acceptRegistrationConfirm(inputParam, registerId));\n            } else {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\", \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; //Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadRegSubSample = this.props.Login.loadRegSubSample;\n      let loadFile = this.props.Login.loadFile;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        selectedRecord = {};\n      } else if (this.props.Login.loadRegSubSample) {\n        loadRegSubSample = false;\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadRegSubSample,\n          screenName,\n          showSaveContinue,\n          loadFile,\n          loadChildTest,\n          openModal,\n          parentPopUpSize: \"xl\",\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let openPortal = this.props.Login.openPortal;\n      let Component = this.props.Login.Component;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        selectedRecord = {};\n        openPortal = false;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            openPortal,\n            Component\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2481,\n          columnNumber: 39\n        }\n      }));\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2534,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2545,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let testList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n      } else {\n        testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n      }\n\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelSubSampleRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedSubSample || (this.props.Login.masterData.RegistrationGetSubSample ? [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\n          Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n          // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\n          //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3; // Map[\"withoutgetparameter\"] = 3;\n\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.addSubSample = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.jsondata.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\n            //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\n            //   if (findApprovalVersion.length === 1) {\n            const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n            if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n              {\n                let data = [];\n                const regSubSamplewithoutCombocomponent = [];\n                const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n                if (Layout !== undefined) {\n                  Layout.map(row => {\n                    row.children.map(column => {\n                      column.children.map(component => {\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                          if (componentrow.inputtype === \"combo\") {\n                            data.push(componentrow);\n                          } else {\n                            regSubSamplewithoutCombocomponent.push(componentrow);\n                          }\n                        }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n                      });\n                    });\n                  });\n                  const regSubSamplecomboComponents = data;\n                  let regchildColumnList = {};\n                  data.map(columnList => {\n                    const val = comboChild(data, columnList, regchildColumnList, true);\n                    data = val.data;\n                    regchildColumnList = val.childColumnList;\n                  }); //const Map={}\n                  // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\n                  // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\n\n                  Map[\"nallottedspeccode\"] = findSampleSpec[0];\n                  Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n                  Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n                  Map[\"npreregno\"] = addSubSampleList && addSubSampleList.map(sample => sample.npreregno).join(\",\");\n                  Map[\"registrationsample\"] = addSubSampleList;\n                  this.props.addsubSampleRegistration(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectedRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, controlcode);\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\"\n                  }));\n                }\n              } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n              }));\n            } // } else {\n            //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\n            // }\n\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          Map[\"withoutgetparameter\"] = 3;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          return ntransstatus.push(sam.ntransactionstatus);\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.jsondata.ntransactionstatus ? sam1.jsondata.ntransactionstatus : sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.editRegistration = inputParam => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        this.props.getEditRegistrationComboService(inputParam, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.editSubSampleRegistration = inputParam => {\n      let data = [];\n      const regSubSamplewithoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  regSubSamplewithoutCombocomponent.push(componentrow);\n                }\n              }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n            });\n          });\n        });\n        const regSubSamplecomboComponents = data;\n        let regSubSamplechildColumnList = {};\n        data.map(columnList => {\n          const val = this.comboChild(data, columnList, regSubSamplechildColumnList, true);\n          data = val.data;\n          regSubSamplechildColumnList = val.childColumnList;\n        });\n        this.props.getEditSubSampleComboService(inputParam, data, this.state.selectedRecord, regSubSamplechildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent);\n      } else {\n        toast.info(\"Configure the sub sample template for this registrationtype\");\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined; //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\n\n    this.state = {\n      layout: 1,\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      SingleItem: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'npreregno'\n        }]\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }, {\n          field: 'stestsynonym'\n        }]\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      subsampleskip: 0,\n      subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [],\n      childColumnList: [],\n      columnList: [],\n      regSubSamplecomboComponents: [],\n      regSubSamplewithoutCombocomponent: [],\n      regparentSubSampleColumnList: []\n    }; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  gridViewChange(layout) {\n    this.setState({\n      layout: layout\n    });\n  }\n\n  render() {\n    const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n    const preRegisterId = this.state.controlMap.has(\"AddPreregister\") ? this.state.controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n    const registerId = this.state.controlMap.has(\"RegisterAccept\") ? this.state.controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n    const editSampleId = this.state.controlMap.has(\"EditSample\") ? this.state.controlMap.get(\"EditSample\").ncontrolcode : -1;\n    const quarantineId = this.state.controlMap.has(\"RegisterQuarantine\") ? this.state.controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n    const addTestId = this.state.controlMap.has(\"AddNewTest\") ? this.state.controlMap.get(\"AddNewTest\").ncontrolcode : -1;\n    const printBarcodeId = this.state.controlMap.has(\"PrintBarcode\") ? this.state.controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n    const cancelSampleId = this.state.controlMap.has(\"CancelReject\") ? this.state.controlMap.get(\"CancelReject\").ncontrolcode : -1;\n    const addSubSampleId = this.state.controlMap.has(\"AddSubSample\") ? this.state.controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n    const editSubSampleId = this.state.controlMap.has(\"EditSubSample\") ? this.state.controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n    const cancelSubSampleId = this.state.controlMap.has(\"CancelSubSample\") ? this.state.controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample) : [];\n    let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n\n    let testGetParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      searchTestRef: this.searchTestRef,\n      testskip: this.state.testskip,\n      subsampleskip: this.state.subsampleskip,\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode\n    };\n    let testChildGetParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode\n    };\n    this.confirmMessage = new ConfirmMessage();\n    let breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": breadCrumbobj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": breadCrumbobj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n    }];\n    let subSampleGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      testskip: this.state.testskip,\n      subsampleskip: this.state.subsampleskip,\n      searchTestRef: this.searchTestRef,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      sampleGridDataState: this.state.sampleGridDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample\n    };\n    let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\", \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\", \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\n\n    if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"RegistrationGetSample\",\n      selectedObject: \"selectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedSubSample\"\n      }],\n      fecthInputObject: {\n        nflag: 2,\n        ntype: 2,\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: sampleSearchField,\n      changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RegistrationGetTest\",\n      selectedObject: \"selectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\", \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\n      changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: subSampleGetParam,\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedSubSample\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"selectedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: testGetParam,\n      selectedObject: \"selectedTest\",\n      inputListName: \"RegistrationGetTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    let editRegParam = {\n      nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      ncontrolCode: editSampleId,\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample\n    };\n    let editSubSampleRegParam = {\n      nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      ncontrolCode: editSampleId,\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample\n    };\n    const addTestParam = {\n      selectedsample: this.props.Login.masterData.selectedSample,\n      selectedsubsample: this.props.Login.masterData.selectedSubSample,\n      skip: this.state.skip,\n      take: this.state.skip + this.state.take,\n      userinfo: this.props.Login.userInfo,\n      sampleList: this.props.Login.masterData.RegistrationGetSample,\n      snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 33\n      }\n    }, this.state.layout == 1 ? /*#__PURE__*/React.createElement(TransactionListMasterJson // paneHeight={this.state.firstPane}\n    , {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: subSampleGetParam,\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\",\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      needMultiSelect: true,\n      filterParam: filterSampleParam,\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(printBarcodeId) === -1,\n        onClick: this.props.getPrinterComboService,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam\n        }\n      }],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, preRegisterId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ACCEPT\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(registerId) === -1,\n        onClick: () => this.acceptRegistration(registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(quarantineId) === -1,\n        onClick: () => this.selectQuarantine(quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 57\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 57\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 70\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 41\n      }\n    }) : this.state.layout == 2 ? /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getRegistrationTestDetail,\n      inputParam: testGetParam,\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"selectedSubSample\",\n      objectName: \"subsample\",\n      listName: \"IDS_SUBSAMPLE\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSubSampleColumns,\n      searchRef: this.searchSubSampleRef,\n      skip: this.state.subsampleskip,\n      take: this.state.subsampletake,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      needMultiSelect: true,\n      subFieldsLabel: false,\n      handlePageChange: this.handleSubSamplePageChange,\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\"],\n      actionIcons: /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        hidden: this.state.userRoleControlRights.indexOf(editSubSampleId) === -1,\n        title: \"Print Barcode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        title: \"Edit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 57\n        }\n      })),\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\" // hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(addSubSampleId) === -1,\n        onClick: () => this.props.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, addSubSampleId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PREREGISTER\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 61\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 45\n      }\n    }) : this.state.layout == 3 ? /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: `${testList && testList !== null && testList.length > 0 ? testList.length * 13 : 5}vh`,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: \"stestname\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        onClick: () => this.props.addMoreTest(addTestParam, addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 69\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n        onClick: () => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 69\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 49\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 37\n      }\n    }, this.state.layout == 1 ? /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 73\n      }\n    }, \"Sub Sample\"))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n      ,\n      masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getRegistrationTestDetail,\n      inputParam: testGetParam,\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"selectedSubSample\",\n      objectName: \"subsample\",\n      listName: \"IDS_SUBSAMPLE\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSubSampleColumns,\n      searchRef: this.searchSubSampleRef,\n      skip: this.state.subsampleskip,\n      take: this.state.subsampletake,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      needMultiSelect: true,\n      subFieldsLabel: false,\n      handlePageChange: this.handleSubSamplePageChange,\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\"],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editSubSampleId) === -1,\n        onClick: this.editSubSampleRegistration,\n        inputData: {\n          primaryKeyName: \"ntransactionsamplecode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSubSampleRegParam\n        }\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(addSubSampleId) === -1,\n        onClick: () => this.addSubSample(addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 89\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(cancelSubSampleId) === -1,\n        onClick: () => this.cancelSubSampleRecord(cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 89\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 69\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 77\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        onClick: () => this.props.addMoreTest(addTestParam, addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 93\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n        onClick: () => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 89\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 93\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935,\n        columnNumber: 73\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 85\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 85\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 85\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 93\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 93\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 57\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077,\n        columnNumber: 65\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 81\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 73\n      }\n    })) : \"\")))) : this.state.layout == 2 ? /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      secondaryInitialSize: 400,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 105\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 105\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 113\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        onClick: () => this.props.addMoreTest(addTestParam, addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1182,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1189,\n          columnNumber: 121\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n        onClick: () => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1192,\n          columnNumber: 117\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1199,\n          columnNumber: 121\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 101\n      }\n    })))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 97\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1223,\n        columnNumber: 97\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1232,\n        columnNumber: 105\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242,\n        columnNumber: 105\n      }\n    }))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1265,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 77\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269,\n        columnNumber: 85\n      }\n    }) : this.state.showTest ?\n    /*#__PURE__*/\n    // <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\n    React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1273,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1274,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 101\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1278,\n        columnNumber: 93\n      }\n    })) : \"\")))))))) : this.state.layout == 3 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 61\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1302,\n        columnNumber: 77\n      }\n    }, \"Parameter Results\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305,\n        columnNumber: 69\n      }\n    })) : \"\") : \"\")))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      postParamList: this.postParamList,\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      updateStore: this.props.updateStore,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 29\n      }\n    })) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.props.Login.loadRegSubSample || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadPrinter, this.props.Login.loadFile, this.props.Login.loadChildTest, this.props.Login.loadRegSubSample),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1370,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadRegSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n        editfield: this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value),\n        Component: this.props.Login.lstComponent || [],\n        selectComponent: this.state.selectedRecord,\n        templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        handleDateChange: this.handleDateSubSampleChange,\n        onInputOnChange: this.onInputOnSubSampleChange,\n        onNumericInputChange: this.onNumericInputSubSampleChange,\n        comboData: this.props.Login.regSubSamplecomboData,\n        onComboChange: this.onComboSubSampleChange,\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.onComboChange,\n        selectedTestData: this.state.selectedRecord,\n        childoperation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1376,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1396,\n          columnNumber: 63\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1406,\n          columnNumber: 41\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410,\n          columnNumber: 79\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showTestAndSample() {\n    this.setState({\n      showSample: !this.state.showSample,\n      showTest: !this.state.showTest\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample['jsondata'].ntransactionstatus === transactionStatus.PREREGISTER || sample['jsondata'].ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample['jsondata'].ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option,\n        \"dataField\": option,\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"sstoragelocationname\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].label : \"\";\n      saveComponent[\"sstorageconditionname\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].label : \"\";\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      saveComponent[\"nstoragelocationcode\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].value : -1;\n      saveComponent[\"nstorageconditioncode\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].value : -1; //objcomponent[\"dreceiveddate\"] = formatDate(objcomponent[\"dreceiveddate\"]);\n      // saveComponent[\"dreceiveddate\"] = formatInputDate(objcomponent[\"dreceiveddate\"], false);\n      // saveComponent[\"sreceiveddate\"] = formatInputDateWithoutT(objcomponent[\"dreceiveddate\"], false);\n\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"nplasmafilecode\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].value : -1;\n      saveComponent[\"splasmafilenumber\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].label : \"\";\n      saveComponent[\"ntzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].value : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"stzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].label : \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          SelectedSource: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.columnList !== previousProps.Login.columnList) {\n      this.setState({\n        columnList: this.props.Login.columnList,\n        childColumnList: this.props.Login.childColumnList,\n        withoutCombocomponent: this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n      this.setState({\n        regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n        regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let DynamicSampleColumns = this.state.DynamicSampleColumns;\n      let DynamicSubSampleColumns = this.state.DynamicSubSampleColumns;\n      let DynamicTestColumns = this.state.DynamicTestColumns;\n      let DynamicGridItem = this.state.DynamicGridItem;\n      let DynamicGridMoreField = this.state.DynamicGridMoreField;\n      let SingleItem = this.state.SingleItem;\n      let testMoreField = this.state.testMoreField;\n      let testListColumns = this.state.testListColumns;\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState,\n        popUptestDataState\n      } = this.state;\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        DynamicSampleColumns = this.constructDesign(dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : []);\n        DynamicSubSampleColumns = this.constructDesign(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : []);\n        DynamicTestColumns = this.constructDesign(dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []);\n        DynamicGridItem = dynamicColumn.salemgriditem ? dynamicColumn.salemgriditem : [];\n        DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        SingleItem = this.constructDesign(dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : []);\n        testMoreField = dynamicColumn.testlistmoreitem ? dynamicColumn.testlistmoreitem : [];\n        testListColumns = this.constructDesign(dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []);\n      }\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n      const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n      const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n      const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false); // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip;\n      subsampletake = this.props.Login.subsampletake || subsampletake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType: sampleTypeMap.get(\"OptionList\"),\n        stateRegistrationType: registrationTypeMap.get(\"OptionList\"),\n        stateRegistrationSubType: registrationSubTypeMap.get(\"OptionList\"),\n        stateFilterStatus: filterStatusMap.get(\"OptionList\"),\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        subsampleskip,\n        subsampletake,\n        testtake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState\n      });\n    }\n  }\n\n  onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 5,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      checkBoxOperation: 3\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistrationSubSample(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation);\n    inputData[\"registrationsample\"] = param.sampleRegistration;\n    inputData[\"SubSampleDateList\"] = param.dateList;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SubSampleRegistration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSubSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.onUpdateSubSampleRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetail,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues,\n  getRegistrationSample,\n  getRegistrationsubSampleDetail,\n  getRegistrationTestDetail,\n  acceptRegistration,\n  addMoreTest,\n  createRegistrationTest,\n  getEditRegistrationComboService,\n  cancelTestAction,\n  cancelSampleAction,\n  addsubSampleRegistration,\n  saveSubSample,\n  getEditSubSampleComboService,\n  onUpdateSubSampleRegistration,\n  cancelSubSampleAction\n})(injectIntl(Registration));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/Registration.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetail","getTestByComponentChange","getPreviewTemplate","getChildValues","getRegistrationSample","getRegistrationsubSampleDetail","getRegistrationTestDetail","acceptRegistration","addMoreTest","createRegistrationTest","getEditRegistrationComboService","cancelTestAction","cancelSampleAction","addsubSampleRegistration","saveSubSample","getEditSubSampleComboService","onUpdateSubSampleRegistration","cancelSubSampleAction","Button","Card","Col","Nav","Row","toast","SlideOutModal","formatInputDate","getControlMap","listDataFromDynamicArray","showEsign","sortData","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","checkCancelAndReject","convertDateTimetoString","comboChild","RegistrationFilter","Esign","injectIntl","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","designProperties","RegistrationSubType","RegistrationType","transactionStatus","BreadcrumbComponent","ScrollBar","ListWrapper","TransactionListMasterJson","FontAwesomeIcon","faEye","faPencilAlt","faPlus","faSync","ContentPanel","SampleInfoView","CustomTabs","ConfirmMessage","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveTestComments","onSaveSampleAttachment","onSaveTestAttachment","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PortalModal","PreRegisterSlideOutModal","PerfectScrollbar","checkTestPresent","getRegistrationSubSample","AddSubSample","Registration","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","activeSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","ndesigntemplatemappingcode","registrationTemplate","nneedsubsample","checkBoxOperation","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","warn","intl","formatMessage","id","onFilterSubmit","fromdate","todate","PLASMA_POOL","paneSizeChange","d","setState","splitChangeWidthPercentage","verticalPaneSizeChange","val","console","log","initialVerticalWidth","handleDateSubSampleChange","dateValue","dateName","selectedRecord","onInputOnSubSampleChange","event","target","type","name","checked","value","onComboSubSampleChange","comboData","control","customName","parentList","childComboList","childColumnList","comboName","label","inputParem","child","source","primarykeyField","valuemember","item","nameofdefaultcomp","length","regSubSamplecomboComponents","map","columnList","regSubSamplewithoutCombocomponent","regSubSamplecomboData","onNumericInputSubSampleChange","onSaveSubSampleClick","saveType","formRef","operation","objSubSample","defaulttimezone","sampleList","searchedSample","undefined","RegistrationGetSample","slice","subsampleskip","subsampletake","selectedSample","findSampleSpec","Set","nspecsampletypecode","findSampleAlloSpec","nallottedspeccode","dateList","SubSampleTemplate","jsondata","row","children","column","component","hasOwnProperty","componentrowlabel","componentrowvalue","componentrow","inputtype","mandatory","Date","loadcurrentdate","timezone","push","substring","selectedTestData","selectedTestArray","join","mandatoryList","printer","file","childtest","regSubSample","deleteAttachment","fieldName","selectedFile","actionType","onSaveChildTestClick","selectedSubsample","selectedSubSample","skip","take","ntransactionsamplecode","x","TestGroupTest","ntestgrouptestcode","RegistrationSample","ntype","sample","classUrl","methodUrl","responseKeyList","controlMap","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","getRegistrationComboService","ScreenName","primaryKeyField","editId","withoutCombocomponent","Layout","comboComponents","mapOfFilterRegData","parseInt","info","retunObj","childList","childData","index","findIndex","y","handlePageChange","e","setTimeout","_scrollBarRef","updateScroll","handleTestPageChange","testskip","testtake","handleSubSamplePageChange","openFilter","showFilter","onFilterChange","labelname","onSampleTabChange","tabProps","screenName","ontestTabChange","selectedTest","ntransactiontestcode","String","resultDataState","testCommentDataState","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","confirmMessage","confirm","booleanFlag","insertRegistration","closeFilter","booleanmanuf","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","selectComponent","onSampleTypeChange","Map","ConfirmComponent","getComponentfromJava","onRegTypeChange","registerId","acceptList","every","checkPreregisterAndQuarentine","RegistrationGetTest","postParamList","action","acceptRegistrationConfirm","userRoleControlRights","openModal","selectQuarantine","quarantineId","splice","quarentineList","checkPreregisterRecordQuarantine","preregRecordToQuarantine","onRegSubTypeChange","onInputOnChange","onComboChange","PrinterChange","selectedPrinterData","closeChildModal","loadRegSubSample","showSaveContinue","loadChildTest","PopUpLabel","closeModal","loadPreregister","openChildModal","pare","loadPrinter","openPortal","insertSourcePreregno","onSaveClick","onSavePrinterClick","insertlist","displayName","insertPrinterPreregno","sprintername","npreregno1","ncontrolcode","onSaveFileClick","acceptedFiles","sfilename","formData","FormData","forEach","append","JSON","stringify","ntemplatemanipulationcode","ImportFile","sampleInfoDataStateChange","sampleGridDataState","dataState","dataStateChange","sourceDataState","testdataStateChange","popUptestDataState","testStateChange","testDataState","sampleTabDetail","tabMap","set","onAttachmentSaveClick","RegistrationAttachment","attachmentskip","attachmenttake","settings","esignRights","masterList","testTabDetail","testTabMap","testList","selectedTestList","test","testDataStateChange","onCommentsSaveClick","RegistrationTestComment","has","get","searchedTest","saveParam","isTestComment","selectedMaster","cancelSubSampleRecord","controlcode","searchedSubSample","RegistrationGetSubSample","transValidation","transactionValidation","stransdisplaystatus","cancelRecord","addSubSample","addSubSampleList","findTransactionStatus","PREREGISTER","regchildColumnList","handleEditDateChange","onNumericInputEditChange","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","ntransstatus","translist","sam","selectdata","check","sam1","includes","validateEsign","sreason","password","validateEsignforRegistration","editRegistration","editSubSampleRegistration","regSubSamplechildColumnList","createRef","PrevoiusLoginData","layout","masterStatus","error","showAccordian","filterCollection","breadCrumb","showTest","showSample","showSubSample","SingleItem","DynamicSampleColumns","group","field","historyDataState","grandparentheight","regparentSubSampleColumnList","getDerivedStateFromProps","getActiveTestURL","url","activeTestKey","gridViewChange","render","cancelId","preRegisterId","editSampleId","addTestId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","cancelSubSampleId","subSampleList","testGetParam","sfromdate","stodate","testChildGetParam","breadCrumbobj","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","subSampleGetParam","sampleSearchField","ROUTINE","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","nflag","searchFieldList","changeList","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","editRegParam","editSubSampleRegParam","addTestParam","selectedsample","selectedsubsample","snspecsampletypecode","ALL","FilterStatus","title","controlname","objectName","hidden","indexOf","onClick","primaryKeyName","getPrinterComboService","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","DynamicSubSampleColumns","split","setting","testListColumns","testMoreField","display","background","borderBottom","marginTop","float","showTestAndSample","height","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","loadComponent","loadTest","loadSource","loadPoolSource","selectedSourceData","DynamicDesign","parse","lstComponent","timeZoneList","defaultTimeZone","TestCombined","availableTest","showSampleInfo","showTestDetails","QUARANTINE","temparray","option","ComponentObjectAfterSave","testrequired","objcomponent","nneedservice","getTestfromDB","saveComponent","Object","keys","dreceiveddate","unshift","selectedComponent","SelectedTest","SelectedSource","constructDesign","list","newList","i","LABEL","VALUE","componentDidUpdate","previousProps","values","DynamicTestColumns","dynamicColumn","samplelistitem","subsamplelistitem","testlistitem","salemgriditem","samplegridmoreitem","sampledisplayfields","testlistmoreitem","sampleTypeMap","SampleType","registrationTypeMap","registrationSubTypeMap","filterStatusMap","initialParam","param","selectedSpec","sampleRegistration","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange,\r\n    getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail,\r\n    getTestChildTabDetail, getTestByComponentChange, getPreviewTemplate, getChildValues,\r\n    getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService,\r\n    cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { formatInputDate, getControlMap, listDataFromDynamicArray, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, checkCancelAndReject, convertDateTimetoString, comboChild } from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport { designProperties, RegistrationSubType, RegistrationType, transactionStatus } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\r\nimport AddSubSample from './AddSubSample';\r\n\r\nclass Registration extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData = undefined;\r\n        //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.state = {\r\n            layout: 1,\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            SingleItem: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'npreregno' }] },\r\n            testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] },\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            subsampleskip: 0,\r\n            subsampletake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            childColumnList: [],\r\n            columnList: [],\r\n            regSubSamplecomboComponents: [],\r\n            regSubSamplewithoutCombocomponent: [],\r\n            regparentSubSampleColumnList: []\r\n        };\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab;\r\n        let activeTestTab = this.props.Login.activeTestTab;\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue, RegSubTypeValue, FilterStatusValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            flag: 1,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab;\r\n        if (this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode !== RegistrationType.PLASMA_POOL) {\r\n            activeSampleTab = \"IDS_SAMPLEATTACHMENTS\";\r\n        }\r\n\r\n        let activeTestTab = this.props.Login.activeTestTab;\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n            const selectedFilter = {};\r\n            selectedFilter[\"fromdate\"] = RealFromDate;\r\n            selectedFilter[\"todate\"] = RealToDate;\r\n            const inputParam = {\r\n                masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchTestRef: this.searchTestRef, selectedFilter\r\n            }\r\n            this.props.getRegistrationSample(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    gridViewChange(layout) {\r\n        this.setState({\r\n            layout: layout\r\n        })\r\n    }\r\n    verticalPaneSizeChange = (val) => {\r\n        console.log(\"val\", val)\r\n        this.setState({\r\n            initialVerticalWidth: val - 150\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        const preRegisterId = this.state.controlMap.has(\"AddPreregister\") ? this.state.controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n        const registerId = this.state.controlMap.has(\"RegisterAccept\") ? this.state.controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n        const editSampleId = this.state.controlMap.has(\"EditSample\") ? this.state.controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n        const quarantineId = this.state.controlMap.has(\"RegisterQuarantine\") ? this.state.controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n        const addTestId = this.state.controlMap.has(\"AddNewTest\") ? this.state.controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n        const printBarcodeId = this.state.controlMap.has(\"PrintBarcode\") ? this.state.controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n        const cancelSampleId = this.state.controlMap.has(\"CancelReject\") ? this.state.controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n        const addSubSampleId = this.state.controlMap.has(\"AddSubSample\") ? this.state.controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n        const editSubSampleId = this.state.controlMap.has(\"EditSubSample\") ? this.state.controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n        const cancelSubSampleId = this.state.controlMap.has(\"CancelSubSample\") ? this.state.controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample) : [];\r\n        let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n        let testGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            npreregno: this.props.Login.masterData.selectedSample &&\r\n                this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            searchTestRef: this.searchTestRef,\r\n            testskip: this.state.testskip,\r\n            subsampleskip: this.state.subsampleskip,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        }\r\n        let testChildGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n                this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n        let breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": breadCrumbobj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": breadCrumbobj.breadCrumbto\r\n            }, {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }, {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n            }\r\n        ]\r\n        let subSampleGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            testskip: this.state.testskip,\r\n            subsampleskip: this.state.subsampleskip,\r\n            searchTestRef: this.searchTestRef,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            sampleGridDataState: this.state.sampleGridDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample\r\n        }\r\n        let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n            , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n            , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n            sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"RegistrationGetSample\",\r\n            selectedObject: \"selectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"registration/getRegistrationSubSample\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            fecthInputObject: {\r\n                nflag: 2,\r\n                ntype: 2,\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\r\n                \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                \"selectedTest\", \"RegistrationParameter\"\r\n            ]\r\n        };\r\n\r\n        let filterTestParam = {\r\n            inputListName: \"RegistrationGetTest\",\r\n            selectedObject: \"selectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\r\n                \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\r\n            changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: subSampleGetParam,\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n            , {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"selectedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: testGetParam,\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"RegistrationGetTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        let editRegParam = {\r\n            nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            ncontrolCode: editSampleId,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample\r\n        }\r\n\r\n        let editSubSampleRegParam = {\r\n            nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            ncontrolCode: editSampleId,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample\r\n        }\r\n\r\n        const addTestParam = {\r\n            selectedsample: this.props.Login.masterData.selectedSample,\r\n            selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n            skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n            userinfo: this.props.Login.userInfo,\r\n            sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n            snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    {/* <div className='btn-list'>\r\n                        <button className={`btn-primary-head ${this.state.layout === 1 ? 'active' : ''} `} onClick={() => this.gridViewChange(1)}>Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 2 ? 'active' : ''} `} onClick={() => this.gridViewChange(2)}>Sub Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 3 ? 'active' : ''} `} onClick={() => this.gridViewChange(3)}>Test</button>\r\n                    </div> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper >\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n                                <SplitterLayout borderColor=\"#999\"\r\n                                    primaryIndex={1} percentage={true}\r\n                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    primaryMinSize={40}\r\n                                    secondaryMinSize={20}\r\n                                >\r\n                                    {this.state.layout == 1 ?\r\n                                        <TransactionListMasterJson\r\n                                            // paneHeight={this.state.firstPane}\r\n                                            splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                            masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                            selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                            primaryKeyField=\"npreregno\"\r\n                                            filterColumnData={this.props.filterTransactionList}\r\n                                            getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                            inputParam={subSampleGetParam}\r\n                                            selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                                && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                            selectionColorField=\"scolorhexcode\"\r\n                                            mainField={\"sarno\"}\r\n                                            showStatusLink={true}\r\n                                            showStatusName={true}\r\n                                            statusFieldName=\"stransdisplaystatus\"\r\n                                            statusField=\"ntransactionstatus\"\r\n                                            selectedListName=\"selectedSample\"\r\n                                            searchListName=\"searchedSample\"\r\n                                            searchRef={this.searchSampleRef}\r\n                                            objectName=\"sample\"\r\n                                            listName=\"IDS_SAMPLE\"\r\n                                            selectionField=\"ntransactionstatus\"\r\n                                            selectionFieldName=\"stransdisplaystatus\"\r\n                                            showFilter={this.props.Login.showFilter}\r\n                                            openFilter={this.openFilter}\r\n                                            closeFilter={this.closeFilter}\r\n                                            onFilterSubmit={this.onFilterSubmit}\r\n                                            subFields={this.state.DynamicSampleColumns}\r\n                                            jsonField={'jsondata'}\r\n                                            jsonDesignFields={true}\r\n                                            needMultiSelect={true}\r\n                                            filterParam={filterSampleParam}\r\n                                            subFieldsLabel={false}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            skip={this.state.skip}\r\n                                            take={this.state.take}\r\n                                            splitModeClass={this.state.splitChangeWidthPercentage\r\n                                                && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                                : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                            childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                                \"RegistrationGetTest\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                            actionIcons={\r\n                                                [\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                        controlname: \"faPencilAlt\",\r\n                                                        objectName: \"mastertoedit\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(editSampleId) === -1,\r\n                                                        onClick: this.editRegistration,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"update\",\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam\r\n                                                        },\r\n                                                    },\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                        controlname: \"faPrint\",\r\n                                                        objectName: \"sample\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(printBarcodeId) === -1,\r\n                                                        onClick: this.props.getPrinterComboService,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"print\",\r\n                                                            ncontrolcode: printBarcodeId,\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam\r\n                                                        },\r\n                                                    },\r\n\r\n                                                ]\r\n                                            }\r\n                                            needFilter={true}\r\n                                            commonActions={\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(preRegisterId) === -1}\r\n                                                        onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                            this.props.Login.masterData, this.props.Login.userInfo, preRegisterId)}>\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(registerId) === -1}\r\n                                                        onClick={() => this.acceptRegistration(registerId, this.state.skip, this.state.take)} >\r\n                                                        <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(quarantineId) === -1}\r\n                                                        onClick={() => this.selectQuarantine(quarantineId, this.state.skip, this.state.take)} >\r\n                                                        <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link\r\n                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(cancelSampleId) === -1}\r\n                                                        onClick={() => this.cancelSampleRecords(cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                        <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        onClick={() => this.onReload()} >\r\n\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                </ProductList>\r\n                                            }\r\n                                            filterComponent={[\r\n                                                {\r\n                                                    \"Sample Filter\": <RegistrationFilter\r\n                                                        SampleType={this.state.stateSampleType || []}\r\n                                                        RegistrationType={this.state.stateRegistrationType || []}\r\n                                                        RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                        userInfo={this.props.Login.userInfo || {}}\r\n                                                        SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                        RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                        RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                        FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                        FilterStatus={this.state.stateFilterStatus || []}\r\n                                                        FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                        ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                        onSampleTypeChange={this.onSampleTypeChange}\r\n                                                        onRegTypeChange={this.onRegTypeChange}\r\n                                                        onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                        handleFilterDateChange={this.handleFilterDateChange}\r\n                                                        onFilterChange={this.onFilterChange}\r\n                                                    />\r\n                                                }\r\n                                            ]}\r\n\r\n                                        />\r\n                                        : this.state.layout == 2 ?\r\n                                            <TransactionListMasterJson\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                                                selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                                primaryKeyField=\"ntransactionsamplecode\"\r\n                                                getMasterDetail={this.props.getRegistrationTestDetail}\r\n                                                inputParam={testGetParam}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                showStatusLink={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                mainField=\"ssamplearno\"\r\n                                                selectedListName=\"selectedSubSample\"\r\n                                                objectName=\"subsample\"\r\n                                                listName=\"IDS_SUBSAMPLE\"\r\n                                                jsonField={'jsondata'}\r\n                                                jsonDesignFields={true}\r\n                                                needValidation={true}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSubSampleColumns}\r\n                                                searchRef={this.searchSubSampleRef}\r\n                                                skip={this.state.subsampleskip}\r\n                                                take={this.state.subsampletake}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                needMultiSelect={true}\r\n                                                subFieldsLabel={false}\r\n                                                handlePageChange={this.handleSubSamplePageChange}\r\n                                                childTabsKey={[\"RegistrationAttachment\",\r\n                                                    \"RegistrationGetTest\"]}\r\n                                                actionIcons={\r\n\r\n                                                    <Nav.Link className=\"btn btn-circle outline-grey ml-2\" hidden={this.state.userRoleControlRights.indexOf(editSubSampleId) === -1} title=\"Print Barcode\" >\r\n                                                        <FontAwesomeIcon icon={faPencilAlt} title=\"Edit\" />\r\n                                                    </Nav.Link>\r\n\r\n\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <ProductList className=\"d-flex product-category float-right\">\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                            // hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(addSubSampleId) === -1}\r\n                                                            onClick={() => this.props.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                                this.props.Login.masterData, this.props.Login.userInfo, addSubSampleId)}>\r\n                                                            <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_PREREGISTER\" })} />\r\n                                                        </Button>\r\n\r\n                                                    </ProductList>\r\n\r\n                                                }\r\n                                            />\r\n\r\n\r\n                                            : this.state.layout == 3 ?\r\n                                                <TransactionListMasterJson\r\n                                                    paneHeight={`${testList && testList !== null && testList.length > 0 ? testList.length * 13 : 5}vh`}\r\n                                                    masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                    selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                    primaryKeyField=\"ntransactiontestcode\"\r\n                                                    getMasterDetail={this.props.getTestChildTabDetail}\r\n                                                    inputParam={testChildGetParam}\r\n                                                    additionalParam={[]}\r\n                                                    mainField=\"stestname\"\r\n                                                    selectedListName=\"selectedTest\"\r\n                                                    objectName=\"test\"\r\n                                                    listName=\"IDS_TEST\"\r\n                                                    pageSize={this.props.Login.settings &&\r\n                                                        this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                    showStatusLink={true}\r\n                                                    subFieldsLabel={true}\r\n                                                    statusFieldName=\"stransdisplaystatus\"\r\n                                                    statusField=\"ntransactionstatus\"\r\n                                                    needMultiSelect={true}\r\n                                                    subFields={this.state.testListColumns || []}\r\n                                                    moreField={this.state.testMoreField}\r\n                                                    needValidation={false}\r\n                                                    showStatusName={true}\r\n                                                    needFilter={false}\r\n                                                    filterColumnData={this.props.filterTransactionList}\r\n                                                    searchListName=\"searchedTest\"\r\n                                                    searchRef={this.searchTestRef}\r\n                                                    filterParam={filterTestParam}\r\n                                                    selectionField=\"ntransactionstatus\"\r\n                                                    selectionFieldName=\"stransdisplaystatus\"\r\n                                                    // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                    childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\"]}\r\n                                                    handlePageChange={this.handleTestPageChange}\r\n                                                    buttonCount={5}\r\n                                                    skip={this.state.testskip}\r\n                                                    take={this.state.testtake}\r\n                                                    showMoreResetList={true}\r\n                                                    showMoreResetListName=\"RegistrationGetSample\"\r\n                                                    selectionList={this.props.Login.masterData.RealFilterStatusValue &&\r\n                                                        this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                    selectionColorField=\"scolorhexcode\"\r\n                                                    // selectionList=\r\n                                                    // actionIcons={\r\n                                                    //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                    //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                    //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                    //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                    // }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                    //title={\"Add Test\"}\r\n                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                                                    onClick={() => this.props.addMoreTest(addTestParam, addTestId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link\r\n                                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                    //title={\"Cancel/Reject Test\"}\r\n                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                    onClick={() => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                    <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                </Nav.Link>\r\n                                                            </ProductList>\r\n                                                            {/* </Tooltip> */}\r\n                                                        </>\r\n                                                    }\r\n                                                /> : \"\"}\r\n\r\n                                    <PerfectScrollbar>\r\n                                        {this.state.layout == 1 ?\r\n                                            <SplitterLayout\r\n                                                customClassName=\"detailed-inner\"\r\n                                                vertical\r\n                                                borderColor=\"#999\"\r\n                                                primaryIndex={1}\r\n                                                onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n\r\n                                                secondaryInitialSize={400}\r\n                                            >\r\n                                                <div>\r\n                                                    <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                        <SplitterLayout borderColor=\"#999\"\r\n                                                            primaryIndex={1} percentage={true}\r\n                                                            secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                            onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                            primaryMinSize={40}\r\n                                                            secondaryMinSize={30}\r\n                                                        >\r\n                                                            <Card>\r\n                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                        <h4 className=\"card-title\">Sub Sample</h4>\r\n                                                                    </span>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body className='p-0'>\r\n                                                                    <TransactionListMasterJson\r\n                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                        // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                                        masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                                                                        selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                                                        primaryKeyField=\"ntransactionsamplecode\"\r\n                                                                        getMasterDetail={this.props.getRegistrationTestDetail}\r\n                                                                        inputParam={testGetParam}\r\n                                                                        additionalParam={['napprovalversioncode']}\r\n                                                                        showStatusLink={true}\r\n                                                                        showStatusName={true}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        mainField=\"ssamplearno\"\r\n                                                                        selectedListName=\"selectedSubSample\"\r\n                                                                        objectName=\"subsample\"\r\n                                                                        listName=\"IDS_SUBSAMPLE\"\r\n                                                                        jsonField={'jsondata'}\r\n                                                                        jsonDesignFields={true}\r\n                                                                        needValidation={true}\r\n                                                                        validationKey=\"napprovalversioncode\"\r\n                                                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                                        subFields={this.state.DynamicSubSampleColumns}\r\n                                                                        searchRef={this.searchSubSampleRef}\r\n                                                                        skip={this.state.subsampleskip}\r\n                                                                        take={this.state.subsampletake}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                                                        needMultiSelect={true}\r\n                                                                        subFieldsLabel={false}\r\n                                                                        handlePageChange={this.handleSubSamplePageChange}\r\n                                                                        childTabsKey={[\"RegistrationAttachment\",\r\n                                                                            \"RegistrationGetTest\"]}\r\n                                                                        actionIcons={\r\n                                                                            [\r\n                                                                                {\r\n                                                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                                    controlname: \"faPencilAlt\",\r\n                                                                                    objectName: \"mastertoedit\",\r\n                                                                                    hidden: this.state.userRoleControlRights.indexOf(editSubSampleId) === -1,\r\n                                                                                    onClick: this.editSubSampleRegistration,\r\n                                                                                    inputData: {\r\n                                                                                        primaryKeyName: \"ntransactionsamplecode\",\r\n                                                                                        operation: \"update\",\r\n                                                                                        masterData: this.props.Login.masterData,\r\n                                                                                        userInfo: this.props.Login.userInfo,\r\n                                                                                        editSubSampleRegParam\r\n                                                                                    },\r\n                                                                                }\r\n\r\n\r\n                                                                            ]\r\n                                                                        }\r\n                                                                        needFilter={false}\r\n                                                                        commonActions={\r\n                                                                            <>\r\n                                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                        //title={\"Add Test\"}\r\n                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(addSubSampleId) === -1}\r\n                                                                                        onClick={() => this.addSubSample(addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                                                    </Nav.Link>\r\n                                                                                    <Nav.Link\r\n                                                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                        //title={\"Cancel/Reject Test\"}\r\n                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(cancelSubSampleId) === -1}\r\n                                                                                        onClick={() => this.cancelSubSampleRecord(cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                                                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                    </Nav.Link>\r\n                                                                                </ProductList>\r\n                                                                                {/* </Tooltip> */}\r\n                                                                            </>\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            <ContentPanel>\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\" }}>\r\n                                                                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showTestAndSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                        </button>\r\n                                                                        {/* </div> */}\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body className='p-0'>\r\n\r\n                                                                        <TransactionListMasterJson\r\n                                                                            paneHeight={this.state.initialVerticalWidth}\r\n                                                                            masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                            selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                            primaryKeyField=\"ntransactiontestcode\"\r\n                                                                            getMasterDetail={this.props.getTestChildTabDetail}\r\n                                                                            inputParam={testChildGetParam}\r\n                                                                            additionalParam={[]}\r\n                                                                            mainField=\"stestsynonym\"\r\n                                                                            selectedListName=\"selectedTest\"\r\n                                                                            objectName=\"test\"\r\n                                                                            listName=\"IDS_TEST\"\r\n                                                                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                            showStatusLink={true}\r\n                                                                            subFieldsLabel={true}\r\n                                                                            statusFieldName=\"stransdisplaystatus\"\r\n                                                                            statusField=\"ntransactionstatus\"\r\n                                                                            needMultiSelect={true}\r\n                                                                            subFields={this.state.testListColumns || []}\r\n                                                                            moreField={this.state.testMoreField}\r\n                                                                            needValidation={false}\r\n                                                                            showStatusName={true}\r\n                                                                            needFilter={false}\r\n                                                                            filterColumnData={this.props.filterTransactionList}\r\n                                                                            searchListName=\"searchedTest\"\r\n                                                                            searchRef={this.searchTestRef}\r\n                                                                            filterParam={filterTestParam}\r\n                                                                            selectionField=\"ntransactionstatus\"\r\n                                                                            selectionFieldName=\"stransdisplaystatus\"\r\n                                                                            // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                            childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\"]}\r\n                                                                            handlePageChange={this.handleTestPageChange}\r\n                                                                            buttonCount={5}\r\n                                                                            skip={this.state.testskip}\r\n                                                                            take={this.state.testtake}\r\n                                                                            showMoreResetList={true}\r\n                                                                            showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                            selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                            selectionColorField=\"scolorhexcode\"\r\n                                                                            // selectionList=\r\n                                                                            // actionIcons={\r\n                                                                            //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                            //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                            //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                            //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                            // }\r\n                                                                            commonActions={\r\n                                                                                <>\r\n                                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                    <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                        <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                            //title={\"Add Test\"}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                                                                            onClick={() => this.props.addMoreTest(addTestParam, addTestId)}\r\n                                                                                        >\r\n                                                                                            <FontAwesomeIcon icon={faPlus} />\r\n                                                                                        </Nav.Link>\r\n\r\n                                                                                        <Nav.Link\r\n                                                                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                            //title={\"Cancel/Reject Test\"}\r\n                                                                                            data-for=\"tooltip-common-wrap\"\r\n                                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                            hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                                            onClick={() => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                            <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                        </Nav.Link>\r\n                                                                                    </ProductList>\r\n                                                                                    {/* </Tooltip> */}\r\n                                                                                </>\r\n                                                                            }\r\n                                                                        />\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n                                                        </SplitterLayout>\r\n                                                    </div>\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Row>\r\n                                                                    <Col md={12}>\r\n                                                                        <Card className='p-0'>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                    <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                </span>\r\n                                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showTestAndSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                </button>\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body>\r\n                                                                                <PerfectScrollbar>\r\n                                                                                    <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                        {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                            <SampleInfoView\r\n                                                                                                data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                    this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                                SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                    this.state.SingleItem : []}\r\n                                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                userInfo={this.props.userInfo}\r\n\r\n                                                                                            />\r\n\r\n                                                                                            :\r\n                                                                                            <SampleGridTab\r\n                                                                                                userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                                masterData={this.props.Login.masterData}\r\n                                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                                dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                                primaryKeyField={\"npreregno\"}\r\n                                                                                                expandField=\"expanded\"\r\n                                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                jsonField={\"jsondata\"}\r\n                                                                                            />\r\n                                                                                        }\r\n                                                                                    </div>\r\n                                                                                </PerfectScrollbar>\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                </div>\r\n                                                <div>\r\n                                                    <PerfectScrollbar>\r\n                                                        <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                            {this.state.showSample ?\r\n\r\n                                                                <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                    tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                                this.state.showTest ?\r\n                                                                    <Card>\r\n                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                                <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                            </span>\r\n                                                                        </Card.Header>\r\n                                                                        <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                            tabDetail={this.testTabDetail()}\r\n                                                                            onTabChange={this.ontestTabChange} />\r\n                                                                    </Card>\r\n                                                                    : \"\"}\r\n                                                        </div>\r\n                                                    </PerfectScrollbar>\r\n                                                </div>\r\n                                            </SplitterLayout>\r\n                                            :\r\n                                            this.state.layout == 2 ?\r\n                                                <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                                    <div className=\"\">\r\n                                                        <>\r\n                                                            <div className=\"card_group\">\r\n                                                                <SplitterLayout\r\n                                                                    customClassName=\"detailed-inner\"\r\n                                                                    vertical\r\n                                                                    borderColor=\"#999\"\r\n                                                                    primaryIndex={1}\r\n                                                                    secondaryInitialSize={400}\r\n                                                                    onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n\r\n                                                                >\r\n                                                                    <div>\r\n                                                                        <ContentPanel style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                                            <Card className=\"border-0\">\r\n                                                                                <Card.Body className='p-0'>\r\n                                                                                    <Row className='no-gutters'>\r\n                                                                                        <Col md={12}>\r\n                                                                                            <Card>\r\n                                                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                                    <span style={{ display: \"inline-block\" }}>\r\n                                                                                                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                                                    </span>\r\n                                                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                                        onClick={() => this.showTestAndSample()}\r\n                                                                                                    >\r\n                                                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                                                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                                    </button>\r\n                                                                                                    {/* </div> */}\r\n                                                                                                </Card.Header>\r\n                                                                                                <Card.Body className='p-0'>\r\n                                                                                                    <TransactionListMasterJson\r\n                                                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                                                        masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                                                        selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                                                        primaryKeyField=\"ntransactiontestcode\"\r\n                                                                                                        getMasterDetail={this.props.getTestChildTabDetail}\r\n                                                                                                        inputParam={testChildGetParam}\r\n                                                                                                        additionalParam={[]}\r\n                                                                                                        mainField=\"stestsynonym\"\r\n                                                                                                        selectedListName=\"selectedTest\"\r\n                                                                                                        objectName=\"test\"\r\n                                                                                                        listName=\"IDS_TEST\"\r\n                                                                                                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                                                        showStatusLink={true}\r\n                                                                                                        subFieldsLabel={true}\r\n                                                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                                                        statusField=\"ntransactionstatus\"\r\n                                                                                                        needMultiSelect={true}\r\n                                                                                                        subFields={this.state.testListColumns || []}\r\n                                                                                                        moreField={this.state.testMoreField}\r\n                                                                                                        needValidation={false}\r\n                                                                                                        showStatusName={true}\r\n                                                                                                        needFilter={false}\r\n                                                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                                                        searchListName=\"searchedTest\"\r\n                                                                                                        searchRef={this.searchTestRef}\r\n                                                                                                        filterParam={filterTestParam}\r\n                                                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                                                                                        // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                                                        childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\"]}\r\n                                                                                                        handlePageChange={this.handleTestPageChange}\r\n                                                                                                        buttonCount={5}\r\n                                                                                                        skip={this.state.testskip}\r\n                                                                                                        take={this.state.testtake}\r\n                                                                                                        showMoreResetList={true}\r\n                                                                                                        showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                                                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                                                        // selectionList=\r\n                                                                                                        // actionIcons={\r\n                                                                                                        //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                                                        //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                                                        //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                                                        //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                                                        // }\r\n                                                                                                        commonActions={\r\n                                                                                                            <>\r\n                                                                                                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                                        //title={\"Add Test\"}\r\n                                                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                                                        hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                                                                                                        onClick={() => this.props.addMoreTest(addTestParam, addTestId)}\r\n                                                                                                                    >\r\n                                                                                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                                                                                    </Nav.Link>\r\n\r\n                                                                                                                    <Nav.Link\r\n                                                                                                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                                        //title={\"Cancel/Reject Test\"}\r\n                                                                                                                        data-for=\"tooltip-common-wrap\"\r\n                                                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                                                        hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                                                                        onClick={() => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                                                    </Nav.Link>\r\n                                                                                                                </ProductList>\r\n                                                                                                                {/* </Tooltip> */}\r\n                                                                                                            </>\r\n                                                                                                        }\r\n                                                                                                    />\r\n                                                                                                </Card.Body>\r\n                                                                                            </Card>\r\n                                                                                        </Col>\r\n                                                                                    </Row>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </ContentPanel>\r\n                                                                        <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                                            <Card className=\"border-0\">\r\n                                                                                <Card.Body className='p-0'>\r\n                                                                                    <Card className='p-0'>\r\n                                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                                            </span>\r\n                                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                                onClick={() => this.showTestAndSample()}>\r\n                                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                                            </button>\r\n                                                                                        </Card.Header>\r\n                                                                                        <Card.Body>\r\n                                                                                            <PerfectScrollbar>\r\n                                                                                                <div style={{ height: this.state.initialVerticalWidth }}>\r\n\r\n                                                                                                    {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                                        <SampleInfoView\r\n                                                                                                            data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                                this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                                            SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                                this.state.SingleItem : []}\r\n                                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                            userInfo={this.props.userInfo}\r\n\r\n                                                                                                        />\r\n                                                                                                        :\r\n                                                                                                        <SampleGridTab\r\n                                                                                                            userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                                            GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                                            masterData={this.props.Login.masterData}\r\n                                                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                                                            dataState={this.state.sampleGridDataState}\r\n                                                                                                            dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                                            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                                            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                                            primaryKeyField={\"npreregno\"}\r\n                                                                                                            expandField=\"expanded\"\r\n                                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                                            jsonField={\"jsondata\"}\r\n                                                                                                        />\r\n                                                                                                    }\r\n                                                                                                </div>\r\n                                                                                            </PerfectScrollbar>\r\n                                                                                        </Card.Body>\r\n                                                                                    </Card>\r\n                                                                                </Card.Body>\r\n                                                                            </Card>\r\n                                                                        </ContentPanel>\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        <PerfectScrollbar>\r\n                                                                            <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                                                {this.state.showSample ?\r\n                                                                                    <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'} tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                                                    this.state.showTest ?\r\n                                                                                        // <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\r\n                                                                                        <Card>\r\n                                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                                                    <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                                                </span>\r\n                                                                                            </Card.Header>\r\n                                                                                            <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                                                tabDetail={this.testTabDetail()}\r\n                                                                                                onTabChange={this.ontestTabChange} />\r\n                                                                                        </Card>\r\n                                                                                        : \"\"}\r\n                                                                            </div>\r\n                                                                        </PerfectScrollbar>\r\n                                                                    </div>\r\n                                                                </SplitterLayout>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    </div>\r\n                                                </ScrollBar> :\r\n                                                this.state.layout == 3 ?\r\n                                                    <>\r\n                                                        {this.state.showSample ?\r\n\r\n                                                            <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                            this.state.showTest ?\r\n                                                                <Card>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                        </span>\r\n                                                                    </Card.Header>\r\n                                                                    <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                        tabDetail={this.testTabDetail()}\r\n                                                                        onTabChange={this.ontestTabChange} />\r\n                                                                </Card>\r\n                                                                : \"\"}\r\n                                                    </>\r\n                                                    : \"\"}\r\n                                    </PerfectScrollbar>\r\n                                </SplitterLayout>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {\r\n                    this.props.Login.openPortal ?\r\n                        <PortalModal>\r\n                            <PreRegisterSlideOutModal\r\n                                postParamList={this.postParamList}\r\n                                PrevoiusLoginData={this.PrevoiusLoginData}\r\n                                closeModal={this.closeModal}\r\n                                operation={\"create\"}\r\n                                screenName={\"IDS_REGISTRATION\"}\r\n                                onSaveClick={this.onSaveClick}\r\n                                validateEsign={this.validateEsign}\r\n                                updateStore={this.props.updateStore}\r\n                                comboComponents={this.state.comboComponents}\r\n                                withoutCombocomponent={this.state.withoutCombocomponent}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                fromDate={this.fromDate}\r\n                                toDate={this.toDate}\r\n                                mandatoryFields={[\r\n                                    { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n\r\n                            />\r\n                        </PortalModal>\r\n                        : \"\"\r\n                }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.props.Login.loadRegSubSample ||\r\n                            this.props.Login.loadFile ||\r\n                            this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick :\r\n                            this.props.Login.loadPrinter ? this.onSavePrinterClick :\r\n                                this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                            : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryList(this.props.Login.loadPreregister,\r\n                            this.props.Login.loadPrinter, this.props.Login.loadFile,\r\n                            this.props.Login.loadChildTest, this.props.Login.loadRegSubSample)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.loadRegSubSample ?\r\n                                <AddSubSample\r\n                                    editfield={this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)}\r\n                                    Component={this.props.Login.lstComponent || []}\r\n                                    selectComponent={this.state.selectedRecord}\r\n                                    templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                        this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                    handleDateChange={this.handleDateSubSampleChange}\r\n                                    onInputOnChange={this.onInputOnSubSampleChange}\r\n                                    onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                    comboData={this.props.Login.regSubSamplecomboData}\r\n                                    onComboChange={this.onComboSubSampleChange}\r\n                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                    TestChange={this.onComboChange}\r\n                                    selectedTestData={this.state.selectedRecord}\r\n                                    childoperation={this.props.Login.operation}\r\n\r\n                                />\r\n                                : this.props.Login.loadFile ? <AddFile\r\n                                    selectedFile={this.state.selectedFile || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onDrop={this.onDropComponentFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    actionType={this.state.actionType}\r\n                                    maxSize={20}\r\n                                    maxFiles={1}\r\n                                /> :\r\n                                    this.props.Login.loadPrinter ?\r\n                                        <AddPrinter\r\n                                            printer={this.props.Login.printer}\r\n                                            selectedPrinterData={this.state.selectedPrinterData}\r\n                                            PrinterChange={this.PrinterChange}\r\n                                        /> : this.props.Login.loadChildTest ? <AddTest\r\n                                            TestCombined={this.props.Login.availableTest}\r\n                                            selectedTestData={this.state.selectedRecord}\r\n                                            TestChange={this.onComboChange}\r\n                                        /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents,\r\n                control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.state.regSubSamplecomboComponents,\r\n                    columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent,\r\n                control.child, \"label\")\r\n\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData,\r\n                childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent,\r\n                [...childComboList, ...parentList])\r\n        } else {\r\n            this.setState({ selectedRecord })\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { selectedRecord }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        if (operation === 'create') {\r\n            let objSubSample = this.state.selectedRecord;\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            const userInfo = this.props.Login.userInfo;\r\n\r\n            let saveSubSample = {};\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\r\n            }\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno')\r\n            const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n            const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\r\n            saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\r\n            saveSubSample[\"jsondata\"] = {}\r\n            const dateList = []\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                let componentrowlabel = ''\r\n                                let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\r\n                                        if (componentrow.mandatory || objSubSample[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\r\n                                        }\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                objSubSample[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) :\r\n                                                objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\r\n                                                { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            objSubSample[componentrow.label] : \"\"\r\n\r\n                                        if (objSubSample[componentrow.label]) {\r\n                                            componentrowlabel = componentrowlabel + '&' + objSubSample.label\r\n                                            componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                })\r\n                                saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ?\r\n                                            objSubSample[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) :\r\n                                            objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\r\n                                            { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        objSubSample[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n\r\n            saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // Component.unshift(saveSubSample);\r\n\r\n            let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n\r\n            // const Test = this.props.Login.Test || [];\r\n            // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            const map = {}\r\n            map['RegistrationSample'] = saveSubSample\r\n            map['subsampleDateList'] = dateList\r\n            map['testgrouptest'] = selectedTestArray\r\n            map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\")\r\n            map['userinfo'] = userInfo\r\n            map['checkBoxOperation'] = 3\r\n            map['ntype'] = 3\r\n            map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n            map[\"checkBoxOperation\"] = 3\r\n            map[\"masterData\"] = this.props.Login.masterData\r\n\r\n            this.props.saveSubSample(map);\r\n        } else {\r\n            this.onUpdateSubSampleRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    mandatoryList = (printer, file, childtest, regSubSample) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (regSubSample) {\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ?\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n\r\n        else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        const inputData = {\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    getRegistrationComboService = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"combo\") {\r\n                                data.push(componentrow)\r\n                            } else {\r\n                                withoutCombocomponent.push(componentrow)\r\n                            }\r\n                        })\r\n                            : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n            })\r\n            const mapOfFilterRegData = {\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n            }\r\n            this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subsampleskip: e.skip,\r\n            subsampletake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getTestChildTabDetail(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showTestAndSample() {\r\n        this.setState({ showSample: !this.state.showSample, showTest: !this.state.showTest })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        } else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample\r\n                && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    } else {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\",\r\n                            \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                //Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample['jsondata'].ntransactionstatus === transactionStatus.PREREGISTER || sample['jsondata'].ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample['jsondata'].ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n\r\n\r\n    closeChildModal = () => {\r\n        let loadRegSubSample = this.props.Login.loadRegSubSample;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        else if (this.props.Login.loadRegSubSample) {\r\n            loadRegSubSample = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadRegSubSample, screenName, showSaveContinue,\r\n                loadFile, loadChildTest,\r\n                openModal,\r\n                parentPopUpSize: \"xl\", selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let openPortal = this.props.Login.openPortal;\r\n        let Component = this.props.Login.Component\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl'\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, parentPopUpSize }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            selectedRecord = {};\r\n            openPortal = false;\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadPreregister, selectedRecord,\r\n                    screenName, insertSourcePreregno: undefined,\r\n                    loadPrinter, openPortal,\r\n                    Component\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        />)\r\n\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let testList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n        } else {\r\n            testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n        }\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option, \"dataField\": option, \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"sstoragelocationname\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].label : \"\";\r\n            saveComponent[\"sstorageconditionname\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].label : \"\";\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            saveComponent[\"nstoragelocationcode\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].value : -1;\r\n            saveComponent[\"nstorageconditioncode\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].value : -1;\r\n\r\n            //objcomponent[\"dreceiveddate\"] = formatDate(objcomponent[\"dreceiveddate\"]);\r\n            // saveComponent[\"dreceiveddate\"] = formatInputDate(objcomponent[\"dreceiveddate\"], false);\r\n            // saveComponent[\"sreceiveddate\"] = formatInputDateWithoutT(objcomponent[\"dreceiveddate\"], false);\r\n\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"nplasmafilecode\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].value : -1;\r\n            saveComponent[\"splasmafilenumber\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].label : \"\";\r\n            saveComponent[\"ntzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].value : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"stzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].label : \"\";\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], SelectedSource: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    cancelSubSampleRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedSubSample ||\r\n            (this.props.Login.masterData.RegistrationGetSubSample ?\r\n                [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                // Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    addSubSample = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n            const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.jsondata.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\r\n                    //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\r\n                    //   if (findApprovalVersion.length === 1) {\r\n                    const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\r\n                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                    {\r\n                        let data = []\r\n                        const regSubSamplewithoutCombocomponent = []\r\n                        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                        if (Layout !== undefined) {\r\n                            Layout.map(row => {\r\n                                row.children.map(column => {\r\n                                    column.children.map(component => {\r\n                                        return component.hasOwnProperty(\"children\") ?\r\n                                            component.children.map(componentrow => {\r\n                                                if (componentrow.inputtype === \"combo\") {\r\n                                                    data.push(componentrow)\r\n                                                } else {\r\n                                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                                }\r\n                                            })\r\n                                            : component.inputtype === \"combo\" ? data.push(component) :\r\n                                                regSubSamplewithoutCombocomponent.push(component)\r\n                                    })\r\n                                })\r\n                            })\r\n                            const regSubSamplecomboComponents = data\r\n                            let regchildColumnList = {};\r\n                            data.map(columnList => {\r\n                                const val = comboChild(data, columnList, regchildColumnList, true);\r\n                                data = val.data;\r\n                                regchildColumnList = val.childColumnList\r\n                            })\r\n                            //const Map={}\r\n                            // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                            // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\r\n                            Map[\"nallottedspeccode\"] = findSampleSpec[0];\r\n                            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                                && this.props.Login.masterData.nneedsubsample;\r\n                            Map[\"npreregno\"] = addSubSampleList &&\r\n                                addSubSampleList.map(sample => sample.npreregno).join(\",\");\r\n                            Map[\"registrationsample\"] = addSubSampleList;\r\n\r\n                            this.props.addsubSampleRegistration(this.props.Login.masterData,\r\n                                this.props.Login.userInfo, data, this.state.selectedRecord,\r\n                                regchildColumnList, regSubSamplecomboComponents,\r\n                                regSubSamplewithoutCombocomponent,\r\n                                Map, controlcode)\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\" }));\r\n                        }\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                    }\r\n                    // } else {\r\n                    //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                    // }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\r\n                }\r\n            }\r\n\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.columnList !== previousProps.Login.columnList) {\r\n\r\n            this.setState({\r\n                columnList: this.props.Login.columnList,\r\n                childColumnList: this.props.Login.childColumnList,\r\n                withoutCombocomponent: this.props.Login.withoutCombocomponent,\r\n                comboComponents: this.props.Login.comboComponents\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n            this.setState({\r\n                regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n                regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n                regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            this.setState({ userRoleControlRights, controlMap });\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            let DynamicSampleColumns = this.state.DynamicSampleColumns;\r\n            let DynamicSubSampleColumns = this.state.DynamicSubSampleColumns;\r\n            let DynamicTestColumns = this.state.DynamicTestColumns;\r\n            let DynamicGridItem = this.state.DynamicGridItem;\r\n            let DynamicGridMoreField = this.state.DynamicGridMoreField;\r\n            let SingleItem = this.state.SingleItem;\r\n            let testMoreField = this.state.testMoreField;\r\n            let testListColumns = this.state.testListColumns;\r\n            let { skip, take, testskip, testtake, subsampleskip, subsampletake, testCommentDataState,\r\n                resultDataState, sampleGridDataState, popUptestDataState } = this.state\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                DynamicSampleColumns = this.constructDesign(dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : []);\r\n                DynamicSubSampleColumns = this.constructDesign(dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : []);\r\n                DynamicTestColumns = this.constructDesign(dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [])\r\n\r\n                DynamicGridItem = dynamicColumn.salemgriditem ? dynamicColumn.salemgriditem : [];\r\n                DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n                SingleItem = this.constructDesign(dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : []);\r\n                testMoreField = dynamicColumn.testlistmoreitem ? dynamicColumn.testlistmoreitem : [];\r\n                testListColumns = this.constructDesign(dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [])\r\n            }\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n\r\n            const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n            const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n            const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip\r\n            subsampletake = this.props.Login.subsampletake || subsampletake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns, SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField, testListColumns, stateSampleType: sampleTypeMap.get(\"OptionList\"),\r\n                stateRegistrationType: registrationTypeMap.get(\"OptionList\"), stateRegistrationSubType: registrationSubTypeMap.get(\"OptionList\"),\r\n                stateFilterStatus: filterStatusMap.get(\"OptionList\"), popUptestDataState,\r\n                showSample, showTest, skip, take, testskip, subsampleskip, subsampletake,\r\n                testtake, testCommentDataState, resultDataState, sampleGridDataState\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest &&\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                Map[\"withoutgetparameter\"] = 3\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.jsondata.ntransactionstatus ? sam1.jsondata.ntransactionstatus : sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 5,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistrationSubSample(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone, operation);\r\n\r\n        inputData[\"registrationsample\"] = param.sampleRegistration\r\n        inputData[\"SubSampleDateList\"] = param.dateList\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubSampleRegistration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSubSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.onUpdateSubSampleRegistration(inputParam,\r\n                this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n\r\n\r\n    editRegistration = (inputParam) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"combo\") {\r\n                                data.push(componentrow)\r\n                            } else {\r\n                                withoutCombocomponent.push(componentrow)\r\n                            }\r\n                        })\r\n                            : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            this.props.getEditRegistrationComboService(inputParam,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    editSubSampleRegistration = (inputParam) => {\r\n        let data = [];\r\n        const regSubSamplewithoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"combo\") {\r\n                                data.push(componentrow)\r\n                            } else {\r\n                                regSubSamplewithoutCombocomponent.push(componentrow)\r\n                            }\r\n                        })\r\n                            : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const regSubSamplecomboComponents = data\r\n            let regSubSamplechildColumnList = {};\r\n            data.map(columnList => {\r\n                const val = this.comboChild(data, columnList, regSubSamplechildColumnList, true);\r\n                data = val.data;\r\n                regSubSamplechildColumnList = val.childColumnList\r\n            })\r\n\r\n            this.props.getEditSubSampleComboService(inputParam,\r\n                data, this.state.selectedRecord, regSubSamplechildColumnList,\r\n                regSubSamplecomboComponents, regSubSamplewithoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the sub sample template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange, getRegSubTypeChange,\r\n    getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential,\r\n    getSampleChildTabDetail, getTestChildTabDetail,\r\n    ReloadData, showUnderDevelopment, getPreviewTemplate,\r\n    getChildValues, getRegistrationSample,\r\n    getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest,\r\n    getEditRegistrationComboService, cancelTestAction,\r\n    cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction\r\n})(injectIntl(Registration));"]},"metadata":{},"sourceType":"module"}