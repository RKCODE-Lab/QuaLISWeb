{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\project\\\\ProjectView.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { injectIntl } from \"react-intl\";\nimport { callService, crudMaster, validateEsignCredential, updateStore, changeSampleTypeFilter, filterColumnData, viewAttachment, addProjectMaster, getProjectView, getProjectmasterAddMemberService, addProjectMasterFile, getuserComboServices } from \"../../actions\";\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport { transactionStatus } from \"../../components/Enumeration\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport { getControlMap, constructOptionList } from \"../../components/CommonScript\";\nimport { ContentPanel } from \"../../components/App.styles\";\nimport { process } from \"@progress/kendo-data-query\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\nimport { Affix } from \"rsuite\";\nimport { intl } from \"../../components/App\";\nimport ProjectViewFilter from \"../../pages/project/ProjectViewFilter\";\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ProjectView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleExpandChange = () => {\n      let childListMap = new Map();\n      let keylst = this.props.Login.masterData.ChildProjectView.map(key => key.npreregno);\n      keylst.map((key, i) => {\n        let ChildProjectView = this.props.Login.masterData.ChildProjectView;\n        ChildProjectView = ChildProjectView.filter(x => x['npreregno'] === key);\n        childListMap.set(parseInt(key), ChildProjectView);\n      });\n      this.setState({\n        childListMap\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 2:\n          const selectedRecordfilter = this.state.selectedRecordfilter || {};\n          selectedRecordfilter[fieldName] = comboData;\n          this.setState({\n            selectedRecordfilter\n          });\n          break;\n\n        case 3:\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE; // else if (event.target.name === \"nlockmode\")\n        //     selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\n        else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.ConfirmDelete = (selectedProjectView, operation, deleteId, screenName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteProjectMaster(screenName, selectedProjectView, operation, deleteId));\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\n      // if ( this.props.Login.masterData.SelectedSampleType !== undefined) {\n\n      if (this.state.selectedRecordfilter !== undefined) {\n        if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\n          if (Object.values(this.props.Login.masterData.SelectedSampleType).length && this.props.Login.masterData.SelectedSampleType !== undefined) {\n            let inputParam = {\n              inputData: {\n                nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\n                nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\n                userinfo: this.props.Login.userInfo,\n                // nfilterSampleType: this.state.nfilterSampleType,\n                nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue\n              },\n              // classUrl: \"projectview\",\n              methodUrl: \"ProjectViewBySampleType\"\n            };\n            this.props.changeSampleTypeFilter(inputParam, this.props.Login.masterData.filterSampleType);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PROJECTTYPENOTAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord; //    let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\" || this.props.Login.operation === \"retire\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = '';\n          selectedRecord['esigncomments'] = '';\n          selectedRecord['esignreason'] = '';\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\"; // if (this.state.nfilterSampleType.value) {\n      // if (this.state.selectedRecord.nsampletypecodevalue.value) {\n      //if ((this.state.selectedRecord).length>0) {\n      // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\n\n      if (this.state.selectedRecordfilter !== undefined) {\n        if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\n          let inputParam = {\n            inputData: {\n              nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\n              nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\n              userinfo: this.props.Login.userInfo,\n              // nfilterSampleType: this.state.nfilterSampleType,\n              nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue\n            },\n            // classUrl: \"projectview\",\n            methodUrl: \"ProjectViewBySampleType\"\n          };\n          this.props.changeSampleTypeFilter(inputParam, this.props.Login.masterData.filterSampleType);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PROJECTTYPENOTAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedProjectView: undefined,\n      controlMap: new Map(),\n      Instrument: [],\n      dataState: dataState,\n      dataResult: [],\n      data: [],\n      childListMap: [],\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"sprojectcode\", \"sprojecttitle\", \"ncost\", \"sprojecttypename\", \"sversionstatus\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let versionStatusCSS = \"outline-secondary\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.SelectedProjectView && this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.APPROVED) {\n      versionStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedProjectView && (this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.RETIRED || this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.CLOSED)) {\n      versionStatusCSS = \"outline-danger\";\n      activeIconCSS = \"\";\n    }\n\n    if (this.props.Login.openModal) {\n      this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation);\n    } //console.log(\"master main\", this.props.Login.masterData);\n    // let mandatoryFields = [];\n\n\n    const {\n      userInfo\n    } = this.props.Login;\n    const {\n      SelectedProjectView\n    } = this.props.Login.masterData;\n    const selectedMaster = this.props.Login.masterData.SelectedProjectView;\n    const selectedProjectView = this.props.Login.masterData.SelectedProjectView;\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONTYPE\",\n      \"dataField\": \"sregtypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"dataField\": \"sregsubtypename\",\n      \"width\": \"250px\"\n    }];\n    const filterParam = {\n      inputListName: \"ProjectView\",\n      selectedObject: \"SelectedProjectView\",\n      primaryKeyField: \"nprojectmastercode\",\n      fetchUrl: \"projectview/getActiveProjectViewById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType.nsampletypecode\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTVIEW\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.ProjectView,\n      getMasterDetail: ProjectViewdata => this.props.getProjectView(ProjectViewdata, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: selectedProjectView,\n      primaryKeyField: \"nprojectmastercode\",\n      mainField: \"sprojecttitle\",\n      firstField: \"sprojectcode\",\n      secondField: \"sprojecttypename\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_PROJECTVIEWFILTER\": /*#__PURE__*/React.createElement(ProjectViewFilter, {\n          filterSampleType: this.state.ProjectViewFilterList || [],\n          nfilterSampleType: this.props.Login.masterData.SelectedSampleType || {},\n          filterProjectType: this.state.ProjectTypeFilterList || [],\n          nfilterProjectType: this.props.Login.masterData.SelectedProjectType || {},\n          onComboChange: this.onComboChange,\n          selectedRecord: this.state.selectedRecordfilter || {} // selectedRecord1={this.state.selectedRecordfilter1 || {}}\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 23\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, selectedProjectView ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 23\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TOTALCOST\"\n    }) + \" : \" + selectedProjectView.ncost), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${versionStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    }, selectedProjectView.sversionstatus))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      expandField: \"expanded\",\n      handleExpandChange: this.handleExpandChange,\n      dataResult: this.props.Login.masterData.ParentProjectView && process(this.props.Login.masterData.ParentProjectView || [], this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      }) // dataResult={this.state.dataResult}\n      ,\n      dataState: this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      } // dataState={this.state.dataState}\n      ,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      pageable: true,\n      scrollable: 'scrollable',\n      hideColumnFilter: false,\n      selectedId: 0,\n      hasChild: true,\n      childMappingField: 'npreregno',\n      childColumnList: [{\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_COST\",\n        \"dataField\": \"ncost\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_SAMPLEARNO\",\n        \"dataField\": \"ssamplearno\",\n        \"width\": \"250px\"\n      }],\n      childList: this.state.childListMap,\n      gridHeight: '355px',\n      isActionRequired: false //  actionColWidth={'250px'}   \n      //  gridWidth={'800px'}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 27\n      }\n    })))))) : \"\"))));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      selectedRecordfilter,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      nfilterSampleType,\n      filterSampleType,\n      nfilterProjectType,\n      selectedRecordfilter1\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n      this.setState({\n        selectedRecord,\n        selectedRecordfilter\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      }); //   updateState = true;\n    }\n\n    let nsampletypecode = this.state.nfilterSampleType || {};\n    let nprojecttypecode = this.state.nfilterProjectType || {};\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      nfilterSampleType = this.state.nfilterSampleType || {};\n      const filterSampleType = constructOptionList(this.props.Login.masterData.filterSampleType || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, undefined);\n      let ProjectViewFilterList = filterSampleType.get(\"OptionList\");\n      nsampletypecode = ProjectViewFilterList[0];\n      selectedRecordfilter = {\n        nsampletypecodevalue: nsampletypecode\n      };\n      selectedRecord = {\n        nsampletypecodevalue: nsampletypecode\n      }; ////\n\n      nfilterProjectType = this.state.nfilterProjectType || {};\n      const filterProjectType = constructOptionList(this.props.Login.masterData.filterProjectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      let ProjectTypeFilterList = filterProjectType.get(\"OptionList\");\n      nprojecttypecode = ProjectTypeFilterList[0];\n      selectedRecordfilter = { ...selectedRecordfilter,\n        nprojecttypecodevalue: nprojecttypecode\n      };\n      selectedRecord = { ...selectedRecord,\n        nprojecttypecodevalue: nprojecttypecode\n      };\n      this.setState({\n        ProjectViewFilterList,\n        ProjectTypeFilterList,\n        selectedRecordfilter,\n        selectedRecord,\n        data: this.props.Login.masterData.ParentProjectView,\n        dataResult: process(this.props.Login.masterData.ParentProjectView || [], this.state.dataState)\n      }); ////\n\n      if (this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\n        nfilterSampleType = {\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\n          item: this.props.Login.masterData.SelectedSampleType\n        };\n      }\n\n      if (this.props.Login.masterData.SelectedProjectType && this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\n        nfilterProjectType = {\n          label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\n          value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\n          item: this.props.Login.masterData.SelectedProjectType\n        };\n      } //  selectedRecordfilter = {nsampletypecodevalue:nfilterSampleType}\n\n\n      filterData = this.generateBreadCrumData();\n      updateState = true;\n      this.setState({\n        filterData,\n        selectedRecordfilter\n      });\n    }\n\n    if (this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\n      let nsampletypecodevalue = this.props.Login.masterData.SelectedSampleType ? {\n        label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\n        value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\n        item: this.props.Login.masterData.SelectedSampleType\n      } : \"\"; //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\n\n      selectedRecordfilter = { ...selectedRecordfilter1,\n        nsampletypecodevalue\n      };\n      selectedRecord = { ...selectedRecord,\n        nsampletypecodevalue: nsampletypecode\n      }; // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\n\n      this.setState({\n        selectedRecordfilter,\n        selectedRecord\n      });\n    } ////\n\n\n    if (this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\n      let nprojecttypecodevalue = this.props.Login.masterData.SelectedProjectType ? {\n        label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\n        item: this.props.Login.masterData.SelectedProjectType\n      } : \"\"; //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\n\n      selectedRecordfilter = { ...selectedRecordfilter,\n        nprojecttypecodevalue\n      };\n      selectedRecord = { ...selectedRecord,\n        nprojecttypecodevalue: nprojecttypecode\n      }; // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\n\n      this.setState({\n        selectedRecordfilter,\n        selectedRecord\n      });\n    } // if (this.props.Login.masterData.nfilterSampleType !== previousProps.Login.masterData.nfilterSampleType) {\n    // }\n\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedSampleType) {\n      breadCrumbData.push({\n        label: \"IDS_SAMPLETYPE\",\n        value: this.props.Login.masterData.SelectedSampleType ? this.props.Login.masterData.SelectedSampleType.ssampletypename : \"NA\"\n      }, {\n        label: \"IDS_PROJECTTYPE\",\n        value: this.props.Login.masterData.SelectedProjectType ? this.props.Login.masterData.SelectedProjectType.sprojecttypename : \"NA\"\n      });\n    } else if (this.props.Login.masterData && this.props.Login.masterData.SelectedProjectView) {\n      /*    breadCrumbData.push({\r\n            label: \"IDS_SAMPLETYPE\",\r\n            value: this.state.selectedRecord.nsampletypecode\r\n              ? this.state.selectedRecord.nsampletypecode.label\r\n              : \"NA\",\r\n          }); */\n      breadCrumbData.push({\n        label: \"IDS_SAMPLETYPE\",\n        value: this.props.Login.masterData.SelectedProjectView ? this.props.Login.masterData.SelectedProjectView.ssampletypename : \"NA\"\n      }, {\n        label: \"IDS_PROJECTTYPE\",\n        value: this.props.Login.masterData.SelectedProjectView ? this.props.Login.masterData.SelectedProjectView.ssampletypename : \"NA\"\n      });\n    } else {\n      /*       breadCrumbData.push({\r\n             label: \"IDS_SAMPLETYPE\",\r\n             value:  this.state.selectedRecord.nsampletypecodevalue\r\n               ? this.state.selectedRecord.nsampletypecodevalue.label\r\n               : \"NA\",\r\n           }); */\n      breadCrumbData.push({\n        label: \"IDS_SAMPLETYPE\",\n        value: this.props.Login.masterData.nfilterSampleType ? this.props.Login.masterData.nfilterSampleType.label : \"NA\"\n      }, {\n        label: \"IDS_PROJECTTYPE\",\n        value: this.props.Login.masterData.nfilterSampleType ? this.props.Login.masterData.nfilterSampleType.label : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterColumnData,\n  updateStore,\n  validateEsignCredential,\n  changeSampleTypeFilter,\n  viewAttachment,\n  addProjectMaster,\n  getProjectView,\n  getProjectmasterAddMemberService,\n  addProjectMasterFile,\n  getuserComboServices\n})(injectIntl(ProjectView));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/project/ProjectView.jsx"],"names":["React","Component","Row","Col","Card","connect","toast","injectIntl","callService","crudMaster","validateEsignCredential","updateStore","changeSampleTypeFilter","filterColumnData","viewAttachment","addProjectMaster","getProjectView","getProjectmasterAddMemberService","addProjectMasterFile","getuserComboServices","ListMaster","transactionStatus","DEFAULT_RETURN","getControlMap","constructOptionList","ContentPanel","process","ConfirmMessage","BreadcrumbComponent","Affix","intl","ProjectViewFilter","DataGrid","mapStateToProps","state","Login","ProjectView","constructor","props","sidebarExpandCollapse","setState","sidebarview","handleDateChange","dateName","dateValue","selectedRecord","onInputOnChange","event","optional","target","type","name","checked","value","handleExpandChange","childListMap","Map","keylst","masterData","ChildProjectView","map","key","npreregno","i","filter","x","set","parseInt","onComboChange","comboData","fieldName","caseNo","selectedRecordfilter","ACTIVE","DEACTIVE","YES","NO","onTabChange","tabProps","screenName","updateInfo","typeName","data","dataStateChange","dataResult","dataState","ConfirmDelete","selectedProjectView","operation","deleteId","confirmMessage","confirm","formatMessage","id","DeleteProjectMaster","reloadData","searchRef","current","undefined","nsampletypecodevalue","nprojecttypecodevalue","Object","values","SelectedSampleType","length","inputParam","inputData","nsampletypecode","nprojecttypecode","userinfo","userInfo","nfilterSampleType","methodUrl","filterSampleType","warn","closeModal","loadEsign","openModal","openFilter","showFilter","closeFilter","onFilterSubmit","skip","take","error","userRoleControlRights","controlMap","Instrument","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","versionStatusCSS","activeIconCSS","SelectedProjectView","ntransactionstatus","APPROVED","RETIRED","CLOSED","mandatoryFields","findMandatoryFields","selectedMaster","extractedColumnList","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","breadCrumbData","filterData","searchedData","ProjectViewdata","isClearSearch","ProjectViewFilterList","ProjectTypeFilterList","SelectedProjectType","ncost","sversionstatus","ParentProjectView","componentDidUpdate","previousProps","updateState","nfilterProjectType","selectedRecordfilter1","nformcode","item","push","ncontrolcode","get","filterProjectType","label","ssampletypename","sprojecttypename","generateBreadCrumData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport {\r\n  callService, crudMaster, validateEsignCredential, updateStore, changeSampleTypeFilter, filterColumnData,\r\n  viewAttachment, addProjectMaster, getProjectView, getProjectmasterAddMemberService, addProjectMasterFile, getuserComboServices\r\n} from \"../../actions\";\r\n\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport { transactionStatus } from \"../../components/Enumeration\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\n\r\nimport { getControlMap, constructOptionList }\r\n  from \"../../components/CommonScript\"\r\nimport { ContentPanel } from \"../../components/App.styles\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\r\nimport { Affix } from \"rsuite\";\r\nimport { intl } from \"../../components/App\";\r\nimport ProjectViewFilter from \"../../pages/project/ProjectViewFilter\";\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\n\r\nclass ProjectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const dataState = { skip: 0, take: 10 };\r\n    this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedProjectView: undefined,\r\n      controlMap: new Map(),\r\n      Instrument: [],\r\n      dataState: dataState,\r\n      dataResult: [], data: [],\r\n      childListMap: [],\r\n      sidebarview: false\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"sprojectcode\", \"sprojecttitle\", \"ncost\", \"sprojecttypename\", \"sversionstatus\"]\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n  sidebarExpandCollapse = () => {\r\n      this.setState({\r\n          sidebarview: true\r\n      })          \r\n  }\r\n\r\n  handleDateChange = (dateName, dateValue) => {\r\n    const { selectedRecord } = this.state;\r\n    selectedRecord[dateName] = dateValue;\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n\r\n  onInputOnChange = (event, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === \"checkbox\") {\r\n      selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    } else if (event.target.type === 'radio') {\r\n      selectedRecord[event.target.name] = optional;\r\n    } else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.Login.masterStatus !== \"\") {\r\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n      }\r\n    }\r\n    if (props.Login.error !== state.error) {\r\n      toast.error(props.Login.error);\r\n      props.Login.error = \"\";\r\n    }\r\n    if (props.Login.selectedRecord === undefined) {\r\n      return { selectedRecord: {} };\r\n    }\r\n    return null;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n    let versionStatusCSS = \"outline-secondary\";\r\n    let activeIconCSS = \"fa fa-check\"\r\n\r\n\r\n    if (this.props.Login.masterData.SelectedProjectView && this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.APPROVED) {\r\n      versionStatusCSS = \"outline-success\";\r\n    }\r\n    else if (this.props.Login.masterData.SelectedProjectView && ((this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.RETIRED) || (this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.CLOSED))) {\r\n      versionStatusCSS = \"outline-danger\";\r\n      activeIconCSS = \"\";\r\n    }\r\n\r\n\r\n    if (this.props.Login.openModal) {\r\n      this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n    }\r\n\r\n    //console.log(\"master main\", this.props.Login.masterData);\r\n    // let mandatoryFields = [];\r\n    const { userInfo } = this.props.Login;\r\n\r\n\r\n\r\n    const { SelectedProjectView } = this.props.Login.masterData;\r\n    const selectedMaster = this.props.Login.masterData.SelectedProjectView;\r\n    const selectedProjectView = this.props.Login.masterData.SelectedProjectView;\r\n\r\n    this.extractedColumnList = [\r\n      { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"100px\" },\r\n      { \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"sregtypename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"sregsubtypename\", \"width\": \"250px\" },\r\n    ]\r\n\r\n    const filterParam = {\r\n      inputListName: \"ProjectView\",\r\n      selectedObject: \"SelectedProjectView\",\r\n      primaryKeyField: \"nprojectmastercode\",\r\n      fetchUrl: \"projectview/getActiveProjectViewById\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, nsampletypecode: this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType.nsampletypecode },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n\r\n\r\n    };\r\n    const breadCrumbData = this.state.filterData || [];\r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n          {breadCrumbData.length > 0 ? (\r\n            <Affix top={53}>\r\n              <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n            </Affix>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Row noGutters={true}>\r\n            <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                    {!this.state.sidebarview ?\r\n                        <i class=\"fa fa-less-than\"></i> :\r\n                        <i class=\"fa fa-greater-than\"></i> \r\n                    }\r\n                </span>\r\n              <ListMaster\r\n                screenName={this.props.intl.formatMessage({ id: \"IDS_PROJECTVIEW\" })}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.ProjectView}\r\n                getMasterDetail={(ProjectViewdata) => this.props.getProjectView(ProjectViewdata, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                selectedMaster={selectedProjectView}\r\n                primaryKeyField=\"nprojectmastercode\"\r\n                mainField=\"sprojecttitle\"\r\n                firstField=\"sprojectcode\"\r\n                secondField=\"sprojecttypename\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                searchRef={this.searchRef}\r\n                reloadData={this.reloadData}\r\n                isMultiSelecct={false}\r\n                hidePaging={false}\r\n                isClearSearch={this.props.Login.isClearSearch}\r\n\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                onFilterSubmit={this.onFilterSubmit}\r\n                showFilterIcon={true}\r\n                showFilter={this.props.Login.showFilter}\r\n                filterComponent={[\r\n                  {\r\n                    \"IDS_PROJECTVIEWFILTER\":\r\n                      <ProjectViewFilter\r\n                        filterSampleType={this.state.ProjectViewFilterList || []}\r\n                        nfilterSampleType={this.props.Login.masterData.SelectedSampleType || {}}\r\n\r\n                        filterProjectType={this.state.ProjectTypeFilterList || []}\r\n                        nfilterProjectType={this.props.Login.masterData.SelectedProjectType || {}}\r\n\r\n                        onComboChange={this.onComboChange}\r\n                        selectedRecord={this.state.selectedRecordfilter || {}}\r\n                      // selectedRecord1={this.state.selectedRecordfilter1 || {}}\r\n                      />\r\n                  }\r\n                ]}\r\n\r\n              />\r\n            </Col>\r\n            <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n              {selectedProjectView ?\r\n                <ContentPanel className=\"panel-main-content\">\r\n                  <Card className=\"border-0\">\r\n                    <Card.Header>\r\n                      <Card.Title className=\"product-title-main\">\r\n                        {this.props.intl.formatMessage({ id: \"IDS_TOTALCOST\" }) + \" : \" + selectedProjectView.ncost}\r\n                      </Card.Title>\r\n                      <Card.Subtitle>\r\n                        <div className=\"d-flex product-category\">\r\n                          <h2 className=\"product-title-sub flex-grow-1\">\r\n                            <span className={`btn btn-outlined ${versionStatusCSS} btn-sm ml-3`}>\r\n                              {/* <i class={activeIconCSS}></i> */}\r\n                              {selectedProjectView.sversionstatus}\r\n                            </span>\r\n                          </h2>\r\n                        </div>\r\n                      </Card.Subtitle>\r\n                    </Card.Header>\r\n                    <Card.Body className=\"form-static-wrap\">\r\n\r\n                      {/* <Col md={12}>\r\n                        <div className=\"horizontal-line\"></div>\r\n                      </Col> */}\r\n                      <Row noGutters>\r\n                        <Col md={12}>\r\n                          <DataGrid\r\n                            expandField=\"expanded\"\r\n                            handleExpandChange={this.handleExpandChange}\r\n                            dataResult={this.props.Login.masterData.ParentProjectView && process(\r\n                              this.props.Login.masterData.ParentProjectView || [],\r\n                              this.state.dataState ? this.state.dataState : { skip: 0, take: 10 }\r\n                            )}\r\n                            // dataResult={this.state.dataResult}\r\n                            dataState={this.state.dataState\r\n                              ? this.state.dataState : { skip: 0, take: 10 }}\r\n                            // dataState={this.state.dataState}\r\n                            dataStateChange={this.dataStateChange}\r\n                            extractedColumnList={this.extractedColumnList}\r\n                            controlMap={this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            pageable={true}\r\n                            scrollable={'scrollable'}\r\n                            hideColumnFilter={false}\r\n                            selectedId={0}\r\n                            hasChild={true}\r\n                            childMappingField={'npreregno'}\r\n                            childColumnList={[\r\n\r\n                              { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"250px\" },\r\n                              { \"idsName\": \"IDS_COST\", \"dataField\": \"ncost\", \"width\": \"100px\" },\r\n                              { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"250px\" },\r\n\r\n                            ]}\r\n                            childList={this.state.childListMap}\r\n                            gridHeight={'355px'}\r\n                            isActionRequired={false}\r\n                          //  actionColWidth={'250px'}   \r\n                          //  gridWidth={'800px'}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </ContentPanel>\r\n                : \"\"\r\n              }\r\n            </Col>\r\n          </Row>\r\n\r\n\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n\r\n  handleExpandChange = () => {\r\n\r\n    let childListMap = new Map();\r\n    let keylst = this.props.Login.masterData.ChildProjectView.map(key => key.npreregno);\r\n\r\n    keylst.map((key, i) => {\r\n      let ChildProjectView = this.props.Login.masterData.ChildProjectView;\r\n\r\n      ChildProjectView = ChildProjectView.filter(x => x['npreregno'] === key);\r\n      childListMap.set(parseInt(key), ChildProjectView);\r\n    })\r\n    this.setState({ childListMap })\r\n\r\n  };\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    switch (caseNo) {\r\n\r\n      case 2:\r\n        const selectedRecordfilter = this.state.selectedRecordfilter || {};\r\n        selectedRecordfilter[fieldName] = comboData;\r\n        this.setState({ selectedRecordfilter });\r\n        break;\r\n\r\n      case 3:\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  onInputOnChange = (event, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === 'checkbox') {\r\n      if (event.target.name === \"ntransactionstatus\")\r\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n      // else if (event.target.name === \"nlockmode\")\r\n      //     selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\r\n      else\r\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    }\r\n    else if (event.target.type === 'radio') {\r\n      selectedRecord[event.target.name] = optional;\r\n    }\r\n    else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  }\r\n\r\n\r\n\r\n\r\n  onTabChange = (tabProps) => {\r\n    const screenName = tabProps.screenName;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { screenName },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n\r\n\r\n  dataStateChange = (event) => {\r\n    this.setState({\r\n      dataResult: process(this.state.data, event.dataState),\r\n      dataState: event.dataState\r\n    });\r\n  }\r\n\r\n\r\n  ConfirmDelete = (selectedProjectView, operation, deleteId, screenName) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () =>\r\n        this.DeleteProjectMaster(\r\n          screenName,\r\n          selectedProjectView,\r\n          operation,\r\n          deleteId\r\n\r\n        )\r\n    );\r\n  };\r\n\r\n\r\n\r\n  reloadData = () => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n    // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\r\n    // if ( this.props.Login.masterData.SelectedSampleType !== undefined) {\r\n    if (this.state.selectedRecordfilter !== undefined) {\r\n      if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\r\n        if (Object.values(this.props.Login.masterData.SelectedSampleType).length && this.props.Login.masterData.SelectedSampleType !== undefined) {\r\n          let inputParam = {\r\n            inputData: {\r\n              nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\r\n              nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\r\n              userinfo: this.props.Login.userInfo,\r\n              // nfilterSampleType: this.state.nfilterSampleType,\r\n              nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue,\r\n            },\r\n            // classUrl: \"projectview\",\r\n            methodUrl: \"ProjectViewBySampleType\",\r\n          };\r\n          this.props.changeSampleTypeFilter(\r\n            inputParam,\r\n            this.props.Login.masterData.filterSampleType\r\n          );\r\n        }\r\n      } else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPENOTAVAILABLE\", }));\r\n      }\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\", }));\r\n    }\r\n  };\r\n\r\n\r\n\r\n  closeModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let selectedRecord = this.state.selectedRecord;\r\n    //    let selectedRecord = this.state.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n      if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\" || this.props.Login.operation === \"retire\") {\r\n        loadEsign = false;\r\n        openModal = false;\r\n        selectedRecord = {};\r\n      }\r\n      else {\r\n        loadEsign = false;\r\n        selectedRecord['esignpassword'] = '';\r\n        selectedRecord['esigncomments'] = '';\r\n        selectedRecord['esignreason'] = '';\r\n      }\r\n    }\r\n    else {\r\n      openModal = false;\r\n      selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { openModal, loadEsign, selectedRecord }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let updateState = false;\r\n    let {\r\n      selectedRecord,\r\n      selectedRecordfilter,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      filterData,\r\n      nfilterSampleType,\r\n      filterSampleType,\r\n      nfilterProjectType,\r\n      selectedRecordfilter1,\r\n\r\n\r\n    } = this.state;\r\n\r\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      updateState = true;\r\n      this.setState({ selectedRecord, selectedRecordfilter });\r\n    }\r\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n      userRoleControlRights = [];\r\n      if (this.props.Login.userRoleControlRights) {\r\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode\r\n        ] &&\r\n          Object.values(\r\n            this.props.Login.userRoleControlRights[\r\n            this.props.Login.userInfo.nformcode\r\n            ]\r\n          ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n      }\r\n      controlMap = getControlMap(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode\r\n      );\r\n      this.setState({ controlMap, userRoleControlRights });\r\n      //   updateState = true;\r\n    }\r\n\r\n    let nsampletypecode = this.state.nfilterSampleType || {};\r\n    let nprojecttypecode = this.state.nfilterProjectType || {};\r\n\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n      nfilterSampleType = this.state.nfilterSampleType || {};\r\n\r\n      const filterSampleType = constructOptionList(this.props.Login.masterData.filterSampleType || [], \"nsampletypecode\",\r\n        \"ssampletypename\", undefined, undefined, undefined);\r\n\r\n      let ProjectViewFilterList = filterSampleType.get(\"OptionList\");\r\n      nsampletypecode = ProjectViewFilterList[0];\r\n      selectedRecordfilter = { nsampletypecodevalue: nsampletypecode }\r\n      selectedRecord = { nsampletypecodevalue: nsampletypecode }\r\n\r\n      ////\r\n\r\n      nfilterProjectType = this.state.nfilterProjectType || {};\r\n\r\n      const filterProjectType = constructOptionList(this.props.Login.masterData.filterProjectType || [], \"nprojecttypecode\",\r\n        \"sprojecttypename\", undefined, undefined, undefined);\r\n\r\n      let ProjectTypeFilterList = filterProjectType.get(\"OptionList\");\r\n      nprojecttypecode = ProjectTypeFilterList[0];\r\n      selectedRecordfilter = { ...selectedRecordfilter, nprojecttypecodevalue: nprojecttypecode }\r\n      selectedRecord = { ...selectedRecord, nprojecttypecodevalue: nprojecttypecode }\r\n\r\n      this.setState({\r\n        ProjectViewFilterList, ProjectTypeFilterList,\r\n        selectedRecordfilter, selectedRecord, data: this.props.Login.masterData.ParentProjectView,\r\n        dataResult: process(this.props.Login.masterData.ParentProjectView || [], this.state.dataState)\r\n      });\r\n\r\n      ////\r\n\r\n      if (this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\r\n        nfilterSampleType = {\r\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\r\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\r\n          item: this.props.Login.masterData.SelectedSampleType,\r\n        };\r\n      }\r\n\r\n      if (this.props.Login.masterData.SelectedProjectType && this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\r\n        nfilterProjectType = {\r\n          label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\r\n          value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\r\n          item: this.props.Login.masterData.SelectedProjectType,\r\n        };\r\n      }\r\n      //  selectedRecordfilter = {nsampletypecodevalue:nfilterSampleType}\r\n      filterData = this.generateBreadCrumData();\r\n      updateState = true;\r\n      this.setState({ filterData, selectedRecordfilter });\r\n    }\r\n\r\n\r\n    if (this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\r\n\r\n      let nsampletypecodevalue = this.props.Login.masterData.SelectedSampleType ?\r\n        {\r\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\r\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\r\n          item: this.props.Login.masterData.SelectedSampleType\r\n        } : \"\"\r\n      //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\r\n      selectedRecordfilter = { ...selectedRecordfilter1, nsampletypecodevalue }\r\n      selectedRecord = { ...selectedRecord, nsampletypecodevalue: nsampletypecode }\r\n      // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\r\n      this.setState({\r\n        selectedRecordfilter, selectedRecord\r\n\r\n      });\r\n\r\n    }\r\n    ////\r\n    if (this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\r\n\r\n      let nprojecttypecodevalue = this.props.Login.masterData.SelectedProjectType ?\r\n        {\r\n          label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\r\n          value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\r\n          item: this.props.Login.masterData.SelectedProjectType\r\n        } : \"\"\r\n      //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\r\n      selectedRecordfilter = { ...selectedRecordfilter, nprojecttypecodevalue }\r\n      selectedRecord = { ...selectedRecord, nprojecttypecodevalue: nprojecttypecode }\r\n      // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\r\n      this.setState({\r\n        selectedRecordfilter, selectedRecord\r\n\r\n      });\r\n\r\n    }\r\n    // if (this.props.Login.masterData.nfilterSampleType !== previousProps.Login.masterData.nfilterSampleType) {\r\n\r\n    // }\r\n\r\n  }\r\n  generateBreadCrumData() {\r\n    const breadCrumbData = [];\r\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedSampleType) {\r\n\r\n      breadCrumbData.push({\r\n        label: \"IDS_SAMPLETYPE\",\r\n        value: this.props.Login.masterData.SelectedSampleType\r\n          ? this.props.Login.masterData.SelectedSampleType.ssampletypename\r\n          : \"NA\",\r\n      },\r\n        {\r\n          label: \"IDS_PROJECTTYPE\",\r\n          value: this.props.Login.masterData.SelectedProjectType\r\n            ? this.props.Login.masterData.SelectedProjectType.sprojecttypename\r\n            : \"NA\",\r\n        });\r\n\r\n    } else if (this.props.Login.masterData && this.props.Login.masterData.SelectedProjectView) {\r\n\r\n      /*    breadCrumbData.push({\r\n            label: \"IDS_SAMPLETYPE\",\r\n            value: this.state.selectedRecord.nsampletypecode\r\n              ? this.state.selectedRecord.nsampletypecode.label\r\n              : \"NA\",\r\n          }); */\r\n\r\n      breadCrumbData.push({\r\n        label: \"IDS_SAMPLETYPE\",\r\n        value: this.props.Login.masterData.SelectedProjectView\r\n          ? this.props.Login.masterData.SelectedProjectView.ssampletypename\r\n          : \"NA\",\r\n      },\r\n        {\r\n          label: \"IDS_PROJECTTYPE\",\r\n          value: this.props.Login.masterData.SelectedProjectView\r\n            ? this.props.Login.masterData.SelectedProjectView.ssampletypename\r\n            : \"NA\",\r\n        });\r\n\r\n    } else {\r\n\r\n      /*       breadCrumbData.push({\r\n             label: \"IDS_SAMPLETYPE\",\r\n             value:  this.state.selectedRecord.nsampletypecodevalue\r\n               ? this.state.selectedRecord.nsampletypecodevalue.label\r\n               : \"NA\",\r\n           }); */\r\n\r\n      breadCrumbData.push({\r\n        label: \"IDS_SAMPLETYPE\",\r\n        value: this.props.Login.masterData.nfilterSampleType\r\n          ? this.props.Login.masterData.nfilterSampleType.label\r\n          : \"NA\",\r\n      },\r\n        {\r\n          label: \"IDS_PROJECTTYPE\",\r\n          value: this.props.Login.masterData.nfilterSampleType\r\n            ? this.props.Login.masterData.nfilterSampleType.label\r\n            : \"NA\",\r\n        });\r\n\r\n    }\r\n    return breadCrumbData;\r\n  }\r\n\r\n  openFilter = () => {\r\n    let showFilter = !this.props.Login.showFilter;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  closeFilter = () => {\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter: false },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  onFilterSubmit = () => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n    // if (this.state.nfilterSampleType.value) {\r\n    // if (this.state.selectedRecord.nsampletypecodevalue.value) {\r\n    //if ((this.state.selectedRecord).length>0) {\r\n\r\n    // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\r\n\r\n    if (this.state.selectedRecordfilter !== undefined) {\r\n      if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\r\n        let inputParam = {\r\n          inputData: {\r\n            nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\r\n            nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\r\n            userinfo: this.props.Login.userInfo,\r\n            // nfilterSampleType: this.state.nfilterSampleType,\r\n            nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue,\r\n          },\r\n          // classUrl: \"projectview\",\r\n          methodUrl: \"ProjectViewBySampleType\",\r\n        };\r\n        this.props.changeSampleTypeFilter(\r\n          inputParam,\r\n          this.props.Login.masterData.filterSampleType\r\n        );\r\n      } else {\r\n\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPENOTAVAILABLE\", }));\r\n\r\n      }\r\n    } else {\r\n\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\", }));\r\n\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  filterColumnData,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  changeSampleTypeFilter,\r\n  viewAttachment, addProjectMaster, getProjectView, getProjectmasterAddMemberService, addProjectMasterFile, getuserComboServices\r\n})(injectIntl(ProjectView));\r\n"]},"metadata":{},"sourceType":"module"}