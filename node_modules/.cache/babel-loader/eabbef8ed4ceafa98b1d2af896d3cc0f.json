{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\MethodValidityView.jsx\";\nimport React, { Component } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { injectIntl } from \"react-intl\";\nimport rsapi from \"../../rsapi\";\nimport { process } from \"@progress/kendo-data-query\";\nimport { Row } from \"react-bootstrap\";\nimport \"../../assets/styles/lims-global-theme.css\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport { showEsign, getControlMap, create_UUID, onDropAttachFileList, convertDateValuetoString, deleteAttachmentDropZone, formatInputDate, rearrangeDateFormat } from \"../../components/CommonScript\";\nimport Esign from \"../audittrail/Esign\";\nimport AddMethodValidity from \"./AddMethodValidity\"; //import ValidateFormula from './ValidateFormula';\n\nimport { parameterType, transactionStatus, operators, attachmentType, FORMULAFIELDTYPE } from \"../../components/Enumeration\";\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\nimport MethodValidityTab from \"./MethodValidityTab\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport { ChartLegendTitle } from \"@progress/kendo-react-charts\";\nimport { rearrangeDateFormatDateOnly } from './../../components/CommonScript';\n\nclass MethodValidityView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = (dateName, dateValue, sdatename) => {\n      const {\n        selectedRecord\n      } = this.state; // if(dateName === \"dvaliditystartdate\")\n      // {\n      //   selectedRecord[\"dvalidityenddate\"] = dateValue;  \n      // }\n\n      selectedRecord[dateName] = dateValue;\n      selectedRecord[sdatename] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n\n      for (let i = 0; i < this.props.masterData[\"MethodValidity\"].length; i++) {\n        this.props.masterData[\"MethodValidity\"][i].svaliditystartdate = rearrangeDateFormatDateOnly(this.props.userInfo, this.props.masterData[\"MethodValidity\"][i].svaliditystartdate);\n        this.props.masterData[\"MethodValidity\"][i].svalidityenddate = rearrangeDateFormatDateOnly(this.props.userInfo, this.props.masterData[\"MethodValidity\"][i].svalidityenddate);\n      }\n\n      tabMap.set(\"IDS_METHODVALIDITY\", /*#__PURE__*/React.createElement(MethodValidityTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        operation: this.props.operation,\n        dataResult: process(this.props.masterData[\"MethodValidity\"], this.state.methodvalidityDataState),\n        dataState: this.state.methodvalidityDataState,\n        dataStateChange: event => this.setState({\n          methodvalidityDataState: event.dataState\n        }),\n        selectedMethod: this.props.masterData.SelectedMethod,\n        fetchMethodValidityById: this.props.fetchMethodValidityById,\n        editParam: this.props.editParam,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        selectedComponent: this.state.selectedComponent,\n        handleComponentRowClick: this.handleComponentRowClick,\n        formatMessage: this.props.intl.formatMessage,\n        deleteRecord: this.deleteRecord,\n        onApproveClick: this.onApproveClick,\n        openChildModal: this.openChildModal,\n        defaultRecord: this.defaultRecord,\n        selectedId: this.props.selectedId,\n        getAvailableValidityData: this.props.getAvailableValidityData,\n        MethodValidity: this.props.masterData.MethodValidity || [],\n        screenName: \"IDS_METHODVALIDITY\",\n        approveParam: this.props.approveParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }\n      }));\n      return tabMap;\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem; // let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation: \"\" // SelectedTest, selectedComponent,\n          // testDataState: {\n          //     skip: 0, take: this.props.Login.settings ?\n          //         parseInt(this.props.Login.settings[14]) : 5\n          // }\n\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedComponent\n      });\n    };\n\n    this.openChildModal = () => {\n      if (this.props.selectedMethod.nneedvalidity === transactionStatus.YES) {\n        const addParam = {\n          screenName: \"IDS_METHOD\",\n          operation: \"create\",\n          primaryKeyName: \"nmethodvaliditycode\",\n          masterData: this.props.masterData,\n          userInfo: this.props.userInfo\n        };\n        this.props.getMethodValidityUTCDate(addParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENABLEMETHODVALIDITY\"\n        }));\n      } //let selectedRecord={};\n      // const updateInfo = {\n      //   typeName: DEFAULT_RETURN,\n      //   data: { openChildModal: true,operation:\"create\" },\n      // };//,selectedRecord\n      // this.props.updateStore(updateInfo);\n\n    };\n\n    this.onApproveClick = (selectedDataItem, operation, primaryKeyName) => {\n      if (selectedDataItem.dataItem.ntransactionstatus === transactionStatus.DRAFT) {\n        // if (this.state.selectedComponent.ntransactionstatus === transactionStatus.DRAFT) {\n        const approveId = this.props.controlMap.has(\"ApproveMethodValidity\") && this.props.controlMap.get(\"ApproveMethodValidity\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.userInfo; //add               \n\n        let postParam = undefined;\n        inputData[\"methodvalidity\"] = selectedDataItem.dataItem;\n        postParam = {\n          inputListName: \"methodvalidity\",\n          selectedObject: \"MethodValidity\",\n          primaryKeyField: \"nmethodvaliditycode\",\n          primaryKeyValue: this.state.selectedRecord[\"nmethodvaliditycode\"],\n          fetchUrl: \"method/getActiveMethodValidityById\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData\n        };\n        const inputParam = {\n          classUrl: \"method\",\n          methodUrl: \"MethodValidity\",\n          inputData: inputData,\n          operation: \"approve\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.masterData;\n        const esignNeeded = showEsign(this.props.esignRights, this.props.userInfo.nformcode, approveId);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              screenName: \"IDS_METHOD\",\n              openChildModal: true,\n              operation: \"approve\",\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n        } //  }\n        // else {\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\n        // }\n\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOTEDITDELETEMETHODVALIDITY\"\n        }));\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (deleteParam.selectedRecord.ntransactionstatus === transactionStatus.DRAFT) {\n        const methodUrl = deleteParam.methodUrl;\n        const selected = deleteParam.selectedRecord;\n        let dataState = undefined;\n\n        if (this.props.screenName === \"IDS_SECTION\") {\n          dataState = this.state.methodValidityDataState;\n        }\n\n        const inputParam = {\n          inputData: {\n            [methodUrl.toLowerCase()]: selected,\n            userinfo: this.props.userInfo\n          },\n          classUrl: \"method\",\n          operation: deleteParam.operation,\n          methodUrl: methodUrl,\n          screenName: \"IDS_METHOD\",\n          dataState\n        };\n        const masterData = this.props.masterData;\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openChildModal: true,\n              screenName: \"IDS_METHOD\",\n              operation: deleteParam.operation,\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOTEDITDELETEMETHODVALIDITY\"\n        }));\n      }\n    };\n\n    this.defaultRecord = (defaultParam, event) => {\n      const methodUrl = defaultParam.methodUrl;\n      let dataItem = defaultParam.selectedRecord; // dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\n\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.methodValidityDataState;\n      }\n\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: dataItem,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"method\",\n        operation: \"setDefault\",\n        methodUrl: methodUrl,\n        dataState\n      };\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, defaultParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            screenName: \"Method\",\n            operation: defaultParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n      let selectedId = this.props.selectedId;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"approve\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord[\"esignpassword\"] = \"\";\n          selectedRecord[\"esigncomments\"] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          ;\n          this.setState({\n            selectedRecord\n          }); // if (fieldName === \"sparametername\") {\n          //   selectedRecord[fieldName] = comboData;\n          //   selectedRecord[\"sparametersynonym\"] = comboData.value;\n          // } else {\n          //   selectedRecord[fieldName] = comboData;\n          // }\n          // this.setState({ selectedRecord });\n\n          break;\n\n        case 2:\n          const parameterData = this.props.parameterData;\n          let item = comboData[\"item\"];\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = 4;\n\n          if (item[\"nunitrequired\"] === 3) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = this.props.parameterData.defaultUnit;\n          } else {\n            selectedRecord[\"nunitcode\"] = \"\";\n          }\n\n          if (item[\"nroundingrequired\"] === 3) {\n            needRoundingDigit = false;\n          } else {\n            selectedRecord[\"nroundingdigits\"] = \"\";\n          }\n\n          if (item[\"npredefinedrequired\"] === 3) {\n            needCodedResult = false;\n            npredefinedcode = item[\"npredefinedrequired\"];\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n          }\n\n          if (item[\"ngraderequired\"] === 3) {\n            needActualResult = false;\n            selectedRecord[\"ngradecode\"] = this.props.parameterData.defaultGrade;\n          } else {\n            selectedRecord[\"ngradecode\"] = \"\";\n          }\n\n          selectedRecord[fieldName] = comboData;\n          const parameterInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              parameterData: { ...parameterData,\n                needUnit,\n                needRoundingDigit,\n                needCodedResult,\n                needActualResult,\n                npredefinedcode\n              }\n            }\n          };\n          this.props.updateStore(parameterInfo);\n          break;\n\n        case 3:\n          selectedRecord[fieldName] = comboData;\n          this.props.formulaChangeFunction({\n            ntestcategorycode: comboData.value,\n            nFlag: 2,\n            userinfo: this.props.userInfo\n          }, this.props.formulaData, 1, selectedRecord, \"/changeTestCatgoryInFormula\");\n          break;\n\n        case 4:\n          selectedRecord[fieldName] = comboData;\n          this.props.formulaChangeFunction({\n            ntestcode: comboData.value,\n            nFlag: 3,\n            userinfo: this.props.userInfo\n          }, this.props.formulaData, 2, selectedRecord, \"/changeTestInFormula\");\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === \"checkbox\") {\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n          } else if (event.target.type === \"radio\") {\n            selectedRecord[event.target.name] = optional; //  selectedRecord[\"sfilename\"]=\"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          const inputValue = event.target.value;\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 5:\n          if (optional.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER && optional.sdescription.indexOf(\"P$\") === -1) {\n            const value = event.target.value.replace(/[^-^0-9]/g, \"\");\n            const dynamicField = this.state.dynamicField || [];\n\n            if (/^-?\\d*?$/.test(value)) {\n              if (!selectedRecord[\"formulainput\"]) {\n                selectedRecord[\"formulainput\"] = {};\n              }\n\n              selectedRecord[\"formulainput\"][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            } else if (value === \"\") {\n              if (!selectedRecord[\"formulainput\"]) {\n                selectedRecord[\"formulainput\"] = {};\n              }\n\n              selectedRecord[\"formulainput\"][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            }\n\n            this.setState({\n              dynamicField,\n              selectedRecord\n            });\n            break;\n          } else {\n            const value = event.target.value.replace(/[^-^0-9.]/g, \"\");\n            const dynamicField = this.state.dynamicField || [];\n\n            if (/^-?\\d*?\\.?\\d*?$/.test(value) || value !== \"\") {\n              if (!selectedRecord[\"formulainput\"]) {\n                selectedRecord[\"formulainput\"] = {};\n              }\n\n              selectedRecord[\"formulainput\"][event.target.name] = value;\n              dynamicField[event.target.name] = {\n                sparameter: optional.sdescription,\n                svalues: value\n              };\n            }\n\n            this.setState({\n              dynamicField,\n              selectedRecord\n            });\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      let postParam = undefined;\n      let editId = this.props.controlMap.has(\"AddMethodValidity\") && this.props.controlMap.get(\"AddMethodValidity\").ncontrolcode; // if (this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3) {\n      //     if (this.state.selectedRecord[\"spredefinedname\"] === undefined || \n      //          this.state.selectedRecord[\"spredefinedname\"] === \"\") {\n      //         toast.info(\"Enter PreDefined Name\");\n      //         return;\n      //     }\n      // }\n      //   if (this.state.selectedRecord[\"dvalidityenddate\"] !== undefined && this.state.selectedRecord[\"dvaliditystartdate\"] !== undefined) {\n      //     if (this.state.selectedRecord[\"dvalidityenddate\"] < this.state.selectedRecord[\"dvaliditystartdate\"]) {\n      //         toast.info(this.props.intl.formatMessage({ id: \"IDS_ENDDATEGRATERTHANSTARTDATE\" }));\n      //         return;\n      //     }\n      // }\n\n      let obj = convertDateValuetoString(this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"] : new Date(), this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date(), this.props.userInfo);\n      this.state.selectedRecord[\"svaliditystartdate\"] = obj.fromDate;\n      this.state.selectedRecord[\"svalidityenddate\"] = obj.toDate;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"methodvalidity\",\n          selectedObject: \"MethodValidity\",\n          primaryKeyField: \"nmethodvaliditycode\",\n          primaryKeyValue: this.state.selectedRecord[\"nmethodvaliditycode\"],\n          fetchUrl: \"method/getActiveMethodValidityById\",\n          fecthInputObject: {\n            userinfo: this.props.userInfo\n          },\n          masterData: this.props.masterData\n        };\n        inputData[\"methodvalidity\"] = {\n          \"nsitecode\": this.props.userInfo.nmastersitecode\n        };\n        inputData[\"methodvalidity\"][\"dvaliditystartdate\"] = this.state.selectedRecord[\"dvaliditystartdate\"] ? formatInputDate(this.state.selectedRecord[\"dvaliditystartdate\"]) : formatInputDate(new Date());\n        inputData[\"methodvalidity\"][\"dvalidityenddate\"] = this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date();\n        inputData[\"methodvalidity\"][\"svaliditystartdate\"] = this.state.selectedRecord[\"svaliditystartdate\"] ? this.state.selectedRecord[\"svaliditystartdate\"] : new Date();\n        inputData[\"methodvalidity\"][\"svalidityenddate\"] = this.state.selectedRecord[\"svalidityenddate\"] ? this.state.selectedRecord[\"svalidityenddate\"] : new Date();\n        inputData[\"methodvalidity\"][\"nmethodcode\"] = this.props.selectedMethod.nmethodcode;\n        inputData[\"methodvalidity\"][\"nmethodvaliditycode\"] = this.state.selectedRecord[\"nmethodvaliditycode\"] ? this.state.selectedRecord[\"nmethodvaliditycode\"] : 0;\n        editId = this.props.controlMap.has(\"EditMethodValidity\") && this.props.controlMap.get(\"EditMethodValidity\").ncontrolcode;\n      } else {\n        inputData[\"methodvalidity\"] = {\n          \"nsitecode\": this.props.userInfo.nmastersitecode\n        };\n        inputData[\"methodvalidity\"][\"dvaliditystartdate\"] = this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"] : new Date();\n        inputData[\"methodvalidity\"][\"dvalidityenddate\"] = this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date();\n        inputData[\"methodvalidity\"][\"svaliditystartdate\"] = this.state.selectedRecord[\"svaliditystartdate\"] ? this.state.selectedRecord[\"svaliditystartdate\"] : new Date();\n        inputData[\"methodvalidity\"][\"svalidityenddate\"] = this.state.selectedRecord[\"svalidityenddate\"] ? this.state.selectedRecord[\"svalidityenddate\"] : new Date();\n        inputData[\"methodvalidity\"][\"nmethodcode\"] = this.props.selectedMethod.nmethodcode;\n      }\n\n      inputData[\"methodvalidity\"][\"ntzvaliditystartdatetimezone\"] = this.state.selectedRecord[\"ntzvaliditystartdatetimezone\"] ? this.state.selectedRecord[\"ntzvaliditystartdatetimezone\"].value || this.props.userInfo.ntimezonecode : this.props.userInfo.ntimezonecode;\n      inputData[\"methodvalidity\"][\"ntzvalidityenddatetimezone\"] = this.state.selectedRecord[\"ntzvalidityenddatetimezone\"] ? this.state.selectedRecord[\"ntzvalidityenddatetimezone\"].value || this.props.userInfo.ntimezonecode : this.props.userInfo.ntimezonecode;\n      const inputParam = {\n        classUrl: \"method\",\n        methodUrl: \"MethodValidity\",\n        displayName: \"IDS_METHOD\",\n        inputData: inputData,\n        operation: this.props.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.masterData;\n      const esignNeeded = showEsign(this.props.esignRights, this.props.userInfo.nformcode, editId);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.ConfirmDelete = (deleteParam, deleteID) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteParam));\n    };\n\n    this.state = {\n      selectedRecord: {},\n      fieldFlag: true,\n      operatorFlag: false,\n      functionFlag: true,\n      methodvalidityDataState: {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      },\n      methodDataState: {\n        skip: 0,\n        take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n      },\n      selectedComponent: \"\"\n    };\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const {\n      SelectedMethod\n    } = this.props.masterData;\n    const mandatoryFields = [{\n      idsName: \"IDS_VALIDITYSTARTDATE\",\n      dataField: \"dvaliditystartdate\",\n      mandatoryLabel: \"IDS_SELECT\",\n      controlType: \"selectbox\"\n    }, {\n      idsName: \"IDS_VALIDITYENDDATE\",\n      dataField: \"dvalidityenddate\",\n      mandatoryLabel: \"IDS_SELECT\",\n      controlType: \"selectbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, SelectedMethod && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: \"IDS_METHODVALIDITY\",\n      onSaveClick: this.onSaveClick,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(AddMethodValidity, {\n        selectedRecord: this.state.selectedRecord || {},\n        methodvalidity: this.props.MethodValidity,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        methodValidityDataState,\n        selectedRecord\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        if (this.props.screenName === \"IDS_METHODVALIDITY\") {\n          methodValidityDataState = {\n            skip: 0,\n            take: 10\n          };\n        }\n      } //this.props.masterData.MethodValidity\n\n\n      this.setState({\n        methodValidityDataState,\n        selectedRecord\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    } // if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n    //     this.setState({ selectedRecord: this.props.Login.selectedRecord });\n    // }\n    // if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n    //     const userRoleControlRights = [];\n    //     if (this.props.Login.userRoleControlRights) {\n    //         this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\n    //             userRoleControlRights.push(item.ncontrolcode))\n    //     }\n    //     const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\n    //     this.setState({ userRoleControlRights, controlMap });\n    // }\n\n  }\n\n}\n\nexport default injectIntl(MethodValidityView);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/MethodValidityView.jsx"],"names":["React","Component","toast","injectIntl","rsapi","process","Row","SlideOutModal","DEFAULT_RETURN","showEsign","getControlMap","create_UUID","onDropAttachFileList","convertDateValuetoString","deleteAttachmentDropZone","formatInputDate","rearrangeDateFormat","Esign","AddMethodValidity","parameterType","transactionStatus","operators","attachmentType","FORMULAFIELDTYPE","CustomTab","MethodValidityTab","ConfirmMessage","ChartLegendTitle","rearrangeDateFormatDateOnly","MethodValidityView","constructor","props","handleDateChange","dateName","dateValue","sdatename","selectedRecord","state","setState","onTabChange","tabProps","screenName","updateInfo","typeName","data","updateStore","tabDetail","tabMap","Map","i","masterData","length","svaliditystartdate","userInfo","svalidityenddate","set","controlMap","userRoleControlRights","operation","methodvalidityDataState","event","dataState","SelectedMethod","fetchMethodValidityById","editParam","inputParam","selectedComponent","handleComponentRowClick","intl","formatMessage","deleteRecord","onApproveClick","openChildModal","defaultRecord","selectedId","getAvailableValidityData","MethodValidity","approveParam","dataItem","selectedMethod","nneedvalidity","YES","addParam","primaryKeyName","getMethodValidityUTCDate","warn","id","selectedDataItem","ntransactionstatus","DRAFT","approveId","has","get","ncontrolcode","inputData","postParam","undefined","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","userinfo","classUrl","methodUrl","saveType","esignNeeded","esignRights","nformcode","loadEsign","screenData","crudMaster","deleteParam","selected","methodValidityDataState","toLowerCase","ncontrolCode","defaultParam","closeModal","onComboChange","comboData","fieldName","caseNo","parameterData","item","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","defaultUnit","defaultGrade","parameterInfo","formulaChangeFunction","ntestcategorycode","value","nFlag","formulaData","ntestcode","onEsignInputOnChange","target","type","name","checked","onInputOnChange","optional","NO","inputValue","test","ndynamicformulafieldcode","INTEGER","sdescription","indexOf","replace","dynamicField","sparameter","svalues","onSaveClick","formRef","editId","obj","Date","fromDate","toDate","nmastersitecode","nmethodcode","ntimezonecode","displayName","searchRef","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","ConfirmDelete","deleteID","confirmMessage","confirm","fieldFlag","operatorFlag","functionFlag","skip","take","settings","parseInt","methodDataState","render","mandatoryFields","idsName","dataField","mandatoryLabel","controlType","componentDidUpdate","previousProps","Login","PrevoiusLoginData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport rsapi from \"../../rsapi\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport \"../../assets/styles/lims-global-theme.css\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport {\r\n  showEsign,\r\n  getControlMap,\r\n  create_UUID,\r\n  onDropAttachFileList,\r\n  convertDateValuetoString,\r\n  deleteAttachmentDropZone,\r\n  formatInputDate,\r\n  rearrangeDateFormat,\r\n} from \"../../components/CommonScript\";\r\nimport Esign from \"../audittrail/Esign\";\r\nimport AddMethodValidity from \"./AddMethodValidity\";\r\n//import ValidateFormula from './ValidateFormula';\r\nimport {\r\n  parameterType,\r\n  transactionStatus,\r\n  operators,\r\n  attachmentType,\r\n  FORMULAFIELDTYPE,\r\n} from \"../../components/Enumeration\";\r\nimport CustomTab from \"../../components/custom-tabs/custom-tabs.component\";\r\nimport MethodValidityTab from \"./MethodValidityTab\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nimport { ChartLegendTitle } from \"@progress/kendo-react-charts\";\r\nimport { rearrangeDateFormatDateOnly } from './../../components/CommonScript';\r\n\r\nclass MethodValidityView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedRecord: {},\r\n      fieldFlag: true,\r\n      operatorFlag: false,\r\n      functionFlag: true,\r\n      methodvalidityDataState: { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5},\r\n      methodDataState: { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 },\r\n      selectedComponent:\"\"\r\n    };\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n\r\n  render() {\r\n    const { SelectedMethod } = this.props.masterData;\r\n    \r\n    const mandatoryFields = [\r\n      {\r\n        idsName: \"IDS_VALIDITYSTARTDATE\",\r\n        dataField: \"dvaliditystartdate\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      },\r\n      {\r\n        idsName: \"IDS_VALIDITYENDDATE\",\r\n        dataField: \"dvalidityenddate\",\r\n        mandatoryLabel: \"IDS_SELECT\",\r\n        controlType: \"selectbox\",\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        {SelectedMethod && (\r\n          <CustomTab\r\n            tabDetail={this.tabDetail()}\r\n            onTabChange={this.onTabChange}\r\n          />\r\n        )}\r\n\r\n        {this.props.openChildModal && (\r\n          <SlideOutModal\r\n            show={this.props.openChildModal}\r\n            closeModal={this.closeModal}\r\n            operation={this.props.operation}\r\n            inputParam={this.props.inputParam}\r\n            screenName={\"IDS_METHODVALIDITY\"}\r\n            onSaveClick={this.onSaveClick}\r\n            esign={this.props.loadEsign}\r\n            validateEsign={this.validateEsign}\r\n            selectedRecord={this.state.selectedRecord || {}}\r\n            mandatoryFields={this.mandatoryFields}\r\n            addComponent={\r\n              this.props.loadEsign ? (\r\n                <Esign\r\n                  operation={this.props.operation}\r\n                  onInputOnChange={this.onEsignInputOnChange}\r\n                  inputParam={this.props.inputParam}\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                />\r\n              ) : (\r\n                <AddMethodValidity\r\n                  selectedRecord={this.state.selectedRecord || {}}\r\n                  methodvalidity={this.props.MethodValidity}\r\n                  handleDateChange={this.handleDateChange}\r\n                  userInfo={this.props.userInfo}\r\n                />\r\n              )\r\n            }\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  handleDateChange = (dateName, dateValue, sdatename) => {\r\n    const { selectedRecord } = this.state;\r\n    // if(dateName === \"dvaliditystartdate\")\r\n    // {\r\n    //   selectedRecord[\"dvalidityenddate\"] = dateValue;  \r\n    // }\r\n    selectedRecord[dateName] = dateValue;\r\n    selectedRecord[sdatename] = dateValue;\r\n    this.setState({ selectedRecord });\r\n  };\r\n  onTabChange = (tabProps) => {\r\n    const screenName = tabProps.screenName;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { screenName },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n  tabDetail = () => {\r\n    const tabMap = new Map();\r\n\r\n    for(let i=0;i<this.props.masterData[\"MethodValidity\"].length;i++)\r\n    {\r\n      this.props.masterData[\"MethodValidity\"][i].svaliditystartdate=rearrangeDateFormatDateOnly(this.props.userInfo,this.props.masterData[\"MethodValidity\"][i].svaliditystartdate);\r\n      this.props.masterData[\"MethodValidity\"][i].svalidityenddate=rearrangeDateFormatDateOnly(this.props.userInfo,this.props.masterData[\"MethodValidity\"][i].svalidityenddate);\r\n    }\r\n\r\n    tabMap.set(\r\n      \"IDS_METHODVALIDITY\",\r\n      <MethodValidityTab\r\n        controlMap={this.props.controlMap}\r\n        userRoleControlRights={this.props.userRoleControlRights}\r\n        operation = {this.props.operation}\r\n        dataResult={process(\r\n          this.props.masterData[\"MethodValidity\"],\r\n          this.state.methodvalidityDataState )}\r\n        dataState={this.state.methodvalidityDataState }\r\n        dataStateChange={(event) =>\r\n          this.setState({ methodvalidityDataState: event.dataState })\r\n        }\r\n        selectedMethod={this.props.masterData.SelectedMethod}\r\n        fetchMethodValidityById={this.props.fetchMethodValidityById}\r\n        editParam={this.props.editParam}\r\n        userInfo={this.props.userInfo}\r\n        inputParam={this.props.inputParam}\r\n        selectedComponent={this.state.selectedComponent}\r\n        handleComponentRowClick={this.handleComponentRowClick}\r\n        formatMessage={this.props.intl.formatMessage}\r\n        deleteRecord={this.deleteRecord}\r\n        onApproveClick={this.onApproveClick}\r\n        openChildModal={this.openChildModal}\r\n        defaultRecord={this.defaultRecord}\r\n        selectedId={this.props.selectedId}\r\n        getAvailableValidityData={this.props.getAvailableValidityData}\r\n        MethodValidity={this.props.masterData.MethodValidity || []}\r\n        screenName=\"IDS_METHODVALIDITY\"\r\n        approveParam={this.props.approveParam}\r\n      />\r\n    );\r\n\r\n    return tabMap;\r\n  };\r\n  handleComponentRowClick = (event) => {\r\n    let selectedComponent = event.dataItem;\r\n    // let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n    const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          operation:\"\"\r\n            // SelectedTest, selectedComponent,\r\n            // testDataState: {\r\n            //     skip: 0, take: this.props.Login.settings ?\r\n            //         parseInt(this.props.Login.settings[14]) : 5\r\n            // }\r\n        }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n    this.setState({selectedComponent});\r\n\r\n};\r\n  openChildModal = () => {\r\n    if(this.props.selectedMethod.nneedvalidity===transactionStatus.YES)\r\n    {\r\n    const addParam = {\r\n      screenName: \"IDS_METHOD\", operation: \"create\", primaryKeyName: \"nmethodvaliditycode\",\r\n      masterData: this.props.masterData, userInfo: this.props.userInfo\r\n     \r\n  }\r\n  this.props.getMethodValidityUTCDate(addParam);\r\n}\r\nelse\r\n{\r\n  toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENABLEMETHODVALIDITY\" }));\r\n}\r\n    //let selectedRecord={};\r\n    // const updateInfo = {\r\n    //   typeName: DEFAULT_RETURN,\r\n    //   data: { openChildModal: true,operation:\"create\" },\r\n    // };//,selectedRecord\r\n    // this.props.updateStore(updateInfo);\r\n  };\r\n    onApproveClick = (selectedDataItem, operation, primaryKeyName) => {\r\n      if (selectedDataItem.dataItem.ntransactionstatus === transactionStatus.DRAFT) {\r\n   // if (this.state.selectedComponent.ntransactionstatus === transactionStatus.DRAFT) {\r\n        const approveId = this.props.controlMap.has(\"ApproveMethodValidity\") && this.props.controlMap.get(\"ApproveMethodValidity\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        //add               \r\n        let postParam = undefined;\r\n        inputData[\"methodvalidity\"] =selectedDataItem.dataItem;\r\n        postParam = { inputListName: \"methodvalidity\", selectedObject: \"MethodValidity\", primaryKeyField: \"nmethodvaliditycode\",\r\n        primaryKeyValue: this.state.selectedRecord[\"nmethodvaliditycode\"],\r\n         fetchUrl: \"method/getActiveMethodValidityById\", fecthInputObject: { userinfo: this.props.userInfo },\r\n         masterData: this.props.masterData \r\n      }\r\n        const inputParam = {\r\n            classUrl: \"method\",\r\n            methodUrl: \"MethodValidity\",\r\n            inputData: inputData,\r\n            operation: \"approve\", postParam\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.esignRights, this.props.userInfo.nformcode, approveId);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, screenName: \"IDS_METHOD\", openChildModal: true, operation: \"approve\",selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            \r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\",{});\r\n        }\r\n\r\n  //  }\r\n    // else {\r\n    //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOAPPROVE\" }));\r\n    // }\r\n      }\r\n      else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOTEDITDELETEMETHODVALIDITY\" }));\r\n    }\r\n\r\n}\r\n  deleteRecord = (deleteParam) => {\r\n    if (deleteParam.selectedRecord.ntransactionstatus === transactionStatus.DRAFT) {\r\n    const methodUrl = deleteParam.methodUrl;\r\n    const selected = deleteParam.selectedRecord;\r\n    let dataState = undefined;\r\n    if (this.props.screenName === \"IDS_SECTION\") {\r\n      dataState = this.state.methodValidityDataState;\r\n    }\r\n    const inputParam = {\r\n      inputData: {\r\n        [methodUrl.toLowerCase()]: selected,\r\n        userinfo: this.props.userInfo,\r\n      },\r\n      classUrl: \"method\",\r\n      operation: deleteParam.operation,\r\n      methodUrl: methodUrl,\r\n      screenName: \"IDS_METHOD\",\r\n      dataState,\r\n    };\r\n    const masterData = this.props.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.esignRights,\r\n        this.props.userInfo.nformcode,\r\n        deleteParam.ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openChildModal: true,\r\n          screenName: \"IDS_METHOD\",\r\n          operation: deleteParam.operation,\r\n          selectedRecord: {},\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n    }\r\n  }\r\n  else {\r\n    toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOTEDITDELETEMETHODVALIDITY\" }));\r\n}\r\n  };\r\n\r\n  defaultRecord = (defaultParam, event) => {\r\n    const methodUrl = defaultParam.methodUrl;\r\n    let dataItem = defaultParam.selectedRecord;\r\n    // dataItem[\"ndefaultstatus\"] = transactionStatus.YES;\r\n    let dataState = undefined;\r\n    if (this.props.screenName === \"IDS_SECTION\") {\r\n      dataState = this.state.methodValidityDataState;\r\n    }\r\n    const inputParam = {\r\n      inputData: {\r\n        [methodUrl.toLowerCase()]: dataItem,\r\n        userinfo: this.props.userInfo,\r\n      },\r\n      classUrl: \"method\",\r\n      operation: \"setDefault\",\r\n      methodUrl: methodUrl,\r\n      dataState,\r\n    };\r\n    const masterData = this.props.masterData;\r\n    if (\r\n      showEsign(\r\n        this.props.esignRights,\r\n        this.props.userInfo.nformcode,\r\n        defaultParam.ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openChildModal: true,\r\n          screenName: \"Method\",\r\n          operation: defaultParam.operation,\r\n          selectedRecord: {},\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n    }\r\n  };\r\n  closeModal = () => {\r\n    let loadEsign = this.props.loadEsign;\r\n    let openChildModal = this.props.openChildModal;\r\n    let selectedRecord = this.props.selectedRecord;\r\n    let selectedId = this.props.selectedId;\r\n    if (this.props.loadEsign) {\r\n      if (\r\n        this.props.operation === \"delete\" ||\r\n        this.props.operation === \"approve\"  \r\n      ) {\r\n        loadEsign = false;\r\n        openChildModal = false;\r\n        selectedRecord = {};\r\n      } else {\r\n        loadEsign = false;\r\n        selectedRecord[\"agree\"] = 4;\r\n        selectedRecord[\"esignpassword\"] = \"\";\r\n        selectedRecord[\"esigncomments\"] = \"\";\r\n        selectedRecord['esignreason']=\"\"\r\n      }\r\n    } else {\r\n      openChildModal = false;\r\n      selectedRecord = {};\r\n      selectedId=null;\r\n    }\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { openChildModal, loadEsign, selectedRecord,selectedId },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n    let selectedRecord = this.state.selectedRecord || {};\r\n    switch (caseNo) {\r\n      case 1:\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;   \r\n     \r\n        this.setState({selectedRecord}); \r\n        // if (fieldName === \"sparametername\") {\r\n        //   selectedRecord[fieldName] = comboData;\r\n        //   selectedRecord[\"sparametersynonym\"] = comboData.value;\r\n        // } else {\r\n        //   selectedRecord[fieldName] = comboData;\r\n        // }\r\n        // this.setState({ selectedRecord });\r\n        break;\r\n\r\n      case 2:\r\n        const parameterData = this.props.parameterData;\r\n        let item = comboData[\"item\"];\r\n        let needUnit = true;\r\n        let needRoundingDigit = true;\r\n        let needCodedResult = true;\r\n        let needActualResult = true;\r\n        let npredefinedcode = 4;\r\n        if (item[\"nunitrequired\"] === 3) {\r\n          needUnit = false;\r\n          selectedRecord[\"nunitcode\"] = this.props.parameterData.defaultUnit;\r\n        } else {\r\n          selectedRecord[\"nunitcode\"] = \"\";\r\n        }\r\n        if (item[\"nroundingrequired\"] === 3) {\r\n          needRoundingDigit = false;\r\n        } else {\r\n          selectedRecord[\"nroundingdigits\"] = \"\";\r\n        }\r\n        if (item[\"npredefinedrequired\"] === 3) {\r\n          needCodedResult = false;\r\n          npredefinedcode = item[\"npredefinedrequired\"];\r\n        } else {\r\n          selectedRecord[\"spredefinedname\"] = \"\";\r\n        }\r\n        if (item[\"ngraderequired\"] === 3) {\r\n          needActualResult = false;\r\n          selectedRecord[\"ngradecode\"] = this.props.parameterData.defaultGrade;\r\n        } else {\r\n          selectedRecord[\"ngradecode\"] = \"\";\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        const parameterInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            selectedRecord,\r\n            parameterData: {\r\n              ...parameterData,\r\n              needUnit,\r\n              needRoundingDigit,\r\n              needCodedResult,\r\n              needActualResult,\r\n              npredefinedcode,\r\n            },\r\n          },\r\n        };\r\n        this.props.updateStore(parameterInfo);\r\n        break;\r\n\r\n      case 3:\r\n        selectedRecord[fieldName] = comboData;\r\n        this.props.formulaChangeFunction(\r\n          {\r\n            ntestcategorycode: comboData.value,\r\n            nFlag: 2,\r\n            userinfo: this.props.userInfo,\r\n          },\r\n          this.props.formulaData,\r\n          1,\r\n          selectedRecord,\r\n          \"/changeTestCatgoryInFormula\"\r\n        );\r\n        break;\r\n\r\n      case 4:\r\n        selectedRecord[fieldName] = comboData;\r\n        this.props.formulaChangeFunction(\r\n          {\r\n            ntestcode: comboData.value,\r\n            nFlag: 3,\r\n            userinfo: this.props.userInfo,\r\n          },\r\n          this.props.formulaData,\r\n          2,\r\n          selectedRecord,\r\n          \"/changeTestInFormula\"\r\n        );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  onEsignInputOnChange = (event) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === \"checkbox\") {\r\n      selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    } else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n  onInputOnChange = (event, caseNo, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    switch (caseNo) {\r\n      case 1:\r\n        if (event.target.type === \"checkbox\") {\r\n          selectedRecord[event.target.name] =\r\n            event.target.checked === true\r\n              ? transactionStatus.YES\r\n              : transactionStatus.NO;\r\n        } else if (event.target.type === \"radio\") {\r\n          selectedRecord[event.target.name] = optional;\r\n          //  selectedRecord[\"sfilename\"]=\"\";\r\n        } else {\r\n          selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        break;\r\n\r\n      case 4:\r\n        const inputValue = event.target.value;\r\n        if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n          selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        break;\r\n\r\n      case 5:\r\n        if (\r\n          optional.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER &&\r\n          optional.sdescription.indexOf(\"P$\") === -1\r\n        ) {\r\n          const value = event.target.value.replace(/[^-^0-9]/g, \"\");\r\n          const dynamicField = this.state.dynamicField || [];\r\n          if (/^-?\\d*?$/.test(value)) {\r\n            if (!selectedRecord[\"formulainput\"]) {\r\n              selectedRecord[\"formulainput\"] = {};\r\n            }\r\n            selectedRecord[\"formulainput\"][event.target.name] = value;\r\n            dynamicField[event.target.name] = {\r\n              sparameter: optional.sdescription,\r\n              svalues: value,\r\n            };\r\n          } else if (value === \"\") {\r\n            if (!selectedRecord[\"formulainput\"]) {\r\n              selectedRecord[\"formulainput\"] = {};\r\n            }\r\n            selectedRecord[\"formulainput\"][event.target.name] = value;\r\n            dynamicField[event.target.name] = {\r\n              sparameter: optional.sdescription,\r\n              svalues: value,\r\n            };\r\n          }\r\n          this.setState({ dynamicField, selectedRecord });\r\n          break;\r\n        } else {\r\n          const value = event.target.value.replace(/[^-^0-9.]/g, \"\");\r\n          const dynamicField = this.state.dynamicField || [];\r\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value !== \"\") {\r\n            if (!selectedRecord[\"formulainput\"]) {\r\n              selectedRecord[\"formulainput\"] = {};\r\n            }\r\n            selectedRecord[\"formulainput\"][event.target.name] = value;\r\n            dynamicField[event.target.name] = {\r\n              sparameter: optional.sdescription,\r\n              svalues: value,\r\n            };\r\n          }\r\n          this.setState({ dynamicField, selectedRecord });\r\n          break;\r\n        }\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  onSaveClick = (saveType, formRef) => {\r\n    //add / edit\r\n    let inputData = [];\r\n    inputData[\"userinfo\"] = this.props.userInfo;\r\n    let postParam = undefined;\r\n    let editId = this.props.controlMap.has(\"AddMethodValidity\") && this.props.controlMap.get(\"AddMethodValidity\").ncontrolcode\r\n    // if (this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3) {\r\n    //     if (this.state.selectedRecord[\"spredefinedname\"] === undefined || \r\n    //          this.state.selectedRecord[\"spredefinedname\"] === \"\") {\r\n    //         toast.info(\"Enter PreDefined Name\");\r\n    //         return;\r\n    //     }\r\n    // }\r\n  //   if (this.state.selectedRecord[\"dvalidityenddate\"] !== undefined && this.state.selectedRecord[\"dvaliditystartdate\"] !== undefined) {\r\n  //     if (this.state.selectedRecord[\"dvalidityenddate\"] < this.state.selectedRecord[\"dvaliditystartdate\"]) {\r\n  //         toast.info(this.props.intl.formatMessage({ id: \"IDS_ENDDATEGRATERTHANSTARTDATE\" }));\r\n  //         return;\r\n  //     }\r\n  // }\r\n  let obj= convertDateValuetoString(this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"]: new Date(),this.state.selectedRecord[\"dvalidityenddate\"]?this.state.selectedRecord[\"dvalidityenddate\"]:new Date(),this.props.userInfo);\r\n  this.state.selectedRecord[\"svaliditystartdate\"]=obj.fromDate;\r\n  this.state.selectedRecord[\"svalidityenddate\"]=obj.toDate;\r\n    if (this.props.operation === \"update\") {\r\n        // edit\r\n        postParam = { inputListName: \"methodvalidity\", selectedObject: \"MethodValidity\", primaryKeyField: \"nmethodvaliditycode\",\r\n        primaryKeyValue: this.state.selectedRecord[\"nmethodvaliditycode\"],\r\n         fetchUrl: \"method/getActiveMethodValidityById\", fecthInputObject: { userinfo: this.props.userInfo },\r\n         masterData: this.props.masterData \r\n      }\r\n        inputData[\"methodvalidity\"] = { \"nsitecode\": this.props.userInfo.nmastersitecode };\r\n        \r\n        inputData[\"methodvalidity\"][\"dvaliditystartdate\"] = this.state.selectedRecord[\"dvaliditystartdate\"] ? formatInputDate(this.state.selectedRecord[\"dvaliditystartdate\"]) : formatInputDate(new Date());\r\n        inputData[\"methodvalidity\"][\"dvalidityenddate\"] = this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"svaliditystartdate\"] = this.state.selectedRecord[\"svaliditystartdate\"] ? this.state.selectedRecord[\"svaliditystartdate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"svalidityenddate\"] = this.state.selectedRecord[\"svalidityenddate\"] ? this.state.selectedRecord[\"svalidityenddate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"nmethodcode\"] =this.props.selectedMethod.nmethodcode;\r\n        inputData[\"methodvalidity\"][\"nmethodvaliditycode\"] =this.state.selectedRecord[\"nmethodvaliditycode\"] ? this.state.selectedRecord[\"nmethodvaliditycode\"] : 0;\r\n        editId = this.props.controlMap.has(\"EditMethodValidity\") && this.props.controlMap.get(\"EditMethodValidity\").ncontrolcode\r\n    } else {\r\n        inputData[\"methodvalidity\"] = { \"nsitecode\": this.props.userInfo.nmastersitecode };\r\n        \r\n        inputData[\"methodvalidity\"][\"dvaliditystartdate\"] = this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"] :new Date();\r\n        inputData[\"methodvalidity\"][\"dvalidityenddate\"] = this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"svaliditystartdate\"] = this.state.selectedRecord[\"svaliditystartdate\"] ? this.state.selectedRecord[\"svaliditystartdate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"svalidityenddate\"] = this.state.selectedRecord[\"svalidityenddate\"] ? this.state.selectedRecord[\"svalidityenddate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"nmethodcode\"] =this.props.selectedMethod.nmethodcode;\r\n    }\r\n    inputData[\"methodvalidity\"][\"ntzvaliditystartdatetimezone\"] = this.state.selectedRecord[\r\n      \"ntzvaliditystartdatetimezone\"\r\n    ]\r\n      ? this.state.selectedRecord[\"ntzvaliditystartdatetimezone\"].value ||\r\n      this.props.userInfo.ntimezonecode\r\n      : this.props.userInfo.ntimezonecode;\r\n  inputData[\"methodvalidity\"][\"ntzvalidityenddatetimezone\"] = this.state.selectedRecord[\r\n          \"ntzvalidityenddatetimezone\"\r\n        ]\r\n          ? this.state.selectedRecord[\"ntzvalidityenddatetimezone\"].value ||\r\n          this.props.userInfo.ntimezonecode\r\n          : this.props.userInfo.ntimezonecode;\r\n        \r\n    const inputParam = {\r\n        classUrl: \"method\",\r\n        methodUrl: \"MethodValidity\",\r\n        displayName:\"IDS_METHOD\",\r\n        inputData: inputData,\r\n        operation: this.props.operation,\r\n        saveType, formRef, postParam, searchRef: this.searchRef\r\n    }\r\n    const masterData = this.props.masterData;\r\n    const esignNeeded  = showEsign(this.props.esignRights, this.props.userInfo.nformcode, editId)\r\n    if (esignNeeded) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        \r\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n    }\r\n  };\r\n  validateEsign = () => {\r\n    const inputParam = {\r\n        inputData: {\r\n            \"userinfo\": {\r\n                ...this.props.userInfo,\r\n                sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n           \r\n            },\r\n            password: this.state.selectedRecord[\"esignpassword\"]\r\n        },\r\n        screenData: this.props.screenData\r\n    }\r\n    this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n}\r\n  ConfirmDelete = (deleteParam, deleteID) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () => this.deleteRecord(deleteParam)\r\n    );\r\n  };\r\n  componentDidUpdate(previousProps) {\r\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n      this.setState({ selectedRecord: this.props.selectedRecord });\r\n    }\r\n\r\n    \r\n   \r\n    if (this.props.masterData !== previousProps.masterData) {\r\n      let { methodValidityDataState, selectedRecord } = this.state;\r\n      if (this.props.dataState === undefined) {\r\n        if (this.props.screenName === \"IDS_METHODVALIDITY\") {\r\n          methodValidityDataState = { skip: 0, take: 10 };\r\n        }\r\n      }\r\n      //this.props.masterData.MethodValidity\r\n      \r\n      this.setState({ methodValidityDataState, selectedRecord });\r\n    }\r\n    if (this.props.Login !== previousProps.Login) {\r\n      this.PrevoiusLoginData = previousProps;\r\n    }\r\n\r\n    // if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n    //     this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    // }\r\n    // if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n    //     const userRoleControlRights = [];\r\n    //     if (this.props.Login.userRoleControlRights) {\r\n    //         this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n    //             userRoleControlRights.push(item.ncontrolcode))\r\n    //     }\r\n    //     const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n    //     this.setState({ userRoleControlRights, controlMap });\r\n    // }\r\n  }\r\n}\r\nexport default injectIntl(MethodValidityView);\r\n"]},"metadata":{},"sourceType":"module"}