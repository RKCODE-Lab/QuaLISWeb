{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingcertificate\\\\TrainingCertificateParticipantsTab.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faUserPlus } from '@fortawesome/free-solid-svg-icons';\nimport { MediaLabel } from '../../../components/add-client.styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { toast } from 'react-toastify';\nimport AddParticipants from './AddParticipants';\nimport Esign from '../../audittrail/Esign';\nimport { callService, crudMaster, getTrainingParticipantsComboDataService, getSectionUsersDataService, updateStore, validateEsignCredential } from '../../../actions';\nimport { ProductList } from '../../product/product.styled';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/reject.svg\";\nimport { showEsign, validateEmail, validatePhoneNumber } from '../../../components/CommonScript';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { transactionStatus } from '../../../components/Enumeration'; //import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingCertificateParticipantsTab extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.participantDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.masterData[\"TrainingParticipants\"], event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.props\n      });\n    };\n\n    this.detailBand = props => {\n      const Dataitem = props.dataItem;\n      const OptionalFieldList = [{\n        datafield: \"ssectionname\",\n        Column: \"Section Name\"\n      }, {\n        datafield: \"sfullname\",\n        Column: \"Participants Details\"\n      }];\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }, OptionalFieldList.map(fields => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: \"6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: fields.Column,\n          message: fields.Column,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 40\n          }\n        })), /*#__PURE__*/React.createElement(MediaLabel, {\n          className: \"readonly-text font-weight-normal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 29\n          }\n        }, Dataitem[fields.datafield])));\n      }));\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\" || this.props.operation === \"cancel\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getTabContent = event => {\n      this.setState({\n        activeTab: event.currentTarget.name\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n\n      if (fieldName === \"ndeputyusersitecode\") {\n        this.state.deputyUserList.map(item => {\n          if (item.nusersitecode === comboData.value) {\n            selectedRecord[\"sdeputyname\"] = item.sfirstname + \" \" + item.slastname;\n          }\n\n          return null;\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleChange = (value, valueParam, isSection) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n        const SelectedTrainingCertificate = this.props.masterData.SelectedTrainingCertificate.ntrainingcode || {};\n\n        if (isSection === \"Section\") {\n          this.props.getSectionUsersDataService(value.value, selectedRecord, this.props.Login.userInfo, SelectedTrainingCertificate);\n          selectedRecord[\"nusercode\"] = undefined;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputParam = {};\n\n      if (this.props.screenName === \"IDS_PARTICIPANTSDETAILS\") {\n        inputParam = this.saveParticipantDetails(saveType, formRef);\n      }\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      }\n    };\n\n    this.oninviteListClick = row => {\n      if (this.props.masterData.TrainingParticipants.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: this.props.masterData.TrainingParticipants.stranstatus\n        }));\n      } else {\n        const ncontrolCode = this.props.controlMap.has(\"SendinvitationTrainingCertificate\") && this.props.controlMap.get(\"SendinvitationTrainingCertificate\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"trainingparticipants\"] = {\n          \"nparticipantcode\": row.nparticipantcode\n        };\n        inputData[\"trainingparticipants\"][\"ntrainingcode\"] = this.props.Login.masterData.TrainingParticipants[0].ntrainingcode; // inputData[\"trainingparticipants\"] = this.props.Login.masterData.TrainingParticipants;\n\n        postParam = {\n          inputListName: \"TrainingParticipants\",\n          selectedObject: \"TrainingParticipants\",\n          primaryKeyField: \"nparticipantcode\"\n        };\n        const inputParam = {\n          classUrl: 'trainingcertificate',\n          methodUrl: \"TrainingParticipants\",\n          inputData: inputData,\n          operation: \"invite\",\n          postParam,\n          selectedId: row.nparticipantcode\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"invite\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onCancelListClick = row => {\n      //if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.DRAFT) {\n      const ncontrolCode = this.props.controlMap.has(\"CancelTrainingCertificate\") && this.props.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode;\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n      let postParam = undefined;\n      inputData[\"trainingparticipants\"] = {\n        \"nparticipantcode\": row.nparticipantcode\n      };\n      inputData[\"trainingparticipants\"][\"ntrainingcode\"] = this.props.Login.masterData.TrainingParticipants[0].ntrainingcode;\n      postParam = {\n        inputListName: \"TrainingParticipants\",\n        selectedObject: \"TrainingParticipants\",\n        primaryKeyField: \"nparticipantcode\"\n      };\n      const inputParam = {\n        classUrl: 'trainingcertificate',\n        methodUrl: \"TrainingParticipants\",\n        inputData: inputData,\n        operation: \"cancel\",\n        postParam,\n        selectedId: row.nparticipantcode\n      };\n      let saveType;\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true,\n            operation: \"cancel\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.detailedFieldList = [{\n      dataField: \"ssectionname\",\n      idsName: \"IDS_SECTIONNAME\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfullname\",\n      idsName: \"IDS_PARTICIPANTS\",\n      columnSize: \"4\"\n    } // { dataField: \"sfaxno\", idsName: \"IDS_FAXNO\", columnSize:\"4\" },\n    // //{ dataField: \"sdisplaystatus\", idsName: \"IDS_DISPLAYSTATUS\" },\n    //{ \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"20%\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\n    ];\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'TrainingParticipants-tab',\n      dataState: dataState\n    };\n    this.mandatoryColumnList = [{\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"nsectioncode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"select\"\n    }, {\n      \"idsName\": \"IDS_PARTICIPANTNAME\",\n      \"dataField\": \"nusercode\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.participantsColumnList = [{\n      \"idsName\": \"IDS_PARTICIPANTNAME\",\n      \"dataField\": \"sfullname\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_PARTICIPANTSTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"150px\"\n    }];\n  }\n\n  render() {\n    const addParticipantsId = this.props.controlMap.has(\"AddparticipantsTrainingCertificate\") && this.props.controlMap.get(\"AddparticipantsTrainingCertificate\").ncontrolcode;\n    const iniviteParticipantsId = this.props.controlMap.has(\"SendinvitationTrainingCertificate\") && this.props.controlMap.get(\"SendinvitationTrainingCertificate\").ncontrolcode;\n    const cancelParticipantsId = this.props.controlMap.has(\"CancelTrainingCertificate\") && this.props.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode;\n    const ParticipantsAddParam = {\n      screenName: \"ParticipantsDetails\",\n      operation: \"create\",\n      primaryKeyField: \"nparticipantcode\",\n      masterData: this.props.masterData,\n      userInfo: this.props.userInfo,\n      ncontrolCode: addParticipantsId\n    };\n    const ParticipantsIniviteParam = {\n      screenName: \"ParticipantsDetails\",\n      operation: \"invite\",\n      primaryKeyField: \"nparticipantcode\",\n      masterData: this.props.masterData,\n      userInfo: this.props.userInfo,\n      ncontrolCode: iniviteParticipantsId\n    };\n    const ParticipantsCancelParam = {\n      screenName: \"ParticipantsDetails\",\n      methodUrl: \"trainingcertificate\",\n      operation: \"cancel\",\n      ncontrolCode: cancelParticipantsId\n    };\n    const mandatoryFields = [];\n    this.mandatoryColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card //className=\"at-tabs border-0\"\n    , {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"add-txt-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }, \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PARTICIPANTSDETAILS\",\n      defaultMessage: \"Participants Details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 42\n      }\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      style: {\n        paddingTop: 'unset'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters text-right border-bottom pt-2 pb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addParticipantsId) === -1,\n      onClick: () => this.props.getTrainingParticipantsComboDataService(ParticipantsAddParam, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PARTICIPANTSDETAILS\",\n      defaultMessage: \"Participants Details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 49\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nparticipantcode\",\n      expandField: \"expanded\",\n      detailedFieldList: this.detailedFieldList,\n      data: this.props.masterData[\"TrainingParticipants\"],\n      dataResult: process(this.props.masterData[\"TrainingParticipants\"], this.state.dataState),\n      dataState: this.state.dataState,\n      dataStateChange: this.participantDataStateChange,\n      extractedColumnList: this.participantsColumnList,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      methodUrl: \"TrainingParticipants\",\n      addRecord: () => this.props.getTrainingParticipantsComboDataService(ParticipantsAddParam, this.props.Login.masterData),\n      fetchRecord: this.props.getTrainingParticipantsComboDataService,\n      editParam: ParticipantsIniviteParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: ParticipantsCancelParam,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isActionRequired: true,\n      isToolBarRequired: false,\n      selectedId: this.props.selectedId,\n      oldActionRequired: false,\n      hasDynamicColSize: true,\n      actionIcons: // <>\n      //     <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\n      //         <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\n      //             hidden={this.props.userRoleControlRights.indexOf(iniviteParticipantsId) === -1}\n      //             data-tip={this.props.intl.formatMessage({ id: \"IDS_INVITE\" })}\n      //             data-for=\"tooltip_list_wrap\"\n      //             onClick={() => this.oninviteListClick()}\n      //         >\n      //             <FontAwesomeIcon icon={faUserPlus} /> { }\n      //         </Nav.Link>\n      //         {/* </div>\n      //         </Col>\n      //     </Row> */}\n      //         <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\n      //             hidden={this.props.userRoleControlRights.indexOf(cancelParticipantsId) === -1}\n      //             data-tip={this.props.intl.formatMessage({ id: \"IDS_TRAININGSCHEDULECANCEL\" })}\n      //             data-for=\"tooltip_list_wrap\"\n      //             onClick={() => this.onCancelListClick()}\n      //         >\n      //             <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\n      //         </Nav.Link>\n      //     </ProductList>\n      // </>\n      [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_INVITE\"\n        }),\n        controlname: \"faUserPlus\",\n        objectName: \"mastertoedit\",\n        hidden: this.props.userRoleControlRights.indexOf(iniviteParticipantsId) === -1,\n        onClick: this.oninviteListClick,\n        inputData: {}\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_TRAININGSCHEDULECANCEL\"\n        }),\n        controlname: \"reject\",\n        objectName: \"mastertoedit\",\n        hidden: this.props.userRoleControlRights.indexOf(cancelParticipantsId) === -1,\n        onClick: this.onCancelListClick,\n        inputData: {}\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 41\n      }\n    }))))))), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        formatMessage: this.props.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddParticipants, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        formatMessage: this.props.formatMessage,\n        section: this.props.Login.section || [],\n        sectionUsers: this.props.Login.sectionUsers || [],\n        nusercode: this.props.Login.nusercode || [],\n        nsectioncode: this.props.Login.nsectioncode || [],\n        selectedTrainingParticipants: this.props.masterData.SelectedTrainingParticipants || {},\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      let isOpen = false;\n\n      if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\n        isOpen = true;\n      }\n\n      this.setState({\n        isOpen,\n        activeTab: 'TrainingParticipants-tab',\n        dataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n  saveParticipantDetails(saveType, formRef) {\n    let inputData = [];\n    let dataState = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let selectedId = null;\n    let trainingparticipants = [];\n    this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\n      trainingparticipants.push({\n        ntrainingcode: this.props.masterData.SelectedTrainingCertificate.ntrainingcode,\n        nusercode: participants.item.nusercode\n      });\n    });\n    inputData[\"trainingparticipants\"] = trainingparticipants;\n    const inputParam = {\n      classUrl: \"trainingcertificate\",\n      methodUrl: \"TrainingParticipants\",\n      inputData: inputData,\n      selectedId,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      dataState\n    };\n    return inputParam;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getTrainingParticipantsComboDataService,\n  getSectionUsersDataService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(TrainingCertificateParticipantsTab));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/competencemanagement/trainingcertificate/TrainingCertificateParticipantsTab.jsx"],"names":["React","connect","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPlus","faUserPlus","MediaLabel","FormattedMessage","injectIntl","process","SlideOutModal","toast","AddParticipants","Esign","callService","crudMaster","getTrainingParticipantsComboDataService","getSectionUsersDataService","updateStore","validateEsignCredential","ProductList","DEFAULT_RETURN","showEsign","validateEmail","validatePhoneNumber","DataGrid","transactionStatus","mapStateToProps","state","Login","TrainingCertificateParticipantsTab","Component","constructor","props","participantDataStateChange","event","setState","dataResult","masterData","dataState","expandChange","isExpanded","dataItem","expanded","undefined","aggregates","detailBand","Dataitem","OptionalFieldList","datafield","Column","map","fields","closeModal","loadEsign","openChildModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","getTabContent","activeTab","currentTarget","name","onComboChange","comboData","fieldName","deputyUserList","item","nusersitecode","value","sfirstname","slastname","onInputOnChange","target","type","checked","ACTIVE","DEACTIVE","YES","NO","handleChange","valueParam","isSection","SelectedTrainingCertificate","ntrainingcode","userInfo","onSaveClick","saveType","formRef","inputParam","screenName","saveParticipantDetails","esignRights","nformcode","ncontrolCode","screenData","oninviteListClick","row","TrainingParticipants","ntransactionstatus","CANCELLED","warn","intl","formatMessage","id","stranstatus","controlMap","has","get","ncontrolcode","inputData","postParam","nparticipantcode","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","esignNeeded","userRoleControlRights","openModal","onCancelListClick","validateEsign","sreason","password","detailedFieldList","dataField","idsName","columnSize","skip","take","settings","parseInt","isOpen","mandatoryColumnList","participantsColumnList","render","addParticipantsId","iniviteParticipantsId","cancelParticipantsId","ParticipantsAddParam","ParticipantsIniviteParam","ParticipantsCancelParam","mandatoryFields","forEach","mandatory","push","paddingTop","indexOf","deleteRecord","title","controlname","objectName","hidden","onClick","section","sectionUsers","nusercode","nsectioncode","SelectedTrainingParticipants","extractedColumnList","componentDidUpdate","previousProps","errorCode","trainingparticipants","participants"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faUserPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { MediaLabel } from '../../../components/add-client.styles';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { toast } from 'react-toastify';\r\nimport AddParticipants from './AddParticipants';\r\nimport Esign from '../../audittrail/Esign';\r\nimport { callService, crudMaster, getTrainingParticipantsComboDataService, getSectionUsersDataService, updateStore, validateEsignCredential } from '../../../actions';\r\nimport { ProductList } from '../../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { ReactComponent as Reject } from '../../../assets/image/reject.svg'\r\nimport { showEsign, validateEmail, validatePhoneNumber } from '../../../components/CommonScript';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\n//import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass TrainingCertificateParticipantsTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'TrainingParticipants-tab',\r\n            dataState: dataState\r\n        };\r\n\r\n\r\n        this.mandatoryColumnList =\r\n            [{ \"idsName\": \"IDS_SECTION\", \"dataField\": \"nsectioncode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"select\" },\r\n            { \"idsName\": \"IDS_PARTICIPANTNAME\", \"dataField\": \"nusercode\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n\r\n\r\n        this.participantsColumnList =\r\n            [{ \"idsName\": \"IDS_PARTICIPANTNAME\", \"dataField\": \"sfullname\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_PARTICIPANTSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"150px\" }\r\n            ];\r\n    }\r\n\r\n    participantDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.masterData[\"TrainingParticipants\"], event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const addParticipantsId = this.props.controlMap.has(\"AddparticipantsTrainingCertificate\") && this.props.controlMap.get(\"AddparticipantsTrainingCertificate\").ncontrolcode\r\n        const iniviteParticipantsId = this.props.controlMap.has(\"SendinvitationTrainingCertificate\") && this.props.controlMap.get(\"SendinvitationTrainingCertificate\").ncontrolcode;\r\n        const cancelParticipantsId = this.props.controlMap.has(\"CancelTrainingCertificate\") && this.props.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode\r\n\r\n\r\n        const ParticipantsAddParam = {\r\n            screenName: \"ParticipantsDetails\", operation: \"create\", primaryKeyField: \"nparticipantcode\",\r\n            masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addParticipantsId\r\n        };\r\n\r\n        const ParticipantsIniviteParam = {\r\n            screenName: \"ParticipantsDetails\", operation: \"invite\", primaryKeyField: \"nparticipantcode\",\r\n            masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: iniviteParticipantsId\r\n        };\r\n\r\n        const ParticipantsCancelParam = { screenName: \"ParticipantsDetails\", methodUrl: \"trainingcertificate\", operation: \"cancel\", ncontrolCode: cancelParticipantsId };\r\n        const mandatoryFields = [];\r\n        this.mandatoryColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card //className=\"at-tabs border-0\"\r\n                        >\r\n                            <Card.Header className=\"add-txt-btn\">\r\n                                <strong> <FormattedMessage id=\"IDS_PARTICIPANTSDETAILS\" defaultMessage=\"Participants Details\" /></strong>\r\n                            </Card.Header>\r\n                            <Card.Body style={{ paddingTop: 'unset' }}>\r\n                                <Row className=\"no-gutters text-right border-bottom pt-2 pb-2\" >\r\n                                    <Col md={12}>\r\n                                        <div className=\"d-flex justify-content-end\">\r\n\r\n                                            <Nav.Link className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addParticipantsId) === -1}\r\n\r\n                                                onClick={() => this.props.getTrainingParticipantsComboDataService(ParticipantsAddParam, this.props.Login.masterData)}>\r\n                                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                <FormattedMessage id='IDS_PARTICIPANTSDETAILS' defaultMessage='Participants Details' />\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"no-gutters\">\r\n                                    <Col md={12}>\r\n                                        <DataGrid\r\n                                            primaryKeyField={\"nparticipantcode\"}\r\n                                            expandField=\"expanded\"\r\n                                            detailedFieldList={this.detailedFieldList}\r\n                                            data={this.props.masterData[\"TrainingParticipants\"]}\r\n                                            dataResult={process(this.props.masterData[\"TrainingParticipants\"], this.state.dataState)}\r\n                                            dataState={this.state.dataState}\r\n                                            dataStateChange={this.participantDataStateChange}\r\n                                            extractedColumnList={this.participantsColumnList}\r\n                                            controlMap={this.props.controlMap}\r\n                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                            inputParam={this.props.inputParam}\r\n                                            userInfo={this.props.userInfo}\r\n                                            methodUrl=\"TrainingParticipants\"\r\n                                            addRecord={() => this.props.getTrainingParticipantsComboDataService(ParticipantsAddParam, this.props.Login.masterData)}\r\n                                            fetchRecord={this.props.getTrainingParticipantsComboDataService}\r\n                                            editParam={ParticipantsIniviteParam}\r\n                                            deleteRecord={this.deleteRecord}\r\n                                            deleteParam={ParticipantsCancelParam}\r\n                                            pageable={true}\r\n                                            scrollable={\"scrollable\"}\r\n                                            isActionRequired={true}\r\n                                            isToolBarRequired={false}\r\n                                            selectedId={this.props.selectedId}\r\n                                            oldActionRequired={false}\r\n                                            hasDynamicColSize={true}\r\n                                            actionIcons={\r\n                                                // <>\r\n                                                //     <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                //         <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                //             hidden={this.props.userRoleControlRights.indexOf(iniviteParticipantsId) === -1}\r\n                                                //             data-tip={this.props.intl.formatMessage({ id: \"IDS_INVITE\" })}\r\n                                                //             data-for=\"tooltip_list_wrap\"\r\n                                                //             onClick={() => this.oninviteListClick()}\r\n\r\n                                                //         >\r\n                                                //             <FontAwesomeIcon icon={faUserPlus} /> { }\r\n\r\n                                                //         </Nav.Link>\r\n\r\n\r\n                                                //         {/* </div>\r\n                                                //         </Col>\r\n                                                //     </Row> */}\r\n\r\n                                                //         <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                //             hidden={this.props.userRoleControlRights.indexOf(cancelParticipantsId) === -1}\r\n                                                //             data-tip={this.props.intl.formatMessage({ id: \"IDS_TRAININGSCHEDULECANCEL\" })}\r\n                                                //             data-for=\"tooltip_list_wrap\"\r\n                                                //             onClick={() => this.onCancelListClick()}\r\n                                                //         >\r\n                                                //             <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n\r\n                                                //         </Nav.Link>\r\n\r\n                                                //     </ProductList>\r\n\r\n                                                // </>\r\n                                                [\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_INVITE\" }),\r\n                                                        controlname: \"faUserPlus\",\r\n                                                        objectName: \"mastertoedit\",\r\n                                                        hidden: this.props.userRoleControlRights.indexOf(iniviteParticipantsId) === -1,\r\n                                                        onClick: this.oninviteListClick,\r\n                                                        inputData: {}\r\n                                                    },{\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_TRAININGSCHEDULECANCEL\" }),\r\n                                                        controlname: \"reject\",\r\n                                                        objectName: \"mastertoedit\",\r\n                                                        hidden: this.props.userRoleControlRights.indexOf(cancelParticipantsId) === -1,\r\n                                                        onClick: this.onCancelListClick,\r\n                                                        inputData: {}\r\n                                                    }\r\n                                                ]\r\n                                            }\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n\r\n                            </Card.Body>\r\n\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.openChildModal &&\r\n                    <SlideOutModal show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        updateStore={this.props.updateStore}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.loadEsign ?\r\n\r\n\r\n                            <Esign operation={this.props.operation}\r\n                                formatMessage={this.props.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            <AddParticipants\r\n\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                handleChange={this.handleChange}\r\n                                formatMessage={this.props.formatMessage}\r\n                                section={this.props.Login.section || []}\r\n                                sectionUsers={this.props.Login.sectionUsers || []}\r\n\r\n                                nusercode={this.props.Login.nusercode || []}\r\n                                nsectioncode={this.props.Login.nsectioncode || []}\r\n                                selectedTrainingParticipants={this.props.masterData.SelectedTrainingParticipants || {}}\r\n                                extractedColumnList={this.extractedColumnList}\r\n                            />\r\n\r\n                        }\r\n\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.props });\r\n    }\r\n    detailBand = (props) => {\r\n\r\n        const Dataitem = props.dataItem\r\n        const OptionalFieldList = [\r\n            { datafield: \"ssectionname\", Column: \"Section Name\" },\r\n            { datafield: \"sfullname\", Column: \"Participants Details\" },\r\n\r\n        ];\r\n        return (<Row>\r\n            {OptionalFieldList.map((fields) => {\r\n                return (\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <FormLabel><FormattedMessage id={fields.Column} message={fields.Column} /></FormLabel>\r\n                            <MediaLabel className=\"readonly-text font-weight-normal\">{Dataitem[fields.datafield]}</MediaLabel>\r\n                        </FormGroup>\r\n                    </Col>\r\n                )\r\n            })\r\n            }\r\n        </Row>)\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\" || this.props.operation === \"cancel\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    getTabContent = (event) => {\r\n        this.setState({ activeTab: event.currentTarget.name });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        if (fieldName === \"ndeputyusersitecode\") {\r\n            this.state.deputyUserList.map(item => {\r\n                if (item.nusersitecode === comboData.value) {\r\n                    selectedRecord[\"sdeputyname\"] = item.sfirstname + \" \" + item.slastname\r\n                }\r\n                return null;\r\n            })\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleChange = (value, valueParam, isSection) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[valueParam] = value;\r\n            const SelectedTrainingCertificate = this.props.masterData.SelectedTrainingCertificate.ntrainingcode || {};\r\n\r\n            if (isSection === \"Section\") {\r\n                this.props.getSectionUsersDataService(value.value, selectedRecord, this.props.Login.userInfo, SelectedTrainingCertificate);\r\n\r\n                selectedRecord[\"nusercode\"] = undefined;\r\n\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else {\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n            }\r\n\r\n            let isOpen = false;\r\n            if (this.props.errorCode !== undefined && (this.state.operation === \"create\" || this.state.operation === \"update\")) {\r\n                isOpen = true;\r\n            }\r\n            this.setState({ isOpen, activeTab: 'TrainingParticipants-tab', dataState });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        //add / edit  \r\n        let inputParam = {};\r\n\r\n        if (this.props.screenName === \"IDS_PARTICIPANTSDETAILS\") {\r\n            inputParam = this.saveParticipantDetails(saveType, formRef);\r\n        }\r\n\r\n\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n\r\n    saveParticipantDetails(saveType, formRef) {\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n\r\n        let selectedId = null;\r\n\r\n        let trainingparticipants = [];\r\n\r\n\r\n        this.props.selectedRecord.nusercode && this.props.selectedRecord.nusercode.map(participants => {\r\n            trainingparticipants.push({\r\n                ntrainingcode: this.props.masterData.SelectedTrainingCertificate.ntrainingcode,\r\n                nusercode: participants.item.nusercode\r\n            })\r\n\r\n        })\r\n\r\n\r\n\r\n        inputData[\"trainingparticipants\"] = trainingparticipants\r\n\r\n\r\n\r\n\r\n        const inputParam = {\r\n            classUrl: \"trainingcertificate\",\r\n            methodUrl: \"TrainingParticipants\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.operation, saveType, formRef, dataState\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n\r\n    oninviteListClick = (row) => {\r\n\r\n        if (this.props.masterData.TrainingParticipants.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: this.props.masterData.TrainingParticipants.stranstatus }));\r\n        }\r\n        else {\r\n            const ncontrolCode = this.props.controlMap.has(\"SendinvitationTrainingCertificate\") && this.props.controlMap.get(\"SendinvitationTrainingCertificate\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"trainingparticipants\"] = {\r\n                \"nparticipantcode\": row.nparticipantcode\r\n            };\r\n            inputData[\"trainingparticipants\"][\"ntrainingcode\"] = this.props.Login.masterData.TrainingParticipants[0].ntrainingcode;\r\n            // inputData[\"trainingparticipants\"] = this.props.Login.masterData.TrainingParticipants;\r\n            postParam = { inputListName: \"TrainingParticipants\", selectedObject: \"TrainingParticipants\", primaryKeyField: \"nparticipantcode\" };\r\n            const inputParam = {\r\n                classUrl: 'trainingcertificate',\r\n                methodUrl: \"TrainingParticipants\",\r\n                inputData: inputData,\r\n                operation: \"invite\", postParam,\r\n                selectedId: row.nparticipantcode\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n\r\n\r\n\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"invite\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    onCancelListClick = (row) => {\r\n        //if (this.props.Login.masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.DRAFT) {\r\n        const ncontrolCode = this.props.controlMap.has(\"CancelTrainingCertificate\") && this.props.controlMap.get(\"CancelTrainingCertificate\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //add               \r\n        let postParam = undefined;\r\n        inputData[\"trainingparticipants\"] = { \"nparticipantcode\": row.nparticipantcode };\r\n        inputData[\"trainingparticipants\"][\"ntrainingcode\"] = this.props.Login.masterData.TrainingParticipants[0].ntrainingcode;\r\n\r\n        postParam = { inputListName: \"TrainingParticipants\", selectedObject: \"TrainingParticipants\", primaryKeyField: \"nparticipantcode\" };\r\n\r\n\r\n        const inputParam = {\r\n            classUrl: 'trainingcertificate',\r\n            methodUrl: \"TrainingParticipants\",\r\n            inputData: inputData,\r\n            operation: \"cancel\", postParam,\r\n            selectedId: row.nparticipantcode\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"cancel\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    detailedFieldList = [\r\n        { dataField: \"ssectionname\", idsName: \"IDS_SECTIONNAME\", columnSize: \"4\" },\r\n        { dataField: \"sfullname\", idsName: \"IDS_PARTICIPANTS\", columnSize: \"4\" },\r\n        // { dataField: \"sfaxno\", idsName: \"IDS_FAXNO\", columnSize:\"4\" },\r\n        // //{ dataField: \"sdisplaystatus\", idsName: \"IDS_DISPLAYSTATUS\" },\r\n        //{ \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"20%\", \"isIdsField\": true, \"controlName\": \"ndefaultstatus\" }\r\n\r\n    ];\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, crudMaster, getTrainingParticipantsComboDataService, getSectionUsersDataService, updateStore, validateEsignCredential })(injectIntl(TrainingCertificateParticipantsTab));\r\n\r\n"]},"metadata":{},"sourceType":"module"}