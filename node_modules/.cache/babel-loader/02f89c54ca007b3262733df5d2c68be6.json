{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\nexport function getsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: String(inputData.sample[0].napprovalversioncode),\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalSubSample\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          selectedSample: inputData.selectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.selectedTest;\n        inputData.masterData.selectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.selectedTest ? responseData.selectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n\n        if (inputData.masterData.AP_TEST.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        } // let wholeApprovalParameter = [];\n\n\n        let ApprovalParameter = []; // let wholeResultUsedInstrument = [];\n\n        let ResultUsedInstrument = []; // let wholeResultUsedTasks = [];\n\n        let ResultUsedTasks = []; // let wholeRegistrationTestAttachment = [];\n\n        let RegistrationTestAttachment = []; // let wholeApprovalResultChangeHistory = [];\n\n        let ApprovalResultChangeHistory = []; // let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let ApprovalHistory = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          masterData = { ...masterData,\n            selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.ResultUsedInstrument || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ApprovalResultChangeHistory || [];\n              list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              dbData = response.data.ApprovalHistory || [];\n              list = [...inputData.masterData.ApprovalHistory, ...dbData];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              list = response.data.ApprovalParameter || [];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument || [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks || [];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ApprovalResultChangeHistory || [];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              list = response.data.ApprovalHistory || [];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          ApprovalParameter,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeApprovalResultChangeHistory,\n          ApprovalResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment,\n          ApprovalHistory\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      } // let wholeApprovalParameter = [];\n\n\n      let ApprovalParameter = []; // let wholeResultUsedInstrument = [];\n\n      let ResultUsedInstrument = []; // let wholeResultUsedTasks = [];\n\n      let ResultUsedTasks = []; // let wholeRegistrationTestAttachment = [];\n\n      let RegistrationTestAttachment = []; // let wholeApprovalResultChangeHistory = [];\n\n      let ApprovalResultChangeHistory = []; // let wholeRegistrationTestComments = [];\n\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let selectedSample = inputData.selectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        let selectedSubSample = inputData.masterData.AP_SUBSAMPLE;\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          selectedSample,\n          selectedPreregno,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\n          selectedSample: inputData.selectedSample,\n          selectedSubSample: inputData.masterData.AP_SUBSAMPLE\n        };\n        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          // ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\"); // wholeApprovalParameter = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeApprovalParameter,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\"); // wholeResultUsedInstrument = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeResultUsedInstrument,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\"); // wholeResultUsedTasks = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeResultUsedTasks,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\"); // wholeRegistrationTestAttachment = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeRegistrationTestAttachment,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\"); // wholeApprovalResultChangeHistory = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeApprovalResultChangeHistory,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\"); // wholeRegistrationTestComments = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeRegistrationTestComments,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\"); // wholeRegistrationTestComments = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeApprovalParameter,\n            //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\n\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              // wholeApprovalParameter,\n              ApprovalParameter,\n              // wholeResultUsedInstrument,\n              ResultUsedInstrument,\n              // wholeResultUsedTasks,\n              ResultUsedTasks,\n              // wholeRegistrationTestAttachment,\n              RegistrationTestAttachment,\n              // wholeApprovalResultChangeHistory,\n              ApprovalResultChangeHistory,\n              // wholeRegistrationTestComments,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 3,\n      nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalTest\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      inputData.searchTestRef.current.null = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            selectedSubSample: inputData.selectedSubSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode\n          },\n          loading: false,\n          showFilter: false,\n          activeTestTab: inputData.activeTestTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedTest: inputData.selectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(\"Please Select a Sample\");\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      }; // dispatch({type: DEFAULT_RETURN, payload:{\n      // masterData:{\n      //     ...inputParam.inputData.masterData,\n      //     ...response.data, \n      //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\n      //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\n      // },\n      //     loading:false ,\n      //     loadEsign:false,\n      //     openChildModal:false                     \n      // }}) \n\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\n      //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(\"Please Select All the Values in Filter\");\n    }\n  };\n}\nexport function getApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterEdit(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\n      userinfo: inputParam.userInfo\n    };\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getEditParameter\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...responseData,\n            loading: false,\n            openChildModal: true,\n            operation: \"update\",\n            screenName: \"IDS_APPROVALPARAMETER\" // ncontrolCode:inputParam.ncontrolCode,\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTTEST\"\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        if (inputParam.operation === 'dynamic') {\n          const methodUrl = \"performaction\";\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n        } else if (inputParam.operation === 'reportgeneration') {\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']));\n        } else if (inputParam.operation === 'decision') {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function previewSampleReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let ndecisionStatus = inputParam.sample.ndecisionstatus;\n\n    if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\n      ndecisionStatus = transactionStatus.PASS;\n    }\n\n    const inputData = {\n      ndecisionstatus: ndecisionStatus,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n      nreporttypecode: REPORTTYPE.SAMPLEREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.sample.nregtypecode,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      npreregno: inputParam.sample.npreregno\n    };\n    rsapi.post(\"approval/previewSampleReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCOAReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getEnforceCommentsHistory\", {\n      ntransactionresultcode: selectedParam.ntransactionresultcode,\n      userinfo: userInfo\n    }).then(response => {\n      if (response.data.length > 0) {\n        masterData = { ...masterData,\n          enforceCommentsHistory: response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData,\n            openChildModal: true,\n            operation: \"view\",\n            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ApprovalAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","postCRUDOrganiseTransSearch","REPORTTYPE","reportCOAType","transactionStatus","getsubSampleDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","String","sample","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","activeName","dataStateName","post","then","response","responseData","data","selectedSample","oldSelectedTest","masterData","selectedTest","length","AP_TEST","childTabsKey","checkBoxOperation","removeElementFromArray","selectedPreregno","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","RegistrationTestComment","ApprovalHistory","wholeTestList","map","b","ntransactiontestcode","test","index","includes","splice","keepOld","list","dbData","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","catch","error","status","message","warn","TestSelected","isGrandChildGetRequired","toString","selectedSubSample","AP_SUBSAMPLE","getTestChildTabDetail","getTestDetail","ntransactionsamplecode","null","selectedSampleCode","url","selectedTestCode","screenName","getSampleChildTabDetail","performAction","inputParam","AP_SAMPLE","updatedSample","updatedSubSample","updatedTest","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","updateDecision","getRegistrationType","SampleTypeValue","getRegistrationSubType","RegTypeValue","getFilterStatus","RegSubTypeValue","getFilterBasedTest","rtn","getApprovalVersion","getApprovalSample","searchSampleRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getParameterEdit","item","join","multilingualMsg","validateEsignforApproval","methodUrl","toLowerCase","generateCOAReport","previewSampleReport","ndecisionStatus","ndecisionstatus","DRAFT","PASS","nprimarykey","ncoareporttypecode","SAMPLECERTIFICATEPRIVIEW","nreporttypecode","SAMPLEREPORT","sprimarykeyname","ncontrolcode","document","getElementById","setAttribute","filepath","click","SAMPLEWISE","COAREPORT","getEnforceCommentsHistory","selectedParam","enforceCommentsHistory"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: String(inputData.sample[0].napprovalversioncode),\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalSubSample\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, selectedSample: inputData.selectedSample }\r\n                    responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.selectedTest\r\n                    inputData.masterData.selectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.selectedTest ? responseData.selectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\r\n                        selectedSample: inputData.selectedSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    if (inputData.masterData.AP_TEST.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    // let wholeApprovalParameter = [];\r\n                    let ApprovalParameter = [];\r\n                    // let wholeResultUsedInstrument = [];\r\n                    let ResultUsedInstrument = [];\r\n                    // let wholeResultUsedTasks = [];\r\n                    let ResultUsedTasks = [];\r\n                    // let wholeRegistrationTestAttachment = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    // let wholeApprovalResultChangeHistory = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    // let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n\r\n\r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.ResultUsedInstrument || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ApprovalResultChangeHistory || []\r\n                                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                dbData = response.data.ApprovalHistory || []\r\n                                list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.ApprovalParameter || []\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument || []\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks || []\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ApprovalResultChangeHistory || []\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                list = response.data.ApprovalHistory || []\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        ApprovalParameter,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeApprovalResultChangeHistory,\r\n                        ApprovalResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            // let wholeApprovalParameter = [];\r\n            let ApprovalParameter = [];\r\n            // let wholeResultUsedInstrument = [];\r\n            let ResultUsedInstrument = [];\r\n            // let wholeResultUsedTasks = [];\r\n            let ResultUsedTasks = [];\r\n            // let wholeRegistrationTestAttachment = [];\r\n            let RegistrationTestAttachment = [];\r\n            // let wholeApprovalResultChangeHistory = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            // let wholeRegistrationTestComments = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let selectedSample = inputData.selectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let selectedSubSample = inputData.masterData.AP_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, selectedSample, selectedPreregno, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedSubSample: inputData.masterData.AP_SUBSAMPLE\r\n                }\r\n                let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    // ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                    ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    case \"IDS_RESULTS\":\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeApprovalParameter = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeApprovalParameter,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                    case \"IDS_INSTRUMENT\":\r\n                        ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeResultUsedInstrument = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeResultUsedInstrument,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                    case \"IDS_TASK\":\r\n                        ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeResultUsedTasks = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeResultUsedTasks,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeRegistrationTestAttachment = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeRegistrationTestAttachment,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                    case \"IDS_RESULTCHANGEHISTORY\":\r\n                        ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeApprovalResultChangeHistory = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeApprovalResultChangeHistory,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeRegistrationTestComments = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeRegistrationTestComments,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                    case \"IDS_TESTAPPROVALHISTORY\":\r\n                        ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    default:\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        // wholeRegistrationTestComments = filterRecordBasedOnPrimaryKeyName(inputData.masterData.wholeApprovalParameter,\r\n                        //     inputData.removeElementFromArray.length > 0 ? inputData.removeElementFromArray[0].npreregno : \"\", \"npreregno\");\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // wholeApprovalParameter,\r\n                            ApprovalParameter,\r\n                            // wholeResultUsedInstrument,\r\n                            ResultUsedInstrument,\r\n                            // wholeResultUsedTasks,\r\n                            ResultUsedTasks,\r\n                            // wholeRegistrationTestAttachment,\r\n                            RegistrationTestAttachment,\r\n                            // wholeApprovalResultChangeHistory,\r\n                            ApprovalResultChangeHistory,\r\n                            // wholeRegistrationTestComments,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function getTestDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 3,\r\n            nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalTest\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                inputData.searchTestRef.current.null = \"\"\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            selectedSubSample: inputData.selectedSubSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSampleCode: inputData.ntransactionsamplecode\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n                }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\r\n                //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\r\n                //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterBasedTest(inputData) {\r\n\r\n    \r\n    return function (dispatch) {\r\n    if(inputData.napprovalversioncode)\r\n    {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getFilterBasedTest\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n                if(response.data.rtn)\r\n                {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n        else\r\n        {\r\n               toast.warn(\"Please Select All the Values in Filter\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: {...inputParam.resultDataState,sort:undefined,filter:undefined},\r\n                        instrumentDataState: {...inputParam.instrumentDataState,sort:undefined,filter:undefined},\r\n                        materialDataState: {...inputParam.materialDataState,sort:undefined,filter:undefined},\r\n                        taskDataState: {...inputParam.taskDataState,sort:undefined,filter:undefined},\r\n                        documentDataState: {...inputParam.documentDataState,sort:undefined,filter:undefined},\r\n                        resultChangeDataState: {...inputParam.resultChangeDataState,sort:undefined,filter:undefined},\r\n                        testCommentDataState:{...inputParam.testCommentDataState,sort:undefined,filter:undefined},\r\n                        historyDataState: {...inputParam.historyDataState,sort:undefined,filter:undefined},\r\n                        samplePrintHistoryDataState: {...inputParam.samplePrintHistoryDataState,sort:undefined,filter:undefined},\r\n                        sampleHistoryDataState: {...inputParam.sampleHistoryDataState,sort:undefined,filter:undefined}\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getParameterEdit(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getEditParameter\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"update\",\r\n                            screenName: \"IDS_APPROVALPARAMETER\"\r\n                            // ncontrolCode:inputParam.ncontrolCode,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTTEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function validateEsignforApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    if (inputParam.operation === 'dynamic') {\r\n                        const methodUrl = \"performaction\"\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                        }\r\n                        dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    } else if (inputParam.operation === 'reportgeneration') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']))\r\n                    }\r\n                    else if (inputParam.operation === 'decision') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function previewSampleReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        let ndecisionStatus = inputParam.sample.ndecisionstatus;\r\n        if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\r\n            ndecisionStatus = transactionStatus.PASS;\r\n        }\r\n        const inputData = {\r\n            ndecisionstatus: ndecisionStatus,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n            nreporttypecode: REPORTTYPE.SAMPLEREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.sample.nregtypecode,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            npreregno: inputParam.sample.npreregno\r\n        }\r\n        rsapi.post(\"approval/previewSampleReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateCOAReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getEnforceCommentsHistory\", {\r\n            ntransactionresultcode: selectedParam.ntransactionresultcode,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    masterData = { ...masterData, enforceCommentsHistory: response.data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData,\r\n                            openChildModal: true,\r\n                            operation: \"view\",\r\n                            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\r\n                        }\r\n                    })\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\" } })\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}