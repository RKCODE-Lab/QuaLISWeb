{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { tableNodes } from 'prosemirror-tables';\nvar hole = 0;\nvar blockquoteDOM = ['blockquote', hole],\n    hrDOM = ['hr'],\n    preDOM = ['pre', ['code', hole]];\nvar olDOM = ['ol', 0],\n    ulDOM = ['ul', 0],\n    liDOM = ['li', 0];\n\nvar getAttributes = function (dom) {\n  var result = {};\n  var attributes = dom.attributes,\n      attr;\n\n  for (var i = 0; i < attributes.length; i++) {\n    attr = attributes[i];\n    result[attr.name] = attr.value;\n  }\n\n  return result;\n};\n\nvar commonAttributes = function () {\n  return {\n    style: {\n      default: null\n    },\n    class: {\n      default: null\n    },\n    id: {\n      default: null\n    }\n  };\n};\n\nvar hasAttrs = function (attrs, exclude) {\n  for (var attr in attrs) {\n    if (attr && attrs[attr] !== null && attr !== exclude) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar getAttrs = function (attrs, exclude) {\n  var result = {};\n\n  for (var attr in attrs) {\n    if (attr && attrs[attr] !== null && attr !== exclude) {\n      result[attr] = attrs[attr];\n    }\n  }\n\n  return result;\n};\n\nvar tagMark = function (tag) {\n  var _a;\n\n  return _a = {}, _a[tag] = {\n    name: tag,\n    inclusive: true,\n    parseDOM: [{\n      tag: tag\n    }],\n    toDOM: function () {\n      return [tag, hole];\n    }\n  }, _a;\n};\n\nvar marks = tslib_1.__assign({\n  // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n  // defaults to the empty string. Rendered and parsed as an `<a>`\n  // element.\n  link: {\n    attrs: tslib_1.__assign({}, commonAttributes(), {\n      href: {\n        default: null\n      },\n      target: {\n        default: null\n      },\n      title: {\n        default: null\n      }\n    }),\n    inclusive: false,\n    parseDOM: [{\n      tag: 'a',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return ['a', getAttrs(node.attrs), hole];\n    }\n  }\n}, tagMark('strong'), tagMark('b'), tagMark('em'), tagMark('i'), tagMark('u'), tagMark('del'), tagMark('sub'), tagMark('sup'), tagMark('code'), {\n  style: {\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    parseDOM: [{\n      tag: 'span',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['span', getAttrs(node.attrs), hole] : ['span', hole];\n    }\n  }\n});\n\nvar nodes = tslib_1.__assign({\n  // :: NodeSpec The top level document node.\n  doc: {\n    content: 'block+'\n  },\n  // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n  // as a `<p>` element.\n  paragraph: {\n    content: 'inline*',\n    group: 'block',\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    parseDOM: [{\n      tag: 'p',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['p', getAttrs(node.attrs), hole] : ['p', hole];\n    }\n  },\n  div: {\n    // Uncaught SyntaxError: Mixing inline and block content (in content expression '(block | inline)*')\n    // content: '(block | inline)*',\n    content: 'block*',\n    group: 'block',\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    parseDOM: [{\n      tag: 'div',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['div', getAttrs(node.attrs), hole] : ['div', hole];\n    }\n  },\n  // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n  blockquote: {\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    content: 'block+',\n    group: 'block',\n    defining: true,\n    parseDOM: [{\n      tag: 'blockquote',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['blockquote', getAttrs(node.attrs), hole] : blockquoteDOM;\n    }\n  },\n  // :: NodeSpec A horizontal rule (`<hr>`).\n  horizontal_rule: {\n    group: 'block',\n    parseDOM: [{\n      tag: 'hr'\n    }],\n    toDOM: function () {\n      return hrDOM;\n    }\n  },\n  // :: NodeSpec A heading textblock, with a `level` attribute that\n  // has to hold the numbers from 1 to 6. Parsed and serialized as `<h1>` to\n  // `<h6>` elements.\n  heading: {\n    attrs: tslib_1.__assign({}, commonAttributes(), {\n      level: {\n        default: 1\n      }\n    }),\n    content: 'inline*',\n    group: 'block',\n    defining: true,\n    parseDOM: [{\n      tag: 'h1',\n      getAttrs: function (node) {\n        return tslib_1.__assign({}, getAttributes(node), {\n          level: 1\n        });\n      }\n    }, {\n      tag: 'h2',\n      getAttrs: function (node) {\n        return tslib_1.__assign({}, getAttributes(node), {\n          level: 2\n        });\n      }\n    }, {\n      tag: 'h3',\n      getAttrs: function (node) {\n        return tslib_1.__assign({}, getAttributes(node), {\n          level: 3\n        });\n      }\n    }, {\n      tag: 'h4',\n      getAttrs: function (node) {\n        return tslib_1.__assign({}, getAttributes(node), {\n          level: 4\n        });\n      }\n    }, {\n      tag: 'h5',\n      getAttrs: function (node) {\n        return tslib_1.__assign({}, getAttributes(node), {\n          level: 5\n        });\n      }\n    }, {\n      tag: 'h6',\n      getAttrs: function (node) {\n        return tslib_1.__assign({}, getAttributes(node), {\n          level: 6\n        });\n      }\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs, 'level') ? ['h' + node.attrs.level, getAttrs(node.attrs, 'level'), hole] : ['h' + node.attrs.level, hole];\n    }\n  },\n  // :: NodeSpec A code listing. Disallows marks or non-text inline\n  // nodes by default. Represented as a `<pre>` element with a\n  // `<code>` element inside it.\n  code_block: {\n    content: 'text*',\n    marks: '',\n    group: 'block',\n    code: true,\n    defining: true,\n    parseDOM: [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }],\n    toDOM: function () {\n      return preDOM;\n    }\n  },\n  // :: NodeSpec The text node.\n  text: {\n    inline: true,\n    group: 'inline'\n  },\n  // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n  // `alt`, and `href` attributes. The latter two default to an empty\n  // string.\n  image: {\n    inline: true,\n    attrs: tslib_1.__assign({\n      src: {\n        default: null\n      },\n      alt: {\n        default: null\n      },\n      title: {\n        default: null\n      },\n      width: {\n        default: null\n      },\n      height: {\n        default: null\n      }\n    }, commonAttributes()),\n    group: 'inline',\n    draggable: true,\n    parseDOM: [{\n      tag: 'img',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['img', getAttrs(node.attrs)] : ['img'];\n    }\n  },\n  // :: NodeSpec A hard line break represented in the DOM as a `<br>` element.\n  hard_break: {\n    inline: true,\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    group: 'inline',\n    selectable: false,\n    parseDOM: [{\n      tag: 'br',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['br', getAttrs(node.attrs)] : ['br'];\n    }\n  },\n  // :: NodeSpec\n  // An ordered list [node spec](#model.NodeSpec). Has a single\n  // attribute, `order`, which determines the number at which the list\n  // starts counting, and defaults to 1. Represented as an `<ol>`\n  // element.\n  ordered_list: {\n    content: 'list_item+',\n    group: 'block',\n    attrs: tslib_1.__assign({}, commonAttributes(), {\n      type: {\n        default: null\n      },\n      order: {\n        default: 1\n      }\n    }),\n    parseDOM: [{\n      tag: 'ol',\n      getAttrs: function (dom) {\n        return tslib_1.__assign({}, getAttributes(dom), {\n          order: dom.hasAttribute('start') ? parseInt(dom.getAttribute('start') || '1', 10) : 1\n        });\n      }\n    }],\n    toDOM: function (node) {\n      return node.attrs.order === 1 ? hasAttrs(node.attrs, 'order') ? ['ol', getAttrs(node.attrs, 'order'), hole] : olDOM : ['ol', tslib_1.__assign({}, getAttrs(node.attrs, 'order'), {\n        start: node.attrs.order\n      }), hole];\n    }\n  },\n  // :: NodeSpec\n  // A bullet list node specification represented in the DOM as a `<ul>` element.\n  bullet_list: {\n    content: 'list_item+',\n    group: 'block',\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    parseDOM: [{\n      tag: 'ul',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['ul', getAttrs(node.attrs), hole] : ulDOM;\n    }\n  },\n  // :: NodeSpec\n  // A list item (`<li>`) specification.\n  list_item: {\n    content: '(paragraph | heading) block*',\n    attrs: tslib_1.__assign({}, commonAttributes()),\n    parseDOM: [{\n      tag: 'li',\n      getAttrs: getAttributes\n    }],\n    toDOM: function (node) {\n      return hasAttrs(node.attrs) ? ['li', getAttrs(node.attrs), hole] : liDOM;\n    },\n    defining: true\n  }\n}, tableNodes({\n  tableGroup: 'block',\n  cellContent: 'block+',\n  cellAttributes: {}\n}));\n\nexport { nodes, marks };","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@progress/kendo-editor-common/dist/es/config/schema.js"],"names":["tslib_1","tableNodes","hole","blockquoteDOM","hrDOM","preDOM","olDOM","ulDOM","liDOM","getAttributes","dom","result","attributes","attr","i","length","name","value","commonAttributes","style","default","class","id","hasAttrs","attrs","exclude","getAttrs","tagMark","tag","_a","inclusive","parseDOM","toDOM","marks","__assign","link","href","target","title","node","nodes","doc","content","paragraph","group","div","blockquote","defining","horizontal_rule","heading","level","code_block","code","preserveWhitespace","text","inline","image","src","alt","width","height","draggable","hard_break","selectable","ordered_list","type","order","hasAttribute","parseInt","getAttribute","start","bullet_list","list_item","tableGroup","cellContent","cellAttributes"],"mappings":"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","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { tableNodes } from 'prosemirror-tables';\nvar hole = 0;\nvar blockquoteDOM = ['blockquote', hole], hrDOM = ['hr'], preDOM = ['pre', ['code', hole]];\nvar olDOM = ['ol', 0], ulDOM = ['ul', 0], liDOM = ['li', 0];\nvar getAttributes = function (dom) {\n    var result = {};\n    var attributes = dom.attributes, attr;\n    for (var i = 0; i < attributes.length; i++) {\n        attr = attributes[i];\n        result[attr.name] = attr.value;\n    }\n    return result;\n};\nvar commonAttributes = function () {\n    return {\n        style: { default: null },\n        class: { default: null },\n        id: { default: null }\n    };\n};\nvar hasAttrs = function (attrs, exclude) {\n    for (var attr in attrs) {\n        if (attr && attrs[attr] !== null && attr !== exclude) {\n            return true;\n        }\n    }\n    return false;\n};\nvar getAttrs = function (attrs, exclude) {\n    var result = {};\n    for (var attr in attrs) {\n        if (attr && attrs[attr] !== null && attr !== exclude) {\n            result[attr] = attrs[attr];\n        }\n    }\n    return result;\n};\nvar tagMark = function (tag) {\n    var _a;\n    return _a = {},\n        _a[tag] = {\n            name: tag,\n            inclusive: true,\n            parseDOM: [{ tag: tag }],\n            toDOM: function () { return [tag, hole]; }\n        },\n        _a;\n};\nvar marks = tslib_1.__assign({ \n    // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n    // defaults to the empty string. Rendered and parsed as an `<a>`\n    // element.\n    link: {\n        attrs: tslib_1.__assign({}, commonAttributes(), { href: { default: null }, target: { default: null }, title: { default: null } }),\n        inclusive: false,\n        parseDOM: [{ tag: 'a', getAttrs: getAttributes }],\n        toDOM: function (node) { return ['a', getAttrs(node.attrs), hole]; }\n    } }, tagMark('strong'), tagMark('b'), tagMark('em'), tagMark('i'), tagMark('u'), tagMark('del'), tagMark('sub'), tagMark('sup'), tagMark('code'), { style: {\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        parseDOM: [{\n                tag: 'span',\n                getAttrs: getAttributes\n            }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ?\n            ['span', getAttrs(node.attrs), hole] : ['span', hole]; }\n    } });\nvar nodes = tslib_1.__assign({ \n    // :: NodeSpec The top level document node.\n    doc: {\n        content: 'block+'\n    }, \n    // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n    // as a `<p>` element.\n    paragraph: {\n        content: 'inline*',\n        group: 'block',\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        parseDOM: [{\n                tag: 'p',\n                getAttrs: getAttributes\n            }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['p', getAttrs(node.attrs), hole] : ['p', hole]; }\n    }, div: {\n        // Uncaught SyntaxError: Mixing inline and block content (in content expression '(block | inline)*')\n        // content: '(block | inline)*',\n        content: 'block*',\n        group: 'block',\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        parseDOM: [{\n                tag: 'div',\n                getAttrs: getAttributes\n            }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['div', getAttrs(node.attrs), hole] : ['div', hole]; }\n    }, \n    // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n    blockquote: {\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        content: 'block+',\n        group: 'block',\n        defining: true,\n        parseDOM: [{\n                tag: 'blockquote',\n                getAttrs: getAttributes\n            }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['blockquote', getAttrs(node.attrs), hole] : blockquoteDOM; }\n    }, \n    // :: NodeSpec A horizontal rule (`<hr>`).\n    horizontal_rule: {\n        group: 'block',\n        parseDOM: [{ tag: 'hr' }],\n        toDOM: function () { return hrDOM; }\n    }, \n    // :: NodeSpec A heading textblock, with a `level` attribute that\n    // has to hold the numbers from 1 to 6. Parsed and serialized as `<h1>` to\n    // `<h6>` elements.\n    heading: {\n        attrs: tslib_1.__assign({}, commonAttributes(), { level: { default: 1 } }),\n        content: 'inline*',\n        group: 'block',\n        defining: true,\n        parseDOM: [\n            { tag: 'h1', getAttrs: function (node) { return (tslib_1.__assign({}, getAttributes(node), { level: 1 })); } },\n            { tag: 'h2', getAttrs: function (node) { return (tslib_1.__assign({}, getAttributes(node), { level: 2 })); } },\n            { tag: 'h3', getAttrs: function (node) { return (tslib_1.__assign({}, getAttributes(node), { level: 3 })); } },\n            { tag: 'h4', getAttrs: function (node) { return (tslib_1.__assign({}, getAttributes(node), { level: 4 })); } },\n            { tag: 'h5', getAttrs: function (node) { return (tslib_1.__assign({}, getAttributes(node), { level: 5 })); } },\n            { tag: 'h6', getAttrs: function (node) { return (tslib_1.__assign({}, getAttributes(node), { level: 6 })); } }\n        ],\n        toDOM: function (node) { return hasAttrs(node.attrs, 'level') ?\n            ['h' + node.attrs.level, getAttrs(node.attrs, 'level'), hole] :\n            ['h' + node.attrs.level, hole]; }\n    }, \n    // :: NodeSpec A code listing. Disallows marks or non-text inline\n    // nodes by default. Represented as a `<pre>` element with a\n    // `<code>` element inside it.\n    code_block: {\n        content: 'text*',\n        marks: '',\n        group: 'block',\n        code: true,\n        defining: true,\n        parseDOM: [{ tag: 'pre', preserveWhitespace: 'full' }],\n        toDOM: function () { return preDOM; }\n    }, \n    // :: NodeSpec The text node.\n    text: {\n        inline: true,\n        group: 'inline'\n    }, \n    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n    // `alt`, and `href` attributes. The latter two default to an empty\n    // string.\n    image: {\n        inline: true,\n        attrs: tslib_1.__assign({ src: { default: null }, alt: { default: null }, title: { default: null }, width: { default: null }, height: { default: null } }, commonAttributes()),\n        group: 'inline',\n        draggable: true,\n        parseDOM: [{ tag: 'img', getAttrs: getAttributes }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['img', getAttrs(node.attrs)] : ['img']; }\n    }, \n    // :: NodeSpec A hard line break represented in the DOM as a `<br>` element.\n    hard_break: {\n        inline: true,\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        group: 'inline',\n        selectable: false,\n        parseDOM: [{\n                tag: 'br',\n                getAttrs: getAttributes\n            }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['br', getAttrs(node.attrs)] : ['br']; }\n    }, \n    // :: NodeSpec\n    // An ordered list [node spec](#model.NodeSpec). Has a single\n    // attribute, `order`, which determines the number at which the list\n    // starts counting, and defaults to 1. Represented as an `<ol>`\n    // element.\n    ordered_list: {\n        content: 'list_item+',\n        group: 'block',\n        attrs: tslib_1.__assign({}, commonAttributes(), { type: { default: null }, order: { default: 1 } }),\n        parseDOM: [{ tag: 'ol', getAttrs: function (dom) {\n                    return tslib_1.__assign({}, getAttributes(dom), { order: dom.hasAttribute('start') ? parseInt(dom.getAttribute('start') || '1', 10) : 1 });\n                } }],\n        toDOM: function (node) {\n            return node.attrs.order === 1 ?\n                (hasAttrs(node.attrs, 'order') ? ['ol', getAttrs(node.attrs, 'order'), hole] : olDOM) :\n                ['ol', tslib_1.__assign({}, getAttrs(node.attrs, 'order'), { start: node.attrs.order }), hole];\n        }\n    }, \n    // :: NodeSpec\n    // A bullet list node specification represented in the DOM as a `<ul>` element.\n    bullet_list: {\n        content: 'list_item+',\n        group: 'block',\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        parseDOM: [{ tag: 'ul', getAttrs: getAttributes }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['ul', getAttrs(node.attrs), hole] : ulDOM; }\n    }, \n    // :: NodeSpec\n    // A list item (`<li>`) specification.\n    list_item: {\n        content: '(paragraph | heading) block*',\n        attrs: tslib_1.__assign({}, commonAttributes()),\n        parseDOM: [{ tag: 'li', getAttrs: getAttributes }],\n        toDOM: function (node) { return hasAttrs(node.attrs) ? ['li', getAttrs(node.attrs), hole] : liDOM; },\n        defining: true\n    } }, tableNodes({ tableGroup: 'block', cellContent: 'block+', cellAttributes: {} }));\nexport { nodes, marks };\n"]},"metadata":{},"sourceType":"module"}