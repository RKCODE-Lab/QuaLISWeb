{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\quotation\\\\EditQuotationTestPricing.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\n\nconst EditQuotationTestPricing = props => {\n  console.log(\"props.selected:\", props.selectedRecord);\n  return Object.keys(props.selectedRecord).length > 0 ? props.selectedRecord.map(item => /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ReadOnlyText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 33\n    }\n  }, item.stestsynonym)), /*#__PURE__*/React.createElement(Col, {\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormNumericInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_COST\"\n    }),\n    type: \"number\",\n    value: item.ncost || 0,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COST\"\n    }),\n    strict: true,\n    min: 0,\n    maxLength: 9 // onChange={(event) => props.onNumericInputChange(event, item.nquotationtestcode)}\n    ,\n    onChange: event => props.onNumericInputChange(event, \"ncost\", item.nquotationtestcode),\n    onBlur: () => props.onnetAmountEvent(item.nquotationtestcode),\n    noStyle: true,\n    precision: 2,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"nnoofsamples\",\n    type: \"text\",\n    label: props.intl.formatMessage({\n      id: \"IDS_NUMBEROFSAMPLES\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_NUMBEROFSAMPLES\"\n    }),\n    isMandatory: true,\n    required: true,\n    className: \"form-control\",\n    value: item.nnoofsamples || 0 // onChange={(event) => props.onNumericInputChange(event, item.nquotationtestcode)}\n    ,\n    onChange: event => props.onInputOnChange(event, item.nquotationtestcode),\n    onBlur: () => props.onnetAmountEvent(item.nquotationtestcode),\n    maxLength: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_TOTALNETAMOUNT\"\n    }),\n    name: \"ntotalamount\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, item.nquotationtestcode),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TOTALNETAMOUNT\"\n    }),\n    value: item.ntotalamount || 0 //     value={(item.ncost * item.nnoofsamples) || 0}\n    ,\n    isMandatory: true,\n    required: true,\n    maxLength: 9,\n    isDisabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  })))) : \"\";\n};\n\nexport default injectIntl(EditQuotationTestPricing);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/quotation/EditQuotationTestPricing.jsx"],"names":["React","Row","Col","injectIntl","FormInput","ReadOnlyText","FormNumericInput","EditQuotationTestPricing","props","console","log","selectedRecord","Object","keys","length","map","item","stestsynonym","intl","formatMessage","id","ncost","event","onNumericInputChange","nquotationtestcode","onnetAmountEvent","nnoofsamples","onInputOnChange","ntotalamount"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\n\r\nconst EditQuotationTestPricing = (props) => {\r\n        console.log(\"props.selected:\", props.selectedRecord)\r\n        return (\r\n            Object.keys(props.selectedRecord).length > 0 ? \r\n                props.selectedRecord.map(item=>\r\n                <Row>\r\n                    <Col md={4}>\r\n                                <ReadOnlyText>{item.stestsynonym}</ReadOnlyText>\r\n                    </Col>\r\n                    {/* <Col md={4}>\r\n                            <ReadOnlyText>{item.stestdescription}</ReadOnlyText>\r\n                    </Col> */}\r\n                    <Col md={2}>\r\n                                {/* <FormInput\r\n                                    label={props.intl.formatMessage({ id: \"IDS_COST\" })}\r\n                                    name={\"ncost\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => props.onInputOnChange(event, item.nquotationtestcode)}\r\n                                    onBlur={() => props.onnetAmountEvent(item.nquotationtestcode)}\r\n                                    placeholder={props.intl.formatMessage({ id: \"IDS_COST\" })}\r\n                                    value={item.ncost || 0}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={9}\r\n                                    isDisabled={false}\r\n                            /> */}\r\n\r\n\r\n                                <FormNumericInput\r\n                                        \r\n                                        label={props.intl.formatMessage({ id: \"IDS_COST\" })}\r\n                                        type=\"number\"\r\n                                        value={item.ncost || 0}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_COST\" })}\r\n                                        strict={true}\r\n                                        min={0}\r\n                                        maxLength={9}\r\n                                        // onChange={(event) => props.onNumericInputChange(event, item.nquotationtestcode)}\r\n                                        onChange={(event) => props.onNumericInputChange(event, \"ncost\",item.nquotationtestcode)}\r\n                                        onBlur={() => props.onnetAmountEvent(item.nquotationtestcode)}\r\n                                        noStyle={true}\r\n                                        precision={2}\r\n                                        className=\"form-control\"\r\n                                        errors=\"Please provide a valid number.\"\r\n                             />\r\n                            \r\n                    </Col>\r\n                    \r\n                    {/* <Col md={3}>\r\n\r\n                            <FormInput\r\n                                    label={props.intl.formatMessage({ id: \"IDS_NUMBEROFSAMPLES\" })}\r\n                                    name={\"nnoofsamples\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => props.onInputOnChange(event, item.nquotationtestcode)}\r\n                                    onBlur={() => props.onnetAmountEvent(item.nquotationtestcode)}\r\n                                    placeholder={props.intl.formatMessage({ id: \"IDS_NUMBEROFSAMPLES\" })}\r\n                                    value={item.nnoofsamples || 0}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={9}\r\n                                    precision={0}\r\n                            />\r\n                    </Col> */}\r\n\r\n                    <Col md={3}>\r\n\r\n                    <FormInput\r\n                                name={\"nnoofsamples\"}\r\n                                type=\"text\"\r\n                                label={props.intl.formatMessage({ id: \"IDS_NUMBEROFSAMPLES\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_NUMBEROFSAMPLES\" })}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                className=\"form-control\"\r\n                                value={item.nnoofsamples || 0}\r\n                                // onChange={(event) => props.onNumericInputChange(event, item.nquotationtestcode)}\r\n                                onChange={(event) => props.onInputOnChange(event, item.nquotationtestcode)}\r\n                                onBlur={() => props.onnetAmountEvent(item.nquotationtestcode)}\r\n                                maxLength={9}\r\n                            />\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n\r\n                            <FormInput\r\n                                    label={props.intl.formatMessage({ id: \"IDS_TOTALNETAMOUNT\" })}\r\n                                    name={\"ntotalamount\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => props.onInputOnChange(event, item.nquotationtestcode)}\r\n                                    placeholder={props.intl.formatMessage({ id: \"IDS_TOTALNETAMOUNT\" })}\r\n                                    value={item.ntotalamount || 0}\r\n                                //     value={(item.ncost * item.nnoofsamples) || 0}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={9}\r\n                                    isDisabled={true}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            ) :\"\"\r\n        )\r\n}\r\n\r\nexport default injectIntl(EditQuotationTestPricing);"]},"metadata":{},"sourceType":"module"}