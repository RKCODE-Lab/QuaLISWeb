{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\credentialmanagement\\\\ModuleSorting.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport AddModuleSorting from '../credentialmanagement/AddModuleSorting';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { callService, updateStore, crudMaster, validateEsignCredential, viewAttachment, getModuleSortingComboService } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getControlMap, showEsign, sortData } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ModuleSorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        selectedRecord['esignpassword'] = \"\";\n        selectedRecord['esigncomments'] = \"\";\n        selectedRecord['esignreason'] = \"\";\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let dataState = undefined;\n      let selectedId = null;\n      let inputData = [];\n      const selectedRecord = this.state.selectedRecord;\n      let prevRecord = this.state.selectedRecord[0].nmodulecode.value;\n\n      if (this.props.Login.operation === \"update\") {\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      }\n\n      inputData[\"nformcode\"] = this.state.selectedRecord.nformcode.value;\n      inputData[\"nmodulecode\"] = this.state.selectedRecord.nmodulecode.value;\n\n      if (prevRecord !== inputData.nmodulecode) {\n        inputData[\"nmenucode\"] = this.state.selectedRecord.nmodulecode.item.nmenucode;\n      } else {\n        inputData[\"nmenucode\"] = this.state.selectedRecord.nmenucode.value;\n      }\n\n      const inputParam = {\n        classUrl: \"modulesorting\",\n        methodUrl: \"ModuleSorting\",\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ...inputData\n        },\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType,\n        formRef,\n        selectedId,\n        dataState,\n        selectedRecord\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation,\n            selectedId\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } // }\n      // else{\n      //     let openModal = false;\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: { openModal }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      //}\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"combobox\",\n        \"idsName\": \"IDS_FORMNAME\",\n        \"dataField\": \"sformdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"combobox\",\n        \"idsName\": \"IDS_MODULENAME\",\n        \"dataField\": \"smoduledisplayname\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nformcode\";\n    }\n\n    let mandatoryFields = [];\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nformcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    sortData(this.props.Login.masterData, 'ascending', 'nformcode');\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getModuleSortingComboService,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isDownloadExcelRequired: false,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 37\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      esign: this.props.Login.loadEsign,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddModuleSorting, {\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        moduleSortingData: this.props.Login.moduleSortingData,\n        formMapList: this.props.Login.formMapList,\n        moduleMapList: this.props.Login.moduleMapList,\n        menuMapList: this.props.Login.menuMapList,\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  crudMaster,\n  validateEsignCredential,\n  viewAttachment,\n  getModuleSortingComboService\n})(injectIntl(ModuleSorting));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/credentialmanagement/ModuleSorting.jsx"],"names":["React","connect","injectIntl","Row","Col","process","AddModuleSorting","SlideOutModal","Esign","DataGrid","callService","updateStore","crudMaster","validateEsignCredential","viewAttachment","getModuleSortingComboService","DEFAULT_RETURN","getControlMap","showEsign","sortData","ListWrapper","mapStateToProps","state","Login","ModuleSorting","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","selectedId","updateInfo","typeName","onComboChange","comboData","fieldName","onSaveClick","saveType","formRef","undefined","inputData","prevRecord","nmodulecode","value","operation","nformcode","item","nmenucode","inputParam","classUrl","methodUrl","userinfo","userInfo","displayName","userRoleControlRights","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","reloadData","onInputOnChange","target","type","name","checked","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","render","primaryKeyField","mandatoryFields","editID","has","concat","get","ncontrolcode","editParam","moduleSortingData","formMapList","moduleMapList","menuMapList","componentDidUpdate","previousProps","Object","values","map","push","isOpen"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nimport AddModuleSorting from '../credentialmanagement/AddModuleSorting';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { callService,updateStore,crudMaster,validateEsignCredential,viewAttachment, getModuleSortingComboService} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { getControlMap, showEsign, sortData } from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ModuleSorting extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef=React.createRef();\r\n        this.extractedColumnList = [];\r\n    \r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n}\r\n\r\ndataStateChange = (event) => {\r\n    this.setState({\r\n        dataResult: process(this.state.data, event.dataState),\r\n        dataState: event.dataState\r\n    });\r\n}\r\n\r\ncloseModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    let selectedId = this.props.Login.selectedId;\r\n    if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n            selectedRecord['esignpassword'] = \"\"\r\n            selectedRecord['esigncomments'] = \"\"\r\n            selectedRecord['esignreason']=\"\"\r\n    } else {\r\n        openModal = false;\r\n        selectedRecord = {};\r\n        selectedId=null;\r\n    }\r\n    const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { openModal, loadEsign, selectedRecord, selectedId }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n}\r\n\r\n onComboChange = (comboData, fieldName) => {      \r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    selectedRecord[fieldName] = comboData;;   \r\n \r\n    this.setState({selectedRecord});        \r\n}\r\n\r\nonSaveClick = (saveType, formRef) => {\r\n    let dataState = undefined;\r\n    let selectedId = null;\r\n    let inputData = [];\r\n    const selectedRecord = this.state.selectedRecord;\r\n    let prevRecord = this.state.selectedRecord[0].nmodulecode.value;\r\n    if (this.props.Login.operation === \"update\") {\r\n        dataState = this.state.dataState;\r\n        selectedId = this.props.Login.selectedId;\r\n    }\r\n    inputData[\"nformcode\"] = this.state.selectedRecord.nformcode.value;\r\n    inputData[\"nmodulecode\"] = this.state.selectedRecord.nmodulecode.value;\r\n  \r\nif(prevRecord !== inputData.nmodulecode){\r\n    inputData[\"nmenucode\"] = this.state.selectedRecord.nmodulecode.item.nmenucode;\r\n} else{\r\n    inputData[\"nmenucode\"] = this.state.selectedRecord.nmenucode.value;\r\n}\r\n    const inputParam = {\r\n        classUrl: \"modulesorting\",\r\n        methodUrl: \"ModuleSorting\",\r\n        inputData: {userinfo: this.props.Login.userInfo, ...inputData},\r\n        operation: this.props.Login.operation,\r\n        displayName: this.props.Login.inputParam.displayName, saveType, formRef, selectedId, dataState,\r\n        selectedRecord\r\n       \r\n    }\r\n\r\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                operation: this.props.Login.operation, selectedId\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n    \r\n// }\r\n// else{\r\n//     let openModal = false;\r\n    \r\n//     const updateInfo = {\r\n//         typeName: DEFAULT_RETURN,\r\n//         data: { openModal }\r\n//     }\r\n//     this.props.updateStore(updateInfo);\r\n//}\r\n\r\n    \r\n}\r\n\r\nvalidateEsign = () => {\r\n    const inputParam = {\r\n        inputData: {\r\n            \"userinfo\": {\r\n                ...this.props.Login.userInfo,\r\n                sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n           \r\n            },\r\n            password: this.state.selectedRecord[\"esignpassword\"]\r\n        },\r\n        screenData: this.props.Login.screenData\r\n    }\r\n    this.props.validateEsignCredential(inputParam, \"openModal\");\r\n}\r\n\r\nreloadData = () => {\r\n    const inputParam = {\r\n        inputData: { \"userinfo\": this.props.Login.userInfo },\r\n\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n        userInfo: this.props.Login.userInfo,\r\n        displayName: this.props.Login.inputParam.displayName\r\n    };\r\n\r\n    this.props.callService(inputParam);\r\n}\r\n\r\nonInputOnChange = (event) => {\r\n\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === 'checkbox') {\r\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    }\r\n    else {\r\n        selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n}\r\n\r\nrender() {\r\n    let primaryKeyField = \"\";\r\n\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [        \r\n                { \"controlType\": \"combobox\", \"idsName\": \"IDS_FORMNAME\",\"dataField\": \"sformdisplayname\", \"width\": \"150px\" },     \r\n                { \"controlType\": \"combobox\", \"idsName\": \"IDS_MODULENAME\",\"dataField\": \"smoduledisplayname\", \"width\": \"150px\" },\r\n            ]\r\n            primaryKeyField = \"nformcode\";\r\n        }\r\n        let mandatoryFields=[];\r\n  \r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n          && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n        screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nformcode\", operation: \"update\",\r\n        inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n\r\n        sortData(this.props.Login.masterData,'ascending','nformcode');\r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n    \r\n                            {this.state.data ?\r\n                                    <DataGrid\r\n                                        primaryKeyField={primaryKeyField}\r\n                                        selectedId={this.props.Login.selectedId}\r\n                                        data={this.state.data}\r\n                                        dataResult={this.state.dataResult}\r\n                                        dataState={this.state.dataState}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        fetchRecord={this.props.getModuleSortingComboService}\r\n                                        reloadData={this.reloadData}\r\n                                        editParam={editParam}\r\n                                        scrollable={\"scrollable\"}\r\n                                        gridHeight = {\"600px\"}\r\n                                        isDownloadExcelRequired={false}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        pageable={true}\r\n                                    />\r\n                                    : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        updateStore={this.props.updateStore}\r\n                        mandatoryFields={mandatoryFields}\r\n                        esign={this.props.Login.loadEsign}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddModuleSorting\r\n                            selectedRecord={this.props.Login.selectedRecord || {}}\r\n                            onComboChange={this.onComboChange}\r\n                            moduleSortingData={this.props.Login.moduleSortingData} \r\n                            formMapList={this.props.Login.formMapList}\r\n                            moduleMapList={this.props.Login.moduleMapList}\r\n                            menuMapList={this.props.Login.menuMapList}\r\n                            operation={this.props.Login.operation}\r\n                            inputParam={this.props.Login.inputParam} \r\n                        />}\r\n                    />\r\n                }\r\n                            \r\n        </>);\r\n}\r\n\r\ncomponentDidUpdate(previousProps) {\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n            });\r\n        }\r\n        else {\r\n            let { dataState } = this.state;\r\n            if (this.props.Login.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            }\r\n\r\n            this.setState({\r\n                data: this.props.Login.masterData,\r\n                isOpen: false,\r\n                selectedRecord: this.props.Login.selectedRecord,\r\n                dataResult: process(this.props.Login.masterData, dataState),\r\n                dataState\r\n            });\r\n        }\r\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n        this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    }\r\n}\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService,updateStore,crudMaster,validateEsignCredential,viewAttachment, getModuleSortingComboService})(injectIntl(ModuleSorting));\r\n"]},"metadata":{},"sourceType":"module"}