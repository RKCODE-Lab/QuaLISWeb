{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\nexport function getsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      checkBoxOperation: inputData.masterData.searchedSubSample ? inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation : 3 : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalSubSample\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          APSelectedSample: inputData.APSelectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : [];\n        inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []; //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n\n        let skipInfo = {};\n        let masterData = {};\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            selectedPreregno: inputData.npreregno,\n            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\n            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                APSelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const APSelectedTest = oldSelectedTest.length > 0 ? getSameRecordFromTwoArrays(oldSelectedTest, masterData.APSelectedSubSample, 'npreregno') : responseData.APSelectedTest;\n            masterData = { ...masterData,\n              APSelectedTest,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : [] : []\n            };\n          }\n\n          if (inputData.checkBoxOperation === 3) {\n            masterData = { ...masterData,\n              APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : [],\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : [] : []\n            };\n          }\n\n          let {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\n            testskip = 0;\n            subSampleSkip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subSampleSkip,\n              subSampleTake\n            };\n          }\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          let masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            APSelectedSubSample: inputData.masterData.APSelectedSubSample,\n            APSelectedTest: inputData.masterData.APSelectedTest || [],\n            selectedPreregno: inputData.npreregno\n          };\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          }\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.AP_TEST.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n\n          let ApprovalParameter = [];\n          let ResultUsedInstrument = [];\n          let ResultUsedTasks = [];\n          let RegistrationTestAttachment = [];\n          let ApprovalResultChangeHistory = [];\n          let RegistrationTestComment = [];\n          let ApprovalHistory = [];\n\n          if (inputData.checkBoxOperation === 1) {\n            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            let dbData = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                dbData = response.data.ResultUsedInstrument || [];\n                list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TASK\":\n                dbData = response.data.ResultUsedTasks || [];\n                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                dbData = response.data.ApprovalResultChangeHistory || [];\n                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                dbData = response.data.ApprovalHistory || [];\n                list = [...inputData.masterData.ApprovalHistory, ...dbData];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              default:\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } else {\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                list = response.data.ApprovalParameter || [];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                list = response.data.ResultUsedInstrument || [];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                list = response.data.ResultUsedTasks || [];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                list = response.data.ApprovalResultChangeHistory || [];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                list = response.data.ApprovalHistory || [];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let skipInfo = {};\n      let bool = false;\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n          APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\n\n          if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          APSelectedSample,\n          APSelectedSubSample,\n          APSelectedTest\n        };\n\n        if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: 3\n        };\n\n        if (subSample) {\n          if (APSelectedTest.length === 0) {\n            inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"AP_TEST\"];\n            dispatch(getTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetail(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetail(inputData, true));\n        } // dispatch(getTestChildTabDetail(inputData, true));\n\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\n          selectedSample: inputData.selectedSample,\n          selectedSubSample: inputData.masterData.AP_SUBSAMPLE\n        };\n        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              // wholeApprovalParameter,\n              ApprovalParameter,\n              // wholeResultUsedInstrument,\n              ResultUsedInstrument,\n              // wholeResultUsedTasks,\n              ResultUsedTasks,\n              // wholeRegistrationTestAttachment,\n              RegistrationTestAttachment,\n              // wholeApprovalResultChangeHistory,\n              ApprovalResultChangeHistory,\n              // wholeRegistrationTestComments,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ntransactionstatus: inputData.ntransactionstatus\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let masterData = {};\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalTest\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        }; //responseData = sortData(responseData)\n\n        inputData.searchTestRef.current.null = \"\"; //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n\n        let oldSelectedTest = inputData.masterData.APSelectedTest;\n        inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          APSelectedTest: inputData.masterData.APSelectedTest,\n          // APselectedSample: inputData.APSelectedSample,\n          APSelectedSubSample: inputData.APSelectedSubSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n\n        if (inputData.masterData.AP_TEST.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let ApprovalParameter = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ApprovalResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let ApprovalHistory = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode; // if (oldSelectedTest.length > 0) {\n          //     keepOld = true\n          //     masterData = {\n          //         ...masterData,\n          //         selectedTest: oldSelectedTest\n          //     }\n          // } else {\n\n          ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode; // }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.ResultUsedInstrument || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ApprovalResultChangeHistory || [];\n              list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              dbData = response.data.ApprovalHistory || [];\n              list = [...inputData.masterData.ApprovalHistory, ...dbData];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          let wholeTestListForSelectAll = masterData.AP_TEST;\n          let wholeTestListForSelectSingleSelect = oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              APSelectedTest: oldSelectedTest //oldSelectedTest\n\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              list = response.data.ApprovalParameter || [];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument || [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks || [];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ApprovalResultChangeHistory || [];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              list = response.data.ApprovalHistory || [];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          ApprovalParameter,\n          ResultUsedInstrument,\n          ResultUsedTasks,\n          RegistrationTestAttachment,\n          ApprovalResultChangeHistory,\n          RegistrationTestComment,\n          ApprovalHistory\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              APSelectedSubSample: inputData.APSelectedSubSample,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              activeTestTab: inputData.activeTestTab,\n              activeSampleTab: inputData.activeSampleTab,\n              skip: undefined,\n              take: undefined,\n              ...skipInfo\n            },\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.masterData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno; //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n\n        let APSelectedSubSample = inputData.masterData.APSelectedSubSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\n        let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\n        let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        let oldSelectedTest = inputData.masterData.APSelectedTest;\n        let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        let isGrandChildGetRequired = false;\n\n        if (TestSelected.length > 0) {\n          isGrandChildGetRequired = true;\n        } else {\n          isGrandChildGetRequired = false;\n        }\n\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n        if (isGrandChildGetRequired) {\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"-1\";\n          let APSelectedSubSample = inputData.APSelectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n          let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n          let masterData = { ...inputData.masterData,\n            APSelectedSubSample,\n            APSelectedTest\n          };\n          inputData = { ...inputData,\n            childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n            ntransactiontestcode,\n            masterData,\n            APSelectedTest,\n            APSelectedSubSample,\n            checkBoxOperation: 3\n          };\n          dispatch(getTestChildTabDetail(inputData, true));\n        } else {\n          let masterData = { ...inputData.masterData,\n            APSelectedSubSample: inputData.APSelectedSubSample,\n            selectedTransactioncode: inputData.ntransactionsamplecode,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              APSelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...masterData,\n                ApprovalParameter,\n                ResultUsedInstrument,\n                ResultUsedTasks,\n                RegistrationTestAttachment,\n                ApprovalResultChangeHistory,\n                RegistrationTestComment,\n                ApprovalHistory\n              },\n              loading: false,\n              showFilter: false,\n              ...skipInfo,\n              activeSampleTab: inputData.activeSampleTab,\n              activeTestTab: inputData.activeTestTab\n            }\n          });\n        }\n      }\n    }\n  };\n}\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              selectedTest: inputData.APselectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              APSelectedTest: inputData.APSelectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            APSelectedTest: inputData.APSelectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"comments/getSampleComment\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(\"Please Select a Sample\");\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      }; // dispatch({type: DEFAULT_RETURN, payload:{\n      // masterData:{\n      //     ...inputParam.inputData.masterData,\n      //     ...response.data, \n      //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\n      //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\n      // },\n      //     loading:false ,\n      //     loadEsign:false,\n      //     openChildModal:false                     \n      // }}) \n\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\n      //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(\"Please Select All the Values in Filter\");\n    }\n  };\n}\nexport function getApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterEdit(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\n      userinfo: inputParam.userInfo\n    };\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getEditParameter\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...responseData,\n            loading: false,\n            openChildModal: true,\n            operation: \"update\",\n            screenName: \"IDS_APPROVALPARAMETER\" // ncontrolCode:inputParam.ncontrolCode,\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTTEST\"\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        if (inputParam.operation === 'dynamic') {\n          const methodUrl = \"performaction\";\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n        } else if (inputParam.operation === 'reportgeneration') {\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']));\n        } else if (inputParam.operation === 'decision') {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function previewSampleReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let ndecisionStatus = inputParam.sample.ndecisionstatus;\n\n    if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\n      ndecisionStatus = transactionStatus.PASS;\n    }\n\n    const inputData = {\n      ndecisionstatus: ndecisionStatus,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n      nreporttypecode: REPORTTYPE.SAMPLEREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.sample.nregtypecode,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      npreregno: inputParam.sample.npreregno\n    };\n    rsapi.post(\"approval/previewSampleReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCOAReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getEnforceCommentsHistory\", {\n      ntransactionresultcode: selectedParam.ntransactionresultcode,\n      userinfo: userInfo\n    }).then(response => {\n      if (response.data.length > 0) {\n        masterData = { ...masterData,\n          enforceCommentsHistory: response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData,\n            openChildModal: true,\n            operation: \"view\",\n            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ApprovalAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","postCRUDOrganiseTransSearch","REPORTTYPE","reportCOAType","transactionStatus","getsubSampleDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","checkBoxOperation","searchedSubSample","length","activeName","dataStateName","subSample","post","then","response","responseData","data","APSelectedSample","oldSelectedTest","APSelectedTest","AP_TEST","skipInfo","searchTestRef","undefined","current","value","oldSelectedSubSample","APSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","AP_SUBSAMPLE","searchSubSampleRef","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","ApprovalParameter","testskip","testtake","subSampleSkip","subSampleTake","bool","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ApprovalResultChangeHistory","RegistrationTestComment","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","selectedTest","list","dbData","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","isGrandChildGetRequired","selectedSample","toString","filterSelectedSubSample","x","join","getTestDetail","getTestChildTabDetail","selectedSubSample","null","wholeTestListForSelectAll","wholeTestListForSelectSingleSelect","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","APselectedTest","selectedTestCode","screenName","getSampleChildTabDetail","performAction","inputParam","AP_SAMPLE","updatedSample","updatedSubSample","updatedTest","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","updateDecision","getRegistrationType","SampleTypeValue","getRegistrationSubType","RegTypeValue","getFilterStatus","RegSubTypeValue","getFilterBasedTest","rtn","getApprovalVersion","getApprovalSample","searchSampleRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getParameterEdit","item","multilingualMsg","validateEsignforApproval","methodUrl","toLowerCase","generateCOAReport","previewSampleReport","ndecisionStatus","sample","ndecisionstatus","DRAFT","PASS","nprimarykey","ncoareporttypecode","SAMPLECERTIFICATEPRIVIEW","nreporttypecode","SAMPLEREPORT","sprimarykeyname","ncontrolcode","document","getElementById","setAttribute","filepath","click","SAMPLEWISE","COAREPORT","getEnforceCommentsHistory","selectedParam","enforceCommentsHistory"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n                inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalSubSample\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, APSelectedSample: inputData.APSelectedSample }\r\n                    responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : []\r\n                    inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                    //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    \r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.AP_SUBSAMPLE[0]] : [],\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 5) {\r\n\r\n                            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    APSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const APSelectedTest = oldSelectedTest.length >0 ? getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.APSelectedSubSample, 'npreregno') : responseData.APSelectedTest\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :[] : []\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : [],\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :[] : []\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        }\r\n                    }\r\n                    else {\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                        let masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            APSelectedSubSample: inputData.masterData.APSelectedSubSample,\r\n                            APSelectedTest: inputData.masterData.APSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.AP_TEST.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.selectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        } else if (inputData.checkBoxOperation === 5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    dbData = response.data.ResultUsedInstrument || []\r\n                                    list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    dbData = response.data.ResultUsedTasks || []\r\n                                    list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    dbData = response.data.ApprovalResultChangeHistory || []\r\n                                    list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    dbData = response.data.ApprovalHistory || []\r\n                                    list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                default:\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } else {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    list = response.data.ApprovalParameter || []\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    list = response.data.ResultUsedInstrument || []\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    list = response.data.ResultUsedTasks || []\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    list = response.data.ApprovalResultChangeHistory || []\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    list = response.data.ApprovalHistory || []\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, APSelectedSample, APSelectedSubSample, APSelectedTest }\r\n                if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: 3\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (APSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"AP_TEST\"]\r\n                        dispatch(getTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetail(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n\r\n                // dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedSubSample: inputData.masterData.AP_SUBSAMPLE\r\n                }\r\n                let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    case \"IDS_RESULTS\":\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                        break;\r\n                    case \"IDS_INSTRUMENT\":\r\n                        ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TASK\":\r\n                        ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_RESULTCHANGEHISTORY\":\r\n                        ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTAPPROVALHISTORY\":\r\n                        ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    default:\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // wholeApprovalParameter,\r\n                            ApprovalParameter,\r\n                            // wholeResultUsedInstrument,\r\n                            ResultUsedInstrument,\r\n                            // wholeResultUsedTasks,\r\n                            ResultUsedTasks,\r\n                            // wholeRegistrationTestAttachment,\r\n                            RegistrationTestAttachment,\r\n                            // wholeApprovalResultChangeHistory,\r\n                            ApprovalResultChangeHistory,\r\n                            // wholeRegistrationTestComments,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ntransactionstatus:inputData.ntransactionstatus,\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let masterData = {};\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalTest\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    //responseData = sortData(responseData)\r\n                    inputData.searchTestRef.current.null = \"\"\r\n                    //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest\r\n                    inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.masterData.APSelectedTest,\r\n                        // APselectedSample: inputData.APSelectedSample,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    if (inputData.masterData.AP_TEST.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         selectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.ResultUsedInstrument || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ApprovalResultChangeHistory || []\r\n                                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                dbData = response.data.ApprovalHistory || []\r\n                                list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        let wholeTestListForSelectAll = masterData.AP_TEST\r\n                        let wholeTestListForSelectSingleSelect =\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest: oldSelectedTest\r\n                                //oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.ApprovalParameter || []\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument || []\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks || []\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ApprovalResultChangeHistory || []\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                list = response.data.ApprovalHistory || []\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                list = [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.masterData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\r\n                let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\r\n                let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n\r\n\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                let oldSelectedTest = inputData.masterData.APSelectedTest\r\n                let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                let isGrandChildGetRequired = false;\r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = true;\r\n                } else {\r\n                    isGrandChildGetRequired = false;\r\n                }\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                if (isGrandChildGetRequired) {\r\n                    let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"-1\";\r\n                    let APSelectedSubSample = inputData.APSelectedSubSample;\r\n                    // let selectedPreregno = inputData.npreregno;\r\n                    let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                    // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                    let masterData = { ...inputData.masterData, APSelectedSubSample, APSelectedTest }\r\n                    inputData = {\r\n                        ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, APSelectedTest,\r\n                        APSelectedSubSample, checkBoxOperation: 3\r\n                    }\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n                else {\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        APSelectedTest: inputData.masterData.AP_TEST.length > 0 ?\r\n                            [inputData.masterData.AP_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    })\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ?\r\n                            inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        case \"IDS_RESULTS\":\r\n                            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_INSTRUMENT\":\r\n                            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TASK\":\r\n                            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_RESULTCHANGEHISTORY\":\r\n                            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTAPPROVALHISTORY\":\r\n                            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        default:\r\n                            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample, selectedTest: inputData.APselectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\r\n                                APSelectedTest: inputData.APSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.APSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...response.data,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n                }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\r\n                //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\r\n                //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterBasedTest(inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(\"Please Select All the Values in Filter\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getParameterEdit(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getEditParameter\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"update\",\r\n                            screenName: \"IDS_APPROVALPARAMETER\"\r\n                            // ncontrolCode:inputParam.ncontrolCode,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTTEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function validateEsignforApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    if (inputParam.operation === 'dynamic') {\r\n                        const methodUrl = \"performaction\"\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                        }\r\n                        dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    } else if (inputParam.operation === 'reportgeneration') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']))\r\n                    }\r\n                    else if (inputParam.operation === 'decision') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"]\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function previewSampleReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        let ndecisionStatus = inputParam.sample.ndecisionstatus;\r\n        if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\r\n            ndecisionStatus = transactionStatus.PASS;\r\n        }\r\n        const inputData = {\r\n            ndecisionstatus: ndecisionStatus,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n            nreporttypecode: REPORTTYPE.SAMPLEREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.sample.nregtypecode,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            npreregno: inputParam.sample.npreregno\r\n        }\r\n        rsapi.post(\"approval/previewSampleReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateCOAReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getEnforceCommentsHistory\", {\r\n            ntransactionresultcode: selectedParam.ntransactionresultcode,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    masterData = { ...masterData, enforceCommentsHistory: response.data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData,\r\n                            openChildModal: true,\r\n                            operation: \"view\",\r\n                            screenName: \"IDS_ENFORCECOMMENTHISTORY\"\r\n                        }\r\n                    })\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\" } })\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}