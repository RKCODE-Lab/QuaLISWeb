{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import{injectIntl}from'react-intl';import FormInput from'../../components/form-input/form-input.component';import CustomSwitch from'../../components/custom-switch/custom-switch.component';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import FormTextarea from'../../components/form-textarea/form-textarea.component';var AddMethod=function AddMethod(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormSelectSearch,{name:\"nmethodcatcode\",formLabel:props.intl.formatMessage({id:\"IDS_METHODCATCODE\"}),placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),options:props.methodCategoryList||[]// optionId='nmethodcatcode'\n// optionValue='smethodcatname'\n,value:props.selectedRecord?props.selectedRecord[\"nmethodcatcode\"]:\"\",isMandatory:true,isMulti:false,isSearchable:true,isDisabled:false,closeMenuOnSelect:true// alphabeticalSort={true}\n,onChange:function onChange(event){return props.onComboChange(event,'nmethodcatcode');}}),/*#__PURE__*/React.createElement(FormInput,{label:props.intl.formatMessage({id:\"IDS_METHODNAME\"}),name:\"smethodname\",type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event);},placeholder:props.intl.formatMessage({id:\"IDS_METHODNAME\"}),value:props.selectedRecord?props.selectedRecord[\"smethodname\"]:\"\",isMandatory:true,required:true,maxLength:100}),/*#__PURE__*/React.createElement(FormTextarea,{label:props.intl.formatMessage({id:\"IDS_DESCRIPTION\"}),name:\"sdescription\",onChange:function onChange(event){return props.onInputOnChange(event);},placeholder:props.intl.formatMessage({id:\"IDS_DESCRIPTION\"}),value:props.selectedRecord?props.selectedRecord[\"sdescription\"]:\"\",rows:\"2\",isMandatory:false,required:false,maxLength:255}),/*#__PURE__*/React.createElement(CustomSwitch,{label:props.intl.formatMessage({id:\"IDS_DEFAULTSTATUS\"}),type:\"switch\",name:\"ndefaultstatus\",onChange:function onChange(event){return props.onInputOnChange(event);},placeholder:props.intl.formatMessage({id:\"IDS_DEFAULTSTATUS\"}),defaultValue:props.selectedRecord?props.selectedRecord[\"ndefaultstatus\"]===3?true:false:false,isMandatory:false,required:false,checked:props.selectedRecord?props.selectedRecord[\"ndefaultstatus\"]===3?true:false:false//disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true :false:false}\n})));};export default injectIntl(AddMethod);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/AddMethod.js"],"names":["React","Row","Col","injectIntl","FormInput","CustomSwitch","FormSelectSearch","FormTextarea","AddMethod","props","intl","formatMessage","id","methodCategoryList","selectedRecord","event","onComboChange","onInputOnChange"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport {injectIntl } from 'react-intl';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n\r\nconst AddMethod = (props) => {\r\n        \r\n        return(\r\n                <Row>\r\n                    <Col md={12}>\r\n                            <FormSelectSearch\r\n                                    name={\"nmethodcatcode\"}\r\n                                    formLabel={props.intl.formatMessage({ id:\"IDS_METHODCATCODE\"})}                              \r\n                                    placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                    options={ props.methodCategoryList || []}\r\n                                   // optionId='nmethodcatcode'\r\n                                   // optionValue='smethodcatname'\r\n                                    value = { props.selectedRecord ? props.selectedRecord[\"nmethodcatcode\"]:\"\"}\r\n                                    isMandatory={true}\r\n                                    isMulti={false}\r\n                                    isSearchable={true}                                \r\n                                    isDisabled={false}\r\n                                    closeMenuOnSelect={true}\r\n                                   // alphabeticalSort={true}\r\n                                    onChange = {(event)=> props.onComboChange(event, 'nmethodcatcode')}                               \r\n                            />\r\n                    {/* </Col>\r\n                    <Col md={12}> */}\r\n                        <FormInput\r\n                            label={props.intl.formatMessage({ id:\"IDS_METHODNAME\"})}\r\n                            name={\"smethodname\"}\r\n                            type=\"text\"\r\n                            onChange={(event)=>props.onInputOnChange(event)}\r\n                            placeholder={props.intl.formatMessage({ id:\"IDS_METHODNAME\"})}\r\n                            value ={props.selectedRecord?props.selectedRecord[\"smethodname\"]:\"\"}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            maxLength={100}\r\n                        />\r\n                    {/* </Col>\r\n\r\n                    <Col md={12}> */}\r\n                        <FormTextarea\r\n                            label={props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                            name={\"sdescription\"}\r\n                            onChange={(event)=>props.onInputOnChange(event)}\r\n                            placeholder={props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                            value ={props.selectedRecord ? props.selectedRecord[\"sdescription\"] :\"\"}\r\n                            rows=\"2\"\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={255}\r\n                            >\r\n                        </FormTextarea>\r\n                    {/* </Col>\r\n                    <Col md={12}> */}\r\n                        <CustomSwitch\r\n                            label={props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}\r\n                            type=\"switch\"\r\n                            name={\"ndefaultstatus\"}\r\n                            onChange={(event)=>props.onInputOnChange(event)}\r\n                            placeholder={props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}\r\n                            defaultValue ={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true :false:false}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            checked={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true :false:false}\r\n                            //disabled={props.selectedRecord ? props.selectedRecord[\"ndefaultstatus\"] === 3 ? true :false:false}\r\n                            >                                               \r\n\r\n                        </CustomSwitch>\r\n                    </Col>\r\n                        \r\n                </Row>\r\n            )   \r\n}\r\n\r\nexport default injectIntl(AddMethod);"]},"metadata":{},"sourceType":"module"}