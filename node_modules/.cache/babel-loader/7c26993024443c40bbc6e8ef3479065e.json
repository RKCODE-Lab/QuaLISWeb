{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\PlantGroup.jsx\";\nimport { process } from '@progress/kendo-data-query';\nimport React from 'react';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { plantgroupsite, plantgroupdepartment, fusionplantchild, getActivePlantGroupById } from '../../actions';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, Lims_JSON_stringify } from '../../components/CommonScript';\nimport { Col, Row, Nav } from 'react-bootstrap';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport DataGrid from '../../../src/components/data-grid/data-grid.component';\nimport Esign from '../audittrail/Esign';\nimport AddPlantGroup from '../../pages/configurationmaster/AddPlantGroup';\nimport { callService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\nimport { toast } from 'react-toastify';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PlantGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let controlButton = this.props.Login.controlButton;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        controlButton = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: [],\n          controlButton\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"ssitecode\") {\n        selectedRecord[fieldName] = comboData;\n        delete selectedRecord[\"splantchildcode\"];\n        delete selectedRecord[\"splantparentcode\"]; //this.setState({ selectedRecord });\n\n        this.props.plantgroupdepartment(this.state.selectedRecord.ssitecode.value, // this.props.Login.masterData.SelectedReportMaster.nformcode,\n        this.props.Login.userInfo);\n      } else if (fieldName === \"splantparentcode\") {\n        selectedRecord[fieldName] = comboData;\n        delete selectedRecord[\"splantchildcode\"]; //this.setState({ selectedRecord });\n\n        this.props.fusionplantchild(this.state.selectedRecord.ssitecode.value, this.state.selectedRecord.splantparentcode.value, this.props.Login.userInfo);\n      } else if (fieldName === \"splantchildcode\") {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } //selectedRecord[fieldName] = comboData;;\n      // this.setState({ selectedRecord });\n\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let controlButton = this.props.Login.controlButton;\n      let selectedId = this.props.Login.selectedId;\n      let fusionchildplants;\n      let fusionparentplants;\n      let fusionplantSite;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        controlButton = [];\n        selectedId = null;\n        fusionchildplants = [];\n        fusionparentplants = [];\n        fusionplantSite = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId,\n          controlButton,\n          fusionchildplants,\n          fusionparentplants,\n          fusionplantSite\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"create\") {\n        this.onSavefusionPlantGroup(saveType, formRef);\n      } else if (this.props.Login.operation === \"update\") {\n        this.updatefusionPlantGroup(saveType, formRef);\n      }\n    };\n\n    this.onSavefusionPlantGroup = (saveType, formRef) => {\n      let childparameter = [];\n      this.state.selectedRecord.splantchildcode && this.state.selectedRecord.splantchildcode.map(data => {\n        return childparameter.push({\n          nchildcode: \"'\" + data.value + \"'\",\n          splantcode: \"'\" + data.value + \"'\" // childplantname : data.item,\n          // ssitecode:this.state.selectedRecord.ssitecode.value,\n\n        });\n      });\n      const inputParam = {\n        nformcode: this.props.Login.userInfo.nformcode,\n        classUrl: \"plantgroup\",\n        methodUrl: \"PlantGroup\",\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          },\n          //indexof:\n          ncontrolCode: this.props.Login.userInfo.nformcode,\n          nmappingsite: this.state.selectedRecord.ssitecode.value,\n          ssitecode: this.state.selectedRecord.ssitecode.label,\n          splantparentcode: this.state.selectedRecord.splantparentcode.value,\n          splantparentcodeLable: this.state.selectedRecord.splantparentcode.label,\n          splantchildcode: this.state.selectedRecord.splantchildcode.map(function (el) {\n            return el.value;\n          }).join(\",\") || null,\n          splantchildcodeLable: this.state.selectedRecord.splantchildcode.map(function (el) {\n            return el.label;\n          }).join(\",\") || null,\n          childparameterlist: childparameter\n        },\n        operation: \"create\",\n        saveType,\n        formRef\n      }; //inputData[\"completetreepath\"] = masterData.CompleteTreePath;\n\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.updatefusionPlantGroup = (saveType, formRef) => {\n      const inputParam = {\n        nformcode: this.props.Login.userInfo.nformcode,\n        classUrl: \"plantgroup\",\n        methodUrl: \"PlantGroup\",\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          },\n          //indexof:\n          ncontrolCode: this.props.Login.userInfo.nformcode,\n          nplantgroupcode: this.state.selectedRecord.nplantgroupcode,\n          nmappingsite: this.state.selectedRecord.ssitecode.value,\n          ssitecode: this.state.selectedRecord.ssitecode.label,\n          splantparentcode: this.state.selectedRecord.splantparentcode.value,\n          splantparentcodeLable: this.state.selectedRecord.splantparentcode.label,\n          //splantchildcode: this.state.selectedRecord.splantchildcode.map(function (el) { return \"'\"+el.value+\"'\"; }).join(\",\") || null,\n          //splantchildcodeLable: this.state.selectedRecord.splantchildcode.map(function (el) { return  \"'\"+el.label+\"'\"; }).join(\",\") || null,\n          splantchildcode: this.state.selectedRecord.splantchildcode.value,\n          splantchildcodeLable: this.state.selectedRecord.splantchildcode.label\n        },\n        operation: \"update\",\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: deleteParam.selectedRecord\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"selectbox\",\n        \"idsName\": \"IDS_FUSIONPRANENTPLANT\",\n        \"dataField\": \"sparentsplantname\",\n        \"width\": \"150px\"\n      }, //parentsplantcode\n      {\n        \"controlType\": \"selectbox\",\n        \"idsName\": \"IDS_FUSIONCHILDPLANTS\",\n        \"dataField\": \"schildsplantname\",\n        \"width\": \"150px\"\n      }, //childsplantcode\n      {\n        \"controlType\": \"selectbox\",\n        \"idsName\": \"IDS_FUSIONSITE\",\n        \"dataField\": \"ssitecode\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nsiteprimarykey\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FUSIONSITE\",\n      \"dataField\": \"ssitecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FUSIONPRANENTPLANT\",\n      \"dataField\": \"splantparentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FUSIONCHILDPLANTS\",\n      \"dataField\": \"splantchildcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    });\n    const addplantgroupId = this.state.controlMap.has(\"AddPlantGroup\") && this.state.controlMap.get(\"AddPlantGroup\").ncontrolcode;\n    const editplantgroupId = this.state.controlMap.has(\"EditPlantGroup\") && this.state.controlMap.get(\"EditPlantGroup\").ncontrolcode; // const deleteplantgroupId = this.state.controlMap.has(\"DeletePlantGroup\") && this.state.controlMap.get(\"DeletePlantGroup\").ncontrolcode;\n\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nplantgroupcode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editplantgroupId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addplantgroupId\",\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(AddPlantGroup) === -1,\n      onClick: () => this.props.plantgroupsite(AddPlantGroup),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FUSIONPLANT\",\n      defaultMessage: \"Validation Status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult || [],\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getActivePlantGroupById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam //editParam={() => this.props.getActivePlantGroupById(editplantgroupId,\"nplantgroupcode\", this.props.Login.userInfo) || []}\n      ,\n      addRecord: () => this.props.plantgroupsite(addplantgroupId, this.props.Login.userInfo) || [],\n      deleteParam: deleteParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      groupable: true,\n      group: this.state.group,\n      groupPanelCell: () => null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    })))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(AddPlantGroup, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        onClick: () => this.openModal(\"IDS_FUSIONPLANT\"),\n        fusionplantSite: this.state.fusionplantSite || [],\n        fusionparentplants: this.state.fusionparentplants || [],\n        fusionchildplants: this.state.fusionchildplants,\n        inputParam: this.props.Login.inputParam,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 27\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        let group = [];\n        group = [{\n          field: \"sparentsplantname\"\n        }];\n        dataState = {\n          group\n        };\n        this.setState({\n          dataState\n        });\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } // if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n    //     this.setState({ selectedRecord: this.props.Login.selectedRecord });\n    // }\n\n\n    if (this.props.Login.fusionplantSite !== previousProps.Login.fusionplantSite) {\n      this.setState({\n        fusionplantSite: this.props.Login.fusionplantSite\n      });\n    }\n\n    if (this.props.Login.fusionparentplants !== previousProps.Login.fusionparentplants) {\n      this.setState({\n        fusionparentplants: this.props.Login.fusionparentplants\n      });\n    }\n\n    if (this.props.Login.fusionchildplants !== previousProps.Login.fusionchildplants) {\n      this.setState({\n        fusionchildplants: this.props.Login.fusionchildplants\n      });\n    } // if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n    //     const userRoleControlRights = [];\n    //     if (this.props.Login.userRoleControlRights) {\n    //         this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\n    //             userRoleControlRights.push(item.ncontrolcode))\n    //     }\n    //     const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\n    //     let skip = this.state.skip;\n    //     let take = this.state.take;\n    //     // if (reportTypeList.length < take) {\n    //     //     skip = 0;\n    //     //     take = take;\n    //     // }\n    //     this.setState({ userRoleControlRights,\n    //        controlMap,skip, take\n    //     });\n    // }\n\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  plantgroupsite,\n  plantgroupdepartment,\n  fusionplantchild,\n  getActivePlantGroupById\n})(injectIntl(PlantGroup));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/configurationmaster/PlantGroup.jsx"],"names":["process","React","SlideOutModal","plantgroupsite","plantgroupdepartment","fusionplantchild","getActivePlantGroupById","connect","injectIntl","FormattedMessage","DEFAULT_RETURN","showEsign","getControlMap","Lims_JSON_stringify","Col","Row","Nav","faPlus","ListWrapper","FontAwesomeIcon","DataGrid","Esign","AddPlantGroup","callService","updateStore","crudMaster","validateEsignCredential","toast","mapStateToProps","state","Login","PlantGroup","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","closeModal","loadEsign","openModal","selectedRecord","controlButton","operation","updateInfo","typeName","selectedId","onComboChange","comboData","fieldName","ssitecode","value","splantparentcode","onInputOnChange","target","type","name","checked","fusionchildplants","fusionparentplants","fusionplantSite","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","screenData","onSaveClick","saveType","formRef","onSavefusionPlantGroup","updatefusionPlantGroup","childparameter","splantchildcode","map","push","nchildcode","splantcode","nformcode","userinfo","sformname","smodulename","ncontrolCode","nmappingsite","splantparentcodeLable","el","join","splantchildcodeLable","childparameterlist","masterData","userRoleControlRights","nplantgroupcode","deleteRecord","deleteParam","toLowerCase","screenName","intl","formatMessage","id","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","undefined","mandatoryFields","addplantgroupId","has","get","ncontrolcode","editplantgroupId","editParam","indexOf","group","deleteFile","actionType","componentDidUpdate","previousProps","Object","values","item","field","isOpen"],"mappings":";AAAA,SAASA,OAAT,QAAwB,4BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SAASC,cAAT,EAAyBC,oBAAzB,EAA+CC,gBAA/C,EAAiEC,uBAAjE,QAAgG,eAAhG;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,mBAAnC,QACI,+BADJ;AAEA,SAASC,GAAT,EAAcC,GAAd,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,SAASC,MAAT,QAAsB,mCAAtB;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,QAAP,MAAqB,uDAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,aAAP,MAA0B,+CAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,UAAnC,EAA+CC,uBAA/C,QAA8E,eAA9E;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,UAAN,SAAyB9B,KAAK,CAAC+B,SAA/B,CAAyC;AAErCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmCnBC,eAnCmB,GAmCAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEtC,OAAO,CAAC,KAAK6B,KAAL,CAAWU,IAAZ,EAAkBH,KAAK,CAACI,SAAxB,CADT;AAEVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFP,OAAd;AAIH,KAxCkB;;AAAA,SA4CnBC,UA5CmB,GA4CN,MAAM;AACf,YAAMC,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AAAE,sBAAY,KAAKT,KAAL,CAAWJ,KAAX,CAAiBc;AAA/B,SADI;AAEfC,QAAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BG,QAFvB;AAGfC,QAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BI,SAHxB;AAIfF,QAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,QAJZ;AAKfG,QAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiB;AALf,OAAnB;AAQA,WAAKb,KAAL,CAAWX,WAAX,CAAuBmB,UAAvB;AACH,KAtDkB;;AAAA,SAuQnBM,UAvQmB,GAuQN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,cAAtC;AACA,UAAIC,aAAa,GAAG,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsB,aAArC;;AACA,UAAI,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBmB,SAArB,EAAgC;AAC5B,YAAI,KAAKf,KAAL,CAAWJ,KAAX,CAAiBuB,SAAjB,KAA+B,QAAnC,EAA6C;AACzCJ,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,cAAc,GAAG,EAAjB;AACH,SAJD,MAKK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OATD,MAUK;AACDC,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACAC,QAAAA,aAAa,GAAG,EAAhB;AAEH;;AACD,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE7C,cADK;AAEf6B,QAAAA,IAAI,EAAE;AACFW,UAAAA,SADE;AACSD,UAAAA,SADT;AACoBE,UAAAA,cADpB;AACoCK,UAAAA,UAAU,EAAE,EADhD;AACoDJ,UAAAA;AADpD;AAFS,OAAnB;AAMA,WAAKlB,KAAL,CAAWV,WAAX,CAAuB8B,UAAvB;AAGH,KArSkB;;AAAA,SAwSnBG,aAxSmB,GAwSH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAEtC,YAAMR,cAAc,GAAG,KAAKtB,KAAL,CAAWsB,cAAX,IAA6B,EAApD;;AAGA,UAAIQ,SAAS,KAAK,WAAlB,EAA+B;AAC3BR,QAAAA,cAAc,CAACQ,SAAD,CAAd,GAA4BD,SAA5B;AACA,eAAOP,cAAc,CAAC,iBAAD,CAArB;AACA,eAAOA,cAAc,CAAC,kBAAD,CAArB,CAH2B,CAK3B;;AACA,aAAKjB,KAAL,CAAW9B,oBAAX,CACI,KAAKyB,KAAL,CAAWsB,cAAX,CAA0BS,SAA1B,CAAoCC,KADxC,EAEI;AACA,aAAK3B,KAAL,CAAWJ,KAAX,CAAiBc,QAHrB;AAKH,OAXD,MAWO,IAAIe,SAAS,KAAK,kBAAlB,EAAsC;AACzCR,QAAAA,cAAc,CAACQ,SAAD,CAAd,GAA4BD,SAA5B;AACA,eAAOP,cAAc,CAAC,iBAAD,CAArB,CAFyC,CAIzC;;AACA,aAAKjB,KAAL,CAAW7B,gBAAX,CACI,KAAKwB,KAAL,CAAWsB,cAAX,CAA0BS,SAA1B,CAAoCC,KADxC,EAEI,KAAKhC,KAAL,CAAWsB,cAAX,CAA0BW,gBAA1B,CAA2CD,KAF/C,EAGI,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBc,QAHrB;AAMH,OAXM,MAYF,IAAIe,SAAS,KAAK,iBAAlB,EAAqC;AACtCR,QAAAA,cAAc,CAACQ,SAAD,CAAd,GAA4BD,SAA5B;AAEA,aAAKrB,QAAL,CAAc;AAAEc,UAAAA;AAAF,SAAd;AACH,OAJI,MAKA;AACDA,QAAAA,cAAc,CAACQ,SAAD,CAAd,GAA4BD,SAA5B;AACA,aAAKrB,QAAL,CAAc;AAAEc,UAAAA;AAAF,SAAd;AACH,OApCqC,CAqCtC;AACA;;AACH,KA/UkB;;AAAA,SAiVnBY,eAjVmB,GAiVA3B,KAAD,IAAW;AAEzB,YAAMe,cAAc,GAAG,KAAKtB,KAAL,CAAWsB,cAAX,IAA6B,EAApD;;AACA,UAAIf,KAAK,CAAC4B,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCd,QAAAA,cAAc,CAACf,KAAK,CAAC4B,MAAN,CAAaE,IAAd,CAAd,GAAoC9B,KAAK,CAAC4B,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH,OAFD,MAGK;AACDhB,QAAAA,cAAc,CAACf,KAAK,CAAC4B,MAAN,CAAaE,IAAd,CAAd,GAAoC9B,KAAK,CAAC4B,MAAN,CAAaH,KAAjD;AACH;;AAED,WAAKxB,QAAL,CAAc;AAAEc,QAAAA;AAAF,OAAd;AACH,KA5VkB;;AAAA,SA+VnBH,UA/VmB,GA+VN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,cAAtC;AACA,UAAIC,aAAa,GAAG,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsB,aAArC;AACA,UAAII,UAAU,GAAG,KAAKtB,KAAL,CAAWJ,KAAX,CAAiB0B,UAAlC;AACA,UAAIY,iBAAJ;AACA,UAAIC,kBAAJ;AACA,UAAIC,eAAJ;;AAEA,UAAI,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBmB,SAArB,EAAgC;AAC5B,YAAI,KAAKf,KAAL,CAAWJ,KAAX,CAAiBuB,SAAjB,KAA+B,QAA/B,IAA2C,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBuB,SAAjB,KAA+B,QAA1E,IAAsF,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBuB,SAAjB,KAA+B,QAAzH,EAAmI;AAC/HJ,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,cAAc,GAAG,EAAjB;AAEH,SALD,MAMK;AACDF,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OAVD,MAWK;AACDC,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACAC,QAAAA,aAAa,GAAG,EAAhB;AACAI,QAAAA,UAAU,GAAG,IAAb;AACAY,QAAAA,iBAAiB,GAAG,EAApB;AACAC,QAAAA,kBAAkB,GAAG,EAArB;AACAC,QAAAA,eAAe,GAAG,EAAlB;AAEH;;AACD,YAAMhB,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE7C,cADK;AAEf6B,QAAAA,IAAI,EAAE;AACFW,UAAAA,SADE;AACSD,UAAAA,SADT;AACoBE,UAAAA,cADpB;AACoCK,UAAAA,UADpC;AACgDJ,UAAAA,aADhD;AAC+DgB,UAAAA,iBAD/D;AACkFC,UAAAA,kBADlF;AACsGC,UAAAA;AADtG;AAFS,OAAnB;AAMA,WAAKpC,KAAL,CAAWV,WAAX,CAAuB8B,UAAvB;AAGH,KAvYkB;;AAAA,SA2YnBiB,aA3YmB,GA2YH,MAAM;AAClB,YAAM7B,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKT,KAAL,CAAWJ,KAAX,CAAiBc,QADZ;AAER4B,YAAAA,OAAO,EAAE,KAAK3C,KAAL,CAAWsB,cAAX,CAA0B,eAA1B,CAFD;AAGRsB,YAAAA,WAAW,EAAE,KAAK5C,KAAL,CAAWsB,cAAX,CAA0B,aAA1B,KAA4C,KAAKtB,KAAL,CAAWsB,cAAX,CAA0B,aAA1B,EAAyCU,KAH1F;AAIRa,YAAAA,iBAAiB,EAAE,KAAK7C,KAAL,CAAWsB,cAAX,CAA0B,aAA1B,KAA4C,KAAKtB,KAAL,CAAWsB,cAAX,CAA0B,aAA1B,EAAyCwB;AAJhG,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAK/C,KAAL,CAAWsB,cAAX,CAA0B,eAA1B;AARH,SADI;AAWf0B,QAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+C;AAXd,OAAnB;AAaA,WAAK3C,KAAL,CAAWR,uBAAX,CAAmCgB,UAAnC,EAA+C,WAA/C;AACH,KA1ZkB;;AAAA,SA6ZnBoC,WA7ZmB,GA6ZL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAI,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBuB,SAAjB,KAA+B,QAAnC,EAA6C;AACzC,aAAK4B,sBAAL,CAA4BF,QAA5B,EAAsCC,OAAtC;AACH,OAFD,MAEO,IAAI,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBuB,SAAjB,KAA+B,QAAnC,EAA6C;AAChD,aAAK6B,sBAAL,CAA4BH,QAA5B,EAAsCC,OAAtC;AACH;AAIJ,KAtakB;;AAAA,SAyanBC,sBAzamB,GAyaM,CAACF,QAAD,EAAWC,OAAX,KAAuB;AAE5C,UAAIG,cAAc,GAAG,EAArB;AACA,WAAKtD,KAAL,CAAWsB,cAAX,CAA0BiC,eAA1B,IACI,KAAKvD,KAAL,CAAWsB,cAAX,CAA0BiC,eAA1B,CAA0CC,GAA1C,CAA8C9C,IAAI,IAAI;AAClD,eAAO4C,cAAc,CAACG,IAAf,CAAoB;AACvBC,UAAAA,UAAU,EAAE,MAAMhD,IAAI,CAACsB,KAAX,GAAmB,GADR;AAEvB2B,UAAAA,UAAU,EAAE,MAAMjD,IAAI,CAACsB,KAAX,GAAmB,GAFR,CAGvB;AACA;;AAJuB,SAApB,CAAP;AAMH,OAPD,CADJ;AAUA,YAAMnB,UAAU,GAAG;AACf+C,QAAAA,SAAS,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SADtB;AAEf5C,QAAAA,QAAQ,EAAE,YAFK;AAGfC,QAAAA,SAAS,EAAE,YAHI;AAIfH,QAAAA,SAAS,EAAE;AACP+C,UAAAA,QAAQ,EAAE,EACN,GAAG,KAAKxD,KAAL,CAAWJ,KAAX,CAAiBc,QADd;AAEN+C,YAAAA,SAAS,EAAE9E,mBAAmB,CAAC,KAAKqB,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B+C,SAA3B,CAFxB;AAGNC,YAAAA,WAAW,EAAE/E,mBAAmB,CAAC,KAAKqB,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0BgD,WAA3B;AAH1B,WADH;AAMP;AAEAC,UAAAA,YAAY,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SARjC;AASPK,UAAAA,YAAY,EAAE,KAAKjE,KAAL,CAAWsB,cAAX,CAA0BS,SAA1B,CAAoCC,KAT3C;AAUPD,UAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWsB,cAAX,CAA0BS,SAA1B,CAAoCe,KAVxC;AAWPb,UAAAA,gBAAgB,EAAE,KAAKjC,KAAL,CAAWsB,cAAX,CAA0BW,gBAA1B,CAA2CD,KAXtD;AAYPkC,UAAAA,qBAAqB,EAAE,KAAKlE,KAAL,CAAWsB,cAAX,CAA0BW,gBAA1B,CAA2Ca,KAZ3D;AAaPS,UAAAA,eAAe,EAAE,KAAKvD,KAAL,CAAWsB,cAAX,CAA0BiC,eAA1B,CAA0CC,GAA1C,CAA8C,UAAUW,EAAV,EAAc;AAAE,mBAAOA,EAAE,CAACnC,KAAV;AAAmB,WAAjF,EAAmFoC,IAAnF,CAAwF,GAAxF,KAAgG,IAb1G;AAcPC,UAAAA,oBAAoB,EAAE,KAAKrE,KAAL,CAAWsB,cAAX,CAA0BiC,eAA1B,CAA0CC,GAA1C,CAA8C,UAAUW,EAAV,EAAc;AAAE,mBAAQA,EAAE,CAACrB,KAAX;AAAmB,WAAjF,EAAmFsB,IAAnF,CAAwF,GAAxF,KAAgG,IAd/G;AAePE,UAAAA,kBAAkB,EAAEhB;AAfb,SAJI;AAqBf9B,QAAAA,SAAS,EAAE,QArBI;AAsBf0B,QAAAA,QAtBe;AAsBLC,QAAAA;AAtBK,OAAnB,CAb4C,CAsC5C;;AACA,YAAMoB,UAAU,GAAG,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAApC;;AAEA,UAAIzF,SAAS,CAAC,KAAKuB,KAAL,CAAWJ,KAAX,CAAiBuE,qBAAlB,EAAyC,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAAnE,EAA8E,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB+D,YAA/F,CAAb,EAA2H;AACvH,cAAMvC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7C,cADK;AAEf6B,UAAAA,IAAI,EAAE;AACFU,YAAAA,SAAS,EAAE,IADT;AACe4B,YAAAA,UAAU,EAAE;AAAEnC,cAAAA,UAAF;AAAc0D,cAAAA;AAAd,aAD3B;AACuDrB,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAK7C,KAAL,CAAWV,WAAX,CAAuB8B,UAAvB;AACH,OARD,MASK;AACD,aAAKpB,KAAL,CAAWT,UAAX,CAAsBiB,UAAtB,EAAkC0D,UAAlC,EAA8C,WAA9C;AACH;AAEJ,KA/dkB;;AAAA,SAienBlB,sBAjemB,GAieM,CAACH,QAAD,EAAWC,OAAX,KAAuB;AAG5C,YAAMtC,UAAU,GAAG;AACf+C,QAAAA,SAAS,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SADtB;AAEf5C,QAAAA,QAAQ,EAAE,YAFK;AAGfC,QAAAA,SAAS,EAAE,YAHI;AAIfH,QAAAA,SAAS,EAAE;AACP+C,UAAAA,QAAQ,EAAE,EACN,GAAG,KAAKxD,KAAL,CAAWJ,KAAX,CAAiBc,QADd;AAEN+C,YAAAA,SAAS,EAAE9E,mBAAmB,CAAC,KAAKqB,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B+C,SAA3B,CAFxB;AAGNC,YAAAA,WAAW,EAAE/E,mBAAmB,CAAC,KAAKqB,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0BgD,WAA3B;AAH1B,WADH;AAMP;AACAC,UAAAA,YAAY,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAPjC;AAQPa,UAAAA,eAAe,EAAE,KAAKzE,KAAL,CAAWsB,cAAX,CAA0BmD,eARpC;AASPR,UAAAA,YAAY,EAAE,KAAKjE,KAAL,CAAWsB,cAAX,CAA0BS,SAA1B,CAAoCC,KAT3C;AAUPD,UAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWsB,cAAX,CAA0BS,SAA1B,CAAoCe,KAVxC;AAWPb,UAAAA,gBAAgB,EAAE,KAAKjC,KAAL,CAAWsB,cAAX,CAA0BW,gBAA1B,CAA2CD,KAXtD;AAYPkC,UAAAA,qBAAqB,EAAE,KAAKlE,KAAL,CAAWsB,cAAX,CAA0BW,gBAA1B,CAA2Ca,KAZ3D;AAaP;AACA;AACAS,UAAAA,eAAe,EAAG,KAAKvD,KAAL,CAAWsB,cAAX,CAA0BiC,eAA1B,CAA0CvB,KAfrD;AAgBPqC,UAAAA,oBAAoB,EAAG,KAAKrE,KAAL,CAAWsB,cAAX,CAA0BiC,eAA1B,CAA0CT;AAhB1D,SAJI;AAuBftB,QAAAA,SAAS,EAAE,QAvBI;AAwBf0B,QAAAA,QAxBe;AAwBLC,QAAAA;AAxBK,OAAnB;AA2BA,YAAMoB,UAAU,GAAG,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAApC;;AAEA,UAAIzF,SAAS,CAAC,KAAKuB,KAAL,CAAWJ,KAAX,CAAiBuE,qBAAlB,EAAyC,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAAnE,EAA8E,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB+D,YAA/F,CAAb,EAA2H;AACvH,cAAMvC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7C,cADK;AAEf6B,UAAAA,IAAI,EAAE;AACFU,YAAAA,SAAS,EAAE,IADT;AACe4B,YAAAA,UAAU,EAAE;AAAEnC,cAAAA,UAAF;AAAc0D,cAAAA;AAAd,aAD3B;AACuDrB,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAK7C,KAAL,CAAWV,WAAX,CAAuB8B,UAAvB;AACH,OARD,MASK;AACD,aAAKpB,KAAL,CAAWT,UAAX,CAAsBiB,UAAtB,EAAkC0D,UAAlC,EAA8C,WAA9C;AACH;AACJ,KA7gBkB;;AAAA,SAmhBnBG,YAnhBmB,GAmhBHC,WAAD,IAAiB;AAC5B,YAAM9D,UAAU,GAAG;AACfG,QAAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BG,QADvB;AAEfC,QAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BI,SAFxB;AAGfC,QAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BK,WAH1B;AAIfJ,QAAAA,SAAS,EAAE;AACP,WAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BI,SAA5B,CAAsC2D,WAAtC,EAAD,GAAuDD,WAAW,CAACrD,cAD5D;AAC2E;AAClF,sBAAY,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBc;AAFtB,SAJI;AAQfS,QAAAA,SAAS,EAAEmD,WAAW,CAACnD,SARR;AASfb,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWW,SATP;AAUfW,QAAAA,cAAc,EAAEqD,WAAW,CAACrD;AAVb,OAAnB;;AAaA,UAAIxC,SAAS,CAAC,KAAKuB,KAAL,CAAWJ,KAAX,CAAiBuE,qBAAlB,EAAyC,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAAnE,EAA8Ee,WAAW,CAACX,YAA1F,CAAb,EAAsH;AAClH,cAAMvC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7C,cADK;AAEf6B,UAAAA,IAAI,EAAE;AACFU,YAAAA,SAAS,EAAE,IADT;AACe4B,YAAAA,UAAU,EAAE;AAAEnC,cAAAA,UAAF;AAAc0D,cAAAA,UAAU,EAAE,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE;AAA3C,aAD3B;AAEFlD,YAAAA,SAAS,EAAE,IAFT;AAEewD,YAAAA,UAAU,EAAE,KAAKxE,KAAL,CAAWyE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAC,KAAK3E,KAAL,CAAWJ,KAAX,CAAiBiB;AAAtB,aAA9B,CAF3B;AAGFM,YAAAA,SAAS,EAAEmD,WAAW,CAACnD;AAHrB;AAFS,SAAnB;AAQA,aAAKnB,KAAL,CAAWV,WAAX,CAAuB8B,UAAvB;AACH,OAVD,MAWK;AACD,aAAKpB,KAAL,CAAWT,UAAX,CAAsBiB,UAAtB,EAAkC,KAAKR,KAAL,CAAWJ,KAAX,CAAiBsE,UAAnD,EAA+D,WAA/D;AACH;AACJ,KA/iBkB;;AAEf,SAAKpB,OAAL,GAAe/E,KAAK,CAAC6G,SAAN,EAAf;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AAEA,UAAMvE,SAAS,GAAG;AACdwE,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,GAA4BC,QAAQ,CAAC,KAAKjF,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAKA,SAAKrF,KAAL,GAAa;AACTU,MAAAA,IAAI,EAAE,EADG;AACC6E,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8BlE,MAAAA,cAAc,EAAE,EAD9C;AAETb,MAAAA,UAAU,EAAE,EAFH;AAGTE,MAAAA,SAAS,EAAEA,SAHF;AAIT6D,MAAAA,qBAAqB,EAAE,EAJd;AAKTiB,MAAAA,UAAU,EAAE,IAAIC,GAAJ;AALH,KAAb;AAQH;;AAE8B,SAAxBC,wBAAwB,CAACtF,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYsF,YAAZ,KAA6B,EAA7B,IAAmClF,KAAK,CAACJ,KAAN,CAAYsF,YAAZ,KAA6BvF,KAAK,CAACuF,YAA1E,EAAwF;AACpFzF,MAAAA,KAAK,CAAC8F,IAAN,CAAWvF,KAAK,CAACJ,KAAN,CAAYsF,YAAvB;AACAlF,MAAAA,KAAK,CAACJ,KAAN,CAAYsF,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIlF,KAAK,CAACJ,KAAN,CAAYuF,KAAZ,KAAsBxF,KAAK,CAACwF,KAAhC,EAAuC;AACnC1F,MAAAA,KAAK,CAAC0F,KAAN,CAAYnF,KAAK,CAACJ,KAAN,CAAYuF,KAAxB;AACAnF,MAAAA,KAAK,CAACJ,KAAN,CAAYuF,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AA0BDK,EAAAA,MAAM,GAAG;AACL,QAAIC,eAAe,GAAG,EAAtB;;AAEA,QAAI,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,KAAgCkF,SAApC,EAA+C;AAE3C,WAAKb,mBAAL,GAA2B,CACvB;AAAE,uBAAe,WAAjB;AAA8B,mBAAW,wBAAzC;AAAmE,qBAAa,mBAAhF;AAAqG,iBAAS;AAA9G,OADuB,EACkG;AACzH;AAAE,uBAAe,WAAjB;AAA8B,mBAAW,uBAAzC;AAAkE,qBAAa,kBAA/E;AAAmG,iBAAS;AAA5G,OAFuB,EAEgG;AACvH;AAAE,uBAAe,WAAjB;AAA8B,mBAAW,gBAAzC;AAA2D,qBAAa,WAAxE;AAAqF,iBAAS;AAA9F,OAHuB,CAA3B;AAMAY,MAAAA,eAAe,GAAG,iBAAlB;AACH;;AACD,QAAIE,eAAe,GAAG,EAAtB;AACAA,IAAAA,eAAe,CAACvC,IAAhB,CACI;AAAE,mBAAa,IAAf;AAAqB,iBAAW,gBAAhC;AAAkD,mBAAa,WAA/D;AAA4E,wBAAkB,YAA9F;AAA4G,qBAAe;AAA3H,KADJ,EAEI;AAAE,mBAAa,IAAf;AAAqB,iBAAW,wBAAhC;AAA0D,mBAAa,kBAAvE;AAA2F,wBAAkB,YAA7G;AAA2H,qBAAe;AAA1I,KAFJ,EAGI;AAAE,mBAAa,IAAf;AAAqB,iBAAW,uBAAhC;AAAyD,mBAAa,iBAAtE;AAAyF,wBAAkB,YAA3G;AAAyH,qBAAe;AAAxI,KAHJ;AAOA,UAAMwC,eAAe,GAAG,KAAKjG,KAAL,CAAWyF,UAAX,CAAsBS,GAAtB,CAA0B,eAA1B,KAA8C,KAAKlG,KAAL,CAAWyF,UAAX,CAAsBU,GAAtB,CAA0B,eAA1B,EAA2CC,YAAjH;AACA,UAAMC,gBAAgB,GAAG,KAAKrG,KAAL,CAAWyF,UAAX,CAAsBS,GAAtB,CAA0B,gBAA1B,KAA+C,KAAKlG,KAAL,CAAWyF,UAAX,CAAsBU,GAAtB,CAA0B,gBAA1B,EAA4CC,YAApH,CAtBK,CAuBN;;AAGC,UAAME,SAAS,GAAG;AACdzB,MAAAA,UAAU,EAAE,KAAKxE,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,IAA+B,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BK,WAA3D,IAA0E,KAAKb,KAAL,CAAWyE,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE,KAAK3E,KAAL,CAAWJ,KAAX,CAAiBY,UAAjB,CAA4BK;AAAlC,OAA9B,CADxE;AACwJ4E,MAAAA,eAAe,EAAE,iBADzK;AAC4LtE,MAAAA,SAAS,EAAE,QADvM;AAEdX,MAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,UAFf;AAE2BE,MAAAA,QAAQ,EAAC,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,QAFrD;AAGdiD,MAAAA,YAAY,EAAEqC;AAHA,KAAlB;AAMA,UAAM1B,WAAW,GAAG;AAAEnD,MAAAA,SAAS,EAAE;AAAb,KAApB;AAEA,wBAAQ,uDACJ,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,2CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,IAAI,EAAC,iBAAf;AAAiC,MAAA,SAAS,EAAC,aAA3C;AACI,MAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWwE,qBAAX,CAAiC+B,OAAjC,CAAyC9G,aAAzC,MAA4D,CAAC,CADzE;AAEI,MAAA,OAAO,EAAE,MAAM,KAAKY,KAAL,CAAW/B,cAAX,CAA0BmB,aAA1B,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEL,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,oBAKI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,iBAArB;AAAuC,MAAA,cAAc,EAAC,mBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ,CAFJ,eAWI,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE0G,eADrB;AAEI,MAAA,UAAU,EAAE,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB0B,UAFjC;AAGI,MAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWU,IAHrB;AAII,MAAA,UAAU,EAAE,KAAKV,KAAL,CAAWS,UAAX,IAAyB,EAJzC;AAKI,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWW,SAL1B;AAMI,MAAA,eAAe,EAAE,KAAKL,eAN1B;AAOI,MAAA,mBAAmB,EAAE,KAAK4E,mBAP9B;AAQI,MAAA,UAAU,EAAE,KAAKlF,KAAL,CAAWyF,UAR3B;AASI,MAAA,qBAAqB,EAAE,KAAKzF,KAAL,CAAWwE,qBATtC;AAUI,MAAA,UAAU,EAAE,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBY,UAVjC;AAWI,MAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBc,QAX/B;AAYI,MAAA,WAAW,EAAE,KAAKV,KAAL,CAAW5B,uBAZ5B;AAaI,MAAA,YAAY,EAAE,KAAKiG,YAbvB;AAcI,MAAA,UAAU,EAAE,KAAK9D,UAdrB;AAeI,MAAA,SAAS,EAAE0F,SAff,CAgBI;AAhBJ;AAiBI,MAAA,SAAS,EAAE,MAAM,KAAKjG,KAAL,CAAW/B,cAAX,CAA0B2H,eAA1B,EAA2C,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBc,QAA5D,KAAyE,EAjB9F;AAkBI,MAAA,WAAW,EAAE4D,WAlBjB;AAmBI,MAAA,UAAU,EAAE,YAnBhB;AAoBI,MAAA,UAAU,EAAE,OApBhB;AAqBI,MAAA,gBAAgB,EAAE,IArBtB;AAsBI,MAAA,iBAAiB,EAAE,IAtBvB;AAuBI,MAAA,QAAQ,EAAE,IAvBd;AAwBI,MAAA,SAAS,EAAE,IAxBf;AAyBI,MAAA,KAAK,EAAE,KAAK3E,KAAL,CAAWwG,KAzBtB;AA0BI,MAAA,cAAc,EAAE,MAAM,IA1B1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ,CADJ,CADI,EAgDH,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBoB,SAAjB,iBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,SAD3B;AAEI,MAAA,UAAU,EAAE,KAAKF,UAFrB;AAGI,MAAA,SAAS,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiBuB,SAHhC;AAII,MAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBY,UAJjC;AAKI,MAAA,UAAU,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiB4E,UALjC;AAMI,MAAA,WAAW,EAAE,KAAK5B,WANtB;AAOI,MAAA,KAAK,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBmB,SAP5B;AAQI,MAAA,aAAa,EAAE,KAAKsB,aARxB;AASI,MAAA,YAAY,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiBsF,YATnC;AAUI,MAAA,cAAc,EAAE,KAAKvF,KAAL,CAAWsB,cAAX,IAA6B,EAVjD;AAWI,MAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWV,WAX5B;AAYI,MAAA,eAAe,EAAEqG,eAZrB;AAaI,MAAA,YAAY,EAAE,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjB,gBACV,oBAAC,KAAD;AACI,QAAA,SAAS,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBuB,SADhC;AAEI,QAAA,eAAe,EAAE,KAAKU,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBY,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKb,KAAL,CAAWsB,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,gBAOR,oBAAC,aAAD;AACE,QAAA,cAAc,EAAE,KAAKtB,KAAL,CAAWsB,cAAX,IAA6B,EAD/C;AAEE,QAAA,eAAe,EAAE,KAAKY,eAFxB;AAGE,QAAA,aAAa,EAAE,KAAKN,aAHtB;AAIE,QAAA,OAAO,EAAE,MAAM,KAAKP,SAAL,CAAe,iBAAf,CAJjB;AAKE,QAAA,eAAe,EAAE,KAAKrB,KAAL,CAAWyC,eAAX,IAA8B,EALjD;AAME,QAAA,kBAAkB,EAAE,KAAKzC,KAAL,CAAWwC,kBAAX,IAAiC,EANvD;AAOE,QAAA,iBAAiB,EAAE,KAAKxC,KAAL,CAAWuC,iBAPhC;AAQE,QAAA,UAAU,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBY,UAR/B;AASE,QAAA,UAAU,EAAE,KAAK4F,UATnB;AAUE,QAAA,UAAU,EAAE,KAAKzG,KAAL,CAAW0G,UAVzB;AAWE,QAAA,SAAS,EAAE,KAAKrG,KAAL,CAAWJ,KAAX,CAAiBuB,SAX9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjDA,CAAR;AAqFH;;AAGDmF,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAE9B,QAAI,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,KAAgCqC,aAAa,CAAC3G,KAAd,CAAoBsE,UAAxD,EAAoE;AAChE,UAAI,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAA1B,KAAwCgD,aAAa,CAAC3G,KAAd,CAAoBc,QAApB,CAA6B6C,SAAzE,EAAoF;AAChF,cAAMY,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBuE,qBAArB,EAA4C;AACxC,eAAKnE,KAAL,CAAWJ,KAAX,CAAiBuE,qBAAjB,CAAuC,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAAjE,KAA+EiD,MAAM,CAACC,MAAP,CAAc,KAAKzG,KAAL,CAAWJ,KAAX,CAAiBuE,qBAAjB,CAAuC,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAAjE,CAAd,EAA2FJ,GAA3F,CAA+FuD,IAAI,IAC9KvC,qBAAqB,CAACf,IAAtB,CAA2BsD,IAAI,CAACX,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMX,UAAU,GAAG1G,aAAa,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiBuE,qBAAlB,EAAyC,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBc,QAAjB,CAA0B6C,SAAnE,CAAhC;AACA,aAAKpD,QAAL,CAAc;AACVgE,UAAAA,qBADU;AACaiB,UAAAA,UADb;AACyB/E,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBsE,UADhD;AAEV9D,UAAAA,UAAU,EAAEtC,OAAO,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiBsE,UAAlB,EAA8B,KAAKvE,KAAL,CAAWW,SAAzC;AAFT,SAAd;AAIH,OAXD,MAYK;AACD,YAAI;AAAEA,UAAAA;AAAF,YAAgB,KAAKX,KAAzB;;AACA,YAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,SAAjB,KAA+BoF,SAAnC,EAA8C;AAC1CpF,UAAAA,SAAS,GAAG;AACZwE,YAAAA,IAAI,EAAE,CADM;AACHC,YAAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,GAA4BC,QAAQ,CAAC,KAAKjF,KAAL,CAAWJ,KAAX,CAAiBoF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AADzE,WAAZ;AAGH;;AACD,YAAImB,KAAK,GAAC,EAAV;AACAA,QAAAA,KAAK,GAAC,CAAC;AAACQ,UAAAA,KAAK,EAAE;AAAR,SAAD,CAAN;AACArG,QAAAA,SAAS,GAAG;AAAC6F,UAAAA;AAAD,SAAZ;AACA,aAAKhG,QAAL,CAAe;AAACG,UAAAA;AAAD,SAAf;AAEA,aAAKH,QAAL,CAAc;AACVE,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBsE,UADb;AAEV0C,UAAAA,MAAM,EAAE,KAFE;AAGV3F,UAAAA,cAAc,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB,cAHvB;AAIVb,UAAAA,UAAU,EAAEtC,OAAO,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiBsE,UAAlB,EAA8B5D,SAA9B,CAJT;AAKVA,UAAAA;AALU,SAAd;AAMH;AAGJ,KAlCD,MAkCO,IAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBqB,cAAjB,KAAoCsF,aAAa,CAAC3G,KAAd,CAAoBqB,cAA5D,EAA4E;AAC/E,WAAKd,QAAL,CAAc;AAAEc,QAAAA,cAAc,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB;AAAnC,OAAd;AACH,KAtC6B,CAwC9B;AACA;AACA;;;AAGA,QAAI,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBwC,eAAjB,KAAqCmE,aAAa,CAAC3G,KAAd,CAAoBwC,eAA7D,EAA8E;AAC1E,WAAKjC,QAAL,CAAc;AAAEiC,QAAAA,eAAe,EAAE,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwC;AAApC,OAAd;AACH;;AAED,QAAI,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBuC,kBAAjB,KAAwCoE,aAAa,CAAC3G,KAAd,CAAoBuC,kBAAhE,EAAoF;AAChF,WAAKhC,QAAL,CAAc;AAAEgC,QAAAA,kBAAkB,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBuC;AAAvC,OAAd;AACH;;AAED,QAAI,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBsC,iBAAjB,KAAuCqE,aAAa,CAAC3G,KAAd,CAAoBsC,iBAA/D,EAAkF;AAC9E,WAAK/B,QAAL,CAAc;AAAE+B,QAAAA,iBAAiB,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC;AAAtC,OAAd;AACH,KAvD6B,CA2D9B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAEH;;AAvQoC;;AAujBzC,eAAe7D,OAAO,CAACqB,eAAD,EAAkB;AAAEJ,EAAAA,WAAF;AAAeD,EAAAA,WAAf;AAA4BE,EAAAA,UAA5B;AAAwCC,EAAAA,uBAAxC;AAAiEvB,EAAAA,cAAjE;AAAiFC,EAAAA,oBAAjF;AAAuGC,EAAAA,gBAAvG;AAAyHC,EAAAA;AAAzH,CAAlB,CAAP,CAA6KE,UAAU,CAACuB,UAAD,CAAvL,CAAf","sourcesContent":["import { process } from '@progress/kendo-data-query';\r\nimport React from 'react'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { plantgroupsite, plantgroupdepartment, fusionplantchild, getActivePlantGroupById } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, Lims_JSON_stringify } from\r\n    '../../components/CommonScript';\r\nimport { Col, Row,  Nav } from 'react-bootstrap';\r\nimport { faPlus} from '@fortawesome/free-solid-svg-icons';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport DataGrid from '../../../src/components/data-grid/data-grid.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddPlantGroup from '../../pages/configurationmaster/AddPlantGroup';\r\nimport { callService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass PlantGroup extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"selectbox\", \"idsName\": \"IDS_FUSIONPRANENTPLANT\", \"dataField\": \"sparentsplantname\", \"width\": \"150px\" }, //parentsplantcode\r\n                { \"controlType\": \"selectbox\", \"idsName\": \"IDS_FUSIONCHILDPLANTS\", \"dataField\": \"schildsplantname\", \"width\": \"150px\" }, //childsplantcode\r\n                { \"controlType\": \"selectbox\", \"idsName\": \"IDS_FUSIONSITE\", \"dataField\": \"ssitecode\", \"width\": \"150px\" },\r\n            ]\r\n\r\n            primaryKeyField = \"nsiteprimarykey\";\r\n        }\r\n        let mandatoryFields = [];\r\n        mandatoryFields.push(\r\n            { \"mandatory\": true, \"idsName\": \"IDS_FUSIONSITE\", \"dataField\": \"ssitecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_FUSIONPRANENTPLANT\", \"dataField\": \"splantparentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_FUSIONCHILDPLANTS\", \"dataField\": \"splantchildcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        )\r\n\r\n\r\n        const addplantgroupId = this.state.controlMap.has(\"AddPlantGroup\") && this.state.controlMap.get(\"AddPlantGroup\").ncontrolcode;\r\n        const editplantgroupId = this.state.controlMap.has(\"EditPlantGroup\") && this.state.controlMap.get(\"EditPlantGroup\").ncontrolcode;\r\n       // const deleteplantgroupId = this.state.controlMap.has(\"DeletePlantGroup\") && this.state.controlMap.get(\"DeletePlantGroup\").ncontrolcode;\r\n\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nplantgroupcode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo:this.props.Login.userInfo,\r\n            ncontrolCode: editplantgroupId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n\r\n                        <div className=\"actions-stripe d-flex justify-content-end\">\r\n                            <Nav.Link name=\"addplantgroupId\" className=\"add-txt-btn\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(AddPlantGroup) === -1}\r\n                                onClick={() => this.props.plantgroupsite(AddPlantGroup)}\r\n                            >\r\n                                <FontAwesomeIcon icon={faPlus} /> { }\r\n                                <FormattedMessage id='IDS_FUSIONPLANT' defaultMessage='Validation Status' />\r\n                            </Nav.Link>\r\n                        </div>\r\n                        <DataGrid\r\n                            primaryKeyField={primaryKeyField}\r\n                            selectedId={this.props.Login.selectedId}\r\n                            data={this.state.data}\r\n                            dataResult={this.state.dataResult || []}\r\n                            dataState={this.state.dataState}\r\n                            dataStateChange={this.dataStateChange}\r\n                            extractedColumnList={this.extractedColumnList}\r\n                            controlMap={this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            fetchRecord={this.props.getActivePlantGroupById}\r\n                            deleteRecord={this.deleteRecord}\r\n                            reloadData={this.reloadData}\r\n                            editParam={editParam}\r\n                            //editParam={() => this.props.getActivePlantGroupById(editplantgroupId,\"nplantgroupcode\", this.props.Login.userInfo) || []}\r\n                            addRecord={() => this.props.plantgroupsite(addplantgroupId, this.props.Login.userInfo) || []}\r\n                            deleteParam={deleteParam}\r\n                            scrollable={\"scrollable\"}\r\n                            gridHeight={\"600px\"}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={true}\r\n                            pageable={true}\r\n                            groupable={true}\r\n                            group={this.state.group}\r\n                            groupPanelCell={() => null}\r\n\r\n                        />\r\n\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n            {this.props.Login.openModal &&\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    updateStore={this.props.updateStore}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : <AddPlantGroup\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            onClick={() => this.openModal(\"IDS_FUSIONPLANT\")}\r\n                            fusionplantSite={this.state.fusionplantSite || []}\r\n                            fusionparentplants={this.state.fusionparentplants || []}\r\n                            fusionchildplants={this.state.fusionchildplants}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            deleteFile={this.deleteFile}\r\n                            actionType={this.state.actionType}\r\n                            operation={this.props.Login.operation}\r\n                        />}\r\n                />\r\n            }\r\n        </>);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = {\r\n                    skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 \r\n                    }\r\n                }\r\n                let group=[];\r\n                group=[{field: \"sparentsplantname\" }]\r\n                dataState = {group}\r\n                this.setState( {dataState} );\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState });\r\n            }\r\n\r\n \r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        // if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n        //     this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        // }\r\n\r\n\r\n        if (this.props.Login.fusionplantSite !== previousProps.Login.fusionplantSite) {\r\n            this.setState({ fusionplantSite: this.props.Login.fusionplantSite });\r\n        }\r\n\r\n        if (this.props.Login.fusionparentplants !== previousProps.Login.fusionparentplants) {\r\n            this.setState({ fusionparentplants: this.props.Login.fusionparentplants });\r\n        }\r\n\r\n        if (this.props.Login.fusionchildplants !== previousProps.Login.fusionchildplants) {\r\n            this.setState({ fusionchildplants: this.props.Login.fusionchildplants });\r\n        }\r\n\r\n\r\n\r\n        // if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n        //     const userRoleControlRights = [];\r\n        //     if (this.props.Login.userRoleControlRights) {\r\n        //         this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n        //             userRoleControlRights.push(item.ncontrolcode))\r\n        //     }\r\n\r\n        //     const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        //     let skip = this.state.skip;\r\n        //     let take = this.state.take;\r\n        //     // if (reportTypeList.length < take) {\r\n        //     //     skip = 0;\r\n        //     //     take = take;\r\n        //     // }\r\n\r\n        //     this.setState({ userRoleControlRights,\r\n        //        controlMap,skip, take\r\n        //     });\r\n\r\n\r\n        // }\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let controlButton = this.props.Login.controlButton;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            controlButton = [];\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, selectedId: [], controlButton\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n\r\n        if (fieldName === \"ssitecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            delete selectedRecord[\"splantchildcode\"];\r\n            delete selectedRecord[\"splantparentcode\"];\r\n\r\n            //this.setState({ selectedRecord });\r\n            this.props.plantgroupdepartment(\r\n                this.state.selectedRecord.ssitecode.value,\r\n                // this.props.Login.masterData.SelectedReportMaster.nformcode,\r\n                this.props.Login.userInfo,\r\n            )\r\n        } else if (fieldName === \"splantparentcode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            delete selectedRecord[\"splantchildcode\"];\r\n\r\n            //this.setState({ selectedRecord });\r\n            this.props.fusionplantchild(\r\n                this.state.selectedRecord.ssitecode.value,\r\n                this.state.selectedRecord.splantparentcode.value,\r\n                this.props.Login.userInfo\r\n            );\r\n\r\n        }\r\n        else if (fieldName === \"splantchildcode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        //selectedRecord[fieldName] = comboData;;\r\n        // this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let controlButton = this.props.Login.controlButton;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let fusionchildplants;\r\n        let fusionparentplants;\r\n        let fusionplantSite;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            controlButton = [];\r\n            selectedId = null;\r\n            fusionchildplants = [];\r\n            fusionparentplants = [];\r\n            fusionplantSite = [];\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, selectedId, controlButton, fusionchildplants, fusionparentplants, fusionplantSite\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.operation === \"create\") {\r\n            this.onSavefusionPlantGroup(saveType, formRef);\r\n        } else if (this.props.Login.operation === \"update\") {\r\n            this.updatefusionPlantGroup(saveType, formRef);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    onSavefusionPlantGroup = (saveType, formRef) => {\r\n\r\n        let childparameter = [];\r\n        this.state.selectedRecord.splantchildcode &&\r\n            this.state.selectedRecord.splantchildcode.map(data => {\r\n                return childparameter.push({\r\n                    nchildcode: \"'\" + data.value + \"'\",\r\n                    splantcode: \"'\" + data.value + \"'\"\r\n                    // childplantname : data.item,\r\n                    // ssitecode:this.state.selectedRecord.ssitecode.value,\r\n                })\r\n            })\r\n\r\n        const inputParam = {\r\n            nformcode: this.props.Login.userInfo.nformcode,\r\n            classUrl: \"plantgroup\",\r\n            methodUrl: \"PlantGroup\",\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                },\r\n                //indexof:\r\n\r\n                ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                nmappingsite: this.state.selectedRecord.ssitecode.value,\r\n                ssitecode: this.state.selectedRecord.ssitecode.label,\r\n                splantparentcode: this.state.selectedRecord.splantparentcode.value,\r\n                splantparentcodeLable: this.state.selectedRecord.splantparentcode.label,\r\n                splantchildcode: this.state.selectedRecord.splantchildcode.map(function (el) { return el.value ; }).join(\",\") || null,\r\n                splantchildcodeLable: this.state.selectedRecord.splantchildcode.map(function (el) { return  el.label; }).join(\",\") || null,\r\n                childparameterlist: childparameter\r\n            },\r\n            operation: \"create\",\r\n            saveType, formRef,\r\n        }\r\n\r\n        //inputData[\"completetreepath\"] = masterData.CompleteTreePath;\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    updatefusionPlantGroup = (saveType, formRef) => {\r\n\r\n\r\n        const inputParam = {\r\n            nformcode: this.props.Login.userInfo.nformcode,\r\n            classUrl: \"plantgroup\",\r\n            methodUrl: \"PlantGroup\",\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                },\r\n                //indexof:\r\n                ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                nplantgroupcode: this.state.selectedRecord.nplantgroupcode,\r\n                nmappingsite: this.state.selectedRecord.ssitecode.value,\r\n                ssitecode: this.state.selectedRecord.ssitecode.label,\r\n                splantparentcode: this.state.selectedRecord.splantparentcode.value,\r\n                splantparentcodeLable: this.state.selectedRecord.splantparentcode.label,\r\n                //splantchildcode: this.state.selectedRecord.splantchildcode.map(function (el) { return \"'\"+el.value+\"'\"; }).join(\",\") || null,\r\n                //splantchildcodeLable: this.state.selectedRecord.splantchildcode.map(function (el) { return  \"'\"+el.label+\"'\"; }).join(\",\") || null,\r\n                splantchildcode:  this.state.selectedRecord.splantchildcode.value ,\r\n                splantchildcodeLable:  this.state.selectedRecord.splantchildcode.label \r\n\r\n            },\r\n            operation: \"update\",\r\n            saveType, formRef,\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState,\r\n            selectedRecord: deleteParam.selectedRecord\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id:this.props.Login.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, { updateStore, callService, crudMaster, validateEsignCredential, plantgroupsite, plantgroupdepartment, fusionplantchild, getActivePlantGroupById })(injectIntl(PlantGroup));\r\n"]},"metadata":{},"sourceType":"module"}