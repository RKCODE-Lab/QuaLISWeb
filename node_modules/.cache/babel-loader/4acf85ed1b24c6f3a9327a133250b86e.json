{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\approval\\\\EditApprovalParameter.jsx\";\nimport { process } from '@progress/kendo-data-query';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component'; // import ColumnMenu from '../../components/data-grid/ColumnMenu';\n\nimport { transactionStatus } from '../../components/Enumeration';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\n\nclass EditApprovalParameter extends React.Component {\n  constructor(props) {\n    super(props); //let group=this.props.nsubsampleneed===transactionStatus.NO?[{ field: 'sarno' },{ field: 'stestsynonym' }]: [{ field: 'ssamplearno' },{ field: 'stestsynonym' }]\n\n    this.dataStateChange = event => {\n      this.setState({\n        data: process(this.props.ApprovalParamEdit, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.expandChange1 = event => {\n      const expandField = event.target.props.expandField || \"\";\n      event.dataItem[expandField] = event.value;\n      this.setState({\n        data: process(this.props.ApprovalParamEdit, this.state.dataState),\n        dataState: this.state.dataState\n      });\n    };\n\n    this.expandChange = event => {\n      // const data = process(this.props.ApprovalParamEdit,this.state.dataState);\n      // console.log(\"data:\", data, event);\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded; // event.dataItem.aggregates && event.dataItem.aggregates.length > 0 ? event.dataItem.aggregates \n      // :true\n      // : event.dataItem.expanded;\n\n      if (this.props.hasChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        this.props.handleExpandChange(event, this.props.dataState);\n      } else {\n        event.dataItem.expanded = event.value; // this.setState({\n        //     isExpanded,\n        //     data: process(this.props.ApprovalParamEdit, this.state.dataState),\n        //     dataState: this.state.dataState\n        // });\n\n        this.setState({\n          isExpanded\n        });\n      }\n    };\n\n    const group = this.props.nsubsampleneed === transactionStatus.NO ? [{\n      field: 'sarno'\n    }] : [{\n      field: 'ssamplearno'\n    }];\n    this.state = {\n      dataState: {\n        skip: 0,\n        take: 10,\n        group\n      },\n      isExpanded: false,\n      data: process(this.props.ApprovalParamEdit, {\n        skip: 0,\n        take: 10,\n        group\n      })\n    };\n  }\n\n  // columnProps(field) {\n  //     return {\n  //         field: field,\n  //         columnMenu: ColumnMenu,\n  //         headerClassName: this.isColumnActive(field, this.state.dataState) ? 'active' : ''\n  //     };\n  // }\n  // isColumnActive(field, dataState) {\n  //     return GridColumnMenuFilter.active(field, dataState.filter)\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      sortable: true,\n      resizable: true,\n      scrollable: \"scrollable\" //groupable={false}\n      ,\n      onExpandChange: this.expandChange,\n      expandField: \"expanded\",\n      detail: false,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true,\n        previousNext: false\n      },\n      data: this.state.data\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      title: this.props.intl.formatMessage({\n        id: \"IDS_PARAMETER\"\n      }) // {...this.columnProps(\"sparametersynonym\")}\n      ,\n      field: \"sparametersynonym\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      title: this.props.intl.formatMessage({\n        id: \"IDS_TESTSYNONYM\"\n      }),\n      field: \"stestsynonym\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"nreportmandatory\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_REPORTMANDATORY\"\n      }),\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][\"ntransactionresultcode\"],\n        role: \"button\",\n        onChange: event => this.props.changeMandatory(event, row[\"dataItem\"]),\n        checked: this.props.selectedRecord[row[\"dataItem\"][\"ntransactionresultcode\"]] ? this.props.selectedRecord[row[\"dataItem\"][\"ntransactionresultcode\"]] === transactionStatus.YES ? true : false : row[\"dataItem\"][\"nreportmandatory\"] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][\"nreportmandatory\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 45\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props !== previousProps) {\n      // let group = this.props.nsubsampleneed === transactionStatus.NO ? [{ field: 'sarno' }] : [{ field: 'ssamplearno' }]\n      //let group=this.props.nsubsampleneed===transactionStatus.NO?[{ field: 'sarno' },{ field: 'stestsynonym' }]: [{ field: 'ssamplearno' },{ field: 'stestsynonym' }]\n      this.setState({\n        data: process(this.props.ApprovalParamEdit, this.state.dataState),\n        //dataState: {skip:0,take:10,group}\n        dataState: this.state.dataState\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(EditApprovalParameter);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/approval/EditApprovalParameter.jsx"],"names":["process","Grid","GridColumn","React","Col","Row","injectIntl","CustomSwitch","transactionStatus","AtTableWrap","LocalizationProvider","EditApprovalParameter","Component","constructor","props","dataStateChange","event","setState","data","ApprovalParamEdit","dataState","expandChange1","expandField","target","dataItem","value","state","expandChange","isExpanded","expanded","undefined","aggregates","hasChild","handleExpandChange","group","nsubsampleneed","NO","field","skip","take","render","actionColWidth","buttonCount","pageSizes","previousNext","intl","formatMessage","id","row","rowType","changeMandatory","selectedRecord","YES","dataIndex","columnIndex","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import { process } from '@progress/kendo-data-query';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport React from 'react'\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n// import ColumnMenu from '../../components/data-grid/ColumnMenu';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport {  LocalizationProvider } from '@progress/kendo-react-intl';\r\n\r\nclass EditApprovalParameter extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //let group=this.props.nsubsampleneed===transactionStatus.NO?[{ field: 'sarno' },{ field: 'stestsynonym' }]: [{ field: 'ssamplearno' },{ field: 'stestsynonym' }]\r\n        const group = this.props.nsubsampleneed === transactionStatus.NO ? [{ field: 'sarno' }] : [{ field: 'ssamplearno' }]\r\n        this.state = {\r\n            dataState: { skip: 0, take: 10, group },\r\n            isExpanded: false,\r\n            data: process(this.props.ApprovalParamEdit, { skip: 0, take: 10, group })\r\n        }\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            data: process(this.props.ApprovalParamEdit, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    expandChange1 = (event) => {\r\n        const expandField = event.target.props.expandField || \"\";\r\n        event.dataItem[expandField] = event.value;\r\n        this.setState({\r\n            data: process(this.props.ApprovalParamEdit, this.state.dataState),\r\n            dataState: this.state.dataState\r\n        });\r\n    };\r\n\r\n\r\n    expandChange = (event) => {\r\n        // const data = process(this.props.ApprovalParamEdit,this.state.dataState);\r\n        // console.log(\"data:\", data, event);\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\r\n        // event.dataItem.aggregates && event.dataItem.aggregates.length > 0 ? event.dataItem.aggregates \r\n        // :true\r\n        // : event.dataItem.expanded;\r\n\r\n        if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.props.handleExpandChange(event, this.props.dataState)\r\n        }\r\n        else {\r\n            event.dataItem.expanded = event.value;\r\n\r\n            // this.setState({\r\n            //     isExpanded,\r\n            //     data: process(this.props.ApprovalParamEdit, this.state.dataState),\r\n            //     dataState: this.state.dataState\r\n            // });\r\n            this.setState({\r\n                isExpanded\r\n            });\r\n\r\n        }\r\n    }\r\n    // columnProps(field) {\r\n\r\n    //     return {\r\n    //         field: field,\r\n    //         columnMenu: ColumnMenu,\r\n    //         headerClassName: this.isColumnActive(field, this.state.dataState) ? 'active' : ''\r\n    //     };\r\n\r\n    // }\r\n\r\n    // isColumnActive(field, dataState) {\r\n    //     return GridColumnMenuFilter.active(field, dataState.filter)\r\n    // }\r\n    render() {\r\n        return (\r\n            <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                 <LocalizationProvider language=\"lang\">\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <Grid\r\n                            sortable\r\n                            resizable\r\n                            scrollable={\"scrollable\"}\r\n                            //groupable={false}\r\n                            onExpandChange={this.expandChange}\r\n                            expandField=\"expanded\"\r\n                            detail={false}\r\n                            pageable={{ buttonCount: 4, pageSizes: true, previousNext: false }}\r\n                            data={this.state.data}\r\n                            {...this.state.dataState}\r\n                            onDataStateChange={this.dataStateChange}\r\n                        >\r\n                            <GridColumn\r\n                                title={this.props.intl.formatMessage({ id: \"IDS_PARAMETER\" })}\r\n                                // {...this.columnProps(\"sparametersynonym\")}\r\n                                field={\"sparametersynonym\"}\r\n                            />\r\n                            <GridColumn\r\n                                title={this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                                field={\"stestsynonym\"}\r\n                            />\r\n                            <GridColumn\r\n                                field={\"nreportmandatory\"}\r\n                                title={this.props.intl.formatMessage({ id: \"IDS_REPORTMANDATORY\" })}\r\n                                cell={(row) => (\r\n                                    row.rowType === \"groupHeader\" ? null :\r\n                                        <td>\r\n                                            <CustomSwitch\r\n                                                type=\"switch\"\r\n                                                id={row[\"dataItem\"][\"ntransactionresultcode\"]}\r\n                                                role=\"button\"\r\n                                                onChange={(event) => this.props.changeMandatory(event, row[\"dataItem\"])}\r\n                                                checked={this.props.selectedRecord[row[\"dataItem\"][\"ntransactionresultcode\"]] ? this.props.selectedRecord[row[\"dataItem\"][\"ntransactionresultcode\"]] === transactionStatus.YES ? true : false :\r\n                                                    row[\"dataItem\"][\"nreportmandatory\"] === transactionStatus.YES ? true : false}\r\n                                                name={row[\"dataItem\"][\"nreportmandatory\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                        </td>)}\r\n                            />\r\n                        </Grid>\r\n                    </Col>\r\n                </Row>\r\n                </LocalizationProvider>\r\n            </AtTableWrap>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props !== previousProps) {\r\n            // let group = this.props.nsubsampleneed === transactionStatus.NO ? [{ field: 'sarno' }] : [{ field: 'ssamplearno' }]\r\n\r\n            //let group=this.props.nsubsampleneed===transactionStatus.NO?[{ field: 'sarno' },{ field: 'stestsynonym' }]: [{ field: 'ssamplearno' },{ field: 'stestsynonym' }]\r\n            this.setState({\r\n                data: process(this.props.ApprovalParamEdit, this.state.dataState),\r\n                //dataState: {skip:0,take:10,group}\r\n                dataState: this.state.dataState\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default injectIntl(EditApprovalParameter)"]},"metadata":{},"sourceType":"module"}