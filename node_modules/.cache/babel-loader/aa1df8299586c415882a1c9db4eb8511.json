{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\project\\\\ProjectMasterTab.jsx\";\nimport React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl'; //FormattedMessage,\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { toast } from 'react-toastify';\nimport Esign from '../audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, showEsign, create_UUID, deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\nimport ProjectMasterMemberTabs from './ProjectMasterMemberTabs';\nimport ProjectMasterFileTab from './ProjectMasterFileTab';\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport AddProjectMember from \"../../pages/project/AddProjectMember\";\nimport AddProjectMasterFile from './AddProjectMasterFile';\nimport { formatInputDate } from \"../../components/CommonScript\";\n\nclass ProjectMasterTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.tabDetail = () => {\n      const addteammembersId = this.props.controlMap.has(\"AddTeammembers\") && this.props.controlMap.get(\"AddTeammembers\").ncontrolcode;\n      const deleteteammembersId = this.props.controlMap.has(\"DeleteTeammembers\") && this.props.controlMap.get(\"DeleteTeammembers\").ncontrolcode;\n      const projectmasterAddParam = {\n        screenName: \"IDS_MEMBERS\",\n        operation: \"create\",\n        primaryKeyField: \"nprojectmembercode\",\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addteammembersId\n      };\n      const projectmasterDeleteParam = {\n        //    screenName: \"IDS_MEMBERS\", methodUrl: \"ProjectMember\", operation: \"delete\", ncontrolCode: deleteteammembersId \n        screenName: \"IDS_MEMBERS\",\n        operation: \"delete\",\n        primaryKeyField: \"nprojectmembercode\",\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo,\n        ncontrolCode: deleteteammembersId\n      };\n      const tabMap = new Map();\n      tabMap.set(\"IDS_MEMBERS\", /*#__PURE__*/React.createElement(ProjectMasterMemberTabs, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        addId: addteammembersId,\n        addParam: projectmasterAddParam,\n        comboDataService: this.props.getProjectmasterAddMemberService,\n        addTitleIDS: \"IDS_PROJECTMEMBER\",\n        addTitleDefaultMsg: 'ProjectMember',\n        primaryKeyField: \"nprojectmembercode\",\n        masterData: this.props.masterData,\n        primaryList: \"ProjectMember\",\n        dataResult: this.props.dataResult,\n        dataState: this.props.dataState,\n        dataStateChange: this.props.dataStateChange,\n        columnList: this.projectmemberColumnList,\n        methodUrl: this.props.methodUrl,\n        deleteRecord: this.props.deleteRecord,\n        deleteParam: projectmasterDeleteParam // deleteParam={deleteteammembersId}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 35\n        }\n      }));\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(ProjectMasterFileTab, {\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights,\n        userInfo: this.props.userInfo,\n        inputParam: this.props.inputParam,\n        deleteRecord: this.deleteRecord,\n        projectmasterfile: this.props.masterData.projectmasterFile || [],\n        getAvailableData: this.props.getAvailableData,\n        addProjectMasterFile: this.props.addProjectMasterFile,\n        viewProjectMasterFile: this.viewProjectMasterFile,\n        defaultRecord: this.defaultRecord // screenName=\"ProjectMaster File\"\n        ,\n        screenName: \"IDS_FILE\",\n        settings: this.props.settings,\n        ntransactionstatus: this.props.ntransactionstatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 32\n        }\n      }));\n      return tabMap;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal; // let selectedRecord = this.props.selectedRecord;\n\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = '';\n          selectedRecord['esigncomments'] = '';\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.viewProjectMasterFile = filedata => {\n      const inputParam = {\n        inputData: {\n          projectmasterfile: filedata,\n          userinfo: this.props.userInfo\n        },\n        classUrl: \"projectmaster\",\n        operation: \"view\",\n        methodUrl: \"AttachedProjectMasterFile\",\n        screenName: \"ProjectMaster File\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let projectMasterData = [];\n      let inputParam = {};\n      projectMasterData[\"userinfo\"] = this.props.userInfo;\n      let postParam = {\n        inputListName: \"ProjectMasterList\",\n        selectedObject: \"SelectedProjectMaster\",\n        primaryKeyField: \"nprojectmastercode\"\n      };\n\n      if (this.props.operation === \"update\" && this.props.screenName === \"IDS_ADDPROJECTMASTER\") {\n        postParam[\"primaryKeyValue\"] = this.props.masterData.SelectedProjectMaster.nprojectmastercode;\n        projectMasterData[\"projectMaster\"] = {\n          nprojectmastercode: this.props.masterData.SelectedProjectMaster.nprojectmastercode,\n          //     nprojecttypecode:this.state.selectedRecord.nprojecttypecode.value,\n          sprojecttitle: this.state.selectedRecord.sprojecttitle,\n          sprojectcode: this.state.selectedRecord.sprojectcode,\n          sprojectdescription: this.state.selectedRecord.sprojectdescription,\n          // drfwdate: formatInputDate(this.state.selectedRecord[\"drfwdate\"],false),\n          // dprojectstartdate: formatInputDate(this.state.selectedRecord[\"dprojectstartdate\"],false),\n          //     nstudydirectorcode:this.state.selectedRecord.nstudydirectorcode.value,\n          //     nteammembercode: this.state.selectedRecord.nteammembercode.value,\n          //     nperiodcode: this.state.selectedRecord.nperiodcode.value,\n          nprojectduration: this.state.selectedRecord.nprojectduration\n        };\n      } else if (this.props.operation === \"create\" && this.props.screenName === \"IDS_ADDPROJECTMASTER\") {\n        projectMasterData[\"projectMaster\"] = {\n          nsitecode: this.props.userInfo.nmastersitecode,\n          sprojecttitle: this.state.selectedRecord.sprojecttitle,\n          sprojectcode: this.state.selectedRecord.sprojectcode,\n          sprojectdescription: this.state.selectedRecord.sprojectdescription,\n          nprojectduration: parseInt(this.state.selectedRecord.nprojectduration)\n        };\n        /*     this.projectMasterFieldList.map((item) => {\r\n               return (projectMasterData[\"projectMaster\"][item] = this.state.selectedRecord[item] == \"\" || this.state.selectedRecord[item] == undefined ?\r\n               undefined :this.state.selectedRecord[item]);\r\n             }); */\n      } else if ((this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.screenName === \"IDS_FILE\") {\n        inputParam = this.onSaveProjectMasterFile(saveType, formRef);\n      }\n\n      if ((this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.screenName === \"IDS_ADDPROJECTMASTER\") {\n        projectMasterData[\"projectMaster\"][\"nprojecttypecode\"] = this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"].value : transactionStatus.NA;\n        projectMasterData[\"projectMaster\"][\"nstudydirectorcode\"] = this.state.selectedRecord[\"nstudydirectorcode\"] ? this.state.selectedRecord[\"nstudydirectorcode\"].value : transactionStatus.NA;\n        projectMasterData[\"projectMaster\"][\"nteammembercode\"] = this.state.selectedRecord[\"nteammembercode\"] ? this.state.selectedRecord[\"nteammembercode\"].value : transactionStatus.NA;\n        projectMasterData[\"projectMaster\"][\"nperiodcode\"] = this.state.selectedRecord[\"nperiodcode\"] ? this.state.selectedRecord[\"nperiodcode\"].value : transactionStatus.NA; // if (this.state.selectedRecord[\"drfwdate\"] || this.state.selectedRecord[\"dprojectstartdate\"]) {\n        //   if (this.props.Login.operation === \"create\") {\n\n        projectMasterData[\"projectMaster\"][\"drfwdate\"] = formatInputDate(this.state.selectedRecord[\"drfwdate\"], false);\n        projectMasterData[\"projectMaster\"][\"dprojectstartdate\"] = formatInputDate(this.state.selectedRecord[\"dprojectstartdate\"], false); //   }\n        //   else {\n        //     projectMasterData[\"projectMaster\"][\"drfwdate\"] = formatInputDate(this.state.selectedRecord[\"drfwdate\"],false);\n        //     projectMasterData[\"projectMaster\"][\"dprojectstartdate\"] = formatInputDate(this.state.selectedRecord[\"dprojectstartdate\"],false);\n        //   }\n        // }\n      }\n\n      if (this.props.operation === \"create\" && this.props.screenName === \"IDS_MEMBERS\") {\n        /*        projectMasterData[\"ProjectMember\"] = {};\r\n                  projectMasterData[\"ProjectMember\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"][0] ? this.state.selectedRecord[\"nusercode\"][0].value\r\n                  : transactionStatus.NA;\r\n                  projectMasterData[\"ProjectMember\"][\"nprojectmastercode\"] =this.props.masterData.SelectedProjectMaster.nprojectmastercode; */\n        inputParam = this.onSaveProjectMasterMember(saveType, formRef);\n      }\n\n      if ((this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.screenName === \"IDS_ADDPROJECTMASTER\") {\n        inputParam = {\n          classUrl: \"projectmaster\",\n          methodUrl: \"ProjectMaster\",\n          inputData: projectMasterData,\n          operation: this.props.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          isClearSearch: this.props.isClearSearch\n        };\n      }\n      /*else if ((this.props.operation === \"create\")  &&  (this.props.screenName === \"IDS_MEMBERS\")) {\r\n             inputParam = {\r\n         classUrl: \"projectmaster\",\r\n         methodUrl: \"ProjectMember\",\r\n         inputData: projectMasterData,\r\n         operation: this.props.operation,\r\n         saveType,\r\n         formRef,\r\n         postParam,\r\n         searchRef: this.searchRef,\r\n         isClearSearch: this.props.isClearSearch,\r\n       }\r\n      } */\n\n\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.onSaveProjectMasterFile = (saveType, formRef) => {\n      const selectedRecord = this.props.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let projectmasterFileArray = [];\n      let projectmasterFile = {\n        nprojectmastercode: this.props.masterData.SelectedProjectMaster.nprojectmastercode,\n        nprojecttypecode: this.props.masterData.SelectedProjectMaster.nprojecttypecode,\n        nprojectmasterfilecode: selectedRecord.nprojectmasterfilecode ? selectedRecord.nprojectmasterfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode // ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, projectmasterFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nsupplierfilecode && selectedRecord.nsupplierfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            projectmasterFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          projectmasterFile[\"sfilename\"] = selectedRecord.sfilename;\n          projectmasterFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          projectmasterFile[\"nlinkcode\"] = transactionStatus.NA;\n          projectmasterFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          projectmasterFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          projectmasterFileArray.push(projectmasterFile);\n        }\n      } else {\n        projectmasterFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        projectmasterFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        projectmasterFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        projectmasterFile[\"ssystemfilename\"] = \"\";\n        projectmasterFile[\"nfilesize\"] = 0;\n        projectmasterFileArray.push(projectmasterFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"projectmasterfile\", JSON.stringify(projectmasterFileArray)); // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"ProjectMaster\",\n          selectedObject: \"SelectedProjectMaster\",\n          primaryKeyField: \"nprojectmastercode\"\n        };\n        selectedId = selectedRecord[\"nprojectmasterfilecode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.operation,\n        classUrl: \"projectmaster\",\n        saveType,\n        formRef,\n        methodUrl: \"ProjectMasterFile\",\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.deleteRecord = projectmasterfileparam => {\n      if (this.props.masterData.SelectedProjectMaster.ntransactionstatus === transactionStatus.DRAFT) {\n        let inputParam = {};\n        let inputData = {}; // if (this.props.screenName === 'ProjectMaster File') { \n\n        let selectedRecord = projectmasterfileparam.selectedRecord;\n        selectedRecord = { ...selectedRecord,\n          ntransactionstatus: this.props.masterData.SelectedProjectMaster.ntransactionstatus\n        }; // inputData[\"projectmasterfile\"]={\n        //     selectedRecord                    \n        //     };\n\n        if (this.props.screenName === 'IDS_FILE') {\n          inputParam = {\n            classUrl: \"projectmaster\",\n            methodUrl: projectmasterfileparam.methodUrl,\n            inputData: {\n              \"projectmasterfile\": selectedRecord,\n              \"userinfo\": this.props.userInfo\n            },\n            operation: projectmasterfileparam.operation,\n            //dataState: this.state.dataState,\n            //dataStateMaterial: this.state.dataStateMaterial\n            dataState: this.state.dataState\n          };\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, projectmasterfileparam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: projectmasterfileparam.screenName,\n              operation: projectmasterfileparam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORD\"\n        }));\n      }\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'ProjectMembers-tab',\n      dataState: dataState\n    };\n    this.projectmemberColumnList = [{\n      \"idsName\": \"IDS_LOGINID\",\n      \"dataField\": \"sloginid\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USER\",\n      \"dataField\": \"steammembername\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  render() {\n    // const mandatoryFields = [];\n    let mandatoryFields = [];\n\n    if (this.props.screenName === 'IDS_FILE') {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      }\n    } else if (this.props.screenName === 'IDS_MEMBERS') {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"nusercode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    })))), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {} //   mandatoryFields={this.props.screenName === \"IDS_MEMBERS\" ? mandatoryFields : mandatoryFields || []}\n      ,\n      mandatoryFields: this.mandatoryFields || [],\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_MEMBERS\" ? /*#__PURE__*/React.createElement(AddProjectMember, {\n        MembersList: this.props.MembersList // selectedRecord={this.state.selectedRecord || {}}\n        ,\n        selectedRecord: this.props.selectedRecord || {} //  onComboChange={this.onComboChange}\n        ,\n        onComboChange: this.props.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_FILE\" ? /*#__PURE__*/React.createElement(AddProjectMasterFile, {\n        selectedRecord: this.props.selectedRecord || {},\n        onInputOnChange: this.props.onInputOnChange,\n        onDrop: this.props.onDropProjectMasterFile,\n        onDropAccepted: this.onDropAccepted,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType // onComboChange={this.onComboChange}\n        ,\n        onComboChange: this.props.onComboChange,\n        linkMaster: this.props.linkMaster,\n        editFiles: this.props.editFiles,\n        maxSize: 20,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_FILENAME\"\n        }),\n        name: \"projectmasterfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 37\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  onSaveProjectMasterMember(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo; // inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\n\n    inputData[\"ProjectMember\"] = {};\n    let projectmemberArray = [];\n    projectmemberArray = this.props.selectedRecord.nusercode.map(item => {\n      let projectMasterData = {};\n      projectMasterData[\"nusercode\"] = item.value;\n      projectMasterData[\"nprojectmastercode\"] = this.props.masterData.SelectedProjectMaster.nprojectmastercode;\n      return projectMasterData;\n    });\n    inputData['ProjectMember'] = projectmemberArray;\n    const inputParam = {\n      classUrl: \"projectmaster\",\n      methodUrl: \"ProjectMember\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef\n    };\n    return inputParam;\n  }\n\n}\n\nexport default injectIntl(ProjectMasterTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/project/ProjectMasterTab.jsx"],"names":["React","Row","Col","Card","injectIntl","SlideOutModal","toast","Esign","DEFAULT_RETURN","constructOptionList","showEsign","create_UUID","deleteAttachmentDropZone","onDropAttachFileList","ProjectMasterMemberTabs","ProjectMasterFileTab","transactionStatus","attachmentType","CustomTabs","AddProjectMember","AddProjectMasterFile","formatInputDate","ProjectMasterTab","Component","constructor","props","onTabChange","tabProps","screenName","updateInfo","typeName","data","updateStore","onComboChange","comboData","fieldName","selectedRecord","state","setState","tabDetail","addteammembersId","controlMap","has","get","ncontrolcode","deleteteammembersId","projectmasterAddParam","operation","primaryKeyField","masterData","userInfo","ncontrolCode","projectmasterDeleteParam","tabMap","Map","set","userRoleControlRights","inputParam","getProjectmasterAddMemberService","dataResult","dataState","dataStateChange","projectmemberColumnList","methodUrl","deleteRecord","projectmasterFile","getAvailableData","addProjectMasterFile","viewProjectMasterFile","defaultRecord","settings","ntransactionstatus","closeModal","loadEsign","openChildModal","filedata","inputData","projectmasterfile","userinfo","classUrl","viewAttachment","onSaveClick","saveType","formRef","projectMasterData","postParam","inputListName","selectedObject","SelectedProjectMaster","nprojectmastercode","sprojecttitle","sprojectcode","sprojectdescription","nprojectduration","nsitecode","nmastersitecode","parseInt","onSaveProjectMasterFile","value","NA","onSaveProjectMasterMember","searchRef","isClearSearch","nformcode","screenData","crudMaster","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","projectmasterFileArray","nprojecttypecode","nprojectmasterfilecode","nstatus","ACTIVE","formData","FormData","FTP","Array","isArray","length","forEach","file","index","tempData","Object","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","nsupplierfilecode","sdescription","trim","size","append","push","YES","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","selectedId","undefined","isFileupload","projectmasterfileparam","DRAFT","esignRights","warn","intl","formatMessage","id","deleteAttachment","event","actionType","validateEsign","sreason","password","validateEsignCredential","skip","take","isOpen","activeTab","render","mandatoryFields","LINK","onInputOnChange","MembersList","onDropProjectMasterFile","onDropAccepted","linkMaster","editFiles","projectmemberArray","nusercode","map","item"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';  //FormattedMessage,\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { toast } from 'react-toastify';\r\nimport Esign from '../audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { constructOptionList, showEsign, create_UUID, deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\r\nimport ProjectMasterMemberTabs from './ProjectMasterMemberTabs';\r\nimport ProjectMasterFileTab from './ProjectMasterFileTab';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport AddProjectMember from \"../../pages/project/AddProjectMember\";\r\nimport AddProjectMasterFile from './AddProjectMasterFile';\r\nimport { formatInputDate } from \"../../components/CommonScript\";\r\n\r\nclass ProjectMasterTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'ProjectMembers-tab',\r\n            dataState: dataState\r\n\r\n        };\r\n\r\n        this.projectmemberColumnList = [\r\n\r\n            { \"idsName\": \"IDS_LOGINID\", \"dataField\": \"sloginid\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USER\", \"dataField\": \"steammembername\", \"width\": \"200px\" }\r\n\r\n        ]\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        // const mandatoryFields = [];\r\n        let mandatoryFields = [];\r\n\r\n        if (this.props.screenName === 'IDS_FILE') {\r\n\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandatoryFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n\r\n                mandatoryFields = [{ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }];\r\n\r\n            }\r\n        } else if (this.props.screenName === 'IDS_MEMBERS') {\r\n\r\n            mandatoryFields = [{ \"idsName\": \"IDS_USER\", \"dataField\": \"nusercode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.openChildModal &&\r\n                    <SlideOutModal show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        updateStore={this.props.updateStore}\r\n                        esign={this.props.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        //   mandatoryFields={this.props.screenName === \"IDS_MEMBERS\" ? mandatoryFields : mandatoryFields || []}\r\n                        mandatoryFields={this.mandatoryFields || []}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign operation={this.props.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_MEMBERS\" ?\r\n                                <AddProjectMember\r\n                                    MembersList={this.props.MembersList}\r\n                                    // selectedRecord={this.state.selectedRecord || {}}\r\n                                    selectedRecord={this.props.selectedRecord || {}}\r\n                                    //  onComboChange={this.onComboChange}\r\n                                    onComboChange={this.props.onComboChange}\r\n\r\n                                /> :\r\n                                this.props.screenName === \"IDS_FILE\" ?\r\n                                    <AddProjectMasterFile\r\n                                        selectedRecord={this.props.selectedRecord || {}}\r\n                                        onInputOnChange={this.props.onInputOnChange}\r\n                                        onDrop={this.props.onDropProjectMasterFile}\r\n                                        onDropAccepted={this.onDropAccepted}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        actionType={this.state.actionType}\r\n                                        // onComboChange={this.onComboChange}\r\n                                        onComboChange={this.props.onComboChange}\r\n                                        linkMaster={this.props.linkMaster}\r\n                                        editFiles={this.props.editFiles}\r\n                                        maxSize={20}\r\n                                        maxFiles={1}\r\n                                        multiple={false}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                        name=\"projectmasterfilename\"\r\n                                    /> : \"\"\r\n                        }\r\n\r\n                    />\r\n                }\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    tabDetail = () => {\r\n\r\n        const addteammembersId = this.props.controlMap.has(\"AddTeammembers\") && this.props.controlMap.get(\"AddTeammembers\").ncontrolcode;\r\n        const deleteteammembersId = this.props.controlMap.has(\"DeleteTeammembers\") && this.props.controlMap.get(\"DeleteTeammembers\").ncontrolcode;\r\n\r\n        const projectmasterAddParam = {\r\n            screenName: \"IDS_MEMBERS\", operation: \"create\", primaryKeyField: \"nprojectmembercode\",\r\n            masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addteammembersId\r\n        };\r\n\r\n        const projectmasterDeleteParam = {\r\n\r\n            //    screenName: \"IDS_MEMBERS\", methodUrl: \"ProjectMember\", operation: \"delete\", ncontrolCode: deleteteammembersId \r\n\r\n            screenName: \"IDS_MEMBERS\", operation: \"delete\", primaryKeyField: \"nprojectmembercode\",\r\n            masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: deleteteammembersId\r\n        };\r\n\r\n\r\n\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_MEMBERS\", <ProjectMasterMemberTabs\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            addId={addteammembersId}\r\n            addParam={projectmasterAddParam}\r\n            comboDataService={this.props.getProjectmasterAddMemberService}\r\n            addTitleIDS={\"IDS_PROJECTMEMBER\"}\r\n            addTitleDefaultMsg={'ProjectMember'}\r\n            primaryKeyField={\"nprojectmembercode\"}\r\n            masterData={this.props.masterData}\r\n            primaryList={\"ProjectMember\"}\r\n            dataResult={this.props.dataResult}\r\n            dataState={this.props.dataState}\r\n            dataStateChange={this.props.dataStateChange}\r\n            columnList={this.projectmemberColumnList}\r\n            methodUrl={this.props.methodUrl}\r\n            deleteRecord={this.props.deleteRecord}\r\n            deleteParam={projectmasterDeleteParam}\r\n        // deleteParam={deleteteammembersId}\r\n        />)\r\n\r\n\r\n        tabMap.set(\"IDS_FILE\", <ProjectMasterFileTab\r\n            controlMap={this.props.controlMap}\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            userInfo={this.props.userInfo}\r\n            inputParam={this.props.inputParam}\r\n            deleteRecord={this.deleteRecord}\r\n            projectmasterfile={this.props.masterData.projectmasterFile || []}\r\n            getAvailableData={this.props.getAvailableData}\r\n            addProjectMasterFile={this.props.addProjectMasterFile}\r\n            viewProjectMasterFile={this.viewProjectMasterFile}\r\n            defaultRecord={this.defaultRecord}\r\n            // screenName=\"ProjectMaster File\"\r\n            screenName=\"IDS_FILE\"\r\n            settings={this.props.settings}\r\n            ntransactionstatus={this.props.ntransactionstatus}\r\n        />);\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        // let selectedRecord = this.props.selectedRecord;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = '';\r\n                selectedRecord['esigncomments'] = '';\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n    viewProjectMasterFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                projectmasterfile: filedata,\r\n                userinfo: this.props.userInfo\r\n            },\r\n            classUrl: \"projectmaster\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedProjectMasterFile\",\r\n            screenName: \"ProjectMaster File\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n\r\n\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let projectMasterData = [];\r\n        let inputParam = {};\r\n        projectMasterData[\"userinfo\"] = this.props.userInfo;\r\n\r\n        let postParam = {\r\n            inputListName: \"ProjectMasterList\",\r\n            selectedObject: \"SelectedProjectMaster\",\r\n            primaryKeyField: \"nprojectmastercode\",\r\n        };\r\n\r\n        if ((this.props.operation === \"update\") && (this.props.screenName === \"IDS_ADDPROJECTMASTER\")) {\r\n\r\n            postParam[\"primaryKeyValue\"] =\r\n                this.props.masterData.SelectedProjectMaster.nprojectmastercode;\r\n\r\n            projectMasterData[\"projectMaster\"] = {\r\n                nprojectmastercode: this.props.masterData.SelectedProjectMaster.nprojectmastercode,\r\n                //     nprojecttypecode:this.state.selectedRecord.nprojecttypecode.value,\r\n                sprojecttitle: this.state.selectedRecord.sprojecttitle,\r\n                sprojectcode: this.state.selectedRecord.sprojectcode,\r\n                sprojectdescription: this.state.selectedRecord.sprojectdescription,\r\n                // drfwdate: formatInputDate(this.state.selectedRecord[\"drfwdate\"],false),\r\n                // dprojectstartdate: formatInputDate(this.state.selectedRecord[\"dprojectstartdate\"],false),\r\n                //     nstudydirectorcode:this.state.selectedRecord.nstudydirectorcode.value,\r\n                //     nteammembercode: this.state.selectedRecord.nteammembercode.value,\r\n                //     nperiodcode: this.state.selectedRecord.nperiodcode.value,\r\n                nprojectduration: this.state.selectedRecord.nprojectduration,\r\n\r\n            };\r\n\r\n        } else if ((this.props.operation === \"create\") && (this.props.screenName === \"IDS_ADDPROJECTMASTER\")) {\r\n\r\n            projectMasterData[\"projectMaster\"] = {\r\n\r\n                nsitecode: this.props.userInfo.nmastersitecode,\r\n                sprojecttitle: this.state.selectedRecord.sprojecttitle,\r\n                sprojectcode: this.state.selectedRecord.sprojectcode,\r\n                sprojectdescription: this.state.selectedRecord.sprojectdescription,\r\n                nprojectduration: parseInt(this.state.selectedRecord.nprojectduration)\r\n            };\r\n\r\n            /*     this.projectMasterFieldList.map((item) => {\r\n                   return (projectMasterData[\"projectMaster\"][item] = this.state.selectedRecord[item] == \"\" || this.state.selectedRecord[item] == undefined ?\r\n                   undefined :this.state.selectedRecord[item]);\r\n                 }); */\r\n\r\n        } else if (((this.props.operation === \"create\") || (this.props.operation === \"update\")) && (this.props.screenName === \"IDS_FILE\")) {\r\n\r\n            inputParam = this.onSaveProjectMasterFile(saveType, formRef);\r\n        }\r\n\r\n        if (((this.props.operation === \"create\") || (this.props.operation === \"update\")) && (this.props.screenName === \"IDS_ADDPROJECTMASTER\")) {\r\n\r\n            projectMasterData[\"projectMaster\"][\"nprojecttypecode\"] = this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"].value\r\n                : transactionStatus.NA;\r\n\r\n            projectMasterData[\"projectMaster\"][\"nstudydirectorcode\"] = this.state.selectedRecord[\"nstudydirectorcode\"] ? this.state.selectedRecord[\"nstudydirectorcode\"].value\r\n                : transactionStatus.NA;\r\n\r\n            projectMasterData[\"projectMaster\"][\"nteammembercode\"] = this.state.selectedRecord[\"nteammembercode\"] ? this.state.selectedRecord[\"nteammembercode\"].value\r\n                : transactionStatus.NA;\r\n\r\n            projectMasterData[\"projectMaster\"][\"nperiodcode\"] = this.state.selectedRecord[\"nperiodcode\"] ? this.state.selectedRecord[\"nperiodcode\"].value\r\n                : transactionStatus.NA;\r\n\r\n\r\n            // if (this.state.selectedRecord[\"drfwdate\"] || this.state.selectedRecord[\"dprojectstartdate\"]) {\r\n            //   if (this.props.Login.operation === \"create\") {\r\n\r\n            projectMasterData[\"projectMaster\"][\"drfwdate\"] = formatInputDate(this.state.selectedRecord[\"drfwdate\"], false);\r\n            projectMasterData[\"projectMaster\"][\"dprojectstartdate\"] = formatInputDate(this.state.selectedRecord[\"dprojectstartdate\"], false);\r\n\r\n            //   }\r\n            //   else {\r\n\r\n            //     projectMasterData[\"projectMaster\"][\"drfwdate\"] = formatInputDate(this.state.selectedRecord[\"drfwdate\"],false);\r\n            //     projectMasterData[\"projectMaster\"][\"dprojectstartdate\"] = formatInputDate(this.state.selectedRecord[\"dprojectstartdate\"],false);\r\n\r\n            //   }\r\n            // }\r\n        }\r\n\r\n        if ((this.props.operation === \"create\") && (this.props.screenName === \"IDS_MEMBERS\")) {\r\n\r\n            /*        projectMasterData[\"ProjectMember\"] = {};\r\n                      projectMasterData[\"ProjectMember\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"][0] ? this.state.selectedRecord[\"nusercode\"][0].value\r\n                      : transactionStatus.NA;\r\n                      projectMasterData[\"ProjectMember\"][\"nprojectmastercode\"] =this.props.masterData.SelectedProjectMaster.nprojectmastercode; */\r\n\r\n            inputParam = this.onSaveProjectMasterMember(saveType, formRef);\r\n        }\r\n\r\n        if (((this.props.operation === \"create\") || (this.props.operation === \"update\")) && (this.props.screenName === \"IDS_ADDPROJECTMASTER\")) {\r\n\r\n            inputParam = {\r\n                classUrl: \"projectmaster\",\r\n                methodUrl: \"ProjectMaster\",\r\n                inputData: projectMasterData,\r\n                operation: this.props.operation,\r\n                saveType,\r\n                formRef,\r\n                postParam,\r\n                searchRef: this.searchRef,\r\n                isClearSearch: this.props.isClearSearch,\r\n            };\r\n        }/*else if ((this.props.operation === \"create\")  &&  (this.props.screenName === \"IDS_MEMBERS\")) {\r\n    \r\n          inputParam = {\r\n            classUrl: \"projectmaster\",\r\n            methodUrl: \"ProjectMember\",\r\n            inputData: projectMasterData,\r\n            operation: this.props.operation,\r\n            saveType,\r\n            formRef,\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            isClearSearch: this.props.isClearSearch,\r\n          }\r\n        } */\r\n\r\n\r\n        const masterData = this.props.masterData;\r\n\r\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    saveType,\r\n                },\r\n            };\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n        }\r\n\r\n    };\r\n\r\n    onSaveProjectMasterFile = (saveType, formRef) => {\r\n        const selectedRecord = this.props.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let projectmasterFileArray = [];\r\n        let projectmasterFile = {\r\n            nprojectmastercode: this.props.masterData.SelectedProjectMaster.nprojectmastercode,\r\n            nprojecttypecode: this.props.masterData.SelectedProjectMaster.nprojecttypecode,\r\n            nprojectmasterfilecode: selectedRecord.nprojectmasterfilecode ? selectedRecord.nprojectmasterfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            // ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, projectmasterFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nsupplierfilecode && selectedRecord.nsupplierfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    projectmasterFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                projectmasterFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                projectmasterFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                projectmasterFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                projectmasterFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                projectmasterFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                projectmasterFileArray.push(projectmasterFile);\r\n            }\r\n        } else {\r\n            projectmasterFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            projectmasterFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            projectmasterFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            projectmasterFile[\"ssystemfilename\"] = \"\";\r\n            projectmasterFile[\"nfilesize\"] = 0;\r\n            projectmasterFileArray.push(projectmasterFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"projectmasterfile\", JSON.stringify(projectmasterFileArray));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n\r\n        let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"ProjectMaster\", selectedObject: \"SelectedProjectMaster\", primaryKeyField: \"nprojectmastercode\" };\r\n            selectedId = selectedRecord[\"nprojectmasterfilecode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"projectmaster\",\r\n            saveType, formRef, methodUrl: \"ProjectMasterFile\", postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n\r\n    onSaveProjectMasterMember(saveType, formRef) {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        // inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\r\n        inputData[\"ProjectMember\"] = {};\r\n\r\n\r\n        let projectmemberArray = []\r\n        projectmemberArray = this.props.selectedRecord.nusercode.map(item => {\r\n            let projectMasterData = {}\r\n\r\n            projectMasterData[\"nusercode\"] = item.value\r\n            projectMasterData[\"nprojectmastercode\"] = this.props.masterData.SelectedProjectMaster.nprojectmastercode;\r\n\r\n\r\n            return projectMasterData;\r\n        });\r\n        inputData['ProjectMember'] = projectmemberArray;\r\n\r\n        const inputParam = {\r\n            classUrl: \"projectmaster\",\r\n            methodUrl: \"ProjectMember\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteRecord = (projectmasterfileparam) => {\r\n\r\n        if (this.props.masterData.SelectedProjectMaster.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n            let inputParam = {};\r\n            let inputData = {};\r\n            // if (this.props.screenName === 'ProjectMaster File') { \r\n            let selectedRecord = projectmasterfileparam.selectedRecord\r\n\r\n            selectedRecord = { ...selectedRecord, ntransactionstatus: this.props.masterData.SelectedProjectMaster.ntransactionstatus }\r\n\r\n            // inputData[\"projectmasterfile\"]={\r\n            //     selectedRecord                    \r\n            //     };\r\n\r\n            if (this.props.screenName === 'IDS_FILE') {\r\n                inputParam = {\r\n                    classUrl: \"projectmaster\",\r\n                    methodUrl: projectmasterfileparam.methodUrl,\r\n                    inputData: {\r\n\r\n                        \"projectmasterfile\": selectedRecord,\r\n                        \"userinfo\": this.props.userInfo\r\n                    },\r\n\r\n                    operation: projectmasterfileparam.operation,\r\n                    //dataState: this.state.dataState,\r\n                    //dataStateMaterial: this.state.dataStateMaterial\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, projectmasterfileparam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: projectmasterfileparam.screenName, operation: projectmasterfileparam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        }\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\n\r\nexport default injectIntl(ProjectMasterTab);\r\n\r\n"]},"metadata":{},"sourceType":"module"}