{"ast":null,"code":"import shortid from \"shortid\";\nimport { ReactComponents } from \"../Enumeration\";\nimport { ROW, COLUMN, COMPONENT, COMPONENTROW } from \"./constants\"; // a little function to help us with reordering the result\n\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed); // inserting task in new index\n\n  return result;\n};\nexport const remove = (arr, index) => [// part of the array before the specified index\n...arr.slice(0, index), // part of the array after the specified index\n...arr.slice(index + 1)];\nexport const replacechild = (origalarray, replacearray, index) => [// part of the array before the specified index\n...origalarray.slice(0, index), replacearray, // part of the array after the specified index\n...origalarray.slice(index + 1)];\nexport const insert = (arr, index, newItem) => [// part of the array before the specified index\n...arr.slice(0, index), // inserted item\nnewItem, // part of the array after the specified index\n...arr.slice(index)];\nexport const reorderChildren = (children, splitDropZonePath, splitItemPath) => {\n  if (splitDropZonePath.length === 1) {\n    const dropZoneIndex = Number(splitDropZonePath[0]);\n    const itemIndex = Number(splitItemPath[0]);\n    return reorder(children, itemIndex, dropZoneIndex);\n  }\n\n  const updatedChildren = [...children];\n  const curIndex = Number(splitDropZonePath.slice(0, 1)); // Update the specific node's children\n\n  const splitDropZoneChildrenPath = splitDropZonePath.slice(1);\n  const splitItemChildrenPath = splitItemPath.slice(1);\n  const nodeChildren = updatedChildren[curIndex];\n  updatedChildren[curIndex] = { ...nodeChildren,\n    children: reorderChildren(nodeChildren.children, splitDropZoneChildrenPath, splitItemChildrenPath)\n  };\n  return updatedChildren;\n};\nexport const removeChildFromChildren = (children, splitItemPath) => {\n  if (splitItemPath.length === 1) {\n    const itemIndex = Number(splitItemPath[0]);\n    return remove(children, itemIndex);\n  }\n\n  let updatedChildren = [...children];\n  const curIndex = Number(splitItemPath.slice(0, 1)); // Update the specific node's children\n\n  const splitItemChildrenPath = splitItemPath.slice(1);\n  const nodeChildren = updatedChildren[curIndex]; // updatedChildren[curIndex] = {\n  //   ...nodeChildren,\n  //   children: removeChildFromChildren(\n  //     nodeChildren.children,\n  //     splitItemChildrenPath\n  //   )\n  // };\n\n  if (nodeChildren.children !== undefined) {\n    if (nodeChildren.type === COMPONENTROW && nodeChildren.children.length === 1) {\n      const list = removeChildFromChildren(children, splitItemPath.slice(0, 1));\n      updatedChildren = [...list];\n    } else if (nodeChildren.type === COMPONENTROW && (nodeChildren.children.length === 1 || nodeChildren.children.length === 2)) {\n      const list = removeChildFromChildren(nodeChildren.children, splitItemChildrenPath);\n      const list1 = replacechild(children, ...list, curIndex);\n      updatedChildren = [...list1];\n    } else {\n      updatedChildren[curIndex] = { ...nodeChildren,\n        children: removeChildFromChildren(nodeChildren.children, splitItemChildrenPath)\n      };\n    }\n  } else {\n    // if(nodeChildren.type===COMPONENTROW){\n    const list = removeChildFromChildren(children, splitItemPath.slice(0, 1));\n    updatedChildren = [...list]; // }\n  }\n\n  return updatedChildren;\n};\nexport const addChildToChildren = (children, splitDropZonePath, item) => {\n  if (splitDropZonePath.length === 1) {\n    const dropZoneIndex = Number(splitDropZonePath[0]);\n    return insert(children, dropZoneIndex, item);\n  }\n\n  const updatedChildren = [...children];\n  const curIndex = Number(splitDropZonePath.slice(0, 1)); // Update the specific node's children\n\n  const splitItemChildrenPath = splitDropZonePath.slice(1);\n  const nodeChildren = updatedChildren[curIndex];\n\n  if (nodeChildren.children !== undefined) {\n    updatedChildren[curIndex] = { ...nodeChildren,\n      children: addChildToChildren(nodeChildren.children, splitItemChildrenPath, item)\n    };\n  } else {\n    updatedChildren[curIndex] = {\n      type: COMPONENTROW,\n      id: shortid.generate(),\n      children: addChildToChildren([nodeChildren], splitItemChildrenPath, item)\n    };\n  }\n\n  return updatedChildren;\n};\nexport const handleMoveWithinParent = (layout, splitDropZonePath, splitItemPath) => {\n  return reorderChildren(layout, splitDropZonePath, splitItemPath);\n};\nexport const handleAddColumDataToRow = layout => {\n  const layoutCopy = [...layout];\n  const COLUMN_STRUCTURE = {\n    type: COLUMN,\n    id: shortid.generate(),\n    children: []\n  };\n  return layoutCopy.map(row => {\n    if (!row.children.length) {\n      row.children = [COLUMN_STRUCTURE];\n    }\n\n    return row;\n  });\n};\nexport const handleMoveToDifferentParent = (layout, splitDropZonePath, splitItemPath, item) => {\n  let newLayoutStructure;\n  const COLUMN_STRUCTURE = {\n    type: COLUMN,\n    id: shortid.generate(),\n    children: [{\n      type: COMPONENT,\n      id: shortid.generate(),\n      ...item\n    }]\n  };\n  const ROW_STRUCTURE = {\n    type: ROW,\n    id: shortid.generate()\n  };\n\n  switch (splitDropZonePath.length) {\n    case 1:\n      {\n        // moving column outside into new row made on the fly\n        if (item.type === COLUMN) {\n          newLayoutStructure = { ...ROW_STRUCTURE,\n            children: [item]\n          };\n        } else {\n          // moving component outside into new row made on the fly\n          newLayoutStructure = { ...ROW_STRUCTURE,\n            children: [COLUMN_STRUCTURE]\n          };\n        }\n\n        break;\n      }\n\n    case 2:\n      {\n        // moving component outside into a row which creates column\n        if (item.type === COMPONENTROW) {\n          newLayoutStructure = COLUMN_STRUCTURE;\n        } else {\n          // moving column into existing row\n          newLayoutStructure = item;\n        }\n\n        break;\n      }\n\n    case 3:\n      {\n        // moving component outside into a column which creates componentrow\n        if (item.type === COMPONENTROW) {\n          newLayoutStructure = { ...item,\n            type: COMPONENT,\n            id: shortid.generate()\n          };\n        } else {\n          // moving column into existing row\n          if (item.children === undefined) {\n            newLayoutStructure = item;\n            delete newLayoutStructure[\"children\"];\n          } else {\n            newLayoutStructure = { ...item,\n              type: COMPONENTROW\n            };\n          }\n        }\n\n        break;\n      }\n\n    default:\n      {\n        newLayoutStructure = item;\n      }\n  }\n\n  let updatedLayout = layout;\n  updatedLayout = removeChildFromChildren(updatedLayout, splitItemPath);\n  updatedLayout = handleAddColumDataToRow(updatedLayout);\n  updatedLayout = addChildToChildren(updatedLayout, splitDropZonePath, newLayoutStructure);\n  return updatedLayout;\n};\nexport const handleMoveSidebarComponentIntoParent = (layout, splitDropZonePath, item) => {\n  let newLayoutStructure;\n\n  switch (splitDropZonePath.length) {\n    case 1:\n      {\n        newLayoutStructure = {\n          type: ROW,\n          id: shortid.generate(),\n          children: [{\n            type: COLUMN,\n            id: shortid.generate(),\n            children: [{\n              type: COMPONENT,\n              id: shortid.generate(),\n              ...item\n            }]\n          }]\n        };\n        break;\n      }\n\n    case 2:\n      {\n        newLayoutStructure = {\n          type: COLUMN,\n          id: shortid.generate(),\n          children: [{\n            type: COMPONENT,\n            id: shortid.generate(),\n            ...item\n          }]\n        };\n        break;\n      }\n\n    case 3:\n      {\n        newLayoutStructure = {\n          type: COMPONENT,\n          id: shortid.generate(),\n          ...item\n        };\n        break;\n      }\n\n    case 4:\n      {\n        newLayoutStructure = {\n          type: COMPONENT,\n          id: shortid.generate(),\n          ...item\n        };\n        break;\n      }\n\n    default:\n      {\n        newLayoutStructure = item;\n      }\n  }\n\n  return addChildToChildren(layout, splitDropZonePath, newLayoutStructure);\n};\nexport const handleRemoveItemFromLayout = (layout, splitItemPath) => {\n  return removeChildFromChildren(layout, splitItemPath);\n};\nexport const getcomponentdata = (children, splitItemPath) => {\n  const itemIndex = Number(splitItemPath[0]);\n  let updatedata = children[itemIndex] !== undefined ? children[itemIndex] : children[itemIndex - 1] !== undefined ? children[itemIndex - 1] : {};\n\n  if (updatedata.children !== undefined) {\n    const splitItemChildrenPath = splitItemPath.length > 1 ? splitItemPath.slice(1) : splitItemPath;\n    updatedata = getcomponentdata(updatedata.children, splitItemChildrenPath);\n  } else {\n    return updatedata;\n  }\n\n  return updatedata;\n};\nexport const replaceChildFromChildren = (children, splitItemPath, replacedata) => {\n  if (splitItemPath.length === 1) {\n    const itemIndex = Number(splitItemPath[0]);\n    return replacechild(children, replacedata, itemIndex);\n  } else if (splitItemPath.length === 2) {\n    splitItemPath[2] = '0';\n    return replaceChildFromChildren(children, splitItemPath, replacedata);\n  }\n\n  let updatedChildren = [...children];\n  const curIndex = Number(splitItemPath.slice(0, 1)); // Update the specific node's children\n\n  const splitItemChildrenPath = splitItemPath.slice(1);\n  const nodeChildren = updatedChildren[curIndex];\n\n  if (nodeChildren.children !== undefined) {\n    if (nodeChildren.type === COMPONENTROW) {\n      updatedChildren[curIndex] = { ...nodeChildren,\n        children: replaceChildFromChildren(nodeChildren.children, splitItemChildrenPath, replacedata)\n      };\n    } else {\n      updatedChildren[curIndex] = { ...nodeChildren,\n        children: replaceChildFromChildren(nodeChildren.children, splitItemChildrenPath, replacedata)\n      };\n    }\n  } else {\n    const list = replaceChildFromChildren(children, splitItemPath.slice(0, 1), replacedata);\n    updatedChildren = [...list];\n  }\n\n  return updatedChildren;\n};\nexport const getValidComponent = (selectedFieldRecord, components, columnInfo) => {\n  let validComponents = [];\n  let currentCompChild = [];\n  components.map(comp => {\n    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n      selectedFieldRecord.child && selectedFieldRecord.child.map(myChild => currentCompChild.push(myChild.label));\n\n      if (columnInfo && columnInfo[comp.nquerybuildertablecode]) {\n        if (columnInfo[selectedFieldRecord.nquerybuildertablecode]) {\n          if (columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.length) {\n            columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(mycol => {\n              //commented by pravinth\n              //  if (mycol.foriegntablePK === columnInfo[comp.nquerybuildertablecode].primaryKeyName) {\n              if (mycol.foriegntablePK === 'ndynamicmastercode') {\n                //  columnInfo[comp.nquerybuildertablecode].jstaticColumns.map(mycol2=>{\n                const index = columnInfo[comp.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === mycol.parentforeignPK && comp.nformcode === mycol.foreigntableformcode);\n\n                if (index !== -1) {\n                  // const val=columnInfo[comp.nquerybuildertablecode].jstaticColumns[index]\n                  if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\n                    validComponents.push(comp);\n                    currentCompChild.push(comp.label);\n                  }\n                } // if (mycol2.label columnInfo[comp.nquerybuildertablecode].jstaticco) {\n                //     if (!currentCompChild.includes(comp.label)&&selectedFieldRecord.label!==comp.label) {\n                //         validComponents.push(comp)\n                //         currentCompChild.push(comp.label)\n                //     }\n                // }\n                //  })                                                                  \n\n              } else {\n                if (mycol.foriegntablePK === columnInfo[comp.nquerybuildertablecode].primaryKeyName) {\n                  if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\n                    validComponents.push(comp);\n                    currentCompChild.push(comp.label);\n                  }\n                }\n              }\n            });\n            columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\n              //commented by pravinth\n              //if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\n              if (selectedFieldRecord.valuemember === 'ndynamicmastercode') {\n                const index = columnInfo[selectedFieldRecord.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === otherCol.parentforeignPK && selectedFieldRecord.table.item.nformcode === otherCol.foreigntableformcode);\n\n                if (index !== -1) {\n                  if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\n                    validComponents.push(comp);\n                    currentCompChild.push(comp.label);\n                  }\n                }\n              } else {\n                if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\n                  if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\n                    validComponents.push(comp);\n                    currentCompChild.push(comp.label);\n                  }\n                }\n              }\n            });\n          } else {\n            columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\n              //commented by pravinth\n              //if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\n              if (selectedFieldRecord.valuemember === 'ndynamicmastercode') {\n                const index = columnInfo[selectedFieldRecord.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === otherCol.parentforeignPK && selectedFieldRecord.table.item.nformcode === otherCol.foreigntableformcode);\n\n                if (index !== -1) {\n                  if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\n                    validComponents.push(comp);\n                    currentCompChild.push(comp.label);\n                  }\n                }\n              } else {\n                if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\n                  if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\n                    validComponents.push(comp);\n                    currentCompChild.push(comp.label);\n                  }\n                }\n              }\n            });\n          }\n        }\n      }\n\n      if (comp.inputtype === 'radio') {\n        if (selectedFieldRecord.label !== comp.label) {\n          validComponents.push(comp);\n        }\n      }\n    } else if (selectedFieldRecord.componentcode === ReactComponents.CUSTOMSEARCHFILTER) {\n      if (comp.inputtype === 'radio') {\n        if (selectedFieldRecord.label !== comp.label) {\n          validComponents.push(comp);\n        }\n      }\n    } else {\n      if (selectedFieldRecord.label !== comp.label) validComponents.push(comp);\n    }\n  });\n  return validComponents;\n};\nexport const getChildComponentForeignKey = (selectedFieldRecord, comp, columnInfo) => {\n  // let validComponents = [];\n  //let currentCompChild = [];\n  let tableForeignKey = \"\";\n\n  if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n    //  selectedFieldRecord.child && selectedFieldRecord.child.map(myChild => currentCompChild.push(myChild.label))\n    if (columnInfo && columnInfo[comp.nquerybuildertablecode]) {\n      if (columnInfo[selectedFieldRecord.nquerybuildertablecode]) {\n        if (columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.length) {\n          columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(mycol => {\n            if (mycol.foriegntablePK === columnInfo[comp.nquerybuildertablecode].primaryKeyName) {\n              // if (!currentCompChild.includes(comp.label)) {\n              // validComponents.push(comp)\n              //  currentCompChild.push(comp.label)\n              tableForeignKey = mycol.foriegntablePK; //  }\n            }\n          });\n          columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\n            if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\n              // if (!currentCompChild.includes(comp.label)) {\n              tableForeignKey = otherCol.foriegntablePK; // validComponents.push(comp);\n              //  currentCompChild.push(comp.label);\n              // }\n            }\n          });\n        } else {\n          columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\n            if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\n              //  if (!currentCompChild.includes(comp.label)) {\n              tableForeignKey = otherCol.foriegntablePK; // validComponents.push(comp);\n              // currentCompChild.push(comp.label);\n              // }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  return tableForeignKey;\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/components/droparea/helpers.js"],"names":["shortid","ReactComponents","ROW","COLUMN","COMPONENT","COMPONENTROW","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","remove","arr","index","slice","replacechild","origalarray","replacearray","insert","newItem","reorderChildren","children","splitDropZonePath","splitItemPath","length","dropZoneIndex","Number","itemIndex","updatedChildren","curIndex","splitDropZoneChildrenPath","splitItemChildrenPath","nodeChildren","removeChildFromChildren","undefined","type","list1","addChildToChildren","item","id","generate","handleMoveWithinParent","layout","handleAddColumDataToRow","layoutCopy","COLUMN_STRUCTURE","map","row","handleMoveToDifferentParent","newLayoutStructure","ROW_STRUCTURE","updatedLayout","handleMoveSidebarComponentIntoParent","handleRemoveItemFromLayout","getcomponentdata","updatedata","replaceChildFromChildren","replacedata","getValidComponent","selectedFieldRecord","components","columnInfo","validComponents","currentCompChild","comp","componentcode","COMBO","child","myChild","push","label","nquerybuildertablecode","numericColumns","mycol","foriegntablePK","staicColumns","findIndex","x","columnname","parentforeignPK","nformcode","foreigntableformcode","includes","primaryKeyName","otherCol","valuemember","table","inputtype","CUSTOMSEARCHFILTER","getChildComponentForeignKey","tableForeignKey"],"mappings":"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","sourcesContent":["import shortid from \"shortid\";\r\nimport { ReactComponents } from \"../Enumeration\";\r\nimport { ROW, COLUMN, COMPONENT, COMPONENTROW } from \"./constants\";\r\n\r\n// a little function to help us with reordering the result\r\nexport const reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed); // inserting task in new index\r\n\r\n    return result;\r\n};\r\n\r\nexport const remove = (arr, index) => [\r\n    // part of the array before the specified index\r\n    ...arr.slice(0, index),\r\n    // part of the array after the specified index\r\n    ...arr.slice(index + 1)\r\n];\r\n\r\nexport const replacechild = (origalarray, replacearray, index) => [\r\n    // part of the array before the specified index\r\n    ...origalarray.slice(0, index),\r\n    replacearray,\r\n    // part of the array after the specified index\r\n    ...origalarray.slice(index + 1)\r\n];\r\n\r\nexport const insert = (arr, index, newItem) => [\r\n    // part of the array before the specified index\r\n    ...arr.slice(0, index),\r\n    // inserted item\r\n    newItem,\r\n    // part of the array after the specified index\r\n    ...arr.slice(index)\r\n];\r\n\r\nexport const reorderChildren = (children, splitDropZonePath, splitItemPath) => {\r\n    if (splitDropZonePath.length === 1) {\r\n        const dropZoneIndex = Number(splitDropZonePath[0]);\r\n        const itemIndex = Number(splitItemPath[0]);\r\n        return reorder(children, itemIndex, dropZoneIndex);\r\n    }\r\n\r\n    const updatedChildren = [...children];\r\n\r\n    const curIndex = Number(splitDropZonePath.slice(0, 1));\r\n\r\n    // Update the specific node's children\r\n    const splitDropZoneChildrenPath = splitDropZonePath.slice(1);\r\n    const splitItemChildrenPath = splitItemPath.slice(1);\r\n    const nodeChildren = updatedChildren[curIndex];\r\n    updatedChildren[curIndex] = {\r\n        ...nodeChildren,\r\n        children: reorderChildren(\r\n            nodeChildren.children,\r\n            splitDropZoneChildrenPath,\r\n            splitItemChildrenPath\r\n        )\r\n    };\r\n\r\n    return updatedChildren;\r\n};\r\n\r\nexport const removeChildFromChildren = (children, splitItemPath) => {\r\n    if (splitItemPath.length === 1) {\r\n        const itemIndex = Number(splitItemPath[0]);\r\n        return remove(children, itemIndex);\r\n    }\r\n\r\n    let updatedChildren = [...children];\r\n\r\n    const curIndex = Number(splitItemPath.slice(0, 1));\r\n\r\n    // Update the specific node's children\r\n    const splitItemChildrenPath = splitItemPath.slice(1);\r\n    const nodeChildren = updatedChildren[curIndex];\r\n    // updatedChildren[curIndex] = {\r\n    //   ...nodeChildren,\r\n    //   children: removeChildFromChildren(\r\n    //     nodeChildren.children,\r\n    //     splitItemChildrenPath\r\n    //   )\r\n    // };\r\n\r\n    if (nodeChildren.children !== undefined) {\r\n        if (nodeChildren.type === COMPONENTROW &&\r\n            nodeChildren.children.length === 1) {\r\n            const list = removeChildFromChildren(children, splitItemPath.slice(0, 1))\r\n            updatedChildren = [...list]\r\n        } else if (nodeChildren.type === COMPONENTROW &&\r\n            (nodeChildren.children.length === 1 ||\r\n                nodeChildren.children.length === 2)) {\r\n            const list = removeChildFromChildren(nodeChildren.children, splitItemChildrenPath)\r\n            const list1 = replacechild(children, ...list, curIndex)\r\n            updatedChildren = [...list1]\r\n        } else {\r\n            updatedChildren[curIndex] = {\r\n                ...nodeChildren,\r\n                children: removeChildFromChildren(\r\n                    nodeChildren.children,\r\n                    splitItemChildrenPath\r\n                )\r\n            };\r\n        }\r\n\r\n    } else {\r\n        // if(nodeChildren.type===COMPONENTROW){\r\n        const list = removeChildFromChildren(children, splitItemPath.slice(0, 1))\r\n        updatedChildren = [...list]\r\n        // }\r\n\r\n    }\r\n    return updatedChildren;\r\n};\r\n\r\nexport const addChildToChildren = (children, splitDropZonePath, item) => {\r\n    if (splitDropZonePath.length === 1) {\r\n        const dropZoneIndex = Number(splitDropZonePath[0]);\r\n        return insert(children, dropZoneIndex, item);\r\n    }\r\n\r\n    const updatedChildren = [...children];\r\n\r\n    const curIndex = Number(splitDropZonePath.slice(0, 1));\r\n\r\n    // Update the specific node's children\r\n    const splitItemChildrenPath = splitDropZonePath.slice(1);\r\n    const nodeChildren = updatedChildren[curIndex];\r\n    if (nodeChildren.children !== undefined) {\r\n        updatedChildren[curIndex] = {\r\n            ...nodeChildren,\r\n            children: addChildToChildren(\r\n                nodeChildren.children,\r\n                splitItemChildrenPath,\r\n                item\r\n            )\r\n        };\r\n    } else {\r\n        updatedChildren[curIndex] = {\r\n            type: COMPONENTROW,\r\n            id: shortid.generate(),\r\n            children: addChildToChildren(\r\n                [nodeChildren],\r\n                splitItemChildrenPath,\r\n                item\r\n            )\r\n        };\r\n    }\r\n    return updatedChildren;\r\n};\r\n\r\nexport const handleMoveWithinParent = (\r\n    layout,\r\n    splitDropZonePath,\r\n    splitItemPath\r\n) => {\r\n    return reorderChildren(layout, splitDropZonePath, splitItemPath);\r\n};\r\n\r\nexport const handleAddColumDataToRow = layout => {\r\n    const layoutCopy = [...layout];\r\n    const COLUMN_STRUCTURE = {\r\n        type: COLUMN,\r\n        id: shortid.generate(),\r\n        children: []\r\n    };\r\n\r\n    return layoutCopy.map(row => {\r\n        if (!row.children.length) {\r\n            row.children = [COLUMN_STRUCTURE];\r\n        }\r\n        return row;\r\n    });\r\n};\r\n\r\nexport const handleMoveToDifferentParent = (\r\n    layout,\r\n    splitDropZonePath,\r\n    splitItemPath,\r\n    item\r\n) => {\r\n    let newLayoutStructure;\r\n    const COLUMN_STRUCTURE = {\r\n        type: COLUMN,\r\n        id: shortid.generate(),\r\n        children: [{ type: COMPONENT, id: shortid.generate(), ...item }]\r\n    };\r\n\r\n    const ROW_STRUCTURE = {\r\n        type: ROW,\r\n        id: shortid.generate()\r\n    };\r\n\r\n    switch (splitDropZonePath.length) {\r\n        case 1:\r\n            {\r\n                // moving column outside into new row made on the fly\r\n                if (item.type === COLUMN) {\r\n                    newLayoutStructure = {\r\n                        ...ROW_STRUCTURE,\r\n                        children: [item]\r\n                    };\r\n                } else {\r\n                    // moving component outside into new row made on the fly\r\n                    newLayoutStructure = {\r\n                        ...ROW_STRUCTURE,\r\n                        children: [COLUMN_STRUCTURE]\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n        case 2:\r\n            {\r\n                // moving component outside into a row which creates column\r\n                if (item.type === COMPONENTROW) {\r\n                    newLayoutStructure = COLUMN_STRUCTURE;\r\n                } else {\r\n                    // moving column into existing row\r\n                    newLayoutStructure = item;\r\n                }\r\n\r\n                break;\r\n            }\r\n        case 3:\r\n            {\r\n                // moving component outside into a column which creates componentrow\r\n                if (item.type === COMPONENTROW) {\r\n                    newLayoutStructure = {\r\n                        ...item,\r\n                        type: COMPONENT,\r\n                        id: shortid.generate(),\r\n                    };\r\n                } else {\r\n                    // moving column into existing row\r\n                    if (item.children === undefined) {\r\n                        newLayoutStructure = item\r\n                        delete newLayoutStructure[\"children\"]\r\n                    } else {\r\n                        newLayoutStructure = { ...item, type: COMPONENTROW };\r\n                    }\r\n\r\n                }\r\n                break;\r\n            }\r\n        default:\r\n            {\r\n                newLayoutStructure = item;\r\n            }\r\n    }\r\n\r\n    let updatedLayout = layout;\r\n    updatedLayout = removeChildFromChildren(updatedLayout, splitItemPath);\r\n    updatedLayout = handleAddColumDataToRow(updatedLayout);\r\n    updatedLayout = addChildToChildren(\r\n        updatedLayout,\r\n        splitDropZonePath,\r\n        newLayoutStructure\r\n    );\r\n\r\n    return updatedLayout;\r\n};\r\n\r\nexport const handleMoveSidebarComponentIntoParent = (\r\n    layout,\r\n    splitDropZonePath,\r\n    item\r\n) => {\r\n    let newLayoutStructure;\r\n    switch (splitDropZonePath.length) {\r\n        case 1:\r\n            {\r\n                newLayoutStructure = {\r\n                    type: ROW,\r\n                    id: shortid.generate(),\r\n                    children: [{\r\n                        type: COLUMN,\r\n                        id: shortid.generate(),\r\n                        children: [{ type: COMPONENT, id: shortid.generate(), ...item }]\r\n                    }]\r\n                };\r\n                break;\r\n            }\r\n        case 2:\r\n            {\r\n                newLayoutStructure = {\r\n                    type: COLUMN,\r\n                    id: shortid.generate(),\r\n                    children: [{ type: COMPONENT, id: shortid.generate(), ...item }]\r\n                };\r\n                break;\r\n            }\r\n        case 3:\r\n            {\r\n                newLayoutStructure = {\r\n                    type: COMPONENT,\r\n                    id: shortid.generate(),\r\n                    ...item\r\n                };\r\n                break;\r\n            }\r\n        case 4:\r\n            {\r\n                newLayoutStructure = {\r\n                    type: COMPONENT,\r\n                    id: shortid.generate(),\r\n                    ...item\r\n                };\r\n                break;\r\n            }\r\n        default:\r\n            {\r\n                newLayoutStructure = item;\r\n            }\r\n    }\r\n\r\n    return addChildToChildren(layout, splitDropZonePath, newLayoutStructure);\r\n};\r\n\r\nexport const handleRemoveItemFromLayout = (layout, splitItemPath) => {\r\n    return removeChildFromChildren(layout, splitItemPath);\r\n};\r\nexport const getcomponentdata = (children, splitItemPath) => {\r\n    const itemIndex = Number(splitItemPath[0]);\r\n    let updatedata = children[itemIndex] !== undefined ? children[itemIndex] : children[itemIndex - 1] !==\r\n        undefined ? children[itemIndex - 1] : {};\r\n    if (updatedata.children !== undefined) {\r\n        const splitItemChildrenPath = splitItemPath.length > 1 ? splitItemPath.slice(1) : splitItemPath;\r\n        updatedata = getcomponentdata(updatedata.children, splitItemChildrenPath)\r\n    } else {\r\n        return updatedata;\r\n    }\r\n    return updatedata;\r\n};\r\n\r\nexport const replaceChildFromChildren = (children, splitItemPath, replacedata) => {\r\n    if (splitItemPath.length === 1) {\r\n        const itemIndex = Number(splitItemPath[0]);\r\n        return replacechild(children, replacedata, itemIndex);\r\n    } else if (splitItemPath.length === 2) {\r\n        splitItemPath[2] = '0'\r\n        return replaceChildFromChildren(children, splitItemPath, replacedata)\r\n    }\r\n    let updatedChildren = [...children];\r\n    const curIndex = Number(splitItemPath.slice(0, 1));\r\n    // Update the specific node's children\r\n    const splitItemChildrenPath = splitItemPath.slice(1);\r\n    const nodeChildren = updatedChildren[curIndex];\r\n    if (nodeChildren.children !== undefined) {\r\n        if (nodeChildren.type === COMPONENTROW) {\r\n            updatedChildren[curIndex] = {\r\n                ...nodeChildren,\r\n                children: replaceChildFromChildren(\r\n                    nodeChildren.children,\r\n                    splitItemChildrenPath,\r\n                    replacedata\r\n                )\r\n            };\r\n        } else {\r\n            updatedChildren[curIndex] = {\r\n                ...nodeChildren,\r\n                children: replaceChildFromChildren(\r\n                    nodeChildren.children,\r\n                    splitItemChildrenPath,\r\n                    replacedata\r\n                )\r\n            };\r\n        }\r\n    } else {\r\n        const list = replaceChildFromChildren(children, splitItemPath.slice(0, 1), replacedata)\r\n        updatedChildren = [...list]\r\n    }\r\n    return updatedChildren;\r\n};\r\n\r\nexport const getValidComponent = (selectedFieldRecord, components, columnInfo) => {\r\n    let validComponents = [];\r\n    let currentCompChild = [];\r\n    components.map(comp => {\r\n        if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n            selectedFieldRecord.child && selectedFieldRecord.child.map(myChild => currentCompChild.push(myChild.label))\r\n            if (columnInfo && columnInfo[comp.nquerybuildertablecode]) {\r\n                if (columnInfo[selectedFieldRecord.nquerybuildertablecode]) {\r\n                    if (columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.length) {\r\n                        columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(mycol => {\r\n                            //commented by pravinth\r\n                            //  if (mycol.foriegntablePK === columnInfo[comp.nquerybuildertablecode].primaryKeyName) {\r\n                            if (mycol.foriegntablePK === 'ndynamicmastercode') {\r\n                                //  columnInfo[comp.nquerybuildertablecode].jstaticColumns.map(mycol2=>{\r\n                                const index = columnInfo[comp.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === mycol.parentforeignPK&&comp.nformcode===mycol.foreigntableformcode)\r\n                                if (index !== -1) {\r\n                                    // const val=columnInfo[comp.nquerybuildertablecode].jstaticColumns[index]\r\n                                    if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\r\n                                        validComponents.push(comp)\r\n                                        currentCompChild.push(comp.label)\r\n                                    }\r\n                                }\r\n                                // if (mycol2.label columnInfo[comp.nquerybuildertablecode].jstaticco) {\r\n                                //     if (!currentCompChild.includes(comp.label)&&selectedFieldRecord.label!==comp.label) {\r\n                                //         validComponents.push(comp)\r\n                                //         currentCompChild.push(comp.label)\r\n                                //     }\r\n                                // }\r\n                                //  })                                                                  \r\n                            } else {\r\n                                if (mycol.foriegntablePK === columnInfo[comp.nquerybuildertablecode].primaryKeyName) {\r\n                                    if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\r\n                                        validComponents.push(comp)\r\n                                        currentCompChild.push(comp.label)\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                        columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\r\n                            //commented by pravinth\r\n                            //if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\r\n                            if (selectedFieldRecord.valuemember==='ndynamicmastercode') {\r\n                                const index = columnInfo[selectedFieldRecord.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === otherCol.parentforeignPK&&selectedFieldRecord.table.item.nformcode===otherCol.foreigntableformcode)\r\n                                if(index!==-1){\r\n                                    if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\r\n                                        validComponents.push(comp);\r\n                                        currentCompChild.push(comp.label);\r\n                                    }\r\n                                }\r\n\r\n\r\n                            }else{\r\n                                if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\r\n                                    if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\r\n                                        validComponents.push(comp);\r\n                                        currentCompChild.push(comp.label);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n\r\n                        \r\n                        })\r\n\r\n                    } else {\r\n                        columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\r\n                            //commented by pravinth\r\n                            //if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\r\n                                if (selectedFieldRecord.valuemember==='ndynamicmastercode') {\r\n                                    const index = columnInfo[selectedFieldRecord.nquerybuildertablecode].staicColumns.findIndex(x => x.columnname === otherCol.parentforeignPK&&selectedFieldRecord.table.item.nformcode===otherCol.foreigntableformcode)\r\n                                    if(index!==-1){\r\n                                        if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\r\n                                            validComponents.push(comp);\r\n                                            currentCompChild.push(comp.label);\r\n                                        }\r\n                                    }\r\n    \r\n    \r\n                                }else{\r\n\r\n                            if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\r\n                                if (!currentCompChild.includes(comp.label) && selectedFieldRecord.label !== comp.label) {\r\n                                    validComponents.push(comp);\r\n                                    currentCompChild.push(comp.label);\r\n                                }\r\n                            }\r\n                                }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            if (comp.inputtype === 'radio') {\r\n                if (selectedFieldRecord.label !== comp.label) {\r\n                    validComponents.push(comp)\r\n                }\r\n            }\r\n        } else if (selectedFieldRecord.componentcode === ReactComponents.CUSTOMSEARCHFILTER) {\r\n            if (comp.inputtype === 'radio') {\r\n                if (selectedFieldRecord.label !== comp.label) {\r\n                    validComponents.push(comp)\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            if (selectedFieldRecord.label !== comp.label)\r\n                validComponents.push(comp)\r\n        }\r\n    })\r\n    return validComponents;\r\n}\r\n\r\nexport const getChildComponentForeignKey = (selectedFieldRecord, comp, columnInfo) => {\r\n    // let validComponents = [];\r\n    //let currentCompChild = [];\r\n    let tableForeignKey = \"\"\r\n    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n        //  selectedFieldRecord.child && selectedFieldRecord.child.map(myChild => currentCompChild.push(myChild.label))\r\n        if (columnInfo && columnInfo[comp.nquerybuildertablecode]) {\r\n            if (columnInfo[selectedFieldRecord.nquerybuildertablecode]) {\r\n                if (columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.length) {\r\n                    columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(mycol => {\r\n                        if (mycol.foriegntablePK === columnInfo[comp.nquerybuildertablecode].primaryKeyName) {\r\n                            // if (!currentCompChild.includes(comp.label)) {\r\n                            // validComponents.push(comp)\r\n                            //  currentCompChild.push(comp.label)\r\n                            tableForeignKey = mycol.foriegntablePK\r\n                            //  }\r\n                        }\r\n                    })\r\n                    columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\r\n                        if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\r\n                            // if (!currentCompChild.includes(comp.label)) {\r\n                            tableForeignKey = otherCol.foriegntablePK\r\n                            // validComponents.push(comp);\r\n                            //  currentCompChild.push(comp.label);\r\n                            // }\r\n                        }\r\n                    })\r\n\r\n                }\r\n                else {\r\n                    columnInfo[comp.nquerybuildertablecode].numericColumns.map(otherCol => {\r\n                        if (selectedFieldRecord.valuemember === otherCol.foriegntablePK) {\r\n                            //  if (!currentCompChild.includes(comp.label)) {\r\n                            tableForeignKey = otherCol.foriegntablePK\r\n                            // validComponents.push(comp);\r\n                            // currentCompChild.push(comp.label);\r\n                            // }\r\n                        }\r\n                    })\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    return tableForeignKey;\r\n}"]},"metadata":{},"sourceType":"module"}