{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\nimport { faCalculator, faFileExport, faFileImport } from '@fortawesome/free-solid-svg-icons';\nimport { ageCalculate, ageCalculateOnlyForYear, childComboClear, comboChild, convertDateTimetoString, extractFieldHeader, filterRecordBasedOnTwoArrays, formatDate, formatInputDate, formatInputDateWithoutT, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, removeSpaceFromFirst, showEsign, sortByField, validateEmail, validatePhoneNumber, conditionBasedInput, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify, checkFilterIsEmptyQueryBuilder } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, callService, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler, testPackageTest, rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration, insertRegSample } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport Esign from '../audittrail/Esign';\nimport { ThemeConsumer } from 'styled-components';\nimport PatientMaster from '../contactmaster/PatientMaster';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList'; //import SplitterLayout from 'react-splitter-layout';\n\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\nimport AddImportFileData from './AddImportFileData';\nimport AddImportSampleCountData from './AddImportSampleCountData';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      selectedTestPackageData: {},\n      selectPackage: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false,\n      specBasedTestPackage: false,\n      selectedMaster: [],\n      exportFiled: []\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const filterQueryTreeStr = QbUtils.getTree(immutableTree);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery,\n          filterQueryTreeStr\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const filterquery = this.props.Login.filterquery;\n      const filterQueryTreeStr = this.props.Login.filterQueryTreeStr;\n      let isFilterEmpty = checkFilterIsEmptyQueryBuilder(filterQueryTreeStr);\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date') && isFilterEmpty) {\n        const val = removeSpaceFromFirst(filterquery, '');\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: val\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_PROVIDEVALUESFORINPUTS\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component[\"childFields\"]) {\n        const index = this.props.Login.masterIndex;\n        let selectedRecord = this.state.selectedMaster || {};\n        component[\"childFields\"].map(item => {\n          let data = item1[item.columnname];\n\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            //combocontrol\n            data = {\n              label: item1[item.sdisplaymember],\n              value: item1[item.svaluemember]\n            };\n          } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            //Date picker control\n            data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\n          }\n\n          selectedRecord[index][item.columnname] = data;\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: selectedRecord,\n            loadCustomSearchFilter: false,\n            screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const newdata = {\n          label: item1[component['displaymember']],\n          value: item1[component['valuemember']],\n          item: {\n            jsondata: { ...item1,\n              jsondata: { ...item1\n              }\n            }\n          }\n        };\n        this.onComboChange(newdata, component, component['label']);\n      }\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord; // console.log(\"handle save:\", selectedRecord);\n\n      if (this.props.Login.addMaster) {\n        const masterIndex = this.props.Login.masterIndex;\n        mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true);\n        selectedRecord = this.state.selectedMaster[masterIndex];\n      } else if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              // console.log(\"component1:\", component);\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                //  console.log(\"componentrow:\", componentrow);\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      //componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadImportFileData) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"files\"\n        }];\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) === -1) {\n                  if (componentrow.mandatory === true) {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                }\n\n                return null;\n              }) : this.props.sampleexportfields.findIndex(x => x === component.label) === -1 ? component.mandatory === true ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      } else if (this.props.Login.loadImportSampleCountData) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SAMPLECOUNT\",\n          \"dataField\": \"nsamplecount\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          //\"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          // \"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      if (this.props.Login.loadEsign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } //  console.log(\"mandate fields:\", mandatoryFields);\n\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.addMaster) {\n            this.onSaveMasterRecord(saveType, this.formRef);\n          } else if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            let selectedSpecCheck = { ...this.state.selectedSpec\n            };\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": \"IDS_COMPONENT\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            let inputvalues = {};\n\n            if (this.state.selectedRecord[\"nallottedspeccode\"] !== selectedSpecCheck.nallottedspeccode) {\n              inputvalues = {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec: { ...selectedSpec\n                },\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              };\n            } else {\n              inputvalues = {\n                loadSpec: false,\n                selectedSpec: { ...selectedSpec\n                },\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              };\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: { // selectedTestData: [],\n                // selectComponent: [],\n                // selectedComponent: {},\n                // loadSpec: false,\n                // SelectedTest: [],\n                // Test: [],\n                // Component: [],\n                // subSampleDataGridList: [],\n                // selectedSpec: { ...selectedSpec },\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue &&\n                //     this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                // specBasedComponent\n                ...inputvalues\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else if (this.props.Login.loadImportFileData) {\n            this.onSaveClickImport('1', this.formRef);\n          } else if (this.props.Login.loadImportSampleCountData) {\n            this.onSaveClickImport('2', this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.MandatoryCheckSubSample = () => {\n      let mandatoryFields = [];\n      let exportFields = [];\n      let comboComponent = [];\n      let subSampleFields = [];\n\n      if (this.state.specBasedComponent) {\n        mandatoryFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode_child\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        exportFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode_child\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        subSampleFields = [{\n          \"displayname\": \"IDS_COMPONENT\",\n          \"idsField\": true,\n          \"label\": \"ncomponentcode_child\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  comboComponent.push(componentrow);\n                }\n\n                subSampleFields.push({\n                  \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": componentrow.label,\n                  \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                  \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                  \"label\": componentrow.label\n                });\n\n                if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  exportFields.push({\n                    // \"idsName\": componentrow.label,\n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": componentrow.label\n                  });\n                }\n\n                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      // \"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                } else {\n                  if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": false,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                comboComponent.push(component);\n              }\n\n              subSampleFields.push({\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                \"label\": component.label\n              });\n\n              if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\n                exportFields.push({\n                  \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": component.label,\n                  \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                  \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                  \"label\": component.label\n                });\n              }\n\n              if (component.mandatory === true && !component.templatemandatory && this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1) {\n                if (component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    //\"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                } else {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": component.label\n                  });\n                }\n              } else {\n                if (this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": false,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    // \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      return {\n        mandatoryFields,\n        exportFields,\n        subSampleFields,\n        comboComponent\n      };\n    };\n\n    this.MandatoryCheck = () => {\n      const mandatoryFields = [];\n      const exportFields = [];\n      const comboComponent = [];\n      this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  comboComponent.push(componentrow);\n                }\n\n                if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  exportFields.push({\n                    // \"idsName\": componentrow.label,\n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": componentrow.label\n                  });\n                }\n\n                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                  if (componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  } else {\n                    mandatoryFields.push({\n                      \"mandatory\": true,\n                      // \"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                } else {\n                  if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1 && componentrow.inputtype === \"email\") {\n                    mandatoryFields.push({\n                      \"mandatory\": false,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      // \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"email\",\n                      \"label\": componentrow.label\n                    });\n                  }\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                comboComponent.push(component);\n              }\n\n              if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\n                exportFields.push({\n                  \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                  \"dataField\": component.label,\n                  \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                  \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                  \"label\": component.label\n                });\n              }\n\n              if (component.mandatory === true && !component.templatemandatory && this.props.sampleexportfields.findIndex(x => x === component.label) !== -1) {\n                if (component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    //\"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                } else {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\n                    \"label\": component.label\n                  });\n                }\n              } else {\n                if (this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 && component.inputtype === \"email\") {\n                  mandatoryFields.push({\n                    \"mandatory\": false,\n                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    // \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"email\",\n                    \"label\": component.label\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      return {\n        mandatoryFields,\n        exportFields,\n        comboComponent\n      };\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {}; //console.log(\"Control:\", control);\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false;\n        let project = false;\n        let nprojectmastercode = -1;\n        let childSpec = false;\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1;\n\n        if (nsampletypecode === SampleType.CLINICALTYPE) {\n          if (control.table.item.nquerybuildertablecode === 228 && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\n            selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid'];\n          }\n        }\n\n        if (control.name === \"manualorderid\") {\n          selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid'];\n        }\n\n        const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired) : transactionStatus.NO;\n        const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired) : transactionStatus.NO;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\n        };\n\n        if (comboData) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            \"pkey\": control.valuemember,\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\n            source: control.source\n          };\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            //ALPD-2009       \n            if (ncategorybasedflow !== transactionStatus.YES) {\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            }\n          } else {\n            if (ncategorybasedflow !== transactionStatus.YES) {\n              product = true;\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n            }\n          }\n        } else if (control.name === 'Instrument Name') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            //ALPD-2009\n            if (ncategorybasedflow === transactionStatus.YES) {\n              //const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            } else {\n              const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n              nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\n              nprojectmastercode = selectedRecord['Project Code'] && selectedRecord['Project Code']['value'];\n              project = true;\n            }\n          } else {\n            if (ncategorybasedflow === transactionStatus.YES) {\n              productCategory = true;\n            } else {\n              inputParem[\"ProductName\"] = Product[0].label;\n              product = true;\n            }\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0] && Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        } else if (control.name === 'Project Code') {\n          //project = true;\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[ProductCategory[0].label] !== undefined ? selectedRecord[ProductCategory[0].label].value : -1;\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            // nproductcode = selectedRecord[Product[0].label] &&\n            //     selectedRecord[Product[0].label].value;\n            nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\n          }\n\n          nprojectmastercode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            project = true;\n          } // else{\n          //     if (ncategorybasedflow === 3) {\n          //         productCategory = true;\n          //     }\n          //     else{\n          //         product =true;\n          //     }\n          // }\n\n        }\n\n        if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n          product = false;\n          productCategory = false;\n          materialType = false;\n          instrument = false;\n          instrumentCategory = false;\n          material = false;\n          materialCategory = false;\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\"); // let childTemplateMandatory = {}\n          // if (!(product ||\n          //     productCategory ||\n          //     materialType ||\n          //     instrument ||\n          //     instrumentCategory ||\n          //     material ||\n          //     materialCategory ||\n          //     project)) {\n          //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\n          //     if (TemplateMandatory && TemplateMandatory.length > 0) {\n          //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\n          //         const Product = childComboList.filter(x => x.name === \"Product\");\n          //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\n          //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\n          //         const Material = childComboList.filter(x => x.name === \"Material\");\n          //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\n          //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\n          //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\n          //         childTemplateMandatory = {\n          //             ProductCategory, Product\n          //             , InstrumentCategory\n          //             , MaterialCategory, Material\n          //             , MaterialType, MaterialType\n          //             , ProjectCode, Instrument\n          //         }\n          //         if (ProductCategory || Product\n          //             || InstrumentCategory\n          //             || MaterialCategory || Material\n          //             || MaterialType || MaterialType\n          //             || ProjectCode || Instrument) {\n          //             childSpec = true;\n          //         }\n          //     }\n          //     else {\n          //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\n          //         if (TemplateChild&& TemplateChild.length> 0) {\n          //             TemplateChild.map(x=>{\n          //                 x.child&&x.child.map(y=>{\n          //                 const data=this.props.comboComponents(x=>x.label===y.label)  \n          //                 if(data&&data[0].templatemandatory){\n          //                     const name=data[0].name\n          //                     if(name===\"Product Category\"||name===\"Instrument Category\"\n          //                     ||name===\"Product\"||name===\"Material Category\"\n          //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\n          //                         childSpec = true;\n          //                         childTemplateMandatory={childSpec:true}\n          //                     }\n          //                 }\n          //                 })\n          //             })\n          //         }\n          //     }\n          // }\n\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode,\n            nprojectmastercode,\n            nprojectSpecReqd,\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired // ...childTemplateMandatory\n\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType, undefined, project, this.props.comboComponents);\n        } else {\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType || project) {\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode,\n              nprojectmastercode,\n              nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, undefined, undefined, project);\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord,\n                loadCustomSearchFilter: false\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, control, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else {\n          const value = selectedRecord[event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            if (value.includes(radiotext)) {\n              const index = value.indexOf(radiotext);\n\n              if (index !== -1) {\n                if (index === 0) {\n                  const indexcomma = value.indexOf(\",\");\n\n                  if (indexcomma !== -1) {\n                    selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                  } else {\n                    selectedRecord[event.target.name] = \"\";\n                  }\n                } else {\n                  if (value.slice(index).indexOf(\",\") !== -1) {\n                    selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                  } else {\n                    selectedRecord[event.target.name] = value.slice(0, index - 1);\n                  }\n                }\n              }\n            } else {\n              selectedRecord[event.target.name] = value + ',' + radiotext;\n            }\n          } else {\n            selectedRecord[event.target.name] = radiotext;\n          }\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = conditionBasedInput(control, event.target.value, radiotext); // if (control.isnumeric === true\n        //      && control.label===radiotext) {\n        //     selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        // } else {\n        //     selectedRecord[event.target.name] = event.target.value;\n        // }\n        //  selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, control, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectComponent[event.target.name] = radiotext;\n      } else {\n        selectComponent[event.target.name] = conditionBasedInput(control, event.target.value, radiotext); // if (control.isnumeric === true\n        //     && control.label===radiotext) { \n        //             selectComponent[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\n        //     } else {\n        //         selectComponent[event.target.name] = event.target.value;\n        //     }\n        // selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            source: control.source\n          } : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: \"IDS_SUBSAMPLE\"\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          source: control.source\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectComponent = this.state.selectComponent;\n\n      if (selectComponent[control.label]) {\n        if (control.max) {\n          if (!(selectComponent[control.label] < parseFloat(control.max))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectComponent[control.label] > parseFloat(control.min))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n        const age = ageCalculate(dateValue);\n        selectedRecord[ageComp[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATION\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddImportFile = e => {\n      if (this.state.selectedSpec.nallottedspeccode) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadImportFileData: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_IMPORT\"\n            })\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.AddSampleCount = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportSampleCountData: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLECOUNT\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let isValid = true;\n        const selectedSpecification = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        let selectedRecord = selectedComponent; //  if(componentBasedSpec){\n\n        if (nneedsubsample) {\n          if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n            delete selectedComponent[\"selected\"];\n          } else {\n            isValid = false;\n          }\n        } else {\n          selectedRecord = selectedSpecification;\n        } // }\n        // else{\n        //     selectedRecord = selectedSpecification;          \n        // }\n\n\n        if (isValid) {\n          this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        } // } \n        // else {\n        //     const selectedComponent1 = {\n        //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        //         slno: 1\n        //     }\n        //     this.props.getTest(selectedComponent1,\n        //         this.props.Login,\n        //         nneedsubsample, specBasedComponent);\n        // }\n\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeImportFileData = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportFileData: false,\n          selectedRecord: { ...{ ...this.state.selectedRecord,\n              sfilename: undefined\n            },\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeImportSampleCountData = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadImportSampleCountData: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          kendoFilter: {\n            logic: \"and\",\n            filters: []\n          },\n          kendoSkip: 0,\n          kendoTake: 5,\n          awesomeConfig: undefined,\n          awesomeTree: undefined\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\n    };\n\n    this.closeAddMaster = e => {\n      let masterIndex = this.props.Login.masterIndex;\n      let updateInfo = {};\n\n      if (masterIndex !== 0) {\n        const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n        const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex);\n        const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex);\n        const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n        const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex);\n        const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex);\n        const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n        const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n        const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n        const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex);\n        const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex);\n        const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex);\n        masterIndex = masterIndex - 1;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster,\n            selectedControl,\n            masterextractedColumnList,\n            masterfieldList,\n            masterdataList,\n            mastercomboComponents,\n            masterwithoutCombocomponent,\n            masterComboColumnFiled,\n            masterDesign,\n            masterIndex,\n            screenName,\n            masterOperation,\n            masterEditObject\n          }\n        };\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: [],\n            selectedControl: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            addMaster: false,\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterEditObject: [],\n            masterOperation: [],\n            masterIndex: undefined,\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeDynamicView = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isDynamicViewSlideOut: false,\n          selectedDynamicViewControl: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          masterStatus: \"\",\n          TestPackage: [],\n          //Test:[]\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode; // selectComponent[\"nneedsubsample\"] = nneedsubsample;\n\n          selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onTestPackageChange = (comboData, fieldName, nneedsubsample, action) => {\n      const selectPackage = this.state.selectPackage || {};\n      const selectedTestData = this.state.selectedTestData || {};\n\n      if (comboData !== null) {\n        selectPackage[fieldName] = comboData;\n        selectPackage[\"stestpackagename\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        const selectedComponentData = this.props.Login.selectedComponent ? Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item : this.state.selectedSpec.nallottedspeccode.item;\n        this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action);\n      } else {\n        let availableTest = [];\n\n        if (selectPackage[\"ntestpackagecode\"]) {\n          delete selectPackage[\"ntestpackagecode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          let Test = action !== \"AddSubSample\" ? this.props.Login.Test || [] : [];\n          let testData = this.props.Login.AllTest || [];\n          let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectPackage,\n            TestCombined: availableTest\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent, this.props.Login);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const comp1 = this.props.Login.Component;\n      const Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = comp1.findIndex(x => x.slno === dataItem.slno);\n      const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\n      let updateInfo = {};\n      let incslno = comp1.length - 1;\n\n      if (comp1.length !== dataItem.slno) {\n        //  let slno = Component[index].slno\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]; // const preList = comp1.splice(0, index);\n        // const afterList = comp1.splice(index, comp1.length);\n        // preList.map(x => {\n        //     Test[incslno] = Test && Test[x.slno]\n        //     x.slno = incslno;\n        //     incslno = incslno - 1;\n        //     return null;\n        // })\n\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        } //const Component1 = [...preList, ...afterList];\n        // Component1.map(x => {\n        //     subSampleDataGridList.push({ ...x.jsonuidata, ...x })\n        // })\n        //sortByField(subSampleDataGridList, 'desc', 'slno')\n\n\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      } else {\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        }\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent && selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = (specBasedComponent, specBasedTestPackage) => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const component = [...data, ...SubSamplewithoutCombocomponent];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (component.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.screenName !== 'scheduler') {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistration(true);\n          }\n        }\n      } else {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistrationScheduler(true);\n          }\n        }\n      }\n    };\n\n    this.onSaveClickImport = (saveType, formRef) => {\n      let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      let isFileupload = false;\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let Map = {};\n\n        if (nneedsubsample === false || !this.state.specBasedComponent) {\n          Map[\"nspecsampletypecode\"] = this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode;\n        }\n\n        Map[\"specBasedComponnet\"] = this.state.specBasedComponent;\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"checkBoxOperation\"] = 3;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        const fields = this.MandatoryCheck();\n        Map[\"MandatoryList\"] = fields.mandatoryFields;\n        Map[\"ExportList\"] = fields.exportFields;\n        Map[\"comboComponent\"] = fields.comboComponent;\n        Map[\"SampleFieldsString\"] = [...fields.exportFields.map(x => x.label)];\n\n        if (nneedsubsample) {\n          const subSample = this.MandatoryCheckSubSample();\n          Map[\"comboComponent\"] = [...fields.comboComponent, ...subSample.comboComponent];\n          Map[\"MandatoryList\"] = [...fields.mandatoryFields, ...subSample.mandatoryFields];\n          Map[\"SubSampleFields\"] = subSample.subSampleFields;\n          Map[\"SubSampleExpotFields\"] = subSample.exportFields;\n          Map[\"SubSampleFieldsString\"] = [...subSample.exportFields.map(x => x.label)];\n        } // Map[\"SampleFields\"] = this.SampleFields();\n\n\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24];\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          }\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        const formData = new FormData();\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        formData.append(\"registrationImportFile\", this.state.selectedRecord['sfilename'][0]);\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        };\n        this.props.insertRegSample(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleExportClick = () => {\n      if (this.state.selectedSpec.nallottedspeccode) {\n        const exportFiled = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (this.props.sampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                    exportFiled.push(componentrow);\n                  }\n\n                  return null;\n                }) : this.props.sampleexportfields.findIndex(x => x === component.label) !== -1 ? exportFiled.push(component) : \"\";\n              });\n            });\n          });\n        }\n\n        const subSampleLayout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (this.state.specBasedComponent) {\n          exportFiled.push({\n            \"displayname\": \"IDS_COMPONENT\",\n            \"idsField\": true,\n            \"label\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"combo\"\n          });\n        }\n\n        const mandatoryCheck = [];\n\n        if (subSampleLayout !== undefined) {\n          subSampleLayout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (this.props.subsampleexportfields.findIndex(x => x === componentrow.label) !== -1) {\n                    exportFiled.push(componentrow);\n                  } else if (componentrow.mandatory) {\n                    mandatoryCheck.push(componentrow);\n                  }\n\n                  return null;\n                }) : this.props.subsampleexportfields.findIndex(x => x === component.label) !== -1 ? exportFiled.push(component) : component.mandatory ? mandatoryCheck.push(component) : \"\";\n              });\n            });\n          });\n        }\n\n        if (exportFiled.length > 0) {\n          if (mandatoryCheck.length === 0) {\n            this.setState({\n              exportFiled,\n              export: true\n            });\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_SUBSAMPLEMANDATORYFIELDMUSTBEEXPORT\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_EXPORTFIELDSNOTAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        // selectedMaster[masterIndex][event.target.name] = event.target.value;\n        if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ? event.target.value : selectedMaster[masterIndex][event.target.name];\n          } else {\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let isEmailCheck = true;\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.masterOperation[masterIndex] === 'update') {\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ? this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode;\n        } else {\n          inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value;\n        }\n      }\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = { ...inputData[methodUrl],\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\n        inputData[\"noneedfilter\"] = 1;\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2;\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 43) {\n        inputData[\"noneedfilter\"] = 2; //will disl=play all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n\n            if (item.controlType === \"datepicker\") {\n              fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"selectbox\") {\n              fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              fieldName = item.tableDataField;\n            }\n\n            inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: fieldData\n            };\n            return inputData[methodUrl];\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n\n              if (fieldName === 'ssubmittercode') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  ssubmitterfirstname: this.state.selectedMaster[masterIndex][fieldName].item.sfirstname,\n                  ssubmitterlastname: this.state.selectedMaster[masterIndex][fieldName].item.slastname,\n                  ssubmitteremail: this.state.selectedMaster[masterIndex][fieldName].item.semail,\n                  sshortname: this.state.selectedMaster[masterIndex][fieldName].item.sshortname,\n                  ssubmittercode: this.state.selectedMaster[masterIndex][fieldName].item.ssubmittercode,\n                  ssubmitterid: this.state.selectedMaster[masterIndex][fieldName].item.ssubmitterid,\n                  stelephone: this.state.selectedMaster[masterIndex][fieldName].item.stelephone\n                };\n              }\n\n              if (fieldName === 'sinstitutionsitename') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutionsitename: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionsitename\n                };\n              }\n\n              if (fieldName === 'sinstitutionname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutionname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionname,\n                  sinstitutioncode: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncode\n                };\n              }\n\n              if (fieldName === 'sinstitutioncatname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutioncatname: this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncatname\n                };\n              }\n\n              if (fieldName === 'sdistrictname') {\n                inputData[methodUrl]['jsondata'] = { ...inputData[methodUrl]['jsondata'],\n                  sinstitutiondistrictname: this.state.selectedMaster[masterIndex][fieldName].label\n                };\n              }\n\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n        inputData[methodUrl][\"nproductcode\"] = -1; //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\n        //inputData[methodUrl][\"sexternalorderid\"] = 1;\n\n        inputData[methodUrl][\"nordertypecode\"] = 1;\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent : this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents : this.props.Login.comboComponents,\n        selectedRecord: this.props.Login.loadSubSample ? this.state.selectComponent : this.state.selectedRecord,\n        selectedRecordName: this.props.Login.loadSubSample ? 'selectComponent' : 'selectedRecord',\n        loadSubSample: this.props.Login.loadSubSample,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.loadSubSample ? this.props.Login.SubSamplecomboData : this.props.Login.comboData,\n        comboName: this.props.Login.loadSubSample ? 'SubSamplecomboData' : 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: this.props.Login.masterOperation[masterIndex],\n        saveType,\n        formRef,\n        screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\n        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n        masterEditObject: this.props.Login.masterEditObject,\n        masterOperation: this.props.Login.masterOperation\n      };\n\n      if (isEmailCheck) {\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.onClickView = selectedControl => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\n        this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + \" \" + selectedControl.label);\n      }\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      let masterOperation = this.props.Login.masterOperation || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n      masterOperation[masterIndex] = 'create';\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterOperation,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          masterOperation,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.editMasterRecord = (control, editObject) => {\n      if (editObject) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== undefined) {\n          masterIndex = masterIndex + 1;\n        } else {\n          masterIndex = 0;\n        }\n\n        let selectedControl = this.props.Login.selectedControl || [];\n        let selectedMaster = this.state.selectedMaster || [];\n        selectedMaster[masterIndex] = {};\n        selectedControl[masterIndex] = control;\n        let fieldList = this.props.Login.masterfieldList || [];\n        fieldList[masterIndex] = [];\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n        masterComboColumnFiled[masterIndex] = [];\n        let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n        extractedColumnList[masterIndex] = [];\n        let masterdataList = this.props.Login.masterdataList || [];\n        let masterDesign = this.props.Login.masterDesign || [];\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n        let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n        let masterOperation = this.props.Login.masterOperation || [];\n        let masterEditObject = this.props.Login.masterEditObject || [];\n        masterdataList[masterIndex] = [];\n        masterDesign[masterIndex] = [];\n        masterwithoutCombocomponent[masterIndex] = [];\n        mastercomboComponents[masterIndex] = [];\n        masterOperation[masterIndex] = 'update';\n        masterEditObject[masterIndex] = editObject;\n\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n          if (control.table.item.component === 'Type2Component') {\n            fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n          } else {\n            fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n          }\n\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const updateInfo = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterEditObject,\n            masterOperation // editObject\n            //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          };\n          this.props.getEditMaster(updateInfo);\n        } else if (control.table.item.component === 'Type3Component') {\n          fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterEditObject,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] // editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        } else if (control.table.item.component === 'Dynamic') {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterComboColumnFiled,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterComboColumnFiled,\n            masterEditObject,\n            masterOperation,\n            selectedMaster //  editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHERECORD\"\n        }));\n      }\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, control, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = conditionBasedInput(control, event.target.value, radiotext); // selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\n      let selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = onDropAttachFileList(selectComponent[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectComponent,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachmentSubSample = (event, file, fieldName) => {\n      let selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = deleteAttachmentDropZone(selectComponent[fieldName], file);\n      this.setState({\n        selectComponent,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENT\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.info(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false; // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\n      //     this.props.Login.userRoleControlRights !== undefined ? true : false\n\n      const specBasedTestPackage = this.props.Login.userRoleControlRights && this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false;\n      this.subSampleDataGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                // \"idsName\": component.label,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                width: \"150px\"\n              });\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent,\n        specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\n      this.setState({\n        selectedTestPackageData: this.props.Login.selectedTestPackageData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\n      this.setState({\n        selectPackage: this.props.Login.selectPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\n      this.setState({\n        specBasedTestPackage: this.props.Login.specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (this.state.export) {\n      this._excelExportHeader.save();\n\n      this.setState({\n        export: false\n      });\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.info(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList,\n          masterStatus: \"\",\n          selectedComponentWithFile: objcomponent\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      });\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"] ? JSON.parse(JSON.stringify(this.state.selectedTestData[\"ntestgrouptestcode\"])) : this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        TestCombined: this.props.Login.TestCombined,\n        //selectComponent:C.saveContinueData,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList,\n        //selectedTestData: {}\n        specBasedTestPackage: this.state.specBasedTestPackage,\n        saveContinueData: this.props.Login.saveContinueData,\n        selectedComponentWithFile: objcomponent\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let isFileupload = false;\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      //ntype:2,\n      ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      checkBoxOperation: 3,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents); //console.log(\"edit reg:\", param);\n\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample;\n    let tempData = {};\n    const formData = new FormData();\n    this.props.Login.withoutCombocomponent.map(item => {\n      if (item.inputtype === \"files\") {\n        if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\n          this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n            const fileName = create_UUID();\n            const splittedFileName = item1.name.split('.');\n            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = fileName + '.' + fileExtension;\n            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n            tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n            formData.append(\"uploadedFile\" + index, item1);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\n            formData.append(\"isFileEdited\", transactionStatus.YES);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            inputData['isFileupload'] = true;\n            inputData[\"registration\"]['jsondata'] = { ...inputData[\"registration\"]['jsondata'],\n              ...tempData\n            };\n            inputData[\"registration\"]['jsonuidata'] = { ...inputData[\"registration\"]['jsonuidata'],\n              ...tempData\n            };\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\n            isFileupload = true;\n          });\n        }\n      }\n    }); // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      isFileupload,\n      formData: formData // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistrationScheduler() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ? this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\n      Map[\"nregtypecode\"] = 1;\n      Map[\"nregsubtypecode\"] = 1;\n      Map[\"nsampletypecode\"] = 1; // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = false;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false; // Map[\"checkBoxOperation\"] = 3;\n\n      const param = getRegistrationScheduler(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.schedulerTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\n      Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false); //Map[\"nflag\"] = 2;\n      // Map[\"ntype\"] = 2;\n      //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData);\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  insertMultipleRegistration(saveType) {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"checkBoxOperation\"] = 3;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24]; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"Registration\"]['jsonuidata'] = { ...Map[\"Registration\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"RegistrationSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"RegistrationSample\"][index].uniquefilename;\n              delete Map[\"RegistrationSample\"][index][item && item.label];\n            });\n          }\n        }); // formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n        formData.append(\"filecount\", count);\n        let dateList = [];\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === 'date') {//dateList.push(item.label)\n          }\n        });\n\n        if (saveType === '1') {\n          this.state.selectedRecord['sfilename'] && this.state.selectedRecord['sfilename'].forEach(item => {\n            isFileupload = true;\n            Map[\"isFile\"] = true;\n            formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false));\n            formData.append(\"readFile\", item);\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n          });\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        } else {\n          isFileupload = true;\n          Map[\"isFile\"] = false;\n          Map[\"nsamplecount\"] = this.state.selectedRecord.nsamplecount;\n          formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n          formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        }\n\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertMultipleRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    let isFileupload = false;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"checkBoxOperation\"] = 3;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24]; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode'];\n        Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\n        Map[\"DataRecordMaster\"] = this.props.Login.masterData;\n        Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            //external order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\n            //manual order\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"Manual\",\n                \"value\": 1,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 1,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n            Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n              ...orderType\n            };\n          } // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \n          //                                       ...orderType\n          //                                      }\n\n\n          Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value;\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        let tempData = {};\n        const formData = new FormData();\n        let count = 0;\n        this.props.Login.withoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\n              const fileName = create_UUID();\n              const splittedFileName = item1.name.split('.');\n              const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\n              const uniquefilename = fileName + '.' + fileExtension;\n              tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername;\n              tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename;\n              tempData[item && item.label + '_nfilesize_Sample'] = item1.size;\n              tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename;\n              tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false);\n              formData.append(\"uploadedFile\" + count, item1);\n              formData.append(\"uniquefilename\" + count, uniquefilename);\n              count++; // formData.append(\"filecount\", count);\n\n              formData.append(\"isFileEdited\", transactionStatus.YES);\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n              Map['isFileupload'] = true;\n              Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n                ...tempData\n              };\n              Map[\"Registration\"]['jsonuidata'] = { ...Map[\"Registration\"]['jsonuidata'],\n                ...tempData\n              };\n              formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo)); //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n\n              isFileupload = true;\n            });\n          }\n        });\n        this.state.SubSamplewithoutCombocomponent.map(item => {\n          if (item.inputtype === \"files\") {\n            Map[\"RegistrationSample\"].map((item12, index) => {\n              item12[item && item.label] && item12[item && item.label].forEach(item1 => {\n                formData.append(\"uploadedFile\" + count, item1);\n                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\n                count++; // formData.append(\"filecount\",  count);\n\n                formData.append(\"isFileEdited\", transactionStatus.YES);\n                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n                isFileupload = true;\n              });\n              delete Map[\"RegistrationSample\"][index].uniquefilename;\n              delete Map[\"RegistrationSample\"][index][item && item.label];\n            });\n          }\n        });\n        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\n        formData.append(\"filecount\", count);\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\",\n          formData: formData,\n          isFileupload\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4570,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4588,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4589,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4592,\n        columnNumber: 33\n      }\n    }) : this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4594,\n        columnNumber: 37\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4596,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4600,\n        columnNumber: 53\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4605,\n        columnNumber: 61\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4611,\n        columnNumber: 53\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView : this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.Login.loadImportFileData ? this.closeImportFileData : this.props.Login.loadImportSampleCountData ? this.closeImportSampleCountData : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4616,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4625,\n        columnNumber: 25\n      }\n    })), this.props.operation === \"create\" && !this.props.Login.addMaster && !this.props.Login.loadComponent && !this.props.Login.loadSubSample && !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest && !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode !== SampleType.CLINICALTYPE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleExportClick(),\n      hidden: this.props.userRoleControlRights.indexOf(this.props.exportTemplateId) === -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4635,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4640,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXPORTTEMPLATE\",\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4641,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      hidden: this.props.userRoleControlRights.indexOf(this.props.importTemplateId) === -1,\n      onClick: () => this.AddImportFile(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4644,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4647,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_IMPORTTEMPLATE\",\n      defaultMessage: \"IDS_IMPORTTEMPLATE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4648,\n        columnNumber: 33\n      }\n    }))) : \"\", this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4654,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4655,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4656,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4660,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4661,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4662,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4665,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4666,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4667,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4670,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4671,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4672,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4676,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4679,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? - /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4682,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4683,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4684,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter || !this.props.Login.addMaster && !this.props.Login.loadComponent && !this.props.Login.loadSubSample && !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest && !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec && this.props.Login.importData ? \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4694,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4695,\n        columnNumber: 57\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4696,\n        columnNumber: 57\n      }\n    }))), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false) ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4701,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4702,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4703,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4709,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4710,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4711,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"popup-fixed-center-headed-full-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4715,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4716,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4717,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4727,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4728,\n        columnNumber: 33\n      }\n    }, this.props.Login.patientRegistration ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4731,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4732,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PatientMaster, {\n      Login: this.props.Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4733,\n        columnNumber: 49\n      }\n    }))) : this.props.Login.isDynamicViewSlideOut ? /*#__PURE__*/React.createElement(ExternalOrderSlideout, {\n      dynamicExternalSample: this.props.Login.dynamicExternalSample,\n      dynamicExternalTestChild: this.props.Login.dynamicExternalTestChild,\n      dynamicGridSelectedId: this.props.Login.dynamicGridSelectedId || null,\n      selectedRecord: this.state.selectedRecord,\n      selectedDynamicViewControl: this.props.Login.selectedDynamicViewControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4736,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.props.Login.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4746,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.props.Login.awesomeTree,\n      config: this.props.Login.awesomeConfig,\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4758,\n        columnNumber: 58\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4773,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      TestPackage: this.props.Login.TestPackage || [],\n      selectPackage: this.state.selectPackage,\n      onTestPackageChange: this.onTestPackageChange,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4785,\n        columnNumber: 57\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4795,\n        columnNumber: 61\n      }\n    }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n      selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n      fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n      extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n      ,\n      selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n      onInputOnChange: this.onInputOnChangeMaster,\n      onComboChange: this.onComboChangeMaster,\n      handleDateChange: this.handleDateChangeMaster,\n      dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n      onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n      masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n      mastertimeZoneList: this.props.Login.mastertimeZoneList,\n      masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n      onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n      handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n      onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n      onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n      onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n      userInfo: this.props.Login.userInfo,\n      Login: this.props.Login,\n      addMasterRecord: this.addMasterRecord,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      masterIndex: this.props.Login.masterIndex,\n      custombuttonclick: this.custombuttonclick,\n      editMasterRecord: this.editMasterRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4813,\n        columnNumber: 65\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      onNumericBlur: this.onNumericBlurSubSample,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      selectPackage: this.state.selectPackage,\n      selectedTestPackageData: this.state.selectedTestPackageData,\n      TestPackage: this.props.Login.TestPackage || [],\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      onTestPackageChange: this.onTestPackageChange,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onDropFile: this.onDropFileSubSample,\n      deleteAttachment: this.deleteAttachmentSubSample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4842,\n        columnNumber: 69\n      }\n    }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n      operation: this.props.Login.operation,\n      onInputOnChange: this.onInputOnChange,\n      inputParam: this.props.Login.inputParam,\n      selectedRecord: this.props.Login.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4878,\n        columnNumber: 73\n      }\n    }) : this.props.Login.loadImportFileData ? /*#__PURE__*/React.createElement(AddImportFileData, {\n      selectedRecord: this.state.selectedRecord,\n      onDropFile: this.onDropFile,\n      deleteAttachment: this.deleteAttachment,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4885,\n        columnNumber: 77\n      }\n    }) : this.props.Login.loadImportSampleCountData ? /*#__PURE__*/React.createElement(AddImportSampleCountData, {\n      selectedRecord: this.state.selectedRecord,\n      userInfo: this.props.Login.userInfo,\n      onNumericInputChange: this.onNumericInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4892,\n        columnNumber: 81\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut //addPatient={this.addPatient}\n    , {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userRoleControlRights1: this.props.Login.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate ? this.props.Login.masterData.registrationTemplate.jsondata : this.props.Login.masterData.schedulerTemplate ? this.props.Login.masterData.schedulerTemplate.jsondata : {},\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onNumericBlur: this.onNumericBlur,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      testDataStateChange: this.testDataStateChange,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      specBasedTestPackage: this.state.specBasedTestPackage,\n      custombuttonclick: this.custombuttonclick,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onClickView: this.onClickView,\n      comboComponents: this.props.Login.comboComponents,\n      sampleType: {\n        \"label\": this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\n        \"value\": this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        \"item\": this.props.Login.masterData.RealSampleTypeValue\n      },\n      onDropFile: this.onDropFile,\n      deleteAttachment: this.deleteAttachment,\n      AddImportFile: this.AddImportFile,\n      AddSampleCount: this.AddSampleCount,\n      importData: this.props.Login.importData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4897,\n        columnNumber: 83\n      }\n    })), this.state.export ? /*#__PURE__*/React.createElement(LocalizationProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4970,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [],\n      collapsible: true,\n      fileName: (this.props.Login.screenName && this.props.Login.screenName) + \"_\" + this.state.selectedSpec.nallottedspeccode.label,\n      ref: exporter => {\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4971,\n        columnNumber: 41\n      }\n    }, [...this.state.exportFiled].map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.label,\n      title: (item.idsField ? this.props.intl.formatMessage({\n        id: item.displayname\n      }) : item.displayname[this.props.Login.userInfo.slanguagetypecode]) + '(' + item.label + ')' + (item.inputtype === \"date\" ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4979,\n        columnNumber: 49\n      }\n    })))) : \"\")))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  callService,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  insertRegistrationScheduler,\n  testPackageTest,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  viewExternalportalDetail,\n  getEditMaster,\n  insertMultipleRegistration,\n  insertRegSample\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","Row","Col","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","SampleType","transactionStatus","formCode","designComponents","faCalculator","faFileExport","faFileImport","ageCalculate","ageCalculateOnlyForYear","childComboClear","comboChild","convertDateTimetoString","extractFieldHeader","filterRecordBasedOnTwoArrays","formatDate","formatInputDate","formatInputDateWithoutT","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","removeIndex","removeSpaceFromFirst","showEsign","sortByField","validateEmail","validatePhoneNumber","conditionBasedInput","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","Lims_JSON_stringify","checkFilterIsEmptyQueryBuilder","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","callService","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","insertRegistrationScheduler","testPackageTest","rearrangeDateFormatforKendoDataTool","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","viewExternalportalDetail","getEditMaster","insertMultipleRegistration","insertRegSample","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationScheduler","getRegistrationSubSample","SubSample","TestListManipulation","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","Esign","ThemeConsumer","PatientMaster","getFieldSpecification","getFieldSpecification1","getFieldSpecification3","AddMasterRecords","ExternalOrderSlideout","AddImportFileData","AddImportSampleCountData","ExcelExport","ExcelExportColumn","LocalizationProvider","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","selectedTestPackageData","selectPackage","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","specBasedTestPackage","selectedMaster","exportFiled","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","filterQueryTreeStr","getTree","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","kendoTake","handleFilterChange","kendoFilter","filter","handleExecuteClick","isFilterEmpty","undefined","includes","val","seletedFilterComponent","info","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","index","masterIndex","map","item","columnname","ndesigncomponentcode","COMBOBOX","label","sdisplaymember","value","svaluemember","DATEPICKER","loadCustomSearchFilter","screenName","addMaster","selectedControl","displayname","slanguagetypecode","masterData","RealRegSubTypeValue","sregsubtypename","newdata","jsondata","onComboChange","handleSaveClick","saveType","startLabel","mandatoryFields","masterextractedColumnList","x","mandatory","loadComponent","loadSubSample","SubSampleTemplate","row","children","column","hasOwnProperty","componentrow","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","loadTest","loadImportFileData","registrationTemplate","sampleexportfields","findIndex","loadImportSampleCountData","loadSpec","esign","loadEsign","forEach","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","validateEsign","onSaveMasterRecord","selectedSpecCheck","ncomponentrequired","YES","subSampleDataGridList","width","inputvalues","nallottedspeccode","selectedComponent","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClickImport","onSaveClick","MandatoryCheckSubSample","exportFields","comboComponent","subSampleFields","subsampleexportfields","templatemandatory","MandatoryCheck","TestChange","comboData","fieldName","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","project","nprojectmastercode","childSpec","nsampletypecode","RealSampleTypeValue","CLINICALTYPE","table","nquerybuildertablecode","name","sampleTypeCatBasedFlow","ncategorybasedflowrequired","nprojectSpecReqd","nprojectspecrequired","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","ProductCategory","comboComponents","ncategorybasedflow","PROJECTSAMPLETYPE","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","withoutCombocomponent","mapOfFilter","nneedsubsample","nportalrequired","temp","components","temp1","onInputOnChange","radiotext","target","type","checked","indexOf","indexcomma","slice","setState","onInputOnSubSampleChange","onComboSubSampleChange","pkey","SubSamplecomboData","onNumericInputChange","onNumericBlurSubSample","max","parseFloat","precision","min","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","SampleTypeValue","ageComp","age","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","AddImportFile","warn","AddSampleCount","addTestslide","componentBasedSpec","isValid","selectedSpecification","slno","Object","keys","closeSpec","closeImportFileData","sfilename","closeImportSampleCountData","closeKendoFilter","logic","filters","closeAddMaster","masterfieldList","masterdataList","mastercomboComponents","masterComboColumnFiled","masterwithoutCombocomponent","masterDesign","masterOperation","masterEditObject","closeDynamicView","isDynamicViewSlideOut","selectedDynamicViewControl","closeComponent","closeTest","TestCombined","closeSubSample","selectedSubSample","showSaveContinue","masterStatus","TestPackage","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","onTestPackageChange","action","selectedComponentData","availableTest","testData","AllTest","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","objComponent","nregsubtypecode","timezone","deleteComponent","comp1","subSampleIndex","incslno","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","onUpdateRegistration","isFileupload","findSubsampleDateList","PREREGISTER","ndesigntemplatemappingcode","RealApprovalConfigVersionValue","napproveconfversioncode","RegSubTypeValue","nneedtemplatebasedflow","param","defaultTimeZone","dateList","fields","subSample","sampleeditable","sampledateconstraints","samplecombinationunique","subsamplecombinationunique","activeTestTab","activeSampleTab","activeSubSampleTab","nneedjoballocation","dateComp","genderComp","orderType","ndefaulttemplatecode","formData","FormData","append","JSON","stringify","postParamList","onNumericBlur","handleExportClick","subSampleLayout","mandatoryCheck","export","onComboChangeMaster","nformcode","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","toLowerCase","nmastersitecode","isEmailCheck","ndynamicmastercode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","jsonuidata","slideoutdesign","loadcurrentdate","Date","PATIENTMASTER","isJsonField","jsonObjectName","controlType","dateField","controlName","fieldData","ssubmitterfirstname","sfirstname","ssubmitterlastname","slastname","ssubmitteremail","semail","sshortname","ssubmittercode","ssubmitterid","stelephone","sinstitutionsitename","sinstitutionname","sinstitutioncode","sinstitutioncatname","sinstitutiondistrictname","selectedRecordName","classUrl","onClickView","fieldList","extractedColumnList","get","values","primaryKeyField","masterprimaryKeyField","editMasterRecord","editObject","onComboChangeMasterDyanmic","childParam","mastedataList","onInputOnChangeMasterDynamic","test","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","onDropFile","attachedFiles","maxSize","actionType","deleteAttachment","file","onDropFileSubSample","deleteAttachmentSubSample","myRef","PrevoiusLoginData","componentColumnList","parse","DynamicDesign","getDerivedStateFromProps","componentDidUpdate","previousProps","check","userRoleControlRights","TESTPACKAGE","_excelExportHeader","save","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","selectedComponentWithFile","saveContinueData","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","RealDesignTemplateMappingValue","checkBoxOperation","selectedSample","tempData","fileName","splittedFileName","split","fileExtension","uniquefilename","susername","suserrolename","size","displayName","sloginid","showConfirmAlert","resultDataState","testCommentDataState","ncontrolCode","screenData","openModal","openPortal","subsampletemplate","schedulerSubSampleTemplate","schedulerTemplate","SelectedScheduler","count","item12","nsamplecount","noutsourcerequired","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","className","closeModal","graphView","loginoperation","exportTemplateId","importTemplateId","showValidate","showCalculate","showParam","showExecute","noSave","resetView","importData","showSave","patientRegistration","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","lstPatient","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","hideQualisForms","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","mastertimeZoneList","masterdefaultTimeZone","loadPreregister","handleChange","ssampletypename","exporter","idsField"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\r\nimport { faCalculator, faFileExport, faFileImport } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    ageCalculate,\r\n    ageCalculateOnlyForYear,\r\n    childComboClear,\r\n    comboChild, convertDateTimetoString,\r\n    extractFieldHeader,\r\n    filterRecordBasedOnTwoArrays,\r\n    formatDate,\r\n    formatInputDate,\r\n    formatInputDateWithoutT,\r\n    getSameRecordFromTwoArrays,\r\n    rearrangeDateFormat,\r\n    rearrangeDateFormatforUI,\r\n    removeIndex,\r\n    removeSpaceFromFirst,\r\n    showEsign,\r\n    sortByField,\r\n    validateEmail, validatePhoneNumber, conditionBasedInput, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify,\r\n    checkFilterIsEmptyQueryBuilder\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, callService,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest,\r\n    rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration, insertRegSample\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport Esign from '../audittrail/Esign';\r\nimport { ThemeConsumer } from 'styled-components';\r\nimport PatientMaster from '../contactmaster/PatientMaster';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n//import SplitterLayout from 'react-splitter-layout';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\r\nimport AddImportFileData from './AddImportFileData';\r\nimport AddImportSampleCountData from './AddImportSampleCountData';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        selectedTestPackageData: {},\r\n        selectPackage: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false,\r\n        specBasedTestPackage: false,\r\n        selectedMaster: [],\r\n        exportFiled: []\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.info(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n        const filterQueryTreeStr = QbUtils.getTree(immutableTree);\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery,filterQueryTreeStr\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n\r\n    // searchClickedItemParent(treeData) {\r\n    //     let ParentItem = { ...treeData };\r\n    //     let isFilterEmpty=true;\r\n    //         let childArray = ParentItem.children1;\r\n    //         if (childArray && childArray.length > 0 && childArray !== undefined) {\r\n    //             for (var i = 0; i < childArray.length; i++) {\r\n    //                 let childData = childArray[i]\r\n    //                 if (!childData.hasOwnProperty('children1')) {\r\n    //                     if( childData.properties.field !== null && childData.properties.operator!==\"is_empty\"\r\n    //                       && childData.properties.operator!==\"is_not_empty\"\r\n    //                       && childData.properties.operator!==\"is_null\"\r\n    //                       && childData.properties.operator!==\"is_not_null\" ){\r\n    //                         if( childData.properties.field !== null && (childData.properties.operator===\"not_equal\"||childData.properties.operator===\"equal\") &&\r\n    //                         childData.properties.valueSrc[0]==='func'){\r\n    //                        isFilterEmpty= childData.properties.value[0] && childData.properties.value[0].args.str && childData.properties.value[0].args.str.value!==\"\" && \r\n    //                        childData.properties.value[0] && childData.properties.value[0].args.str && childData.properties.value[0].args.str.value!==undefined ? true:false;\r\n    //                         }else{\r\n    //                         isFilterEmpty= (childData.properties.value[0]!==\"\" && childData.properties.value[0]!==undefined)? true:false;\r\n    //                         }\r\n    //                         if(!isFilterEmpty){\r\n    //                         return isFilterEmpty;\r\n    //                     }\r\n    //                 }\r\n    //                 } else {\r\n    //                     if (childData) {\r\n    //                         ParentItem = this.searchClickedItemParent(childData)\r\n    //                         if(!ParentItem){\r\n    //                             return ParentItem;\r\n    //                         }\r\n    //                     } \r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //         return isFilterEmpty;\r\n    // }\r\n\r\n    handleExecuteClick = (event) => {\r\n        const filterquery = this.props.Login.filterquery\r\n        const filterQueryTreeStr = this.props.Login.filterQueryTreeStr;\r\n        let isFilterEmpty=checkFilterIsEmptyQueryBuilder(filterQueryTreeStr);\r\n        if (filterquery !== \"\" && filterquery !== undefined\r\n            && !filterquery.includes('Invalid date') && isFilterEmpty) {\r\n            const val = removeSpaceFromFirst(filterquery, '')\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: val\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_PROVIDEVALUESFORINPUTS\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n\r\n        if (component[\"childFields\"]) {\r\n            const index = this.props.Login.masterIndex;\r\n            let selectedRecord = this.state.selectedMaster || {};\r\n\r\n            component[\"childFields\"].map(item => {\r\n                let data = item1[item.columnname];\r\n                if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                    //combocontrol\r\n                    data = { label: item1[item.sdisplaymember], value: item1[item.svaluemember] };\r\n                }\r\n                else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    //Date picker control\r\n                    data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\r\n                }\r\n                selectedRecord[index][item.columnname] = data;\r\n            })\r\n\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: selectedRecord, loadCustomSearchFilter: false,\r\n                    screenName: this.props.Login.addMaster === true\r\n                        ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                        : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            const newdata = {\r\n                label: item1[component['displaymember']],\r\n                value: item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } }\r\n            }\r\n\r\n\r\n            this.onComboChange(newdata, component, component['label'])\r\n        }\r\n    };\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         if (this.props.Login.loadSubSample) {\r\n    //             const selectComponent = this.state.selectComponent;\r\n    //             component.child.map(y => {\r\n    //                 const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 // if (readonlyfields !== -1) {\r\n\r\n    //                 //     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                 //             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n    //                 //     } else {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                 //     }\r\n    //                 // }\r\n\r\n    //                 if (readonlyfields !== -1) {\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectComponent[y.label + 'value'] = selectComponent[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectComponent[y.label]);\r\n\r\n    //                                     selectComponent[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     } else {\r\n    //                         if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                     selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         } else {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         }\r\n    //                     }\r\n\r\n\r\n    //                 } else {\r\n    //                     const comboComponents = this.state.SubSamplecomboComponents;\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n\r\n    //                             const val = this.props.Login.SubSamplecomboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectComponent[y.label] = val[0]\r\n\r\n    //                             //selectComponent[y.label] = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectComponent,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: \"SubSample\",\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         } else {\r\n    //             const selectedRecord = this.state.selectedRecord;\r\n    //             component.child.map(y => {\r\n    //                 // component.filterfields.filter(x=>x.)\r\n    //                 const withoutCombocomponent = this.props.withoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                     selectedRecord[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     }\r\n    //                     else if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 } else {\r\n    //                     const comboComponents = this.props.comboComponents || [];\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n    //                             const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectedRecord[y.label] = val[0]\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectedRecord,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        // console.log(\"handle save:\", selectedRecord);\r\n\r\n        if (this.props.Login.addMaster) {\r\n            const masterIndex = this.props.Login.masterIndex\r\n            mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true)\r\n            selectedRecord = this.state.selectedMaster[masterIndex]\r\n        }\r\n        else if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // console.log(\"component1:\", component);\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    //  console.log(\"componentrow:\", componentrow);\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label,\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        } else if (this.props.Login.loadImportFileData) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"files\" },\r\n            ]\r\n\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.sampleexportfields.findIndex(x=>x===componentrow.label)===-1) {\r\n                                        if (componentrow.mandatory === true) {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : this.props.sampleexportfields.findIndex(x=>x===component.label)===-1 ? component.mandatory === true ?\r\n                                    component.inputtype === \"email\" ?\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": component.label, \r\n                                            \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                        :\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": component.label, \r\n                                            \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                        }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n\r\n        }\r\n        else if (this.props.Login.loadImportSampleCountData) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SAMPLECOUNT\", \"dataField\": \"nsamplecount\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            ]\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        //\"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        // \"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        //  console.log(\"mandate fields:\", mandatoryFields);\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.addMaster) {\r\n                    this.onSaveMasterRecord(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    let selectedSpecCheck = {...this.state.selectedSpec}\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    let inputvalues={};\r\n                    if(this.state.selectedRecord[\"nallottedspeccode\"]!==selectedSpecCheck.nallottedspeccode){\r\n                            inputvalues={  selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec: { ...selectedSpec },\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    }else{\r\n                        inputvalues={ \r\n                            loadSpec: false,\r\n                            selectedSpec: { ...selectedSpec },\r\n                           screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                            this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                    }\r\n                    }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            // selectedTestData: [],\r\n                            // selectComponent: [],\r\n                            // selectedComponent: {},\r\n                            // loadSpec: false,\r\n                            // SelectedTest: [],\r\n                            // Test: [],\r\n                            // Component: [],\r\n                            // subSampleDataGridList: [],\r\n                            // selectedSpec: { ...selectedSpec },\r\n                            // screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                            //     this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            // specBasedComponent\r\n                            ...inputvalues\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadImportFileData) {\r\n                    this.onSaveClickImport('1', this.formRef);\r\n                }\r\n                else if (this.props.Login.loadImportSampleCountData) {\r\n                    this.onSaveClickImport('2', this.formRef);\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    MandatoryCheckSubSample = () => {\r\n\r\n        let mandatoryFields = []\r\n        let exportFields = []\r\n        let comboComponent = []\r\n\r\n        let subSampleFields = []\r\n        if (this.state.specBasedComponent) {\r\n            mandatoryFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n            exportFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n            subSampleFields = [{ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode_child\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n        }\r\n\r\n\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    comboComponent.push(componentrow)\r\n                                }\r\n\r\n                                subSampleFields.push({\r\n                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    \"dataField\": componentrow.label,\r\n                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                        \"selectbox\" : \"textbox\",\r\n                                    \"label\": componentrow.label\r\n                                })\r\n\r\n\r\n                                if (this.props.subsampleexportfields.findIndex(x=>x===componentrow.label)!==-1) {\r\n                                    exportFields.push({\r\n                                        // \"idsName\": componentrow.label,\r\n                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": componentrow.label,\r\n                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                            \"selectbox\" : \"textbox\",\r\n                                        \"label\": componentrow.label\r\n                                    })\r\n                                }\r\n\r\n                                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.subsampleexportfields.findIndex(x=>x===componentrow.label)!==-1) {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    } else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            // \"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.subsampleexportfields.findIndex(x=>x===componentrow.label)!==-1 && componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": false, //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if (component.inputtype === \"combo\") {\r\n                                comboComponent.push(component)\r\n                            }\r\n\r\n                            subSampleFields.push({\r\n                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                \"dataField\": component.label,\r\n                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                \"controlType\": component.inputtype === \"combo\" ?\r\n                                    \"selectbox\" : \"textbox\",\r\n                                \"label\": component.label\r\n                            })\r\n\r\n                            if (this.props.subsampleexportfields.findIndex(x=>x===component.label)!==-1) {\r\n                                exportFields.push({\r\n                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    \"dataField\": component.label,\r\n                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                    \"controlType\": component.inputtype === \"combo\" ?\r\n                                        \"selectbox\" : \"textbox\",\r\n                                    \"label\": component.label\r\n                                })\r\n                            }\r\n                            if (component.mandatory === true && !component.templatemandatory && this.props.subsampleexportfields.findIndex(x=>x===component.label)!==-1  ) {\r\n                                if (component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        //\"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                if (this.props.subsampleexportfields.findIndex(x=>x===component.label)!==-1 &&  component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": false,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        // \"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n        return { mandatoryFields, exportFields, subSampleFields, comboComponent };\r\n    }\r\n\r\n    // SubSampleFields = () => {\r\n\r\n    //     let mandatoryFields = []\r\n    //     if (this.state.specBasedComponent)\r\n    //         mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n    //     this.props.Login.masterData.SubSampleTemplate &&\r\n    //         this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             mandatoryFields.push({\r\n    //                                 \"mandatory\": true,\r\n    //                                 // \"idsName\": componentrow.label,\r\n    //                                 \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                                 \"dataField\": componentrow.label,\r\n    //                                 \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                                 \"controlType\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"selectbox\" : \"textbox\"\r\n    //                             })\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         :\r\n    //                         mandatoryFields.push({\r\n    //                             \"mandatory\": true,\r\n    //                             //\"idsName\": component.label, \r\n    //                             \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                             \"dataField\": component.label,\r\n    //                             \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n    //                                 \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                             \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n    //                         })\r\n\r\n\r\n    //                 })\r\n    //             })\r\n    //         })\r\n\r\n    //     return mandatoryFields;\r\n    // }\r\n\r\n    // SampleFields = () => {\r\n\r\n    //     let mandatoryFields = []\r\n    //     if (this.state.specBasedComponent)\r\n    //         mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n    //     this.props.Login.masterData.SubSampleTemplate &&\r\n    //         this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             mandatoryFields.push({\r\n    //                                 \"mandatory\": true,\r\n    //                                 // \"idsName\": componentrow.label,\r\n    //                                 \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                                 \"dataField\": componentrow.label,\r\n    //                                 \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                                 \"controlType\": componentrow.inputtype === \"combo\" ?\r\n    //                                     \"selectbox\" : \"textbox\"\r\n    //                             })\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         :\r\n    //                         mandatoryFields.push({\r\n    //                             \"mandatory\": true,\r\n    //                             //\"idsName\": component.label, \r\n    //                             \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n    //                             \"dataField\": component.label,\r\n    //                             \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n    //                                 \"IDS_SELECT\" : \"IDS_ENTER\",\r\n    //                             \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n    //                         })\r\n\r\n\r\n    //                 })\r\n    //             })\r\n    //         })\r\n\r\n    //     return mandatoryFields;\r\n    // }\r\n\r\n\r\n    MandatoryCheck = () => {\r\n        const mandatoryFields = []\r\n        const exportFields = []\r\n        const comboComponent = []\r\n        this.props.Login.masterData.registrationTemplate &&\r\n            this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    comboComponent.push(componentrow)\r\n                                }\r\n\r\n\r\n                                if (this.props.sampleexportfields.findIndex(x=>x===componentrow.label)!==-1) {\r\n                                    exportFields.push({\r\n                                        // \"idsName\": componentrow.label,\r\n                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": componentrow.label,\r\n                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                            \"selectbox\" : \"textbox\",\r\n                                        \"label\": componentrow.label\r\n                                    })\r\n                                }\r\n\r\n                                if (componentrow.mandatory === true && !componentrow.templatemandatory && this.props.sampleexportfields.findIndex(x=>x===componentrow.label)!==-1) {\r\n                                    if (componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    } else {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": true,\r\n                                            // \"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.sampleexportfields.findIndex(x=>x===componentrow.label)!==-1 && componentrow.inputtype === \"email\") {\r\n                                        mandatoryFields.push({\r\n                                            \"mandatory\": false, //\"idsName\": componentrow.label,\r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            // \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"email\",\r\n                                            \"label\": componentrow.label\r\n                                        })\r\n                                    }\r\n                                }\r\n                                return null;\r\n                            })\r\n                        } else {\r\n\r\n                            if (component.inputtype === \"combo\") {\r\n                                comboComponent.push(component)\r\n                            }\r\n\r\n\r\n                            if (this.props.sampleexportfields.findIndex(x=>x===component.label)!==-1) {\r\n                                exportFields.push({\r\n                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    \"dataField\": component.label,\r\n                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                    \"controlType\": component.inputtype === \"combo\" ?\r\n                                        \"selectbox\" : \"textbox\",\r\n                                    \"label\": component.label\r\n                                })\r\n                            }\r\n                            if (component.mandatory === true && !component.templatemandatory  && this.props.sampleexportfields.findIndex(x=>x===component.label)!==-1) {\r\n                                if (component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        //\"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                if (this.props.sampleexportfields.findIndex(x=>x===component.label)!==-1 && component.inputtype === \"email\") {\r\n                                    mandatoryFields.push({\r\n                                        \"mandatory\": false,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label,\r\n                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                        // \"validateFunction\": validateEmail,\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                        \"controlType\": \"email\",\r\n                                        \"label\": component.label\r\n                                    })\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n\r\n        return { mandatoryFields, exportFields, comboComponent };\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //console.log(\"Control:\", control);\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n            let project = false;\r\n            let nprojectmastercode = -1;\r\n            let childSpec = false;\r\n            const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                : 1\r\n\r\n            if (nsampletypecode === SampleType.CLINICALTYPE) {\r\n                if (control.table.item.nquerybuildertablecode === 228\r\n                    && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\r\n                    selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid']\r\n                }\r\n            }\r\n\r\n            if (control.name === \"manualorderid\") {\r\n                selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid']\r\n            }\r\n\r\n            const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired)\r\n                : transactionStatus.NO\r\n\r\n            const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired)\r\n                : transactionStatus.NO;\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                    this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\r\n            }\r\n            if (comboData) {\r\n                comboData[\"item\"] = {\r\n                    ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                    \"nquerybuildertablecode\": control.nquerybuildertablecode, source: control.source\r\n                };\r\n\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    //ALPD-2009       \r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n                        product = true;\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument Name') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE\r\n                    && nprojectSpecReqd === transactionStatus.YES) {\r\n                    //ALPD-2009\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n\r\n                        //const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                    else {\r\n\r\n                        const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                        nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\r\n\r\n                        nprojectmastercode = selectedRecord['Project Code'] &&\r\n                            selectedRecord['Project Code']['value'];\r\n                        project = true;\r\n                    }\r\n                }\r\n                else {\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n                        productCategory = true;\r\n                    }\r\n                    else {\r\n                        inputParem[\"ProductName\"] = Product[0].label;\r\n                        product = true;\r\n                    }\r\n\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0] && Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n            else if (control.name === 'Project Code') {\r\n                //project = true;\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] !== undefined ? selectedRecord[ProductCategory[0].label].value : -1;\r\n\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    // nproductcode = selectedRecord[Product[0].label] &&\r\n                    //     selectedRecord[Product[0].label].value;\r\n                    nproductcode = selectedRecord[Product[0].label] !== undefined ? selectedRecord[Product[0].label].value : -1;\r\n                }\r\n                nprojectmastercode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    project = true;\r\n                }\r\n                // else{\r\n                //     if (ncategorybasedflow === 3) {\r\n                //         productCategory = true;\r\n                //     }\r\n                //     else{\r\n                //         product =true;\r\n                //     }\r\n                // }\r\n\r\n            }\r\n\r\n            if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                product = false;\r\n                productCategory = false;\r\n                materialType = false;\r\n                instrument = false;\r\n                instrumentCategory = false;\r\n                material = false;\r\n                materialCategory = false;\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                // let childTemplateMandatory = {}\r\n                // if (!(product ||\r\n                //     productCategory ||\r\n                //     materialType ||\r\n                //     instrument ||\r\n                //     instrumentCategory ||\r\n                //     material ||\r\n                //     materialCategory ||\r\n                //     project)) {\r\n                //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\r\n                //     if (TemplateMandatory && TemplateMandatory.length > 0) {\r\n                //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\r\n                //         const Product = childComboList.filter(x => x.name === \"Product\");\r\n                //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\r\n                //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\r\n                //         const Material = childComboList.filter(x => x.name === \"Material\");\r\n                //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\r\n                //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\r\n                //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\r\n\r\n                //         childTemplateMandatory = {\r\n                //             ProductCategory, Product\r\n                //             , InstrumentCategory\r\n                //             , MaterialCategory, Material\r\n                //             , MaterialType, MaterialType\r\n                //             , ProjectCode, Instrument\r\n                //         }\r\n                //         if (ProductCategory || Product\r\n                //             || InstrumentCategory\r\n                //             || MaterialCategory || Material\r\n                //             || MaterialType || MaterialType\r\n                //             || ProjectCode || Instrument) {\r\n                //             childSpec = true;\r\n                //         }\r\n                //     }\r\n                //     else {\r\n                //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\r\n                //         if (TemplateChild&& TemplateChild.length> 0) {\r\n\r\n                //             TemplateChild.map(x=>{\r\n                //                 x.child&&x.child.map(y=>{\r\n                //                 const data=this.props.comboComponents(x=>x.label===y.label)  \r\n                //                 if(data&&data[0].templatemandatory){\r\n                //                     const name=data[0].name\r\n                //                     if(name===\"Product Category\"||name===\"Instrument Category\"\r\n                //                     ||name===\"Product\"||name===\"Material Category\"\r\n                //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\r\n                //                         childSpec = true;\r\n                //                         childTemplateMandatory={childSpec:true}\r\n                //                     }\r\n                //                 }\r\n                //                 })\r\n                //             })\r\n                //         }\r\n\r\n                //     }\r\n                // }\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                    nprojectmastercode, nprojectSpecReqd,\r\n                    nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n                    nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired\r\n                    // ...childTemplateMandatory\r\n                }\r\n                this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType,\r\n                    undefined, project, this.props.comboComponents)\r\n            }\r\n            else {\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType\r\n                    || project) {\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                        nprojectmastercode,\r\n                        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material,\r\n                        undefined, undefined, project)\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord, loadCustomSearchFilter: false, }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, control, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            } else {\r\n                const value = selectedRecord[event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    if (value.includes(radiotext)) {\r\n                        const index = value.indexOf(radiotext);\r\n                        if (index !== -1) {\r\n                            if (index === 0) {\r\n                                const indexcomma = value.indexOf(\",\")\r\n                                if (indexcomma !== -1) {\r\n                                    selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                                } else {\r\n                                    selectedRecord[event.target.name] = \"\"\r\n                                }\r\n                            } else {\r\n                                if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                    selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                                } else {\r\n                                    selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = radiotext;\r\n                }\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = conditionBasedInput(control, event.target.value, radiotext)\r\n            // if (control.isnumeric === true\r\n            //      && control.label===radiotext) {\r\n            //     selectedRecord[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            // } else {\r\n            //     selectedRecord[event.target.name] = event.target.value;\r\n            // }\r\n            //  selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, control, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectComponent[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = conditionBasedInput(control, event.target.value, radiotext)\r\n            // if (control.isnumeric === true\r\n            //     && control.label===radiotext) { \r\n            //             selectComponent[event.target.name] = event.target.value.replace(/[^0-9]/g, '');\r\n            //     } else {\r\n            //         selectComponent[event.target.name] = event.target.value;\r\n            //     }\r\n            // selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? { ...comboData.item, pkey: control.valuemember, nquerybuildertablecode: control.nquerybuildertablecode, source: control.source } : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: \"IDS_SUBSAMPLE\"\r\n            }\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], pkey: control.valuemember,\r\n                nquerybuildertablecode: control.nquerybuildertablecode,\r\n                source: control.source\r\n            };\r\n\r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectComponent = this.state.selectComponent\r\n        if (selectComponent[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectComponent[control.label] < parseFloat(control.max))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectComponent[control.label] > parseFloat(control.min))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n            const age = ageCalculate(dateValue);\r\n            selectedRecord[ageComp[0].label] = age;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n\r\n        if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n            check = true;\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n            // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n            //     this.props.Login.userRoleControlRights !== undefined ? true : false\r\n            const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n                this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false\r\n\r\n            this.subSampleDataGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"150px\"\r\n                                        })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory)\r\n                                    this.subSampleDataGridList.push({\r\n                                        \"mandatory\": true,// \"idsName\": component.label,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"150px\"\r\n                                    });\r\n\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent, specBasedTestPackage\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\r\n            this.setState({ selectedTestPackageData: this.props.Login.selectedTestPackageData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\r\n            this.setState({ selectPackage: this.props.Login.selectPackage });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\r\n            this.setState({ specBasedTestPackage: this.props.Login.specBasedTestPackage });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n        if (this.state.export) {\r\n            this._excelExportHeader.save()\r\n            this.setState({ export: false })\r\n        }\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.info(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    AddImportFile = (e) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadImportFileData: true,\r\n                    screenName: this.props.intl.formatMessage({ id: \"IDS_IMPORT\" })\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        } else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }))\r\n        }\r\n    }\r\n\r\n    AddSampleCount = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportSampleCountData: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SAMPLECOUNT\" })\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let isValid = true;\r\n            const selectedSpecification = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            };\r\n            let selectedRecord = selectedComponent;\r\n            //  if(componentBasedSpec){\r\n            if (nneedsubsample) {\r\n                if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                    delete selectedComponent[\"selected\"];\r\n                }\r\n                else {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord = selectedSpecification;\r\n            }\r\n            // }\r\n            // else{\r\n            //     selectedRecord = selectedSpecification;          \r\n            // }\r\n\r\n            if (isValid) {\r\n                this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n            // } \r\n            // else {\r\n            //     const selectedComponent1 = {\r\n            //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            //         slno: 1\r\n            //     }\r\n            //     this.props.getTest(selectedComponent1,\r\n            //         this.props.Login,\r\n            //         nneedsubsample, specBasedComponent);\r\n            // }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeImportFileData = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportFileData: false,\r\n                selectedRecord: { ...{ ...this.state.selectedRecord, sfilename: undefined }, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeImportSampleCountData = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadImportSampleCountData: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.addMaster === true\r\n                    ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                    : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                kendoFilter: { logic: \"and\", filters: [] },\r\n                kendoSkip: 0,\r\n                kendoTake: 5,\r\n                awesomeConfig: undefined,\r\n                awesomeTree: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n\r\n\r\n    closeAddMaster = (e) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let updateInfo = {}\r\n        if (masterIndex !== 0) {\r\n\r\n            const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n            const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex)\r\n            const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n            const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n            const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex)\r\n            const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n            const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n            const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n            const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex)\r\n            const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex)\r\n            const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex)\r\n            masterIndex = masterIndex - 1;\r\n\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster,\r\n                    selectedControl,\r\n                    masterextractedColumnList,\r\n                    masterfieldList,\r\n                    masterdataList,\r\n                    mastercomboComponents,\r\n                    masterwithoutCombocomponent,\r\n                    masterComboColumnFiled,\r\n                    masterDesign,\r\n                    masterIndex,\r\n                    screenName,\r\n                    masterOperation,\r\n                    masterEditObject,\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: [],\r\n                    selectedControl: [],\r\n                    masterextractedColumnList: [],\r\n                    masterfieldList: [],\r\n                    addMaster: false,\r\n                    masterdataList: [],\r\n                    mastercomboComponents: [],\r\n                    masterwithoutCombocomponent: [],\r\n                    masterComboColumnFiled: [],\r\n                    masterDesign: [],\r\n                    masterEditObject: [],\r\n                    masterOperation: [],\r\n                    masterIndex: undefined,\r\n                    screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeDynamicView = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isDynamicViewSlideOut: false,\r\n                selectedDynamicViewControl: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                TestCombined: [],\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                masterStatus: \"\",\r\n                TestPackage: [],\r\n                //Test:[]\r\n                TestCombined: [],\r\n\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                // selectComponent[\"nneedsubsample\"] = nneedsubsample;\r\n                selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onTestPackageChange = (comboData, fieldName, nneedsubsample, action) => {\r\n        const selectPackage = this.state.selectPackage || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n\r\n        if (comboData !== null) {\r\n            selectPackage[fieldName] = comboData;\r\n            selectPackage[\"stestpackagename\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n            const selectedComponentData = this.props.Login.selectedComponent ?\r\n                Object.keys(this.props.Login.selectedComponent).length !== 0\r\n                    ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item\r\n                : this.state.selectedSpec.nallottedspeccode.item;\r\n            this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, action\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            if (selectPackage[\"ntestpackagecode\"]) {\r\n                delete selectPackage[\"ntestpackagecode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n                let Test = (action !== \"AddSubSample\") ? (this.props.Login.Test || []) : [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectPackage, TestCombined: availableTest }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList,\r\n                    masterStatus: \"\", selectedComponentWithFile: objcomponent,\r\n\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"] ? JSON.parse(JSON.stringify(this.state.selectedTestData[\"ntestgrouptestcode\"])) : this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                TestCombined: this.props.Login.TestCombined,\r\n                //selectComponent:C.saveContinueData,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList,\r\n                //selectedTestData: {}\r\n                specBasedTestPackage: this.state.specBasedTestPackage,\r\n                saveContinueData: this.props.Login.saveContinueData,\r\n                selectedComponentWithFile: objcomponent\r\n            }\r\n\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent, this.props.Login)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const comp1 = this.props.Login.Component\r\n        const Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n\r\n        const index = comp1.findIndex(x => x.slno === dataItem.slno);\r\n        const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\r\n        let updateInfo = {};\r\n        let incslno = comp1.length - 1;\r\n        if (comp1.length !== dataItem.slno) {\r\n            //  let slno = Component[index].slno\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            // const preList = comp1.splice(0, index);\r\n            // const afterList = comp1.splice(index, comp1.length);\r\n\r\n\r\n            // preList.map(x => {\r\n            //     Test[incslno] = Test && Test[x.slno]\r\n            //     x.slno = incslno;\r\n            //     incslno = incslno - 1;\r\n            //     return null;\r\n            // })\r\n\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n\r\n            //const Component1 = [...preList, ...afterList];\r\n\r\n            // Component1.map(x => {\r\n            //     subSampleDataGridList.push({ ...x.jsonuidata, ...x })\r\n\r\n            // })\r\n            //sortByField(subSampleDataGridList, 'desc', 'slno')\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n\r\n        } else {\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0] && Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent && selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue ?\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\",\r\n\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent, specBasedTestPackage) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const component = [...data, ...SubSamplewithoutCombocomponent]\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (component.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                        || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.screenName !== 'scheduler') {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistration(true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistrationScheduler(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    onSaveClickImport = (saveType, formRef) => {\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let Map = {};\r\n            if (nneedsubsample === false || !this.state.specBasedComponent) {\r\n                Map[\"nspecsampletypecode\"] = this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n            }\r\n\r\n            Map[\"specBasedComponnet\"] = this.state.specBasedComponent\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            const fields = this.MandatoryCheck();\r\n\r\n            Map[\"MandatoryList\"] = fields.mandatoryFields\r\n           \r\n            Map[\"ExportList\"] = fields.exportFields\r\n\r\n            Map[\"comboComponent\"] = fields.comboComponent\r\n\r\n            Map[\"SampleFieldsString\"] = [...fields.exportFields.map(x => x.label)];\r\n\r\n\r\n            if (nneedsubsample) {\r\n\r\n\r\n                const subSample = this.MandatoryCheckSubSample()\r\n\r\n\r\n                Map[\"comboComponent\"] = [...fields.comboComponent, ...subSample.comboComponent]\r\n\r\n\r\n                Map[\"MandatoryList\"] = [...fields.mandatoryFields,...subSample.mandatoryFields]\r\n\r\n                Map[\"SubSampleFields\"] = subSample.subSampleFields\r\n\r\n                Map[\"SubSampleExpotFields\"] = subSample.exportFields\r\n\r\n                Map[\"SubSampleFieldsString\"] = [...subSample.exportFields.map(x => x.label)];\r\n\r\n            }\r\n            // Map[\"SampleFields\"] = this.SampleFields();\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n            Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n            Map[\"nflag\"] = 2;\r\n            Map[\"url\"] = this.props.Login.settings[24];\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n            Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n\r\n            if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                    Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                }\r\n                if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                    Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n                }\r\n                Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                let orderType = {\r\n                    \"Order Type\": {\r\n                        \"pkey\": \"nordertypecode\",\r\n                        \"label\": \"NA\",\r\n                        \"value\": -1,\r\n                        \"source\": \"ordertype\",\r\n                        \"nordertypecode\": -1,\r\n                        \"nquerybuildertablecode\": 246\r\n                    }\r\n                };\r\n                if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                    //external order\r\n                    orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"External\",\r\n                            \"value\": 2,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": 2,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n\r\n                    Map[\"Registration\"]['jsondata'] = {\r\n                        ...Map[\"Registration\"]['jsondata'],\r\n                        ...orderType\r\n                    };\r\n\r\n                }\r\n                else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                    //manual order\r\n                    orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"Manual\",\r\n                            \"value\": 1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": 1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n\r\n                    Map[\"Registration\"]['jsondata'] = {\r\n                        ...Map[\"Registration\"]['jsondata'],\r\n                        ...orderType\r\n                    };\r\n                }\r\n\r\n                Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n            }\r\n            Map[\"skipmethodvalidity\"] = false;\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n            formData.append(\"registrationImportFile\", this.state.selectedRecord['sfilename'][0])\r\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\",\r\n                formData: formData,\r\n                isFileupload\r\n            }\r\n            this.props.insertRegSample(inputParam, this.props.Login.masterData)\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n        let isFileupload = false;\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            //ntype:2,\r\n            ntype: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? -1 : 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            checkBoxOperation: 3,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        //console.log(\"edit reg:\", param);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        let tempData = {}\r\n        const formData = new FormData();\r\n        this.props.Login.withoutCombocomponent.map(item => {\r\n            if (item.inputtype === \"files\") {\r\n                if (typeof this.state.selectedRecord[item && item.label] === \"object\") {\r\n                    this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                        const fileName = create_UUID();\r\n                        const splittedFileName = item1.name.split('.');\r\n                        const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                        const uniquefilename = fileName + '.' + fileExtension;\r\n\r\n                        tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                        tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                        tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                        tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                        tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                        formData.append(\"uploadedFile\" + index, item1);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        formData.append(\"filecount\", this.state.selectedRecord[item && item.label].length);\r\n                        formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        inputData['isFileupload'] = true;\r\n                        inputData[\"registration\"]['jsondata'] = {\r\n                            ...inputData[\"registration\"]['jsondata'],\r\n                            ...tempData\r\n                        };\r\n                        inputData[\"registration\"]['jsonuidata'] = {\r\n                            ...inputData[\"registration\"]['jsonuidata'],\r\n                            ...tempData\r\n                        };\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                        formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(inputData)));\r\n                        isFileupload = true;\r\n                    }\r\n                    )\r\n                }\r\n            }\r\n        })\r\n\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            isFileupload, formData: formData\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistrationScheduler() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n                this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ?\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\r\n            Map[\"nregtypecode\"] = 1;\r\n            Map[\"nregsubtypecode\"] = 1;\r\n            Map[\"nsampletypecode\"] = 1;\r\n            // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = false;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistrationScheduler(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.schedulerTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n\r\n            Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false)\r\n            //Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    insertMultipleRegistration(saveType) {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                }\r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"Registration\"]['jsondata'] = {\r\n                                ...Map[\"Registration\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"Registration\"]['jsonuidata'] = {\r\n                                ...Map[\"Registration\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"RegistrationSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"RegistrationSample\"][index].uniquefilename);\r\n                            delete (Map[\"RegistrationSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                // formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                let dateList = []\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === 'date') {\r\n                        //dateList.push(item.label)\r\n                    }\r\n                })\r\n                if (saveType === '1') {\r\n                    this.state.selectedRecord['sfilename'] && this.state.selectedRecord['sfilename'].forEach(item => {\r\n                        isFileupload = true\r\n                        Map[\"isFile\"] = true;\r\n                        formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false))\r\n                        formData.append(\"readFile\", item);\r\n                        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                    })\r\n                    formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                } else {\r\n                    isFileupload = true\r\n                    Map[\"isFile\"] = false;\r\n                    Map[\"nsamplecount\"] = this.state.selectedRecord.nsamplecount;\r\n                    formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                    formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                }\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertMultipleRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        let isFileupload = false;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n                Map[\"nneedjoballocation\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedjoballocation;\r\n                Map[\"DataRecordMaster\"] = this.props.Login.masterData;\r\n                Map[\"noutsourcerequired\"] = this.props.Login.masterData.RealSampleTypeValue.noutsourcerequired;\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n\r\n                    let orderType = {\r\n                        \"Order Type\": {\r\n                            \"pkey\": \"nordertypecode\",\r\n                            \"label\": \"NA\",\r\n                            \"value\": -1,\r\n                            \"source\": \"ordertype\",\r\n                            \"nordertypecode\": -1,\r\n                            \"nquerybuildertablecode\": 246\r\n                        }\r\n                    };\r\n                    if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\r\n                        //external order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n\r\n                    }\r\n                    else if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 6) {\r\n                        //manual order\r\n                        orderType = {\r\n                            \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"Manual\",\r\n                                \"value\": 1,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 1,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }\r\n                        };\r\n\r\n                        Map[\"Registration\"]['jsondata'] = {\r\n                            ...Map[\"Registration\"]['jsondata'],\r\n                            ...orderType\r\n                        };\r\n                    }\r\n\r\n\r\n                    // Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                    //                                       ...orderType\r\n                    //                                      }\r\n                    Map[\"orderTypeValue\"] = this.state.selectedRecord['Order Type'] && this.state.selectedRecord['Order Type'].value\r\n                }\r\n                Map[\"skipmethodvalidity\"] = false;\r\n                let tempData = {}\r\n                const formData = new FormData();\r\n                let count = 0;\r\n                this.props.Login.withoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        this.state.selectedRecord[item && item.label] && this.state.selectedRecord[item && item.label].forEach((item1, index) => {\r\n                            const fileName = create_UUID();\r\n                            const splittedFileName = item1.name.split('.');\r\n                            const fileExtension = item1.name.split('.')[splittedFileName.length - 1];\r\n                            const uniquefilename = fileName + '.' + fileExtension;\r\n                            tempData[item && item.label + '_susername_Sample'] = this.props.Login.userInfo.susername\r\n                            tempData[item && item.label + '_suserrolename_Sample'] = this.props.Login.userInfo.suserrolename\r\n                            tempData[item && item.label + '_nfilesize_Sample'] = item1.size\r\n                            tempData[item && item.label + '_ssystemfilename_Sample'] = uniquefilename\r\n                            tempData[item && item.label] = Lims_JSON_stringify(item1.name.trim(), false)\r\n                            formData.append(\"uploadedFile\" + count, item1);\r\n                            formData.append(\"uniquefilename\" + count, uniquefilename);\r\n                            count++;\r\n                            // formData.append(\"filecount\", count);\r\n                            formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            Map['isFileupload'] = true;\r\n                            Map[\"Registration\"]['jsondata'] = {\r\n                                ...Map[\"Registration\"]['jsondata'],\r\n                                ...tempData\r\n                            };\r\n                            Map[\"Registration\"]['jsonuidata'] = {\r\n                                ...Map[\"Registration\"]['jsonuidata'],\r\n                                ...tempData\r\n                            };\r\n                            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                            //formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                            isFileupload = true;\r\n                        }\r\n                        )\r\n                    }\r\n                })\r\n\r\n                this.state.SubSamplewithoutCombocomponent.map(item => {\r\n                    if (item.inputtype === \"files\") {\r\n                        Map[\"RegistrationSample\"].map((item12, index) => {\r\n                            item12[item && item.label] && item12[item && item.label].forEach((item1) => {\r\n                                formData.append(\"uploadedFile\" + count, item1);\r\n                                formData.append(\"uniquefilename\" + count, Map[\"RegistrationSample\"][index].uniquefilename);\r\n                                count++;\r\n                                // formData.append(\"filecount\",  count);\r\n                                formData.append(\"isFileEdited\", transactionStatus.YES);\r\n                                formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n                                isFileupload = true;\r\n                            })\r\n                            delete (Map[\"RegistrationSample\"][index].uniquefilename);\r\n                            delete (Map[\"RegistrationSample\"][index][item && item.label]);\r\n                        })\r\n                    }\r\n                })\r\n                formData.append(\"Map\", Lims_JSON_stringify(JSON.stringify(Map)));\r\n                formData.append(\"filecount\", count);\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\",\r\n                    formData: formData,\r\n                    isFileupload\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n\r\n    handleExportClick = () => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode) {\r\n            const exportFiled = [];\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.sampleexportfields.findIndex(x=>x===componentrow.label)!==-1 ) {\r\n                                        exportFiled.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                :\r\n                                (this.props.sampleexportfields.findIndex(x=>x===component.label)!==-1) ?\r\n                                    exportFiled.push(component) : \"\"\r\n                        })\r\n                    })\r\n\r\n                })\r\n            }\r\n            const subSampleLayout = this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (this.state.specBasedComponent) {\r\n                exportFiled.push({ \"displayname\": \"IDS_COMPONENT\", \"idsField\": true, \"label\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" })\r\n            }\r\nconst mandatoryCheck=[]\r\n\r\n            if (subSampleLayout !== undefined) {\r\n                subSampleLayout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (this.props.subsampleexportfields.findIndex(x=>x===componentrow.label)!==-1 ) {\r\n                                        exportFiled.push(componentrow)\r\n                                    }\r\n                                    else if(componentrow.mandatory){\r\n                                        mandatoryCheck.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                :\r\n                                (this.props.subsampleexportfields.findIndex(x=>x===component.label)!==-1 ) ?\r\n                                    exportFiled.push(component) :component.mandatory?   mandatoryCheck.push(component):  \"\"\r\n                        })\r\n                    })\r\n\r\n                })\r\n            }\r\n            if(exportFiled.length>0){\r\n\r\n                if(mandatoryCheck.length===0){\r\n                    this.setState({ exportFiled, export: true });\r\n                }else{\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLEMANDATORYFIELDMUSTBEEXPORT\" }))\r\n                }\r\n               \r\n            }else{\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_EXPORTFIELDSNOTAVAILABLE\" }))\r\n            }\r\n           \r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n         \r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' :\r\n                                this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.Login.loadEsign === true ?\r\n                                    <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                    : this.props.loginoperation ?\r\n                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                        : <>\r\n                                            {this.props.operation ?\r\n                                                <>\r\n                                                    <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase())}\r\n                                                        defaultMessage='Add' />\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        this.props.Login.screenName ?\r\n                                                            <FormattedMessage id={this.props.Login.screenName} />\r\n                                                            : \"\"\r\n                                                    }\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName ?\r\n                                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                                    : \"\"}\r\n                                        </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\"\r\n                     onClick={this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView :\r\n                        this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter :\r\n                            this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ?\r\n                                this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                                    this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                        this.props.Login.loadImportFileData ? this.closeImportFileData :\r\n                                            this.props.Login.loadImportSampleCountData ? this.closeImportSampleCountData :\r\n                                                this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.operation === \"create\" && (!this.props.Login.addMaster &&\r\n                        !this.props.Login.loadComponent && !this.props.Login.loadSubSample &&\r\n                        !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest &&\r\n                        !this.props.Login.loadImportFileData && !this.props.Login.loadEsign\r\n                         && !this.props.Login.loadSpec\r\n                         && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode!==SampleType.CLINICALTYPE) ?\r\n                        <>\r\n\r\n                            <Button className=\" btn-user btn-primary-blue\" \r\n                            onClick={() => this.handleExportClick()}\r\n                            hidden={this.props.userRoleControlRights.indexOf(this.props.exportTemplateId) === -1}\r\n                            \r\n                            >\r\n                                <FontAwesomeIcon icon={faFileExport} /> { }\r\n                                <FormattedMessage id={\"IDS_EXPORTTEMPLATE\"} defaultMessage={buttonLabel} />\r\n                            </Button>\r\n\r\n                            <Button className=\" btn-user btn-primary-blue\" \r\n                            hidden={this.props.userRoleControlRights.indexOf(this.props.importTemplateId) === -1}\r\n                            onClick={() => this.AddImportFile()}>\r\n                                <FontAwesomeIcon icon={faFileImport} /> { }\r\n                                <FormattedMessage id={\"IDS_IMPORTTEMPLATE\"} defaultMessage={\"IDS_IMPORTTEMPLATE\"} />\r\n                            </Button>\r\n                        </>\r\n                        : \"\"}\r\n\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? -\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                                            : this.props.Login.loadCustomSearchFilter || ((!this.props.Login.addMaster &&\r\n                                                !this.props.Login.loadComponent && !this.props.Login.loadSubSample &&\r\n                                                !this.props.Login.loadImportSampleCountData && !this.props.Login.loadTest &&\r\n                                                !this.props.Login.loadImportFileData && !this.props.Login.loadEsign && !this.props.Login.loadSpec)\r\n                                                && this.props.Login.importData) ? \"\" :\r\n                                                <>\r\n\r\n\r\n                                                    <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                        <FontAwesomeIcon icon={faSave} /> { }\r\n                                                        <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                                    </Button>\r\n                                                </>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && (this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false)) ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body className='popup-fixed-center-headed-full-width'>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n\r\n                                    {this.props.Login.patientRegistration ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <PatientMaster Login={this.props.Login} />\r\n                                            </Col>\r\n                                        </Row> : this.props.Login.isDynamicViewSlideOut ?\r\n                                            <ExternalOrderSlideout\r\n                                                dynamicExternalSample={this.props.Login.dynamicExternalSample}\r\n                                                dynamicExternalTestChild={this.props.Login.dynamicExternalTestChild}\r\n                                                dynamicGridSelectedId={this.props.Login.dynamicGridSelectedId || null}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedDynamicViewControl={this.props.Login.selectedDynamicViewControl}\r\n                                            />\r\n\r\n                                            : this.props.Login.loadCustomSearchFilter ?\r\n                                                this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                                    <KendoDatatoolFilter\r\n                                                        filter={this.props.Login.kendoFilter}\r\n                                                        handleFilterChange={this.handleFilterChange}\r\n                                                        filterData={this.props.Login.lstPatient || []}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        fields={this.props.Login.fields || []}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                    /> : <FilterQueryBuilder\r\n                                                        fields={this.props.Login.fields || {}}\r\n                                                        onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                        tree={this.props.Login.awesomeTree}\r\n                                                        config={this.props.Login.awesomeConfig}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        filterData={this.props.Login.lstPatient}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        handleExecuteClick={this.handleExecuteClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                    /> :\r\n                                                this.props.Login.loadSpec ?\r\n                                                    <AddSpecification\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        handleTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.ActiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                    />\r\n                                                    : this.props.Login.loadTest ?\r\n                                                        <AddTest\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.props.Login.selectedTestData}\r\n                                                            TestPackage={this.props.Login.TestPackage || []}\r\n                                                            selectPackage={this.state.selectPackage}\r\n                                                            onTestPackageChange={this.onTestPackageChange}\r\n                                                            hideQualisForms={this.props.Login.hideQualisForms}\r\n\r\n                                                        /> : this.props.Login.loadComponent ?\r\n                                                            <AddComponentPopUp\r\n                                                                ref={this.myScrollRef}\r\n                                                                selectComponent={this.state.selectComponent || {}}\r\n                                                                RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                                RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                                RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                                RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                                formatMessage={this.props.intl.formatMessage}\r\n                                                                handleDateChange={this.handleDateChangeComp}\r\n                                                                Component={this.props.Login.lstComponent || []}\r\n                                                                onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                // onComboChange={this.onComponentComboChange}\r\n                                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                                onComponentChange={this.onComponentChange}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                                CurrentTime={this.props.Login.CurrentTime}\r\n                                                            /> : this.props.Login.addMaster ?\r\n                                                                <AddMasterRecords\r\n                                                                    selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                                                    fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                                                    extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                                                    // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                                                    selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                                                    onInputOnChange={this.onInputOnChangeMaster}\r\n                                                                    onComboChange={this.onComboChangeMaster}\r\n                                                                    handleDateChange={this.handleDateChangeMaster}\r\n                                                                    dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                                                    onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                                                    masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                                                    mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                                                    masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                                                    onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                                                    handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                                                    onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                                                    onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                                                    onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    Login={this.props.Login}\r\n                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                    userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                    masterIndex={this.props.Login.masterIndex}\r\n                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                    editMasterRecord={this.editMasterRecord}\r\n\r\n                                                                />\r\n                                                                : this.props.Login.loadSubSample ?\r\n                                                                    <AddSubSample\r\n                                                                        Component={this.props.Login.lstComponent || []}\r\n                                                                        selectComponent={this.state.selectComponent}\r\n                                                                        selectedRecord={this.state.selectedRecord}\r\n                                                                        onComponentChange={this.onComponentChange}\r\n                                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                                        onNumericBlur={this.onNumericBlurSubSample}\r\n                                                                        comboData={this.props.Login.SubSamplecomboData}\r\n                                                                        onComboChange={this.onComboSubSampleChange}\r\n                                                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                                                        TestChange={this.TestChange}\r\n                                                                        selectedTestData={this.state.selectedTestData}\r\n                                                                        selectPackage={this.state.selectPackage}\r\n                                                                        selectedTestPackageData={this.state.selectedTestPackageData}\r\n                                                                        TestPackage={this.props.Login.TestPackage || []}\r\n                                                                        childoperation={this.props.Login.childoperation}\r\n                                                                        specBasedComponent={this.state.specBasedComponent}\r\n                                                                        onTestPackageChange={this.onTestPackageChange}\r\n                                                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                                        addMasterRecord={this.addMasterRecord}\r\n                                                                        editMasterRecord={this.editMasterRecord}\r\n                                                                        onDropFile={this.onDropFileSubSample}\r\n                                                                        deleteAttachment={this.deleteAttachmentSubSample}\r\n\r\n                                                                    />\r\n                                                                    : this.props.Login.loadEsign ?\r\n\r\n                                                                        <Esign\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                                                        />\r\n                                                                        : this.props.Login.loadImportFileData ?\r\n                                                                            <AddImportFileData\r\n                                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                                onDropFile={this.onDropFile}\r\n                                                                                deleteAttachment={this.deleteAttachment}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                            />\r\n                                                                            : this.props.Login.loadImportSampleCountData ?\r\n                                                                                <AddImportSampleCountData\r\n                                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    onNumericInputChange={this.onNumericInputChange}\r\n                                                                                />\r\n                                                                                : <RegisterSlideOut\r\n                                                                                    //addPatient={this.addPatient}\r\n                                                                                    editfield={this.sampleeditable &&\r\n                                                                                        this.sampleeditable['sampleeditable']}\r\n                                                                                    ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                                        this.props.Login.masterData.selectedSample.length > 0\r\n                                                                                        && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                                                    loadPreregister={this.props.Login.loadPreregister}\r\n                                                                                    selectedSpec={this.state.selectedSpec}\r\n                                                                                    selectedRecord={this.state.selectedRecord}\r\n                                                                                    selectedComponent={this.props.Login.selectedComponent}\r\n                                                                                    subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                                                    SelectedTest={this.props.Login.SelectedTest}\r\n                                                                                    selectedTestData={this.state.selectedTestData}\r\n                                                                                    userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                                    userRoleControlRights1={this.props.Login.userRoleControlRights}\r\n                                                                                    templateData={this.props.Login.masterData.registrationTemplate ?\r\n                                                                                        this.props.Login.masterData.registrationTemplate.jsondata :\r\n                                                                                        this.props.Login.masterData.schedulerTemplate ?\r\n                                                                                            this.props.Login.masterData.schedulerTemplate.jsondata : {}}\r\n                                                                                    handleChange={this.props.handleChange}\r\n                                                                                    handleDateChange={this.handleDateChange}\r\n                                                                                    onInputOnChange={this.onInputOnChange}\r\n                                                                                    onNumericInputChange={this.onNumericInputChange}\r\n                                                                                    onNumericBlur={this.onNumericBlur}\r\n                                                                                    comboData={this.props.Login.comboData}\r\n                                                                                    onComboChange={this.onComboChange}\r\n                                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                                                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                                    AddSpec={this.AddSpec}\r\n                                                                                    addTest={this.addTestslide}\r\n                                                                                    handleComponentRowClick={this.handleComponentRowClick}\r\n                                                                                    nneedsubsample={this.props.Login.masterData\r\n                                                                                        && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false}\r\n                                                                                    specBasedComponent={this.state.specBasedComponent}\r\n                                                                                    AddComponent={this.AddComponent}\r\n                                                                                    deleteComponent={this.deleteComponent}\r\n                                                                                    deleteTest={this.deleteTest}\r\n                                                                                    editComponent={this.editComponent}\r\n                                                                                    componentColumnList={this.componentColumnList}\r\n                                                                                    Component={this.props.Login.Component}\r\n                                                                                    TestChange={this.TestChange}\r\n                                                                                    testDataState={this.state.testDataState}\r\n                                                                                    subSampleDataState={this.state.subSampleDataState}\r\n                                                                                    testDataStateChange={this.testDataStateChange}\r\n                                                                                    subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                                                    addsubSample={this.addsubSample}\r\n                                                                                    editSubSample={this.editSubSample}\r\n                                                                                    subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                                                    selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                                                    operation={this.props.Login.operation}\r\n                                                                                    specBasedTestPackage={this.state.specBasedTestPackage}\r\n                                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                                    editMasterRecord={this.editMasterRecord}\r\n                                                                                    onClickView={this.onClickView}\r\n                                                                                    comboComponents={this.props.Login.comboComponents}\r\n                                                                                    sampleType={{\r\n                                                                                        \"label\": this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\r\n                                                                                        \"value\": this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                                                                                        \"item\": this.props.Login.masterData.RealSampleTypeValue,\r\n                                                                                    }}\r\n                                                                                    onDropFile={this.onDropFile}\r\n                                                                                    deleteAttachment={this.deleteAttachment}\r\n                                                                                    AddImportFile={this.AddImportFile}\r\n                                                                                    AddSampleCount={this.AddSampleCount}\r\n                                                                                    importData={this.props.Login.importData}\r\n                                                                                />\r\n                                    }\r\n                                </Form>\r\n                                {this.state.export ?\r\n                                    <LocalizationProvider>\r\n                                        <ExcelExport\r\n                                            data={[]}\r\n                                            collapsible={true}\r\n                                            fileName={(this.props.Login.screenName && this.props.Login.screenName)+\"_\"+this.state.selectedSpec.nallottedspeccode.label}\r\n                                            ref={(exporter) => {\r\n                                                this._excelExportHeader = exporter;\r\n                                            }}>\r\n                                            {[...this.state.exportFiled].map((item, index) =>\r\n                                                <ExcelExportColumn\r\n                                                    field={item.label} title={(item.idsField ? this.props.intl.formatMessage({ id: item.displayname }) : item.displayname[this.props.Login.userInfo.slanguagetypecode]) + '(' + item.label + ')' + (item.inputtype === \"date\" ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                                            )}\r\n                                        </ExcelExport>\r\n                                    </LocalizationProvider > : \"\"}\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ?\r\n                        event.target.value : selectedMaster[masterIndex][event.target.name];\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        let isEmailCheck = true;\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n        if (this.props.Login.masterOperation[masterIndex] === 'update') {\r\n            if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ?\r\n                    this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode\r\n            }\r\n            else {\r\n                inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value\r\n            }\r\n\r\n        }\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                ...inputData[methodUrl],\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: componentrow.valuemember,\r\n                                                nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                                source: componentrow.source,\r\n                                                [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                    selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                        selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                    :\r\n                                                    selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: component.valuemember,\r\n                                            nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                            source: component.source,\r\n                                            [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                :\r\n                                                selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\r\n            inputData[\"noneedfilter\"] = 1\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2\r\n            }\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 43) {\r\n            inputData[\"noneedfilter\"] = 2; //will disl=play all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    if (item.controlType === \"datepicker\") {\r\n                        fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n\r\n                    }\r\n                    else if (item.controlType === \"selectbox\") {\r\n                        fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        fieldName = item.tableDataField;\r\n                    }\r\n                    inputData[methodUrl][item.jsonObjectName] = {\r\n                        ...inputData[methodUrl][item.jsonObjectName],\r\n                        [fieldName]: fieldData\r\n                    }\r\n                    return inputData[methodUrl];\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                       \r\n                       if(fieldName==='ssubmittercode'){\r\n                        inputData[methodUrl]['jsondata'] = \r\n                        {...inputData[methodUrl]['jsondata'],\r\n                        ssubmitterfirstname:this.state.selectedMaster[masterIndex][fieldName].item.sfirstname,\r\n                        ssubmitterlastname:this.state.selectedMaster[masterIndex][fieldName].item.slastname,\r\n                        ssubmitteremail:this.state.selectedMaster[masterIndex][fieldName].item.semail,\r\n                        sshortname:this.state.selectedMaster[masterIndex][fieldName].item.sshortname,\r\n                        ssubmittercode:this.state.selectedMaster[masterIndex][fieldName].item.ssubmittercode,\r\n                        ssubmitterid:this.state.selectedMaster[masterIndex][fieldName].item.ssubmitterid,\r\n                        stelephone:this.state.selectedMaster[masterIndex][fieldName].item.stelephone,\r\n                    }\r\n                       }\r\n\r\n\r\n                       if(fieldName==='sinstitutionsitename'){\r\n                        inputData[methodUrl]['jsondata'] = \r\n                        {...inputData[methodUrl]['jsondata'],\r\n                        sinstitutionsitename:this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionsitename,\r\n                    }\r\n                       }\r\n\r\n\r\n                       if(fieldName==='sinstitutionname'){\r\n                        inputData[methodUrl]['jsondata'] = \r\n                        {...inputData[methodUrl]['jsondata'],\r\n                        sinstitutionname:this.state.selectedMaster[masterIndex][fieldName].item.sinstitutionname,\r\n                        sinstitutioncode:this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncode,\r\n  \r\n                    }\r\n                       }\r\n\r\n                       \r\n                       if(fieldName==='sinstitutioncatname'){\r\n                        inputData[methodUrl]['jsondata'] = \r\n                        {...inputData[methodUrl]['jsondata'],\r\n                        sinstitutioncatname:this.state.selectedMaster[masterIndex][fieldName].item.sinstitutioncatname,\r\n  \r\n                    }\r\n                       }\r\n\r\n                       if(fieldName==='sdistrictname'){\r\n                        inputData[methodUrl]['jsondata'] = \r\n                        {...inputData[methodUrl]['jsondata'],\r\n                        sinstitutiondistrictname:this.state.selectedMaster[masterIndex][fieldName].label,\r\n  \r\n                    }\r\n                       }\r\n                       \r\n                       \r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n            inputData[methodUrl][\"nproductcode\"] = -1;\r\n            //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\r\n            //inputData[methodUrl][\"sexternalorderid\"] = 1;\r\n            inputData[methodUrl][\"nordertypecode\"] = 1;\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n        const inputParam = {\r\n            withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent\r\n                : this.props.Login.withoutCombocomponent,\r\n            comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents\r\n                : this.props.Login.comboComponents,\r\n            selectedRecord: this.props.Login.loadSubSample ?\r\n                this.state.selectComponent\r\n                : this.state.selectedRecord,\r\n            selectedRecordName: this.props.Login.loadSubSample ?\r\n                'selectComponent'\r\n                : 'selectedRecord',\r\n            loadSubSample: this.props.Login.loadSubSample,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.loadSubSample ?\r\n                this.props.Login.SubSamplecomboData : this.props.Login.comboData,\r\n            comboName: this.props.Login.loadSubSample ?\r\n                'SubSamplecomboData' : 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: this.props.Login.masterOperation[masterIndex],\r\n            saveType, formRef,\r\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\r\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n            masterEditObject: this.props.Login.masterEditObject,\r\n            masterOperation: this.props.Login.masterOperation,\r\n\r\n        }\r\n        if (isEmailCheck) {\r\n            this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onClickView = (selectedControl) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\r\n            this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + \" \" + selectedControl.label);\r\n        }\r\n\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n        let masterOperation = this.props.Login.masterOperation || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n        masterOperation[masterIndex] = 'create'\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterOperation,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                masterOperation,\r\n                selectedMaster,\r\n\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    editMasterRecord = (control, editObject) => {\r\n        if (editObject) {\r\n            let masterIndex = this.props.Login.masterIndex\r\n            if (masterIndex !== undefined) {\r\n                masterIndex = masterIndex + 1;\r\n            } else {\r\n                masterIndex = 0\r\n            }\r\n            let selectedControl = this.props.Login.selectedControl || []\r\n            let selectedMaster = this.state.selectedMaster || []\r\n            selectedMaster[masterIndex] = {}\r\n            selectedControl[masterIndex] = control\r\n\r\n            let fieldList = this.props.Login.masterfieldList || []\r\n            fieldList[masterIndex] = []\r\n\r\n            let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n            masterComboColumnFiled[masterIndex] = []\r\n\r\n            let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n            extractedColumnList[masterIndex] = []\r\n\r\n            let masterdataList = this.props.Login.masterdataList || []\r\n            let masterDesign = this.props.Login.masterDesign || []\r\n            let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n            let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n            let masterOperation = this.props.Login.masterOperation || []\r\n            let masterEditObject = this.props.Login.masterEditObject || []\r\n\r\n            masterdataList[masterIndex] = []\r\n            masterDesign[masterIndex] = []\r\n            masterwithoutCombocomponent[masterIndex] = []\r\n            mastercomboComponents[masterIndex] = []\r\n            masterOperation[masterIndex] = 'update'\r\n            masterEditObject[masterIndex] = editObject\r\n\r\n            if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n                if (control.table.item.component === 'Type2Component') {\r\n                    fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n                } else {\r\n                    fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n                }\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n                const updateInfo = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterEditObject,\r\n                    masterOperation\r\n                    // editObject\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n\r\n                }\r\n                this.props.getEditMaster(updateInfo)\r\n            }\r\n            else if (control.table.item.component === 'Type3Component') {\r\n                fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n                masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                    item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                    // editObject\r\n                }\r\n\r\n                this.props.getEditMaster(inputParam);\r\n\r\n            }\r\n            else if (control.table.item.component === 'Dynamic') {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterComboColumnFiled,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterComboColumnFiled,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //  editObject\r\n                }\r\n                this.props.getEditMaster(inputParam);\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, control, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = conditionBasedInput(control, event.target.value, radiotext)\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onDropFileSubSample = (attachedFiles, fieldName, maxSize) => {\r\n        let selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = onDropAttachFileList(selectComponent[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectComponent, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachmentSubSample = (event, file, fieldName) => {\r\n        let selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = deleteAttachmentDropZone(selectComponent[fieldName], file)\r\n\r\n        this.setState({\r\n            selectComponent, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue, callService,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster, insertMultipleRegistration, insertRegSample\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}