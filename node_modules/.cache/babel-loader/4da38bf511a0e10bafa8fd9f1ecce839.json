{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, formatInputDate, formatInputDateWithoutT, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, showEsign, sortByField, validateEmail } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"react-awesome-query-builder\";\nimport Esign from '../audittrail/Esign'; //import SplitterLayout from 'react-splitter-layout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          selectedRecord: selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord['filterquery'] !== \"\" && selectedRecord['filterquery'] !== undefined) {\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: selectedRecord['filterquery']\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTFILTER\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let selecteddata = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component.hasOwnProperty(\"child\")) {\n        if (this.props.Login.loadSubSample) {\n          const selectComponent = this.state.selectComponent;\n          component.child.map(y => {\n            const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\n            const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\n\n            if (readonlyfields !== -1) {\n              if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\n                selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\";\n              } else {\n                selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\";\n              }\n            }\n          });\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent,\n              loadCustomSearchFilter: false,\n              screenName: \"SubSample\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          const selectedRecord = this.state.selectedRecord;\n          component.child.map(y => {\n            // component.filterfields.filter(x=>x.)\n            const withoutCombocomponent = this.props.withoutCombocomponent;\n            const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\n\n            if (readonlyfields !== -1) {\n              if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\n                selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\";\n              } else {\n                selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\";\n              }\n            }\n          });\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              loadCustomSearchFilter: false,\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n      console.log(\"handle save:\", selectedRecord);\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIMEN\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      if (this.props.Login.loadEsign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": \"IDS_SPECIMEN\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec,\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false;\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name\n        };\n\n        if (comboData) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            \"pkey\": control.valuemember,\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\n            source: control.source\n          };\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n          if (ncategorybasedflow !== 3) {\n            product = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Instrument') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          const ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value;\n\n          if (ncategorybasedflow !== 3) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          const ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value;\n\n          if (ncategorybasedflow !== 3) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          const ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\n\n          if (ncategorybasedflow === 3) {\n            productCategory = true;\n          } else {\n            inputParem[\"ProductName\"] = Product[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            product = true;\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          const ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\n\n          if (ncategorybasedflow === 3) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          const ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\n\n          if (ncategorybasedflow === 3) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType);\n        } else {\n          // if (productCategory) {\n          //     const ncategorybasedflow = selectedRecord[comboName] &&\n          //         selectedRecord[comboName].value;\n          // } else if\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType) {\n            // const nproductcode = selectedRecord[comboName] &&\n            //     selectedRecord[comboName].value;\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material);\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectComponent[event.target.name] = radiotext;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            source: control.source\n          } : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          source: control.source\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectComponent = this.state.selectComponent;\n\n      if (selectComponent[control.label]) {\n        if (control.max) {\n          if (!(selectComponent[control.label] < parseFloat(control.max))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectComponent[control.label] > parseFloat(control.min))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: \"Specification\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\n      if (nneedsubsample) {\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n          delete selectedComponent[\"selected\"];\n          this.props.getTest(selectedComponent, this.props.Login, nneedsubsample, specBasedComponent);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        }\n      } else {\n        const selectedComponent1 = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        this.props.getTest(selectedComponent1, this.props.Login, nneedsubsample, specBasedComponent);\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          kendoFilter: {\n            logic: \"and\",\n            filters: []\n          },\n          kendoSkip: 0,\n          kendoTake: 5,\n          awesomeConfig: undefined,\n          awesomeTree: undefined\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const comp1 = this.props.Login.Component;\n      const Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = comp1.findIndex(x => x.slno === dataItem.slno);\n      const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\n      let updateInfo = {};\n      let incslno = comp1.length - 1;\n\n      if (comp1.length !== dataItem.slno) {\n        subSampleDataGridList = []; //  let slno = Component[index].slno\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        const preList = comp1.splice(0, index);\n        const afterList = comp1.splice(index, comp1.length);\n        preList.map(x => {\n          Test[incslno] = Test && Test[x.slno];\n          x.slno = incslno;\n          incslno = incslno - 1;\n          return null;\n        });\n        const Component1 = [...preList, ...afterList];\n        Component1.map(x => {\n          subSampleDataGridList.push({ ...x.jsonuidata,\n            ...x\n          });\n        });\n        sortByField(subSampleDataGridList, 'desc', 'slno');\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component1[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component1,\n            selectedComponent: Component1[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      } else {\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        }\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = specBasedComponent => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const component = [...data, ...SubSamplewithoutCombocomponent];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (component.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.screenName !== 'scheduler') {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistration(true);\n          }\n        }\n      } else {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistrationScheduler(true);\n          }\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_SPECIMEN\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false;\n      this.subSampleDataGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_SPECIMEN\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                width: \"150px\"\n              });\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList,\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //   this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //   saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\n      //     this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList //, selectedTestData: {}\n\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      checkBoxOperation: 3,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents);\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample; // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistrationScheduler() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ? this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\n      Map[\"nregtypecode\"] = 1;\n      Map[\"nregsubtypecode\"] = 1;\n      Map[\"nsampletypecode\"] = 1; // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = false;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false; // Map[\"checkBoxOperation\"] = 3;\n\n      const param = getRegistrationScheduler(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.schedulerTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\n      Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false); //Map[\"nflag\"] = 2;\n      // Map[\"ntype\"] = 2;\n      //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData);\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n\n    if (nneedsubsample ? Components && Components.length > 0 : true) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n      if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n        Map[\"RegistrationSample\"] = [{\n          \"jsondata\": {\n            \"ssamplename\": \"NA\"\n          },\n          \"slno\": 1,\n          \"ncomponentcode\": -1,\n          \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n        }];\n      } else {\n        Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n      }\n\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n      // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n      Map[\"FromDate\"] = \"\";\n      Map[\"ToDate\"] = \"\";\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n      Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n      Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"checkBoxOperation\"] = 3;\n      const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      console.log(\"param:\", param);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n      Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n      Map[\"nflag\"] = 2; // Map[\"ntype\"] = 2;\n\n      Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistration(inputParam, this.props.Login.masterData);\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2793,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2811,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2812,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2815,\n        columnNumber: 33\n      }\n    }) : this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2817,\n        columnNumber: 37\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2819,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2823,\n        columnNumber: 53\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2828,\n        columnNumber: 61\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2834,\n        columnNumber: 53\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2839,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2843,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2846,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2847,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2848,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2852,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2853,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2854,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2857,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2858,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2859,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2862,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2863,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2864,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2868,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2871,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2874,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2875,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2876,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2879,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2880,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2881,\n        columnNumber: 53\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2885,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2886,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2887,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2893,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2894,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2895,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2899,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2900,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2901,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2911,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2912,\n        columnNumber: 33\n      }\n    }, this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.props.Login.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2915,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.props.Login.awesomeTree,\n      config: this.props.Login.awesomeConfig,\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2926,\n        columnNumber: 50\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2940,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2952,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2957,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord // Unit={this.props.Login.Unit || []}\n      ,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      onNumericBlur: this.onNumericBlurSubSample,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2976,\n        columnNumber: 57\n      }\n    }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n      operation: this.props.Login.operation,\n      onInputOnChange: this.onInputOnChange,\n      inputParam: this.props.Login.inputParam,\n      selectedRecord: this.props.Login.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3002,\n        columnNumber: 61\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate ? this.props.Login.masterData.registrationTemplate.jsondata : this.props.Login.masterData.schedulerTemplate ? this.props.Login.masterData.schedulerTemplate.jsondata : {},\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onNumericBlur: this.onNumericBlur,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      testDataStateChange: this.testDataStateChange,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      custombuttonclick: this.custombuttonclick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3013,\n        columnNumber: 63\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  insertRegistrationScheduler\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","transactionStatus","faCalculator","comboChild","convertDateTimetoString","formatInputDate","formatInputDateWithoutT","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","showEsign","sortByField","validateEmail","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","insertRegistrationScheduler","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationScheduler","getRegistrationSubSample","SubSample","TestListManipulation","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","Esign","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","sqlFormat","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","kendoTake","handleFilterChange","kendoFilter","filter","handleExecuteClick","undefined","seletedFilterComponent","filterquery","warn","intl","formatMessage","id","handleKendoRowClick","selecteddata","dataItem","hasOwnProperty","loadSubSample","child","map","y","withoutCombocomponent","readonlyfields","findIndex","k","label","languagetypeCode","loadCustomSearchFilter","screenName","masterData","RealRegSubTypeValue","sregsubtypename","handleSaveClick","saveType","startLabel","mandatoryFields","console","log","loadComponent","SubSampleTemplate","jsondata","row","children","column","componentrow","mandatory","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","loadTest","loadSpec","registrationTemplate","esign","loadEsign","forEach","item","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","ncomponentrequired","subSampleDataGridList","width","selectedComponent","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","onComboChange","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","nsampletypecode","RealSampleTypeValue","inputParem","source","primarykeyField","valuemember","value","nameofdefaultcomp","name","nquerybuildertablecode","ProductCategory","comboComponents","x","ncategorybasedflow","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","val","mapOfFilter","temp","components","temp1","onInputOnChange","radiotext","target","type","includes","index","indexOf","indexcomma","slice","setState","onInputOnSubSampleChange","onComboSubSampleChange","pkey","SubSamplecomboData","onNumericInputChange","onNumericBlurSubSample","max","parseFloat","precision","min","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","nneedsubsample","Object","keys","selectedComponent1","nallottedspeccode","slno","closeSpec","closeKendoFilter","logic","filters","closeComponent","closeTest","closeSubSample","selectedSubSample","showSaveContinue","masterStatus","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","checked","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","objComponent","nregsubtypecode","timezone","deleteComponent","comp1","subSampleIndex","incslno","preList","afterList","Component1","jsonuidata","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","onUpdateRegistration","onNumericBlur","myRef","PrevoiusLoginData","componentColumnList","sampleeditable","JSON","parse","DynamicDesign","getDerivedStateFromProps","componentDidUpdate","previousProps","check","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","ndesigntemplatemappingcode","RealDesignTemplateMappingValue","napproveconfversioncode","RealApprovalConfigVersionValue","nneedtemplatebasedflow","RegSubTypeValue","checkBoxOperation","activeSampleTab","activeTestTab","activeSubSampleTab","param","dateList","sampledateconstraints","samplecombinationunique","subsamplecombinationunique","selectedSample","classUrl","displayName","sloginid","action","showConfirmAlert","resultDataState","testCommentDataState","userRoleControlRights","nformcode","ncontrolCode","screenData","openModal","openPortal","findSubsampleDateList","subsampletemplate","schedulerSubSampleTemplate","schedulerTemplate","defaultTimeZone","SelectedScheduler","postParamList","PREREGISTER","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","className","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","showSave","lstPatient","fields","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","TestCombined","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","loadPreregister","handleChange"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,KAA7B,QAA0C,iBAA1C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,qCAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SACIC,UADJ,EACgBC,uBADhB,EAEIC,eAFJ,EAGIC,uBAHJ,EAIIC,0BAJJ,EAIgCC,mBAJhC,EAIqDC,wBAJrD,EAI+EC,SAJ/E,EAI0FC,WAJ1F,EAIuGC,aAJvG,QAKO,+BALP;AAMA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACIC,kBADJ,EACwBC,cADxB,EAEIC,sBAFJ,EAE4BC,aAF5B,EAE2CC,WAF3C,EAGIC,aAHJ,EAGmBC,OAHnB,EAG4BC,YAH5B,EAG0CC,aAH1C,EAIIC,kBAJJ,EAIwBC,kBAJxB,EAI4CC,wBAJ5C,EAKIC,aALJ,EAKmBC,gBALnB,EAKqCC,2BALrC,EAKkEC,2BALlE,QAMO,eANP;AAOA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SACIC,eADJ,EACqBC,wBADrB,EAC+CC,wBAD/C,EACyEC,SADzE,EACoFC,oBADpF,QAEO,0BAFP;AAGA,OAAOC,mBAAP,MAAgC,0CAAhC;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SACIC,KAAK,IAAIC,OADb,QAEO,6BAFP;AAGA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,KAAK,EAAED,KAAK,CAACC;AADV,GAAP;AAGH,CAJD;;AAKA,MAAMC,wBAAN,SAAuC3D,KAAK,CAAC4D,SAA7C,CAAuD;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAanBC,OAbmB,GAaT/D,KAAK,CAACgE,SAAN,EAbS;AAAA,SAcnBP,KAdmB,GAcX;AACJQ,MAAAA,cAAc,EAAE,EADZ;AAEJC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,GAA4BC,QAAQ,CAAC,KAAKR,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OAFX;AAGJE,MAAAA,kBAAkB,EAAE;AAAEJ,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,GAA4BC,QAAQ,CAAC,KAAKR,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OAHhB;AAIJG,MAAAA,cAAc,EAAE,EAJZ;AAKJC,MAAAA,YAAY,EAAE,EALV;AAMJC,MAAAA,eAAe,EAAE,EANb;AAOJC,MAAAA,YAAY,EAAE,EAPV;AAQJC,MAAAA,gBAAgB,EAAE,EARd;AASJC,MAAAA,wBAAwB,EAAE,EATtB;AAUJC,MAAAA,8BAA8B,EAAE,EAV5B;AAWJ;AACAC,MAAAA,yBAAyB,EAAE,EAZvB;AAaJC,MAAAA,kBAAkB,EAAE;AAbhB,KAdW;;AAAA,SAyCnBC,iBAzCmB,GAyCC,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtCD,MAAAA,KAAK,CAACE,cAAN;AACAF,MAAAA,KAAK,CAACG,eAAN;AACA,YAAMC,UAAU,GAAG;AACfH,QAAAA,SADe;AACJI,QAAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8B;AADvB,OAAnB;AAGA,WAAK1B,KAAL,CAAWrB,gBAAX,CAA4B6C,UAA5B;AACH,KAhDkB;;AAAA,SAkDnBG,2BAlDmB,GAkDW,CAACC,aAAD,EAAgBC,MAAhB,KAA2B;AACrD,UAAInB,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAAC,aAAD,CAAd,GAAgClB,OAAO,CAACsC,SAAR,CAAkBF,aAAlB,EAAiCC,MAAjC,CAAhC;AAEA,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFC,UAAAA,WAAW,EAAEN,aADX;AAC0BO,UAAAA,aAAa,EAAEN,MADzC;AACiDnB,UAAAA,cAAc,EAAEA;AADjE;AAFS,OAAnB;AAMA,WAAKV,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB,EAVqD,CAYrD;AAEH,KAhEkB;;AAAA,SAkEnBK,gBAlEmB,GAkEChB,KAAD,IAAW;AAC1B,YAAMW,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFI,UAAAA,SAAS,EAAEjB,KAAK,CAACf,IADf;AACqBiC,UAAAA,SAAS,EAAElB,KAAK,CAACd;AADtC;AAFS,OAAnB;AAMA,WAAKN,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB,EAP0B,CAQ1B;AACH,KA3EkB;;AAAA,SA4EnBQ,kBA5EmB,GA4EGnB,KAAD,IAAW;AAC5B;AACA;AACA,YAAMW,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFO,UAAAA,WAAW,EAAEpB,KAAK,CAACqB,MADjB,CAEF;;AAFE;AAFS,OAAnB;AAOA,WAAKzC,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB,EAV4B,CAW5B;AACH,KAxFkB;;AAAA,SA0FnBW,kBA1FmB,GA0FGtB,KAAD,IAAW;AAC5B,YAAMV,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAlC;;AACA,UAAIA,cAAc,CAAC,aAAD,CAAd,KAAkC,EAAlC,IAAwCA,cAAc,CAAC,aAAD,CAAd,KAAkCiC,SAA9E,EAAyF;AACrF,cAAMnB,UAAU,GAAG;AACfH,UAAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBgD,sBADb;AAEfnB,UAAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8B,QAFZ;AAGfmB,UAAAA,WAAW,EAAEnC,cAAc,CAAC,aAAD;AAHZ,SAAnB;AAMA,aAAKV,KAAL,CAAWpB,2BAAX,CAAuC4C,UAAvC;AACH,OARD,MAQO;AACH7E,QAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK9C,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAvGkB;;AAAA,SAyGnBC,mBAzGmB,GAyGI9B,KAAD,IAAW;AAC7B,UAAI+B,YAAY,GAAG/B,KAAK,CAACgC,QAAzB;AACA,YAAM/B,SAAS,GAAG,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBgD,sBAAnC;;AACA,UAAIvB,SAAS,CAACgC,cAAV,CAAyB,OAAzB,CAAJ,EAAuC;AACnC,YAAI,KAAKrD,KAAL,CAAWJ,KAAX,CAAiB0D,aAArB,EAAoC;AAChC,gBAAM1C,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAnC;AACAS,UAAAA,SAAS,CAACkC,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AACrB,kBAAMC,qBAAqB,GAAG,KAAK/D,KAAL,CAAWqB,8BAAzC;AACA,kBAAM2C,cAAc,GAAGD,qBAAqB,CAACE,SAAtB,CAAgCC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYL,CAAC,CAACK,KAAnD,CAAvB;;AACA,gBAAIH,cAAc,KAAK,CAAC,CAAxB,EAA2B;AAEvB,kBAAID,qBAAqB,CAACC,cAAD,CAArB,CAAsC,gBAAtC,CAAJ,EAA6D;AACzD/C,gBAAAA,eAAe,CAAC6C,CAAC,CAACK,KAAH,CAAf,GAA2BX,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAZ,GACvBR,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAZ,CAAqE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjB,CAA0BqC,gBAA/F,CADuB,GAC4F,EADvH;AAEH,eAHD,MAGO;AACHnD,gBAAAA,eAAe,CAAC6C,CAAC,CAACK,KAAH,CAAf,GAA2BX,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAZ,GAAuER,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAnF,GAA8I,EAAzK;AACH;AACJ;AACJ,WAZD;AAaA,gBAAM5B,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEpF,cADK;AAEfqF,YAAAA,IAAI,EAAE;AACFrB,cAAAA,eADE;AAEFoD,cAAAA,sBAAsB,EAAE,KAFtB;AAGFC,cAAAA,UAAU,EAAE;AAHV;AAFS,WAAnB;AAQA,eAAKjE,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,SAxBD,MAwBO;AACH,gBAAMrB,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAlC;AACAW,UAAAA,SAAS,CAACkC,KAAV,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI;AACrB;AACA,kBAAMC,qBAAqB,GAAG,KAAK1D,KAAL,CAAW0D,qBAAzC;AACA,kBAAMC,cAAc,GAAGD,qBAAqB,CAACE,SAAtB,CAAgCC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYL,CAAC,CAACK,KAAnD,CAAvB;;AACA,gBAAIH,cAAc,KAAK,CAAC,CAAxB,EAA2B;AAEvB,kBAAID,qBAAqB,CAACC,cAAD,CAArB,CAAsC,gBAAtC,CAAJ,EAA6D;AACzDjD,gBAAAA,cAAc,CAAC+C,CAAC,CAACK,KAAH,CAAd,GAA0BX,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAZ,GACtBR,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAZ,CAAqE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjB,CAA0BqC,gBAA/F,CADsB,GAC6F,EADvH;AAEH,eAHD,MAGO;AACHrD,gBAAAA,cAAc,CAAC+C,CAAC,CAACK,KAAH,CAAd,GAA0BX,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAZ,GAAuER,YAAY,CAACO,qBAAqB,CAACC,cAAD,CAArB,CAAsC,eAAtC,CAAD,CAAnF,GAA8I,EAAxK;AACH;AACJ;AAEJ,WAdD;AAeA,gBAAM5B,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEpF,cADK;AAEfqF,YAAAA,IAAI,EAAE;AACFvB,cAAAA,cADE;AAEFsD,cAAAA,sBAAsB,EAAE,KAFtB;AAGFC,cAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC;AAH1D;AAFS,WAAnB;AAQA,eAAKpE,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ;AACJ,KAjKkB;;AAAA,SAkKnBsC,eAlKmB,GAkKAC,QAAD,IAAc;AAC5B,YAAMnE,cAAc,GAAG,EAAvB;AACA,YAAMoE,UAAU,GAAG,EAAnB;AACA,UAAIT,KAAK,GAAG,WAAZ;AACA,UAAIU,eAAe,GAAG,EAAtB;AACA,UAAI9D,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAhC;AACA+D,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BhE,cAA5B;;AAGA,UAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiB+E,aAArB,EAAoC;AAChCH,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,eAAb;AAA8B,uBAAa,gBAA3C;AAA6D,4BAAkB,YAA/E;AAA6F,yBAAe;AAA5G,SADc,EAEd;AAAE,qBAAW,kBAAb;AAAiC,uBAAa,eAA9C;AAA+D,4BAAkB,YAAjF;AAA+F,yBAAe;AAA9G,SAFc,EAGd;AAAE,qBAAW,cAAb;AAA6B,uBAAa,iBAA1C;AAA6D,4BAAkB,YAA/E;AAA6F,yBAAe;AAA5G,SAHc,CAAlB;AAKA9D,QAAAA,cAAc,GAAG,KAAKf,KAAL,CAAWiB,eAA5B;AACH,OAPD,MAQK,IAAI,KAAKZ,KAAL,CAAWJ,KAAX,CAAiB0D,aAArB,EAAoC;AAErC,YAAI,KAAK3D,KAAL,CAAWuB,kBAAf,EACIsD,eAAe,GAAG,CAAC;AAAE,qBAAW,cAAb;AAA6B,uBAAa,gBAA1C;AAA4D,4BAAkB,YAA9E;AAA4F,yBAAe;AAA3G,SAAD,CAAlB;AAEJ,aAAKxE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,IACI,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QAA9C,CAAuDrB,GAAvD,CAA2DsB,GAAG,IAAI;AAC9D,iBAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,mBAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC,qBAAOA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,IACHhC,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AACnC,oBAAIA,YAAY,CAACC,SAAb,KAA2B,IAA/B,EAAqC;AACjC,sBAAID,YAAY,CAACE,mBAAjB,EAAsC;AAClC,wBAAI,KAAKxF,KAAL,CAAWiB,eAAX,CAA2BqE,YAAY,CAACG,WAAxC,MACIH,YAAY,CAACI,eADrB,EACsC;AAClC,0BAAIJ,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpCd,wBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,uCAAa,IADI;AACE,qCAAWN,YAAY,CAACnB,KAD1B;AAEjB,uCAAamB,YAAY,CAACnB,KAFT;AAGjB,yCAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,4BAAAA,EAAE,EAAE;AAAN,2BAA9B,CAHE;AAIjB,8CAAoBxF,aAJH;AAKjB,4CAAkB,WALD;AAMjB,yCAAe;AANE,yBAArB;AAQH,uBATD,MASO;AACH+G,wBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,uCAAa,IADI;AAEjB,qCAAWN,YAAY,CAACnB,KAFP;AAGjB,uCAAamB,YAAY,CAACnB,KAHT;AAIjB,4CAAkBmB,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACd,YADc,GACC,WALF;AAMjB,yCAAeL,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACX,WADW,GACG;AAPD,yBAArB;AASH;AACJ;AAEJ,mBAzBD,MAyBO;AACH,wBAAIL,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpCd,sBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,qCAAa,IADI;AACE,mCAAWN,YAAY,CAACnB,KAD1B;AAEjB,qCAAamB,YAAY,CAACnB,KAFT;AAGjB,uCAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,0BAAAA,EAAE,EAAE;AAAN,yBAA9B,CAHE;AAIjB,4CAAoBxF,aAJH;AAKjB,0CAAkB,WALD;AAMjB,uCAAe;AANE,uBAArB;AAQH,qBATD,MASO;AACH+G,sBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,qCAAa,IADI;AAEjB,mCAAWN,YAAY,CAACnB,KAFP;AAGjB,qCAAamB,YAAY,CAACnB,KAHT;AAIjB,0CAAkBmB,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACd,YADc,GACC,WALF;AAMjB,uCAAeL,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACX,WADW,GACG;AAPD,uBAArB;AASH;AACJ;AACJ,iBAhDD,MAgDO;AACH,sBAAIL,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AAEpC,yBAAK3F,KAAL,CAAWiB,eAAX,CAA2BqE,YAAY,CAACnB,KAAxC,KACI,KAAKnE,KAAL,CAAWiB,eAAX,CAA2BqE,YAAY,CAACnB,KAAxC,MAAmD,EADvD,IAEIU,eAAe,CAACe,IAAhB,CAAqB;AACjB,mCAAa,IADI;AACE,iCAAWN,YAAY,CAACnB,KAD1B;AAEjB,mCAAamB,YAAY,CAACnB,KAFT;AAGjB,qCAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,wBAAAA,EAAE,EAAE;AAAN,uBAA9B,CAHE;AAIjB,0CAAoBxF,aAJH;AAKjB,wCAAkB,WALD;AAMjB,qCAAe;AANE,qBAArB,CAFJ;AAUH;AACJ;;AACD,uBAAO,IAAP;AACH,eAjED,CADG,GAmED4D,SAAS,CAAC6D,SAAV,KAAwB,IAAxB,GACE7D,SAAS,CAAC8D,mBAAV,GACI,KAAKxF,KAAL,CAAWiB,eAAX,CAA2BS,SAAS,CAAC+D,WAArC,MACQ/D,SAAS,CAACgE,eADlB,GAEIhE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACId,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,+BAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE;AAAN,iBAA9B,CAHE;AAIjB,oCAAoBxF,aAJH;AAKjB,kCAAkB,WALD;AAMjB,+BAAe;AANE,eAArB,CADJ,GAUI+G,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,kCAAkBzC,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACd,YADc,GACC,WAJF;AAKjB,+BAAejE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GAAkC,WAAlC,GAAgD;AAL9C,eAArB,CAZR,GAkBa,EAnBjB,GAoBIjE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACId,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,+BAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE;AAAN,iBAA9B,CAHE;AAIjB,oCAAoBxF,aAJH;AAKjB,kCAAkB,WALD;AAMjB,+BAAe;AANE,eAArB,CADJ,GAUI+G,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,kCAAkBzC,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACd,YADc,GACC,WAJF;AAKjB,+BAAejE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GAAkC,WAAlC,GAAgD;AAL9C,eAArB,CA/BV,GAsCI,KAAK3F,KAAL,CAAWiB,eAAX,CAA2BS,SAAS,CAACyC,KAArC,IACEzC,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACId,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,+BAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE;AAAN,iBAA9B,CAHE;AAIjB,oCAAoBxF,aAJH;AAKjB,kCAAkB,WALD;AAMjB,+BAAe;AANE,eAArB,CADJ,GAQS,EATX,GASgB,EAlH1B;AAmHH,aApHM,CAAP;AAqHH,WAtHM,CAAP;AAuHH,SAxHD,CADJ;AA2HAiD,QAAAA,cAAc,GAAG,KAAKf,KAAL,CAAWiB,eAA5B;AACH,OAjII,MAkIA,IAAI,KAAKZ,KAAL,CAAWJ,KAAX,CAAiB4F,QAArB,EAA+B;AAChChB,QAAAA,eAAe,GAAG,CAAC;AAAE,qBAAW,UAAb;AAAyB,uBAAa,oBAAtC;AAA4D,4BAAkB,YAA9E;AAA4F,yBAAe;AAA3G,SAAD,CAAlB;AACA9D,QAAAA,cAAc,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBkB,gBAAlC;AACH,OAHI,MAIA,IAAI,KAAKd,KAAL,CAAWJ,KAAX,CAAiB6F,QAArB,EAA+B;AAChCjB,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,mBAA/C;AAAoE,4BAAkB,YAAtF;AAAoG,yBAAe;AAAnH,SADc,CAAlB;AAGH,OAJI,MAIE;AACH,aAAKxE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,IACI,KAAK1F,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,CAAiDb,QAAjD,CAA0DrB,GAA1D,CAA8DsB,GAAG,IAAI;AACjE,iBAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,mBAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC,qBAAOA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,IACHhC,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AACnC,oBAAIA,YAAY,CAACC,SAAb,KAA2B,IAA/B,EAAqC;AACjC,sBAAID,YAAY,CAACE,mBAAjB,EAAsC;AAClC,wBAAI,KAAKxF,KAAL,CAAWe,cAAX,CAA0BuE,YAAY,CAACG,WAAvC,MACIH,YAAY,CAACI,eADrB,EACsC;AAClC,0BAAIJ,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpCd,wBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,uCAAa,IADI;AACE,qCAAWN,YAAY,CAACnB,KAD1B;AAEjB,uCAAamB,YAAY,CAACnB,KAFT;AAGjB,yCAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,4BAAAA,EAAE,EAAE;AAAN,2BAA9B,CAHE;AAIjB,8CAAoBxF,aAJH;AAKjB,4CAAkB,WALD;AAMjB,yCAAe;AANE,yBAArB;AAQH,uBATD,MASO;AACH+G,wBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,uCAAa,IADI;AAEjB,qCAAWN,YAAY,CAACnB,KAFP;AAGjB,uCAAamB,YAAY,CAACnB,KAHT;AAIjB,4CAAkBmB,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACd,YADc,GACC,WALF;AAMjB,yCAAeL,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACX,WADW,GACG;AAPD,yBAArB;AASH;AACJ;AAEJ,mBAzBD,MAyBO;AACH,wBAAIL,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpCd,sBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,qCAAa,IADI;AACE,mCAAWN,YAAY,CAACnB,KAD1B;AAEjB,qCAAamB,YAAY,CAACnB,KAFT;AAGjB,uCAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,0BAAAA,EAAE,EAAE;AAAN,yBAA9B,CAHE;AAIjB,4CAAoBxF,aAJH;AAKjB,0CAAkB,WALD;AAMjB,uCAAe;AANE,uBAArB;AAQH,qBATD,MASO;AACH+G,sBAAAA,eAAe,CAACe,IAAhB,CAAqB;AACjB,qCAAa,IADI;AAEjB,mCAAWN,YAAY,CAACnB,KAFP;AAGjB,qCAAamB,YAAY,CAACnB,KAHT;AAIjB,0CAAkBmB,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACd,YADc,GACC,WALF;AAMjB,uCAAeL,YAAY,CAACK,SAAb,KAA2B,OAA3B,GACX,WADW,GACG;AAPD,uBAArB;AASH;AACJ;AACJ,iBAhDD,MAgDO;AACH,sBAAIL,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AAEpC5E,oBAAAA,cAAc,CAACuE,YAAY,CAACnB,KAAd,CAAd,IACIpD,cAAc,CAACuE,YAAY,CAACnB,KAAd,CAAd,KAAuC,EAD3C,IAEIU,eAAe,CAACe,IAAhB,CAAqB;AACjB,mCAAa,IADI;AACE,iCAAWN,YAAY,CAACnB,KAD1B;AAEjB,mCAAamB,YAAY,CAACnB,KAFT;AAGjB,qCAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,wBAAAA,EAAE,EAAE;AAAN,uBAA9B,CAHE;AAIjB,0CAAoBxF,aAJH;AAKjB,wCAAkB,WALD;AAMjB,qCAAe;AANE,qBAArB,CAFJ;AAUH;AACJ;;AACD,uBAAO,IAAP;AACH,eAjED,CADG,GAmED4D,SAAS,CAAC6D,SAAV,KAAwB,IAAxB,GACE7D,SAAS,CAAC8D,mBAAV,GACI,KAAKxF,KAAL,CAAWe,cAAX,CAA0BW,SAAS,CAAC+D,WAApC,MACQ/D,SAAS,CAACgE,eADlB,GAEIhE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACId,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,+BAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE;AAAN,iBAA9B,CAHE;AAIjB,oCAAoBxF,aAJH;AAKjB,kCAAkB,WALD;AAMjB,+BAAe;AANE,eAArB,CADJ,GAUI+G,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,kCAAkBzC,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACd,YADc,GACC,WAJF;AAKjB,+BAAejE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GAAkC,WAAlC,GAAgD;AAL9C,eAArB,CAZR,GAkBa,EAnBjB,GAoBIjE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACId,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,+BAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE;AAAN,iBAA9B,CAHE;AAIjB,oCAAoBxF,aAJH;AAKjB,kCAAkB,WALD;AAMjB,+BAAe;AANE,eAArB,CADJ,GAUI+G,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,kCAAkBzC,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACd,YADc,GACC,WAJF;AAKjB,+BAAejE,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GAAkC,WAAlC,GAAgD;AAL9C,eAArB,CA/BV,GAsCI5E,cAAc,CAACW,SAAS,CAACyC,KAAX,CAAd,GACEzC,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GACId,eAAe,CAACe,IAAhB,CAAqB;AACjB,6BAAa,IADI;AAEjB,2BAAWlE,SAAS,CAACyC,KAFJ;AAEW,6BAAazC,SAAS,CAACyC,KAFlC;AAGjB,+BAAe,KAAK9D,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE;AAAN,iBAA9B,CAHE;AAIjB,oCAAoBxF,aAJH;AAKjB,kCAAkB,WALD;AAMjB,+BAAe;AANE,eAArB,CADJ,GAQS,EATX,GASgB,EAlH1B;AAmHH,aApHM,CAAP;AAqHH,WAtHM,CAAP;AAuHH,SAxHD,CADJ;AA0HH;;AACD,UAAI,KAAKuC,KAAL,CAAW2F,KAAf,EAAsB;AAClBnB,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,cAAb;AAA6B,uBAAa,eAA1C;AAA2D,4BAAkB,WAA7E;AAA0F,yBAAe;AAAzG,SADc,EAEd;AAAE,qBAAW,cAAb;AAA6B,uBAAa,eAA1C;AAA2D,4BAAkB,WAA7E;AAA0F,yBAAe;AAAzG,SAFc,CAAlB;AAIH;;AACD,UAAI,KAAKxE,KAAL,CAAWJ,KAAX,CAAiBgG,SAArB,EAAgC;AAC5BpB,QAAAA,eAAe,GAAG,CACd;AAAE,qBAAW,cAAb;AAA6B,uBAAa,eAA1C;AAA2D,4BAAkB,WAA7E;AAA0F,yBAAe;AAAzG,SADc,EAEd;AAAE,qBAAW,cAAb;AAA6B,uBAAa,eAA1C;AAA2D,4BAAkB,WAA7E;AAA0F,yBAAe;AAAzG,SAFc,CAAlB;AAIH;;AACDA,MAAAA,eAAe,CAACqB,OAAhB,CAAwBC,IAAI,IAAI;AAC5B,YAAIpF,cAAc,CAACoF,IAAI,CAACC,SAAN,CAAd,KAAmCpD,SAAnC,IAAgDjC,cAAc,CAACoF,IAAI,CAACC,SAAN,CAAd,KAAmC,IAAvF,EAA6F;AACzF,gBAAMC,YAAY,GAAG,CAACF,IAAI,CAACG,WAAL,GAAmBH,IAAI,CAACG,WAAL,GAAmB,GAAtC,GAA4C,EAA7C,IAAmD,KAAKjG,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE6C,IAAI,CAACI;AAAX,WAA9B,CAAnD,IAA0GJ,IAAI,CAACK,WAAL,GAAmB,MAAML,IAAI,CAACK,WAA9B,GAA4C,EAAtJ,CAArB;AACAhG,UAAAA,cAAc,CAACoF,IAAf,CAAoBS,YAApB;AACAzB,UAAAA,UAAU,CAACgB,IAAX,CAAgBO,IAAI,CAACM,cAArB,EAHyF,CAGrD;AACvC,SAJD,MAKK;AACD,cAAIN,IAAI,CAACO,gBAAT,EAA2B;AACvB,kBAAMC,YAAY,GAAGR,IAAI,CAACO,gBAA1B;;AACA,gBAAIC,YAAY,CAAC5F,cAAc,CAACoF,IAAI,CAACC,SAAN,CAAf,CAAZ,KAAiD,KAArD,EAA4D;AACxD,oBAAMC,YAAY,GAAG,CAACF,IAAI,CAACG,WAAL,GAAmBH,IAAI,CAACG,WAAL,GAAmB,GAAtC,GAA4C,EAA7C,IAAmD,KAAKjG,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE6C,IAAI,CAACI;AAAX,eAA9B,CAAnD,IAA0GJ,IAAI,CAACK,WAAL,GAAmB,MAAML,IAAI,CAACK,WAA9B,GAA4C,EAAtJ,CAArB;AACAhG,cAAAA,cAAc,CAACoF,IAAf,CAAoBS,YAApB;AACAzB,cAAAA,UAAU,CAACgB,IAAX,CAAgBO,IAAI,CAACM,cAArB;AACH;AACJ,WAPD,MAQK;AACD,gBAAI,OAAO1F,cAAc,CAACoF,IAAI,CAACC,SAAN,CAArB,KAA0C,QAA9C,EAAwD;AACpD;AACA,kBAAIrF,cAAc,CAACoF,IAAI,CAACC,SAAN,CAAd,CAA+BQ,MAA/B,KAA0C,CAA9C,EAAiD;AAC7C,sBAAMP,YAAY,GAAG,CAACF,IAAI,CAACG,WAAL,GAAmBH,IAAI,CAACG,WAAL,GAAmB,GAAtC,GAA4C,EAA7C,IAAmD,KAAKjG,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE6C,IAAI,CAACI;AAAX,iBAA9B,CAAnD,IAA0GJ,IAAI,CAACK,WAAL,GAAmB,MAAML,IAAI,CAACK,WAA9B,GAA4C,EAAtJ,CAArB;AACAhG,gBAAAA,cAAc,CAACoF,IAAf,CAAoBS,YAApB;AACAzB,gBAAAA,UAAU,CAACgB,IAAX,CAAgBO,IAAI,CAACM,cAArB,EAH6C,CAGT;AACvC;AACJ,aAPD,MAQK,IAAI,OAAO1F,cAAc,CAACoF,IAAI,CAACC,SAAN,CAArB,KAA0C,QAA9C,EAAwD;AACzD;AACA,kBAAIrF,cAAc,CAACoF,IAAI,CAACC,SAAN,CAAd,CAA+BS,IAA/B,GAAsCD,MAAtC,KAAiD,CAArD,EAAwD;AACpD,sBAAMP,YAAY,GAAG,CAACF,IAAI,CAACG,WAAL,GAAmBH,IAAI,CAACG,WAAL,GAAmB,GAAtC,GAA4C,EAA7C,IAAmD,KAAKjG,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE6C,IAAI,CAACI;AAAX,iBAA9B,CAAnD,IAA0GJ,IAAI,CAACK,WAAL,GAAmB,MAAML,IAAI,CAACK,WAA9B,GAA4C,EAAtJ,CAArB;AACAhG,gBAAAA,cAAc,CAACoF,IAAf,CAAoBS,YAApB;AACAzB,gBAAAA,UAAU,CAACgB,IAAX,CAAgBO,IAAI,CAACM,cAArB;AACH;AACJ,aAPI,MAQA;AACD;AACA,kBAAI1F,cAAc,CAACoF,IAAI,CAACC,SAAN,CAAd,CAA+BQ,MAA/B,KAA0C,CAA9C,EAAiD;AAC7C,sBAAMP,YAAY,GAAG,CAACF,IAAI,CAACG,WAAL,GAAmBH,IAAI,CAACG,WAAL,GAAmB,GAAtC,GAA4C,EAA7C,IAAmD,KAAKjG,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,kBAAAA,EAAE,EAAE6C,IAAI,CAACI;AAAX,iBAA9B,CAAnD,IAA0GJ,IAAI,CAACK,WAAL,GAAmB,MAAML,IAAI,CAACK,WAA9B,GAA4C,EAAtJ,CAArB;AACAhG,gBAAAA,cAAc,CAACoF,IAAf,CAAoBS,YAApB;AACAzB,gBAAAA,UAAU,CAACgB,IAAX,CAAgBO,IAAI,CAACM,cAArB;AACH;AACJ;AACJ;AACJ,SAzC2B,CA0C5B;AACA;AACA;AACA;;AACH,OA9CD,EAnS4B,CAkV5B;;AAEA,UAAIjG,cAAc,CAACoG,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,YAAIjC,QAAQ,KAAK,CAAjB,EAAoB;AAChB,eAAKtE,KAAL,CAAWyG,cAAX,CAA0B,KAAKxG,OAA/B;AACH,SAFD,MAGK,IAAIqE,QAAQ,KAAK,CAAjB,EAAoB;AACrB,cAAI5D,cAAc,CAACgG,KAAf,IAAwBhG,cAAc,CAACgG,KAAf,KAAyB5J,iBAAiB,CAAC6J,EAAvE,EAA2E;AAEvEhK,YAAAA,KAAK,CAACiK,IAAN,CAAW,KAAK5G,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAAX;AAEH,WAJD,MAIO;AAEH,iBAAKjD,KAAL,CAAW6G,aAAX;AACH;AACJ,SATI,MAUA;AACD,cAAI,KAAK7G,KAAL,CAAWJ,KAAX,CAAiB6F,QAArB,EAA+B;AAC3B,gBAAI9E,YAAY,GAAG,KAAKhB,KAAL,CAAWgB,YAA9B;AACAA,YAAAA,YAAY,CAAC,mBAAD,CAAZ,GAAoC,KAAKhB,KAAL,CAAWe,cAAX,CAA0B,mBAA1B,CAApC;AACAC,YAAAA,YAAY,CAAC,UAAD,CAAZ,GAA2B,KAAKhB,KAAL,CAAWe,cAAX,CAA0B,UAA1B,CAA3B;AACAC,YAAAA,YAAY,CAAC,2BAAD,CAAZ,GAA4C,KAAKhB,KAAL,CAAWe,cAAX,CAA0B,2BAA1B,CAA5C;AAEA,kBAAMQ,kBAAkB,GAAGP,YAAY,CAAC,mBAAD,CAAZ,IACvBA,YAAY,CAAC,mBAAD,CAAZ,CAAkCmF,IAAlC,CAAuCgB,kBAAvC,KAA8D,CADvC,GAC2C,IAD3C,GACkD,KAD7E;AAEA,iBAAKC,qBAAL,GAA6B,EAA7B;;AACA,gBAAI7F,kBAAJ,EAAwB;AACpB,mBAAK6F,qBAAL,GAA6B,CACzB;AAAE,2BAAW,cAAb;AAA6B,6BAAa,gBAA1C;AAA4DC,gBAAAA,KAAK,EAAE;AAAnE,eADyB,CAA7B;AAGH;;AAED,iBAAKhH,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,IACI,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QAA9C,CAAuDrB,GAAvD,CAA2DsB,GAAG,IAAI;AAC9D,qBAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,uBAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC;AACA,sBAAIA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtChC,oBAAAA,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AACnC,0BAAIA,YAAY,CAACC,SAAb,KAA2B,IAA/B,EAAqC;AACjC;AACA,6BAAK6B,qBAAL,CAA2BxB,IAA3B,CAAgC;AAAE,uCAAa,IAAf;AAAqB,qCAAWN,YAAY,CAACnB,KAA7C;AAAoD,uCAAamB,YAAY,CAACnB,KAA9E;AAAqFkD,0BAAAA,KAAK,EAAE;AAA5F,yBAAhC;AACH;;AACD,6BAAO,KAAKD,qBAAZ;AACH,qBAND;AAOH,mBARD,MAQO;AACH,wBAAI1F,SAAS,CAAC6D,SAAd,EACI,KAAK6B,qBAAL,CAA2BxB,IAA3B,CAAgC;AAAE,mCAAa,IAAf;AAAqB,iCAAWlE,SAAS,CAACyC,KAA1C;AAAiD,mCAAazC,SAAS,CAACyC,KAAxE;AAA+EkD,sBAAAA,KAAK,EAAE;AAAtF,qBAAhC;AAEJ,2BAAO,KAAKD,qBAAZ;AACH;AAEJ,iBAjBM,CAAP;AAmBH,eApBM,CAAP;AAqBH,aAtBD,CADJ,CAf2B,CAwC3B;AACA;AAEA;AACA;AACA;;AACA,kBAAMhF,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAEpF,cADK;AAEfqF,cAAAA,IAAI,EAAE;AACFnB,gBAAAA,gBAAgB,EAAE,EADhB;AAEFF,gBAAAA,eAAe,EAAE,EAFf;AAGFqG,gBAAAA,iBAAiB,EAAE,EAHjB;AAIFxB,gBAAAA,QAAQ,EAAE,KAJR;AAKFyB,gBAAAA,YAAY,EAAE,EALZ;AAMFC,gBAAAA,IAAI,EAAE,EANJ;AAOFrH,gBAAAA,SAAS,EAAE,EAPT;AAQFiH,gBAAAA,qBAAqB,EAAE,EARrB;AASFpG,gBAAAA,YATE;AAUFsD,gBAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,IACR,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC,eADxC,IAC2D,WAXrE;AAYFlD,gBAAAA;AAZE;AAFS,aAAnB;AAiBA,iBAAKlB,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AAGH,WAlED,MAmEK,IAAI,KAAK/B,KAAL,CAAWJ,KAAX,CAAiB+E,aAArB,EAAoC;AACrC,iBAAKyC,oBAAL,CAA0B9C,QAA1B,EAAoC,KAAKrE,OAAzC;AACH,WAFI,MAGA,IAAI,KAAKD,KAAL,CAAWJ,KAAX,CAAiB4F,QAArB,EAA+B;AAChC,iBAAK6B,eAAL,CAAqB/C,QAArB,EAA+B,KAAKrE,OAApC;AACH,WAFI,MAGA,IAAI,KAAKD,KAAL,CAAWJ,KAAX,CAAiB0D,aAArB,EAAoC;AACrC,iBAAKgE,oBAAL,CAA0BhD,QAA1B,EAAoC,KAAKrE,OAAzC;AACH,WAFI,MAGA;AACD,iBAAKsH,WAAL,CAAiBjD,QAAjB,EAA2B,KAAKrE,OAAhC;AACH;AAEJ;AACJ,OAhGD,MAiGK;AACD6D,QAAAA,KAAK,GAAGS,UAAU,CAAC,CAAD,CAAV,KAAkB5B,SAAlB,GAA8BmB,KAA9B,GAAsCS,UAAU,CAAC,CAAD,CAAxD;AACA5H,QAAAA,KAAK,CAACiK,IAAN,CAAY,GAAE,KAAK5G,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAEa;AAAN,SAA9B,CAA6C,IAAG3D,cAAc,CAAC,CAAD,CAAI,EAAhF;AACH;AAEJ,KA5lBkB;;AAAA,SA8lBnBqH,UA9lBmB,GA8lBN,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACnC,YAAM5G,gBAAgB,GAAG,KAAKnB,KAAL,CAAWmB,gBAAX,IAA+B,EAAxD;AACAA,MAAAA,gBAAgB,CAAC4G,SAAD,CAAhB,GAA8BD,SAA9B,CAFmC,CAGnC;;AACA,YAAM1F,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AAAEnB,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKd,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KAvmBkB;;AAAA,SAymBnB4F,aAzmBmB,GAymBH,CAACF,SAAD,EAAYG,OAAZ,EAAqBC,UAArB,KAAoC;AAChD,YAAMnH,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAApD;;AACA,UAAI+G,SAAJ,EAAe;AACX,YAAIK,UAAU,GAAG,EAAjB;AACA,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIC,eAAe,GAAG,EAAtB;AACA,YAAIC,SAAS,GAAGJ,UAAU,IAAID,OAAO,CAAC9D,KAAtC;AAEA,YAAIoE,OAAO,GAAG,KAAd;AACA,YAAIC,eAAe,GAAG,KAAtB;AACA,YAAIC,eAAe,GAAG,CAAC,CAAvB;AACA,YAAIC,YAAY,GAAG,CAAC,CAApB;AACA,YAAIC,YAAY,GAAG,KAAnB;AACA,YAAIC,UAAU,GAAG,KAAjB;AACA,YAAIC,kBAAkB,GAAG,KAAzB;AACA,YAAIC,QAAQ,GAAG,KAAf;AACA,YAAIC,gBAAgB,GAAG,KAAvB;AACA,cAAMC,eAAe,GAAG,KAAK3I,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0E,mBAA5B,GACpBpI,QAAQ,CAAC,KAAKR,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0E,mBAA5B,CAAgDD,eAAjD,CADY,GACwD,CADhF;AAEA,cAAME,UAAU,GAAG;AACftF,UAAAA,KAAK,EAAEqE,OAAO,CAACrE,KADA;AAEfuF,UAAAA,MAAM,EAAElB,OAAO,CAACkB,MAFD;AAGfC,UAAAA,eAAe,EAAEnB,OAAO,CAACoB,WAHV;AAIfC,UAAAA,KAAK,EAAExB,SAAS,GAAGA,SAAS,CAACwB,KAAb,GAAqB,CAAC,CAJvB;AAKfnD,UAAAA,IAAI,EAAE2B,SAAS,GAAGA,SAAS,CAAC3B,IAAb,GAAoB,EALpB;AAMfhC,UAAAA,KAAK,EAAE2D,SAAS,GAAGQ,SAAH,GAAe,EANhB;AAOfiB,UAAAA,iBAAiB,EAAEtB,OAAO,CAACuB;AAPZ,SAAnB;;AASA,YAAI1B,SAAJ,EAAe;AACXA,UAAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,EAAC,GAAGA,SAAS,CAAC,MAAD,CAAb;AAAuB,oBAAOG,OAAO,CAACoB,WAAtC;AACpB,sCAAyBpB,OAAO,CAACwB,sBADb;AACqCN,YAAAA,MAAM,EAAClB,OAAO,CAACkB;AADpD,WAApB;AAGApI,UAAAA,cAAc,CAACuH,SAAD,CAAd,GAA4BR,SAA5B;AACH,SALD,MAKO;AACH/G,UAAAA,cAAc,CAACuH,SAAD,CAAd,GAA4B,EAA5B;AACH;;AACD,YAAIL,OAAO,CAACuB,IAAR,KAAiB,SAArB,EAAgC;AAC5B,gBAAME,eAAe,GAAG,KAAKrJ,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,kBAAlD,CAAxB;AACA,gBAAMK,kBAAkB,GAAG9I,cAAc,CAAC2I,eAAe,CAAC,CAAD,CAAf,CAAmBvF,KAApB,CAAd,IACvBpD,cAAc,CAAC2I,eAAe,CAAC,CAAD,CAAf,CAAmBvF,KAApB,CAAd,CAAyC,MAAzC,EAAiD,UAAjD,EAA6D,oBAA7D,CADJ;AAEAsE,UAAAA,eAAe,GAAG1H,cAAc,CAAC2I,eAAe,CAAC,CAAD,CAAf,CAAmBvF,KAApB,CAAd,IACdpD,cAAc,CAAC2I,eAAe,CAAC,CAAD,CAAf,CAAmBvF,KAApB,CAAd,CAAyCmF,KAD7C;;AAEA,cAAIO,kBAAkB,KAAK,CAA3B,EAA8B;AAC1BtB,YAAAA,OAAO,GAAG,IAAV;AACAG,YAAAA,YAAY,GAAG3H,cAAc,CAACuH,SAAD,CAAd,IACXvH,cAAc,CAACuH,SAAD,CAAd,CAA0BgB,KAD9B;AAEH;AAEJ,SAZD,MAaK,IAAIrB,OAAO,CAACuB,IAAR,KAAiB,YAArB,EAAmC;AACpC,gBAAMM,kBAAkB,GAAG,KAAKzJ,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,qBAAlD,CAA3B;AACA,gBAAMK,kBAAkB,GAAG9I,cAAc,CAAC+I,kBAAkB,CAAC,CAAD,CAAlB,CAAsB3F,KAAvB,CAAd,IACvBpD,cAAc,CAAC+I,kBAAkB,CAAC,CAAD,CAAlB,CAAsB3F,KAAvB,CAAd,CAA4C,MAA5C,EAAoD,UAApD,EAAgE,oBAAhE,CADJ;AAEAsE,UAAAA,eAAe,GAAG1H,cAAc,CAAC+I,kBAAkB,CAAC,CAAD,CAAlB,CAAsB3F,KAAvB,CAAd,IACdpD,cAAc,CAAC+I,kBAAkB,CAAC,CAAD,CAAlB,CAAsB3F,KAAvB,CAAd,CAA4CmF,KADhD;;AAEA,cAAIO,kBAAkB,KAAK,CAA3B,EAA8B;AAC1BjB,YAAAA,UAAU,GAAG,IAAb;AACAF,YAAAA,YAAY,GAAG3H,cAAc,CAACuH,SAAD,CAAd,IACXvH,cAAc,CAACuH,SAAD,CAAd,CAA0BgB,KAD9B;AAEH;AAEJ,SAZI,MAaA,IAAIrB,OAAO,CAACuB,IAAR,KAAiB,UAArB,EAAiC;AAClC,gBAAMO,gBAAgB,GAAG,KAAK1J,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,mBAAlD,CAAzB;AACA,gBAAMK,kBAAkB,GAAG9I,cAAc,CAACgJ,gBAAgB,CAAC,CAAD,CAAhB,CAAoB5F,KAArB,CAAd,IACvBpD,cAAc,CAACgJ,gBAAgB,CAAC,CAAD,CAAhB,CAAoB5F,KAArB,CAAd,CAA0C,MAA1C,EAAkD,UAAlD,EAA8D,oBAA9D,CADJ;AAEAsE,UAAAA,eAAe,GAAG1H,cAAc,CAACgJ,gBAAgB,CAAC,CAAD,CAAhB,CAAoB5F,KAArB,CAAd,IACdpD,cAAc,CAACgJ,gBAAgB,CAAC,CAAD,CAAhB,CAAoB5F,KAArB,CAAd,CAA0CmF,KAD9C;;AAEA,cAAIO,kBAAkB,KAAK,CAA3B,EAA8B;AAC1Bf,YAAAA,QAAQ,GAAG,IAAX;AACAJ,YAAAA,YAAY,GAAG3H,cAAc,CAACuH,SAAD,CAAd,IACXvH,cAAc,CAACuH,SAAD,CAAd,CAA0BgB,KAD9B;AAEH;AAEJ,SAZI,MAaA,IAAIrB,OAAO,CAACuB,IAAR,KAAiB,kBAArB,EAAyC;AAC1C,gBAAMQ,OAAO,GAAG,KAAK3J,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,SAAlD,CAAhB;AACAf,UAAAA,eAAe,GAAG1H,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,IACdpD,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,CAA8B,OAA9B,CADJ;AAGA,gBAAM0F,kBAAkB,GAAG9I,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,IACvBpD,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,CAA8B,MAA9B,EAAsC,UAAtC,EAAkD,oBAAlD,CADJ;;AAEA,cAAI0F,kBAAkB,KAAK,CAA3B,EAA8B;AAC1BrB,YAAAA,eAAe,GAAG,IAAlB;AACH,WAFD,MAEO;AACHU,YAAAA,UAAU,CAAC,aAAD,CAAV,GAA4Bc,OAAO,CAAC,CAAD,CAAP,CAAW7F,KAAvC,CADG,CAEH;AACA;;AACAoE,YAAAA,OAAO,GAAG,IAAV;AACH;AACJ,SAfI,MAgBA,IAAIN,OAAO,CAACuB,IAAR,KAAiB,qBAArB,EAA4C;AAC7C,gBAAMS,UAAU,GAAG,KAAK5J,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,YAAlD,CAAnB;AACAf,UAAAA,eAAe,GAAG1H,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,IACdpD,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,CAA8B,OAA9B,CADJ;AAEA,gBAAM0F,kBAAkB,GAAG9I,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,IACvBpD,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,CAA8B,MAA9B,EAAsC,UAAtC,EAAkD,oBAAlD,CADJ;;AAEA,cAAI0F,kBAAkB,KAAK,CAA3B,EAA8B;AAC1BhB,YAAAA,kBAAkB,GAAG,IAArB;AACH,WAFD,MAEO;AACHK,YAAAA,UAAU,CAAC,gBAAD,CAAV,GAA+Be,UAAU,CAAC,CAAD,CAAV,CAAc9F,KAA7C,CADG,CAEH;AACA;;AACAyE,YAAAA,UAAU,GAAG,IAAb;AACH;AACJ,SAdI,MAeA,IAAIX,OAAO,CAACuB,IAAR,KAAiB,mBAArB,EAA0C;AAC3C,gBAAMU,QAAQ,GAAG,KAAK7J,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,UAAlD,CAAjB;AACAf,UAAAA,eAAe,GAAG1H,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,IACdpD,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,CAA8B,OAA9B,CADJ;AAEA,gBAAM0F,kBAAkB,GAAG9I,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,IACvBpD,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,CAA8B,MAA9B,EAAsC,UAAtC,EAAkD,oBAAlD,CADJ;;AAEA,cAAI0F,kBAAkB,KAAK,CAA3B,EAA8B;AAC1Bd,YAAAA,gBAAgB,GAAG,IAAnB;AACH,WAFD,MAEO;AACHG,YAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BgB,QAAQ,CAAC,CAAD,CAAR,CAAY/F,KAAzC,CADG,CAEH;AACA;;AACA2E,YAAAA,QAAQ,GAAG,IAAX;AACH;AACJ,SAdI,MAeA,IAAIb,OAAO,CAACuB,IAAR,KAAiB,eAArB,EAAsC;AACvC,gBAAMO,gBAAgB,GAAG,KAAK1J,KAAL,CAAWsJ,eAAX,CAA2B7G,MAA3B,CAAkC8G,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAW,mBAAlD,CAAzB,CADuC,CAEvC;AACA;AACA;AACA;AACA;AACA;;AACAN,UAAAA,UAAU,CAAC,sBAAD,CAAV,GAAqCa,gBAAgB,CAAC,CAAD,CAAhB,CAAoB5F,KAAzD,CARuC,CASvC;AACA;;AACAwE,UAAAA,YAAY,GAAG,IAAf,CAXuC,CAYvC;AACH;;AAED,YAAIV,OAAO,CAACrE,KAAR,IAAiBqE,OAAO,CAACrE,KAAR,CAAcgD,MAAd,GAAuB,CAA5C,EAA+C;AAC3CwB,UAAAA,cAAc,GAAG3K,0BAA0B,CAAC,KAAK4C,KAAL,CAAWsJ,eAAZ,EAA6B1B,OAAO,CAACrE,KAArC,EAA4C,OAA5C,CAA3C;AACAyE,UAAAA,eAAe,GAAG,EAAlB;AACAD,UAAAA,cAAc,CAACvE,GAAf,CAAmBsG,UAAU,IAAI;AAC7B,kBAAMC,GAAG,GAAG/M,UAAU,CAAC,KAAKgD,KAAL,CAAWsJ,eAAZ,EAA6BQ,UAA7B,EAAyC9B,eAAzC,EAA0D,KAA1D,CAAtB;AACAA,YAAAA,eAAe,GAAG+B,GAAG,CAAC/B,eAAtB;AACA,mBAAO,IAAP;AACH,WAJD;AAMAF,UAAAA,UAAU,GAAG1K,0BAA0B,CAAC,KAAK4C,KAAL,CAAW0D,qBAAZ,EAAmCkE,OAAO,CAACrE,KAA3C,EAAkD,OAAlD,CAAvC;AACA,gBAAMyG,WAAW,GAAG;AAChB3B,YAAAA,YADgB;AACFD,YAAAA,eADE;AAEhBO,YAAAA,eAAe,EAAEA;AAFD,WAApB;AAIA,eAAK3I,KAAL,CAAWjC,cAAX,CAA0B8K,UAA1B,EACI,KAAK7I,KAAL,CAAWJ,KAAX,CAAiB8B,QADrB,EAC+BhB,cAD/B,EAC+C,KAAKV,KAAL,CAAWJ,KAAX,CAAiB6H,SADhE,EAEIM,cAFJ,EAEoBC,eAFpB,EAEqC,KAAKhI,KAAL,CAAW0D,qBAFhD,EAGI,CAAC,GAAGqE,cAAJ,EAAoB,GAAGD,UAAvB,CAHJ,EAGwCK,eAHxC,EAGyDD,OAHzD,EAGkE8B,WAHlE,EAIIxB,kBAJJ,EAIwBD,UAJxB,EAIoCG,gBAJpC,EAIsDD,QAJtD,EAIgEH,YAJhE;AAKH,SAnBD,MAmBO;AAEH;AACA;AACA;AAEA;AACA,cAAIJ,OAAO,IAAIC,eAAX,IAA8BI,UAA9B,IACAE,QADA,IACYC,gBADZ,IACgCF,kBADhC,IACsDF,YAD1D,EACwE;AACpE;AACA;AACA,kBAAM0B,WAAW,GAAG;AAChB3B,cAAAA,YADgB;AACFD,cAAAA,eADE;AAEhBO,cAAAA,eAAe,EAAEA;AAFD,aAApB;AAKA,iBAAK3I,KAAL,CAAWjC,cAAX,CAA0B8K,UAA1B,EACI,KAAK7I,KAAL,CAAWJ,KAAX,CAAiB8B,QADrB,EAC+BhB,cAD/B,EAC+C,KAAKV,KAAL,CAAWJ,KAAX,CAAiB6H,SADhE,EAEIM,cAFJ,EAEoBC,eAFpB,EAEqC,KAAKhI,KAAL,CAAW0D,qBAFhD,EAGI,CAAC,GAAGqE,cAAJ,EAAoB,GAAGD,UAAvB,CAHJ,EAGwCK,eAHxC,EAGyDD,OAHzD,EAGkE8B,WAHlE,EAIIxB,kBAJJ,EAIwBD,UAJxB,EAIoCG,gBAJpC,EAIsDD,QAJtD;AAKH,WAdD,MAcO;AACH,kBAAM1G,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAEpF,cADK;AAEfqF,cAAAA,IAAI,EAAE;AAAEvB,gBAAAA;AAAF;AAFS,aAAnB;AAIA,iBAAKV,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AAGJ;AACJ,OAxLD,MAwLO;AACH,cAAM0F,SAAS,GAAG,KAAKzH,KAAL,CAAWJ,KAAX,CAAiB6H,SAAnC;AACA/G,QAAAA,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,GAAgC,EAAhC;;AACA,YAAI8D,OAAO,CAACrE,KAAR,IAAiBqE,OAAO,CAACrE,KAAR,CAAcgD,MAAd,GAAuB,CAA5C,EAA+C;AAC3CqB,UAAAA,OAAO,CAACrE,KAAR,CAAcC,GAAd,CAAkByG,IAAI,IAAI;AACtBvJ,YAAAA,cAAc,CAACuJ,IAAI,CAACnG,KAAN,CAAd,GAA6B,EAA7B;AACA,mBAAO2D,SAAS,CAACwC,IAAI,CAACnG,KAAN,CAAhB;AACA,kBAAMoG,UAAU,GAAG,CAAC,GAAG,KAAKlK,KAAL,CAAWsJ,eAAf,EAAgC,GAAG,KAAKtJ,KAAL,CAAW0D,qBAA9C,CAAnB;AAEAwG,YAAAA,UAAU,CAAC1G,GAAX,CAAenC,SAAS,IAAI;AACxB,kBAAIA,SAAS,CAACyC,KAAV,KAAoBmG,IAAI,CAACnG,KAA7B,EAAoC;AAChC,oBAAIzC,SAAS,CAACkC,KAAV,IAAmBlC,SAAS,CAACkC,KAAV,CAAgBgD,MAAhB,GAAyB,CAAhD,EAAmD;AAC/ClF,kBAAAA,SAAS,CAACkC,KAAV,CAAgBC,GAAhB,CAAoB2G,KAAK,IAAI;AACzBzJ,oBAAAA,cAAc,CAACyJ,KAAK,CAACrG,KAAP,CAAd,GAA8B,EAA9B;AACA,2BAAO2D,SAAS,CAAC0C,KAAK,CAACrG,KAAP,CAAhB;AACH,mBAHD;AAIH;AACJ;AACJ,aATD;AAUH,WAfD;AAgBH;;AACD,cAAM/B,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEpF,cADK;AAEfqF,UAAAA,IAAI,EAAE;AAAEvB,YAAAA,cAAF;AAAkB+G,YAAAA;AAAlB;AAFS,SAAnB;AAIA,aAAKzH,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ,KA9zBkB;;AAAA,SAg0BnBqI,eAh0BmB,GAg0BD,CAAChJ,KAAD,EAAQiJ,SAAR,KAAsB;AACpC,YAAM3J,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAApD;;AACA,UAAIU,KAAK,CAACkJ,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAInJ,KAAK,CAACkJ,MAAN,CAAanB,IAAb,KAAsB,UAA1B,EAAsC;AAClCzI,UAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B,KAA7B;AACH;;AACD,YAAIU,KAAK,CAACkJ,MAAN,CAAanB,IAAb,KAAsB,UAA1B,EAAsC;AAClCzI,UAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B,KAA7B;AACH;;AACD,cAAMuI,KAAK,GAAGvI,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAA5B;;AACA,YAAIF,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAKtG,SAA9B,EAAyC;AACrC,cAAIsG,KAAK,CAACuB,QAAN,CAAeH,SAAf,CAAJ,EAA+B;AAC3B,kBAAMI,KAAK,GAAGxB,KAAK,CAACyB,OAAN,CAAcL,SAAd,CAAd;;AACA,gBAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,kBAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,sBAAME,UAAU,GAAG1B,KAAK,CAACyB,OAAN,CAAc,GAAd,CAAnB;;AACA,oBAAIC,UAAU,KAAK,CAAC,CAApB,EAAuB;AACnBjK,kBAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoCF,KAAK,CAAC2B,KAAN,CAAYD,UAAU,GAAG,CAAzB,CAApC;AAEH,iBAHD,MAGO;AACHjK,kBAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoC,EAApC;AACH;AACJ,eARD,MAQO;AACH,oBAAIF,KAAK,CAAC2B,KAAN,CAAYH,KAAZ,EAAmBC,OAAnB,CAA2B,GAA3B,MAAoC,CAAC,CAAzC,EAA4C;AACxChK,kBAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoCF,KAAK,CAAC2B,KAAN,CAAY,CAAZ,EAAeH,KAAf,IAAwBxB,KAAK,CAAC2B,KAAN,CAAYH,KAAK,GAAGxB,KAAK,CAAC2B,KAAN,CAAYH,KAAZ,EAAmBC,OAAnB,CAA2B,GAA3B,CAAR,GAA0C,CAAtD,CAA5D;AACH,iBAFD,MAEO;AACHhK,kBAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoCF,KAAK,CAAC2B,KAAN,CAAY,CAAZ,EAAeH,KAAK,GAAG,CAAvB,CAApC;AACH;AAEJ;AACJ;AAEJ,WArBD,MAqBO;AACH/J,YAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoCF,KAAK,GAAG,GAAR,GAAcoB,SAAlD;AACH;AAEJ,SA1BD,MA0BO;AACH3J,UAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoCkB,SAApC;AACH;AACJ,OArCD,MAsCK,IAAIjJ,KAAK,CAACkJ,MAAN,CAAaC,IAAb,KAAsB,OAA1B,EAAmC;AACpC7J,QAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoCkB,SAApC;AACH,OAFI,MAGA;AACD3J,QAAAA,cAAc,CAACU,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAd,GAAoC/H,KAAK,CAACkJ,MAAN,CAAarB,KAAjD;AACH;;AACD,WAAK4B,QAAL,CAAc;AAAEnK,QAAAA;AAAF,OAAd;AACH,KA/2BkB;;AAAA,SAi3BnBoK,wBAj3BmB,GAi3BQ,CAAC1J,KAAD,EAAQiJ,SAAR,KAAsB;AAC7C,YAAMzJ,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAX,IAA8B,EAAtD;;AACA,UAAIQ,KAAK,CAACkJ,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAInJ,KAAK,CAACkJ,MAAN,CAAanB,IAAb,KAAsB,UAA1B,EAAsC;AAClCvI,UAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,KAA9B;AACH;;AACD,YAAIQ,KAAK,CAACkJ,MAAN,CAAanB,IAAb,KAAsB,UAA1B,EAAsC;AAClCvI,UAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,KAA9B;AACH;;AACD,cAAMqI,KAAK,GAAGrI,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAA7B;;AACA,YAAIF,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAKtG,SAA9B,EAAyC;AACrC,cAAIsG,KAAK,CAACuB,QAAN,CAAeH,SAAf,CAAJ,EAA+B;AAC3B,kBAAMI,KAAK,GAAGxB,KAAK,CAACyB,OAAN,CAAcL,SAAd,CAAd;;AACA,gBAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,kBAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,sBAAME,UAAU,GAAG1B,KAAK,CAACyB,OAAN,CAAc,GAAd,CAAnB;;AACA,oBAAIC,UAAU,KAAK,CAAC,CAApB,EAAuB;AACnB/J,kBAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqCF,KAAK,CAAC2B,KAAN,CAAYD,UAAU,GAAG,CAAzB,CAArC;AAEH,iBAHD,MAGO;AACH/J,kBAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqC,EAArC;AACH;AACJ,eARD,MAQO;AACH;AACA,oBAAIF,KAAK,CAAC2B,KAAN,CAAYH,KAAZ,EAAmBC,OAAnB,CAA2B,GAA3B,MAAoC,CAAC,CAAzC,EAA4C;AACxC9J,kBAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqCF,KAAK,CAAC2B,KAAN,CAAY,CAAZ,EAAeH,KAAf,IAAwBxB,KAAK,CAAC2B,KAAN,CAAYH,KAAK,GAAGxB,KAAK,CAAC2B,KAAN,CAAYH,KAAZ,EAAmBC,OAAnB,CAA2B,GAA3B,CAAR,GAA0C,CAAtD,CAA7D;AACH,iBAFD,MAEO;AACH9J,kBAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqCF,KAAK,CAAC2B,KAAN,CAAY,CAAZ,EAAeH,KAAK,GAAG,CAAvB,CAArC;AACH;AAEJ;AACJ;AAEJ,WAtBD,MAsBO;AACH7J,YAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqCF,KAAK,GAAG,GAAR,GAAcoB,SAAnD;AACH;AAEJ,SA3BD,MA2BO;AACHzJ,UAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqCkB,SAArC;AACH;AACJ,OAtCD,MAuCK,IAAIjJ,KAAK,CAACkJ,MAAN,CAAaC,IAAb,KAAsB,OAA1B,EAAmC;AACpC3J,QAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqCkB,SAArC;AACH,OAFI,MAGA;AACDzJ,QAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqC/H,KAAK,CAACkJ,MAAN,CAAarB,KAAlD;AACH;;AACD,WAAK4B,QAAL,CAAc;AAAEjK,QAAAA;AAAF,OAAd;AACH,KAj6BkB;;AAAA,SAo6BnBmK,sBAp6BmB,GAo6BM,CAACtD,SAAD,EAAYG,OAAZ,EAAqBC,UAArB,KAAoC;AACzD,YAAMjH,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAX,IAA8B,EAAtD;;AACA,UAAI6G,SAAJ,EAAe;AACX,YAAIK,UAAU,GAAG,EAAjB;AACA,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIC,eAAe,GAAG,EAAtB;AAEA,YAAIC,SAAS,GAAGJ,UAAU,IAAID,OAAO,CAAC9D,KAAtC;AAEA,cAAM+E,UAAU,GAAG;AACftF,UAAAA,KAAK,EAAEqE,OAAO,CAACrE,KADA;AAEfuF,UAAAA,MAAM,EAAElB,OAAO,CAACkB,MAFD;AAGfC,UAAAA,eAAe,EAAEnB,OAAO,CAACoB,WAHV;AAIfC,UAAAA,KAAK,EAAExB,SAAS,GAAGA,SAAS,CAACwB,KAAb,GAAqB,CAAC,CAJvB;AAKfnD,UAAAA,IAAI,EAAE2B,SAAS,GAAG,EAAC,GAAGA,SAAS,CAAC3B,IAAd;AAAoBkF,YAAAA,IAAI,EAACpD,OAAO,CAACoB,WAAjC;AAA8CI,YAAAA,sBAAsB,EAACxB,OAAO,CAACwB,sBAA7E;AAAqGN,YAAAA,MAAM,EAAClB,OAAO,CAACkB;AAApH,WAAH,GAAiI,EALjI;AAMfhF,UAAAA,KAAK,EAAE2D,SAAS,GAAGQ,SAAH,GAAe,EANhB;AAOfiB,UAAAA,iBAAiB,EAAEtB,OAAO,CAACuB;AAPZ,SAAnB;AASA1B,QAAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,EAAC,GAAGA,SAAS,CAAC,MAAD,CAAb;AAAuBuD,UAAAA,IAAI,EAACpD,OAAO,CAACoB,WAApC;AACCI,UAAAA,sBAAsB,EAACxB,OAAO,CAACwB,sBADhC;AAECN,UAAAA,MAAM,EAAClB,OAAO,CAACkB;AAFhB,SAApB;;AAIA,YAAIrB,SAAJ,EAAe;AACX7G,UAAAA,eAAe,CAACqH,SAAD,CAAf,GAA6BR,SAA7B;AACH,SAFD,MAEO;AACH7G,UAAAA,eAAe,CAACqH,SAAD,CAAf,GAA6B,EAA7B;AACH;;AACD,YAAIL,OAAO,CAACrE,KAAR,IAAiBqE,OAAO,CAACrE,KAAR,CAAcgD,MAAd,GAAuB,CAA5C,EAA+C;AAC3CwB,UAAAA,cAAc,GAAG3K,0BAA0B,CAAC,KAAKuC,KAAL,CAAWoB,wBAAZ,EACvC6G,OAAO,CAACrE,KAD+B,EACxB,OADwB,CAA3C;AAEAyE,UAAAA,eAAe,GAAG,EAAlB;AACAA,UAAAA,eAAe,GAAGD,cAAc,CAACvE,GAAf,CAAmBsG,UAAU,IAAI;AAC/C,kBAAMC,GAAG,GAAG/M,UAAU,CAAC,KAAK2C,KAAL,CAAWoB,wBAAZ,EAClB+I,UADkB,EACN9B,eADM,EACW,KADX,CAAtB;AAEA,mBAAO+B,GAAG,CAAC/B,eAAX;AACH,WAJiB,CAAlB;AAMAF,UAAAA,UAAU,GAAG1K,0BAA0B,CAAC,KAAKuC,KAAL,CAAWqB,8BAAZ,EACnC4G,OAAO,CAACrE,KAD2B,EACpB,OADoB,CAAvC;AAGA,eAAKvD,KAAL,CAAWjC,cAAX,CAA0B8K,UAA1B,EACI,KAAK7I,KAAL,CAAWJ,KAAX,CAAiB8B,QADrB,EAC+Bd,eAD/B,EACgD,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBqL,kBADjE,EAEIlD,cAFJ,EAEoBC,eAFpB,EAEqC,KAAKrI,KAAL,CAAWqB,8BAFhD,EAGI,CAAC,GAAG+G,cAAJ,EAAoB,GAAGD,UAAvB,CAHJ;AAIH,SAjBD,MAiBO;AAEH,gBAAM/F,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEpF,cADK;AAEfqF,YAAAA,IAAI,EAAE;AAAErB,cAAAA;AAAF;AAFS,WAAnB;AAIA,eAAKZ,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ,OAlDD,MAkDO;AACH,cAAMkJ,kBAAkB,GAAG,KAAKjL,KAAL,CAAWJ,KAAX,CAAiBqL,kBAA5C;AACArK,QAAAA,eAAe,CAACgH,OAAO,CAAC9D,KAAT,CAAf,GAAiC,EAAjC;;AACA,YAAI8D,OAAO,CAACrE,KAAR,IAAiBqE,OAAO,CAACrE,KAAR,CAAcgD,MAAd,GAAuB,CAA5C,EAA+C;AAC3CqB,UAAAA,OAAO,CAACrE,KAAR,CAAcC,GAAd,CAAkByG,IAAI,IAAI;AACtBrJ,YAAAA,eAAe,CAACqJ,IAAI,CAACnG,KAAN,CAAf,GAA8B,EAA9B;AACA,mBAAOmH,kBAAkB,CAAChB,IAAI,CAACnG,KAAN,CAAzB;AACA,kBAAMoG,UAAU,GAAG,CAAC,GAAG,KAAKlK,KAAL,CAAWe,wBAAf,EAAyC,GAAG,KAAKf,KAAL,CAAWgB,8BAAvD,CAAnB;AAEAkJ,YAAAA,UAAU,CAAC1G,GAAX,CAAenC,SAAS,IAAI;AACxB,kBAAIA,SAAS,CAACyC,KAAV,KAAoBmG,IAAI,CAACnG,KAA7B,EAAoC;AAChC,oBAAIzC,SAAS,CAACkC,KAAV,IAAmBlC,SAAS,CAACkC,KAAV,CAAgBgD,MAAhB,GAAyB,CAAhD,EAAmD;AAC/ClF,kBAAAA,SAAS,CAACkC,KAAV,CAAgBC,GAAhB,CAAoB2G,KAAK,IAAI;AACzBvJ,oBAAAA,eAAe,CAACuJ,KAAK,CAACrG,KAAP,CAAf,GAA+B,EAA/B;AACA,2BAAOmH,kBAAkB,CAACd,KAAK,CAACrG,KAAP,CAAzB;AACH,mBAHD;AAIH;AACJ;AACJ,aATD;AAUH,WAfD;AAgBH;;AACD,cAAM/B,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEpF,cADK;AAEfqF,UAAAA,IAAI,EAAE;AAAErB,YAAAA,eAAF;AAAmBqK,YAAAA;AAAnB;AAFS,SAAnB;AAIA,aAAKjL,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ,KAn/BkB;;AAAA,SAq/BnBmJ,oBAr/BmB,GAq/BI,CAACjC,KAAD,EAAQE,IAAR,KAAiB;AACpC,UAAIzI,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAhC;AACAA,MAAAA,cAAc,CAACyI,IAAD,CAAd,GAAuBF,KAAvB;AACA,WAAK4B,QAAL,CAAc;AAAEnK,QAAAA;AAAF,OAAd;AACH,KAz/BkB;;AAAA,SA2/BnByK,sBA3/BmB,GA2/BM,CAAClC,KAAD,EAAQrB,OAAR,KAAoB;AACzC,UAAIhH,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAjC;;AACA,UAAIA,eAAe,CAACgH,OAAO,CAAC9D,KAAT,CAAnB,EAAoC;AAChC,YAAI8D,OAAO,CAACwD,GAAZ,EAAiB;AACb,cAAI,EAAExK,eAAe,CAACgH,OAAO,CAAC9D,KAAT,CAAf,GAAiCuH,UAAU,CAACzD,OAAO,CAACwD,GAAT,CAA7C,CAAJ,EAAiE;AAC7DxK,YAAAA,eAAe,CAACgH,OAAO,CAAC9D,KAAT,CAAf,GAAiC8D,OAAO,CAAC0D,SAAR,GAAoBD,UAAU,CAACzD,OAAO,CAACwD,GAAT,CAA9B,GAA8C5K,QAAQ,CAACoH,OAAO,CAACwD,GAAT,CAAvF;AACH;AACJ;;AACD,YAAIxD,OAAO,CAAC2D,GAAZ,EAAiB;AACb,cAAI,EAAE3K,eAAe,CAACgH,OAAO,CAAC9D,KAAT,CAAf,GAAiCuH,UAAU,CAACzD,OAAO,CAAC2D,GAAT,CAA7C,CAAJ,EAAiE;AAC7D3K,YAAAA,eAAe,CAACgH,OAAO,CAAC9D,KAAT,CAAf,GAAiC8D,OAAO,CAAC0D,SAAR,GAAoBD,UAAU,CAACzD,OAAO,CAAC2D,GAAT,CAA9B,GAA8C/K,QAAQ,CAACoH,OAAO,CAAC2D,GAAT,CAAvF;AACH;AACJ;AAGJ;;AACD,WAAKV,QAAL,CAAc;AAAEjK,QAAAA;AAAF,OAAd;AACH,KA5gCkB;;AAAA,SA8gCnB4K,6BA9gCmB,GA8gCa,CAACvC,KAAD,EAAQE,IAAR,KAAiB;AAC7C,UAAIvI,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAjC;AACAA,MAAAA,eAAe,CAACuI,IAAD,CAAf,GAAwBF,KAAxB;AACA,WAAK4B,QAAL,CAAc;AAAEjK,QAAAA;AAAF,OAAd;AACH,KAlhCkB;;AAAA,SAohCnB6K,oBAphCmB,GAohCI,CAACC,SAAD,EAAYC,QAAZ,EAAsB1H,UAAtB,KAAqC;AACxD,YAAM;AAAEvD,QAAAA;AAAF,UAAqB,KAAKf,KAAhC;;AACA,UAAIsE,UAAU,KAAK,WAAnB,EAAgC;AAC5B,cAAMrD,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAnC;AACAA,QAAAA,eAAe,CAAC+K,QAAD,CAAf,GAA4BD,SAA5B;AACA,cAAM3J,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEpF,cADK;AAEfqF,UAAAA,IAAI,EAAE;AACFrB,YAAAA;AADE;AAFS,SAAnB;AAMA,aAAKZ,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,OAVD,MAUO;AACHrB,QAAAA,cAAc,CAACiL,QAAD,CAAd,GAA2BD,SAA3B;AACA,aAAKb,QAAL,CAAc;AAAEnK,UAAAA;AAAF,SAAd;AACH;AAEJ,KAriCkB;;AAAA,SAuiCnBkL,gBAviCmB,GAuiCA,CAACF,SAAD,EAAYC,QAAZ,KAAyB;AACxC,YAAM;AAAEjL,QAAAA;AAAF,UAAqB,KAAKf,KAAhC;AACAe,MAAAA,cAAc,CAACiL,QAAD,CAAd,GAA2BD,SAA3B;AACA,WAAKb,QAAL,CAAc;AAAEnK,QAAAA;AAAF,OAAd;AACH,KA3iCkB;;AAAA,SA6iCnBmL,yBA7iCmB,GA6iCS,CAACH,SAAD,EAAYC,QAAZ,KAAyB;AACjD,YAAM;AAAE/K,QAAAA;AAAF,UAAsB,KAAKjB,KAAjC;AACAiB,MAAAA,eAAe,CAAC+K,QAAD,CAAf,GAA4BD,SAA5B;AACA,WAAKb,QAAL,CAAc;AAAEjK,QAAAA;AAAF,OAAd;AACH,KAjjCkB;;AAAA,SAkqCnBkL,UAlqCmB,GAkqCN,MAAM;AACf,UAAIC,UAAU,GAAG,CAAC,KAAKpM,KAAL,CAAWoM,UAA7B;AACA,WAAKlB,QAAL,CAAc;AACVkB,QAAAA;AADU,OAAd;AAGH,KAvqCkB;;AAAA,SAyqCnBC,WAzqCmB,GAyqCL,MAAM;AAEhB,WAAKnB,QAAL,CAAc;AACVkB,QAAAA,UAAU,EAAE;AADF,OAAd;AAGH,KA9qCkB;;AAAA,SA+qCnBE,OA/qCmB,GA+qCRC,CAAD,IAAO;AACb;AACA;AACA;AACA,YAAMnK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFwD,UAAAA,QAAQ,EAAE,IADR;AAEFxB,UAAAA,UAAU,EAAE;AAFV;AAFS,OAAnB;AAOA,WAAKjE,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KA3rCkB;;AAAA,SAksCnBoK,YAlsCmB,GAksCJ,CAAClF,iBAAD,EAAoBmF,cAApB,EAAoClL,kBAApC,KAA2D;AACtE,UAAIkL,cAAJ,EAAoB;AAChB,YAAInF,iBAAiB,IAAIoF,MAAM,CAACC,IAAP,CAAYrF,iBAAZ,EAA+BV,MAA/B,GAAwC,CAAjE,EAAoE;AAChE,iBAAOU,iBAAiB,CAAC,UAAD,CAAxB;AACA,eAAKjH,KAAL,CAAW5B,OAAX,CAAmB6I,iBAAnB,EAAsC,KAAKjH,KAAL,CAAWJ,KAAjD,EACIwM,cADJ,EACoBlL,kBADpB;AAEH,SAJD,MAIO;AACHvE,UAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK9C,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAEmJ,cAAc,GAAG,8BAAH,GAAoC;AAAxD,WAA9B,CAAX;AACH;AACJ,OARD,MAQO;AACH,cAAMG,kBAAkB,GAAG;AACvBC,UAAAA,iBAAiB,EAAE,KAAK7M,KAAL,CAAWgB,YAAX,CAAwB,mBAAxB,IAA+C,KAAKhB,KAAL,CAAWgB,YAAX,CAAwB,mBAAxB,EAA6CsI,KAA5F,GAAoG,CAAC,CADjG;AAEvBwD,UAAAA,IAAI,EAAE;AAFiB,SAA3B;AAIA,aAAKzM,KAAL,CAAW5B,OAAX,CAAmBmO,kBAAnB,EACI,KAAKvM,KAAL,CAAWJ,KADf,EAEIwM,cAFJ,EAEoBlL,kBAFpB;AAGH;AACJ,KAptCkB;;AAAA,SAstCnBwL,SAttCmB,GAstCNR,CAAD,IAAO;AACf;AACA;AACA;AACA;AACA;AACA,YAAMnK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFwD,UAAAA,QAAQ,EAAE,KADR;AAEF/E,UAAAA,cAAc,EAAE,EAAE,GAAG,KAAKf,KAAL,CAAWe,cAAhB;AAAgC,eAAG,KAAKf,KAAL,CAAWgB;AAA9C,WAFd;AAGFsD,UAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC;AAH1D;AAFS,OAAnB;AASA,WAAKpE,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KAtuCkB;;AAAA,SAwuCnB4K,gBAxuCmB,GAwuCCT,CAAD,IAAO;AACtB;AACA;AACA;AACA;AACA;AACA,YAAMnK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACF+B,UAAAA,sBAAsB,EAAE,KADtB;AAEFC,UAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC,eAF1D;AAGF5B,UAAAA,WAAW,EAAE;AAAEoK,YAAAA,KAAK,EAAE,KAAT;AAAgBC,YAAAA,OAAO,EAAE;AAAzB,WAHX;AAIFxK,UAAAA,SAAS,EAAE,CAJT;AAKFC,UAAAA,SAAS,EAAE,CALT;AAMFH,UAAAA,aAAa,EAAEQ,SANb;AAOFT,UAAAA,WAAW,EAAES;AAPX;AAFS,OAAnB;AAYA,WAAK3C,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB,EAlBsB,CAmBtB;AACH,KA5vCkB;;AAAA,SA+vCnB+K,cA/vCmB,GA+vCDZ,CAAD,IAAO;AACpB,YAAMnK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACF0C,UAAAA,aAAa,EAAE,KADb;AAEF/D,UAAAA,eAAe,EAAE;AAFf;AAFS,OAAnB;AAOA,WAAKZ,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KAxwCkB;;AAAA,SA0wCnBgL,SA1wCmB,GA0wCNb,CAAD,IAAO;AACf,YAAMnK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFuD,UAAAA,QAAQ,EAAE,KADR;AAEF1E,UAAAA,gBAAgB,EAAE,EAFhB;AAGFmD,UAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC;AAH1D;AAFS,OAAnB;AAQA,WAAKpE,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KApxCkB;;AAAA,SAsxCnBiL,cAtxCmB,GAsxCDd,CAAD,IAAO;AACpB,YAAMnK,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFqB,UAAAA,aAAa,EAAE,KADb;AAEF2J,UAAAA,iBAAiB,EAAE,EAFjB;AAGFC,UAAAA,gBAAgB,EAAE,KAHhB;AAIFtM,UAAAA,eAAe,EAAE,EAJf;AAKFE,UAAAA,gBAAgB,EAAE,EALhB;AAMFmD,UAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC,eAN1D;AAOF+I,UAAAA,YAAY,EAAE;AAPZ;AAFS,OAAnB;AAYA,WAAKnN,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KApyCkB;;AAAA,SAqyCnBqL,YAryCmB,GAqyCJ,CAAChM,KAAD,EAAQsG,SAAR,KAAsB;AACjC,UAAItG,KAAK,KAAK,IAAd,EAAoB;AAChB,cAAMV,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAlC,CADgB,CAEhB;AACA;;AACAA,QAAAA,cAAc,CAAC,UAAD,CAAd,GAA6BF,QAAQ,CAACY,KAAK,CAAC0E,IAAN,CAAWuH,QAAZ,CAArC;AACA3M,QAAAA,cAAc,CAAC,mBAAD,CAAd,GAAsCU,KAAtC,CALgB,CAMhB;;AACA,aAAKyJ,QAAL,CAAc;AAAEnK,UAAAA;AAAF,SAAd,EAPgB,CAQhB;AACA;AACA;AACA;AACA;AACA;AAEH;AACJ,KAtzCkB;;AAAA,SAwzCnB4M,WAxzCmB,GAwzCJlM,KAAD,IAAW;AACrB,YAAMmM,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE,wBADI;AAEfvJ,QAAAA,UAAU,EAAE,kBAFG;AAGfwJ,QAAAA,SAAS,EAAE,KAHI;AAIfC,QAAAA,SAAS,EAAEtM,KAAK,CAACuM,GAJF;AAKfC,QAAAA,QAAQ,EAAExM,KAAK,CAACuM,GALD;AAMfE,QAAAA,OAAO,EAAE,0BANM;AAOfpM,QAAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8B,QAPZ;AAQfoM,QAAAA,YAAY,EAAE1M,KAAK,CAAC0E,IARL;AASfpF,QAAAA,cAAc,EAAE,KAAKf,KAAL,CAAWe,cATZ;AAWfqN,QAAAA,UAAU,EAAE3M,KAAK,CAAC2M;AAXH,OAAnB;;AAaA,UAAI3M,KAAK,CAAC2M,UAAN,KAAqB,KAAKpO,KAAL,CAAWe,cAAX,CAA0B,2BAA1B,CAAzB,EAAiF;AAC7E,aAAKV,KAAL,CAAWhC,sBAAX,CAAkCuP,UAAlC,EAA8C,KAAKvN,KAAL,CAAWJ,KAAX,CAAiBsE,UAA/D;AACH,OAhBoB,CAmBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,KAn1CkB;;AAAA,SAs1CnB8J,uBAt1CmB,GAs1CQ5M,KAAD,IAAW;AACjC,UAAI6F,iBAAiB,GAAG7F,KAAK,CAACgC,QAA9B;AACA,UAAI8D,YAAY,GAAG,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,IAAyB,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,CAAsBF,iBAAiB,CAACwF,IAAxC,CAAzB,GAAyE,KAAKzM,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,CAAsBF,iBAAiB,CAACwF,IAAxC,CAAzE,GAAyH,EAA5I;AACA,YAAM1K,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFiF,UAAAA,YADE;AACYD,UAAAA,iBADZ;AAEF7G,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,CADK;AACFC,YAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,GACXC,QAAQ,CAAC,KAAKR,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,CAA0B,EAA1B,CAAD,CADG,GAC+B;AAFnC;AAFb;AAFS,OAAnB;AAUA,WAAKP,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AAEH,KAr2CkB;;AAAA,SAw2CnBkM,YAx2CmB,GAw2CJ,MAAM;AACjB,UAAIC,GAAG,GAAG,EAAV;;AACA,UAAI,KAAKvO,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,KAA8C7J,SAA9C,IACG,KAAKhD,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,KAA8C,EADrD,EACyD;AACrD0B,QAAAA,GAAG,CAAC,2BAAD,CAAH,GAAmC,KAAKvO,KAAL,CAAWgB,YAAX,CAAwBwN,yBAA3D;AACAD,QAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,KAAKvO,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,CAA0CvD,KAArE;AACAiF,QAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAAnE;AACAH,QAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAtB;AACAA,QAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiB8B,QAAnC;AACA,aAAK1B,KAAL,CAAW/B,aAAX,CAAyBiQ,GAAzB;AACH,OARD,MAQO;AACHvR,QAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK9C,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KAt3CkB;;AAAA,SAw3CnBqL,iBAx3CmB,GAw3CC,CAAC7G,SAAD,EAAYC,SAAZ,EAAuB0E,cAAvB,KAA0C;AAC1D,UAAI3E,SAAS,KAAK,IAAlB,EAAwB;AACpB;AACA,cAAM7G,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAX,IAA8B,EAAtD;;AACA,YAAI8G,SAAS,KAAK,iBAAlB,EAAqC;AACjC9G,UAAAA,eAAe,CAAC,iBAAD,CAAf,GAAqC6G,SAArC;AACA,eAAKoD,QAAL,CAAc;AAAEjK,YAAAA;AAAF,WAAd;AACH,SAHD,MAGO;AACH;AACA;AACA;AACA;AACAA,UAAAA,eAAe,CAAC8G,SAAD,CAAf,GAA6BD,SAA7B;AACA7G,UAAAA,eAAe,CAAC,aAAD,CAAf,GAAiC6G,SAAS,CAAC3D,KAA3C;AACAlD,UAAAA,eAAe,CAAC,qBAAD,CAAf,GAAyC6G,SAAS,CAAC3B,IAAV,CAAeyI,mBAAxD;AACA,eAAKvO,KAAL,CAAWtB,aAAX,CAAyBkC,eAAzB,EAA0C,KAA1C,EAAiD,KAAKjB,KAAL,CAAWuB,kBAA5D,EACI,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBE,SADrB;AAEH,SAhBmB,CAkBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AAEJ,KA15CkB;;AAAA,SA25CnB0O,wBA35CmB,GA25CSpN,KAAD,IAAW;AAClC,YAAMR,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAX,IAA8B,EAAtD;;AACA,UAAIQ,KAAK,CAACkJ,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC3J,QAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqC/H,KAAK,CAACkJ,MAAN,CAAamE,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAzE;AACH,OAFD,MAGK;AACD7N,QAAAA,eAAe,CAACQ,KAAK,CAACkJ,MAAN,CAAanB,IAAd,CAAf,GAAqC/H,KAAK,CAACkJ,MAAN,CAAarB,KAAlD;AACH;;AACD,WAAK4B,QAAL,CAAc;AAAEjK,QAAAA;AAAF,OAAd,EARkC,CASlC;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KA36CkB;;AAAA,SA66CnBwG,oBA76CmB,GA66CI,CAAC9C,QAAD,EAAWrE,OAAX,KAAuB;AAC1C,YAAMyO,cAAc,GAAG,KAAK1O,KAAL,CAAWJ,KAAX,CAAiB8O,cAAxC;;AACA,UAAIA,cAAc,KAAK,QAAvB,EAAiC;AAC7B,YAAIpK,QAAQ,KAAK,CAAjB,EAAoB;AAChB,eAAKqK,wBAAL;AACH,SAFD,MAEO,IAAIrK,QAAQ,KAAK,CAAjB,EAAoB;AACvB,eAAKsK,eAAL;AACH;AACJ,OAND,MAMO;AACH,cAAM9O,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAnC;AACA,cAAMqH,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAA9B;AACA,cAAM0H,YAAY,GAAG,KAAKlP,KAAL,CAAWe,cAAX,CAA0BoO,kBAA/C;AAEA,YAAI7H,iBAAiB,GAAG,EAAE,GAAG,KAAKtH,KAAL,CAAWiB;AAAhB,SAAxB;AACA,YAAImO,YAAY,GAAG,EAAnB;AACAA,QAAAA,YAAY,CAAC,gBAAD,CAAZ,GAAiC9H,iBAAiB,CAAC,gBAAD,CAAjB,CAAoCnD,KAArE;AACAiL,QAAAA,YAAY,CAAC,gBAAD,CAAZ,GAAiC9H,iBAAiB,CAAC,gBAAD,CAAjB,GAAsCA,iBAAiB,CAAC,gBAAD,CAAjB,CAAoCgC,KAA1E,GAAkF,CAAC,CAApH;AACA,cAAM+F,aAAa,GAAG/H,iBAAiB,CAAC,eAAD,CAAvC;AACA8H,QAAAA,YAAY,CAAC,eAAD,CAAZ,GAAgCC,aAAhC;AACAD,QAAAA,YAAY,CAAC,eAAD,CAAZ,GAAgC9R,uBAAuB,CAAC+R,aAAD,EAAgB,KAAKhP,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjC,CAAvD;AACAqN,QAAAA,YAAY,CAAC,iBAAD,CAAZ,GAAkC9H,iBAAiB,CAAC,iBAAD,CAAjB,GAAuCA,iBAAiB,CAAC,iBAAD,CAAjB,CAAqCgC,KAA5E,GAAoF,CAAC,CAAvH;AACA8F,QAAAA,YAAY,CAAC,iBAAD,CAAZ,GAAkC9H,iBAAiB,CAAC,iBAAD,CAAjB,GAAuCA,iBAAiB,CAAC,iBAAD,CAAjB,CAAqCnD,KAA5E,GAAoF,EAAtH;AACAiL,QAAAA,YAAY,CAAC,UAAD,CAAZ,GAA2B,EAA3B;AACA9H,QAAAA,iBAAiB,GAAG,EAAE,GAAGA,iBAAL;AAAwB,aAAG8H;AAA3B,SAApB;AAEA,cAAMtE,KAAK,GAAG3K,SAAS,CAAC8D,SAAV,CAAoB2F,CAAC,IAAIA,CAAC,CAACkD,IAAF,KAAWxF,iBAAiB,CAACwF,IAAtD,CAAd;;AACA,YAAIhC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ3K,UAAAA,SAAS,CAACmP,MAAV,CAAiBxE,KAAjB,EAAwB,CAAxB,EAA2BxD,iBAA3B;AACH;;AACD,YAAI4H,YAAY,KAAK,CAArB,EAAwB;AACpB,eAAK7O,KAAL,CAAWkP,wBAAX,CAAoCpP,SAApC,EAA+CmH,iBAA/C,EAAkE,KAAKjH,KAAL,CAAWJ,KAA7E;AACH,SAFD,MAGK,IAAIqH,iBAAiB,CAAC,cAAD,CAAjB,KAAsC,IAA1C,EAAgD;AACjD,eAAKjH,KAAL,CAAWkP,wBAAX,CAAoCpP,SAApC,EAA+CmH,iBAA/C,EAAkE,KAAKjH,KAAL,CAAWJ,KAA7E,EAAoF,IAApF;AACH,SAFI,MAEE;AACH,iBAAOqH,iBAAiB,CAACkI,YAAzB;AACA,gBAAMpN,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEpF,cADK;AAEfqF,YAAAA,IAAI,EAAE;AACFnC,cAAAA,SADE;AACSmH,cAAAA,iBAAiB,EAAEA,iBAD5B;AAC+CtC,cAAAA,aAAa,EAAE,KAD9D;AACqEyK,cAAAA,cAAc,EAAE,KADrF;AAEFxO,cAAAA,eAAe,EAAE+B,SAFf;AAE0B0M,cAAAA,eAAe,EAAE,IAF3C;AAEiDlI,cAAAA,IAFjD;AAEuDD,cAAAA,YAAY,EAAEC,IAAI,CAACF,iBAAiB,CAACwF,IAAnB;AAFzE;AAFS,WAAnB;AAOA,eAAKzM,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ;AAEJ,KA59CkB;;AAAA,SA2hDnBuF,oBA3hDmB,GA2hDI,CAAChD,QAAD,EAAWrE,OAAX,KAAuB;AAC1C,YAAMyO,cAAc,GAAG,KAAK1O,KAAL,CAAWJ,KAAX,CAAiB8O,cAAxC;;AACA,UAAIA,cAAc,KAAK,QAAvB,EAAiC;AAC7B,YAAIpK,QAAQ,KAAK,CAAjB,EAAoB;AAChB,eAAKgL,wBAAL;AACH,SAFD,MAEO,IAAIhL,QAAQ,KAAK,CAAjB,EAAoB;AACvB,eAAKiL,eAAL;AACH;AACJ,OAND,MAMO;AACH,cAAMzP,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAnC;AACA,cAAMqH,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAA9B;AACA,cAAM0H,YAAY,GAAG,KAAKlP,KAAL,CAAWe,cAAX,CAA0BoO,kBAA/C,CAHG,CAIH;AACA;;AACA,YAAI7H,iBAAiB,GAAG,EAAE,GAAG,KAAKtH,KAAL,CAAWiB;AAAhB,SAAxB;AACA,YAAImO,YAAY,GAAG,EAAnB;AAEAA,QAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuB9H,iBAAiB,CAAC,MAAD,CAAjB,GAA4BA,iBAAiB,CAAC,MAAD,CAA7C,GAAwD,EAA/E,CATG,CAUH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,cAAMuI,eAAe,GAAGtQ,wBAAwB,CAAC+H,iBAAD,EAC5C,KAAKjH,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QADF,EACY,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAD7B,EAE5C,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB6P,eAF2B,EAEV,IAFU,EAEJ,KAAK9P,KAAL,CAAWuB,kBAFP,EAE2B,KAAKvB,KAAL,CAAWgB,YAFtC,CAAhD;AAIAoO,QAAAA,YAAY,GAAG,EAAE,GAAGA,YAAL;AAAmB,aAAGS,eAAe,CAACE;AAAtC,SAAf;AAEA,YAAI3I,qBAAqB,GAAG,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBmH,qBAAjB,IAA0C,EAAtE;AACA,cAAM4I,MAAM,GAAG5I,qBAAqB,CAACnD,SAAtB,CAAgC2F,CAAC,IAAIA,CAAC,CAACkD,IAAF,KAAWsC,YAAY,CAACtC,IAA7D,CAAf;AACA,YAAIkD,MAAM,KAAK,CAAC,CAAhB,EACI5I,qBAAqB,CAAC4I,MAAD,CAArB,GAAgC,EAAE,GAAGZ,YAAY,CAAC,YAAD,CAAjB;AAAiC,aAAGA;AAApC,SAAhC,CA9BD,CAgCH;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA9H,QAAAA,iBAAiB,GAAG,EAAE,GAAG8H;AAAL,SAApB;AAEA,cAAMtE,KAAK,GAAG3K,SAAS,CAAC8D,SAAV,CAAoB2F,CAAC,IAAIA,CAAC,CAACkD,IAAF,KAAWxF,iBAAiB,CAACwF,IAAtD,CAAd;;AACA,YAAIhC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ3K,UAAAA,SAAS,CAACmP,MAAV,CAAiBxE,KAAjB,EAAwB,CAAxB,EAA2BxD,iBAA3B;AACH;;AACD,YAAI4H,YAAY,KAAK,CAArB,EAAwB;AACpB,eAAK7O,KAAL,CAAWkP,wBAAX,CAAoCpP,SAApC,EAA+CmH,iBAA/C,EAAkE,KAAKjH,KAAL,CAAWJ,KAA7E;AACH,SAFD,MAGK,IAAIqH,iBAAiB,CAAC,cAAD,CAAjB,KAAsC,IAA1C,EAAgD;AACjD,eAAKjH,KAAL,CAAWkP,wBAAX,CAAoCpP,SAApC,EAA+CmH,iBAA/C,EAAkE,KAAKjH,KAAL,CAAWJ,KAA7E,EAAoF,IAApF;AACH,SAFI,MAEE;AACH,iBAAOqH,iBAAiB,CAACkI,YAAzB;AACA,gBAAMpN,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEpF,cADK;AAEfqF,YAAAA,IAAI,EAAE;AACFnC,cAAAA,SADE;AAEFmH,cAAAA,iBAAiB,EAAEA,iBAFjB;AAGF3D,cAAAA,aAAa,EAAE,KAHb;AAGoB8L,cAAAA,cAAc,EAAE,KAHpC;AAIFxO,cAAAA,eAAe,EAAE,EAJf;AAImByO,cAAAA,eAAe,EAAE,IAJpC;AAKFlI,cAAAA,IALE;AAKID,cAAAA,YAAY,EAAEC,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CALtB;AAMFxI,cAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC,eAN1D;AAOF2C,cAAAA;AAPE;AAFS,WAAnB;AAYA,eAAK/G,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ;AAEJ,KAxsDkB;;AAAA,SA4iEnBtD,wBA5iEmB,GA4iEQ,CAACsD,UAAD,EAAajB,gBAAb,KAAkC;AACzD,YAAMoN,GAAG,GAAG,EAAZ;AACAA,MAAAA,GAAG,CAAC,2BAAD,CAAH,GAAmC,KAAKvO,KAAL,CAAWgB,YAAX,CAAwBwN,yBAA3D;AACAD,MAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,KAAKvO,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,CAA0CvD,KAArE;AACAiF,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAAnE;AACAH,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAtB;AACAA,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiB8B,QAAnC;AACAwM,MAAAA,GAAG,CAAC,qBAAD,CAAH,GAA6BnM,UAAU,CAACkF,iBAAX,CAA6B,qBAA7B,IACzBlF,UAAU,CAACkF,iBAAX,CAA6B,qBAA7B,CADyB,GAC6B,CAAC,CAD3D;AAEA,WAAKjH,KAAL,CAAWvB,wBAAX,CAAoCsD,UAApC,EAAgDmM,GAAhD,EAAqD,KAAKvO,KAAL,CAAWuB,kBAAhE,EACI,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBgQ,UADrB,EACiC9O,gBADjC,EACmD,KAAKd,KAAL,CAAWJ,KAAX,CAAiBiQ,YADpE;AAEH,KAvjEkB;;AAAA,SAyjEnBC,aAzjEmB,GAyjEFC,qBAAD,IAA2B;AACvC,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,EAAE,GAAGF;AAAL,OAAnB;AACAC,MAAAA,SAAS,CAAC,2BAAD,CAAT,GAAyC,KAAKrQ,KAAL,CAAWgB,YAAX,CAAwBwN,yBAAjE;AACA6B,MAAAA,SAAS,CAAC,mBAAD,CAAT,GAAiC,KAAKrQ,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,CAA0CvD,KAA3E;AACA+G,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiB8B,QAAzC;AACAsO,MAAAA,SAAS,CAAC,cAAD,CAAT,GAA4B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAAzE;AACA,WAAKrO,KAAL,CAAW7B,aAAX,CAAyB6R,SAAzB,EAAoCC,YAApC,EAAkD,KAAKjQ,KAAL,CAAWJ,KAAX,CAAiB8B,QAAnE,EAA6E,KAAK1B,KAAL,CAAWJ,KAAxF;AACH,KAjkEkB;;AAAA,SAokEnBtB,aApkEmB,GAokEH,CAACyR,qBAAD,EAAwB7O,kBAAxB,KAA+C;AAC3D,UAAI8O,SAAS,GAAG,EAAhB;AACA,UAAIC,YAAY,GAAG,EAAE,GAAGF;AAAL,OAAnB;AACA,YAAMN,eAAe,GAAG,KAAKzP,KAAL,CAAWJ,KAAX,CAAiB6P,eAAzC;AACA,YAAM/N,QAAQ,GAAG,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB8B,QAAlC;AACAsO,MAAAA,SAAS,CAAC,2BAAD,CAAT,GAAyC,KAAKrQ,KAAL,CAAWgB,YAAX,CAAwBwN,yBAAjE;AACA6B,MAAAA,SAAS,CAAC,mBAAD,CAAT,GAAiC,KAAKrQ,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,CAA0CvD,KAA3E;AACA+G,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiB8B,QAAzC;AACAsO,MAAAA,SAAS,CAAC,cAAD,CAAT,GAA4B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAAzE;AACA2B,MAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgD+L,eAA/E,CAT2D,CAU3D;;AAIA,UAAItP,eAAe,GAAG,KAAKjB,KAAL,CAAWiB,eAAjC;AACAA,MAAAA,eAAe,CAAC,qBAAD,CAAf,GAAyCqP,YAAY,CAAC,qBAAD,CAAZ,GACrCA,YAAY,CAAC,qBAAD,CADyB,GACC,CAAC,CAD3C;;AAEA,UAAI/O,kBAAJ,EAAwB;AACpBN,QAAAA,eAAe,CAAC,gBAAD,CAAf,GAAoC;AAAEqI,UAAAA,KAAK,EAAEgH,YAAY,CAAC,gBAAD,CAAZ,GAAiCA,YAAY,CAAC,gBAAD,CAA7C,GAAkE,CAAC,CAA5E;AAA+EnM,UAAAA,KAAK,EAAEmM,YAAY,CAAC,gBAAD,CAAZ,GAAiCA,YAAY,CAAC,gBAAD,CAA7C,GAAkE;AAAxJ,SAApC;AAEH;;AACDrP,MAAAA,eAAe,CAAC,MAAD,CAAf,GAA0BqP,YAAY,CAAC,MAAD,CAAtC;AACA,WAAKjQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,IACI,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QAA9C,CAAuDrB,GAAvD,CAA2DsB,GAAG,IAAI;AAC9D,eAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,iBAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC,gBAAIA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC,qBAAOhC,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AAC1C,oBAAIA,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpC1E,kBAAAA,eAAe,CAACqE,YAAY,CAACnB,KAAd,CAAf,GAAsCmM,YAAY,CAAC,UAAD,CAAZ,CAAyBhL,YAAY,CAACnB,KAAtC,IAClCmM,YAAY,CAAC,UAAD,CAAZ,CAAyBhL,YAAY,CAACnB,KAAtC,CADkC,GACa,EADnD;AAEH,iBAHD,MAIK,IAAImB,YAAY,CAACK,SAAb,KAA2B,MAA/B,EAAuC;AAExC1E,kBAAAA,eAAe,CAACqE,YAAY,CAACnB,KAAd,CAAf,GAAsCmM,YAAY,CAAC,UAAD,CAAZ,CAAyBhL,YAAY,CAACnB,KAAtC,IAClCxG,wBAAwB,CAACoE,QAAD,EAAWuO,YAAY,CAAC,UAAD,CAAZ,CAAyBhL,YAAY,CAACnB,KAAtC,CAAX,CADU,GACiD,EADvF;;AAGA,sBAAImB,YAAY,CAACkL,QAAjB,EAA2B;AACvBvP,oBAAAA,eAAe,CAAE,KAAIqE,YAAY,CAACnB,KAAM,EAAzB,CAAf,GAA6CmM,YAAY,CAAC,UAAD,CAAZ,CAA0B,KAAIhL,YAAY,CAACnB,KAAM,EAAjD,IACzCmM,YAAY,CAAC,UAAD,CAAZ,CAA0B,KAAIhL,YAAY,CAACnB,KAAM,EAAjD,CADyC,GAEzC2L,eAAe,GAAGA,eAAH,GAAqB,CAAC,CAFzC;AAGH;AACJ,iBAVI,MAWA;AACD7O,kBAAAA,eAAe,CAACqE,YAAY,CAACnB,KAAd,CAAf,GAAsCmM,YAAY,CAAC,UAAD,CAAZ,CAAyBhL,YAAY,CAACnB,KAAtC,IAClCmM,YAAY,CAAC,UAAD,CAAZ,CAAyBhL,YAAY,CAACnB,KAAtC,CADkC,GACa,EADnD;AAEH;;AACD,uBAAO,IAAP;AACH,eArBM,CAAP;AAsBH,aAvBD,MAwBK;AACD,kBAAIzC,SAAS,CAACiE,SAAV,KAAwB,OAA5B,EAAqC;AACjC1E,gBAAAA,eAAe,CAACS,SAAS,CAACyC,KAAX,CAAf,GAAmCmM,YAAY,CAAC,UAAD,CAAZ,CAAyB5O,SAAS,CAACyC,KAAnC,IAC/BmM,YAAY,CAAC,UAAD,CAAZ,CAAyB5O,SAAS,CAACyC,KAAnC,CAD+B,GACa,CAAC,CADjD;AAEH,eAHD,MAIK,IAAIzC,SAAS,CAACiE,SAAV,KAAwB,MAA5B,EAAoC;AAErC1E,gBAAAA,eAAe,CAACS,SAAS,CAACyC,KAAX,CAAf,GAAmCmM,YAAY,CAAC,UAAD,CAAZ,CAAyB5O,SAAS,CAACyC,KAAnC,IAC/BxG,wBAAwB,CAACoE,QAAD,EAAWuO,YAAY,CAAC,UAAD,CAAZ,CAAyB5O,SAAS,CAACyC,KAAnC,CAAX,CADO,GACiD,EADpF;;AAGA,oBAAIzC,SAAS,CAAC8O,QAAd,EAAwB;AACpBvP,kBAAAA,eAAe,CAAE,KAAIS,SAAS,CAACyC,KAAM,EAAtB,CAAf,GAA0CmM,YAAY,CAAC,UAAD,CAAZ,CAA0B,KAAI5O,SAAS,CAACyC,KAAM,EAA9C,IACtCmM,YAAY,CAAC,UAAD,CAAZ,CAA0B,KAAI5O,SAAS,CAACyC,KAAM,EAA9C,CADsC,GAEtC2L,eAAe,GAAGA,eAAH,GAAqB,CAAC,CAFzC;AAGH;AACJ,eAVI,MAWA;AACD7O,gBAAAA,eAAe,CAACS,SAAS,CAACyC,KAAX,CAAf,GAAmCmM,YAAY,CAAC,UAAD,CAAZ,CAAyB5O,SAAS,CAACyC,KAAnC,IAC/BmM,YAAY,CAAC,UAAD,CAAZ,CAAyB5O,SAAS,CAACyC,KAAnC,CAD+B,GACa,EADhD;AAEH;;AACD,qBAAOlD,eAAP;AACH;AACJ,WA/CM,CAAP;AAiDH,SAlDM,CAAP;AAmDH,OApDD,CADJ,CAtB2D,CA6E3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKZ,KAAL,CAAW1B,aAAX,CAAyB0R,SAAzB,EAAoCpP,eAApC,EACI,KAAKZ,KAAL,CAAWJ,KAAX,CAAiB8B,QADrB,EAC+BR,kBAD/B,EACmD,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBqL,kBADpE,EAEI,KAAKtL,KAAL,CAAWe,cAFf;AAGH,KA/pEkB;;AAAA,SAiqEnB0P,eAjqEmB,GAiqEAhP,KAAD,IAAW;AACzB,YAAMgC,QAAQ,GAAGhC,KAAjB;AACA,YAAMiP,KAAK,GAAC,KAAKrQ,KAAL,CAAWJ,KAAX,CAAiBE,SAA7B;AACA,YAAMA,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAnC;AACA,UAAIiH,qBAAqB,GAAG,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBmH,qBAA7C;AACA,YAAMI,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAA9B;AACA,UAAID,YAAY,GAAG,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBsH,YAApC;AAEA,YAAMuD,KAAK,GAAG4F,KAAK,CAACzM,SAAN,CAAgB2F,CAAC,IAAIA,CAAC,CAACkD,IAAF,KAAWrJ,QAAQ,CAACqJ,IAAzC,CAAd;AACA,YAAM6D,cAAc,GAAGvJ,qBAAqB,CAACnD,SAAtB,CAAgC2F,CAAC,IAAIA,CAAC,CAACkD,IAAF,KAAWrJ,QAAQ,CAACqJ,IAAzD,CAAvB;AACA,UAAI1K,UAAU,GAAE,EAAhB;AACA,UAAKwO,OAAO,GAACF,KAAK,CAAC9J,MAAN,GAAa,CAA1B;;AACA,UAAI8J,KAAK,CAAC9J,MAAN,KAAiBnD,QAAQ,CAACqJ,IAA9B,EAAoC;AAChC1F,QAAAA,qBAAqB,GAAG,EAAxB,CADgC,CAElC;;AACEI,QAAAA,IAAI,IAAIA,IAAI,CAAC/D,QAAQ,CAACqJ,IAAV,CAAZ,IAA+B,OAAOtF,IAAI,CAAC/D,QAAQ,CAACqJ,IAAV,CAA1C;AACA,cAAM+D,OAAO,GAAGH,KAAK,CAACpB,MAAN,CAAa,CAAb,EAAgBxE,KAAhB,CAAhB;AACA,cAAMgG,SAAS,GAAGJ,KAAK,CAACpB,MAAN,CAAaxE,KAAb,EAAqB4F,KAAK,CAAC9J,MAA3B,CAAlB;AAGAiK,QAAAA,OAAO,CAAChN,GAAR,CAAY+F,CAAC,IAAI;AACbpC,UAAAA,IAAI,CAACoJ,OAAD,CAAJ,GAAgBpJ,IAAI,IAAIA,IAAI,CAACoC,CAAC,CAACkD,IAAH,CAA5B;AACAlD,UAAAA,CAAC,CAACkD,IAAF,GAAS8D,OAAT;AACAA,UAAAA,OAAO,GAAGA,OAAO,GAAG,CAApB;AACA,iBAAO,IAAP;AACH,SALD;AAQJ,cAAQG,UAAU,GAAG,CAAC,GAAGF,OAAJ,EAAa,GAAGC,SAAhB,CAArB;AAEAC,QAAAA,UAAU,CAAClN,GAAX,CAAe+F,CAAC,IAAI;AACZxC,UAAAA,qBAAqB,CAACxB,IAAtB,CAA2B,EAAE,GAAGgE,CAAC,CAACoH,UAAP;AAAmB,eAAGpH;AAAtB,WAA3B;AAEH,SAHL;AAII/L,QAAAA,WAAW,CAACuJ,qBAAD,EAAuB,MAAvB,EAA8B,MAA9B,CAAX;AACAG,QAAAA,YAAY,GAAGC,IAAI,IAAIkF,MAAM,CAACC,IAAP,CAAYnF,IAAZ,EAAkBZ,MAAlB,GAA2B,CAAnC,IAAwCY,IAAI,CAACuJ,UAAU,CAAC,CAAD,CAAV,CAAcjE,IAAf,CAA3D;AACC1K,QAAAA,UAAU,GAAG;AACVC,UAAAA,QAAQ,EAAEpF,cADA;AAEVqF,UAAAA,IAAI,EAAE;AAAEyO,YAAAA,UAAF;AAAczJ,YAAAA,iBAAiB,EAAEyJ,UAAU,CAAC,CAAD,CAA3C;AAAgDvJ,YAAAA,IAAhD;AAAsDD,YAAAA,YAAtD;AAAoEH,YAAAA;AAApE;AAFI,SAAb;AAKJ,OA7BD,MA6BO;AACH,YAAI0D,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ3K,UAAAA,SAAS,CAACmP,MAAV,CAAiBxE,KAAjB,EAAwB,CAAxB;AACH;;AACD,YAAI6F,cAAc,GAAG,CAAC,CAAtB,EAAyB;AACrBvJ,UAAAA,qBAAqB,CAACkI,MAAtB,CAA6BqB,cAA7B,EAA6C,CAA7C;AACH;;AACDnJ,QAAAA,IAAI,IAAIA,IAAI,CAAC/D,QAAQ,CAACqJ,IAAV,CAAZ,IAA+B,OAAOtF,IAAI,CAAC/D,QAAQ,CAACqJ,IAAV,CAA1C;AACAvF,QAAAA,YAAY,GAAGC,IAAI,IAAIkF,MAAM,CAACC,IAAP,CAAYnF,IAAZ,EAAkBZ,MAAlB,GAA2B,CAAnC,IAAwCY,IAAI,CAACrH,SAAS,CAAC,CAAD,CAAT,CAAa2M,IAAd,CAA3D;AACC1K,QAAAA,UAAU,GAAG;AACVC,UAAAA,QAAQ,EAAEpF,cADA;AAEVqF,UAAAA,IAAI,EAAE;AAAEnC,YAAAA,SAAF;AAAamH,YAAAA,iBAAiB,EAAEnH,SAAS,CAAC,CAAD,CAAzC;AAA8CqH,YAAAA,IAA9C;AAAoDD,YAAAA,YAApD;AAAkEH,YAAAA;AAAlE;AAFI,SAAb;AAIJ;;AAID,WAAK/G,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KA5tEkB;;AAAA,SA8tEnB6O,UA9tEmB,GA8tELxP,KAAD,IAAW;AACpB,YAAMgC,QAAQ,GAAGhC,KAAjB;AACA,UAAI8F,YAAY,GAAG,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBsH,YAApC;AACA,UAAID,iBAAiB,GAAG,KAAKjH,KAAL,CAAWJ,KAAX,CAAiBqH,iBAAzC;AACA,YAAME,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAA9B;AACA,YAAMsD,KAAK,GAAGvD,YAAY,CAACtD,SAAb,CAAuB2F,CAAC,IAAIA,CAAC,CAACsH,kBAAF,KAAyBzN,QAAQ,CAACyN,kBAA9D,CAAd;;AACA,UAAIpG,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZvD,QAAAA,YAAY,CAAC+H,MAAb,CAAoBxE,KAApB,EAA2B,CAA3B;AACH;;AACDtD,MAAAA,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAJ,GAA+BvF,YAA/B;AAEA,YAAMnF,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AAAEkF,UAAAA,IAAF;AAAQD,UAAAA;AAAR;AAFS,OAAnB;AAIA,WAAKlH,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KA9uEkB;;AAAA,SAgvEnBsF,eAhvEmB,GAgvED,CAAC/C,QAAD,EAAWrE,OAAX,KAAuB;AACrC,UAAIa,gBAAgB,GAAG,KAAKd,KAAL,CAAWJ,KAAX,CAAiBkB,gBAAjB,CAAkC,oBAAlC,CAAvB;AACA,UAAIgQ,iBAAiB,GAAG,EAAxB;AAEA,UAAI/O,UAAU,GAAG,EAAjB;AACA,UAAIkF,iBAAiB,GAAG,KAAKjH,KAAL,CAAWJ,KAAX,CAAiBqH,iBAAzC;AAEA,UAAIE,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,IAAyB,EAApC;;AACA,UAAI,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,GACA,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cADhD,GACiE,KADrE,EAC4E;AACxEtL,QAAAA,gBAAgB,CAAC0C,GAAjB,CAAsBsC,IAAD,IAAU;AAC3BA,UAAAA,IAAI,CAACA,IAAL,CAAU,MAAV,IAAoBmB,iBAAiB,CAACwF,IAAtC;AACA,iBAAOqE,iBAAiB,CAACvL,IAAlB,CAAuBO,IAAI,CAACA,IAA5B,CAAP;AACH,SAHD;AAIA,cAAMiL,SAAS,GAAG5J,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAJ,GAA+BtF,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAnC,GAA8D,EAAhF,CALwE,CAMxE;;AACAtF,QAAAA,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAJ,GAA+B,CAAC,GAAGsE,SAAJ,EAAe,GAAGD,iBAAlB,CAA/B;AAEA/O,QAAAA,UAAU,GAAG;AACTC,UAAAA,QAAQ,EAAEpF,cADD;AAETqF,UAAAA,IAAI,EAAE;AAAEiF,YAAAA,YAAY,EAAEC,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAApB;AAA8CtF,YAAAA,IAAI,EAAEA,IAApD;AAA0DrG,YAAAA,gBAAgB,EAAE,EAA5E;AAAgF0E,YAAAA,QAAQ,EAAE,KAA1F;AAAiG6J,YAAAA,eAAe,EAAE;AAAlH;AAFG,SAAb;AAIH,OAdD,MAcO;AACHpI,QAAAA,iBAAiB,GAAG;AAChBpC,UAAAA,QAAQ,EAAE;AAAEmM,YAAAA,UAAU,EAAE;AAAd,WADM;AAEhBvE,UAAAA,IAAI,EAAE;AAFU,SAApB;AAIA3L,QAAAA,gBAAgB,CAAC0C,GAAjB,CAAsBsC,IAAD,IAAU;AAC3BA,UAAAA,IAAI,CAACA,IAAL,CAAU,MAAV,IAAoBmB,iBAAiB,CAACwF,IAAtC;AACA,iBAAOqE,iBAAiB,CAACvL,IAAlB,CAAuBO,IAAI,CAACA,IAA5B,CAAP;AACH,SAHD;AAIA,cAAMhG,SAAS,GAAG,CAACmH,iBAAD,CAAlB;AACA,cAAM8J,SAAS,GAAG5J,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAJ,GAA+BtF,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAnC,GAA8D,EAAhF,CAVG,CAWH;;AACAtF,QAAAA,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAAJ,GAA+B,CAAC,GAAGsE,SAAJ,EAAe,GAAGD,iBAAlB,CAA/B;AACA/O,QAAAA,UAAU,GAAG;AACTC,UAAAA,QAAQ,EAAEpF,cADD;AAETqF,UAAAA,IAAI,EAAE;AACFgF,YAAAA,iBADE;AAEFnH,YAAAA,SAFE;AAGFoH,YAAAA,YAAY,EAAEC,IAAI,CAACF,iBAAiB,CAACwF,IAAnB,CAHhB;AAIFtF,YAAAA,IAAI,EAAEA,IAJJ;AAIUrG,YAAAA,gBAAgB,EAAE,EAJ5B;AAIgC0E,YAAAA,QAAQ,EAAE,KAJ1C;AAKF6J,YAAAA,eAAe,EAAE,IALf;AAMApL,YAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,GACV,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC,eADtC,GACwD;AAPpE;AAFG,SAAb;AAYH;;AACD,WAAKpE,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KAjyEkB;;AAAA,SAmyEnBkP,wBAnyEmB,GAmyES7P,KAAD,IAAW;AAClC,WAAKyJ,QAAL,CAAc;AACVqG,QAAAA,kBAAkB,EAAE9P,KAAK,CAAC+P;AADhB,OAAd;AAGH,KAvyEkB;;AAAA,SAyyEnBC,mBAzyEmB,GAyyEIhQ,KAAD,IAAW;AAC7B,WAAKyJ,QAAL,CAAc;AACVzK,QAAAA,aAAa,EAAEgB,KAAK,CAAC+P;AADX,OAAd;AAGH,KA7yEkB;;AAAA,SA+yEnBE,wBA/yEmB,GA+yESjQ,KAAD,IAAW;AAClC,WAAKyJ,QAAL,CAAc;AACVpK,QAAAA,kBAAkB,EAAEW,KAAK,CAAC+P;AADhB,OAAd;AAGH,KAnzEkB;;AAAA,SAqzEnB9S,YArzEmB,GAqzEH6C,kBAAD,IAAwB;AACnC,UAAIgN,GAAG,GAAG,EAAV;;AACA,UAAI,KAAKvO,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,KAA8C7J,SAA9C,IACG,KAAKhD,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,KAA8C,EADrD,EACyD;AACrD0B,QAAAA,GAAG,CAAC,2BAAD,CAAH,GAAmC,KAAKvO,KAAL,CAAWgB,YAAX,CAAwBwN,yBAA3D;AACAD,QAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,KAAKvO,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,CAA0CvD,KAArE;AACAiF,QAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAAnE;AACAH,QAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAtB;AACAA,QAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiB8B,QAAnC;AACA,YAAIO,IAAI,GAAG,KAAKtC,KAAL,CAAWoB,wBAAX,IAAuC,EAAlD;AACA,cAAMC,8BAA8B,GAAG,KAAKrB,KAAL,CAAWqB,8BAAX,IAA6C,EAApF;AACA,cAAMK,SAAS,GAAG,CAAC,GAAGY,IAAJ,EAAU,GAAGjB,8BAAb,CAAlB;AACA,cAAMsQ,MAAM,GAAG,KAAKtR,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,IACR,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QADrD;;AAEA,YAAIxD,SAAS,CAACkF,MAAV,KAAqB,CAAzB,EAA4B;AACxB,cAAI+K,MAAM,KAAK3O,SAAf,EAA0B;AACtB2O,YAAAA,MAAM,CAAC9N,GAAP,CAAWsB,GAAG,IAAI;AACd,qBAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,uBAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC,yBAAOA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,IACHhC,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AACnC,wBAAIA,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpCrD,sBAAAA,IAAI,CAACsD,IAAL,CAAUN,YAAV;AACH,qBAFD,MAEO;AACHjE,sBAAAA,8BAA8B,CAACuE,IAA/B,CAAoCN,YAApC;AACH;;AACD,2BAAO,IAAP;AACH,mBAPD,CADG,GASD5D,SAAS,CAACiE,SAAV,KAAwB,OAAxB,GAAkCrD,IAAI,CAACsD,IAAL,CAAUlE,SAAV,CAAlC,GACEL,8BAA8B,CAACuE,IAA/B,CAAoClE,SAApC,CAVR;AAWH,iBAZM,CAAP;AAaH,eAdM,CAAP;AAeH,aAhBD;AAiBA,kBAAMN,wBAAwB,GAAGkB,IAAjC;AACA,gBAAI+F,eAAe,GAAG,EAAtB;AACA/F,YAAAA,IAAI,CAACuB,GAAL,CAASsG,UAAU,IAAI;AACnB,oBAAMC,GAAG,GAAG/M,UAAU,CAACiF,IAAD,EAAO6H,UAAP,EAAmB9B,eAAnB,EAAoC,IAApC,CAAtB;AACA/F,cAAAA,IAAI,GAAG8H,GAAG,CAAC9H,IAAX;AACA+F,cAAAA,eAAe,GAAG+B,GAAG,CAAC/B,eAAtB;AACA,qBAAO,IAAP;AACH,aALD;AAOA,iBAAKhI,KAAL,CAAW3B,YAAX,CAAwB,KAAK2B,KAAL,CAAWJ,KAAX,CAAiBsE,UAAzC,EACI,KAAKlE,KAAL,CAAWJ,KAAX,CAAiB8B,QADrB,EAC+BO,IAD/B,EACqC,KAAKtC,KAAL,CAAWiB,eADhD,EAEIoH,eAFJ,EAEqBjH,wBAFrB,EAGIC,8BAHJ,EAGoCE,kBAHpC,EAIIgN,GAJJ,EAIS,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBE,SAJ1B,EAIqC,IAJrC,EAI2C,KAAKE,KAAL,CAAWJ,KAAX,CAAiBqL,kBAJ5D,EAKI,KAAKtL,KAAL,CAAWe,cALf,EA3BsB,CAkCtB;AACH;AACJ,SArCD,MAqCO;AACH,eAAKV,KAAL,CAAW3B,YAAX,CAAwB,KAAK2B,KAAL,CAAWJ,KAAX,CAAiBsE,UAAzC,EACI,KAAKlE,KAAL,CAAWJ,KAAX,CAAiB8B,QADrB,EAC+BO,IAD/B,EACqC,KAAKtC,KAAL,CAAWiB,eADhD,EAEI,KAAKjB,KAAL,CAAWsB,yBAFf,EAE0C,KAAKtB,KAAL,CAAWoB,wBAFrD,EAGI,KAAKpB,KAAL,CAAWqB,8BAHf,EAG+CE,kBAH/C,EAGmEgN,GAHnE,EAII,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBE,SAJrB,EAIgC,KAJhC,EAIuC,KAAKE,KAAL,CAAWJ,KAAX,CAAiBqL,kBAJxD,EAKI,KAAKtL,KAAL,CAAWe,cALf;AAMH;AACJ,OAzDD,MAyDO;AACH/D,QAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK9C,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KAp3EkB;;AAAA,SAs3EnBsE,WAt3EmB,GAs3EL,CAACjD,QAAD,EAAWrE,OAAX,KAAuB;AACjC,UAAIwN,SAAS,GAAG,KAAKzN,KAAL,CAAWJ,KAAX,CAAiB6N,SAAjC;;AACA,UAAI,KAAKzN,KAAL,CAAWJ,KAAX,CAAiBqE,UAAjB,KAAgC,WAApC,EAAiD;AAC7C,YAAIwJ,SAAS,KAAK,QAAlB,EAA4B;AACxB,eAAK8D,oBAAL,CAA0BjN,QAA1B,EAAoCrE,OAApC,EAA6CwN,SAA7C;AACH,SAFD,MAGK;AACD,cAAIA,SAAS,KAAK,QAAlB,EAA4B;AACxB,iBAAKlP,kBAAL,CAAwB,IAAxB;AACH;AACJ;AACJ,OATD,MASO;AACH,YAAIkP,SAAS,KAAK,QAAlB,EAA4B;AACxB,eAAK8D,oBAAL,CAA0BjN,QAA1B,EAAoCrE,OAApC,EAA6CwN,SAA7C;AACH,SAFD,MAGK;AACD,cAAIA,SAAS,KAAK,QAAlB,EAA4B;AACxB,iBAAK5O,2BAAL,CAAiC,IAAjC;AACH;AACJ;AACJ;AAEJ,KA54EkB;;AAAA,SA8oFnBqM,oBA9oFmB,GA8oFI,CAACjC,KAAD,EAAQE,IAAR,KAAiB;AACpC,UAAIzI,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAhC;AACAA,MAAAA,cAAc,CAACyI,IAAD,CAAd,GAAuBF,KAAvB;AACA,WAAK4B,QAAL,CAAc;AAAEnK,QAAAA;AAAF,OAAd;AACH,KAlpFkB;;AAAA,SAopFnB8Q,aAppFmB,GAopFH,CAACvI,KAAD,EAAQrB,OAAR,KAAoB;AAChC,UAAIlH,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAhC;;AACA,UAAIA,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAlB,EAAmC;AAC/B,YAAI8D,OAAO,CAACwD,GAAZ,EAAiB;AACb,cAAI,EAAE1K,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,GAAgCuH,UAAU,CAACzD,OAAO,CAACwD,GAAT,CAA5C,CAAJ,EAAgE;AAC5D1K,YAAAA,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,GAAgC8D,OAAO,CAAC0D,SAAR,GAAoBD,UAAU,CAACzD,OAAO,CAACwD,GAAT,CAA9B,GAA8C5K,QAAQ,CAACoH,OAAO,CAACwD,GAAT,CAAtF;AACH;AACJ;;AACD,YAAIxD,OAAO,CAAC2D,GAAZ,EAAiB;AACb,cAAI,EAAE7K,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,GAAgCuH,UAAU,CAACzD,OAAO,CAAC2D,GAAT,CAA5C,CAAJ,EAAgE;AAC5D7K,YAAAA,cAAc,CAACkH,OAAO,CAAC9D,KAAT,CAAd,GAAgC8D,OAAO,CAAC0D,SAAR,GAAoBD,UAAU,CAACzD,OAAO,CAAC2D,GAAT,CAA9B,GAA8C/K,QAAQ,CAACoH,OAAO,CAAC2D,GAAT,CAAtF;AACH;AACJ;AAGJ;;AACD,WAAKV,QAAL,CAAc;AAAEnK,QAAAA;AAAF,OAAd;AACH,KArqFkB;;AAEf,SAAK+Q,KAAL,GAAavV,KAAK,CAACgE,SAAN,EAAb;AACA,SAAKwR,iBAAL,GAAyB,KAAK1R,KAAL,CAAW0R,iBAApC;AACA,SAAK3K,qBAAL,GAA6B,EAA7B;AACA,SAAK4K,mBAAL,GAA2B,CACvB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,gBAA1C;AAA4D3K,MAAAA,KAAK,EAAE;AAAnE,KADuB,EAEvB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,eAA9C;AAA+DA,MAAAA,KAAK,EAAE;AAAtE,KAFuB,EAGvB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,WAA1C;AAAuDA,MAAAA,KAAK,EAAE;AAA9D,KAHuB,CAA3B;AAKA,SAAK4K,cAAL,GAAsBC,IAAI,CAACC,KAAL,CAAW,KAAK9R,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B6N,aAA5B,CAA0ClN,QAA1C,CAAmDoE,KAA9D,CAAtB;AAEH;;AAmB8B,SAAxB+I,wBAAwB,CAAChS,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYuN,YAAZ,KAA6B,EAA7B,IAAmCnN,KAAK,CAACJ,KAAN,CAAYuN,YAAZ,KAA6BxN,KAAK,CAACwN,YAA1E,EAAwF;AACpFxQ,MAAAA,KAAK,CAACmG,IAAN,CAAW9C,KAAK,CAACJ,KAAN,CAAYuN,YAAvB;AACAnN,MAAAA,KAAK,CAACJ,KAAN,CAAYuN,YAAZ,GAA2B,EAA3B;AACH;;AAED,WAAO,IAAP;AACH;;AA4gCD8E,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI/E,YAAY,GAAG,KAAKnN,KAAL,CAAWmN,YAA9B,CAD8B,CAE9B;;AACA,QAAIgF,KAAK,GAAG,KAAZ;;AACA,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,KAAoC,KAAKgR,iBAAL,CAAuB9R,KAAvB,CAA6Bc,cAArE,EAAqF;AACjF,WAAKmK,QAAL,CAAc;AAAEnK,QAAAA,cAAc,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAAnC,OAAd;AACAyR,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBe,YAAjB,KAAkC,KAAK+Q,iBAAL,CAAuB9R,KAAvB,CAA6Be,YAAnE,EAAiF;AAE7E,YAAMO,kBAAkB,GAAG,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBe,YAAjB,CAA8B,mBAA9B,KACvB,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,YAAjB,CAA8B,mBAA9B,EAAmDmF,IAAnD,CAAwDgB,kBAAxD,KAA+E,CADxD,GAC4D,IAD5D,GACmE,KAD9F;AAIA,WAAKC,qBAAL,GAA6B,EAA7B;;AACA,UAAI7F,kBAAJ,EAAwB;AACpB,aAAK6F,qBAAL,GAA6B,CACzB;AAAE,qBAAW,cAAb;AAA6B,uBAAa,gBAA1C;AAA4DC,UAAAA,KAAK,EAAE;AAAnE,SADyB,CAA7B;AAGH;;AAED,WAAKhH,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,IACI,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QAA9C,CAAuDrB,GAAvD,CAA2DsB,GAAG,IAAI;AAC9D,eAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,iBAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC;AACA,gBAAIA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtChC,cAAAA,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AACnC,oBAAIA,YAAY,CAACC,SAAb,KAA2B,IAA/B,EAAqC;AACjC;AACA,uBAAK6B,qBAAL,CAA2BxB,IAA3B,CAAgC;AAAE,iCAAa,IAAf;AAAqB,+BAAWN,YAAY,CAACnB,KAA7C;AAAoD,iCAAamB,YAAY,CAACnB,KAA9E;AAAqFkD,oBAAAA,KAAK,EAAE;AAA5F,mBAAhC;AACH;;AACD,uBAAO,KAAKD,qBAAZ;AACH,eAND;AAOH,aARD,MAQO;AACH,kBAAI1F,SAAS,CAAC6D,SAAd,EACI,KAAK6B,qBAAL,CAA2BxB,IAA3B,CAAgC;AAAE,6BAAa,IAAf;AAAqB,2BAAWlE,SAAS,CAACyC,KAA1C;AAAiD,6BAAazC,SAAS,CAACyC,KAAxE;AAA+EkD,gBAAAA,KAAK,EAAE;AAAtF,eAAhC;AAEJ,qBAAO,KAAKD,qBAAZ;AACH,aAfmC,CAgBpC;AACA;AACA;;AACH,WAnBM,CAAP;AAqBH,SAtBM,CAAP;AAuBH,OAxBD,CADJ;AA2BA,WAAK8D,QAAL,CAAc;AACVlK,QAAAA,YAAY,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,YADrB;AAEVO,QAAAA;AAFU,OAAd;AAIAiR,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBkB,gBAAjB,KAAsC,KAAK4Q,iBAAL,CAAuB9R,KAAvB,CAA6BkB,gBAAvE,EAAyF;AACrF,WAAK+J,QAAL,CAAc;AAAE/J,QAAAA,gBAAgB,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiBkB;AAArC,OAAd;AACAqR,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBgB,eAAjB,KAAqC,KAAK8Q,iBAAL,CAAuB9R,KAAvB,CAA6BgB,eAAtE,EAAuF;AACnF,WAAKiK,QAAL,CAAc;AAAEjK,QAAAA,eAAe,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB;AAApC,OAAd;AACAuR,MAAAA,KAAK,GAAG,IAAR;AACH;;AAED,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBsB,kBAAjB,KAAwC,KAAKwQ,iBAAL,CAAuB9R,KAAvB,CAA6BsB,kBAAzE,EAA6F;AACzF,WAAK2J,QAAL,CAAc;AAAE3J,QAAAA,kBAAkB,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsB;AAAvC,OAAd;AACAiR,MAAAA,KAAK,GAAG,IAAR;AACH;;AAED,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBoB,8BAAjB,KAAoD,KAAK0Q,iBAAL,CAAuB9R,KAAvB,CAA6BoB,8BAArF,EAAqH;AACjH,WAAK6J,QAAL,CAAc;AAAE7J,QAAAA,8BAA8B,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB;AAAnD,OAAd;AACAmR,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBmB,wBAAjB,KAA8C,KAAK2Q,iBAAL,CAAuB9R,KAAvB,CAA6BmB,wBAA/E,EAAyG;AACrG,WAAK8J,QAAL,CAAc;AAAE9J,QAAAA,wBAAwB,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB;AAA7C,OAAd;AACAoR,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAI,KAAKnS,KAAL,CAAWJ,KAAX,CAAiBqB,yBAAjB,KAA+C,KAAKyQ,iBAAL,CAAuB9R,KAAvB,CAA6BqB,yBAAhF,EAA2G;AACvG,WAAK4J,QAAL,CAAc;AAAE5J,QAAAA,yBAAyB,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBqB;AAA9C,OAAd;AACAkR,MAAAA,KAAK,GAAG,IAAR;AACH;;AAID,QAAIA,KAAJ,EAAW;AACP,WAAKT,iBAAL,GAAyBQ,aAAzB;AACH;;AACD,QAAI/E,YAAY,KAAK,EAAjB,IAAuBA,YAAY,KAAKxK,SAA5C,EAAuD;AACnDhG,MAAAA,KAAK,CAACmG,IAAN,CAAWqK,YAAX;AACA,YAAMpL,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AAAEkL,UAAAA,YAAY,EAAE;AAAhB;AAFS,OAAnB;AAIA,WAAKnN,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACAoL,MAAAA,YAAY,GAAG,EAAf;AACH;;AACD,QAAI,KAAKnN,KAAL,CAAWoS,UAAX,KAA0B,KAAKzS,KAAL,CAAW0S,QAAzC,EAAmD;AAC/CC,MAAAA,UAAU,CAAC,MAAM;AACb,YAAIC,SAAS,GAAG,KAAKvS,KAAL,CAAWwS,UAAX,IAAyB,KAAKxS,KAAL,CAAWwS,UAAX,CAAsBvP,EAA/C,GAAoDwP,QAAQ,CAACC,cAAT,CAAwB,KAAK1S,KAAL,CAAWwS,UAAX,CAAsBvP,EAA9C,CAApD,GAAwG,IAAxH;;AACA,YAAI,KAAKwO,KAAL,IAAc,KAAKA,KAAL,CAAWkB,OAA7B,EAAsC;AAClC,eAAKlB,KAAL,CAAWkB,OAAX,CAAmBC,cAAnB,CAAkC;AAAEC,YAAAA,QAAQ,EAAE;AAAZ,WAAlC;AACH;;AACD,YAAIN,SAAJ,EAAe;AACXA,UAAAA,SAAS,CAACK,cAAV,CAAyB;AAAEC,YAAAA,QAAQ,EAAE;AAAZ,WAAzB;AACH;AACJ,OARS,EAQP,GARO,CAAV;AASA,WAAKhI,QAAL,CAAc;AACVwH,QAAAA,QAAQ,EAAE,KAAKrS,KAAL,CAAWoS;AADX,OAAd;AAGH;AACJ;;AA+TDzD,EAAAA,wBAAwB,GAAG;AACvB,UAAME,YAAY,GAAG,KAAKlP,KAAL,CAAWe,cAAX,CAA0BoO,kBAA/C;AACA,QAAIC,YAAY,GAAG,KAAKpP,KAAL,CAAWiB,eAA9B;AACA,WAAOmO,YAAY,CAACI,YAApB;;AACA,QAAIN,YAAY,KAAK,CAArB,EAAwB;AACpB,WAAK7O,KAAL,CAAW8S,aAAX,CAAyB/D,YAAzB,EAAuC,KAAK/O,KAAL,CAAWJ,KAAlD,EAAyD,CAAzD;AACH,KAFD,MAEO;AACH,YAAME,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,IAA8B,EAAhD;AACA,UAAIiT,aAAa,GAAG,EAAE,GAAGhE;AAAL,OAApB;AACAgE,MAAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,KAAK/S,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,GAA6BuM,MAAM,CAACC,IAAP,CAAY,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBE,SAA7B,EAAwCyG,MAAxC,GAAiD,CAA9E,GAAkF,CAA1G;AACAwM,MAAAA,aAAa,CAAC,gBAAD,CAAb,GAAkChE,YAAY,CAAC,gBAAD,CAAZ,CAA+BjL,KAAjE;AACAiP,MAAAA,aAAa,CAAC,gBAAD,CAAb,GAAkChE,YAAY,CAAC,gBAAD,CAAZ,GAAiCA,YAAY,CAAC,gBAAD,CAAZ,CAA+B9F,KAAhE,GAAwE,CAAC,CAA3G;AACA,YAAM+F,aAAa,GAAGD,YAAY,CAAC,eAAD,CAAlC;AACAgE,MAAAA,aAAa,CAAC,eAAD,CAAb,GAAiC/D,aAAjC;AACA+D,MAAAA,aAAa,CAAC,eAAD,CAAb,GAAiC9V,uBAAuB,CAAC+R,aAAD,EAAgB,KAAKhP,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjC,CAAxD;AACAqR,MAAAA,aAAa,CAAC,mBAAD,CAAb,GAAqChE,YAAY,CAAC,mBAAD,CAAZ,GAAoCA,YAAY,CAAC,mBAAD,CAAhD,GAAwE,CAAC,CAA9G;AACAgE,MAAAA,aAAa,CAAC,iBAAD,CAAb,GAAmChE,YAAY,CAAC,iBAAD,CAAZ,GAAkCA,YAAY,CAAC,iBAAD,CAAZ,CAAgC9F,KAAlE,GAA0E,CAAC,CAA9G;AACA8J,MAAAA,aAAa,CAAC,iBAAD,CAAb,GAAmChE,YAAY,CAAC,iBAAD,CAAZ,GAAkCA,YAAY,CAAC,iBAAD,CAAZ,CAAgCjL,KAAlE,GAA0E,EAA7G;AACAiP,MAAAA,aAAa,CAAC,UAAD,CAAb,GAA4B,EAA5B;AACAjT,MAAAA,SAAS,CAACkT,OAAV,CAAkBD,aAAlB;AACA,YAAMhR,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFnC,UAAAA,SADE;AACSsP,UAAAA,cAAc,EAAE,KADzB;AACgCnI,UAAAA,iBAAiB,EAAE8L,aADnD;AAEF7L,UAAAA,YAAY,EAAE,EAFZ;AAEgBtG,UAAAA,eAAe,EAAE,EAFjC;AAEqCsM,UAAAA,gBAAgB,EAAE,KAFvD;AAE8DvI,UAAAA,aAAa,EAAE,KAF7E;AAEoF0K,UAAAA,eAAe,EAAE;AAFrG;AAFS,OAAnB;AAOA,WAAKrP,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ;;AACD6M,EAAAA,eAAe,GAAG;AACd,UAAMC,YAAY,GAAG,KAAKlP,KAAL,CAAWe,cAAX,CAA0BoO,kBAA/C;AACA,QAAIC,YAAY,GAAG,KAAKpP,KAAL,CAAWiB,eAA9B;AACA,WAAOmO,YAAY,CAACI,YAApB;AACA,QAAI8D,aAAa,GAAG,EAAE,GAAG,KAAKtT,KAAL,CAAWiB;AAAhB,KAApB;;AACA,QAAIiO,YAAY,KAAK,CAArB,EAAwB;AACpB,WAAK7O,KAAL,CAAW8S,aAAX,CAAyB/D,YAAzB,EAAuC,KAAK/O,KAAL,CAAWJ,KAAlD,EAAyD,CAAzD;AACH,KAFD,MAEO;AACH,YAAME,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,IAA8B,EAAhD;AACA,UAAIiT,aAAa,GAAG,EAAE,GAAGhE;AAAL,OAApB;AACAgE,MAAAA,aAAa,CAAC,gBAAD,CAAb,GAAkChE,YAAY,CAAC,gBAAD,CAAZ,CAA+BjL,KAAjE;AACAiP,MAAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,KAAK/S,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,GAA6BuM,MAAM,CAACC,IAAP,CAAY,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBE,SAA7B,EAAwCyG,MAAxC,GAAiD,CAA9E,GAAkF,CAA1G;AACAwM,MAAAA,aAAa,CAAC,gBAAD,CAAb,GAAkChE,YAAY,CAAC,gBAAD,CAAZ,GAAiCA,YAAY,CAAC,gBAAD,CAAZ,CAA+B9F,KAAhE,GAAwE,CAAC,CAA3G;AACA,YAAM+F,aAAa,GAAGD,YAAY,CAAC,eAAD,CAAlC;AACAgE,MAAAA,aAAa,CAAC,eAAD,CAAb,GAAiC/D,aAAjC;AACA+D,MAAAA,aAAa,CAAC,eAAD,CAAb,GAAiC9V,uBAAuB,CAAC+R,aAAD,EAAgB,KAAKhP,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjC,CAAxD;AACAqR,MAAAA,aAAa,CAAC,iBAAD,CAAb,GAAmChE,YAAY,CAAC,iBAAD,CAAZ,GAAkCA,YAAY,CAAC,iBAAD,CAAZ,CAAgC9F,KAAlE,GAA0E,CAAC,CAA9G;AACA8J,MAAAA,aAAa,CAAC,iBAAD,CAAb,GAAmChE,YAAY,CAAC,iBAAD,CAAZ,GAAkCA,YAAY,CAAC,iBAAD,CAAZ,CAAgCjL,KAAlE,GAA0E,EAA7G;AACAiP,MAAAA,aAAa,CAAC,mBAAD,CAAb,GAAqChE,YAAY,CAAC,mBAAD,CAAZ,GAAoCA,YAAY,CAAC,mBAAD,CAAhD,GAAwE,CAAC,CAA9G;AACAgE,MAAAA,aAAa,CAAC,UAAD,CAAb,GAA4B,EAA5B;AACAjT,MAAAA,SAAS,CAACkT,OAAV,CAAkBD,aAAlB;AACAE,MAAAA,aAAa,CAAC,WAAD,CAAb,GAA6B,EAA7B;AACA,YAAMlR,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AAAEnC,UAAAA,SAAF;AAAamH,UAAAA,iBAAiB,EAAE8L,aAAhC;AAA+C7L,UAAAA,YAAY,EAAE,EAA7D;AAAiEtG,UAAAA,eAAe,EAAEqS;AAAlF;AAFS,OAAnB;AAIA,WAAKjT,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ;;AAkLDuN,EAAAA,wBAAwB,GAAG;AACvB,UAAMT,YAAY,GAAG,KAAKlP,KAAL,CAAWe,cAAX,CAA0BoO,kBAA/C;AACA,QAAIC,YAAY,GAAG,KAAKpP,KAAL,CAAWiB,eAA9B;AACA,WAAOmO,YAAY,CAACI,YAApB,CAHuB,CAIvB;AACA;;AACA,QAAIN,YAAY,KAAK,CAArB,EAAwB;AACpB,WAAK7O,KAAL,CAAW8S,aAAX,CAAyB/D,YAAzB,EAAuC,KAAK/O,KAAL,CAAWJ,KAAlD,EAAyD,CAAzD;AACH,KAFD,MAEO;AACH,YAAME,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,IAA8B,EAAhD;AACA,UAAIiT,aAAa,GAAG,EAApB,CAFG,CAGH;AACA;;AAGAA,MAAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,KAAK/S,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,GAA6BuM,MAAM,CAACC,IAAP,CAAY,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBE,SAA7B,EAAwCyG,MAAxC,GAAiD,CAA9E,GAAkF,CAA1G,CAPG,CAQH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMiJ,eAAe,GAAGtQ,wBAAwB,CAAC6P,YAAD,EAC5C,KAAK/O,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QADF,EACY,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAD7B,EAE5C,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB6P,eAF2B,EAEV,IAFU,EAEJ,KAAK9P,KAAL,CAAWuB,kBAFP,EAE2B,KAAKvB,KAAL,CAAWgB,YAFtC,CAAhD;AAIAoS,MAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoB,WAAGvD,eAAe,CAACE;AAAvC,OAAhB;AAEA,UAAI3I,qBAAqB,GAAG,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBmH,qBAAjB,IAA0C,EAAtE;AACAA,MAAAA,qBAAqB,CAACxB,IAAtB,CAA2B,EAAE,GAAGwN,aAAa,CAAC,YAAD,CAAlB;AAAkC,WAAGA;AAArC,OAA3B,EAvBG,CAyBH;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACAjT,MAAAA,SAAS,CAACkT,OAAV,CAAkBD,aAAlB;AAEA,UAAIjS,gBAAgB,GAAG,KAAKnB,KAAL,CAAWmB,gBAAX,CAA4B,oBAA5B,CAAvB;AACA,YAAMgQ,iBAAiB,GAAG,EAA1B;AACAhQ,MAAAA,gBAAgB,IAAIA,gBAAgB,CAAC0C,GAAjB,CAAsBsC,IAAD,IAAU;AAC/CA,QAAAA,IAAI,CAACA,IAAL,CAAU,MAAV,IAAoBiN,aAAa,CAACtG,IAAlC;AACA,eAAOqE,iBAAiB,CAACvL,IAAlB,CAAuBO,IAAI,CAACA,IAA5B,CAAP;AACH,OAHmB,CAApB,CAtIG,CA0IH;AACA;AACA;AACA;;AACA,YAAMqB,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,IAAyB,EAAtC;AAEA,YAAM4J,SAAS,GAAG5J,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAAJ,GAA2BtF,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAA/B,GAAsD,EAAxE,CAhJG,CAiJH;;AACAtF,MAAAA,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAAJ,GAA2B,CAAC,GAAGsE,SAAJ,EAAe,GAAGD,iBAAlB,CAA3B;AAEA,YAAM/O,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACFnC,UAAAA,SADE;AACSsP,UAAAA,cAAc,EAAE,KADzB;AAEFnI,UAAAA,iBAAiB,EAAE8L,aAFjB;AAGFzP,UAAAA,aAAa,EAAE,KAHb;AAIF1C,UAAAA,eAAe,EAAE,EAJf;AAKFsM,UAAAA,gBAAgB,EAAE,KALhB;AAMFmC,UAAAA,eAAe,EAAE,IANf;AAOFnI,UAAAA,YAAY,EAAEC,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAPhB;AAQFtF,UAAAA,IAAI,EAAEA,IARJ;AAQUrG,UAAAA,gBAAgB,EAAE,EAR5B;AASFmD,UAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDC,eAT1D;AAUF2C,UAAAA,qBAVE;AAWFoG,UAAAA,YAAY,EAAE;AAXZ;AAFS,OAAnB;AAgBA,WAAKnN,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH;AACJ;;AAEDwN,EAAAA,eAAe,GAAG;AACd,UAAMV,YAAY,GAAG,KAAKlP,KAAL,CAAWe,cAAX,CAA0BoO,kBAA/C;AACA,QAAIC,YAAY,GAAG,KAAKpP,KAAL,CAAWiB,eAA9B;AACA,WAAOmO,YAAY,CAACI,YAApB;AACA,QAAI8D,aAAa,GAAG,EAAE,GAAG,KAAKtT,KAAL,CAAWiB;AAAhB,KAApB,CAJc,CAKd;AACA;;AACA,QAAIiO,YAAY,KAAK,CAArB,EAAwB;AACpB,WAAK7O,KAAL,CAAW8S,aAAX,CAAyB/D,YAAzB,EAAuC,KAAK/O,KAAL,CAAWJ,KAAlD,EAAyD,CAAzD;AACH,KAFD,MAEO;AACH,YAAME,SAAS,GAAG,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,IAA8B,EAAhD;AACA,UAAIiT,aAAa,GAAG,EAApB,CAFG,CAGH;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,KAAK/S,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,GAA6BuM,MAAM,CAACC,IAAP,CAAY,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBE,SAA7B,EAAwCyG,MAAxC,GAAiD,CAA9E,GAAkF,CAA1G;AAGA,YAAMiJ,eAAe,GAAGtQ,wBAAwB,CAAC6P,YAAD,EAC5C,KAAK/O,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QADF,EACY,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAD7B,EAE5C,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB6P,eAF2B,EAEV,IAFU,EAEJ,KAAK9P,KAAL,CAAWuB,kBAFP,EAG5C,KAAKvB,KAAL,CAAWgB,YAHiC,CAAhD;AAKAoS,MAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoB,WAAGvD,eAAe,CAACE;AAAvC,OAAhB;AAEA,UAAI3I,qBAAqB,GAAG,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBmH,qBAAjB,IAA0C,EAAtE;AACAA,MAAAA,qBAAqB,CAACxB,IAAtB,CAA2B,EAAE,GAAGwN,aAAa,CAAC,YAAD,CAAlB;AAAkC,WAAGA;AAArC,OAA3B,EArBG,CAuBH;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACAjT,MAAAA,SAAS,CAACkT,OAAV,CAAkBD,aAAlB,EAjIG,CAkIH;AACA;;AAEA,UAAIjS,gBAAgB,GAAG,KAAKnB,KAAL,CAAWmB,gBAAX,CAA4B,oBAA5B,CAAvB;AACA,UAAIgQ,iBAAiB,GAAG,EAAxB;AACAhQ,MAAAA,gBAAgB,IAAIA,gBAAgB,CAAC0C,GAAjB,CAAsBsC,IAAD,IAAU;AAC/CA,QAAAA,IAAI,CAACA,IAAL,CAAU,MAAV,IAAoBiN,aAAa,CAACtG,IAAlC;AACA,eAAOqE,iBAAiB,CAACvL,IAAlB,CAAuBO,IAAI,CAACA,IAA5B,CAAP;AACH,OAHmB,CAApB,CAvIG,CA2IH;AACA;AACA;;AACA,UAAIqB,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,IAAyB,EAApC;AAEA,YAAM4J,SAAS,GAAG5J,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAAJ,GAA2BtF,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAA/B,GAAsD,EAAxE;AAEAtF,MAAAA,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAAJ,GAA2B,CAAC,GAAGsE,SAAJ,EAAe,GAAGD,iBAAlB,CAA3B;AAEA,YAAM/O,UAAU,GAAG;AACfjC,QAAAA,SADe;AACJmH,QAAAA,iBAAiB,EAAE8L,aADf;AAEfnS,QAAAA,eAAe,EAAEqS,aAFF;AAGf/L,QAAAA,YAAY,EAAEC,IAAI,CAAC4L,aAAa,CAACtG,IAAf,CAHH;AAIftF,QAAAA,IAAI,EAAEA,IAJS;AAIHJ,QAAAA,qBAJG,CAIkB;;AAJlB,OAAnB;AAMA,WAAKtI,wBAAL,CAA8BsD,UAA9B,EAA0CjB,gBAA1C,EA1JG,CA2JH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ;;AAoWDyQ,EAAAA,oBAAoB,CAACjN,QAAD,EAAWrE,OAAX,EAAoBwN,SAApB,EAA+ByF,IAA/B,EAAqC;AACrD,UAAMlD,SAAS,GAAG;AAAEvO,MAAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8B;AAA7B,KAAlB;AAEA,QAAIyR,YAAY,GAAG;AACfC,MAAAA,aAAa,EAAE,KAAKpT,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BmP,iBAA5B,CAA8CvE,kBAD9C;AAEfrN,MAAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8B,QAFZ;AAGfiH,MAAAA,eAAe,EAAE,KAAK3I,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0E,mBAA5B,CAAgDD,eAHlD;AAIf0F,MAAAA,YAAY,EAAE,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAJ5C;AAKf6B,MAAAA,eAAe,EAAE,KAAKlQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgD+L,eALlD;AAMfoD,MAAAA,QAAQ,EAAE,EANK;AAOfC,MAAAA,MAAM,EAAE,EAPO;AAQfC,MAAAA,KAAK,EAAE,CARQ;AASfC,MAAAA,KAAK,EAAE,CATQ;AAUfC,MAAAA,SAAS,EAAEC,MAAM,CAAC,KAAKhU,KAAL,CAAWe,cAAX,CAA0BgT,SAA3B,CAVF;AAWfE,MAAAA,0BAA0B,EAAE,KAAK5T,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B2P,8BAA5B,IACrB,KAAK7T,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B2P,8BAA5B,CAA2DD,0BAZnD;AAafE,MAAAA,uBAAuB,EAAE,KAAK9T,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B6P,8BAA5B,CAA2DD,uBAbrE;AAcfE,MAAAA,sBAAsB,EAAE,KAAKhU,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B+P,eAA5B,GACpB,KAAKjU,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B+P,eAA5B,CAA4CD,sBADxB,GAElB,KAhBS;AAiBf5H,MAAAA,cAAc,EAAE,KAAKpM,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,IACT,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBADnB,GAEZ,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cAFpC,GAEqD,KAnBtD;AAoBf8H,MAAAA,iBAAiB,EAAE,CApBJ;AAqBfC,MAAAA,eAAe,EAAE,KAAKnU,KAAL,CAAWJ,KAAX,CAAiBuU,eAAjB,IAAoC,uBArBtC;AAsBfC,MAAAA,aAAa,EAAE,KAAKpU,KAAL,CAAWJ,KAAX,CAAiBwU,aAAjB,IAAkC,sBAtBlC;AAuBfC,MAAAA,kBAAkB,EAAE,KAAKrU,KAAL,CAAWJ,KAAX,CAAiByU,kBAAjB,IAAuC;AAvB5C,KAAnB;AA2BArE,IAAAA,SAAS,CAAC,cAAD,CAAT,GAA4BmD,YAA5B,CA9BqD,CA+BrD;AACA;;AACA,UAAMmB,KAAK,GAAGtV,eAAe,CAAC,KAAKgB,KAAL,CAAWJ,KAAX,CAAiBsE,UAAlB,EACzB,KAAKvE,KAAL,CAAWe,cADc,EACE,KAAKf,KAAL,CAAWgB,YADb,EAEzB,KAAKX,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,CAAiDb,QAFxB,EAGzB,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAHQ,EAGE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB6P,eAHnB,EAIzBhC,SAJyB,EAId,KAAKzN,KAAL,CAAWsJ,eAJG,CAA7B;AAMA0G,IAAAA,SAAS,CAAC,cAAD,CAAT,GAA4BsE,KAAK,CAAC5E,kBAAlC;AACAM,IAAAA,SAAS,CAAC,cAAD,CAAT,CAA0B,YAA1B,EAAwC,WAAxC,IAAuD2D,MAAM,CAAC,KAAKhU,KAAL,CAAWe,cAAX,CAA0BgT,SAA3B,CAA7D;AACA1D,IAAAA,SAAS,CAAC,cAAD,CAAT,CAA0B,WAA1B,IAAyC2D,MAAM,CAAC,KAAKhU,KAAL,CAAWe,cAAX,CAA0BgT,SAA3B,CAA/C;AACA1D,IAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBsE,KAAK,CAACC,QAA9B;AACAvE,IAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC,KAAK4B,cAAL,CAAoB4C,qBAAzD;AACAxE,IAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B2P,8BAA5B,IACnC,KAAK7T,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B2P,8BAA5B,CAA2DD,0BADlE;AAEA5D,IAAAA,SAAS,CAAC,wBAAD,CAAT,GAAsC,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B+P,eAA5B,IAC/B,KAAKjU,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B+P,eAA5B,CAA4CD,sBADnD;AAEAhE,IAAAA,SAAS,CAAC,gBAAD,CAAT,GAA8B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,IACvB,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cADvD;AAEA4D,IAAAA,SAAS,CAAC,mBAAD,CAAT,GAAiC,CAAjC;AACAA,IAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBuU,eAAjB,IAAoC,uBAAnE;AACAnE,IAAAA,SAAS,CAAC,eAAD,CAAT,GAA6B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBwU,aAAjB,IAAkC,sBAA/D;AACApE,IAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC,KAAKhQ,KAAL,CAAWyU,uBAAlD;AACAzE,IAAAA,SAAS,CAAC,4BAAD,CAAT,GAA0C,KAAKhQ,KAAL,CAAW0U,0BAArD;AACA1E,IAAAA,SAAS,CAAC,gBAAD,CAAT,GAA8B,KAAKhQ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByQ,cAA1D,CAvDqD,CAyDrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,UAAMpH,UAAU,GAAG;AACfqH,MAAAA,QAAQ,EAAE,KAAK5U,KAAL,CAAWJ,KAAX,CAAiB2N,UAAjB,CAA4BqH,QADvB;AAEfpH,MAAAA,SAAS,EAAE,cAFI;AAGfqH,MAAAA,WAAW,EAAE,KAAK7U,KAAL,CAAWJ,KAAX,CAAiB2N,UAAjB,CAA4BsH,WAH1B;AAIf7E,MAAAA,SAAS,EAAEA,SAJI;AAKfvC,MAAAA,SAAS,EAAEA,SALI;AAKOnJ,MAAAA,QALP;AAKiBrE,MAAAA,OALjB;AAMfS,MAAAA,cAAc,EAAE,EAAE,GAAG,KAAKf,KAAL,CAAWe,cAAhB;AAAgCoU,QAAAA,QAAQ,EAAE,KAAK9U,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjB,CAA0BoT;AAApE,OAND;AAOfC,MAAAA,MAAM,EAAE,YAPO;AAQfC,MAAAA,gBAAgB,EAAE,KARH;AASfC,MAAAA,eAAe,EAAE,KAAKtV,KAAL,CAAWsV,eATb;AAUfC,MAAAA,oBAAoB,EAAE,KAAKvV,KAAL,CAAWuV,oBAVlB,CAWf;;AAXe,KAAnB;;AAaA,QAAI3X,SAAS,CAAC,KAAKyC,KAAL,CAAWJ,KAAX,CAAiBuV,qBAAlB,EAAyC,KAAKnV,KAAL,CAAWJ,KAAX,CAAiB8B,QAAjB,CAA0B0T,SAAnE,EAA8E,KAAKpV,KAAL,CAAWJ,KAAX,CAAiByV,YAA/F,CAAb,EAA2H;AACvH,YAAMtT,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpF,cADK;AAEfqF,QAAAA,IAAI,EAAE;AACF;AACA2D,UAAAA,SAAS,EAAE,IAFT;AAEe0P,UAAAA,UAAU,EAAE;AAAE/H,YAAAA,UAAF;AAAcrJ,YAAAA,UAAU,EAAE,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE;AAA3C,WAF3B;AAGFI,UAAAA,QAHE;AAGQ+K,UAAAA,eAAe,EAAE,IAHzB;AAG+B;AACjCkG,UAAAA,SAAS,EAAE,KAJT;AAIgBC,UAAAA,UAAU,EAAE;AAJ5B;AAFS,OAAnB;AASA,WAAKxV,KAAL,CAAW9B,WAAX,CAAuB6D,UAAvB;AACH,KAXD,MAYK;AACD;AACA,WAAK/B,KAAL,CAAWxB,kBAAX,CAA8B+O,UAA9B,EAA0C,KAAKvN,KAAL,CAAWJ,KAAX,CAAiBsE,UAA3D,EAAuE,WAAvE;AACH;AACJ;;AAEDuR,EAAAA,qBAAqB,CAACC,iBAAD,EAAoB;AACrC,UAAMnB,QAAQ,GAAG,EAAjB;AACAmB,IAAAA,iBAAiB,IAAIA,iBAAiB,CAAClS,GAAlB,CAAsBsB,GAAG,IAAI;AAC9C,aAAOA,GAAG,CAACC,QAAJ,CAAavB,GAAb,CAAiBwB,MAAM,IAAI;AAC9B,eAAOA,MAAM,CAACD,QAAP,CAAgBvB,GAAhB,CAAoBnC,SAAS,IAAI;AACpC,cAAIA,SAAS,CAACgC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC,mBAAOhC,SAAS,CAAC0D,QAAV,CAAmBvB,GAAnB,CAAuByB,YAAY,IAAI;AAC1C,kBAAIA,YAAY,CAACK,SAAb,KAA2B,MAA/B,EAAuC;AACnCiP,gBAAAA,QAAQ,CAAChP,IAAT,CAAcN,YAAY,CAACnB,KAA3B;AACH;AACJ,aAJM,CAAP;AAKH,WAND,MAOK;AACD,gBAAIzC,SAAS,CAACiE,SAAV,KAAwB,MAA5B,EAAoC;AAChCiP,cAAAA,QAAQ,CAAChP,IAAT,CAAclE,SAAS,CAACyC,KAAxB;AACH;;AACD,mBAAOyQ,QAAP;AACH;AACJ,SAdM,CAAP;AAgBH,OAjBM,CAAP;AAkBH,KAnBoB,CAArB;AAoBA,WAAOA,QAAP;AACH;;AAED1V,EAAAA,2BAA2B,GAAG;AAC1B,QAAI+Q,UAAU,GAAG,KAAK5P,KAAL,CAAWJ,KAAX,CAAiBE,SAAlC;;AACA,QAAI8P,UAAU,IAAIA,UAAU,CAACrJ,MAAX,GAAoB,CAAtC,EAAyC;AACrC,UAAIY,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAA5B;AACA,UAAI+G,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAAC,eAAD,CAAH,GAAuB9O,oBAAoB,CAACwQ,UAAD,EAAazI,IAAb,CAA3C;AACA+G,MAAAA,GAAG,CAAC,oBAAD,CAAH,GAA4B/O,SAAS,CAAC,KAAKa,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,GAA6B,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAA9C,GAA0D,EAA3D,EACjC,KAAKH,KAAL,CAAWuB,kBADsB,EAEjC,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,GAAkD,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cAAlG,GAAmH,KAFlF,EAGjC,KAAKzM,KAAL,CAAWgB,YAHsB,CAArC;AAIAuN,MAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,KAAKuH,qBAAL,CAA2B,KAAKzV,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,GAClD,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QADI,GACO,KAAK7E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByR,0BAA5B,CAAuD9Q,QADzF,CAA3B;AAEAqJ,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,CAAtB;AACAA,MAAAA,GAAG,CAAC,iBAAD,CAAH,GAAyB,CAAzB;AACAA,MAAAA,GAAG,CAAC,iBAAD,CAAH,GAAyB,CAAzB,CAZqC,CAarC;;AACAA,MAAAA,GAAG,CAAC,4BAAD,CAAH,GAAoC,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0P,0BAAhE;AACA1F,MAAAA,GAAG,CAAC,yBAAD,CAAH,GAAiC,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B6P,8BAA5B,CAA2DD,uBAA5F;AACA5F,MAAAA,GAAG,CAAC,wBAAD,CAAH,GAAgC,KAAhC;AACAA,MAAAA,GAAG,CAAC,gBAAD,CAAH,GAAwB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,GACpB,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cAD5B,GAC6C,KADrE,CAjBqC,CAmBrC;;AACA,YAAMkI,KAAK,GAAGrV,wBAAwB,CAAC,KAAKe,KAAL,CAAWJ,KAAX,CAAiBsE,UAAlB,EAClC,KAAKvE,KAAL,CAAWe,cADuB,EACP,KAAKf,KAAL,CAAWgB,YADJ,EAElC,KAAKX,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0R,iBAA5B,CAA8C/Q,QAFZ,EAGlC,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAHiB,EAGP,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBiW,eAHV,EAG2B,QAH3B,EAIlC,KAAK7V,KAAL,CAAWsJ,eAJuB,CAAtC;AAKA4E,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsBoG,KAAK,CAAC5E,kBAA5B;AACAxB,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBoG,KAAK,CAACC,QAAxB;AACArG,MAAAA,GAAG,CAAC,uBAAD,CAAH,GAA+B,KAAK0D,cAAL,CAAoB4C,qBAAnD;AACAtG,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiB8B,QAAnC;AACAwM,MAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B4R,iBAAvD;AAEA5H,MAAAA,GAAG,CAAC,mBAAD,CAAH,CAAyB,YAAzB,IAAyC/Q,uBAAuB,CAACE,mBAAmB,CAAC,KAAK2C,KAAL,CAAWJ,KAAX,CAAiB8B,QAAlB,EAA4BwM,GAAG,CAAC,mBAAD,CAAH,CAAyB,YAAzB,CAA5B,CAApB,EAAyF,KAAzF,CAAhE,CA/BqC,CAgCrC;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMX,UAAU,GAAG;AACfyC,QAAAA,SAAS,EAAE9B,GADI;AAEf6H,QAAAA,aAAa,EAAE,KAAK/V,KAAL,CAAW+V,aAFX;AAGfhB,QAAAA,MAAM,EAAE;AAHO,OAAnB;AAKA,WAAK/U,KAAL,CAAWnB,2BAAX,CAAuC0O,UAAvC,EAAmD,KAAKvN,KAAL,CAAWJ,KAAX,CAAiBsE,UAApE;AACH,KA7CD,MA6CO;AACHvH,MAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK9C,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAX;AACH;AAEJ;;AAED1E,EAAAA,kBAAkB,GAAG;AACjB,QAAIqR,UAAU,GAAG,KAAK5P,KAAL,CAAWJ,KAAX,CAAiBE,SAAlC;AACA,QAAIsM,cAAc,GAAG,KAAKpM,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,IACd,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cADvD;;AAEA,QAAIA,cAAc,GAAGwD,UAAU,IAAIA,UAAU,CAACrJ,MAAX,GAAoB,CAArC,GAAyC,IAA3D,EAAiE;AAC7D,UAAIY,IAAI,GAAG,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAA5B;AACA,UAAI+G,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,CAAC,eAAD,CAAH,GAAuB9O,oBAAoB,CAACwQ,UAAD,EAAazI,IAAb,CAA3C;;AACA,UAAIiF,cAAc,KAAK,KAAnB,IAA4B,KAAKpM,KAAL,CAAWJ,KAAX,CAAiBuH,IAA7C,IAAqD,KAAKnH,KAAL,CAAWJ,KAAX,CAAiBuH,IAAjB,CAAsBZ,MAAtB,KAAiC,CAA1F,EAA6F;AACzF2H,QAAAA,GAAG,CAAC,oBAAD,CAAH,GAA4B,CAAC;AACzB,sBAAY;AAAE,2BAAe;AAAjB,WADa;AACY,kBAAQ,CADpB;AAEvB,4BAAkB,CAAC,CAFI;AAED,iCAAuB,KAAKvO,KAAL,CAAWgB,YAAX,CAAwB6L,iBAAxB,CAA0C1G,IAA1C,CAA+CyI;AAFrE,SAAD,CAA5B;AAIH,OALD,MAKO;AACHL,QAAAA,GAAG,CAAC,oBAAD,CAAH,GAA4B/O,SAAS,CAAC,KAAKa,KAAL,CAAWJ,KAAX,CAAiBE,SAAjB,GAA6B,KAAKE,KAAL,CAAWJ,KAAX,CAAiBE,SAA9C,GAA0D,EAA3D,EACjC,KAAKH,KAAL,CAAWuB,kBADsB,EAEjC,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cAFf,EAE+B,KAAKzM,KAAL,CAAWgB,YAF1C,CAArC;AAGH;;AAEDuN,MAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,KAAKuH,qBAAL,CAA2B,KAAKzV,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QAAzE,CAA3B,CAf6D,CAgB7D;AACA;;AACAqJ,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,EAAlB;AACAA,MAAAA,GAAG,CAAC,QAAD,CAAH,GAAgB,EAAhB;AACAA,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,CAA6CC,YAAnE;AACAH,MAAAA,GAAG,CAAC,iBAAD,CAAH,GAAyB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgD+L,eAAzE;AACAhC,MAAAA,GAAG,CAAC,iBAAD,CAAH,GAAyB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0E,mBAA5B,CAAgDD,eAAzE;AACAuF,MAAAA,GAAG,CAAC,eAAD,CAAH,GAAuBpR,iBAAiB,CAACkZ,WAAzC;AACA9H,MAAAA,GAAG,CAAC,4BAAD,CAAH,GAAoC,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,IAC7B,KAAK1F,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,CAAiDkO,0BADxD;AAEA1F,MAAAA,GAAG,CAAC,yBAAD,CAAH,GAAiC,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B6P,8BAA5B,CAA2DD,uBAA5F;AACA5F,MAAAA,GAAG,CAAC,wBAAD,CAAH,GAAgC,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B+P,eAA5B,IACzB,KAAKjU,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B+P,eAA5B,CAA4CD,sBADnD;AAEA9F,MAAAA,GAAG,CAAC,gBAAD,CAAH,GAAwB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,IACjB,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cADvD;AAEA8B,MAAAA,GAAG,CAAC,mBAAD,CAAH,GAA2B,CAA3B;AACA,YAAMoG,KAAK,GAAGtV,eAAe,CAAC,KAAKgB,KAAL,CAAWJ,KAAX,CAAiBsE,UAAlB,EACzB,KAAKvE,KAAL,CAAWe,cADc,EACE,KAAKf,KAAL,CAAWgB,YADb,EAEzB,KAAKX,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,CAAiDb,QAFxB,EAGzB,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAHQ,EAGE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBiW,eAHnB,EAGoC,QAHpC,EAIzB,KAAK7V,KAAL,CAAWsJ,eAJc,CAA7B;AAKA7E,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB4P,KAAtB;AACApG,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAsBoG,KAAK,CAAC5E,kBAA5B;AACAxB,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBoG,KAAK,CAACC,QAAxB;AACArG,MAAAA,GAAG,CAAC,uBAAD,CAAH,GAA+B,KAAK0D,cAAL,CAAoB4C,qBAAnD;AACAtG,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiB8B,QAAnC;AACAwM,MAAAA,GAAG,CAAC,yBAAD,CAAH,GAAiC,KAAKlO,KAAL,CAAWyU,uBAA5C;AACAvG,MAAAA,GAAG,CAAC,4BAAD,CAAH,GAAoC,KAAKlO,KAAL,CAAW0U,0BAA/C;AACAxG,MAAAA,GAAG,CAAC,OAAD,CAAH,GAAe,CAAf,CA5C6D,CA6C7D;;AACAA,MAAAA,GAAG,CAAC,eAAD,CAAH,GAAuB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBwU,aAAjB,IAAkC,sBAAzD;AACAlG,MAAAA,GAAG,CAAC,iBAAD,CAAH,GAAyB,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBuU,eAAjB,IAAoC,uBAA7D;AACAjG,MAAAA,GAAG,CAAC,oBAAD,CAAH,GAA4B,KAAKlO,KAAL,CAAWJ,KAAX,CAAiByU,kBAAjB,IAAuC,0BAAnE;AACAnG,MAAAA,GAAG,CAAC,uBAAD,CAAH,GAA+B,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,IAA6BC,QAAQ,CAAC,KAAKR,KAAL,CAAWJ,KAAX,CAAiBW,QAAjB,CAA0B,CAA1B,CAAD,CAAR,KAA2C,CAAxE,GAA4E,IAA5E,GAAmF,KAAlH;AAEA,YAAMgN,UAAU,GAAG;AACfyC,QAAAA,SAAS,EAAE9B,GADI;AAEf6H,QAAAA,aAAa,EAAE,KAAK/V,KAAL,CAAW+V,aAFX;AAGfhB,QAAAA,MAAM,EAAE;AAHO,OAAnB;AAKA,WAAK/U,KAAL,CAAWzB,kBAAX,CAA8BgP,UAA9B,EAA0C,KAAKvN,KAAL,CAAWJ,KAAX,CAAiBsE,UAA3D;AACH,KAzDD,MAyDO;AACHvH,MAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK9C,KAAL,CAAW+C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAX;AACH;AAEJ;;AA0BDgT,EAAAA,MAAM,GAAG;AAEL,QAAI3R,QAAQ,GAAG,CAAf;;AACA,QAAI,KAAKtE,KAAL,CAAWkW,oBAAf,EAAqC;AACjC5R,MAAAA,QAAQ,GAAG,CAAX;AACH;;AACD,QAAI6R,WAAW,GAAG,MAAlB;AACA,QAAIC,QAAQ,GAAG,UAAf;;AACA,QAAI,KAAKpW,KAAL,CAAWmW,WAAf,EAA4B;AACxBA,MAAAA,WAAW,GAAG,KAAKnW,KAAL,CAAWmW,WAAzB;AACAC,MAAAA,QAAQ,GAAG,OAAOC,MAAP,CAAcF,WAAW,CAACG,WAAZ,EAAd,CAAX;AACH,KAXI,CAYL;AACA;AACA;AACA;AACA;AACA;;;AACA,wBACI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAE,KAAKtW,KAAL,CAAWJ,KAAX,CAAiB+E,aAAjB,GACF,IADE,GACK,KAAK3E,KAAL,CAAWJ,KAAX,CAAiB6F,QAAjB,GAA4B,IAA5B,GACH,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB4F,QAAjB,GAA4B,IAA5B,GACI,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB0D,aAAjB,GAAiC,IAAjC,GACI,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBoE,sBAAjB,GAA0C,IAA1C,GAAiD,IALrE,CAMI;AACA;AACA;AARJ;AASI,MAAA,QAAQ,EAAC,QATb,CAUI;AAVJ;AAWI,MAAA,SAAS,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE,sBAAjB,GAA0C,YAA1C,GAAyD,KAAKhE,KAAL,CAAWuW,SAAX,IAAwB,EAXhG;AAYI,MAAA,IAAI,EAAE,KAAKvW,KAAL,CAAWJ,KAAX,CAAiB4V,UAZ3B;AAaI,MAAA,MAAM,EAAE,KAAKxV,KAAL,CAAWwW,UAbvB;AAcI,MAAA,YAAY,EAAE,KAdlB;AAeI,MAAA,eAAe,EAAC,mCAfpB;AAgBI,yBAAgB,UAhBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAkBI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,SAAS,EAAC,2BAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,EAAE,EAAC,UAAhB;AAA2B,MAAA,SAAS,EAAC,4BAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKxW,KAAL,CAAWyW,SAAX,KAAyB,IAAzB,GAAgC,EAAhC,GAAqC,KAAKzW,KAAL,CAAWJ,KAAX,CAAiB2N,UAAjB,GAClC,KAAKvN,KAAL,CAAWJ,KAAX,CAAiB+F,KAAjB,KAA2B,IAA3B,gBACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,WAAtB;AAAmC,MAAA,cAAc,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAEM,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBgG,SAAjB,KAA+B,IAA/B,gBACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,WAAtB;AAAmC,MAAA,cAAc,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEI,KAAK5F,KAAL,CAAW0W,cAAX,gBACE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,KAAK1W,KAAL,CAAWJ,KAAX,CAAiBqE,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,gBAEI,0CACG,KAAKjE,KAAL,CAAWyN,SAAX,gBACG,uDACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,KAAKzN,KAAL,CAAWJ,KAAX,CAAiB6N,SAAjB,IAA8B,OAAO4I,MAAP,CAAc,KAAKrW,KAAL,CAAWJ,KAAX,CAAiB6N,SAAjB,CAA2B6I,WAA3B,EAAd,CAApD;AACI,MAAA,cAAc,EAAC,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGK,GAHL,EAKQ,KAAKtW,KAAL,CAAWJ,KAAX,CAAiBqE,UAAjB,gBACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBqE,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAEM,EAPd,CADH,GAYG,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBqE,UAAjB,gBACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBqE,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAEM,EAfZ,CAPoB,GAwBhC,EAzBV,CADJ,eA4BI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,qBAAlB;AAAwC,MAAA,OAAO,EAAC,EAAhD;AAAmD,MAAA,OAAO,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBoE,sBAAjB,GAA0C,KAAK2I,gBAA/C,GAAkE,KAAK3M,KAAL,CAAWJ,KAAX,CAAiB6F,QAAjB,GAC1H,KAAKiH,SADqH,GACzG,KAAK1M,KAAL,CAAWJ,KAAX,CAAiB4F,QAAjB,GAA4B,KAAKuH,SAAjC,GAA6C,KAAK/M,KAAL,CAAWJ,KAAX,CAAiB+E,aAAjB,GAC1D,KAAKmI,cADqD,GACpC,KAAK9M,KAAL,CAAWJ,KAAX,CAAiB0D,aAAjB,GAAiC,KAAK0J,cAAtC,GAClB,KAAKhN,KAAL,CAAWwW,UAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,YAArB;AAAkC,MAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CA5BJ,EAkCK,KAAKxW,KAAL,CAAW2F,KAAX,KAAqB,IAArB,gBACG,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAKtB,eAAL,CAAqB,CAArB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,YAArB;AAAkC,MAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADH,GAMG,CAAC,KAAKsD,KAAL,CAAWyN,SAAX,KAAyB,QAAzB,IAAqC,KAAKzN,KAAL,CAAWyN,SAAX,KAAyB,QAA/D,KAA4E,KAAKzN,KAAL,CAAW2W,YAAvF,gBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAKtS,eAAL,CAAqB,CAArB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,cAArB;AAAoC,MAAA,cAAc,EAAC,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,GAKI,KAAKsD,KAAL,CAAW4W,aAAX,gBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAKvS,eAAL,CAAqBC,QAArB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE5H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,eAArB;AAAqC,MAAA,cAAc,EAAC,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,GAKI,KAAKsD,KAAL,CAAW6W,SAAX,KAAyB,IAAzB,IAAiC,KAAK7W,KAAL,CAAW8W,WAA5C,gBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAKzS,eAAL,CAAqB,CAArB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEtH,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,aAArB;AAAmC,MAAA,cAAc,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,GAKI,KAAKiD,KAAL,CAAW+W,MAAX,IAAqB,KAAK/W,KAAL,CAAWyW,SAAhC,GACI,KAAKzW,KAAL,CAAWyN,SAAX,KAAyB,MAAzB,GAAkC,EAAlC,gBACM,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,+BAAlB;AAAkD,MAAA,IAAI,EAAC,QAAvD;AACE,MAAA,OAAO,EAAE,KAAKzN,KAAL,CAAWgX,SADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,WAAtB;AAAmC,MAAA,cAAc,EAAC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFV,GAOM,KAAKhX,KAAL,CAAWJ,KAAX,CAAiBgG,SAAjB,KAA+B,IAA/B,IAAuC,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6N,SAAjB,KAA+B,QAAtE,gBACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,4BAAlB;AAA+C,MAAA,OAAO,EAAE,MAAM,KAAKpJ,eAAL,CAAqB,CAArB,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE0Z,QAAtB;AAAgC,MAAA,cAAc,EAAED,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADF,GAKI,KAAKnW,KAAL,CAAWJ,KAAX,CAAiBoE,sBAAjB,GAA0C,EAA1C,gBACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,4BAAlB;AAA+C,MAAA,OAAO,EAAE,MAAM,KAAKK,eAAL,CAAqBC,QAArB,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE5H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE0Z,QAAtB;AAAgC,MAAA,cAAc,EAAED,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CApEhC,EAyEK,KAAKnW,KAAL,CAAWJ,KAAX,CAAiB6N,SAAjB,KAA+B,QAA/B,IAA2C,KAAKzN,KAAL,CAAWJ,KAAX,CAAiBsN,gBAA5D,gBACG,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAK7I,eAAL,CAAqB,CAArB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,kBAArB;AAAwC,MAAA,cAAc,EAAC,iBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADH,GAKK,EA9EV,EAgFK,CAAC,KAAKsD,KAAL,CAAWyN,SAAX,KAAyB,QAAzB,IAAqC,KAAKzN,KAAL,CAAWyN,SAAX,KAAyB,QAA/D,KACM,KAAKzN,KAAL,CAAW2F,KAAX,KAAqB,IAD3B,IACmC,KAAK3F,KAAL,CAAW8W,WAAX,KAA2B,IAD9D,IACsE,KAAK9W,KAAL,CAAWiX,QADjF,gBAEG,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,2BAAlB;AAA8C,MAAA,OAAO,EAAE,MAAM,KAAK5S,eAAL,CAAqB,CAArB,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3H,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,UAArB;AAAgC,MAAA,cAAc,EAAC,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFH,GAMK,EAtFV,CAlBJ,eA0GI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,GAAG,EAAE,KAAK+U,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAE,KAAKxR,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKD,KAAL,CAAWJ,KAAX,CAAiBoE,sBAAjB,GACG,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBgD,sBAAjB,CAAwC0C,SAAxC,KAAsD,sBAAtD,gBACI,oBAAC,mBAAD;AACI,MAAA,MAAM,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB4C,WAD7B;AAEI,MAAA,kBAAkB,EAAE,KAAKD,kBAF7B;AAGI,MAAA,UAAU,EAAE,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBsX,UAAjB,IAA+B,EAH/C;AAII,MAAA,IAAI,EAAE,KAAKlX,KAAL,CAAWJ,KAAX,CAAiByC,SAJ3B;AAKI,MAAA,IAAI,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiB0C,SAL3B;AAMI,MAAA,gBAAgB,EAAE,KAAKF,gBAN3B;AAOI,MAAA,MAAM,EAAE,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBuX,MAAjB,IAA2B,EAPvC;AAQI,MAAA,WAAW,EAAE,KAAKnX,KAAL,CAAWJ,KAAX,CAAiBwX,WAAjB,IAAgC,EARjD;AASI,MAAA,UAAU,EAAE,KAAKlU,mBATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,gBAYS,oBAAC,kBAAD;AACD,MAAA,MAAM,EAAE,KAAKlD,KAAL,CAAWJ,KAAX,CAAiBuX,MAAjB,IAA2B,EADlC;AAED,MAAA,QAAQ,EAAE,KAAKxV,2BAFd;AAGD,MAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBsC,WAHtB;AAID,MAAA,MAAM,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBuC,aAJxB;AAKD,MAAA,IAAI,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiByC,SALtB;AAMD,MAAA,IAAI,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiB0C,SANtB;AAOD,MAAA,gBAAgB,EAAE,KAAKF,gBAPtB;AAQD,MAAA,WAAW,EAAE,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwX,WAAjB,IAAgC,EAR5C;AASD,MAAA,UAAU,EAAE,KAAKpX,KAAL,CAAWJ,KAAX,CAAiBsX,UAT5B;AAUD,MAAA,UAAU,EAAE,KAAKhU,mBAVhB;AAWD,MAAA,kBAAkB,EAAE,KAAKR,kBAXxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbZ,GA0BG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB6F,QAAjB,gBACI,oBAAC,gBAAD;AACI,MAAA,UAAU,EAAE,KAAKzF,KAAL,CAAWJ,KAAX,CAAiByX,UADjC;AAEI,MAAA,SAAS,EAAE,KAAKrX,KAAL,CAAWJ,KAAX,CAAiB0X,SAFhC;AAGI,MAAA,eAAe,EAAE,KAAKhK,WAH1B;AAII,MAAA,QAAQ,EAAE,KAAKtN,KAAL,CAAWJ,KAAX,CAAiB2X,QAJ/B;AAKI,MAAA,SAAS,EAAE,KAAKvX,KAAL,CAAWJ,KAAX,CAAiB4X,SALhC;AAMI,MAAA,aAAa,EAAE,KAAKxX,KAAL,CAAWJ,KAAX,CAAiB6X,aANpC;AAOI,MAAA,YAAY,EAAE,KAAK9X,KAAL,CAAWgB,YAP7B;AAQI,MAAA,cAAc,EAAE,KAAKhB,KAAL,CAAWe,cAR/B;AASI,MAAA,YAAY,EAAE,KAAK0M,YATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,GAYM,KAAKpN,KAAL,CAAWJ,KAAX,CAAiB4F,QAAjB,gBACE,oBAAC,OAAD;AACI,MAAA,YAAY,EAAE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB8X,YAAjB,IAAiC,EADnD;AAEI,MAAA,UAAU,EAAE,KAAKlQ,UAFrB;AAGI,MAAA,gBAAgB,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiBkB,gBAHvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAKO,KAAKd,KAAL,CAAWJ,KAAX,CAAiB+E,aAAjB,gBACD,oBAAC,iBAAD;AACI,MAAA,GAAG,EAAE,KAAKgT,WADd;AAEI,MAAA,eAAe,EAAE,KAAKhY,KAAL,CAAWiB,eAAX,IAA8B,EAFnD;AAGI,MAAA,mBAAmB,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0E,mBAA5B,IAAmD,EAH5E;AAII,MAAA,gBAAgB,EAAE,KAAK5I,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BkK,gBAA5B,IAAgD,EAJtE;AAKI,MAAA,mBAAmB,EAAE,KAAKpO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,IAAmD,EAL5E;AAMI,MAAA,qBAAqB,EAAE,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0T,qBAA5B,IAAqD,EANhF;AAOI,MAAA,aAAa,EAAE,KAAK5X,KAAL,CAAW+C,IAAX,CAAgBC,aAPnC;AAQI,MAAA,gBAAgB,EAAE,KAAKyI,oBAR3B;AASI,MAAA,SAAS,EAAE,KAAKzL,KAAL,CAAWJ,KAAX,CAAiBiQ,YAAjB,IAAiC,EAThD;AAUI,MAAA,wBAAwB,EAAE,KAAKrB,wBAVnC,CAWI;AAXJ;AAYI,MAAA,YAAY,EAAE,KAAKxO,KAAL,CAAWJ,KAAX,CAAiBiY,YAZnC;AAaI,MAAA,iBAAiB,EAAE,KAAKvJ,iBAb5B;AAcI,MAAA,QAAQ,EAAE,KAAKtO,KAAL,CAAWJ,KAAX,CAAiB8B,QAd/B;AAeI,MAAA,aAAa,EAAE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBkY,aAAjB,IAAkC,EAfrD;AAgBI,MAAA,WAAW,EAAE,KAAK9X,KAAL,CAAWJ,KAAX,CAAiBmY,WAhBlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,GAmBC,KAAK/X,KAAL,CAAWJ,KAAX,CAAiB0D,aAAjB,gBACE,oBAAC,YAAD;AACI,MAAA,SAAS,EAAE,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBiQ,YAAjB,IAAiC,EADhD;AAEI,MAAA,eAAe,EAAE,KAAKlQ,KAAL,CAAWiB,eAFhC;AAGI,MAAA,cAAc,EAAE,KAAKjB,KAAL,CAAWe,cAH/B,CAII;AAJJ;AAKI,MAAA,iBAAiB,EAAE,KAAK4N,iBAL5B;AAMI,MAAA,wBAAwB,EAAE,KAAKE,wBANnC;AAOI,MAAA,YAAY,EAAE,KAAKxO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,IACV,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BU,iBAA5B,CAA8CC,QARtD;AASI,MAAA,QAAQ,EAAE,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8B,QAT/B;AAUI,MAAA,YAAY,EAAE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBiY,YAVnC;AAWI,MAAA,eAAe,EAAE,KAAK7X,KAAL,CAAWJ,KAAX,CAAiBiW,eAXtC;AAYI,MAAA,gBAAgB,EAAE,KAAKhK,yBAZ3B;AAaI,MAAA,eAAe,EAAE,KAAKf,wBAb1B;AAcI,MAAA,oBAAoB,EAAE,KAAKU,6BAd/B;AAeI,MAAA,aAAa,EAAE,KAAKL,sBAfxB;AAgBI,MAAA,SAAS,EAAE,KAAKnL,KAAL,CAAWJ,KAAX,CAAiBqL,kBAhBhC;AAiBI,MAAA,aAAa,EAAE,KAAKF,sBAjBxB;AAkBI,MAAA,YAAY,EAAE,KAAK/K,KAAL,CAAWJ,KAAX,CAAiB8X,YAAjB,IAAiC,EAlBnD;AAmBI,MAAA,UAAU,EAAE,KAAKlQ,UAnBrB;AAoBI,MAAA,gBAAgB,EAAE,KAAK7H,KAAL,CAAWmB,gBApBjC;AAqBI,MAAA,cAAc,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiB8O,cArBrC;AAsBI,MAAA,kBAAkB,EAAE,KAAK/O,KAAL,CAAWuB,kBAtBnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAyBI,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBgG,SAAjB,gBAEE,oBAAC,KAAD;AAEI,MAAA,SAAS,EAAE,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6N,SAFhC;AAII,MAAA,eAAe,EAAE,KAAKrD,eAJ1B;AAMI,MAAA,UAAU,EAAE,KAAKpK,KAAL,CAAWJ,KAAX,CAAiB2N,UANjC;AAQI,MAAA,cAAc,EAAE,KAAKvN,KAAL,CAAWJ,KAAX,CAAiBc,cARrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,gBAaI,oBAAC,gBAAD;AACE,MAAA,SAAS,EAAE,KAAKkR,cAAL,IACP,KAAKA,cAAL,CAAoB,gBAApB,CAFN;AAGE,MAAA,kBAAkB,EAAE,KAAK5R,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,IAA+B,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByQ,cAA3D,IAChB,KAAK3U,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByQ,cAA5B,CAA2CpO,MAA3C,GAAoD,CADpC,IAEb,KAAKvG,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByQ,cAA5B,CAA2C,CAA3C,EAA8C7F,kBALvD;AAME,MAAA,eAAe,EAAE,KAAK9O,KAAL,CAAWJ,KAAX,CAAiBoY,eANpC;AAOE,MAAA,YAAY,EAAE,KAAKrY,KAAL,CAAWgB,YAP3B;AAQE,MAAA,cAAc,EAAE,KAAKhB,KAAL,CAAWe,cAR7B;AASE,MAAA,iBAAiB,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBqH,iBATtC;AAUE,MAAA,qBAAqB,EAAE,KAAKjH,KAAL,CAAWJ,KAAX,CAAiBmH,qBAAjB,IAA0C,EAVnE;AAWE,MAAA,YAAY,EAAE,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBsH,YAXjC;AAYE,MAAA,gBAAgB,EAAE,KAAKvH,KAAL,CAAWmB,gBAZ/B;AAaE,MAAA,qBAAqB,EAAE,KAAKd,KAAL,CAAWmV,qBAbpC;AAcE,MAAA,YAAY,EAAE,KAAKnV,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,GACV,KAAK1F,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BwB,oBAA5B,CAAiDb,QADvC,GAEV,KAAK7E,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0R,iBAA5B,GACI,KAAK5V,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4B0R,iBAA5B,CAA8C/Q,QADlD,GAC6D,EAjBnE;AAkBE,MAAA,YAAY,EAAE,KAAK7E,KAAL,CAAWiY,YAlB3B;AAmBE,MAAA,gBAAgB,EAAE,KAAKrM,gBAnBzB;AAoBE,MAAA,eAAe,EAAE,KAAKxB,eApBxB;AAqBE,MAAA,oBAAoB,EAAE,KAAKc,oBArB7B;AAsBE,MAAA,aAAa,EAAE,KAAKsG,aAtBtB;AAuBE,MAAA,SAAS,EAAE,KAAKxR,KAAL,CAAWJ,KAAX,CAAiB6H,SAvB9B;AAwBE,MAAA,aAAa,EAAE,KAAKE,aAxBtB;AAyBE,MAAA,QAAQ,EAAE,KAAK3H,KAAL,CAAWJ,KAAX,CAAiB8B,QAzB7B;AA0BE,MAAA,YAAY,EAAE,KAAK1B,KAAL,CAAWJ,KAAX,CAAiBiY,YA1BjC;AA2BE,MAAA,eAAe,EAAE,KAAK7X,KAAL,CAAWJ,KAAX,CAAiBiW,eA3BpC;AA4BE,MAAA,OAAO,EAAE,KAAK5J,OA5BhB;AA6BE,MAAA,OAAO,EAAE,KAAKE,YA7BhB;AA8BE,MAAA,uBAAuB,EAAE,KAAK6B,uBA9BhC;AA+BE,MAAA,cAAc,EAAE,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,IACT,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBADnB,GAEZ,KAAKnE,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4BC,mBAA5B,CAAgDiI,cAFpC,GAEqD,KAjCvE;AAkCE,MAAA,kBAAkB,EAAE,KAAKzM,KAAL,CAAWuB,kBAlCjC;AAmCE,MAAA,YAAY,EAAE,KAAK+M,YAnCrB;AAoCE,MAAA,eAAe,EAAE,KAAKmC,eApCxB;AAqCE,MAAA,UAAU,EAAE,KAAKQ,UArCnB;AAsCE,MAAA,aAAa,EAAE,KAAKd,aAtCtB;AAuCE,MAAA,mBAAmB,EAAE,KAAK6B,mBAvC5B;AAwCE,MAAA,SAAS,EAAE,KAAK3R,KAAL,CAAWJ,KAAX,CAAiBE,SAxC9B;AAyCE,MAAA,UAAU,EAAE,KAAK0H,UAzCnB;AA0CE,MAAA,aAAa,EAAE,KAAK7H,KAAL,CAAWS,aA1C5B;AA2CE,MAAA,kBAAkB,EAAE,KAAKT,KAAL,CAAWc,kBA3CjC;AA4CE,MAAA,mBAAmB,EAAE,KAAK2Q,mBA5C5B;AA6CE,MAAA,wBAAwB,EAAE,KAAKC,wBA7CjC;AA8CE,MAAA,YAAY,EAAE,KAAKhT,YA9CrB;AA+CE,MAAA,aAAa,EAAE,KAAKC,aA/CtB;AAgDE,MAAA,uBAAuB,EAAE,KAAKyI,qBAhDhC;AAiDE,MAAA,cAAc,EAAE,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByQ,cAA5B,IAA8C,KAAK3U,KAAL,CAAWJ,KAAX,CAAiBsE,UAAjB,CAA4ByQ,cAA5B,CAA2C,CAA3C,CAA9C,IAA+F,EAjDjH;AAkDE,MAAA,SAAS,EAAE,KAAK3U,KAAL,CAAWJ,KAAX,CAAiB6N,SAlD9B;AAmDE,MAAA,iBAAiB,EAAE,KAAKtM,iBAnD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArG9B,CADJ,CAVJ,CADJ,CADJ,CA1GJ,CADJ;AA6RH;;AAv9FkD;;AA49FvD,eAAetD,OAAO,CAAC6B,eAAD,EAAkB;AACpC3B,EAAAA,cADoC;AAEpCD,EAAAA,kBAFoC;AAEhBE,EAAAA,sBAFgB;AAGpCC,EAAAA,aAHoC;AAGrBC,EAAAA,WAHqB;AAGRC,EAAAA,aAHQ;AAGOC,EAAAA,OAHP;AAIpCC,EAAAA,YAJoC;AAItBC,EAAAA,aAJsB;AAIPC,EAAAA,kBAJO;AAKpCC,EAAAA,kBALoC;AAKhBC,EAAAA,wBALgB;AAMpCC,EAAAA,aANoC;AAMrBC,EAAAA,gBANqB;AAMHC,EAAAA,2BANG;AAM0BC,EAAAA;AAN1B,CAAlB,CAAP,CAQbzC,UAAU,CAACyD,wBAAD,CARG,CAAf","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    comboChild, convertDateTimetoString,\r\n    formatInputDate,\r\n    formatInputDateWithoutT,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, showEsign, sortByField, validateEmail\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"react-awesome-query-builder\";\r\nimport Esign from '../audittrail/Esign';\r\n//import SplitterLayout from 'react-splitter-layout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n    handleExecuteClick = (event) => {\r\n        const selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord['filterquery'] !== \"\" && selectedRecord['filterquery'] !== undefined) {\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: selectedRecord['filterquery']\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTFILTER\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let selecteddata = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n        if (component.hasOwnProperty(\"child\")) {\r\n            if (this.props.Login.loadSubSample) {\r\n                const selectComponent = this.state.selectComponent;\r\n                component.child.map(y => {\r\n                    const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n                    const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n                    if (readonlyfields !== -1) {\r\n\r\n                        if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n                            selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n                                selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n                        } else {\r\n                            selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n                        }\r\n                    }\r\n                })\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectComponent,\r\n                        loadCustomSearchFilter: false,\r\n                        screenName: \"SubSample\",\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo)\r\n            } else {\r\n                const selectedRecord = this.state.selectedRecord;\r\n                component.child.map(y => {\r\n                    // component.filterfields.filter(x=>x.)\r\n                    const withoutCombocomponent = this.props.withoutCombocomponent;\r\n                    const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n                    if (readonlyfields !== -1) {\r\n\r\n                        if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n                            selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n                                selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n                        } else {\r\n                            selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n                        }\r\n                    }\r\n\r\n                })\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord,\r\n                        loadCustomSearchFilter: false,\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo)\r\n            }\r\n        }\r\n    };\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        console.log(\"handle save:\", selectedRecord);\r\n\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec,\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n            const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            if (comboData) {\r\n                comboData[\"item\"] = {...comboData[\"item\"], \"pkey\":control.valuemember, \r\n                \"nquerybuildertablecode\":control.nquerybuildertablecode, source:control.source};\r\n    \r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value\r\n                if (ncategorybasedflow !== 3) {\r\n                    product = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                const ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value\r\n                if (ncategorybasedflow !== 3) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                const ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value\r\n                if (ncategorybasedflow !== 3) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                const ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n                if (ncategorybasedflow === 3) {\r\n                    productCategory = true\r\n                } else {\r\n                    inputParem[\"ProductName\"] = Product[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    product = true\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                const ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n                if (ncategorybasedflow === 3) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                const ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n                if (ncategorybasedflow === 3) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                }\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType)\r\n            } else {\r\n\r\n                // if (productCategory) {\r\n                //     const ncategorybasedflow = selectedRecord[comboName] &&\r\n                //         selectedRecord[comboName].value;\r\n\r\n                // } else if\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType) {\r\n                    // const nproductcode = selectedRecord[comboName] &&\r\n                    //     selectedRecord[comboName].value;\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material)\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectComponent[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? {...comboData.item, pkey:control.valuemember, nquerybuildertablecode:control.nquerybuildertablecode, source:control.source} : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            comboData[\"item\"] = {...comboData[\"item\"], pkey:control.valuemember,\r\n                                 nquerybuildertablecode:control.nquerybuildertablecode,\r\n                                 source:control.source };\r\n          \r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectComponent = this.state.selectComponent\r\n        if (selectComponent[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectComponent[control.label] < parseFloat(control.max))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectComponent[control.label] > parseFloat(control.min))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false\r\n\r\n\r\n            this.subSampleDataGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, width: \"150px\" })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory)\r\n                                    this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: \"Specification\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\r\n        if (nneedsubsample) {\r\n            if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                delete selectedComponent[\"selected\"];\r\n                this.props.getTest(selectedComponent, this.props.Login,\r\n                    nneedsubsample, specBasedComponent);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n        } else {\r\n            const selectedComponent1 = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            }\r\n            this.props.getTest(selectedComponent1,\r\n                this.props.Login,\r\n                nneedsubsample, specBasedComponent);\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                kendoFilter: { logic: \"and\", filters: [] },\r\n                kendoSkip: 0,\r\n                kendoTake: 5,\r\n                awesomeConfig: undefined,\r\n                awesomeTree: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                masterStatus: \"\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList,\r\n                    masterStatus: \"\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //   this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //   saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\r\n            //     this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList//, selectedTestData: {}\r\n            }\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const comp1=this.props.Login.Component\r\n        const Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n\r\n        const index = comp1.findIndex(x => x.slno === dataItem.slno);\r\n        const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\r\n        let updateInfo ={};\r\n        let  incslno=comp1.length-1;\r\n        if (comp1.length !== dataItem.slno) {\r\n            subSampleDataGridList = []\r\n          //  let slno = Component[index].slno\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            const preList = comp1.splice(0, index);\r\n            const afterList = comp1.splice(index , comp1.length);\r\n          \r\n        \r\n            preList.map(x => {\r\n                Test[incslno] = Test && Test[x.slno] \r\n                x.slno = incslno;\r\n                incslno = incslno - 1;\r\n                return null;\r\n            })\r\n\r\n\r\n        const   Component1 = [...preList, ...afterList];\r\n\r\n        Component1.map(x => {\r\n                subSampleDataGridList.push({ ...x.jsonuidata, ...x })\r\n\r\n            })\r\n            sortByField(subSampleDataGridList,'desc','slno')\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component1[0].slno];\r\n             updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component1, selectedComponent: Component1[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n\r\n        } else {\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n             updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n        }\r\n\r\n\r\n       \r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue ?\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const component = [...data, ...SubSamplewithoutCombocomponent]\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (component.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.screenName !== 'scheduler') {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistration(true);\r\n                }\r\n            }\r\n        } else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistrationScheduler(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            checkBoxOperation: 3,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistrationScheduler() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n                this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ?\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\r\n            Map[\"nregtypecode\"] = 1;\r\n            Map[\"nregsubtypecode\"] = 1;\r\n            Map[\"nsampletypecode\"] = 1;\r\n            // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = false;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistrationScheduler(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.schedulerTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n\r\n            Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false)\r\n            //Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n        if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                Map[\"RegistrationSample\"] = [{\r\n                    \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                    , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                }]\r\n            } else {\r\n                Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                    this.state.specBasedComponent,\r\n                    this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n            }\r\n\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n            // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            console.log(\"param:\", param);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n            Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n            Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' :\r\n                                this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.Login.loadEsign === true ?\r\n                                    <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                    : this.props.loginoperation ?\r\n                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                        : <>\r\n                                            {this.props.operation ?\r\n                                                <>\r\n                                                    <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase())}\r\n                                                        defaultMessage='Add' />\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        this.props.Login.screenName ?\r\n                                                            <FormattedMessage id={this.props.Login.screenName} />\r\n                                                            : \"\"\r\n                                                    }\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName ?\r\n                                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                                    : \"\"}\r\n                                        </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.loadSpec ?\r\n                        this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                            this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ?\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                                            : this.props.Login.loadCustomSearchFilter ? \"\" :\r\n                                                <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                                    <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                                </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {this.props.Login.loadCustomSearchFilter ?\r\n                                        this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                            <KendoDatatoolFilter\r\n                                                filter={this.props.Login.kendoFilter}\r\n                                                handleFilterChange={this.handleFilterChange}\r\n                                                filterData={this.props.Login.lstPatient || []}\r\n                                                skip={this.props.Login.kendoSkip}\r\n                                                take={this.props.Login.kendoTake}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                fields={this.props.Login.fields || []}\r\n                                                gridColumns={this.props.Login.gridColumns || []}\r\n                                                onRowClick={this.handleKendoRowClick}\r\n\r\n                                            /> : <FilterQueryBuilder\r\n                                                fields={this.props.Login.fields || {}}\r\n                                                onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                tree={this.props.Login.awesomeTree}\r\n                                                config={this.props.Login.awesomeConfig}\r\n                                                skip={this.props.Login.kendoSkip}\r\n                                                take={this.props.Login.kendoTake}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                gridColumns={this.props.Login.gridColumns || []}\r\n                                                filterData={this.props.Login.lstPatient}\r\n                                                onRowClick={this.handleKendoRowClick}\r\n                                                handleExecuteClick={this.handleExecuteClick}\r\n                                            /> :\r\n                                        this.props.Login.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.props.Login.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.props.Login.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.state.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChangeComp}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    />\r\n                                                    : this.props.Login.loadSubSample ?\r\n                                                        <AddSubSample\r\n                                                            Component={this.props.Login.lstComponent || []}\r\n                                                            selectComponent={this.state.selectComponent}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            // Unit={this.props.Login.Unit || []}\r\n                                                            onComponentChange={this.onComponentChange}\r\n                                                            onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                            templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            handleDateChange={this.handleDateSubSampleChange}\r\n                                                            onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                            onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                            onNumericBlur={this.onNumericBlurSubSample}\r\n                                                            comboData={this.props.Login.SubSamplecomboData}\r\n                                                            onComboChange={this.onComboSubSampleChange}\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            childoperation={this.props.Login.childoperation}\r\n                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                        />\r\n                                                        : this.props.Login.loadEsign ?\r\n\r\n                                                            <Esign\r\n\r\n                                                                operation={this.props.Login.operation}\r\n\r\n                                                                onInputOnChange={this.onInputOnChange}\r\n\r\n                                                                inputParam={this.props.Login.inputParam}\r\n\r\n                                                                selectedRecord={this.props.Login.selectedRecord}\r\n\r\n                                                            />\r\n                                                            : <RegisterSlideOut\r\n                                                                editfield={this.sampleeditable &&\r\n                                                                    this.sampleeditable['sampleeditable']}\r\n                                                                ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                    this.props.Login.masterData.selectedSample.length > 0\r\n                                                                    && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                                loadPreregister={this.props.Login.loadPreregister}\r\n                                                                selectedSpec={this.state.selectedSpec}\r\n                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                selectedComponent={this.props.Login.selectedComponent}\r\n                                                                subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                                SelectedTest={this.props.Login.SelectedTest}\r\n                                                                selectedTestData={this.state.selectedTestData}\r\n                                                                userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                templateData={this.props.Login.masterData.registrationTemplate ?\r\n                                                                    this.props.Login.masterData.registrationTemplate.jsondata :\r\n                                                                    this.props.Login.masterData.schedulerTemplate ?\r\n                                                                        this.props.Login.masterData.schedulerTemplate.jsondata : {}}\r\n                                                                handleChange={this.props.handleChange}\r\n                                                                handleDateChange={this.handleDateChange}\r\n                                                                onInputOnChange={this.onInputOnChange}\r\n                                                                onNumericInputChange={this.onNumericInputChange}\r\n                                                                onNumericBlur={this.onNumericBlur}\r\n                                                                comboData={this.props.Login.comboData}\r\n                                                                onComboChange={this.onComboChange}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                                defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                AddSpec={this.AddSpec}\r\n                                                                addTest={this.addTestslide}\r\n                                                                handleComponentRowClick={this.handleComponentRowClick}\r\n                                                                nneedsubsample={this.props.Login.masterData\r\n                                                                    && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                    this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false}\r\n                                                                specBasedComponent={this.state.specBasedComponent}\r\n                                                                AddComponent={this.AddComponent}\r\n                                                                deleteComponent={this.deleteComponent}\r\n                                                                deleteTest={this.deleteTest}\r\n                                                                editComponent={this.editComponent}\r\n                                                                componentColumnList={this.componentColumnList}\r\n                                                                Component={this.props.Login.Component}\r\n                                                                TestChange={this.TestChange}\r\n                                                                testDataState={this.state.testDataState}\r\n                                                                subSampleDataState={this.state.subSampleDataState}\r\n                                                                testDataStateChange={this.testDataStateChange}\r\n                                                                subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                                addsubSample={this.addsubSample}\r\n                                                                editSubSample={this.editSubSample}\r\n                                                                subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                                selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                                operation={this.props.Login.operation}\r\n                                                                custombuttonclick={this.custombuttonclick}\r\n\r\n                                                            />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}