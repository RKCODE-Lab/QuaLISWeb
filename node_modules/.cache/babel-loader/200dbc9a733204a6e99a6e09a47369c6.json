{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\TestMasterPricing.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy, faPencilAlt, faThumbsUp, faTrashAlt, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, filterColumnData, getEditTestPriceVersionService, getTestPriceVersionDetail, getPricingAddTestService, getPricingEditService } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { process } from '@progress/kendo-data-query';\nimport { transactionStatus } from '../../components/Enumeration';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport AddType1Component from '../../components/type1component/AddType1Component'; //import AddUser from './AddUser';\n//import UserTabs from './UserTabs';\n\nimport Esign from '../audittrail/Esign';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPricingTest from './AddPricingTest';\nimport EditTestPricing from './EditTestPricing';\nimport { isText } from 'domhandler';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TestMasterPricing extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = inputParam => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: inputParam.operation,\n          ncontrolCode: inputParam.ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.intl.formatMessage({\n            id: 'IDS_TESTPRICEVERSION'\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        priceDataState: event.dataState\n      });\n    };\n\n    this.confirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteOrApproveTestPriceVersion(\"TestPriceVersion\", this.props.Login.masterData.SelectedTestPriceVersion, \"delete\", deleteId));\n    };\n\n    this.deleteTestPrice = deleteParam => {\n      const inputParam = {\n        classUrl: \"testpricing\",\n        methodUrl: \"TestPrice\",\n        //displayName: ,\n        inputData: {\n          \"testprice\": deleteParam.selectedRecord,\n          //.dataItem,\n          \"npriceversioncode\": this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        priceDataState: this.state.priceDataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_TESTPRICE\"\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.state.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, primaryFieldKey) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (primaryFieldKey && event.target.name === \"ncost\") {\n          const index = selectedRecord.findIndex(item => item.ntestpricecode === primaryFieldKey);\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)) {\n            selectedRecord[index][\"ncost\"] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let versionData = [];\n      versionData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"TestPriceVersion\",\n          selectedObject: \"SelectedTestPriceVersion\",\n          primaryKeyField: \"npriceversioncode\"\n        };\n        versionData[\"testpriceversion\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n        versionData[\"sversionname\"] = this.state.selectedRecord[\"sversionname\"] || \"\";\n        versionData[\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] || \"\";\n      } else {\n        //add               \n        versionData[\"testpriceversion\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\n          \"ntransactionstatus\": transactionStatus.DRAFT,\n          \"sversionname\": this.state.selectedRecord[\"sversionname\"] || \"\",\n          \"sdescription\": this.state.selectedRecord[\"sdescription\"] || \"\"\n        };\n\n        if (this.props.Login.operation === \"copy\") {\n          versionData[\"testpriceversion\"][\"npriceversioncode\"] = this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode;\n        }\n      }\n\n      if (versionData[\"testpriceversion\"].hasOwnProperty('esignpassword')) {\n        if (versionData[\"testpriceversion\"]['esignpassword'] === '') {\n          delete versionData[\"testpriceversion\"]['esigncomments'];\n          delete versionData[\"testpriceversion\"]['esignpassword'];\n        }\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"TestPriceVersion\",\n        inputData: versionData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveTestPrice = (saveType, formRef) => {\n      // console.log(\"this.props.Login.selectedRecord:\", this.props.Login.selectedRecord);\n      const testPriceData = {\n        \"userinfo\": this.props.Login.userInfo,\n        \"testpriceversion\": this.props.Login.masterData.SelectedTestPriceVersion,\n        \"npriceversioncode\": this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode\n      };\n      let postParam = undefined;\n      let priceDataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        priceDataState = this.state.priceDataState;\n        selectedId = this.props.Login.selectedId;\n        postParam = {\n          inputListName: \"TestPriceVersion\",\n          selectedObject: \"SelectedTestPriceVersion\",\n          primaryKeyField: \"npriceversioncode\"\n        };\n        testPriceData[\"testpricelist\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n      } else {\n        //add               \n        let priceList = [];\n        this.state.selectedRecord[\"ntestcode\"] && this.state.selectedRecord[\"ntestcode\"].map(item => {\n          return priceList.push({\n            ntestcode: item.value\n          });\n        });\n        testPriceData[\"testpricelist\"] = priceList;\n      }\n\n      if (testPriceData[\"testpriceversion\"].hasOwnProperty('esignpassword')) {\n        if (testPriceData[\"testpriceversion\"]['esignpassword'] === '') {\n          delete testPriceData[\"testpriceversion\"]['esigncomments'];\n          delete testPriceData[\"testpriceversion\"]['esignpassword'];\n          delete testPriceData[\"testpriceversion\"][\"agree\"];\n        }\n      } //console.log(\"update data:\", testPriceData);\n\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"TestPrice\",\n        inputData: testPriceData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch,\n        selectedId,\n        priceDataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteOrApproveTestPriceVersion = (methodUrl, SelectedTestPriceVersion, operation, ncontrolCode) => {\n      if (SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\n        const postParam = {\n          inputListName: \"TestPriceVersion\",\n          selectedObject: \"SelectedTestPriceVersion\",\n          primaryKeyField: \"npriceversioncode\",\n          primaryKeyValue: SelectedTestPriceVersion.npriceversioncode,\n          fetchUrl: \"testpricing/getTestPriceVersion\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl,\n          postParam,\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            \"testpriceversion\": SelectedTestPriceVersion\n          },\n          operation,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_TESTPRICEVERSION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"testpricing\",\n        methodUrl: \"TestPriceVersion\",\n        displayName: \"IDS_TESTPRICEVERSION\",\n        userInfo: this.props.Login.userInfo,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      this.props.callService(inputParam);\n    };\n\n    const _priceDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      SelectedTestPriceVersion: undefined,\n      screenName: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      isClearSearch: false,\n      data: [],\n      dataResult: [],\n      priceDataState: _priceDataState\n    };\n    this.searchRef = React.createRef(); // this.emailRef = React.createRef();\n\n    this.confirmMessage = new ConfirmMessage(); // this.versionFieldList = ['sversionname', 'sdescription'];\n\n    this.versionFieldList = [{\n      \"idsName\": \"IDS_VERSIONNAME\",\n      \"dataField\": \"sversionname\",\n      \"width\": \"200px\",\n      \"fieldLength\": \"100\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\",\n      \"fieldLength\": \"255\",\n      \"mandatory\": false,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textarea\"\n    }];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COST\",\n      \"dataField\": \"ncost\",\n      \"width\": \"200px\"\n    }];\n    this.mandatoryFields = [{\n      \"idsName\": \"IDS_VERSIONNAME\",\n      \"dataField\": \"sversionname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.mandatoryTestFields = [{\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"ntestcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.searchFieldList = [\"sversionname\", \"sversionno\", \"sdescription\", \"sversionstatus\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let versionStatusCSS = \"outline-secondary\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.APPROVED) {\n      versionStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.RETIRED) {\n      versionStatusCSS = \"outline-danger\";\n      activeIconCSS = \"\";\n    } else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\n      activeIconCSS = \"\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddTestPriceVersion\") && this.state.controlMap.get(\"AddTestPriceVersion\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditTestPriceVersion\") && this.state.controlMap.get(\"EditTestPriceVersion\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteTestPriceVersion\") && this.state.controlMap.get(\"DeleteTestPriceVersion\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveTestPriceVersion\") && this.state.controlMap.get(\"ApproveTestPriceVersion\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyTestPriceVersion\") && this.state.controlMap.get(\"CopyTestPriceVersion\").ncontrolcode;\n    const addPriceId = this.state.controlMap.has(\"AddTestPrice\") && this.state.controlMap.get(\"AddTestPrice\").ncontrolcode;\n    const updatePriceId = this.state.controlMap.has(\"EditTestPrice\") && this.state.controlMap.get(\"EditTestPrice\").ncontrolcode; // const deletePriceId = this.state.controlMap.has(\"DeleteTestPrice\") && this.state.controlMap.get(\"DeleteTestPrice\").ncontrolcode;\n\n    const filterParam = {\n      inputListName: \"TestPriceVersion\",\n      selectedObject: \"SelectedTestPriceVersion\",\n      primaryKeyField: \"npriceversioncode\",\n      fetchUrl: \"testpricing/getTestPriceVersion\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const addParam = {\n      screenName: \"IDS_TESTMASTERPRICING\",\n      operation: \"create\",\n      primaryKeyName: \"npriceversioncode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId\n    };\n    const editParam = {\n      screenName: \"IDS_TESTMASTERPRICING\",\n      operation: \"update\",\n      primaryKeyName: \"npriceversioncode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      inputListName: \"TestPriceVersion\",\n      selectedObject: \"SelectedTestPriceVersion\"\n    };\n    const copyParam = {\n      screenName: \"IDS_TESTMASTERPRICING\",\n      operation: \"copy\",\n      primaryKeyName: \"npriceversioncode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: copyId\n    };\n    const editTestPriceParam = {\n      screenName: \"IDS_PRICE\",\n      \"operation\": \"update\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: updatePriceId\n    }; //console.log(\"props:\", this.props.Login.masterData.TestPriceVersion);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TESTMASTERPRICING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.TestPriceVersion,\n      getMasterDetail: testPriceVersion => this.props.getTestPriceVersionDetail(testPriceVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedTestPriceVersion,\n      primaryKeyField: \"npriceversioncode\",\n      mainField: \"sversionname\",\n      firstField: \"sversionno\",\n      secondField: \"sversionstatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.openModal(addParam),\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.TestPriceVersion && this.props.Login.masterData.TestPriceVersion.length > 0 && this.props.Login.masterData.SelectedTestPriceVersion ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedTestPriceVersion.sversionname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${versionStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 61\n      }\n    }, activeIconCSS !== \"\" ? /*#__PURE__*/React.createElement(\"i\", {\n      class: activeIconCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 89\n      }\n    }) : \"\", this.props.Login.masterData.SelectedTestPriceVersion.sversionstatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editTestPriceVersion\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.getEditTestPriceVersionService(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteTestPriceVersion\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approveTestPriceVersion\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.deleteOrApproveTestPriceVersion(\"TestPriceVersion\", this.props.Login.masterData.SelectedTestPriceVersion, \"approve\", approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"copyTestPriceVersion\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      onClick: () => this.openModal(copyParam) // onClick={() => this.copyTestPriceVersion(\"TestPriceVersion\", this.props.Login.masterData.SelectedTestPriceVersion,\n      //     \"copy\", approveId)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTestPriceVersion.sdescription)))), /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 51\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addPrice\",\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(addPriceId) === -1,\n      onClick: () => this.props.getPricingAddTestService(\"IDS_TEST\", \"create\", this.props.Login.masterData, this.props.Login.userInfo, addPriceId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 70\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEST\",\n      defaultMessage: \"Test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"updatePrice\",\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(updatePriceId) === -1,\n      onClick: () => this.props.getPricingEditService({ ...editTestPriceParam,\n        \"updateType\": \"All\",\n        priceDataState: undefined\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 69\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PRICE\",\n      defaultMessage: \"Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 69\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ntestpricecode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.priceDataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getPricingEditService,\n      editParam: { ...editTestPriceParam,\n        \"updateType\": \"Single\",\n        priceDataState: this.state.priceDataState\n      },\n      deleteRecord: this.deleteTestPrice,\n      deleteParam: {\n        operation: \"delete\"\n      },\n      methodUrl: \"TestPrice\" // reloadData={this.reloadData}\n      ,\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable' // gridHeight = {'600px'}\n      ,\n      isActionRequired: true,\n      isToolBarRequired: false,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 65\n      }\n    })))))) : \"\"))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_PRICE\" ? this.onSaveTestPrice : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_PRICE\" ? this.props.Login.operation === \"update\" ? [] : this.mandatoryTestFields : this.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 25\n        }\n      }) : this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_PRICE\" ? this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(EditTestPricing, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange //testPriceList={this.props.Login.testPriceList || []}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddPricingTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        pricingTestList: this.props.Login.pricingTestList || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 34\n        }\n      }) : /*#__PURE__*/React.createElement(AddType1Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.versionFieldList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.TestPrice,\n          dataResult: process(this.props.Login.masterData.TestPrice || [], this.state.priceDataState)\n        });\n      } else {\n        let {\n          priceDataState\n        } = this.state;\n\n        if (this.props.Login.priceDataState === undefined) {\n          priceDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData.TestPrice,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.TestPrice || [], priceDataState),\n          priceDataState\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  getEditTestPriceVersionService,\n  updateStore,\n  filterColumnData,\n  getTestPriceVersionDetail,\n  getPricingAddTestService,\n  getPricingEditService\n})(injectIntl(TestMasterPricing));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/TestMasterPricing.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faCopy","faPencilAlt","faThumbsUp","faTrashAlt","faPlus","DataGrid","callService","crudMaster","validateEsignCredential","updateStore","filterColumnData","getEditTestPriceVersionService","getTestPriceVersionDetail","getPricingAddTestService","getPricingEditService","DEFAULT_RETURN","showEsign","getControlMap","process","transactionStatus","ListMaster","SlideOutModal","ReadOnlyText","ContentPanel","AddType1Component","Esign","ConfirmMessage","AddPricingTest","EditTestPricing","isText","mapStateToProps","state","Login","TestMasterPricing","Component","constructor","props","openModal","inputParam","updateInfo","typeName","data","selectedRecord","operation","ncontrolCode","ncontrolcode","selectedId","screenName","intl","formatMessage","id","dataStateChange","event","setState","dataResult","dataState","priceDataState","confirmDelete","deleteId","confirmMessage","confirm","deleteOrApproveTestPriceVersion","masterData","SelectedTestPriceVersion","deleteTestPrice","deleteParam","classUrl","methodUrl","inputData","npriceversioncode","userInfo","userRoleControlRights","nformcode","loadEsign","screenData","closeModal","onComboChange","comboData","fieldName","onNumericInputOnChange","value","name","onInputOnChange","primaryFieldKey","target","type","checked","ACTIVE","DEACTIVE","YES","NO","index","findIndex","item","ntestpricecode","test","onSaveClick","saveType","formRef","versionData","postParam","undefined","inputListName","selectedObject","primaryKeyField","JSON","parse","stringify","nmastersitecode","DRAFT","hasOwnProperty","searchRef","isClearSearch","onSaveTestPrice","testPriceData","priceList","map","push","ntestcode","ntransactionstatus","primaryKeyValue","fetchUrl","fecthInputObject","userinfo","warn","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","reloadData","current","displayName","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","createRef","versionFieldList","extractedColumnList","mandatoryFields","mandatoryTestFields","searchFieldList","getDerivedStateFromProps","render","versionStatusCSS","activeIconCSS","APPROVED","RETIRED","addId","has","get","editId","approveId","copyId","addPriceId","updatePriceId","filterParam","addParam","primaryKeyName","editParam","copyParam","editTestPriceParam","searchedData","TestPriceVersion","testPriceVersion","length","sversionname","sversionstatus","indexOf","sdescription","pricingTestList","componentDidUpdate","previousProps","Object","values","TestPrice","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faPencilAlt, faThumbsUp, faTrashAlt, faPlus} from '@fortawesome/free-solid-svg-icons';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, filterColumnData,\r\n   getEditTestPriceVersionService, getTestPriceVersionDetail, getPricingAddTestService,\r\n   getPricingEditService} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\n\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport AddType1Component from '../../components/type1component/AddType1Component';\r\n//import AddUser from './AddUser';\r\n//import UserTabs from './UserTabs';\r\nimport Esign from '../audittrail/Esign';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPricingTest from './AddPricingTest';\r\nimport EditTestPricing from './EditTestPricing';\r\nimport { isText } from 'domhandler';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass TestMasterPricing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const priceDataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            SelectedTestPriceVersion: undefined,\r\n            screenName: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            isClearSearch: false,\r\n            data: [], \r\n            dataResult: [],\r\n            priceDataState: priceDataState,\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n       // this.emailRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n       // this.versionFieldList = ['sversionname', 'sdescription'];\r\n\r\n        this.versionFieldList = [\r\n            { \"idsName\": \"IDS_VERSIONNAME\", \"dataField\": \"sversionname\", \"width\": \"200px\",\"fieldLength\":\"100\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" , \"fieldLength\":\"255\",\"mandatory\": false , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textarea\"},\r\n            ]\r\n        this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\"},\r\n                { \"idsName\": \"IDS_COST\", \"dataField\": \"ncost\", \"width\": \"200px\" },\r\n               ]\r\n        this.mandatoryFields = [ { \"idsName\": \"IDS_VERSIONNAME\", \"dataField\": \"sversionname\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                    ];\r\n        this.mandatoryTestFields = [ { \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestcode\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                ];\r\n        this.searchFieldList = [\"sversionname\", \"sversionno\", \"sdescription\", \"sversionstatus\"];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        let versionStatusCSS = \"outline-secondary\";\r\n        let activeIconCSS = \"fa fa-check\"\r\n        if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.APPROVED) {\r\n            versionStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            versionStatusCSS = \"outline-danger\";\r\n            activeIconCSS = \"\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\r\n            activeIconCSS = \"\";\r\n        }\r\n\r\n        const addId = this.state.controlMap.has(\"AddTestPriceVersion\") && this.state.controlMap.get(\"AddTestPriceVersion\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditTestPriceVersion\") && this.state.controlMap.get(\"EditTestPriceVersion\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteTestPriceVersion\") && this.state.controlMap.get(\"DeleteTestPriceVersion\").ncontrolcode\r\n        const approveId = this.state.controlMap.has(\"ApproveTestPriceVersion\") && this.state.controlMap.get(\"ApproveTestPriceVersion\").ncontrolcode\r\n        const copyId = this.state.controlMap.has(\"CopyTestPriceVersion\") && this.state.controlMap.get(\"CopyTestPriceVersion\").ncontrolcode\r\n        const addPriceId = this.state.controlMap.has(\"AddTestPrice\") && this.state.controlMap.get(\"AddTestPrice\").ncontrolcode;\r\n        const updatePriceId = this.state.controlMap.has(\"EditTestPrice\") && this.state.controlMap.get(\"EditTestPrice\").ncontrolcode;\r\n       // const deletePriceId = this.state.controlMap.has(\"DeleteTestPrice\") && this.state.controlMap.get(\"DeleteTestPrice\").ncontrolcode;\r\n     \r\n     \r\n\r\n        const filterParam = {\r\n            inputListName: \"TestPriceVersion\", selectedObject: \"SelectedTestPriceVersion\", primaryKeyField: \"npriceversioncode\",\r\n            fetchUrl: \"testpricing/getTestPriceVersion\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_TESTMASTERPRICING\", operation: \"create\", primaryKeyName: \"npriceversioncode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId\r\n        }\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_TESTMASTERPRICING\", operation: \"update\", primaryKeyName: \"npriceversioncode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId, inputListName: \"TestPriceVersion\", selectedObject: \"SelectedTestPriceVersion\"\r\n        };\r\n\r\n        const copyParam = {\r\n            screenName: \"IDS_TESTMASTERPRICING\", operation: \"copy\", primaryKeyName: \"npriceversioncode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: copyId\r\n        }\r\n\r\n        const editTestPriceParam = {screenName:\"IDS_PRICE\", \"operation\":\"update\", \r\n                                    masterData:this.props.Login.masterData, userInfo: this.props.Login.userInfo, \r\n                                    ncontrolCode:updatePriceId};\r\n\r\n        //console.log(\"props:\", this.props.Login.masterData.TestPriceVersion);\r\n        return (<>\r\n            {/* Start of get display*/}\r\n            <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\">\r\n                <Row noGutters>\r\n                    <Col md={4}>\r\n                        {/* <Row noGutters>\r\n                            <Col md={12}> */}\r\n                            {/* <div className=\"list-fixed-wrap\"> */}\r\n                                <ListMaster\r\n                                    screenName={this.props.intl.formatMessage({ id: \"IDS_TESTMASTERPRICING\" })}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.TestPriceVersion}\r\n                                    getMasterDetail={(testPriceVersion) => this.props.getTestPriceVersionDetail(testPriceVersion, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedTestPriceVersion}\r\n                                    primaryKeyField=\"npriceversioncode\"\r\n                                    mainField=\"sversionname\"\r\n                                    firstField=\"sversionno\"\r\n                                    secondField=\"sversionstatus\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    filterParam={filterParam}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    addId={addId}\r\n                                    searchRef={this.searchRef}\r\n                                    reloadData={this.reloadData}\r\n                                    openModal={() => this.openModal(addParam)}\r\n                                    isMultiSelecct={false}\r\n                                    hidePaging={false}\r\n                                    isClearSearch={this.props.Login.isClearSearch}\r\n                                />\r\n                            {/* </div>\r\n                        </Col></Row> */}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        {/* <Row>\r\n                            <Col md={12}> */}\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.TestPriceVersion && this.props.Login.masterData.TestPriceVersion.length > 0 && this.props.Login.masterData.SelectedTestPriceVersion ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    {this.props.Login.masterData.SelectedTestPriceVersion.sversionname}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                            <span className={`btn btn-outlined ${versionStatusCSS} btn-sm ml-3`}>\r\n                                                                {activeIconCSS !== \"\" ? <i class={activeIconCSS}></i> : \"\"}\r\n                                                                {this.props.Login.masterData.SelectedTestPriceVersion.sversionstatus}\r\n                                                            \r\n                                                            </span>\r\n                                                        </h2>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <div className=\"d-inline\">\r\n                                                            <Nav.Link name=\"editTestPriceVersion\" hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                //data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.props.getEditTestPriceVersionService(editParam)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"deleteTestPriceVersion\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                               // data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.confirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                               \r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"approveTestPriceVersion\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                //data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={() => this.deleteOrApproveTestPriceVersion(\"TestPriceVersion\", this.props.Login.masterData.SelectedTestPriceVersion,\r\n                                                                    \"approve\", approveId)}>\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"copyTestPriceVersion\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                onClick={()=>this.openModal(copyParam)}\r\n                                                                // onClick={() => this.copyTestPriceVersion(\"TestPriceVersion\", this.props.Login.masterData.SelectedTestPriceVersion,\r\n                                                                //     \"copy\", approveId)}\r\n                                                                >\r\n                                                                <FontAwesomeIcon icon={faCopy} />\r\n                                                            </Nav.Link>\r\n                                                        </div>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </div>\r\n\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body className=\"form-static-wrap\">\r\n                                                {/* <Card.Text> */}\r\n\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_DESCRIPTION\" message=\"Description\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTestPriceVersion.sdescription}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                  \r\n                                                </Row>\r\n                                                {/* <Row>\r\n                                                    <Col>\r\n                                                        <div className=\"horizontal-line\"></div>\r\n                                                    </Col>\r\n                                                </Row> */}\r\n                                                  <Card className=\"at-tabs border-0\">\r\n                                                        <Row noGutters>\r\n                                                            <Col md={12}>\r\n                                                                <div className=\"d-flex justify-content-end\">\r\n                                                                <Nav.Link name=\"addPrice\" className=\"add-txt-btn\" \r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(addPriceId) === -1}\r\n                                                                        onClick={()=>this.props.getPricingAddTestService(\"IDS_TEST\", \"create\", this.props.Login.masterData, this.props.Login.userInfo, addPriceId)}\r\n                                                                        >\r\n                                                                     <FontAwesomeIcon icon={faPlus} /> { } \r\n                                                                    <FormattedMessage id='IDS_TEST' defaultMessage='Test' />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link name=\"updatePrice\" className=\"add-txt-btn\" \r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(updatePriceId) === -1}\r\n                                                                        onClick={()=>this.props.getPricingEditService({...editTestPriceParam, \"updateType\":\"All\", priceDataState:undefined})}\r\n                                                                        >\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt} /> { }\r\n                                                                    <FormattedMessage id='IDS_PRICE' defaultMessage='Price' />\r\n                                                                </Nav.Link>\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row noGutters>\r\n                                                            <Col md={12}>\r\n                                                                <DataGrid\r\n                                                                    primaryKeyField={\"ntestpricecode\"}\r\n                                                                    data={this.state.data}\r\n                                                                    dataResult={this.state.dataResult}\r\n                                                                    dataState={this.state.priceDataState}\r\n                                                                    dataStateChange={this.dataStateChange}\r\n                                                                    extractedColumnList={this.extractedColumnList}\r\n                                                                    controlMap={this.state.controlMap}\r\n                                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    inputParam={this.props.Login.inputParam}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    fetchRecord={this.props.getPricingEditService}\r\n                                                                    editParam={{...editTestPriceParam, \"updateType\":\"Single\", priceDataState:this.state.priceDataState}}\r\n                                                                    deleteRecord={this.deleteTestPrice}\r\n                                                                    deleteParam={{operation:\"delete\"}}\r\n                                                                    methodUrl={\"TestPrice\"}\r\n                                                                // reloadData={this.reloadData}\r\n                                                                    addRecord = {() => this.openModal(addId)}\r\n                                                                    pageable={true}\r\n                                                                    scrollable={'scrollable'}\r\n                                                                // gridHeight = {'600px'}\r\n                                                                    isActionRequired={true}\r\n                                                                    isToolBarRequired={false}\r\n                                                                    selectedId={this.props.Login.selectedId}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                </Card>\r\n                                                {/* </Card.Text> */}\r\n                                            \r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col></Row>\r\n                    {/* </Col>\r\n                </Row> */}\r\n            </div>\r\n\r\n            {/* End of get display*/}\r\n\r\n            {/* Start of Modal Sideout for  Creation */}\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {this.props.Login.openModal ?\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={(this.props.Login.screenName === \"IDS_TEST\" || \r\n                                this.props.Login.screenName === \"IDS_PRICE\")  ? this.onSaveTestPrice: this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={(this.props.Login.screenName === \"IDS_TEST\" || \r\n                    this.props.Login.screenName === \"IDS_PRICE\")? \r\n                            this.props.Login.operation === \"update\" ? [] : this.mandatoryTestFields:\r\n                            this.mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : (this.props.Login.screenName === \"IDS_TEST\" || \r\n                        this.props.Login.screenName === \"IDS_PRICE\")  ? \r\n                            this.props.Login.operation === \"update\" ?\r\n                                <EditTestPricing\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    //testPriceList={this.props.Login.testPriceList || []}\r\n                                    />\r\n                                :<AddPricingTest\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onComboChange={this.onComboChange}\r\n                                    pricingTestList={this.props.Login.pricingTestList || []}/>\r\n\r\n                            : <AddType1Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.versionFieldList}\r\n                            />\r\n                      \r\n                    }\r\n                /> : \"\"}\r\n            {/* End of Modal Sideout for User Creation */}\r\n        </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ userRoleControlRights, controlMap,\r\n                    data: this.props.Login.masterData.TestPrice,\r\n                    dataResult: process(this.props.Login.masterData.TestPrice || [], this.state.priceDataState), });\r\n            }\r\n            else {        \r\n                let {priceDataState} = this.state;\r\n                if(this.props.Login.priceDataState === undefined){\r\n                    priceDataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }         \r\n                this.setState({\r\n                    data: this.props.Login.masterData.TestPrice, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.TestPrice ||[],priceDataState),\r\n                    priceDataState\r\n                });\r\n            }  \r\n        }\r\n    }\r\n\r\n    openModal = (inputParam) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: inputParam.operation, ncontrolCode:inputParam.ncontrolcode, selectedId:null,\r\n                openModal: true, screenName: this.props.intl.formatMessage({id:'IDS_TESTPRICEVERSION'})\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            priceDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    confirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteOrApproveTestPriceVersion(\"TestPriceVersion\", this.props.Login.masterData.SelectedTestPriceVersion, \"delete\", deleteId));\r\n    }\r\n\r\n    deleteTestPrice = (deleteParam) =>{\r\n        const inputParam = {\r\n            classUrl: \"testpricing\",\r\n            methodUrl: \"TestPrice\",\r\n            //displayName: ,\r\n            inputData: {\r\n                \"testprice\": deleteParam.selectedRecord,//.dataItem,\r\n                \"npriceversioncode\":this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:\"delete\",\r\n            priceDataState:this.state.priceDataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_TESTPRICE\" }),\r\n                    operation:deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.state.selectedId;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event, primaryFieldKey) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {   \r\n            if(primaryFieldKey && event.target.name === \"ncost\"){\r\n                const index = selectedRecord.findIndex(item=>item.ntestpricecode === primaryFieldKey);\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)){\r\n                    selectedRecord[index][\"ncost\"] = event.target.value;\r\n                }\r\n            }\r\n            else{      \r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }           \r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let versionData = [];\r\n        versionData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"TestPriceVersion\", selectedObject: \"SelectedTestPriceVersion\", primaryKeyField: \"npriceversioncode\" };\r\n            versionData[\"testpriceversion\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n            versionData[\"sversionname\"]=this.state.selectedRecord[\"sversionname\"] || \"\";\r\n            versionData[\"sdescription\"]=this.state.selectedRecord[\"sdescription\"] || \"\";\r\n\r\n        }\r\n        else {\r\n            //add               \r\n            versionData[\"testpriceversion\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\r\n                                                 \"ntransactionstatus\": transactionStatus.DRAFT,\r\n                                                \"sversionname\":this.state.selectedRecord[\"sversionname\"] || \"\",\r\n                                                \"sdescription\":this.state.selectedRecord[\"sdescription\"] || \"\",\r\n                                            };\r\n\r\n            if(this.props.Login.operation === \"copy\"){\r\n                versionData[\"testpriceversion\"][\"npriceversioncode\"] = this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode;\r\n            }\r\n\r\n        }\r\n        if (versionData[\"testpriceversion\"].hasOwnProperty('esignpassword')) {\r\n            if (versionData[\"testpriceversion\"]['esignpassword'] === '') {\r\n                delete versionData[\"testpriceversion\"]['esigncomments']\r\n                delete versionData[\"testpriceversion\"]['esignpassword']\r\n            }\r\n        }\r\n      \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"TestPriceVersion\",\r\n            inputData: versionData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    onSaveTestPrice = (saveType, formRef) => {\r\n\r\n       // console.log(\"this.props.Login.selectedRecord:\", this.props.Login.selectedRecord);\r\n        const testPriceData = {\"userinfo\": this.props.Login.userInfo,\r\n                                \"testpriceversion\":this.props.Login.masterData.SelectedTestPriceVersion,\r\n                                \"npriceversioncode\":this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode};\r\n\r\n        let postParam = undefined;\r\n        let priceDataState = undefined;\r\n        let selectedId = null;\r\n        \r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            priceDataState = this.state.priceDataState;\r\n            selectedId = this.props.Login.selectedId; \r\n            postParam = { inputListName: \"TestPriceVersion\", selectedObject: \"SelectedTestPriceVersion\", primaryKeyField: \"npriceversioncode\" };\r\n            testPriceData[\"testpricelist\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));           \r\n        }\r\n        else {\r\n            //add               \r\n                                               \r\n            let priceList = [];\r\n            this.state.selectedRecord[\"ntestcode\"] &&\r\n                this.state.selectedRecord[\"ntestcode\"].map(item => {\r\n                    return priceList.push({\r\n                       ntestcode: item.value                      \r\n                    })\r\n                })\r\n           \r\n            testPriceData[\"testpricelist\"] = priceList;                             \r\n\r\n        }\r\n        if (testPriceData[\"testpriceversion\"].hasOwnProperty('esignpassword')) {\r\n            if (testPriceData[\"testpriceversion\"]['esignpassword'] === '') {\r\n                delete testPriceData[\"testpriceversion\"]['esigncomments']\r\n                delete testPriceData[\"testpriceversion\"]['esignpassword']\r\n                delete testPriceData[\"testpriceversion\"][\"agree\"]\r\n            }\r\n        }\r\n       //console.log(\"update data:\", testPriceData);\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"TestPrice\",\r\n            inputData: testPriceData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef,\r\n            isClearSearch: this.props.Login.isClearSearch,\r\n            selectedId, priceDataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {            \r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    deleteOrApproveTestPriceVersion = (methodUrl, SelectedTestPriceVersion, operation, ncontrolCode) => {\r\n        if (SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {         \r\n\r\n            const postParam = {\r\n                inputListName: \"TestPriceVersion\", selectedObject: \"SelectedTestPriceVersion\",\r\n                primaryKeyField: \"npriceversioncode\",\r\n                primaryKeyValue: SelectedTestPriceVersion.npriceversioncode,\r\n                fetchUrl: \"testpricing/getTestPriceVersion\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl, postParam,\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"testpriceversion\": SelectedTestPriceVersion\r\n                },\r\n                operation,\r\n                isClearSearch: this.props.Login.isClearSearch\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_TESTPRICEVERSION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }    \r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTTESTPRICEVERSION\" }));\r\n        }\r\n    \r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"testpricing\",\r\n            methodUrl: \"TestPriceVersion\",\r\n            displayName: \"IDS_TESTPRICEVERSION\",\r\n            userInfo: this.props.Login.userInfo,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,getEditTestPriceVersionService,\r\n    updateStore,filterColumnData, getTestPriceVersionDetail, getPricingAddTestService,\r\n    getPricingEditService\r\n})(injectIntl(TestMasterPricing));\r\n\r\n"]},"metadata":{},"sourceType":"module"}