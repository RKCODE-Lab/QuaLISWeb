{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, showEsign, validateEmail } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"react-awesome-query-builder\"; //import SplitterLayout from 'react-splitter-layout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false,\n      kendoSkip: 0,\n      kendoTake: 5,\n      kendoFilter: {\n        logic: \"and\",\n        filters: []\n      },\n      awesomeTree: undefined,\n      awesomeConfig: undefined\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      this.setState({\n        kendoFilter: event.filter\n      });\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        awesomeTree: immutableTree,\n        awesomeConfig: config,\n        selectedRecord: selectedRecord\n      });\n    };\n\n    this.handleExecuteClick = event => {\n      const selectedRecord = this.state.selectedRecord;\n      const inputparam = {\n        component: this.props.Login.seletedFilterComponent,\n        userinfo: this.props.Login.userInfo,\n        filterquery: selectedRecord['filterquery']\n      };\n      this.props.getDynamicFilterExecuteData(inputparam);\n    };\n\n    this.handleKendoRowClick = event => {\n      let selecteddata = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component.hasOwnProperty(\"child\")) {\n        if (this.props.Login.loadSubSample) {\n          const selectComponent = this.state.selectComponent;\n          component.child.map(y => {\n            const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\n            const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\n\n            if (readonlyfields !== -1) {\n              if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\n                selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\";\n              } else {\n                selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\";\n              }\n            }\n          });\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent,\n              loadCustomSearchFilter: false,\n              screenName: \"SubSample\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          const selectedRecord = this.state.selectedRecord;\n          component.child.map(y => {\n            // component.filterfields.filter(x=>x.)\n            const withoutCombocomponent = this.props.withoutCombocomponent;\n            const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\n\n            if (readonlyfields !== -1) {\n              if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\n                selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\";\n              } else {\n                selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\";\n              }\n            }\n          });\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              loadCustomSearchFilter: false,\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIMEN\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": \"IDS_SPECIMEN\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.label,\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec,\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n                specBasedComponent\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false;\n        const nsampletypecode = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode);\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name\n        };\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n          if (ncategorybasedflow !== 3) {\n            product = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Instrument') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          const ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value;\n\n          if (ncategorybasedflow !== 3) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          const ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value;\n\n          if (ncategorybasedflow !== 3) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          const ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\n\n          if (ncategorybasedflow === 3) {\n            productCategory = true;\n          } else {\n            inputParem[\"ProductName\"] = Product[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            product = true;\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          const ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\n\n          if (ncategorybasedflow === 3) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          const ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\n\n          if (ncategorybasedflow === 3) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType);\n        } else {\n          // if (productCategory) {\n          //     const ncategorybasedflow = selectedRecord[comboName] &&\n          //         selectedRecord[comboName].value;\n          // } else if\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType) {\n            // const nproductcode = selectedRecord[comboName] &&\n            //     selectedRecord[comboName].value;\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material);\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: \"Specification\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\n      if (nneedsubsample) {\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n          delete selectedComponent[\"selected\"];\n          this.props.getTest(selectedComponent, this.props.Login, nneedsubsample, specBasedComponent);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        }\n      } else {\n        const selectedComponent1 = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        this.props.getTest(selectedComponent1, this.props.Login, nneedsubsample, specBasedComponent);\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        kendoFilter: {\n          logic: \"and\",\n          filters: [],\n          kendoSkip: 0,\n          kendoTake: 5\n        }\n      });\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const Component = this.props.Login.Component;\n      const subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = Component.findIndex(x => x.slno === dataItem.slno);\n\n      if (index > -1) {\n        Component.splice(index, 1);\n        subSampleDataGridList.splice(index, 1);\n      }\n\n      Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n      SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: Component[0],\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = specBasedComponent => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (SubSamplewithoutCombocomponent.length === 0 || data.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      } else {\n        if (operation === \"create\") {\n          this.insertRegistration(true);\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_SPECIMEN\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false;\n      this.subSampleDataGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_SPECIMEN\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                width: \"150px\"\n              });\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //   this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //   saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\n      //     this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList //, selectedTestData: {}\n\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample,\n      checkBoxOperation: 3,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents);\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"; // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n      // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n      Map[\"FromDate\"] = \"\";\n      Map[\"ToDate\"] = \"\";\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n      Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n      Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n      Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"checkBoxOperation\"] = 3;\n      const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nflag\"] = 2; // Map[\"ntype\"] = 2;\n\n      Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistration(inputParam, this.props.Login.masterData);\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2562,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2579,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2580,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2583,\n        columnNumber: 33\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2585,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2589,\n        columnNumber: 49\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2594,\n        columnNumber: 57\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2600,\n        columnNumber: 49\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2605,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2609,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2612,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2613,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2614,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2618,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2619,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2620,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2623,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2624,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2625,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2628,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2629,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2630,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2634,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2637,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2640,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2641,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2642,\n        columnNumber: 49\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2646,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2647,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2648,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2654,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2655,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2656,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2660,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2661,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2662,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2672,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2673,\n        columnNumber: 33\n      }\n    }, this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.state.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.state.kendoSkip,\n      take: this.state.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2676,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.state.awesomeTree,\n      config: this.state.awesomeConfig,\n      skip: this.state.kendoSkip,\n      take: this.state.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2687,\n        columnNumber: 50\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2701,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2713,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2718,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord // Unit={this.props.Login.Unit || []}\n      ,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2737,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState //componentDataState={this.state.componentDataState}\n      ,\n      testDataStateChange: this.testDataStateChange //componentDataStateChange={this.componentDataStateChange}\n      ,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample // onNumericInputChange={this.onNumericInputChange}\n      ,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      custombuttonclick: this.custombuttonclick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2760,\n        columnNumber: 59\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","transactionStatus","faCalculator","comboChild","convertDateTimetoString","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","showEsign","validateEmail","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationSubSample","SubSample","TestListManipulation","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","kendoSkip","kendoTake","kendoFilter","logic","filters","awesomeTree","undefined","awesomeConfig","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","handlePageChange","setState","handleFilterChange","filter","onChangeAwesomeQueryBuilder","immutableTree","config","sqlFormat","handleExecuteClick","seletedFilterComponent","filterquery","handleKendoRowClick","selecteddata","dataItem","hasOwnProperty","loadSubSample","child","map","y","withoutCombocomponent","readonlyfields","findIndex","k","label","languagetypeCode","updateInfo","typeName","data","loadCustomSearchFilter","screenName","masterData","RealRegSubTypeValue","sregsubtypename","handleSaveClick","saveType","startLabel","mandatoryFields","loadComponent","SubSampleTemplate","jsondata","row","children","column","componentrow","mandatory","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","intl","formatMessage","id","loadTest","loadSpec","registrationTemplate","esign","forEach","item","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","ncomponentrequired","subSampleDataGridList","width","selectedComponent","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","onComboChange","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","nsampletypecode","RealSampleTypeValue","inputParem","source","primarykeyField","valuemember","value","nameofdefaultcomp","name","ProductCategory","comboComponents","x","ncategorybasedflow","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","val","mapOfFilter","temp","components","temp1","onInputOnChange","radiotext","target","type","includes","index","indexOf","indexcomma","slice","onInputOnSubSampleChange","onComboSubSampleChange","SubSamplecomboData","onNumericInputChange","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","nneedsubsample","Object","keys","warn","selectedComponent1","nallottedspeccode","slno","closeSpec","closeKendoFilter","closeComponent","closeTest","closeSubSample","selectedSubSample","showSaveContinue","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","checked","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","objComponent","nregsubtypecode","timezone","deleteComponent","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","onUpdateRegistration","myRef","PrevoiusLoginData","componentColumnList","sampleeditable","JSON","parse","DynamicDesign","componentDidUpdate","previousProps","masterStatus","check","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","ndesigntemplatemappingcode","RealDesignTemplateMappingValue","nneedtemplatebasedflow","RegSubTypeValue","checkBoxOperation","activeSampleTab","activeTestTab","activeSubSampleTab","param","dateList","sampledateconstraints","classUrl","displayName","action","showConfirmAlert","resultDataState","testCommentDataState","userRoleControlRights","nformcode","ncontrolCode","loadEsign","screenData","findSubsampleDateList","subsampletemplate","PREREGISTER","defaultTimeZone","postParamList","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","className","openPortal","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","showSave","lstPatient","fields","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","TestCombined","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","selectedSample","loadPreregister","handleChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    comboChild, convertDateTimetoString,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, showEsign, validateEmail\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"react-awesome-query-builder\";\r\n//import SplitterLayout from 'react-splitter-layout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false,\r\n        kendoSkip: 0,\r\n        kendoTake: 5,\r\n        kendoFilter: {\r\n            logic: \"and\",\r\n            filters: []\r\n        },\r\n        awesomeTree: undefined,\r\n        awesomeConfig: undefined,\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handleExecuteClick = (event) => {\r\n        const selectedRecord = this.state.selectedRecord\r\n        const inputparam = {\r\n            component: this.props.Login.seletedFilterComponent,\r\n            userinfo: this.props.Login.userInfo,\r\n            filterquery: selectedRecord['filterquery']\r\n\r\n        }\r\n        this.props.getDynamicFilterExecuteData(inputparam)\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let selecteddata = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n        if (component.hasOwnProperty(\"child\")) {\r\n            if (this.props.Login.loadSubSample) {\r\n                const selectComponent = this.state.selectComponent;\r\n                component.child.map(y => {\r\n                    const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n                    const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n                    if (readonlyfields !== -1) {\r\n\r\n                        if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n                            selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n                                selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n                        } else {\r\n                            selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n                        }\r\n                    }\r\n                })\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectComponent,\r\n                        loadCustomSearchFilter: false,\r\n                        screenName: \"SubSample\",\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo)\r\n            } else {\r\n                const selectedRecord = this.state.selectedRecord;\r\n                component.child.map(y => {\r\n                    // component.filterfields.filter(x=>x.)\r\n                    const withoutCombocomponent = this.props.withoutCombocomponent;\r\n                    const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n                    if (readonlyfields !== -1) {\r\n\r\n                        if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n                            selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n                                selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n                        } else {\r\n                            selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n                        }\r\n                    }\r\n\r\n                })\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord,\r\n                        loadCustomSearchFilter: false,\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo)\r\n            }\r\n        }\r\n    };\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord\r\n\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                            this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                component.recordbasedshowhide ?\r\n                                this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.label, \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.label, \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec,\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                            specBasedComponent\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n            const nsampletypecode = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value\r\n                if (ncategorybasedflow !== 3) {\r\n                    product = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                const ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value\r\n                if (ncategorybasedflow !== 3) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                const ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value\r\n                if (ncategorybasedflow !== 3) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                const ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n                if (ncategorybasedflow === 3) {\r\n                    productCategory = true\r\n                } else {\r\n                    inputParem[\"ProductName\"] = Product[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    product = true\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                const ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n                if (ncategorybasedflow === 3) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                const ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n                if (ncategorybasedflow === 3) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                }\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType)\r\n            } else {\r\n\r\n                // if (productCategory) {\r\n                //     const ncategorybasedflow = selectedRecord[comboName] &&\r\n                //         selectedRecord[comboName].value;\r\n\r\n                // } else if\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType) {\r\n                    // const nproductcode = selectedRecord[comboName] &&\r\n                    //     selectedRecord[comboName].value;\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material)\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === 3 ? true : false\r\n\r\n\r\n            this.subSampleDataGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_SPECIMEN\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, width: \"150px\" })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory)\r\n                                    this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: \"Specification\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\r\n        if (nneedsubsample) {\r\n            if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                delete selectedComponent[\"selected\"];\r\n                this.props.getTest(selectedComponent, this.props.Login,\r\n                    nneedsubsample, specBasedComponent);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n        } else {\r\n            const selectedComponent1 = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            }\r\n            this.props.getTest(selectedComponent1,\r\n                this.props.Login,\r\n                nneedsubsample, specBasedComponent);\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //   this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //   saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\r\n            //     this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList//, selectedTestData: {}\r\n            }\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const Component = this.props.Login.Component;\r\n        const subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        const index = Component.findIndex(x => x.slno === dataItem.slno);\r\n        if (index > -1) {\r\n            Component.splice(index, 1);\r\n            subSampleDataGridList.splice(index, 1);\r\n        }\r\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Component, selectedComponent: Component[0], Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (SubSamplewithoutCombocomponent.length === 0 || data.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n        else {\r\n            if (operation === \"create\") {\r\n                this.insertRegistration(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n            //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n            // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n            Map[\"FromDate\"] = \"\";\r\n            Map[\"ToDate\"] = \"\";\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n            Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n            Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n            Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistration(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.registrationTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.loginoperation ?\r\n                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                    : <>\r\n                                        {this.props.operation ?\r\n                                            <>\r\n                                                <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.operation.toUpperCase())}\r\n                                                    defaultMessage='Add' />\r\n                                                {\" \"}\r\n                                                {\r\n                                                    this.props.Login.screenName ?\r\n                                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                                        : \"\"\r\n                                                }\r\n                                            </>\r\n                                            :\r\n                                            this.props.Login.screenName ?\r\n                                                <FormattedMessage id={this.props.Login.screenName} />\r\n                                                : \"\"}\r\n                                    </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.loadSpec ?\r\n                        this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                            this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadCustomSearchFilter ? \"\" :\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {this.props.Login.loadCustomSearchFilter ?\r\n                                        this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                            <KendoDatatoolFilter\r\n                                                filter={this.state.kendoFilter}\r\n                                                handleFilterChange={this.handleFilterChange}\r\n                                                filterData={this.props.Login.lstPatient || []}\r\n                                                skip={this.state.kendoSkip}\r\n                                                take={this.state.kendoTake}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                fields={this.props.Login.fields || []}\r\n                                                gridColumns={this.props.Login.gridColumns || []}\r\n                                                onRowClick={this.handleKendoRowClick}\r\n\r\n                                            /> : <FilterQueryBuilder\r\n                                                fields={this.props.Login.fields || {}}\r\n                                                onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                tree={this.state.awesomeTree}\r\n                                                config={this.state.awesomeConfig}\r\n                                                skip={this.state.kendoSkip}\r\n                                                take={this.state.kendoTake}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                gridColumns={this.props.Login.gridColumns || []}\r\n                                                filterData={this.props.Login.lstPatient}\r\n                                                onRowClick={this.handleKendoRowClick}\r\n                                                handleExecuteClick={this.handleExecuteClick}\r\n                                            /> :\r\n                                        this.props.Login.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.props.Login.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.props.Login.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.state.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChangeComp}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    />\r\n                                                    : this.props.Login.loadSubSample ?\r\n                                                        <AddSubSample\r\n                                                            Component={this.props.Login.lstComponent || []}\r\n                                                            selectComponent={this.state.selectComponent}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            // Unit={this.props.Login.Unit || []}\r\n                                                            onComponentChange={this.onComponentChange}\r\n                                                            onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                            templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            handleDateChange={this.handleDateSubSampleChange}\r\n                                                            onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                            onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                            comboData={this.props.Login.SubSamplecomboData}\r\n                                                            onComboChange={this.onComboSubSampleChange}\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            childoperation={this.props.Login.childoperation}\r\n                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                        />\r\n                                                        : <RegisterSlideOut\r\n                                                            editfield={this.sampleeditable &&\r\n                                                                this.sampleeditable['sampleeditable']}\r\n                                                            ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                            loadPreregister={this.props.Login.loadPreregister}\r\n                                                            selectedSpec={this.state.selectedSpec}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            selectedComponent={this.props.Login.selectedComponent}\r\n                                                            subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                            SelectedTest={this.props.Login.SelectedTest}\r\n                                                            selectedTestData={this.state.selectedTestData}\r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                                this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                            handleChange={this.props.handleChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                            comboData={this.props.Login.comboData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                            AddSpec={this.AddSpec}\r\n                                                            addTest={this.addTestslide}\r\n                                                            handleComponentRowClick={this.handleComponentRowClick}\r\n                                                            nneedsubsample={this.props.Login.masterData\r\n                                                                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample}\r\n                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                            AddComponent={this.AddComponent}\r\n                                                            deleteComponent={this.deleteComponent}\r\n                                                            deleteTest={this.deleteTest}\r\n                                                            editComponent={this.editComponent}\r\n                                                            componentColumnList={this.componentColumnList}\r\n                                                            Component={this.props.Login.Component}\r\n                                                            TestChange={this.TestChange}\r\n                                                            testDataState={this.state.testDataState}\r\n                                                            subSampleDataState={this.state.subSampleDataState}\r\n                                                            //componentDataState={this.state.componentDataState}\r\n                                                            testDataStateChange={this.testDataStateChange}\r\n                                                            //componentDataStateChange={this.componentDataStateChange}\r\n                                                            subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                            addsubSample={this.addsubSample}\r\n                                                            editSubSample={this.editSubSample}\r\n                                                            // onNumericInputChange={this.onNumericInputChange}\r\n                                                            subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                            selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                            operation={this.props.Login.operation}\r\n                                                            custombuttonclick={this.custombuttonclick}\r\n\r\n                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}