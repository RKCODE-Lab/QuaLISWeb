{"ast":null,"code":"import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import React from'react';import{injectIntl}from'react-intl';import{Row,Col}from'react-bootstrap';import DataGrid from'../../components/data-grid/data-grid.component';import{process}from'@progress/kendo-data-query';import FormInput from'../../components/form-input/form-input.component';import DateTimePicker from'../../components/date-time-picker/date-time-picker.component';import ComboBoxControl from'./ComboBoxControl';import{MediaHeader}from'../../components/App.styles';import{Attachments}from'../../components/dropzone/dropzone.styles';var AddParameter=function AddParameter(props){return/*#__PURE__*/React.createElement(Row,null,_toConsumableArray(props.parameters.keys()).map(function(parameter,index){return props.parameters.get(parameter).value===\"DateTimePicker\"?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Col,{lg:12},/*#__PURE__*/React.createElement(DateTimePicker,{name:parameter,label:props.intl.formatMessage({id:props.parameters.get(parameter).actuallableName}),className:\"form-control\",placeholderText:\"Select date..\",selected:props.parameters.get(parameter).Datetime,dateFormat:\"dd/MM/yyyy\",isClearable:false,isMandatory:true,required:true//onChange={props.onChange(props.parameters.get(parameter).lableName)}\n,onChange:props.onChange(parameter),value:props.parameters.get(parameter).Datetime}))):props.parameters.get(parameter).TableName===\"\"?/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Col,{lg:12},/*#__PURE__*/React.createElement(FormInput,{label:props.intl.formatMessage({id:props.parameters.get(parameter).actuallableName}),name:parameter,type:\"text\",onChange:props.onInputOnChange(props.parameters.get(parameter).lableName),placeholder:props.intl.formatMessage({id:props.parameters.get(parameter).actuallableName}),value:props.parameters.get(parameter).textValue,isMandatory:true,required:true,maxLength:100}))):/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Col,{lg:12},/*#__PURE__*/React.createElement(ComboBoxControl,{onvaluechange:props.onComboChange(parameter),tableName:props.parameters.get(parameter).TableName,fieldName:props.parameters.get(parameter).lableName,labelName:props.parameters.get(parameter).actuallableName,displayParam:props.parameters.get(parameter).DisplayParam})));}),props.queryTypeCode===2&&/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(MediaHeader,null,/*#__PURE__*/React.createElement(\"h6\",{style:{fontWeight:\"bold\"}},props.selectedRecord[\"sscreenheader\"]?props.selectedRecord[\"sscreenheader\"]:props.sscreenheader?props.sscreenheader:\"\",\":\",props.resultStatus===\"Warning\"?\"\":\"\".concat(props.slideResult.length,\" Items\")))),props.resultStatus===\"Success\"?/*#__PURE__*/React.createElement(Col,{md:12},props.slideResult&&props.slideResult.length>0?/*#__PURE__*/React.createElement(DataGrid,{pageable:true,scrollable:\"scrollable\",gridHeight:'600px'//gridWidth={'600px'}\n,data:props.slideResult||[],dataResult:process(props.slideResult||[],props.dataStateUserQuery),dataState:props.dataStateUserQuery,dataStateChange:props.userQueryDataStateChange,extractedColumnList:props.slideList||[],detailedFieldList:[],hideDetailBand:true,controlMap:props.controlMap,methodUrl:\"SQLQuery\",isActionRequired:false,isToolBarRequired:true,isAddRequired:false,isRefreshRequired:false,selectedId:null}):/*#__PURE__*/React.createElement(Attachments,{className:\"norecordtxt\"},props.intl.formatMessage({id:\"IDS_NORECORDSAVAILABLE\"}))):props.resultStatus===\"Warning\"?/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(MediaHeader,null,/*#__PURE__*/React.createElement(\"h6\",{style:{color:\"red\",fontWeight:\"bold\"}},\"Message : \",\" \",props.slideResult[0]&&props.slideResult[0].Messages))):\"\");};export default injectIntl(AddParameter);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/AddParameter.js"],"names":["React","injectIntl","Row","Col","DataGrid","process","FormInput","DateTimePicker","ComboBoxControl","MediaHeader","Attachments","AddParameter","props","parameters","keys","map","parameter","index","get","value","intl","formatMessage","id","actuallableName","Datetime","onChange","TableName","onInputOnChange","lableName","textValue","onComboChange","DisplayParam","queryTypeCode","fontWeight","selectedRecord","sscreenheader","resultStatus","slideResult","length","dataStateUserQuery","userQueryDataStateChange","slideList","controlMap","color","Messages"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport ComboBoxControl from './ComboBoxControl';\r\nimport { MediaHeader } from '../../components/App.styles';\r\nimport { Attachments } from '../../components/dropzone/dropzone.styles';\r\n\r\nconst AddParameter = (props) => {\r\n    \r\n    return (\r\n        <Row>\r\n            {[...props.parameters.keys()].map((parameter, index) => (\r\n                props.parameters.get(parameter).value === \"DateTimePicker\" ?\r\n                    <>\r\n                        <Col lg={12}>\r\n                            <DateTimePicker\r\n                                name={parameter}\r\n                                label={props.intl.formatMessage({ id: props.parameters.get(parameter).actuallableName })}\r\n                                className='form-control'\r\n                                placeholderText=\"Select date..\"\r\n                                selected={props.parameters.get(parameter).Datetime}\r\n                                dateFormat={\"dd/MM/yyyy\"}\r\n                                isClearable={false}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                //onChange={props.onChange(props.parameters.get(parameter).lableName)}\r\n                                onChange={props.onChange(parameter)}\r\n                                value={props.parameters.get(parameter).Datetime}\r\n                            />\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    props.parameters.get(parameter).TableName === \"\" ?\r\n                        <>\r\n                            <Col lg={12}>\r\n                                <FormInput\r\n                                    label={props.intl.formatMessage({ id: props.parameters.get(parameter).actuallableName })}\r\n                                    name={parameter}\r\n                                    type=\"text\"\r\n                                    onChange={props.onInputOnChange(props.parameters.get(parameter).lableName)}\r\n                                    placeholder={props.intl.formatMessage({ id: props.parameters.get(parameter).actuallableName })}\r\n                                    value={props.parameters.get(parameter).textValue}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n                                />\r\n                            </Col>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <Col lg={12}>\r\n                                <ComboBoxControl\r\n                                    onvaluechange={props.onComboChange(parameter)}\r\n                                    tableName={props.parameters.get(parameter).TableName}\r\n                                    fieldName={props.parameters.get(parameter).lableName}\r\n                                    labelName={props.parameters.get(parameter).actuallableName}\r\n                                    displayParam={props.parameters.get(parameter).DisplayParam}\r\n                                />\r\n                            </Col>\r\n                        </>\r\n            ))\r\n            }\r\n            {props.queryTypeCode === 2 &&\r\n                <Col md={12}>\r\n                    {/* <FormInput\r\n                        label={props.intl.formatMessage({ id: props.selectedRecord[\"sscreenheader\"] ? props.selectedRecord[\"sscreenheader\"] : props.sscreenheader ? props.sscreenheader : \"\" })}\r\n                        name={\"IDS_SCREENHEADER\"}\r\n                        type=\"text\"\r\n                        //onChange={props.onInputOnChange(index)}\r\n                        //placeholder={props.intl.formatMessage({ id: props.parameters[index].lableName })}\r\n                        value={props.slideResult.length}\r\n                        readOnly={true}\r\n                    /> */}\r\n                    <MediaHeader>\r\n                        <h6 style={{ fontWeight: \"bold\" }}>\r\n                            {props.selectedRecord[\"sscreenheader\"] ?\r\n                                props.selectedRecord[\"sscreenheader\"]\r\n                                : props.sscreenheader ? props.sscreenheader : \"\"}\r\n                            :{props.resultStatus === \"Warning\" ? \"\" : `${props.slideResult.length} Items`}\r\n                        </h6>\r\n                    </MediaHeader>\r\n                </Col>\r\n            }\r\n            {props.resultStatus === \"Success\" ?\r\n                <Col md={12}>\r\n                    {props.slideResult && props.slideResult.length>0?\r\n                        <DataGrid\r\n                            pageable={true}\r\n                            scrollable={\"scrollable\"}\r\n                            gridHeight={'600px'}\r\n                            //gridWidth={'600px'}\r\n                            data={props.slideResult || []}\r\n                            dataResult={process(props.slideResult || [], props.dataStateUserQuery)}\r\n                            dataState={props.dataStateUserQuery}\r\n                            dataStateChange={props.userQueryDataStateChange}\r\n                            extractedColumnList={props.slideList || []}\r\n                            detailedFieldList={[]}\r\n                            hideDetailBand={true}\r\n                            controlMap={props.controlMap}\r\n                            methodUrl=\"SQLQuery\"\r\n                            isActionRequired={false}\r\n                            isToolBarRequired={true}\r\n                            isAddRequired={false}\r\n                            isRefreshRequired={false}\r\n                            selectedId = {null}\r\n                        />\r\n                    :<Attachments className=\"norecordtxt\">\r\n                        {props.intl.formatMessage({id:\"IDS_NORECORDSAVAILABLE\"})}\r\n                    </Attachments>}\r\n                </Col>\r\n                : props.resultStatus === \"Warning\" ?\r\n                    <Col md={12}>\r\n                        <MediaHeader>\r\n                            <h6 style={{ color: \"red\", fontWeight: \"bold\" }}>\r\n                                {\"Message : \"} {props.slideResult[0] && props.slideResult[0].Messages}</h6>\r\n                        </MediaHeader>\r\n                    </Col>\r\n                    : \"\"}\r\n        </Row>\r\n    )\r\n}\r\nexport default (injectIntl(AddParameter));\r\n"]},"metadata":{},"sourceType":"module"}