{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport Immutable from \"immutable\";\nimport uuid from \"./uuid\";\nimport { getFieldConfig, getOperatorConfig } from \"./configUtils\";\nimport { getNewValueForFieldOp, getFirstField, getFirstOperator } from \"../utils/ruleUtils\";\nexport var defaultField = function defaultField(config) {\n  var canGetFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var parentRuleGroupPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return typeof config.settings.defaultField === \"function\" ? config.settings.defaultField(parentRuleGroupPath) : config.settings.defaultField || (canGetFirst ? getFirstField(config, parentRuleGroupPath) : null);\n};\nexport var defaultOperator = function defaultOperator(config, field) {\n  var canGetFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var fieldConfig = getFieldConfig(config, field);\n  var fieldOperators = fieldConfig && fieldConfig.operators || [];\n  var fieldDefaultOperator = fieldConfig && fieldConfig.defaultOperator;\n  if (!fieldOperators.includes(fieldDefaultOperator)) fieldDefaultOperator = null;\n  if (!fieldDefaultOperator && canGetFirst) fieldDefaultOperator = getFirstOperator(config, field);\n  var op = typeof config.settings.defaultOperator === \"function\" ? config.settings.defaultOperator(field, fieldConfig) : fieldDefaultOperator;\n  return op;\n}; //used for complex operators like proximity\n\nexport var defaultOperatorOptions = function defaultOperatorOptions(config, operator, field) {\n  var operatorConfig = operator ? getOperatorConfig(config, operator, field) : null;\n  if (!operatorConfig) return null; //new Immutable.Map();\n\n  return operatorConfig.options ? new Immutable.Map(operatorConfig.options && operatorConfig.options.defaults || {}) : null;\n};\nexport var defaultRuleProperties = function defaultRuleProperties(config) {\n  var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var item = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var field = null,\n      operator = null;\n  var _config$settings = config.settings,\n      setDefaultFieldAndOp = _config$settings.setDefaultFieldAndOp,\n      showErrorMessage = _config$settings.showErrorMessage;\n\n  if (item) {\n    var _item$properties, _item$properties2;\n\n    field = item === null || item === void 0 ? void 0 : (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.field;\n    operator = item === null || item === void 0 ? void 0 : (_item$properties2 = item.properties) === null || _item$properties2 === void 0 ? void 0 : _item$properties2.operator;\n  } else if (setDefaultFieldAndOp) {\n    field = defaultField(config, true, parentRuleGroupPath);\n    operator = defaultOperator(config, field);\n  }\n\n  var current = new Immutable.Map({\n    field: field,\n    operator: operator,\n    value: new Immutable.List(),\n    valueSrc: new Immutable.List(),\n    //used for complex operators like proximity\n    operatorOptions: defaultOperatorOptions(config, operator, field)\n  });\n\n  if (showErrorMessage) {\n    current = current.set(\"valueError\", new Immutable.List());\n  }\n\n  if (field && operator) {\n    var _getNewValueForFieldO = getNewValueForFieldOp(config, config, current, field, operator, \"operator\", false),\n        newValue = _getNewValueForFieldO.newValue,\n        newValueSrc = _getNewValueForFieldO.newValueSrc,\n        newValueType = _getNewValueForFieldO.newValueType,\n        newValueError = _getNewValueForFieldO.newValueError;\n\n    current = current.set(\"value\", newValue).set(\"valueSrc\", newValueSrc).set(\"valueType\", newValueType);\n\n    if (showErrorMessage) {\n      current = current.set(\"valueError\", newValueError);\n    }\n  }\n\n  return current;\n};\nexport var defaultGroupConjunction = function defaultGroupConjunction(config) {\n  var fieldConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  fieldConfig = getFieldConfig(config, fieldConfig); // if `fieldConfig` is field name, not config\n\n  var conjs = fieldConfig && fieldConfig.conjunctions || Object.keys(config.conjunctions);\n  if (conjs.length == 1) return conjs[0];\n  return config.settings.defaultGroupConjunction || config.settings.defaultConjunction || conjs[0];\n};\nexport var defaultConjunction = function defaultConjunction(config) {\n  return config.settings.defaultConjunction || Object.keys(config.conjunctions)[0];\n};\nexport var defaultGroupProperties = function defaultGroupProperties(config) {\n  var fieldConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new Immutable.Map({\n    conjunction: defaultGroupConjunction(config, fieldConfig),\n    not: false\n  });\n};\nexport var defaultItemProperties = function defaultItemProperties(config, item) {\n  var _item$properties3;\n\n  return item && item.type == \"group\" ? defaultGroupProperties(config, item === null || item === void 0 ? void 0 : (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.field) : defaultRuleProperties(config, null, item);\n};\nexport var defaultRule = function defaultRule(id, config) {\n  return _defineProperty({}, id, new Immutable.Map({\n    type: \"rule\",\n    id: id,\n    properties: defaultRuleProperties(config)\n  }));\n};\nexport var defaultRoot = function defaultRoot(config) {\n  return new Immutable.Map({\n    type: \"group\",\n    id: uuid(),\n    children1: new Immutable.OrderedMap(_objectSpread({}, defaultRule(uuid(), config))),\n    properties: defaultGroupProperties(config)\n  });\n};\nexport var createListFromArray = function createListFromArray(ids) {\n  return new Immutable.List(ids);\n};\nexport var emptyProperies = function emptyProperies() {\n  return new Immutable.Map();\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/utils/defaultUtils.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Immutable","uuid","getFieldConfig","getOperatorConfig","getNewValueForFieldOp","getFirstField","getFirstOperator","defaultField","config","canGetFirst","undefined","parentRuleGroupPath","settings","defaultOperator","field","fieldConfig","fieldOperators","operators","fieldDefaultOperator","includes","op","defaultOperatorOptions","operator","operatorConfig","options","Map","defaults","defaultRuleProperties","item","_config$settings","setDefaultFieldAndOp","showErrorMessage","_item$properties","_item$properties2","properties","current","value","List","valueSrc","operatorOptions","set","_getNewValueForFieldO","newValue","newValueSrc","newValueType","newValueError","defaultGroupConjunction","conjs","conjunctions","defaultConjunction","defaultGroupProperties","conjunction","not","defaultItemProperties","_item$properties3","type","defaultRule","id","defaultRoot","children1","OrderedMap","createListFromArray","ids","emptyProperies"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Immutable from \"immutable\";\nimport uuid from \"./uuid\";\nimport { getFieldConfig, getOperatorConfig } from \"./configUtils\";\nimport { getNewValueForFieldOp, getFirstField, getFirstOperator } from \"../utils/ruleUtils\";\nexport var defaultField = function defaultField(config) {\n  var canGetFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var parentRuleGroupPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return typeof config.settings.defaultField === \"function\" ? config.settings.defaultField(parentRuleGroupPath) : config.settings.defaultField || (canGetFirst ? getFirstField(config, parentRuleGroupPath) : null);\n};\nexport var defaultOperator = function defaultOperator(config, field) {\n  var canGetFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var fieldConfig = getFieldConfig(config, field);\n  var fieldOperators = fieldConfig && fieldConfig.operators || [];\n  var fieldDefaultOperator = fieldConfig && fieldConfig.defaultOperator;\n  if (!fieldOperators.includes(fieldDefaultOperator)) fieldDefaultOperator = null;\n  if (!fieldDefaultOperator && canGetFirst) fieldDefaultOperator = getFirstOperator(config, field);\n  var op = typeof config.settings.defaultOperator === \"function\" ? config.settings.defaultOperator(field, fieldConfig) : fieldDefaultOperator;\n  return op;\n};\n\n//used for complex operators like proximity\nexport var defaultOperatorOptions = function defaultOperatorOptions(config, operator, field) {\n  var operatorConfig = operator ? getOperatorConfig(config, operator, field) : null;\n  if (!operatorConfig) return null; //new Immutable.Map();\n  return operatorConfig.options ? new Immutable.Map(operatorConfig.options && operatorConfig.options.defaults || {}) : null;\n};\nexport var defaultRuleProperties = function defaultRuleProperties(config) {\n  var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var item = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var field = null,\n    operator = null;\n  var _config$settings = config.settings,\n    setDefaultFieldAndOp = _config$settings.setDefaultFieldAndOp,\n    showErrorMessage = _config$settings.showErrorMessage;\n  if (item) {\n    var _item$properties, _item$properties2;\n    field = item === null || item === void 0 ? void 0 : (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.field;\n    operator = item === null || item === void 0 ? void 0 : (_item$properties2 = item.properties) === null || _item$properties2 === void 0 ? void 0 : _item$properties2.operator;\n  } else if (setDefaultFieldAndOp) {\n    field = defaultField(config, true, parentRuleGroupPath);\n    operator = defaultOperator(config, field);\n  }\n  var current = new Immutable.Map({\n    field: field,\n    operator: operator,\n    value: new Immutable.List(),\n    valueSrc: new Immutable.List(),\n    //used for complex operators like proximity\n    operatorOptions: defaultOperatorOptions(config, operator, field)\n  });\n  if (showErrorMessage) {\n    current = current.set(\"valueError\", new Immutable.List());\n  }\n  if (field && operator) {\n    var _getNewValueForFieldO = getNewValueForFieldOp(config, config, current, field, operator, \"operator\", false),\n      newValue = _getNewValueForFieldO.newValue,\n      newValueSrc = _getNewValueForFieldO.newValueSrc,\n      newValueType = _getNewValueForFieldO.newValueType,\n      newValueError = _getNewValueForFieldO.newValueError;\n    current = current.set(\"value\", newValue).set(\"valueSrc\", newValueSrc).set(\"valueType\", newValueType);\n    if (showErrorMessage) {\n      current = current.set(\"valueError\", newValueError);\n    }\n  }\n  return current;\n};\nexport var defaultGroupConjunction = function defaultGroupConjunction(config) {\n  var fieldConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  fieldConfig = getFieldConfig(config, fieldConfig); // if `fieldConfig` is field name, not config\n  var conjs = fieldConfig && fieldConfig.conjunctions || Object.keys(config.conjunctions);\n  if (conjs.length == 1) return conjs[0];\n  return config.settings.defaultGroupConjunction || config.settings.defaultConjunction || conjs[0];\n};\nexport var defaultConjunction = function defaultConjunction(config) {\n  return config.settings.defaultConjunction || Object.keys(config.conjunctions)[0];\n};\nexport var defaultGroupProperties = function defaultGroupProperties(config) {\n  var fieldConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new Immutable.Map({\n    conjunction: defaultGroupConjunction(config, fieldConfig),\n    not: false\n  });\n};\nexport var defaultItemProperties = function defaultItemProperties(config, item) {\n  var _item$properties3;\n  return item && item.type == \"group\" ? defaultGroupProperties(config, item === null || item === void 0 ? void 0 : (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.field) : defaultRuleProperties(config, null, item);\n};\nexport var defaultRule = function defaultRule(id, config) {\n  return _defineProperty({}, id, new Immutable.Map({\n    type: \"rule\",\n    id: id,\n    properties: defaultRuleProperties(config)\n  }));\n};\nexport var defaultRoot = function defaultRoot(config) {\n  return new Immutable.Map({\n    type: \"group\",\n    id: uuid(),\n    children1: new Immutable.OrderedMap(_objectSpread({}, defaultRule(uuid(), config))),\n    properties: defaultGroupProperties(config)\n  });\n};\nexport var createListFromArray = function createListFromArray(ids) {\n  return new Immutable.List(ids);\n};\nexport var emptyProperies = function emptyProperies() {\n  return new Immutable.Map();\n};"]},"metadata":{},"sourceType":"module"}