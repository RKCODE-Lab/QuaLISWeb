{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Row,Col,Card,Nav,FormGroup,FormLabel}from'react-bootstrap';import{connect}from'react-redux';import rsapi from'../../rsapi';import{callService,crudMaster,getTestMaster,addTest,updateStore,getTestDetails,formulaChangeFunction,filterColumnData,addParameter,validateEsignCredential,addCodedResult,addParameterSpecification,getAvailableData,addFormula,changeTestCategoryFilter,addTestFile,viewAttachment,getActiveTestContainerTypeById,addContainerType,ReportInfoTest}from'../../actions';import TestView from'./TestView';import{injectIntl}from'react-intl';import{toast}from'react-toastify';import AddParameter from'./AddParameter';import AddTest from'../../pages/testmanagement/AddTest';import TestReportInfo from\"../../pages/testmanagement/TestReportInfo\";import SlideOutModal from'../../components/slide-out-modal/SlideOutModal';import{getControlMap,showEsign,constructOptionList}from'../../components/CommonScript';import TestCategoryFilter from'./TestCategoryFilter';import ListMaster from'../../components/list-master/list-master.component';import{faTrashAlt,faPencilAlt,faCopy,faCheck}from'@fortawesome/free-solid-svg-icons';import{ReactComponent as ReportEdit}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-edit.svg\";import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{ReadOnlyText,ContentPanel,MediaLabel}from'../../components/App.styles';import{DEFAULT_RETURN}from'../../actions/LoginTypes';import Esign from'../audittrail/Esign';// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\nimport{parameterType,transactionStatus}from'../../components/Enumeration';import'react-perfect-scrollbar/dist/css/styles.css';// import { Tooltip } from '@progress/kendo-react-tooltip';\nimport ConfirmMessage from'../../components/confirm-alert/confirm-message.component';import BreadcrumbComponent from'../../components/Breadcrumb.Component';import{Affix}from'rsuite';// import ReactTooltip from 'react-tooltip';\nvar TestMaster=/*#__PURE__*/function(_Component){_inherits(TestMaster,_Component);var _super=_createSuper(TestMaster);function TestMaster(props){var _this;_classCallCheck(this,TestMaster);_this=_super.call(this,props);_this.sidebarExpandCollapse=function(){//  alert('ss');\n// this.setState({sidebarviewstate: !this.state.sidebarviewstate}) \n_this.setState({sidebarview:true});// sidebarviewstate:true\n};_this.handlePageChange=function(event){_this.setState({skip:event.skip,take:event.take});};_this.ConfirmDelete=function(item,operation,ncontrolCode,methodUrl,modalName){_this.confirmMessage.confirm(\"deleteMessage\",_this.props.intl.formatMessage({id:\"IDS_DELETE\"}),_this.props.intl.formatMessage({id:\"IDS_DEFAULTCONFIRMMSG\"}),_this.props.intl.formatMessage({id:\"IDS_OK\"}),_this.props.intl.formatMessage({id:\"IDS_CANCEL\"}),function(){return _this.deleteAction(item,operation,ncontrolCode,methodUrl,modalName);});};_this.onComboChange=function(comboData,fieldName,caseNo){var selectedRecord=_this.state.selectedRecord||{};switch(caseNo){case 1:if(fieldName===\"sparametername\"){selectedRecord[fieldName]=comboData;selectedRecord[\"sparametersynonym\"]=comboData?comboData.value:\"\";}else{selectedRecord[fieldName]=comboData;}_this.setState({selectedRecord:selectedRecord});break;case 2:var item=comboData['item'];var needUnit=true;var needRoundingDigit=true;var needCodedResult=true;var needActualResult=true;var npredefinedcode=transactionStatus.NO;var parameterData=_this.props.Login.parameterData;if(item[\"nunitrequired\"]===transactionStatus.YES){needUnit=false;selectedRecord[\"nunitcode\"]=_this.props.Login.parameterData.defaultUnit;}else{selectedRecord[\"nunitcode\"]=\"\";}if(item[\"nroundingrequired\"]===transactionStatus.YES){needRoundingDigit=false;}else{selectedRecord[\"nroundingdigit\"]=\"\";selectedRecord[\"nroundingdigits\"]=\"\";selectedRecord[\"ndeltacheck\"]=4;selectedRecord[\"ndeltacheckframe\"]=\"\";selectedRecord[\"ndeltaunitcode\"]=\"\";selectedRecord[\"ndeltachecklimitcode\"]=\"\";}if(item[\"npredefinedrequired\"]===transactionStatus.YES){needCodedResult=false;npredefinedcode=item[\"npredefinedrequired\"];}else{selectedRecord[\"spredefinedname\"]=\"\";}if(item[\"ngraderequired\"]===transactionStatus.YES){needActualResult=false;selectedRecord[\"ngradecode\"]=_this.props.Login.parameterData.defaultGrade;}else{selectedRecord[\"ngradecode\"]=\"\";}selectedRecord[fieldName]=comboData;var parameterInfo={typeName:DEFAULT_RETURN,data:{parameterData:_objectSpread(_objectSpread({},parameterData),{},{needUnit:needUnit,needRoundingDigit:needRoundingDigit,needCodedResult:needCodedResult,needActualResult:needActualResult,npredefinedcode:npredefinedcode}),selectedRecord:selectedRecord}};_this.props.updateStore(parameterInfo);break;case 3:var nfilterTestCategory=_this.state.nfilterTestCategory||{};nfilterTestCategory=comboData;_this.searchRef.current.value=\"\";_this.setState({nfilterTestCategory:nfilterTestCategory});break;default:break;}};_this.openFilter=function(){var showFilter=!_this.props.Login.showFilter;var updateInfo={typeName:DEFAULT_RETURN,data:{showFilter:showFilter}};_this.props.updateStore(updateInfo);};_this.closeFilter=function(){console.log(\"Hello Close Filter\");var updateInfo={typeName:DEFAULT_RETURN,data:{showFilter:false}};_this.props.updateStore(updateInfo);};_this.onFilterSubmit=function(){if(_this.state.nfilterTestCategory.value){var inputParam={inputData:{ntestcategorycode:_this.state.nfilterTestCategory.value,userinfo:_this.props.Login.userInfo,nfilterTestCategory:_this.state.nfilterTestCategory},classUrl:\"testmaster\",methodUrl:\"TestMasterByCategory\"};_this.props.changeTestCategoryFilter(inputParam,_this.props.Login.masterData.filterTestCategory);}else{toast.warn(_this.props.intl.formatMessage({id:\"IDS_TESTCATEGORYNOTAVAILABLE\"}));}};_this.onEsignInputOnChange=function(event){var selectedRecord=_this.state.selectedRecord||{};if(event.target.type==='checkbox'){selectedRecord[event.target.name]=event.target.checked===true?transactionStatus.YES:transactionStatus.NO;}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});};_this.onInputOnChange=function(event,caseNo,optional){var selectedRecord=_this.state.selectedRecord||{};switch(caseNo){case 1:if(event.target.type==='checkbox'){selectedRecord[event.target.name]=event.target.checked===true?optional[0]:optional[1];if(selectedRecord['ndeltacheck']===transactionStatus.YES){selectedRecord['ndeltaunitcode']=_this.props.Login.parameterData&&_this.props.Login.parameterData.deltaperiod.filter(function(x){return x.item.ndefaultstatus===transactionStatus.YES;})[0];}else{delete selectedRecord['ndeltaunitcode'];}}else{selectedRecord[event.target.name]=event.target.value;}_this.setState({selectedRecord:selectedRecord});break;case 2:selectedRecord[event.target.name]=selectedRecord[\"stestsynonym\"]=selectedRecord[\"sparametersynonym\"]=event.target.value;selectedRecord[\"sparametername\"]={label:event.target.value,value:event.target.value};_this.setState({selectedRecord:selectedRecord});break;case 3:selectedRecord[event.target.name]=selectedRecord[\"sparametersynonym\"]=event.target.value;_this.setState({selectedRecord:selectedRecord});break;case 6://selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\nselectedRecord[event.target.name]=selectedRecord[\"spredefinedsynonym\"]=event.target.value;_this.setState({selectedRecord:selectedRecord});break;default:break;}};_this.onNumericInputChange=function(value,name){// console.log(\"value:\", value, name);\nvar selectedRecord=_this.state.selectedRecord||{};if(name===\"nroundingdigits\"){// if(/^\\-/.test(value.target.value)){\n// if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\nif(/^\\d*?$/.test(value.target.value)||value.target.value===\"\"){//  console.log(\"val:\", value.target.value);\nselectedRecord[name]=value.target.value;}}else{selectedRecord[name]=value;}_this.setState({selectedRecord:selectedRecord});};_this.closeModal=function(){var loadEsign=_this.props.Login.loadEsign;var openModal=_this.props.Login.openModal;var selectedRecord=_this.props.Login.selectedRecord;if(_this.props.Login.loadEsign){if(_this.props.Login.operation===\"delete\"){loadEsign=false;openModal=false;selectedRecord={};}else{loadEsign=false;selectedRecord['esignpassword']=\"\";selectedRecord['esigncomments']=\"\";selectedRecord['esignreason']=\"\";}}else{openModal=false;selectedRecord={};}var updateInfo={typeName:DEFAULT_RETURN,data:{openModal:openModal,loadEsign:loadEsign,selectedRecord:selectedRecord}};_this.props.updateStore(updateInfo);};_this.closeFormulaModal=function(){_this.setState({addformula:false});};_this.addSubCodedResult=function(){};_this.deleteAction=function(item,operation,ncontrolCode,methodUrl,modalName){var _inputData;var selected=item[\"dataItem\"]?item[\"dataItem\"]:item;var inputParam={inputData:(_inputData={},_defineProperty(_inputData,methodUrl.toLowerCase(),selected),_defineProperty(_inputData,\"userinfo\",_this.props.Login.userInfo),_inputData),classUrl:\"testmaster\",operation:operation,methodUrl:methodUrl,screenName:\"IDS_TEST\",selectedRecord:_objectSpread({},_this.state.selectedRecord),postParam:{inputListName:\"TestMaster\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestcode\",primaryKeyValue:selected.ntestcode,fetchUrl:\"testmaster/getTestById\",fecthInputObject:{userinfo:_this.props.Login.userInfo},masterData:_this.props.Login.masterData}};var masterData=_this.props.Login.masterData;if(showEsign(_this.props.Login.userRoleControlRights,_this.props.Login.userInfo.nformcode,ncontrolCode)){var _data;var updateInfo={typeName:DEFAULT_RETURN,data:(_data={loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData}},_defineProperty(_data,modalName,true),_defineProperty(_data,\"screenName\",\"IDS_TEST\"),_defineProperty(_data,\"operation\",operation),_data)};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,masterData,modalName,{});}};_this.validateTestExistenceInTestGroup=function(){var operation=_this.props.Login.operation;if(operation===\"update\"){return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\",{ntestcode:_this.props.Login.masterData.SelectedTest[\"ntestcode\"],\"userinfo\":_this.props.Login.userInfo}).then(function(response){if(response.data===true){_this.confirmMessage.confirm(_this.props.intl.formatMessage({id:\"IDS_CONFIRMATION\"}),_this.props.intl.formatMessage({id:\"IDS_CONFIRMATION\"}),_this.props.intl.formatMessage({id:\"IDS_TESTEXISTSINTESTGROUP\"}),_this.props.intl.formatMessage({id:\"IDS_OK\"}),_this.props.intl.formatMessage({id:\"IDS_CANCEL\"}),function(){return _this.onSaveTest(null,null);},false,undefined);}}).catch(function(error){if(error.response.status===500){toast.error(_this.props.intl.formatMessage({id:error.message}));}else{toast.warn(_this.props.intl.formatMessage({id:error.response}));}});}};_this.onSaveTest=function(){var operation=_this.props.Login.operation;var selectedRecord=_this.state.selectedRecord;if(operation===\"reportinfotest\"){_this.onSaveReportInfoTest(null,null);}else if(operation===\"update\"){if(selectedRecord[\"ntransactionstatus\"]===transactionStatus.DEACTIVE){return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\",{ntestcode:_this.props.Login.masterData.SelectedTest[\"ntestcode\"],\"userinfo\":_this.props.Login.userInfo}).then(function(response){if(response.data===true){_this.confirmMessage.confirm(_this.props.intl.formatMessage({id:\"IDS_CONFIRMATION\"}),_this.props.intl.formatMessage({id:\"IDS_CONFIRMATION\"}),_this.props.intl.formatMessage({id:\"IDS_TESTEXISTSINTESTGROUP\"}),_this.props.intl.formatMessage({id:\"IDS_OK\"}),_this.props.intl.formatMessage({id:\"IDS_CANCEL\"}),function(){return _this.onSaveValidatedTest(null,null);},false,undefined);}else{_this.onSaveValidatedTest(null,null);}}).catch(function(error){if(error.response.status===500){toast.error(_this.props.intl.formatMessage({id:error.message}));}else{toast.warn(_this.props.intl.formatMessage({id:error.response}));}});}else{_this.onSaveValidatedTest(null,null);}}else{_this.onSaveValidatedTest(null,null);}};_this.onSaveValidatedTest=function(saveType,formRef){var operation=_this.props.Login.operation;var inputData={};var customobject=null;var userInfo=_this.props.Login.userInfo;var selectedRecord=_this.state.selectedRecord;var testColumns=[{\"testmaster\":[{\"ntestcode\":\"int\"},{\"ntestcategorycode\":\"input\"},{\"nchecklistversioncode\":\"input\"},{\"naccredited\":\"int\"},{\"ntrainingneed\":\"int\"},{\"ntransactionstatus\":\"int\"},{\"stestname\":\"string\"},{\"stestsynonym\":\"string\"},{\"sshortname\":\"string\"},{\"sdescription\":\"string\"},{\"ncost\":\"float\"},{\"stestplatform\":\"string\"},{\"ntat\":\"int\"},{\"ntatperiodcode\":\"input\"},{\"ninterfacetypecode\":\"input\"}]}];if(operation===\"create\"){testColumns.push({\"testparameter\":[{\"ntestcode\":\"int\"},{\"nparametertypecode\":\"input\"},{\"nunitcode\":\"input\"},{\"sparametername\":\"input\"},{\"sparametersynonym\":\"string\"},{\"nroundingdigits\":\"int\"},{\"objPredefinedParameter\":\"customobject\"},{\"ndeltachecklimitcode\":\"float\"},{\"ndeltacheck\":\"int\"},{\"ndeltaunitcode\":\"input\"},{\"ndeltacheckframe\":\"int\"}]});inputData={\"testmaster\":{},\"testparameter\":{nisadhocparameter:transactionStatus.NO,nisvisible:transactionStatus.YES,nstatus:transactionStatus.ACTIVE},\"testsection\":{},\"testmethod\":{},\"testinstrumentcategory\":{},\"testpackagetest\":{}};if(_this.props.Login.parameterData.npredefinedcode===transactionStatus.YES){customobject={};customobject[\"spredefinedname\"]=selectedRecord[\"spredefinedname\"].trim();customobject[\"nstatus\"]=transactionStatus.ACTIVE;customobject[\"ndefaultstatus\"]=transactionStatus.YES;customobject[\"ngradecode\"]=selectedRecord[\"ngradecode\"]?selectedRecord[\"ngradecode\"].value?selectedRecord[\"ngradecode\"].value:-1:-1;//     if (selectedRecord[\"sresultparacomment\"]) {\n//     customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"].trim();}\n// }\nif(selectedRecord[\"spredefinedsynonym\"]){customobject[\"spredefinedsynonym\"]=selectedRecord[\"spredefinedsynonym\"].trim();}}}else{inputData={\"testmaster\":{}};}inputData[\"userinfo\"]=userInfo;inputData[\"testmaster\"][\"nstatus\"]=transactionStatus.ACTIVE;inputData[\"testmaster\"][\"nsitecode\"]=userInfo.nmastersitecode;testColumns.forEach(function(items){var mapkey=Object.keys(items)[0];var columns=Object.values(items)[0];columns.map(function(item){var key=Object.keys(item)[0];var value=Object.values(item)[0];if(value===\"input\"){return inputData[mapkey][key]=selectedRecord[key]?selectedRecord[key].value?selectedRecord[key].value:-1:-1;}else if(value===\"int\"){return inputData[mapkey][key]=selectedRecord[key]?selectedRecord[key]:0;}else if(value===\"string\"){return inputData[mapkey][key]=selectedRecord[key]?selectedRecord[key].trim():\"\";}else if(value===\"float\"){return inputData[mapkey][key]=selectedRecord[key]?selectedRecord[key]:0;}else if(value===\"customobject\"){return inputData[mapkey][key]=customobject;}else{return null;}});});var postParam=undefined;if(operation===\"create\"){if(selectedRecord[\"nsectioncode\"]){inputData[\"testsection\"][\"nsectioncode\"]=selectedRecord[\"nsectioncode\"].value;inputData[\"testsection\"][\"ndefaultstatus\"]=transactionStatus.YES;inputData[\"testsection\"][\"nstatus\"]=transactionStatus.ACTIVE;}if(selectedRecord[\"nmethodcode\"]){inputData[\"testmethod\"][\"nmethodcode\"]=selectedRecord[\"nmethodcode\"].value;inputData[\"testmethod\"][\"ndefaultstatus\"]=transactionStatus.YES;inputData[\"testmethod\"][\"nstatus\"]=transactionStatus.ACTIVE;}if(selectedRecord[\"ninstrumentcatcode\"]){inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"]=selectedRecord[\"ninstrumentcatcode\"].value;inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"]=transactionStatus.YES;inputData[\"testinstrumentcategory\"][\"nstatus\"]=transactionStatus.ACTIVE;}if(selectedRecord[\"ntestpackagecode\"]){inputData[\"testpackagetest\"][\"ntestpackagecode\"]=selectedRecord[\"ntestpackagecode\"].value;inputData[\"testpackagetest\"][\"ndefaultstatus\"]=transactionStatus.YES;inputData[\"testpackagetest\"][\"nstatus\"]=transactionStatus.ACTIVE;}}else if(operation===\"copy\"){inputData[\"testmaster\"][\"ntestcode\"]=_this.props.Login.masterData.SelectedTest[\"ntestcode\"];}else if(operation===\"update\"){postParam={inputListName:\"TestMaster\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestcode\"};}if((operation===\"create\"||operation===\"update\")&&inputData[\"testparameter\"]){inputData[\"testparameter\"][\"sdisplaystatus\"]=selectedRecord[\"nparametertypecode\"]&&selectedRecord[\"nparametertypecode\"].label;}_this.setState({nfilterTestCategory:{\"label\":selectedRecord.ntestcategorycode.label,\"value\":selectedRecord.ntestcategorycode.value}});if(operation!==\"update\"){var updateInfo={typeName:DEFAULT_RETURN,data:{defaultkeyname:\"parametereventkey\"}};_this.props.updateStore(updateInfo);}//  let valid = true;\n// if (operation === \"update\" && (validateTest === undefined || validateTest === true)){       \n// if (valid){\nvar inputParam={inputData:_objectSpread(_objectSpread({},inputData),{},{validatetest:false}),classUrl:\"testmaster\",operation:operation,methodUrl:\"TestMaster\",saveType:saveType,formRef:formRef,postParam:postParam,searchRef:_this.searchRef,selectedRecord:_objectSpread({},_this.state.selectedRecord)};var masterData=_this.props.Login.masterData;if(showEsign(_this.props.Login.userRoleControlRights,_this.props.Login.userInfo.nformcode,_this.props.Login.ncontrolCode)){var _updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData},saveType:saveType,formRef:formRef}};_this.props.updateStore(_updateInfo);}else{_this.props.crudMaster(inputParam,masterData,\"openModal\",{});}// }\n};_this.onSaveReportInfoTest=function(saveType,formRef){var postParam=undefined;var inputData=[];var selectedRecord=_this.state.selectedRecord;postParam={inputListName:\"TestMaster\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestcode\"};inputData[\"reportinfotest\"]={};inputData[\"reportinfotest\"][\"ntestcode\"]=_this.props.Login.masterData.SelectedTest.ntestcode;inputData[\"reportinfotest\"][\"sconfirmstatement\"]=selectedRecord.sconfirmstatement;inputData[\"reportinfotest\"][\"sdecisionrule\"]=selectedRecord.sdecisionrule;inputData[\"reportinfotest\"][\"ssopdescription\"]=selectedRecord.ssopdescription;inputData[\"reportinfotest\"][\"stestcondition\"]=selectedRecord.stestcondition;inputData[\"reportinfotest\"][\"sdeviationcomments\"]=selectedRecord.sdeviationcomments;inputData[\"reportinfotest\"][\"smethodstandard\"]=selectedRecord.smethodstandard;inputData[\"reportinfotest\"][\"sreference\"]=selectedRecord.sreference;inputData[\"userinfo\"]=_this.props.Login.userInfo;var dataState=_this.state.dataState;var inputParam={classUrl:_this.props.Login.inputParam.classUrl,methodUrl:\"ReportInfoTest\",displayName:_this.props.Login.screenName,inputData:inputData,selectedId:_this.state.selectedRecord[\"ntestcode\"],operation:\"update\",saveType:saveType,formRef:formRef,dataState:dataState,searchRef:_this.searchRef,postParam:postParam};if(showEsign(_this.props.Login.userRoleControlRights,_this.props.Login.userInfo.nformcode,_this.props.Login.ncontrolCode)){var updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:_this.props.Login.masterData},openModal:true,screenName:_this.props.intl.formatMessage({id:\"IDS_REPORTINFOTEST\"}),operation:_this.props.Login.operation}};_this.props.updateStore(updateInfo);}else{_this.props.crudMaster(inputParam,_this.props.Login.masterData,\"openModal\");}};_this.validateEsign=function(){var inputParam={inputData:{\"userinfo\":_objectSpread(_objectSpread({},_this.props.Login.userInfo),{},{sreason:_this.state.selectedRecord[\"esigncomments\"],nreasoncode:_this.state.selectedRecord[\"esignreason\"]&&_this.state.selectedRecord[\"esignreason\"].value,spredefinedreason:_this.state.selectedRecord[\"esignreason\"]&&_this.state.selectedRecord[\"esignreason\"].label}),password:_this.state.selectedRecord[\"esignpassword\"]},screenData:_this.props.Login.screenData};_this.props.validateEsignCredential(inputParam,\"openModal\");};_this.reloadData=function(){// this.searchRef.current.value = \"\";\n// const inputParam = {\n//     inputData: { \"userinfo\": this.props.Login.userInfo },\n//     classUrl: \"testmaster\",\n//     methodUrl: \"TestMaster\",\n//     userInfo: this.props.Login.userInfo,\n//     displayName: \"IDS_TESTMASTER\"\n// };\n// this.props.callService(inputParam);\n_this.searchRef.current.value=\"\";if(_this.state.nfilterTestCategory.value){var inputParam={inputData:{//    ntestcategorycode: this.state.nfilterTestCategory.value,\nntestcategorycode:_this.props.Login.masterData.SelectedTestCat&&_this.props.Login.masterData.SelectedTestCat.ntestcategorycode,userinfo:_this.props.Login.userInfo,nfilterTestCategory:_this.state.nfilterTestCategory},classUrl:\"testmaster\",methodUrl:\"TestMasterByCategory\"};_this.props.changeTestCategoryFilter(inputParam,_this.props.Login.masterData.filterTestCategory);}else{toast.warn(_this.props.intl.formatMessage({id:\"IDS_TESTCATEGORYNOTAVAILABLE\"}));}};_this.state={selectedRecord:{},error:\"\",userRoleControlRights:[],controlMap:new Map(),skip:0,take:_this.props.Login.settings?_this.props.Login.settings[3]:10,sidebarview:false};_this.searchRef=React.createRef();_this.searchFieldList=[\"stestname\",\"stestsynonym\",\"sdescription\",\"saccredited\",\"stestcategoryname\",\"ncost\",\"stransactionstatus\"];return _this;}_createClass(TestMaster,[{key:\"render\",value:function render(){var _this2=this;//console.log(\"render in test:\", this.props.Login);\nthis.confirmMessage=new ConfirmMessage();var _this$props$Login$mas=this.props.Login.masterData,_TestMaster=_this$props$Login$mas.TestMaster,SelectedTest=_this$props$Login$mas.SelectedTest,searchedData=_this$props$Login$mas.searchedData;var _this$props$Login=this.props.Login,masterData=_this$props$Login.masterData,userInfo=_this$props$Login.userInfo,testData=_this$props$Login.testData,parameterData=_this$props$Login.parameterData,otherTestData=_this$props$Login.otherTestData,linkMaster=_this$props$Login.linkMaster,editFiles=_this$props$Login.editFiles;var addId=this.state.controlMap.has(\"AddTest\")&&this.state.controlMap.get(\"AddTest\").ncontrolcode;var editId=this.state.controlMap.has(\"EditTest\")&&this.state.controlMap.get(\"EditTest\").ncontrolcode;var deleteId=this.state.controlMap.has(\"DeleteTest\")&&this.state.controlMap.get(\"DeleteTest\").ncontrolcode;var copyId=this.state.controlMap.has(\"CopyTest\")&&this.state.controlMap.get(\"CopyTest\").ncontrolcode;var reportdetailId=this.state.controlMap.has(\"ReportInfoTest\")&&this.state.controlMap.get(\"ReportInfoTest\").ncontrolcode;var filterParam={inputListName:\"TestMaster\",selectedObject:\"SelectedTest\",primaryKeyField:\"ntestcode\",fetchUrl:\"testmaster/getTestById\",fecthInputObject:{userinfo:this.props.Login.userInfo},masterData:this.props.Login.masterData,searchFieldList:this.searchFieldList};if(this.props.Login.openModal){this.mandatoryFields=this.findMandatoryFields(this.props.Login.screenName,this.state.selectedRecord,this.props.Login.operation);}var breadCrumbData=this.state.filterData||[];return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\"},breadCrumbData.length>0?/*#__PURE__*/React.createElement(Affix,{top:53},/*#__PURE__*/React.createElement(BreadcrumbComponent,{breadCrumbItem:breadCrumbData})):\"\",/*#__PURE__*/React.createElement(Row,{noGutters:true},/*#__PURE__*/React.createElement(Col,{md:\"\".concat(!this.state.sidebarview?'4':\"2\")},/*#__PURE__*/React.createElement(\"span\",{onClick:function onClick(){return _this2.setState({sidebarview:!_this2.state.sidebarview});},className:\"sidebar-view-btn\"},!this.state.sidebarview?/*#__PURE__*/React.createElement(\"i\",{class:\"fa fa-less-than\"}):/*#__PURE__*/React.createElement(\"i\",{class:\"fa fa-greater-than\"})),/*#__PURE__*/React.createElement(ListMaster,{masterData:masterData,screenName:this.props.intl.formatMessage({id:\"IDS_TEST\"}),masterList:searchedData||_TestMaster,getMasterDetail:function getMasterDetail(test){return _this2.props.getTestMaster(test,userInfo,masterData);},selectedMaster:SelectedTest,primaryKeyField:\"ntestcode\",mainField:\"stestname\",firstField:\"stestcategoryname\",secondField:\"stransactionstatus\",openModal:function openModal(){return _this2.props.addTest(\"create\",SelectedTest,userInfo,addId,_this2.state.nfilterTestCategory);},filterColumnData:this.props.filterColumnData,filterParam:filterParam,userRoleControlRights:this.state.userRoleControlRights,addId:addId,searchRef:this.searchRef,reloadData:this.reloadData,needAccordianFilter:false//skip={this.state.skip}\n//take={this.state.take}\n//handlePageChange={this.handlePageChange}\n,openFilter:this.openFilter,closeFilter:this.closeFilter,onFilterSubmit:this.onFilterSubmit,showFilterIcon:true,showFilter:this.props.Login.showFilter,filterComponent:[{\"IDS_TESTFILTER\":/*#__PURE__*/React.createElement(TestCategoryFilter,{filterTestCategory:this.state.filterTestCategory||[],nfilterTestCategory:this.state.nfilterTestCategory||{},onComboChange:this.onComboChange})}]})),/*#__PURE__*/React.createElement(Col,{md:\"\".concat(!this.state.sidebarview?'8':\"10\")},_TestMaster&&_TestMaster.length>0&&SelectedTest&&Object.values(SelectedTest).length>0?/*#__PURE__*/React.createElement(ContentPanel,{className:\"panel-main-content\"},/*#__PURE__*/React.createElement(Card,{className:\"border-0\"},/*#__PURE__*/React.createElement(Card.Header,null,/*#__PURE__*/React.createElement(Card.Title,{className:\"product-title-main\"},SelectedTest.stestname),/*#__PURE__*/React.createElement(Card.Subtitle,null,/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex product-category\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"product-title-sub flex-grow-1\"},/*#__PURE__*/React.createElement(MediaLabel,{className:\"btn btn-outlined \".concat(SelectedTest.ntransactionstatus===1?\"outline-success\":\"outline-secondary\",\" btn-sm ml-3\")},SelectedTest.ntransactionstatus===1&&/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faCheck}),SelectedTest.stransactionstatus),/*#__PURE__*/React.createElement(MediaLabel,{className:\"btn-normal \".concat(SelectedTest.naccredited===transactionStatus.ACCREDITED?\"outline-success\":\"normal-danger\",\" btn-sm mr-3\")},SelectedTest.saccredited)),/*#__PURE__*/React.createElement(\"div\",{className:\"d-inline\"},parseInt(this.props.Login.settings[34])===transactionStatus.YES?/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2\",name:\"reportdetailstestname\",hidden:this.state.userRoleControlRights.indexOf(reportdetailId)===-1,\"data-tip\":this.props.intl.formatMessage({id:\"IDS_REPORTINFOTEST\"})//data-for=\"tooltip_list_wrap\"\n,onClick:function onClick(e){return _this2.props.ReportInfoTest(\"\",\"reportinfotest\",\"ntestcode\",_this2.props.Login.masterData,_this2.props.Login.userInfo,reportdetailId);}},/*#__PURE__*/React.createElement(ReportEdit,{className:\"custom_icons\",width:\"20\",height:\"20\"})):\"\",/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2\",name:\"edittestname\",hidden:this.state.userRoleControlRights.indexOf(editId)===-1,\"data-tip\":this.props.intl.formatMessage({id:\"IDS_EDIT\"})//data-for=\"tooltip_list_wrap\"\n,onClick:function onClick(){return _this2.props.addTest(\"update\",SelectedTest,userInfo,editId,_this2.state.nfilterTestCategory);}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faPencilAlt})),/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2 action-icons-wrap\",name:\"deletetestname\",\"data-tip\":this.props.intl.formatMessage({id:\"IDS_DELETE\"})//   data-for=\"tooltip_list_wrap\"\n,hidden:this.state.userRoleControlRights.indexOf(deleteId)===-1,onClick:function onClick(){return _this2.ConfirmDelete(SelectedTest,\"delete\",deleteId,\"TestMaster\",\"openModal\");}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faTrashAlt})),/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2 \",name:\"copytestname\",hidden:this.state.userRoleControlRights.indexOf(copyId)===-1,\"data-tip\":this.props.intl.formatMessage({id:\"IDS_COPY\"})// data-for=\"tooltip_list_wrap\"\n,onClick:function onClick(){return _this2.props.addTest(\"copy\",SelectedTest,userInfo,copyId,_this2.state.nfilterTestCategory);}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faCopy})))))),/*#__PURE__*/React.createElement(Card.Body,{className:\"form-static-wrap\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.stestsynonym))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_SHORTNAME\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.sshortname))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_PRICE\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.ncost))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_TAT\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.ntat,SelectedTest.ntat!==0&&SelectedTest.ntatperiodcode!==-1?\" \".concat(SelectedTest.statperiodname):\"\"))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_TRAININGNEEDED\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.strainingneed,\" \"))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_INTERFACETYPE\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.sinterfacetypename,\" \"))),/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_TESTPLATFORM\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.stestplatform))),/*#__PURE__*/React.createElement(Col,{md:\"12\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,this.props.intl.formatMessage({id:\"IDS_TESTPROCEDURE\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,SelectedTest.sdescription)))),/*#__PURE__*/React.createElement(TestView,{isFormulaOpen:this.props.Login.isFormulaOpen,linkMaster:linkMaster,editFiles:editFiles,userInfo:this.props.Login.userInfo,parameterData:parameterData||[],otherTestData:otherTestData||[],formulaData:this.props.Login.formulaData||{},dataState:this.props.Login.dataState,masterData:masterData,inputParam:this.props.Login.inputParam,controlMap:this.state.controlMap,userRoleControlRights:this.state.userRoleControlRights,esignRights:this.props.Login.userRoleControlRights,screenData:this.props.Login.screenData,openChildModal:this.props.Login.openChildModal,showSaveContinue:this.props.Login.showSaveContinue,operation:this.props.Login.operation,screenName:this.props.Login.screenName,selectedRecord:this.props.Login.selectedRecord,loadEsign:this.props.Login.loadEsign,ncontrolCode:this.props.Login.ncontrolCode,crudMaster:this.props.crudMaster,addParameterSpecification:this.props.addParameterSpecification,getAvailableData:this.props.getAvailableData,addCodedResult:this.props.addCodedResult,addSubCodedResult:this.addSubCodedResult,addFormula:this.props.addFormula,formulaChangeFunction:this.props.formulaChangeFunction,addParameter:this.props.addParameter,addContainerType:this.props.addContainerType,deleteAction:this.deleteAction,getTestDetails:this.props.getTestDetails,updateStore:this.props.updateStore,validateEsignCredential:this.props.validateEsignCredential,addTestFile:this.props.addTestFile,viewAttachment:this.props.viewAttachment,settings:this.props.Login.settings,getActiveTestContainerTypeById:this.props.getActiveTestContainerTypeById,hideQualisForms:this.props.Login.hideQualisForms,onFocus:this.handleFocus})))):\"\"))),this.props.Login.openModal&&this.props.Login.operation&&this.props.Login.inputParam&&/*#__PURE__*/React.createElement(SlideOutModal,{show:this.props.Login.openModal//size={this.props.Login.operation===\"create\" ? \"xl\" : \"lg\" }\n,closeModal:this.closeModal,operation:this.props.Login.operation,inputParam:this.props.Login.inputParam,screenName:this.props.Login.screenName,onSaveClick:this.onSaveTest,esign:this.props.Login.loadEsign,validateEsign:this.validateEsign,selectedRecord:this.state.selectedRecord||{},mandatoryFields:this.mandatoryFields||[],addComponent:this.props.Login.loadEsign?/*#__PURE__*/React.createElement(Esign,{operation:this.props.Login.operation,onInputOnChange:this.onEsignInputOnChange,inputParam:this.props.Login.inputParam,selectedRecord:this.state.selectedRecord||{}}):this.props.Login.operation===\"reportinfotest\"?/*#__PURE__*/React.createElement(TestReportInfo,{userInfo:this.props.Login.userInfo,selectedRecord:this.state.selectedRecord||{},onInputOnChange:this.onInputOnChange,onNumericInputChange:this.onNumericInputChange}):/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:this.props.Login.needOtherTest?\"6\":\"12\"},/*#__PURE__*/React.createElement(AddTest,{selectedRecord:this.state.selectedRecord||{},onInputOnChange:this.onInputOnChange// onActiveStatusChange={this.onActiveStatusChange}\n,onNumericInputChange:this.onNumericInputChange,onComboChange:this.onComboChange,testData:testData,otherTestData:otherTestData,needOtherTest:this.props.Login.needOtherTest,parameterData:parameterData,hideQualisForms:this.props.Login.hideQualisForms})),this.props.Login.needOtherTest&&/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(AddParameter,{selectedRecord:this.state.selectedRecord||{},onInputOnChange:this.onInputOnChange,onNumericInputChange:this.onNumericInputChange,onComboChange:this.onComboChange,parameterData:parameterData,userInfo:this.props.Login.userInfo,onFocus:this.handleFocus})))}));}},{key:\"findMandatoryFields\",value:function findMandatoryFields(screenName,selectedRecord,operation){if(screenName===\"IDS_TEST\"){var mandatoryFields=[{\"idsName\":\"IDS_TESTCATEGORY\",\"dataField\":\"ntestcategorycode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"},{\"idsName\":\"IDS_TESTNAME\",\"dataField\":\"stestname\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_TESTSYNONYM\",\"dataField\":\"stestsynonym\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"}];if(operation===\"create\"){mandatoryFields.push({\"idsName\":\"IDS_SECTION\",\"dataField\":\"nsectioncode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"},{\"idsName\":\"IDS_PARAMETERNAME\",\"dataField\":\"sparametername\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_PARAMETERSYNONYM\",\"dataField\":\"sparametersynonym\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_PARAMETERTYPE\",\"dataField\":\"nparametertypecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"});if(selectedRecord&&Object.values(selectedRecord).length>0&&selectedRecord[\"nparametertypecode\"]){if(selectedRecord[\"nparametertypecode\"].value===parameterType.NUMERIC){mandatoryFields.push({\"idsName\":\"IDS_ROUNDINGDIGITS\",\"dataField\":\"nroundingdigits\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_UNIT\",\"dataField\":\"nunitcode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"});}else if(selectedRecord[\"nparametertypecode\"].value===parameterType.PREDEFINED){mandatoryFields.push({\"idsName\":\"IDS_CODEDRESULT\",\"dataField\":\"spredefinedname\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_ACTUALRESULT\",\"dataField\":\"ngradecode\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"},{\"idsName\":\"IDS_CODEDRESULTSYNONYM\",\"dataField\":\"spredefinedsynonym\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"});}}}mandatoryFields.forEach(function(item){return item.mandatory===true&&mandatoryFields.push(item);});return mandatoryFields;}else if(operation===\"reportinfotest\"){var _mandatoryFields=[];_mandatoryFields.push({\"idsName\":\"IDS_CONFIRMSTATEMENT\",\"dataField\":\"sconfirmstatement\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_DECISIONRULE\",\"dataField\":\"sdecisionrule\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_SOPDESCRIPTION\",\"dataField\":\"ssopdescription\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_TESTCONDITION\",\"dataField\":\"stestcondition\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_DEVIATIONCOMMENTS\",\"dataField\":\"sdeviationcomments\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_METHODSTANDARD\",\"dataField\":\"smethodstandard\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"},{\"idsName\":\"IDS_REFERENCE\",\"dataField\":\"sreference\",\"width\":\"200px\",\"mandatory\":true,\"mandatoryLabel\":\"IDS_ENTER\",\"controlType\":\"textbox\"});return _mandatoryFields;}else{return[];}}},{key:\"handleFocus\",value:function handleFocus(e){e.target.select();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(previousProps){var isComponentUpdated=false;var selectedRecord=this.state.selectedRecord||{};if(this.props.Login.selectedRecord!==previousProps.Login.selectedRecord){selectedRecord=this.props.Login.selectedRecord;isComponentUpdated=true;}var userRoleControlRights=this.state.userRoleControlRights||[];var controlMap=this.state.controlMap||new Map();if(this.props.Login.userInfo&&this.props.Login.userInfo.nformcode!==previousProps.Login.userInfo.nformcode){var nformCode=this.props.Login.userInfo.nformcode;if(this.props.Login.userRoleControlRights){this.props.Login.userRoleControlRights[nformCode]&&Object.values(this.props.Login.userRoleControlRights[nformCode]).map(function(item){return userRoleControlRights.push(item.ncontrolcode);});}controlMap=getControlMap(this.props.Login.userRoleControlRights,nformCode);isComponentUpdated=true;}var nfilterTestCategory=this.state.nfilterTestCategory||{};var filterTestCategory=this.state.filterTestCategory||{};if(this.props.Login.masterData.filterTestCategory!==previousProps.Login.masterData.filterTestCategory){var testCategoryMap=constructOptionList(this.props.Login.masterData.filterTestCategory||[],\"ntestcategorycode\",\"stestcategoryname\",'ntestcategorycode','ascending',false);filterTestCategory=testCategoryMap.get(\"OptionList\");if(testCategoryMap.get(\"DefaultValue\")){nfilterTestCategory=testCategoryMap.get(\"DefaultValue\");}else if(filterTestCategory&&filterTestCategory.length>0){nfilterTestCategory=filterTestCategory[0];}isComponentUpdated=true;}else if(this.props.Login.masterData.nfilterTestCategory!==previousProps.Login.masterData.nfilterTestCategory){nfilterTestCategory=this.props.Login.masterData.nfilterTestCategory;isComponentUpdated=true;}if(isComponentUpdated){this.setState({nfilterTestCategory:nfilterTestCategory,userRoleControlRights:userRoleControlRights,controlMap:controlMap,selectedRecord:selectedRecord,filterTestCategory:filterTestCategory});}if(this.props.Login.masterData!==previousProps.Login.masterData){var filterData=this.generateBreadCrumData();this.setState({filterData:filterData});}}},{key:\"generateBreadCrumData\",value:function generateBreadCrumData(){var breadCrumbData=[];if(this.props.Login.masterData&&this.props.Login.masterData.filterTestCategory){breadCrumbData.push({\"label\":\"IDS_TESTCATEGORY\",\"value\":this.props.Login.masterData.SelectedTestCat?this.props.Login.masterData.SelectedTestCat.stestcategoryname:\"NA\"});}return breadCrumbData;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var updateInfo={typeName:DEFAULT_RETURN,data:{masterData:[],inputParam:undefined,operation:null,modalName:undefined,testData:{},parameterData:{},otherTestData:{},formulaData:{}}};this.props.updateStore(updateInfo);}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.Login.masterStatus!==\"\"){if(props.Login.errorCode===417||props.Login.errorCode===409){toast.warn(props.Login.masterStatus);props.Login.masterStatus=\"\";}}if(props.Login.error!==state.error){toast.error(props.Login.error);props.Login.error=\"\";}return null;}}]);return TestMaster;}(Component);var mapStateToProps=function mapStateToProps(state){return{Login:state.Login};};export default connect(mapStateToProps,{callService:callService,crudMaster:crudMaster,getTestMaster:getTestMaster,addTest:addTest,updateStore:updateStore,formulaChangeFunction:formulaChangeFunction,filterColumnData:filterColumnData,getTestDetails:getTestDetails,addParameter:addParameter,validateEsignCredential:validateEsignCredential,addCodedResult:addCodedResult,addParameterSpecification:addParameterSpecification,getAvailableData:getAvailableData,addFormula:addFormula,changeTestCategoryFilter:changeTestCategoryFilter,addTestFile:addTestFile,viewAttachment:viewAttachment,getActiveTestContainerTypeById:getActiveTestContainerTypeById,addContainerType:addContainerType,ReportInfoTest:ReportInfoTest})(injectIntl(TestMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/TestMaster.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","rsapi","callService","crudMaster","getTestMaster","addTest","updateStore","getTestDetails","formulaChangeFunction","filterColumnData","addParameter","validateEsignCredential","addCodedResult","addParameterSpecification","getAvailableData","addFormula","changeTestCategoryFilter","addTestFile","viewAttachment","getActiveTestContainerTypeById","addContainerType","ReportInfoTest","TestView","injectIntl","toast","AddParameter","AddTest","TestReportInfo","SlideOutModal","getControlMap","showEsign","constructOptionList","TestCategoryFilter","ListMaster","faTrashAlt","faPencilAlt","faCopy","faCheck","FontAwesomeIcon","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","Esign","parameterType","transactionStatus","ConfirmMessage","BreadcrumbComponent","Affix","TestMaster","props","sidebarExpandCollapse","setState","sidebarview","handlePageChange","event","skip","take","ConfirmDelete","item","operation","ncontrolCode","methodUrl","modalName","confirmMessage","confirm","intl","formatMessage","id","deleteAction","onComboChange","comboData","fieldName","caseNo","selectedRecord","state","value","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","NO","parameterData","Login","YES","defaultUnit","defaultGrade","parameterInfo","typeName","data","nfilterTestCategory","searchRef","current","openFilter","showFilter","updateInfo","closeFilter","console","log","onFilterSubmit","inputParam","inputData","ntestcategorycode","userinfo","userInfo","classUrl","masterData","filterTestCategory","warn","onEsignInputOnChange","target","type","name","checked","onInputOnChange","optional","deltaperiod","filter","x","ndefaultstatus","label","onNumericInputChange","test","closeModal","loadEsign","openModal","closeFormulaModal","addformula","addSubCodedResult","selected","toLowerCase","screenName","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","ntestcode","fetchUrl","fecthInputObject","userRoleControlRights","nformcode","screenData","validateTestExistenceInTestGroup","post","SelectedTest","then","response","onSaveTest","undefined","catch","error","status","message","onSaveReportInfoTest","DEACTIVE","onSaveValidatedTest","saveType","formRef","customobject","testColumns","push","nisadhocparameter","nisvisible","nstatus","ACTIVE","trim","nmastersitecode","forEach","items","mapkey","Object","keys","columns","values","map","key","defaultkeyname","validatetest","sconfirmstatement","sdecisionrule","ssopdescription","stestcondition","sdeviationcomments","smethodstandard","sreference","dataState","displayName","selectedId","validateEsign","sreason","nreasoncode","spredefinedreason","password","reloadData","SelectedTestCat","controlMap","Map","settings","createRef","searchFieldList","searchedData","testData","otherTestData","linkMaster","editFiles","addId","has","get","ncontrolcode","editId","deleteId","copyId","reportdetailId","filterParam","mandatoryFields","findMandatoryFields","breadCrumbData","filterData","length","stestname","ntransactionstatus","stransactionstatus","naccredited","ACCREDITED","saccredited","parseInt","indexOf","e","stestsynonym","sshortname","ncost","ntat","ntatperiodcode","concat","statperiodname","strainingneed","sinterfacetypename","stestplatform","sdescription","isFormulaOpen","formulaData","openChildModal","showSaveContinue","hideQualisForms","handleFocus","needOtherTest","NUMERIC","PREDEFINED","mandatory","select","previousProps","isComponentUpdated","nformCode","testCategoryMap","generateBreadCrumData","stestcategoryname","masterStatus","errorCode","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport rsapi from '../../rsapi';\r\n\r\nimport {\r\n    callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\r\n    addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\r\n    changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById,addContainerType,ReportInfoTest\r\n} from '../../actions'\r\nimport TestView from './TestView';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport AddParameter from './AddParameter';\r\nimport AddTest from '../../pages/testmanagement/AddTest';\r\nimport TestReportInfo from \"../../pages/testmanagement/TestReportInfo\";\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\nimport TestCategoryFilter from './TestCategoryFilter';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { ReactComponent as ReportEdit } from '../../assets/image/report-edit.svg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\n\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nclass TestMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 10,\r\n            sidebarview:false\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"stestname\", \"stestsynonym\", \"sdescription\", \"saccredited\", \"stestcategoryname\", \"ncost\", \"stransactionstatus\"]\r\n    }\r\n    \r\n    sidebarExpandCollapse = () => {\r\n      //  alert('ss');\r\n       // this.setState({sidebarviewstate: !this.state.sidebarviewstate}) \r\n       this.setState({\r\n        sidebarview: true\r\n    })          \r\n       // sidebarviewstate:true\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n\r\n        //console.log(\"render in test:\", this.props.Login);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        const { TestMaster, SelectedTest, searchedData } = this.props.Login.masterData;\r\n        const { masterData, userInfo, testData, parameterData, otherTestData, linkMaster, editFiles } = this.props.Login;\r\n        const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\r\n        const reportdetailId= this.state.controlMap.has(\"ReportInfoTest\")  && this.state.controlMap.get(\"ReportInfoTest\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\",\r\n            fetchUrl: \"testmaster/getTestById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        if (this.props.Login.openModal) {\r\n            this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n        }\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                {/* Start of get display */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                            <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                                {!this.state.sidebarview ?\r\n                                    <i class=\"fa fa-less-than\"></i> :\r\n                                    <i class=\"fa fa-greater-than\"></i> \r\n                                }\r\n                            </span>\r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                masterList={searchedData || TestMaster}\r\n                                getMasterDetail={(test) => this.props.getTestMaster(test, userInfo, masterData)}\r\n                                selectedMaster={SelectedTest}\r\n                                primaryKeyField=\"ntestcode\"\r\n                                mainField=\"stestname\"\r\n                                firstField=\"stestcategoryname\"\r\n                                secondField=\"stransactionstatus\"\r\n                                openModal={() => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                needAccordianFilter={false}\r\n                                //skip={this.state.skip}\r\n                                //take={this.state.take}\r\n                                //handlePageChange={this.handlePageChange}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TESTFILTER\":\r\n                                            <TestCategoryFilter\r\n                                                filterTestCategory={this.state.filterTestCategory || []}\r\n                                                nfilterTestCategory={this.state.nfilterTestCategory || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                            {TestMaster && TestMaster.length > 0 && SelectedTest && Object.values(SelectedTest).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {SelectedTest.stestname}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                {/* <Row>\r\n                                                <Col md={8}> */}\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn btn-outlined ${SelectedTest.ntransactionstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {SelectedTest.ntransactionstatus === 1 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                                            {SelectedTest.stransactionstatus}\r\n                                                        </MediaLabel>\r\n                                                        <MediaLabel className={`btn-normal ${SelectedTest.naccredited === transactionStatus.ACCREDITED ? \"outline-success\" : \"normal-danger\"} btn-sm mr-3`}>\r\n                                                            {SelectedTest.saccredited}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    {/* </Col>\r\n                                                <Col md=\"4\"> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <div className=\"d-inline\">\r\n                                                        {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                        {/* Start Here */}\r\n                                                        {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\" >  \r\n                                                            <FontAwesomeIcon icon={faEye} className=\"ActionIconColor\" onClick={(e)=>this.viewAdditionalInfo(e)} />\r\n                                                        </Nav.Link> */}\r\n                                                        {/* End Here */}\r\n\r\n                                                        { \r\n                                                        parseInt(this.props.Login.settings[34]) === transactionStatus.YES ?\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"reportdetailstestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(reportdetailId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORTINFOTEST\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={(e) => this.props.ReportInfoTest(\"\", \"reportinfotest\", \"ntestcode\", this.props.Login.masterData, this.props.Login.userInfo, reportdetailId)}>\r\n                                                            <ReportEdit className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                        </Nav.Link>     \r\n                                                        : \"\"}\r\n\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"edittestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"update\", SelectedTest, userInfo, editId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletetestname\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                         //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.deleteAction(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                                /> */}\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" name=\"copytestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                           // data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"copy\", SelectedTest, userInfo, copyId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                    {/* </Tooltip> */}\r\n                                                </div>\r\n                                                {/* </Col>\r\n                                            </Row> */}\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.stestsynonym}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.sshortname}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TAT\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ntat} \r\n                                                                    {SelectedTest.ntat !== 0  && SelectedTest.ntatperiodcode !== -1 ? \" \".concat(SelectedTest.statperiodname) : \"\" }</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.strainingneed} </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.sinterfacetypename} </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"12\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.stestplatform}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"12\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.sdescription}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {/* {this.props.Login.masterData.TestParameter && this.props.Login.masterData.TestParameter.length > 0 && this.props.Login.masterData.TestParameter[0].nparametertypecode === 1 && */}\r\n                                                    {/* <Col md=\"6\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                {/* } */}\r\n                                                {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                {/* Start Here */}\r\n                                                {/* <Col md=\"6\">\r\n                                                <FormGroup>\r\n                                                    <FormLabel>{ this.props.intl.formatMessage({id: \"IDS_ADDITIONALINFO\"}) }</FormLabel>\r\n                                                    <ReadOnlyText>{ selectedTest.schecklistname }</ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col> */}\r\n                                                {/* End Here */}\r\n                                            </Row>\r\n                                            <TestView\r\n                                                isFormulaOpen={this.props.Login.isFormulaOpen}\r\n                                                linkMaster={linkMaster}\r\n                                                editFiles={editFiles}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                parameterData={parameterData || []}\r\n                                                otherTestData={otherTestData || []}\r\n                                                formulaData={this.props.Login.formulaData || {}}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                masterData={masterData}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                showSaveContinue={this.props.Login.showSaveContinue}\r\n                                                operation={this.props.Login.operation}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                addParameterSpecification={this.props.addParameterSpecification}\r\n                                                getAvailableData={this.props.getAvailableData}\r\n                                                addCodedResult={this.props.addCodedResult}\r\n                                                addSubCodedResult={this.addSubCodedResult}\r\n                                                addFormula={this.props.addFormula}\r\n                                                formulaChangeFunction={this.props.formulaChangeFunction}\r\n                                                addParameter={this.props.addParameter}\r\n                                                addContainerType={this.props.addContainerType}\r\n                                                deleteAction={this.deleteAction}\r\n                                                getTestDetails={this.props.getTestDetails}\r\n                                                updateStore={this.props.updateStore}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                addTestFile={this.props.addTestFile}\r\n                                                viewAttachment={this.props.viewAttachment}\r\n                                                settings = {this.props.Login.settings}\r\n                                                getActiveTestContainerTypeById={this.props.getActiveTestContainerTypeById}\r\n                                                hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                onFocus={this.handleFocus}\r\n                                            ></TestView>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display */}\r\n\r\n                {/* Start of Modal Sideout for Test Creation */}\r\n                {this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        //size={this.props.Login.operation===\"create\" ? \"xl\" : \"lg\" }\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveTest}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                             /> \r\n                             :this.props.Login.operation ===\"reportinfotest\" ?\r\n                                <TestReportInfo\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                />\r\n                            : <Row>\r\n                                {/* <Col md={this.props.Login.needOtherTest ? \"8\" : \"12\"}> */}\r\n                                <Col md={this.props.Login.needOtherTest ? \"6\" : \"12\"}>\r\n                                    <AddTest\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        // onActiveStatusChange={this.onActiveStatusChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        testData={testData}\r\n                                        otherTestData={otherTestData}\r\n                                        needOtherTest={this.props.Login.needOtherTest}\r\n                                        parameterData={parameterData}\r\n                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                    ></AddTest>\r\n                                </Col>                               \r\n                                {this.props.Login.needOtherTest &&\r\n                                    <Col md={6}>\r\n                                        <AddParameter\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            parameterData={parameterData}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            onFocus={this.handleFocus}\r\n                                        ></AddParameter>\r\n                                    </Col>\r\n                                }                                \r\n                            </Row>\r\n                           \r\n                        }\r\n                    />\r\n                }\r\n                {/* End of Modal Sideout for Test Creation */}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord, operation) {\r\n        if (screenName === \"IDS_TEST\") {\r\n            let mandatoryFields = [\r\n                { \"idsName\": \"IDS_TESTCATEGORY\", \"dataField\": \"ntestcategorycode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                \r\n            ]\r\n            if (operation === \"create\") {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_SECTION\", \"dataField\": \"nsectioncode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametername\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n                );\r\n                if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\r\n                    if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\r\n                        mandatoryFields.push(\r\n                            { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                            { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                        );\r\n                    } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\r\n                        mandatoryFields.push(\r\n                            { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                            { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                            { \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n\r\n                        );\r\n                    }\r\n                }\r\n\r\n            }\r\n            mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\r\n            return mandatoryFields;\r\n        } else  if(operation ===\"reportinfotest\") {\r\n            let mandatoryFields = [];\r\n            mandatoryFields.push(\r\n                { \"idsName\": \"IDS_CONFIRMSTATEMENT\", \"dataField\": \"sconfirmstatement\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_DECISIONRULE\", \"dataField\": \"sdecisionrule\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_SOPDESCRIPTION\", \"dataField\": \"ssopdescription\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_TESTCONDITION\", \"dataField\": \"stestcondition\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_DEVIATIONCOMMENTS\", \"dataField\": \"sdeviationcomments\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_METHODSTANDARD\", \"dataField\": \"smethodstandard\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_REFERENCE\", \"dataField\": \"sreference\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            );\r\n            return mandatoryFields;\r\n\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"sparametername\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                let item = comboData['item'];\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = transactionStatus.NO;\r\n                const parameterData = this.props.Login.parameterData;\r\n                if (item[\"nunitrequired\"] === transactionStatus.YES) {\r\n                    needUnit = false;\r\n                    selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\r\n                } else {\r\n                    selectedRecord[\"nunitcode\"] = \"\";\r\n                }\r\n                if (item[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                    needRoundingDigit = false;\r\n                } else {\r\n                   selectedRecord[\"nroundingdigit\"] = \"\";\r\n                    selectedRecord[\"nroundingdigits\"] = \"\";\r\n                    selectedRecord[\"ndeltacheck\"] = 4;\r\n                    selectedRecord[\"ndeltacheckframe\"] = \"\";\r\n                    selectedRecord[\"ndeltaunitcode\"] = \"\";\r\n                    selectedRecord[\"ndeltachecklimitcode\"] = \"\";\r\n                }\r\n                if (item[\"npredefinedrequired\"] === transactionStatus.YES) {\r\n                    needCodedResult = false;\r\n                    npredefinedcode = item[\"npredefinedrequired\"];\r\n                } else {\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                }\r\n                if (item[\"ngraderequired\"] === transactionStatus.YES) {\r\n                    needActualResult = false;\r\n                    selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\r\n                } else {\r\n                    selectedRecord[\"ngradecode\"] = \"\";\r\n                }\r\n\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                const parameterInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        parameterData: {\r\n                            ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode\r\n                        }, selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(parameterInfo);\r\n\r\n                break;\r\n\r\n            case 3:\r\n                let nfilterTestCategory = this.state.nfilterTestCategory || {}\r\n                nfilterTestCategory = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ nfilterTestCategory })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\nconsole.log(\"Hello Close Filter\");\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterTestCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    ntestcategorycode: this.state.nfilterTestCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTestCategory: this.state.nfilterTestCategory\r\n                },\r\n                classUrl: \"testmaster\",\r\n                methodUrl: \"TestMasterByCategory\"\r\n            }\r\n            this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // onActiveStatusChange =(event, optional)=>{\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n    //     this.setState({ selectedRecord });\r\n    //     if (event.target.checked === false){\r\n    //        this.validateTestExistenceInTestGroup();\r\n    //     }\r\n    // }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                    if (selectedRecord['ndeltacheck']===transactionStatus.YES) {\r\n                        selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x =>\r\n                            x.item.ndefaultstatus === transactionStatus.YES)[0];\r\n                    }\r\n                    else {\r\n                        delete selectedRecord['ndeltaunitcode'];\r\n                    }\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = selectedRecord[\"stestsynonym\"] =\r\n                    selectedRecord[\"sparametersynonym\"] = event.target.value;\r\n                selectedRecord[\"sparametername\"] = { label: event.target.value, value: event.target.value };\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[event.target.name] = selectedRecord[\"sparametersynonym\"] = event.target.value;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n        case 6:\r\n          //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\r\n          selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value;\r\n\r\n           this.setState({ selectedRecord });\r\n                    break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // onNumericInputChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n       // console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\") {\r\n           // if(/^\\-/.test(value.target.value)){\r\n           // if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n                if (/^\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n\r\n              //  console.log(\"val:\", value.target.value);\r\n                selectedRecord[name] = value.target.value;\r\n            }\r\n            \r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFormulaModal = () => {\r\n        this.setState({ addformula: false });\r\n    }\r\n\r\n    addSubCodedResult = () => {\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        const selected = item[\"dataItem\"] ? item[\"dataItem\"] : item;\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\",\r\n            selectedRecord: {...this.state.selectedRecord},\r\n            postParam: {\r\n                inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\",\r\n                primaryKeyValue: selected.ntestcode,\r\n                fetchUrl: \"testmaster/getTestById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    [modalName]: true, screenName: \"IDS_TEST\", operation: operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, modalName, {});\r\n        }\r\n    }\r\n\r\n    validateTestExistenceInTestGroup = () => {\r\n\r\n        const operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\r\n                ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\r\n                \"userinfo\": this.props.Login.userInfo\r\n            })\r\n                .then(response => {\r\n                    if (response.data === true) {\r\n                        this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_TESTEXISTSINTESTGROUP\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.onSaveTest(null, null),\r\n                            false,\r\n                            undefined);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    onSaveTest = () => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        if(operation ===\"reportinfotest\"){\r\n            this.onSaveReportInfoTest(null,null);\r\n        }\r\n\r\n\r\n        else if (operation === \"update\") {\r\n            if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.DEACTIVE) {\r\n                return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\r\n                    ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                })\r\n                    .then(response => {\r\n                        if (response.data === true) {\r\n                            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_TESTEXISTSINTESTGROUP\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                () => this.onSaveValidatedTest(null, null),\r\n                                false,\r\n                                undefined);\r\n                        }\r\n                        else {\r\n                            this.onSaveValidatedTest(null, null);\r\n                        }\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                this.onSaveValidatedTest(null, null);\r\n            }\r\n        }\r\n        else {\r\n            this.onSaveValidatedTest(null, null);\r\n        }\r\n    }\r\n\r\n    // onSaveTest1 = (saveType, formRef) => {\r\n    //     const operation = this.props.Login.operation;\r\n    //     let inputData = {};\r\n    //     let customobject = null;\r\n    //     const userInfo = this.props.Login.userInfo;\r\n    //     const selectedRecord = this.state.selectedRecord;\r\n    //     let testColumns = [{\r\n    //         \"testmaster\": [{ \"ntestcode\": \"int\" }, { \"ntestcategorycode\": \"input\" }, { \"nchecklistversioncode\": \"input\" }, { \"naccredited\": \"int\" },\r\n    //         { \"ntransactionstatus\": \"int\" }, { \"stestname\": \"string\" }, { \"stestsynonym\": \"string\" }, { \"sdescription\": \"string\" }, { \"ncost\": \"float\" }]\r\n    //     }]\r\n    //     if (operation === \"create\") {\r\n    //         testColumns.push({\r\n    //             \"testparameter\": [{ \"ntestcode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"sparametername\": \"input\" },\r\n    //             { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" }]\r\n    //         });\r\n    //         inputData = {\r\n    //             \"testmaster\": {},\r\n    //             \"testparameter\": {\r\n    //                 nisadhocparameter: transactionStatus.NO,\r\n    //                 nisvisible: transactionStatus.YES,\r\n    //                 nstatus: transactionStatus.ACTIVE\r\n    //             },\r\n    //             \"testsection\": {},\r\n    //             \"testmethod\": {},\r\n    //             \"testinstrumentcategory\": {}\r\n    //         };\r\n    //         if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\r\n    //             customobject = {};\r\n    //             customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n    //             customobject[\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //             customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n    //         }\r\n    //     } else {\r\n    //         inputData = {\r\n    //             \"testmaster\": {}\r\n    //         };\r\n    //     }\r\n    //     inputData[\"userinfo\"] = userInfo;\r\n    //     inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //     inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\r\n    //     testColumns.forEach(function (items) {\r\n    //         const mapkey = Object.keys(items)[0];\r\n    //         const columns = Object.values(items)[0];\r\n    //         columns.map(item => {\r\n    //             const key = Object.keys(item)[0];\r\n    //             const value = Object.values(item)[0];\r\n    //             if (value === \"input\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n    //             } else if (value === \"int\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n    //             } else if (value === \"string\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n    //             } else if (value === \"float\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n    //             } else if (value === \"customobject\") {\r\n    //                 return inputData[mapkey][key] = customobject;\r\n    //             } else {\r\n    //                 return null;\r\n    //             }\r\n    //         });\r\n    //     });\r\n    //     let postParam = undefined;\r\n    //     if (operation === \"create\") {\r\n    //         if (selectedRecord[\"nsectioncode\"]) {\r\n    //             inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\r\n    //             inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n    //         if (selectedRecord[\"nmethodcode\"]) {\r\n    //             inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\r\n    //             inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n\r\n    //         if (selectedRecord[\"ninstrumentcatcode\"]) {\r\n    //             inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\r\n    //             inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n    //     } else if (operation === \"copy\") {\r\n    //         inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"]\r\n    //     } else if (operation === \"update\") {\r\n    //         postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n    //     }       \r\n\r\n    //    // this.setState({ nfilterTestCategory: { \"label\": selectedRecord.ntestcategorycode.label, \"value\": selectedRecord.ntestcategorycode.value } });\r\n    //     if (operation !== \"update\") {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: { defaultkeyname: \"parametereventkey\" }\r\n    //         };\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     let valid = true;\r\n    //     // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){\r\n\r\n\r\n    //     if (valid){\r\n    //         const inputParam = {\r\n    //             inputData :{...inputData, validatetest:false},\r\n    //             classUrl: \"testmaster\",\r\n    //             operation: operation,\r\n    //             methodUrl: \"TestMaster\",\r\n    //             saveType, \r\n    //             formRef, postParam, searchRef: this.searchRef\r\n    //         }\r\n    //         const masterData = this.props.Login.masterData;\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData }, saveType, formRef\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         } else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    onSaveValidatedTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        let inputData = {};\r\n        let customobject = null;\r\n        const userInfo = this.props.Login.userInfo;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testColumns = [{\r\n            \"testmaster\": [{ \"ntestcode\": \"int\" }, { \"ntestcategorycode\": \"input\" }, { \"nchecklistversioncode\": \"input\" }, { \"naccredited\": \"int\" },{ \"ntrainingneed\": \"int\" },\r\n            { \"ntransactionstatus\": \"int\" }, { \"stestname\": \"string\" }, { \"stestsynonym\": \"string\" }, { \"sshortname\": \"string\" },{ \"sdescription\": \"string\" }, { \"ncost\": \"float\" },\r\n            { \"stestplatform\": \"string\" },{ \"ntat\": \"int\" },{ \"ntatperiodcode\": \"input\" },{ \"ninterfacetypecode\": \"input\" }]\r\n        }]\r\n        if (operation === \"create\") {\r\n            testColumns.push({\r\n                \"testparameter\": [{ \"ntestcode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"sparametername\": \"input\" },\r\n                { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" },{ \"ndeltachecklimitcode\": \"float\" },{ \"ndeltacheck\": \"int\" },{ \"ndeltaunitcode\": \"input\" },{ \"ndeltacheckframe\": \"int\" }]\r\n            });\r\n            inputData = {\r\n                \"testmaster\": {},\r\n                \"testparameter\": {\r\n                    nisadhocparameter: transactionStatus.NO,\r\n                    nisvisible: transactionStatus.YES,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                },\r\n                \"testsection\": {},\r\n                \"testmethod\": {},\r\n                \"testinstrumentcategory\": {},\r\n                \"testpackagetest\":{}\r\n            };\r\n            if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\r\n                customobject = {};\r\n                customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n                customobject[\"nstatus\"] = transactionStatus.ACTIVE;\r\n                customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n                customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n            //     if (selectedRecord[\"sresultparacomment\"]) {\r\n            //     customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"].trim();}\r\n            // }\r\n            if (selectedRecord[\"spredefinedsynonym\"]) {\r\n                customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"].trim();}\r\n            }\r\n        } else {\r\n            inputData = {\r\n                \"testmaster\": {}\r\n            };\r\n        }\r\n        inputData[\"userinfo\"] = userInfo;\r\n        inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n        inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\r\n        testColumns.forEach(function (items) {\r\n            const mapkey = Object.keys(items)[0];\r\n            const columns = Object.values(items)[0];\r\n            columns.map(item => {\r\n                const key = Object.keys(item)[0];\r\n                const value = Object.values(item)[0];\r\n                if (value === \"input\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n                } else if (value === \"int\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"string\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n                } else if (value === \"float\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"customobject\") {\r\n                    return inputData[mapkey][key] = customobject;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n        });\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            if (selectedRecord[\"nsectioncode\"]) {\r\n                inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\r\n                inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n            if (selectedRecord[\"nmethodcode\"]) {\r\n                inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\r\n                inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n\r\n            if (selectedRecord[\"ninstrumentcatcode\"]) {\r\n                inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\r\n                inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n\r\n\r\n            if (selectedRecord[\"ntestpackagecode\"]) {\r\n                inputData[\"testpackagetest\"][\"ntestpackagecode\"] = selectedRecord[\"ntestpackagecode\"].value;\r\n                inputData[\"testpackagetest\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testpackagetest\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n        } else if (operation === \"copy\") {\r\n            inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"]\r\n        } else if (operation === \"update\") {\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n        }\r\n        if((operation === \"create\" || operation === \"update\") && inputData[\"testparameter\"]){\r\n            inputData[\"testparameter\"][\"sdisplaystatus\"] = selectedRecord[\"nparametertypecode\"] && selectedRecord[\"nparametertypecode\"].label;\r\n        }\r\n\r\n        this.setState({ nfilterTestCategory: { \"label\": selectedRecord.ntestcategorycode.label, \"value\": selectedRecord.ntestcategorycode.value } });\r\n        if (operation !== \"update\") {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { defaultkeyname: \"parametereventkey\" }\r\n            };\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        //  let valid = true;\r\n        // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){       \r\n        // if (valid){\r\n        const inputParam = {\r\n            inputData: { ...inputData, validatetest: false },\r\n            classUrl: \"testmaster\",\r\n            operation: operation,\r\n            methodUrl: \"TestMaster\",\r\n            saveType,\r\n            formRef, postParam, searchRef: this.searchRef,\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, formRef\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n        // }\r\n    }\r\n\r\n\r\n    onSaveReportInfoTest =(saveType,formRef) => {\r\n        let postParam = undefined;\r\n        let inputData =[];\r\n        const selectedRecord = this.state.selectedRecord;\r\n        postParam = {\r\n            inputListName: \"TestMaster\",\r\n            selectedObject: \"SelectedTest\",\r\n            primaryKeyField: \"ntestcode\",\r\n        };\r\n        inputData[\"reportinfotest\"] = {};\r\n        inputData[\"reportinfotest\"][\"ntestcode\"] =this.props.Login.masterData.SelectedTest.ntestcode;\r\n        inputData[\"reportinfotest\"][\"sconfirmstatement\"] =selectedRecord.sconfirmstatement;\r\n        inputData[\"reportinfotest\"][\"sdecisionrule\"] =selectedRecord.sdecisionrule;\r\n        inputData[\"reportinfotest\"][\"ssopdescription\"] =selectedRecord.ssopdescription;\r\n        inputData[\"reportinfotest\"][\"stestcondition\"] =selectedRecord.stestcondition;\r\n        inputData[\"reportinfotest\"][\"sdeviationcomments\"] =selectedRecord.sdeviationcomments;\r\n        inputData[\"reportinfotest\"][\"smethodstandard\"] =selectedRecord.smethodstandard;\r\n        inputData[\"reportinfotest\"][\"sreference\"] =selectedRecord.sreference;\r\n        \r\n        inputData[\"userinfo\"]=  this.props.Login.userInfo;\r\n        let dataState = this.state.dataState;\r\n    \r\n    \r\n        const inputParam = {\r\n          classUrl: this.props.Login.inputParam.classUrl,\r\n          methodUrl: \"ReportInfoTest\",\r\n          displayName: this.props.Login.screenName,\r\n          inputData: inputData,\r\n          selectedId: this.state.selectedRecord[\"ntestcode\"],\r\n          operation: \"update\", saveType, formRef, dataState,\r\n          searchRef: this.searchRef,\r\n          postParam: postParam\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_REPORTINFOTEST\" }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n   handleFocus(e){\r\n        e.target.select();\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        // this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"testmaster\",\r\n        //     methodUrl: \"TestMaster\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_TESTMASTER\"\r\n        // };\r\n        // this.props.callService(inputParam);\r\n        this.searchRef.current.value = \"\";\r\n        if (this.state.nfilterTestCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                //    ntestcategorycode: this.state.nfilterTestCategory.value,\r\n                   ntestcategorycode:this.props.Login.masterData.SelectedTestCat&&this.props.Login.masterData.SelectedTestCat.ntestcategorycode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTestCategory: this.state.nfilterTestCategory\r\n                },\r\n                classUrl: \"testmaster\",\r\n                methodUrl: \"TestMasterByCategory\"\r\n            }\r\n            this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isComponentUpdated = true;\r\n        }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || new Map();\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            isComponentUpdated = true;\r\n        }\r\n        let nfilterTestCategory = this.state.nfilterTestCategory || {};\r\n        let filterTestCategory = this.state.filterTestCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterTestCategory !== previousProps.Login.masterData.filterTestCategory) {\r\n            const testCategoryMap = constructOptionList(this.props.Login.masterData.filterTestCategory || [], \"ntestcategorycode\",\r\n                \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\r\n            filterTestCategory = testCategoryMap.get(\"OptionList\");\r\n            if (testCategoryMap.get(\"DefaultValue\")) {\r\n                nfilterTestCategory = testCategoryMap.get(\"DefaultValue\");\r\n            } else if (filterTestCategory && filterTestCategory.length > 0) {\r\n                nfilterTestCategory = filterTestCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterTestCategory !== previousProps.Login.masterData.nfilterTestCategory) {\r\n            nfilterTestCategory = this.props.Login.masterData.nfilterTestCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterTestCategory, userRoleControlRights, controlMap, selectedRecord, filterTestCategory });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_TESTCATEGORY\",\r\n                    \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,\r\n                testData: {}, parameterData: {}, otherTestData: {}, formulaData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getTestMaster, addTest, updateStore, formulaChangeFunction,\r\n    filterColumnData, getTestDetails, addParameter, validateEsignCredential, addCodedResult, addParameterSpecification,\r\n    getAvailableData, addFormula, changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById,addContainerType,ReportInfoTest\r\n})(injectIntl(TestMaster));"]},"metadata":{},"sourceType":"module"}