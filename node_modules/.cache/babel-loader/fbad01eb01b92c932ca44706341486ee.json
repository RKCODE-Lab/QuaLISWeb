{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\BuildQuery.js\";\nimport { faGripVertical, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { BuilderBorder, ContionalButton, DeleteRule } from './Sqlbuilder.styled';\nimport '../../assets/styles/querybuilder.css';\nimport { ColumnType } from '../../components/Enumeration';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { stringOperatorData, conditionalOperatorData, numericOperatorData, joinConditionData, aggregateFunction, orderByList } from './QueryBuilderData';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport FormCheckbox from '../../components/form-checkbox/form-checkbox.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\n\nconst BuildQuery = props => {\n  function createOrderbyFields() {\n    let design = [];\n    props.addOrderbyList.map((items, index) => {\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BuilderBorder, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(DeleteRule, {\n        marginLeft: 1,\n        onClick: () => props.deleteOrderby(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: `columnname`,\n        showOption: true,\n        options: props.viewColumnListByRule || [],\n        optionId: \"columnname\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[\"orderby\"] && props.selectedRecord[\"orderby\"][index] && props.selectedRecord[\"orderby\"][index][`columnname`] || \"\",\n        onChange: value => props.onOrderbyChange(value, \"columnname\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: \"ordertype\",\n        showOption: true,\n        options: orderByList || [],\n        optionId: \"value\",\n        optionValue: \"label\" // isDisabled={props.selectedRecord[\"customorderby\"] && props.selectedRecord[\"customorderby\"] === true ? false : true}\n        ,\n        value: props.selectedRecord[\"orderby\"] && props.selectedRecord[\"orderby\"][index] && props.selectedRecord[\"orderby\"][index][\"ordertype\"] || \"\",\n        onChange: value => props.onOrderbyChange(value, \"ordertype\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 33\n        }\n      }))))));\n    });\n    return design;\n  }\n\n  function createAggregateFunctions() {\n    let design = [];\n    props.addAggregateList.map((items, index) => {\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BuilderBorder, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(DeleteRule, {\n        marginLeft: 1,\n        onClick: () => props.deleteAggregate(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: `columnname`,\n        showOption: true,\n        options: props.viewColumnListByRule || [],\n        optionId: \"columnname\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[\"aggregate\"] && props.selectedRecord[\"aggregate\"][index] && props.selectedRecord[\"aggregate\"][index][`columnname`] || \"\",\n        onChange: value => props.onAggregateChange(value, \"columnname\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: \"aggfunctionname\",\n        showOption: true,\n        options: aggregateFunction || [],\n        optionId: \"value\",\n        optionValue: \"label\",\n        value: props.selectedRecord[\"aggregate\"] && props.selectedRecord[\"aggregate\"][index] && props.selectedRecord[\"aggregate\"][index][\"aggfunctionname\"] || \"\",\n        onChange: value => props.onAggregateChange(value, \"aggfunctionname\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }\n      }))))));\n    });\n    return design;\n  } // function createViewRules() {\n  //     let indexCount = 0;\n  //     let design = [];\n  //     props.addRuleList.map((items, index) => {\n  //         let stringOperators = stringOperatorData;\n  //         if (props.selectedRecord[`columnname_${index}`]\n  //             && !props.selectedRecord[`columnname_${index}`].items.needmasterdata\n  //             && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.TEXTINPUT) {\n  //             const temp = stringOperators.filter(item => {\n  //                 if (item.items.symbolType !== 6) {\n  //                     return item\n  //                 }\n  //             });\n  //             stringOperators = temp;\n  //         }\n  //         if (items > -1) {\n  //             indexCount = indexCount + 1;\n  //         };\n  //         design.push(\n  //             <>\n  //                 {items > -1 ?\n  //                     <>\n  //                         {indexCount !== 1 ?\n  //                             <Row>\n  //                                 {/* <ContionalButton type=\"button\" className=\"builder-btn-primary\" marginLeft={1} \n  //                         onClick={()=>props.onConditionClick1(`button_${index}`, 'not')}>\n  //                         <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"Not\" /></span>\n  //                     </ContionalButton> */}\n  //                                 <ContionalButton type=\"button\" className={props.selectedRecord[`button_and_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\n  //                                     onClick={() => props.onConditionClick(`button_and_${index}`, index)}>\n  //                                     <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\n  //                                 </ContionalButton>\n  //                                 <ContionalButton type=\"button\" className={props.selectedRecord[`button_or_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\n  //                                     onClick={() => props.onConditionClick(`button_or_${index}`, index)}>\n  //                                     <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\n  //                                 </ContionalButton>\n  //                             </Row> :\n  //                             <>\n  //                                 {/* <ContionalButton type=\"button\" className={props.selectedRecord[`button_not_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\n  //                                     onClick={() => props.onConditionClick(`button_not_${index}`, index)}>\n  //                                     <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"Not\" /></span>\n  //                                 </ContionalButton> */}\n  //                             </>\n  //                         }\n  //                         <BuilderBorder key={index}>\n  //                             <CustomSwitch\n  //                                 label={props.intl.formatMessage({ id: \"IDS_NOT\" })}\n  //                                 name={`notoperator_${index}`}\n  //                                 type=\"switch\"\n  //                                 isMandatory={false}\n  //                                 required={false}\n  //                                 checked={props.selectedRecord[`notoperator_${index}`] === undefined ? false : props.selectedRecord[`notoperator_${index}`]}\n  //                                 onChange={(event) => props.onInputChange(event, 1)}\n  //                             />\n  //                             <Row className=\"mt-3\">\n  //                                 <DeleteRule marginLeft={1} onClick={() => props.deleteRule(index)}>\n  //                                     <FontAwesomeIcon icon={faTrashAlt} color=\"red\" />\n  //                                 </DeleteRule>\n  //                                 <Col md={4}>\n  //                                     <FormSelectSearch\n  //                                         formGroupClassName=\"remove-floating-label-margin\"\n  //                                         isSearchable={true}\n  //                                         name={`columnname_${index}`}\n  //                                         showOption={true}\n  //                                         options={props.viewColumnListByRule[index] || []}\n  //                                         optionId='columnname'\n  //                                         optionValue='displayname'\n  //                                         value={props.selectedRecord[`columnname_${index}`] || \"\"}\n  //                                         onChange={value => props.onRuleChange(value, `columnname_${index}`, index)}\n  //                                     ></FormSelectSearch>\n  //                                 </Col>\n  //                                 {props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.TEXTINPUT ?\n  //                                     <>\n  //                                         <Col md={2}>\n  //                                             <FormSelectSearch\n  //                                                 formGroupClassName=\"remove-floating-label-margin\"\n  //                                                 formLabel=\"\"\n  //                                                 isSearchable={true}\n  //                                                 name={`ssymbolname_${index}`}\n  //                                                 placeholder=\"\"\n  //                                                 showOption={true}\n  //                                                 options={stringOperators}\n  //                                                 optionId='nvalidationcode'\n  //                                                 optionValue='ssymbolname'\n  //                                                 value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\n  //                                                 onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\n  //                                             >\n  //                                             </FormSelectSearch>\n  //                                         </Col>\n  //                                         {props.selectedRecord[`ssymbolname_${index}`]\n  //                                             && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible ?\n  //                                             <>\n  //                                                 {props.selectedRecord[`columnname_${index}`].items.needmasterdata ?\n  //                                                     <Col md={4}>\n  //                                                         <FormSelectSearch\n  //                                                             formGroupClassName=\"remove-floating-label-margin\"\n  //                                                             isSearchable={true}\n  //                                                             name={`${props.selectedRecord[`columnname_${index}`].items.valuemember}_${index}`}\n  //                                                             showOption={true}\n  //                                                             options={props.viewMasterListByRule[index] || []}\n  //                                                             optionId={props.selectedRecord[`columnname_${index}`].items.valuemember}\n  //                                                             optionValue={props.selectedRecord[`columnname_${index}`].items.displaymember}\n  //                                                             value={props.selectedRecord[`${props.selectedRecord[`columnname_${index}`].items.valuemember}_${index}`] || \"\"}\n  //                                                             isMulti={props.selectedRecord[`ssymbolname_${index}`].items.ismulti}\n  //                                                             onChange={value => props.onMasterDataChange(value, `${props.selectedRecord[`columnname_${index}`].items.valuemember}_${index}`, index)}\n  //                                                         ></FormSelectSearch>\n  //                                                     </Col> :\n  //                                                     <Col md={4}>\n  //                                                         <FormInput\n  //                                                             formGroupClassName=\"remove-floating-label-margin\"\n  //                                                             name={`sinputname_${index}`}\n  //                                                             type=\"text\"\n  //                                                             onChange={(event) => props.onInputChange(event, 1)}\n  //                                                             value={props.selectedRecord ? props.selectedRecord[`sinputname_${index}`] : \"\"}\n  //                                                             maxLength={100}\n  //                                                         />\n  //                                                     </Col>\n  //                                                 }\n  //                                             </>\n  //                                             : <></>\n  //                                         }\n  //                                     </> : props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.NUMERICINPUT ?\n  //                                         <>\n  //                                             <Col md={2}>\n  //                                                 <FormSelectSearch\n  //                                                     formGroupClassName=\"remove-floating-label-margin\"\n  //                                                     formLabel=\"\"\n  //                                                     isSearchable={true}\n  //                                                     name={`ssymbolname_${index}`}\n  //                                                     placeholder=\"\"\n  //                                                     showOption={true}\n  //                                                     options={numericOperatorData}\n  //                                                     optionId='nvalidationcode'\n  //                                                     optionValue='ssymbolname'\n  //                                                     value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\n  //                                                     onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\n  //                                                 >\n  //                                                 </FormSelectSearch>\n  //                                             </Col>\n  //                                             {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\n  //                                                 <>\n  //                                                     <Col md={2}>\n  //                                                         <FormInput\n  //                                                             formGroupClassName=\"remove-floating-label-margin\"\n  //                                                             label={props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_FROM\" }) : \"\"}\n  //                                                             name={`snumericinput_${index}`}\n  //                                                             type=\"text\"\n  //                                                             required={false}\n  //                                                             isMandatory={false}\n  //                                                             value={props.selectedRecord[`snumericinput_${index}`] ? props.selectedRecord[`snumericinput_${index}`] : \"\"}\n  //                                                             onChange={(event) => props.onInputChange(event, 2)}\n  //                                                             maxLength={10}\n  //                                                         />\n  //                                                     </Col>\n  //                                                     {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ?\n  //                                                         (\n  //                                                             <Col md={2}>\n  //                                                                 <FormInput\n  //                                                                     formGroupClassName=\"remove-floating-label-margin\"\n  //                                                                     label={props.intl.formatMessage({ id: \"IDS_TO\" })}\n  //                                                                     name={`snumericinputtwo_${index}`}\n  //                                                                     type=\"text\"\n  //                                                                     required={false}\n  //                                                                     isMandatory={false}\n  //                                                                     value={props.selectedRecord[`snumericinputtwo_${index}`] ? props.selectedRecord[`snumericinputtwo_${index}`] : \"\"}\n  //                                                                     onChange={(event) => props.onInputChange(event, 2)}\n  //                                                                     maxLength={10}\n  //                                                                 />\n  //                                                             </Col>\n  //                                                         ) : <></>\n  //                                                     }\n  //                                                 </>\n  //                                                 : <></>\n  //                                             }\n  //                                         </> : props.selectedRecord[`columnname_${index}`]\n  //                                             && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.COMBO ?\n  //                                             <>\n  //                                                 <Col md={2}>\n  //                                                     <FormSelectSearch\n  //                                                         formGroupClassName=\"remove-floating-label-margin\"\n  //                                                         formLabel=\"\"\n  //                                                         isSearchable={true}\n  //                                                         name={`ssymbolname_${index}`}\n  //                                                         placeholder=\"\"\n  //                                                         showOption={true}\n  //                                                         options={conditionalOperatorData}\n  //                                                         optionId='nvalidationcode'\n  //                                                         optionValue='ssymbolname'\n  //                                                         value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\n  //                                                         onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\n  //                                                     >\n  //                                                     </FormSelectSearch>\n  //                                                 </Col>\n  //                                                 {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\n  //                                                     <Col md={4}>\n  //                                                         <FormSelectSearch\n  //                                                             formGroupClassName=\"remove-floating-label-margin\"\n  //                                                             formLabel=\"\"\n  //                                                             isSearchable={true}\n  //                                                             name={`${props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}_${index}`}\n  //                                                             placeholder=\"\"\n  //                                                             showOption={true}\n  //                                                             options={props.viewMasterListByRule && props.viewMasterListByRule[index] || []}\n  //                                                             optionId={props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}\n  //                                                             optionValue='sdisplayname'\n  //                                                             value={props.selectedRecord[`${props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}_${index}`] || \"\"}\n  //                                                             onChange={value => props.onMasterDataChange(value, `${props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}_${index}`, index)}\n  //                                                             isMulti={props.selectedRecord[`ssymbolname_${index}`].items.ismulti}\n  //                                                         >\n  //                                                         </FormSelectSearch>\n  //                                                     </Col> : <></>\n  //                                                 }\n  //                                             </> : props.selectedRecord[`columnname_${index}`]\n  //                                                 && (props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME\n  //                                                     || props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATE) ?\n  //                                                 <>\n  //                                                     <Col md={2}>\n  //                                                         <FormSelectSearch\n  //                                                             formGroupClassName=\"remove-floating-label-margin\"\n  //                                                             formLabel=\"\"\n  //                                                             isSearchable={true}\n  //                                                             name={`ssymbolname_${index}`}\n  //                                                             placeholder=\"\"\n  //                                                             showOption={true}\n  //                                                             options={numericOperatorData}\n  //                                                             optionId='nvalidationcode'\n  //                                                             optionValue='ssymbolname'\n  //                                                             value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\n  //                                                             onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\n  //                                                         >\n  //                                                         </FormSelectSearch>\n  //                                                     </Col>\n  //                                                     {props.selectedRecord[`ssymbolname_${index}`]\n  //                                                         && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\n  //                                                         <>\n  //                                                             <Col md={2}>\n  //                                                                 <DateTimePicker\n  //                                                                     formGroupClassName=\"remove-floating-label-margin\"\n  //                                                                     label={props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_FROM\" }) : \"\"}\n  //                                                                     name={`dateinput_${index}`}\n  //                                                                     className='form-control'\n  //                                                                     placeholderText=\"Select date..\"\n  //                                                                     selected={props.selectedRecord[`dateinput_${index}`]}\n  //                                                                     // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\n  //                                                                     // dateFormat={\"dd-MM-yyyy\"}\n  //                                                                     isClearable={false}\n  //                                                                     showTimeInput={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? true : false}\n  //                                                                     onChange={date => props.handleFilterDateChange(`dateinput_${index}`, date)}\n  //                                                                     value={props.selectedRecord[`dateinput_${index}`] || \"\"}\n  //                                                                 />\n  //                                                             </Col>\n  //                                                             {props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ?\n  //                                                                 (\n  //                                                                     <Col md={2}>\n  //                                                                         <DateTimePicker\n  //                                                                             formGroupClassName=\"remove-floating-label-margin\"\n  //                                                                             label={props.intl.formatMessage({ id: \"IDS_TO\" })}\n  //                                                                             name={`dateinputtwo_${index}`}\n  //                                                                             className='form-control'\n  //                                                                             placeholderText=\"Select date..\"\n  //                                                                             selected={props.selectedRecord[`dateinputtwo_${index}`]}\n  //                                                                             // dateFormat={\"dd-MM-yyyy\"}\n  //                                                                             // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\n  //                                                                             isClearable={false}\n  //                                                                             showTimeInput={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? true : false}\n  //                                                                             onChange={date => props.handleFilterDateChange(`dateinputtwo_${index}`, date)}\n  //                                                                             value={props.selectedRecord[`dateinputtwo_${index}`] || \"\"}\n  //                                                                         />\n  //                                                                     </Col>\n  //                                                                 ) : <></>\n  //                                                             }\n  //                                                         </>\n  //                                                         : <></>\n  //                                                     }\n  //                                                 </>\n  //                                                 : <></>\n  //                                 }\n  //                             </Row>\n  //                         </BuilderBorder>\n  //                     </> : <></>\n  //                 }\n  //             </>)\n  //     });\n  //     return design;\n  // }\n\n\n  function createSqlRules() {\n    let indexCount = 0;\n    let design = [];\n    props.addRuleList.map((items, index) => {\n      const stringOperators = props.selectedRecord[`columnname_${index}`].items && props.selectedRecord[`columnname_${index}`].items.needmasterdata ? stringOperatorData : stringOperatorData.map(item => {\n        return item.symbolType !== 6;\n      });\n\n      if (items > -1) {\n        indexCount = indexCount + 1;\n      }\n\n      ;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, items > -1 ? /*#__PURE__*/React.createElement(React.Fragment, null, indexCount !== 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[`button_and_${index}`] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 1,\n        onClick: () => props.onConditionClick(`button_and_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 51\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[`button_or_${index}`] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(`button_or_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 51\n        }\n      }))))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(BuilderBorder, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(DeleteRule, {\n        marginLeft: 1,\n        onClick: () => props.deleteRule(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        key: `tablekey_${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\" // formLabel={ props.intl.formatMessage({ id: \"IDS_TABLES\" }) }\n        ,\n        isSearchable: true,\n        name: `stablename_${index}` // placeholder={ props.intl.formatMessage({ id: \"IDS_TABLES\" }) }\n        ,\n        showOption: true,\n        options: props.databaseTableList,\n        optionId: \"stablename\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[`stablename_${index}`] || \"\",\n        onChange: value => props.onTableChange(value, `stablename_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        key: `columnkey_${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\" // formLabel={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\n        ,\n        isSearchable: true,\n        name: `columnname_${index}` // placeholder={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\n        ,\n        showOption: true,\n        options: props.tableColumnList[index] || [],\n        optionId: \"columnname\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[`columnname_${index}`] || \"\" // onChange={ value => props.onColumnChange(value, `columnname_${index}`, index) }\n        ,\n        onChange: value => props.onRuleChange(value, `columnname_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 41\n        }\n      })), props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.COMBO ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: `ssymbolname_${index}`,\n        placeholder: \"\",\n        showOption: true,\n        options: joinConditionData,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[`ssymbolname_${index}`],\n        onChange: value => props.onSymbolChange(value, `ssymbolname_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        key: `foreigncolumnkey_${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\" // formLabel={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\n        ,\n        isSearchable: true,\n        name: `foreigncolumnname_${index}` // placeholder={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\n        ,\n        showOption: true,\n        options: props.foreignTableColumnList[index] || [],\n        optionId: \"columnname\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[`foreigncolumnname_${index}`] || \"\" // onChange={ value => props.onColumnChange(value, `columnname_${index}`, index) }\n        ,\n        onChange: value => props.onRuleChange(value, `foreigncolumnname_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 49\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null), props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.TEXTINPUT ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: `ssymbolname_${index}`,\n        placeholder: \"\",\n        showOption: true,\n        options: stringOperators,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[`ssymbolname_${index}`] || \"\",\n        onChange: value => props.onSymbolChange(value, `ssymbolname_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 49\n        }\n      })), props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ? /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `sinputname_${index}` // label={props.intl.formatMessage({ id: \"IDS_INPUT\" })}\n        ,\n        type: \"text\",\n        onChange: event => props.onInputChange(event, 1) // placeholder={props.intl.formatMessage({ id: \"IDS_INPUT\" })}\n        ,\n        value: props.selectedRecord ? props.selectedRecord[`sinputname_${index}`] : \"\",\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 53\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null)) : props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.NUMERICINPUT ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: `ssymbolname_${index}`,\n        placeholder: \"\",\n        showOption: true,\n        options: numericOperatorData,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[`ssymbolname_${index}`] || \"\",\n        onChange: value => props.onSymbolChange(value, `ssymbolname_${index}`, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 53\n        }\n      })), props.selectedRecord[`ssymbolname_${index}`] ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: `snumericinput_${index}`,\n        label: props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? props.intl.formatMessage({\n          id: \"IDS_TO\"\n        }) : \"\",\n        type: \"text\",\n        required: false,\n        isMandatory: false,\n        value: props.selectedRecord[`snumericinput_${index}`] ? props.selectedRecord[`snumericinput_${index}`] : \"\",\n        onChange: event => props.onInputChange(event, 2),\n        maxLength: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 61\n        }\n      })) : props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: props.intl.formatMessage({\n          id: \"IDS_TO\"\n        }),\n        name: `snumericinputtwo_${index}`,\n        type: \"text\",\n        required: false,\n        isMandatory: false,\n        value: props.selectedRecord[`snumericinputtwo_${index}`] ? props.selectedRecord[`snumericinputtwo_${index}`] : \"\",\n        onChange: event => props.onInputChange(event, 2),\n        maxLength: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 65\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    });\n    return design;\n  }\n\n  function createRules(items, groupIndex) {\n    let design = [];\n    [...Array(items)].map((data, index) => {\n      let stringOperators = stringOperatorData;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        className: \"mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DeleteRule, {\n        marginLeft: 1,\n        onClick: () => props.deleteRule(groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: \"columnname\",\n        showOption: true,\n        options: props.viewColumnListByRule || [],\n        optionId: \"columnname\",\n        optionValue: \"displayname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"] || \"\",\n        onChange: value => props.onRuleChange(value, \"columnname\", groupIndex, index, props.viewMasterListByRule),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 29\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.columntype === ColumnType.TEXTINPUT ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: \"ssymbolname\",\n        placeholder: \"Select..\",\n        showOption: true,\n        options: stringOperators,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] || \"\",\n        onChange: value => props.onSymbolChange(value, \"ssymbolname\", groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 37\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items.isInputVisible ? /*#__PURE__*/React.createElement(React.Fragment, null, props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata ? /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        isSearchable: true,\n        name: `${props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}`,\n        showOption: true,\n        options: props.viewMasterListByRule && props.viewMasterListByRule[groupIndex] && props.viewMasterListByRule[groupIndex][index] || [],\n        optionId: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember,\n        optionValue: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.displaymember,\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][`${props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}`] || \"\",\n        isMulti: props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.ismulti,\n        onChange: value => props.onMasterDataChange(value, `${props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}`, groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 49\n        }\n      })) : /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        name: `sinputname`,\n        type: \"text\",\n        onChange: event => props.onInputChange(event, 3, groupIndex, index),\n        value: props.selectedRecord[\"groupList\"] && props.selectedRecord[\"groupList\"][groupIndex] && props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"][\"sinputname\"] : \"\",\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 49\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null)) : props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.columntype === ColumnType.NUMERICINPUT ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: \"ssymbolname\",\n        placeholder: \"\",\n        showOption: true,\n        options: numericOperatorData,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] || \"\",\n        onChange: value => props.onSymbolChange(value, `ssymbolname`, groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 41\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.isInputVisible === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        label: props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ? props.intl.formatMessage({\n          id: \"IDS_FROM\"\n        }) : \"\",\n        name: `snumericinput`,\n        type: \"text\",\n        required: false,\n        isMandatory: false,\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinput`] ? props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinput`] : \"\",\n        onChange: event => props.onInputChange(event, 2, groupIndex, index),\n        maxLength: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 49\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        label: props.intl.formatMessage({\n          id: \"IDS_TO\"\n        }),\n        name: `snumericinputtwo`,\n        type: \"text\",\n        required: false,\n        isMandatory: false,\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinputtwo`] ? props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinputtwo`] : \"\",\n        onChange: event => props.onInputChange(event, 2, groupIndex, index),\n        maxLength: 10,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 57\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)) : props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.COMBO ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: `ssymbolname`,\n        placeholder: \"\",\n        showOption: true,\n        options: conditionalOperatorData,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] || \"\",\n        onChange: value => props.onSymbolChange(value, `ssymbolname`, groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 45\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.isInputVisible === true ? /*#__PURE__*/React.createElement(Col, {\n        md: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: `${props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}`,\n        placeholder: \"\",\n        showOption: true,\n        options: props.viewMasterListByRule && props.viewMasterListByRule[groupIndex][index] || [],\n        optionId: props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname,\n        optionValue: \"sdisplayname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`${props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}`] || \"\",\n        onChange: value => props.onMasterDataChange(value, `${props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}`, groupIndex, index),\n        isMulti: props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.ismulti,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 49\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null)) : props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`] && (props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATATIME || props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATE) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        formLabel: \"\",\n        isSearchable: true,\n        name: `ssymbolname`,\n        placeholder: \"\",\n        showOption: true,\n        options: numericOperatorData,\n        optionId: \"nvalidationcode\",\n        optionValue: \"ssymbolname\",\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] || \"\",\n        onChange: value => props.onSymbolChange(value, `ssymbolname`, groupIndex, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 49\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.isInputVisible === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(DateTimePicker, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        label: props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ? props.intl.formatMessage({\n          id: \"IDS_FROM\"\n        }) : \"\",\n        name: `dateinput`,\n        className: \"form-control\",\n        placeholderText: \"Select date..\",\n        selected: props.selectedRecord[\"groupList\"][groupIndex][index][`dateinput`] // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\n        // dateFormat={\"dd-MM-yyyy\"}\n        ,\n        isClearable: false,\n        showTimeInput: props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATATIME ? true : false,\n        onChange: date => props.handleFilterDateChange(`dateinput`, date, groupIndex, index),\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`dateinput`] || \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 57\n        }\n      })), props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ? /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(DateTimePicker, {\n        formGroupClassName: \"remove-floating-label-margin\",\n        label: props.intl.formatMessage({\n          id: \"IDS_TO\"\n        }),\n        name: `dateinputtwo`,\n        className: \"form-control\",\n        placeholderText: \"Select date..\",\n        selected: props.selectedRecord[\"groupList\"][groupIndex][index][`dateinputtwo`] // dateFormat={\"dd-MM-yyyy\"}\n        // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\n        ,\n        isClearable: false,\n        showTimeInput: props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATATIME ? true : false,\n        onChange: date => props.handleFilterDateChange(`dateinputtwo`, date, groupIndex, index),\n        value: props.selectedRecord[\"groupList\"][groupIndex][index][`dateinputtwo`] || \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 65\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null))));\n    });\n    return design;\n  }\n\n  function createGroupRules() {\n    let indexCount = 0;\n    let design = [];\n    props.addGroupList.length > 0 && props.addGroupList.map((items, index) => {\n      let stringOperators = stringOperatorData;\n\n      if (props.selectedRecord[\"groupList\"] && props.selectedRecord[\"groupList\"][index][\"columnname\"] && !props.selectedRecord[\"groupList\"][index][\"columnname\"].items.needmasterdata && props.selectedRecord[\"groupList\"][index][\"columnname\"].items.columntype === ColumnType.TEXTINPUT) {\n        const temp = stringOperators.filter(item => {\n          if (item.items.symbolType !== 6) {\n            return item;\n          }\n        });\n        stringOperators = temp;\n      }\n\n      if (items > -1) {\n        indexCount = indexCount + 1;\n      }\n\n      ;\n      design.push( /*#__PURE__*/React.createElement(React.Fragment, null, items > -1 ? /*#__PURE__*/React.createElement(React.Fragment, null, items > 1 ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_and\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 1,\n        onClick: () => props.onConditionClick(\"button_and\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_AND\",\n        defaultMessage: \"And\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 47\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_or\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_or\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_OR\",\n        defaultMessage: \"Or\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 47\n        }\n      }))), /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_not\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_not\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_NOT\",\n        defaultMessage: \"NOT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 47\n        }\n      })))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(ContionalButton, {\n        type: \"button\",\n        className: props.selectedRecord[\"groupList\"][index][\"button_not\"] === true ? \"builder-btn-primary\" : \"\",\n        marginLeft: 0,\n        onClick: () => props.onConditionClick(\"button_not\", index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_NOT\",\n        defaultMessage: \"NOT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 51\n        }\n      }))))), /*#__PURE__*/React.createElement(BuilderBorder, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => props.addRule(\"views\", index),\n        className: \"mr-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 41\n        }\n      }, '+', \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_ADDRULE\",\n        defaultMessage: \"Add Rule\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 51\n        }\n      })))), /*#__PURE__*/React.createElement(React.Fragment, null, createRules(items, index)))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    });\n    return design;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    formGroupClassName: \"remove-floating-label-margin\",\n    label: \"Query Builder Name\",\n    name: `querybuildername`,\n    type: \"text\",\n    required: false,\n    isMandatory: true,\n    value: props.selectedRecord[\"querybuildername\"] || \"\",\n    onChange: event => props.onInputChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 963,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 993,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.resetRule(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 997,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_RESET\",\n    defaultMessage: \"Reset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 17\n    }\n  }, props.sqlQuery ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.addRule(\"sql\"),\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 33\n    }\n  }, '+', \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_ADDRULE\",\n    defaultMessage: \"Add Rule\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 43\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.onGenerateQuery(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_GENERATEQUERY\",\n    defaultMessage: \"Generate Query\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 37\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null))), props.sqlQuery === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1021,\n      columnNumber: 29\n    }\n  }, props.addRuleList.length > 0 ? createSqlRules() : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 37\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_QUERY\"\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.onExecuteRule(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_EXECUTE\",\n    defaultMessage: \"Execute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 45\n    }\n  }))), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1032,\n      columnNumber: 37\n    }\n  }, props.selectedRecord && props.selectedRecord[\"sdisplayquery\"] ? props.selectedRecord[\"sdisplayquery\"] : \"No Query\"))))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-4 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formGroupClassName: \"remove-floating-label-margin\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_VIEWS\"\n    }),\n    isSearchable: true,\n    name: \"sviewname\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTVIEWS\"\n    }),\n    showOption: true,\n    options: props.databaseviewList || [],\n    optionId: \"sviewname\",\n    optionValue: \"displayname\",\n    value: props.selectedRecord[\"sviewname\"] || \"\",\n    onChange: value => props.onViewComboChange(value, \"sviewname\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.addGroup(\"views\"),\n    className: \"mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1058,\n      columnNumber: 33\n    }\n  }, '+', \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_ADDGROUP\",\n    defaultMessage: \"Add Group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1059,\n      columnNumber: 43\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1090,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 29\n    }\n  }, props.addGroupList.length > 0 ? createGroupRules() : /*#__PURE__*/React.createElement(React.Fragment, null), props.addAggregateList.length > 0 ? createAggregateFunctions() : /*#__PURE__*/React.createElement(React.Fragment, null), props.addOrderbyList.length > 0 ? createOrderbyFields() : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1102,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1104,\n      columnNumber: 37\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_QUERY\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.copySQLQuery(2),\n    style: {\n      marginRight: \"0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1108,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_COPYSQL\",\n    defaultMessage: \"Copy SQL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1109,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.onExecuteRule(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"IDS_EXECUTE\",\n    defaultMessage: \"Execute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1113,\n      columnNumber: 49\n    }\n  })))), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1118,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1119,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1120,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(FormMultiSelect, {\n    name: \"filtercolumns\",\n    label: props.intl.formatMessage({\n      id: \"IDS_COLUMNS\"\n    }),\n    options: props.selectFields || [],\n    optionId: \"value\",\n    optionValue: \"label\",\n    value: props.selectedRecord ? props.selectedRecord[\"filtercolumns\"] || [] : [],\n    isMandatory: false,\n    isClearable: true,\n    disableSearch: false,\n    disabled: false,\n    closeMenuOnSelect: false,\n    alphabeticalSort: true,\n    onChange: event => props.onFilterComboChange(event, \"filtercolumns\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1121,\n      columnNumber: 49\n    }\n  }))), props.selectedRecord && props.selectedRecord[\"sdisplayquery\"] ? props.selectedRecord[\"sdisplayquery\"] : props.intl.formatMessage({\n    id: \"IDS_NOQUERY\"\n  }))), props.data && props.gridColumnList && props.gridColumnList.length > 0 ? /*#__PURE__*/React.createElement(DataGrid // primaryKeyField={\"npublicholidaycode\"}\n  , {\n    data: props.data,\n    dataResult: props.dataResult,\n    dataState: props.dataState,\n    dataStateChange: props.dataStateChange,\n    extractedColumnList: props.gridColumnList,\n    controlMap: props.controlMap,\n    userRoleControlRights: props.userRoleControlRights // inputParam={props.inputParam}\n    ,\n    userInfo: props.userInfo // methodUrl=\"PublicHolidays\"\n    // fetchRecord={props.getPublicHolidays}\n    // editParam={publicHolidaysEditParam}\n    // deleteRecord={props.deleteRecord}\n    // deleteParam={publicHolidaysDeleteParam}\n    ,\n    pageable: true,\n    scrollable: \"scrollable\" // isComponent={true}\n    ,\n    isActionRequired: false,\n    isToolBarRequired: true,\n    isRefreshRequired: false,\n    selectedId: -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 37\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)))));\n};\n\nexport default injectIntl(BuildQuery);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/dashboard/BuildQuery.js"],"names":["faGripVertical","faTrashAlt","FontAwesomeIcon","React","Button","Card","Col","Form","Row","FormattedMessage","injectIntl","FormSelectSearch","FormInput","BuilderBorder","ContionalButton","DeleteRule","ColumnType","FormTextarea","stringOperatorData","conditionalOperatorData","numericOperatorData","joinConditionData","aggregateFunction","orderByList","CustomSwitch","DateTimePicker","FormCheckbox","DataGrid","FormMultiSelect","BuildQuery","props","createOrderbyFields","design","addOrderbyList","map","items","index","push","deleteOrderby","viewColumnListByRule","selectedRecord","value","onOrderbyChange","createAggregateFunctions","addAggregateList","deleteAggregate","onAggregateChange","createSqlRules","indexCount","addRuleList","stringOperators","needmasterdata","item","symbolType","onConditionClick","deleteRule","databaseTableList","onTableChange","tableColumnList","onRuleChange","columntype","COMBO","onSymbolChange","foreignTableColumnList","TEXTINPUT","isInputVisible","event","onInputChange","NUMERICINPUT","intl","formatMessage","id","createRules","groupIndex","Array","data","viewMasterListByRule","valuemember","displaymember","ismulti","onMasterDataChange","sforeigncolumnname","DATATIME","DATE","date","handleFilterDateChange","createGroupRules","addGroupList","length","temp","filter","addRule","resetRule","sqlQuery","onGenerateQuery","onExecuteRule","databaseviewList","onViewComboChange","addGroup","copySQLQuery","marginRight","selectFields","onFilterComboChange","gridColumnList","dataResult","dataState","dataStateChange","controlMap","userRoleControlRights","userInfo"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,UAAzB,QAA2C,mCAA3C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,GAAlC,QAA6C,iBAA7C;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,UAAzC,QAA2D,qBAA3D;AACA,OAAO,sCAAP;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,SAASC,kBAAT,EAA6BC,uBAA7B,EAAsDC,mBAAtD,EAA2EC,iBAA3E,EAA8FC,iBAA9F,EAAiHC,WAAjH,QAAoI,oBAApI;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,cAAP,MAA2B,8DAA3B;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,OAAOC,eAAP,MAA4B,gEAA5B;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAE1B,WAASC,mBAAT,GAA+B;AAC3B,QAAIC,MAAM,GAAG,EAAb;AACAF,IAAAA,KAAK,CAACG,cAAN,CAAqBC,GAArB,CAAyB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACvCJ,MAAAA,MAAM,CAACK,IAAP,eACI,uDAEI,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAED,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAE,CAAxB;AAA2B,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACQ,aAAN,CAAoBF,KAApB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnC,UAAvB;AAAmC,QAAA,KAAK,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,eAKI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,YAAY,EAAE,IAFlB;AAGI,QAAA,IAAI,EAAG,YAHX;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAE6B,KAAK,CAACS,oBAAN,IAA8B,EAL3C;AAMI,QAAA,QAAQ,EAAC,YANb;AAOI,QAAA,WAAW,EAAC,aAPhB;AAQI,QAAA,KAAK,EAAET,KAAK,CAACU,cAAN,CAAqB,SAArB,KAAmCV,KAAK,CAACU,cAAN,CAAqB,SAArB,EAAgCJ,KAAhC,CAAnC,IAA6EN,KAAK,CAACU,cAAN,CAAqB,SAArB,EAAgCJ,KAAhC,EAAwC,YAAxC,CAA7E,IAAqI,EARhJ;AASI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACY,eAAN,CAAsBD,KAAtB,EAA6B,YAA7B,EAA2CL,KAA3C,CATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,eAkBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,YAAY,EAAE,IAFlB;AAGI,QAAA,IAAI,EAAE,WAHV;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAEb,WAAW,IAAI,EAL5B;AAMI,QAAA,QAAQ,EAAC,OANb;AAOI,QAAA,WAAW,EAAC,OAPhB,CAQI;AARJ;AASI,QAAA,KAAK,EAAEO,KAAK,CAACU,cAAN,CAAqB,SAArB,KAAmCV,KAAK,CAACU,cAAN,CAAqB,SAArB,EAAgCJ,KAAhC,CAAnC,IAA6EN,KAAK,CAACU,cAAN,CAAqB,SAArB,EAAgCJ,KAAhC,EAAuC,WAAvC,CAA7E,IAAoI,EAT/I;AAUI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACY,eAAN,CAAsBD,KAAtB,EAA6B,WAA7B,EAA0CL,KAA1C,CAVvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAlBJ,CADJ,CAFJ,CADJ;AAyCH,KA1CD;AA2CA,WAAOJ,MAAP;AACH;;AACD,WAASW,wBAAT,GAAoC;AAChC,QAAIX,MAAM,GAAG,EAAb;AACAF,IAAAA,KAAK,CAACc,gBAAN,CAAuBV,GAAvB,CAA2B,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzCJ,MAAAA,MAAM,CAACK,IAAP,eACI,uDAEI,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAED,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAE,CAAxB;AAA2B,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACe,eAAN,CAAsBT,KAAtB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnC,UAAvB;AAAmC,QAAA,KAAK,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,eAKI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,YAAY,EAAE,IAFlB;AAGI,QAAA,IAAI,EAAG,YAHX;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAE6B,KAAK,CAACS,oBAAN,IAA8B,EAL3C;AAMI,QAAA,QAAQ,EAAC,YANb;AAOI,QAAA,WAAW,EAAC,aAPhB;AAQI,QAAA,KAAK,EAAET,KAAK,CAACU,cAAN,CAAqB,WAArB,KAAqCV,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,CAArC,IAAiFN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAA0C,YAA1C,CAAjF,IAA2I,EARtJ;AASI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgB,iBAAN,CAAwBL,KAAxB,EAA+B,YAA/B,EAA6CL,KAA7C,CATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,eAkBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,YAAY,EAAE,IAFlB;AAGI,QAAA,IAAI,EAAE,iBAHV;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAEd,iBAAiB,IAAI,EALlC;AAMI,QAAA,QAAQ,EAAC,OANb;AAOI,QAAA,WAAW,EAAC,OAPhB;AAQI,QAAA,KAAK,EAAEQ,KAAK,CAACU,cAAN,CAAqB,WAArB,KAAqCV,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,CAArC,IAAiFN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,iBAAzC,CAAjF,IAAgJ,EAR3J;AASI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgB,iBAAN,CAAwBL,KAAxB,EAA+B,iBAA/B,EAAkDL,KAAlD,CATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAlBJ,CADJ,CAFJ,CADJ;AAwCH,KAzCD;AA0CA,WAAOJ,MAAP;AACH,GA9Fye,cAAT,GAA0B;AACtB,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIhB,MAAM,GAAG,EAAb;AACAF,IAAAA,KAAK,CAACmB,WAAN,CAAkBf,GAAlB,CAAsB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAEpC,YAAMc,eAAe,GAAGpB,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,EAA4CD,KAA5C,IACjBL,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,EAA4CD,KAA5C,CAAkDgB,cADjC,GAEpBjC,kBAFoB,GAECA,kBAAkB,CAACgB,GAAnB,CAAuBkB,IAAI,IAAI;AAAE,eAAOA,IAAI,CAACC,UAAL,KAAoB,CAA3B;AAA8B,OAA/D,CAFzB;;AAIA,UAAIlB,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZa,QAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;AACH;;AAAA;AACDhB,MAAAA,MAAM,CAACK,IAAP,eACI,0CACKF,KAAK,GAAG,CAAC,CAAT,gBACG,0CACKa,UAAU,KAAK,CAAf,gBACG,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,SAAS,EAAElB,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,MAAgD,IAAhD,GAAuD,qBAAvD,GAA+E,EAAzH;AAA6H,QAAA,UAAU,EAAE,CAAzI;AACI,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACwB,gBAAN,CAAwB,cAAalB,KAAM,EAA3C,EAA8CA,KAA9C,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAM,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,SAArB;AAA+B,QAAA,cAAc,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFJ,CALJ,eASI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,SAAS,EAAEN,KAAK,CAACU,cAAN,CAAsB,aAAYJ,KAAM,EAAxC,MAA+C,IAA/C,GAAsD,qBAAtD,GAA8E,EAAxH;AAA4H,QAAA,UAAU,EAAE,CAAxI;AACI,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACwB,gBAAN,CAAwB,aAAYlB,KAAM,EAA1C,EAA6CA,KAA7C,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAM,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,QAArB;AAA8B,QAAA,cAAc,EAAC,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFJ,CATJ,CADJ,CADH,gBAgBS,yCAjBd,eAmBI,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAEA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAE,CAAxB;AAA2B,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACyB,UAAN,CAAiBnB,KAAjB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnC,UAAvB;AAAmC,QAAA,KAAK,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eAII,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,GAAG,EAAG,YAAWmC,KAAM,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB,CAEI;AAFJ;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,cAAaA,KAAM,EAJ9B,CAKI;AALJ;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEN,KAAK,CAAC0B,iBAPnB;AAQI,QAAA,QAAQ,EAAC,YARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAE1B,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,KAA+C,EAV1D;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAAC2B,aAAN,CAAoBhB,KAApB,EAA4B,cAAaL,KAAM,EAA/C,EAAkDA,KAAlD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,eAoBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,GAAG,EAAG,aAAYA,KAAM,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB,CAEI;AAFJ;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,cAAaA,KAAM,EAJ9B,CAKI;AALJ;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEN,KAAK,CAAC4B,eAAN,CAAsBtB,KAAtB,KAAgC,EAP7C;AAQI,QAAA,QAAQ,EAAC,YARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,KAA+C,EAV1D,CAWI;AAXJ;AAYI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAAC6B,YAAN,CAAmBlB,KAAnB,EAA2B,cAAaL,KAAM,EAA9C,EAAiDA,KAAjD,CAZvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CApBJ,EAqCKN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,KAA+CN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,EAA4CD,KAA5C,CAAkDyB,UAAlD,KAAiE5C,UAAU,CAAC6C,KAA3H,gBACG,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,eAAczB,KAAM,EAJ/B;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEf,iBAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAES,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,CAVX;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA6B,eAAcL,KAAM,EAAjD,EAAoDA,KAApD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eAiBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,GAAG,EAAG,oBAAmBA,KAAM,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB,CAEI;AAFJ;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,qBAAoBA,KAAM,EAJrC,CAKI;AALJ;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEN,KAAK,CAACiC,sBAAN,CAA6B3B,KAA7B,KAAuC,EAPpD;AAQI,QAAA,QAAQ,EAAC,YARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAsB,qBAAoBJ,KAAM,EAAhD,KAAsD,EAVjE,CAWI;AAXJ;AAYI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAAC6B,YAAN,CAAmBlB,KAAnB,EAA2B,qBAAoBL,KAAM,EAArD,EAAwDA,KAAxD,CAZvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAjBJ,CADH,gBAoCK,yCAzEV,EA2FKN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,KAA+CN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,EAA4CD,KAA5C,CAAkDyB,UAAlD,KAAiE5C,UAAU,CAACgD,SAA3H,gBACG,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,eAAc5B,KAAM,EAJ/B;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEc,eAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEpB,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,KAAgD,EAV3D;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA6B,eAAcL,KAAM,EAAjD,EAAoDA,KAApD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAiBKN,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,KAAgDN,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,EAA6CD,KAA7C,CAAmD8B,cAAnD,KAAsE,IAAtH,gBACG,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,IAAI,EAAG,cAAa7B,KAAM,EAF9B,CAGI;AAHJ;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,QAAQ,EAAG8B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,EAA2B,CAA3B,CALzB,CAMI;AANJ;AAOI,QAAA,KAAK,EAAEpC,KAAK,CAACU,cAAN,GAAuBV,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,CAAvB,GAAqE,EAPhF;AAQI,QAAA,SAAS,EAAE,GARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADH,gBAYY,yCA7BjB,CADH,GAiCSN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,KAA+CN,KAAK,CAACU,cAAN,CAAsB,cAAaJ,KAAM,EAAzC,EAA4CD,KAA5C,CAAkDyB,UAAlD,KAAiE5C,UAAU,CAACoD,YAA3H,gBACF,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,eAAchC,KAAM,EAJ/B;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEhB,mBAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEU,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,KAAgD,EAV3D;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA6B,eAAcL,KAAM,EAAjD,EAAoDA,KAApD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAkBQN,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,iBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAG,iBAAgBA,KAAM,EADjC;AAEI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,EAA6CD,KAA7C,CAAmDkB,UAAnD,KAAkE,CAAlE,GAAsEvB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAzB,CAAtE,GAAmH,EAF9H;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAE,KAJd;AAKI,QAAA,WAAW,EAAE,KALjB;AAMI,QAAA,KAAK,EAAEzC,KAAK,CAACU,cAAN,CAAsB,iBAAgBJ,KAAM,EAA5C,IAAiDN,KAAK,CAACU,cAAN,CAAsB,iBAAgBJ,KAAM,EAA5C,CAAjD,GAAkG,EAN7G;AAOI,QAAA,QAAQ,EAAG8B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,EAA2B,CAA3B,CAPzB;AAQI,QAAA,SAAS,EAAE,EARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,GAaKpC,KAAK,CAACU,cAAN,CAAsB,eAAcJ,KAAM,EAA1C,EAA6CD,KAA7C,CAAmDkB,UAAnD,KAAkE,CAAlE,gBACG,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEvB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAzB,CADX;AAEI,QAAA,IAAI,EAAG,oBAAmBnC,KAAM,EAFpC;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAE,KAJd;AAKI,QAAA,WAAW,EAAE,KALjB;AAMI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAsB,oBAAmBJ,KAAM,EAA/C,IAAoDN,KAAK,CAACU,cAAN,CAAsB,oBAAmBJ,KAAM,EAA/C,CAApD,GAAwG,EANnH;AAOI,QAAA,QAAQ,EAAG8B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,EAA2B,CAA3B,CAPzB;AAQI,QAAA,SAAS,EAAE,EARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADH,gBAaK,yCA5ClB,CADE,gBAiDA,yCA7Kd,CADJ,CAnBJ,CADH,gBAuMK,yCAxMV,CADJ;AA4MH,KArND;AAuNA,WAAOlC,MAAP;AACH;;AACD,WAASwC,WAAT,CAAqBrC,KAArB,EAA4BsC,UAA5B,EAAwC;AACpC,QAAIzC,MAAM,GAAG,EAAb;AACA,KAAC,GAAG0C,KAAK,CAACvC,KAAD,CAAT,EAAkBD,GAAlB,CAAsB,CAACyC,IAAD,EAAOvC,KAAP,KAAiB;AACnC,UAAIc,eAAe,GAAGhC,kBAAtB;AACAc,MAAAA,MAAM,CAACK,IAAP,eACI,uDACI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,UAAD;AAAY,QAAA,UAAU,EAAE,CAAxB;AAA2B,QAAA,OAAO,EAAE,MAAMP,KAAK,CAACyB,UAAN,CAAiBkB,UAAjB,EAA6BrC,KAA7B,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnC,UAAvB;AAAmC,QAAA,KAAK,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,eAMI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,YAAY,EAAE,IAFlB;AAGI,QAAA,IAAI,EAAE,YAHV;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAE6B,KAAK,CAACS,oBAAN,IAA8B,EAL3C;AAMI,QAAA,QAAQ,EAAC,YANb;AAOI,QAAA,WAAW,EAAC,aAPhB;AAQI,QAAA,KAAK,EAAET,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,KAAsDN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,CAAtD,IAA4H,EARvI;AASI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAAC6B,YAAN,CAAmBlB,KAAnB,EAA0B,YAA1B,EAAwCgC,UAAxC,EAAoDrC,KAApD,EAA0DN,KAAK,CAAC8C,oBAAhE,CATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CANJ,EAoBK9C,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,KAAsEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAACgD,SAAzK,gBACG,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAE,aAJV;AAKI,QAAA,WAAW,EAAC,UALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEd,eAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEpB,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,KAAsDN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,aAArD,CAAtD,IAA6H,EAVxI;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA4B,aAA5B,EAA2CgC,UAA3C,EAAuDrC,KAAvD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAiBKN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,aAArD,KACMN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,aAArD,EAAoED,KAApE,CAA0E8B,cADhF,gBAEG,0CACKnC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyEgB,cAAzE,gBAEG,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,YAAY,EAAE,IAFlB;AAGI,QAAA,IAAI,EAAG,GAAErB,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyE0C,WAAY,EAHlG;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAE/C,KAAK,CAAC8C,oBAAN,IAA4B9C,KAAK,CAAC8C,oBAAN,CAA2BH,UAA3B,CAA5B,IAAoE3C,KAAK,CAAC8C,oBAAN,CAA2BH,UAA3B,EAAuCrC,KAAvC,CAApE,IAAqH,EALlI;AAMI,QAAA,QAAQ,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,KAAsDN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyE0C,WAN7I;AAOI,QAAA,WAAW,EAAE/C,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,KAAsDN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyE2C,aAPhJ;AAQI,QAAA,KAAK,EAAEhD,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,KAAsDN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,GAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyE0C,WAAY,EAA7I,CAAtD,IAAyM,EARpN;AASI,QAAA,OAAO,EAAE/C,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0E4C,OATvF;AAUI,QAAA,QAAQ,EAAEtC,KAAK,IAAIX,KAAK,CAACkD,kBAAN,CAAyBvC,KAAzB,EAAiC,GAAEX,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyE0C,WAAY,EAAxH,EAA2HJ,UAA3H,EAAuIrC,KAAvI,CAVvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFH,gBAgBG,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,IAAI,EAAG,YAFX;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAG8B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,EAA2B,CAA3B,EAA8BO,UAA9B,EAA0CrC,KAA1C,CAJzB;AAKI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,KAAmCV,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,CAAnC,IAAkF3C,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,CAAlF,GAAyIN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmE,YAAnE,CAAzI,GAA4N,EALvO;AAMI,QAAA,SAAS,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAjBR,CAFH,gBAgCK,yCAjDV,CADH,GAqDSN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,KAAsEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAqD,YAArD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAACoD,YAAzK,gBACF,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAE,aAJV;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEhD,mBAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEU,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,KAAsDN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,CAAtD,IAA6H,EAVxI;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA6B,aAA7B,EAA2CgC,UAA3C,EAAuDrC,KAAvD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAiBKN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,KAAuEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0E8B,cAA1E,KAA6F,IAApK,gBACG,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,KAAK,EAAEnC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0EkB,UAA1E,KAAyF,CAAzF,GAA6FvB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAzB,CAA7F,GAA4I,EAFvJ;AAGI,QAAA,IAAI,EAAG,eAHX;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,QAAQ,EAAE,KALd;AAMI,QAAA,WAAW,EAAE,KANjB;AAOI,QAAA,KAAK,EAAEzC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,eAAtD,IAAwEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,eAAtD,CAAxE,GAAgJ,EAP3J;AAQI,QAAA,QAAQ,EAAG8B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,EAA2B,CAA3B,EAA8BO,UAA9B,EAA0CrC,KAA1C,CARzB;AASI,QAAA,SAAS,EAAE,EATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAcKN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,KAAuEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0EkB,UAA1E,KAAyF,CAAhK,gBAEO,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,KAAK,EAAEvB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAzB,CAFX;AAGI,QAAA,IAAI,EAAG,kBAHX;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,QAAQ,EAAE,KALd;AAMI,QAAA,WAAW,EAAE,KANjB;AAOI,QAAA,KAAK,EAAEzC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,kBAAtD,IAA2EN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,kBAAtD,CAA3E,GAAsJ,EAPjK;AAQI,QAAA,QAAQ,EAAG8B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,EAA2B,CAA3B,EAA8BO,UAA9B,EAA0CrC,KAA1C,CARzB;AASI,QAAA,SAAS,EAAE,EATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFP,gBAeO,yCA7BZ,CADH,gBAkCK,yCAnDV,CADE,GAuDIN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,KACCN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAAC6C,KADpG,gBAEF,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,aAJX;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAE1C,uBAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEW,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,KAAuE,EAVlF;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA6B,aAA7B,EAA2CgC,UAA3C,EAAuDrC,KAAvD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAiBKN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,KAAuEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0E8B,cAA1E,KAA6F,IAApK,gBACG,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,GAAEnC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyE8C,kBAAmB,EAJzG;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAEnD,KAAK,CAAC8C,oBAAN,IAA8B9C,KAAK,CAAC8C,oBAAN,CAA2BH,UAA3B,EAAuCrC,KAAvC,CAA9B,IAA+E,EAP5F;AAQI,QAAA,QAAQ,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyE8C,kBARvF;AASI,QAAA,WAAW,EAAC,cAThB;AAUI,QAAA,KAAK,EAAEnD,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,GAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyE8C,kBAAmB,EAApJ,KAA0J,EAVrK;AAWI,QAAA,QAAQ,EAAExC,KAAK,IAAIX,KAAK,CAACkD,kBAAN,CAAyBvC,KAAzB,EAAiC,GAAEX,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyE8C,kBAAmB,EAA/H,EAAkIR,UAAlI,EAA8IrC,KAA9I,CAXvB;AAYI,QAAA,OAAO,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0E4C,OAZvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADH,gBAiBY,yCAlCjB,CAFE,GAsCIjD,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,MACEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAACkE,QAAnG,IACGpD,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAACmE,IAFxG,iBAGF,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,SAAS,EAAC,EAFd;AAGI,QAAA,YAAY,EAAE,IAHlB;AAII,QAAA,IAAI,EAAG,aAJX;AAKI,QAAA,WAAW,EAAC,EALhB;AAMI,QAAA,UAAU,EAAE,IANhB;AAOI,QAAA,OAAO,EAAE/D,mBAPb;AAQI,QAAA,QAAQ,EAAC,iBARb;AASI,QAAA,WAAW,EAAC,aAThB;AAUI,QAAA,KAAK,EAAEU,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,KAAuE,EAVlF;AAWI,QAAA,QAAQ,EAAEK,KAAK,IAAIX,KAAK,CAACgC,cAAN,CAAqBrB,KAArB,EAA6B,aAA7B,EAA2CgC,UAA3C,EAAuDrC,KAAvD,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAiBKN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,KACMN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0E8B,cAA1E,KAA6F,IADnG,gBAEG,uDACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,cAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,KAAK,EAAEnC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0EkB,UAA1E,KAAyF,CAAzF,GAA6FvB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAzB,CAA7F,GAA4I,EAFvJ;AAGI,QAAA,IAAI,EAAG,WAHX;AAII,QAAA,SAAS,EAAC,cAJd;AAKI,QAAA,eAAe,EAAC,eALpB;AAMI,QAAA,QAAQ,EAAEzC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,WAAtD,CANd,CAOI;AACA;AARJ;AASI,QAAA,WAAW,EAAE,KATjB;AAUI,QAAA,aAAa,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAACkE,QAAnG,GAA8G,IAA9G,GAAqH,KAVxI;AAWI,QAAA,QAAQ,EAAEE,IAAI,IAAItD,KAAK,CAACuD,sBAAN,CAA8B,WAA9B,EAA0CD,IAA1C,EAAgDX,UAAhD,EAA4DrC,KAA5D,CAXtB;AAYI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,WAAtD,KAAqE,EAZhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAiBKN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,aAAtD,EAAoED,KAApE,CAA0EkB,UAA1E,KAAyF,CAAzF,gBAEO,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,cAAD;AACI,QAAA,kBAAkB,EAAC,8BADvB;AAEI,QAAA,KAAK,EAAEvB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAzB,CAFX;AAGI,QAAA,IAAI,EAAG,cAHX;AAII,QAAA,SAAS,EAAC,cAJd;AAKI,QAAA,eAAe,EAAC,eALpB;AAMI,QAAA,QAAQ,EAAEzC,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,cAAtD,CANd,CAOI;AACA;AARJ;AASI,QAAA,WAAW,EAAE,KATjB;AAUI,QAAA,aAAa,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,YAAtD,EAAmED,KAAnE,CAAyEyB,UAAzE,KAAwF5C,UAAU,CAACkE,QAAnG,GAA8G,IAA9G,GAAqH,KAVxI;AAWI,QAAA,QAAQ,EAAEE,IAAI,IAAItD,KAAK,CAACuD,sBAAN,CAA8B,cAA9B,EAA6CD,IAA7C,EAAmDX,UAAnD,EAA+DrC,KAA/D,CAXtB;AAYI,QAAA,KAAK,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCiC,UAAlC,EAA8CrC,KAA9C,EAAsD,cAAtD,KAAwE,EAZnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFP,gBAkBO,yCAnCZ,CAFH,gBAwCK,yCAzDV,CAHE,gBA+DA,yCArOtB,CADJ,CADJ;AA4OH,KA9OD;AA+OA,WAAOJ,MAAP;AACH;;AACD,WAASsD,gBAAT,GAA4B;AACxB,QAAItC,UAAU,GAAG,CAAjB;AACA,QAAIhB,MAAM,GAAG,EAAb;AACAF,IAAAA,KAAK,CAACyD,YAAN,CAAmBC,MAAnB,GAA4B,CAA5B,IAAiC1D,KAAK,CAACyD,YAAN,CAAmBrD,GAAnB,CAAuB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAEtE,UAAIc,eAAe,GAAGhC,kBAAtB;;AACA,UAAIY,KAAK,CAACU,cAAN,CAAqB,WAArB,KAAqCV,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,YAAzC,CAArC,IACG,CAACN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,YAAzC,EAAuDD,KAAvD,CAA6DgB,cADjE,IAEGrB,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,YAAzC,EAAuDD,KAAvD,CAA6DyB,UAA7D,KAA4E5C,UAAU,CAACgD,SAF9F,EAEyG;AACrG,cAAMyB,IAAI,GAAGvC,eAAe,CAACwC,MAAhB,CAAuBtC,IAAI,IAAI;AACxC,cAAIA,IAAI,CAACjB,KAAL,CAAWkB,UAAX,KAA0B,CAA9B,EAAiC;AAC7B,mBAAOD,IAAP;AACH;AACJ,SAJY,CAAb;AAKAF,QAAAA,eAAe,GAAGuC,IAAlB;AACH;;AAED,UAAItD,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZa,QAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;AACH;;AAAA;AACDhB,MAAAA,MAAM,CAACK,IAAP,eACI,0CACKF,KAAK,GAAG,CAAC,CAAT,gBACG,0CACKA,KAAK,GAAG,CAAR,gBACG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,SAAS,EAAEL,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,YAAzC,MAA2D,IAA3D,GAAkE,qBAAlE,GAA0F,EAApI;AAAwI,QAAA,UAAU,EAAE,CAApJ;AACI,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACwB,gBAAN,CAAuB,YAAvB,EAAqClB,KAArC,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAM,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,SAArB;AAA+B,QAAA,cAAc,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFJ,CADJ,eAKI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,SAAS,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,WAAzC,MAA0D,IAA1D,GAAiE,qBAAjE,GAAyF,EAAnI;AAAuI,QAAA,UAAU,EAAE,CAAnJ;AACI,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACwB,gBAAN,CAAuB,WAAvB,EAAoClB,KAApC,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAM,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,QAArB;AAA8B,QAAA,cAAc,EAAC,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFJ,CALJ,eASI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,SAAS,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,YAAzC,MAA2D,IAA3D,GAAkE,qBAAlE,GAA0F,EAApI;AAAwI,QAAA,UAAU,EAAE,CAApJ;AACI,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACwB,gBAAN,CAAuB,YAAvB,EAAqClB,KAArC,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAM,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,SAArB;AAA+B,QAAA,cAAc,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFJ,CATJ,CADH,gBAiBG,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAC,QAAtB;AAA+B,QAAA,SAAS,EAAEN,KAAK,CAACU,cAAN,CAAqB,WAArB,EAAkCJ,KAAlC,EAAyC,YAAzC,MAA2D,IAA3D,GAAkE,qBAAlE,GAA0F,EAApI;AAAwI,QAAA,UAAU,EAAE,CAApJ;AACI,QAAA,OAAO,EAAE,MAAMN,KAAK,CAACwB,gBAAN,CAAuB,YAAvB,EAAqClB,KAArC,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAM,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,SAArB;AAA+B,QAAA,cAAc,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFJ,CADJ,CADJ,CAlBR,eA4BI,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAEA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMN,KAAK,CAAC6D,OAAN,CAAc,OAAd,EAAuBvD,KAAvB,CAAvB;AAAsD,QAAA,SAAS,EAAC,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,GADL,oBACU,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC,aAArB;AAAmC,QAAA,cAAc,EAAC,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADV,CADJ,CAVJ,CADJ,eAiBI,0CACKoC,WAAW,CAACrC,KAAD,EAAQC,KAAR,CADhB,CAjBJ,CA5BJ,CADH,gBAmDS,yCApDd,CADJ;AA0DH,KA3EgC,CAAjC;AA6EA,WAAOJ,MAAP;AACH;;AAED,sBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,kBAAkB,EAAC,8BADvB;AAEI,IAAA,KAAK,EAAE,oBAFX;AAGI,IAAA,IAAI,EAAG,kBAHX;AAII,IAAA,IAAI,EAAC,MAJT;AAKI,IAAA,QAAQ,EAAE,KALd;AAMI,IAAA,WAAW,EAAE,IANjB;AAOI,IAAA,KAAK,EAAEF,KAAK,CAACU,cAAN,CAAqB,kBAArB,KAA4C,EAPvD;AAQI,IAAA,QAAQ,EAAG0B,KAAD,IAAWpC,KAAK,CAACqC,aAAN,CAAoBD,KAApB,CARzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAgCI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMpC,KAAK,CAAC8D,SAAN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,WAArB;AAAiC,IAAA,cAAc,EAAC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CAhCJ,eAyCI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ9D,KAAK,CAAC+D,QAAN,gBACI,uDACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAM/D,KAAK,CAAC6D,OAAN,CAAc,KAAd,CAAvB;AAA6C,IAAA,SAAS,EAAC,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,GADL,oBACU,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,aAArB;AAAmC,IAAA,cAAc,EAAC,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADV,CADJ,eAII,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAM7D,KAAK,CAACgE,eAAN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,mBAArB;AAAyC,IAAA,cAAc,EAAC,gBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CADJ,gBAQU,yCAVlB,CAzCJ,CADJ,EA0DQhE,KAAK,CAAC+D,QAAN,KAAmB,IAAnB,gBACI,uDACI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/D,KAAK,CAACmB,WAAN,CAAkBuC,MAAlB,GAA2B,CAA3B,GAA+BzC,cAAc,EAA7C,gBAAkD,yCADvD,CADJ,eAII,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjB,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAzB,CADL,eAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMzC,KAAK,CAACiE,aAAN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,aAArB;AAAmC,IAAA,cAAc,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CADJ,eAOI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjE,KAAK,CAACU,cAAN,IAAwBV,KAAK,CAACU,cAAN,CAAqB,eAArB,CAAxB,GAAgEV,KAAK,CAACU,cAAN,CAAqB,eAArB,CAAhE,GAAwG,UAD7G,CAPJ,CADJ,CAJJ,CADJ,CADJ,gBAqBI,uDACI,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACI,IAAA,kBAAkB,EAAC,8BADvB;AAEI,IAAA,SAAS,EAAEV,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFf;AAGI,IAAA,YAAY,EAAE,IAHlB;AAII,IAAA,IAAI,EAAE,WAJV;AAKI,IAAA,WAAW,EAAEzC,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CALjB;AAMI,IAAA,UAAU,EAAE,IANhB;AAOI,IAAA,OAAO,EAAEzC,KAAK,CAACkE,gBAAN,IAA0B,EAPvC;AAQI,IAAA,QAAQ,EAAC,WARb;AASI,IAAA,WAAW,EAAC,aAThB;AAUI,IAAA,KAAK,EAAElE,KAAK,CAACU,cAAN,CAAqB,WAArB,KAAqC,EAVhD;AAWI,IAAA,QAAQ,EAAEC,KAAK,IAAIX,KAAK,CAACmE,iBAAN,CAAwBxD,KAAxB,EAA+B,WAA/B,CAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAiBI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMX,KAAK,CAACoE,QAAN,CAAe,OAAf,CAAvB;AAAgD,IAAA,SAAS,EAAC,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,GADL,oBACU,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,cAArB;AAAoC,IAAA,cAAc,EAAC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADV,CADJ,CAjBJ,eAiCI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjCJ,eAkDI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlDJ,CADJ,eAyDI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpE,KAAK,CAACyD,YAAN,CAAmBC,MAAnB,GAA4B,CAA5B,GAAgCF,gBAAgB,EAAhD,gBAAqD,yCAD1D,EAEKxD,KAAK,CAACc,gBAAN,CAAuB4C,MAAvB,GAAgC,CAAhC,GAAoC7C,wBAAwB,EAA5D,gBAAiE,yCAFtE,EAGKb,KAAK,CAACG,cAAN,CAAqBuD,MAArB,GAA8B,CAA9B,GAAkCzD,mBAAmB,EAArD,gBAA0D,yCAH/D,CADJ,eAMI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAzB,CADL,eAEI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMzC,KAAK,CAACqE,YAAN,CAAmB,CAAnB,CAAvB;AAA8C,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,aAArB;AAAmC,IAAA,cAAc,EAAC,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,eAMI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMtE,KAAK,CAACiE,aAAN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,aAArB;AAAmC,IAAA,cAAc,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CANJ,CAFJ,CADJ,eAeI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AACI,IAAA,IAAI,EAAE,eADV;AAEI,IAAA,KAAK,EAAEjE,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAzB,CAFX;AAGI,IAAA,OAAO,EAAEzC,KAAK,CAACuE,YAAN,IAAsB,EAHnC;AAII,IAAA,QAAQ,EAAE,OAJd;AAKI,IAAA,WAAW,EAAE,OALjB;AAMI,IAAA,KAAK,EAAEvE,KAAK,CAACU,cAAN,GAAuBV,KAAK,CAACU,cAAN,CAAqB,eAArB,KAAyC,EAAhE,GAAqE,EANhF;AAOI,IAAA,WAAW,EAAE,KAPjB;AAQI,IAAA,WAAW,EAAE,IARjB;AASI,IAAA,aAAa,EAAE,KATnB;AAUI,IAAA,QAAQ,EAAE,KAVd;AAWI,IAAA,iBAAiB,EAAE,KAXvB;AAYI,IAAA,gBAAgB,EAAE,IAZtB;AAaI,IAAA,QAAQ,EAAG0B,KAAD,IAAWpC,KAAK,CAACwE,mBAAN,CAA0BpC,KAA1B,EAAiC,eAAjC,CAbzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ,EAoBKpC,KAAK,CAACU,cAAN,IAAwBV,KAAK,CAACU,cAAN,CAAqB,eAArB,CAAxB,GAAgEV,KAAK,CAACU,cAAN,CAAqB,eAArB,CAAhE,GAAwGV,KAAK,CAACuC,IAAN,CAAWC,aAAX,CAAyB;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAAzB,CApB7G,CAfJ,CADJ,EAuCKzC,KAAK,CAAC6C,IAAN,IAAc7C,KAAK,CAACyE,cAApB,IAAsCzE,KAAK,CAACyE,cAAN,CAAqBf,MAArB,GAA8B,CAApE,gBACG,oBAAC,QAAD,CACI;AADJ;AAEI,IAAA,IAAI,EAAE1D,KAAK,CAAC6C,IAFhB;AAGI,IAAA,UAAU,EAAE7C,KAAK,CAAC0E,UAHtB;AAII,IAAA,SAAS,EAAE1E,KAAK,CAAC2E,SAJrB;AAKI,IAAA,eAAe,EAAE3E,KAAK,CAAC4E,eAL3B;AAMI,IAAA,mBAAmB,EAAE5E,KAAK,CAACyE,cAN/B;AAOI,IAAA,UAAU,EAAEzE,KAAK,CAAC6E,UAPtB;AAQI,IAAA,qBAAqB,EAAE7E,KAAK,CAAC8E,qBARjC,CASI;AATJ;AAUI,IAAA,QAAQ,EAAE9E,KAAK,CAAC+E,QAVpB,CAWI;AACA;AACA;AACA;AACA;AAfJ;AAgBI,IAAA,QAAQ,EAAE,IAhBd;AAiBI,IAAA,UAAU,EAAE,YAjBhB,CAkBI;AAlBJ;AAmBI,IAAA,gBAAgB,EAAE,KAnBtB;AAoBI,IAAA,iBAAiB,EAAE,IApBvB;AAqBI,IAAA,iBAAiB,EAAE,KArBvB;AAsBI,IAAA,UAAU,EAAE,CAAC,CAtBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,gBAyBK,yCAhEV,CANJ,CAzDJ,CA/EZ,CADJ;AAwNH,CAnoCD;;AAqoCA,eAAenG,UAAU,CAACmB,UAAD,CAAzB","sourcesContent":["import { faGripVertical, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { BuilderBorder, ContionalButton, DeleteRule } from './Sqlbuilder.styled';\r\nimport '../../assets/styles/querybuilder.css';\r\nimport { ColumnType } from '../../components/Enumeration';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport { stringOperatorData, conditionalOperatorData, numericOperatorData, joinConditionData, aggregateFunction, orderByList } from './QueryBuilderData';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport FormCheckbox from '../../components/form-checkbox/form-checkbox.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\n\r\n\r\nconst BuildQuery = (props) => {\r\n\r\n    function createOrderbyFields() {\r\n        let design = [];\r\n        props.addOrderbyList.map((items, index) => {\r\n            design.push(\r\n                <>\r\n\r\n                    <BuilderBorder key={index}>\r\n                        <Row className=\"mt-3\">\r\n\r\n                            <DeleteRule marginLeft={1} onClick={() => props.deleteOrderby(index)}>\r\n                                <FontAwesomeIcon icon={faTrashAlt} color=\"red\" />\r\n                            </DeleteRule>\r\n                            <Col md={4}>\r\n                                <FormSelectSearch\r\n                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                    isSearchable={true}\r\n                                    name={`columnname`}\r\n                                    showOption={true}\r\n                                    options={props.viewColumnListByRule || []}\r\n                                    optionId='columnname'\r\n                                    optionValue='displayname'\r\n                                    value={props.selectedRecord[\"orderby\"] && props.selectedRecord[\"orderby\"][index] && props.selectedRecord[\"orderby\"][index][`columnname`] || \"\"}\r\n                                    onChange={value => props.onOrderbyChange(value, \"columnname\", index)}\r\n                                ></FormSelectSearch>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <FormSelectSearch\r\n                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                    isSearchable={true}\r\n                                    name={\"ordertype\"}\r\n                                    showOption={true}\r\n                                    options={orderByList || []}\r\n                                    optionId='value'\r\n                                    optionValue='label'\r\n                                    // isDisabled={props.selectedRecord[\"customorderby\"] && props.selectedRecord[\"customorderby\"] === true ? false : true}\r\n                                    value={props.selectedRecord[\"orderby\"] && props.selectedRecord[\"orderby\"][index] && props.selectedRecord[\"orderby\"][index][\"ordertype\"] || \"\"}\r\n                                    onChange={value => props.onOrderbyChange(value, \"ordertype\", index)}\r\n                                ></FormSelectSearch>\r\n                            </Col>\r\n                        </Row>\r\n                    </BuilderBorder>\r\n\r\n                </>)\r\n\r\n        })\r\n        return design;\r\n    }\r\n    function createAggregateFunctions() {\r\n        let design = [];\r\n        props.addAggregateList.map((items, index) => {\r\n            design.push(\r\n                <>\r\n\r\n                    <BuilderBorder key={index}>\r\n                        <Row className=\"mt-3\">\r\n\r\n                            <DeleteRule marginLeft={1} onClick={() => props.deleteAggregate(index)}>\r\n                                <FontAwesomeIcon icon={faTrashAlt} color=\"red\" />\r\n                            </DeleteRule>\r\n                            <Col md={4}>\r\n                                <FormSelectSearch\r\n                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                    isSearchable={true}\r\n                                    name={`columnname`}\r\n                                    showOption={true}\r\n                                    options={props.viewColumnListByRule || []}\r\n                                    optionId='columnname'\r\n                                    optionValue='displayname'\r\n                                    value={props.selectedRecord[\"aggregate\"] && props.selectedRecord[\"aggregate\"][index] && props.selectedRecord[\"aggregate\"][index][`columnname`] || \"\"}\r\n                                    onChange={value => props.onAggregateChange(value, \"columnname\", index)}\r\n                                ></FormSelectSearch>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <FormSelectSearch\r\n                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                    isSearchable={true}\r\n                                    name={\"aggfunctionname\"}\r\n                                    showOption={true}\r\n                                    options={aggregateFunction || []}\r\n                                    optionId='value'\r\n                                    optionValue='label'\r\n                                    value={props.selectedRecord[\"aggregate\"] && props.selectedRecord[\"aggregate\"][index] && props.selectedRecord[\"aggregate\"][index][\"aggfunctionname\"] || \"\"}\r\n                                    onChange={value => props.onAggregateChange(value, \"aggfunctionname\", index)}\r\n                                ></FormSelectSearch>\r\n                            </Col>\r\n                        </Row>\r\n                    </BuilderBorder>\r\n\r\n                </>)\r\n\r\n        })\r\n        return design;\r\n    }\r\n    // function createViewRules() {\r\n    //     let indexCount = 0;\r\n    //     let design = [];\r\n    //     props.addRuleList.map((items, index) => {\r\n\r\n    //         let stringOperators = stringOperatorData;\r\n    //         if (props.selectedRecord[`columnname_${index}`]\r\n    //             && !props.selectedRecord[`columnname_${index}`].items.needmasterdata\r\n    //             && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.TEXTINPUT) {\r\n    //             const temp = stringOperators.filter(item => {\r\n    //                 if (item.items.symbolType !== 6) {\r\n    //                     return item\r\n    //                 }\r\n    //             });\r\n    //             stringOperators = temp;\r\n    //         }\r\n\r\n    //         if (items > -1) {\r\n    //             indexCount = indexCount + 1;\r\n    //         };\r\n    //         design.push(\r\n    //             <>\r\n    //                 {items > -1 ?\r\n    //                     <>\r\n    //                         {indexCount !== 1 ?\r\n    //                             <Row>\r\n    //                                 {/* <ContionalButton type=\"button\" className=\"builder-btn-primary\" marginLeft={1} \r\n    //                         onClick={()=>props.onConditionClick1(`button_${index}`, 'not')}>\r\n    //                         <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"Not\" /></span>\r\n    //                     </ContionalButton> */}\r\n    //                                 <ContionalButton type=\"button\" className={props.selectedRecord[`button_and_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\r\n    //                                     onClick={() => props.onConditionClick(`button_and_${index}`, index)}>\r\n    //                                     <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n    //                                 </ContionalButton>\r\n    //                                 <ContionalButton type=\"button\" className={props.selectedRecord[`button_or_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n    //                                     onClick={() => props.onConditionClick(`button_or_${index}`, index)}>\r\n    //                                     <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n    //                                 </ContionalButton>\r\n    //                             </Row> :\r\n    //                             <>\r\n    //                                 {/* <ContionalButton type=\"button\" className={props.selectedRecord[`button_not_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\r\n    //                                     onClick={() => props.onConditionClick(`button_not_${index}`, index)}>\r\n    //                                     <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"Not\" /></span>\r\n    //                                 </ContionalButton> */}\r\n\r\n\r\n    //                             </>\r\n    //                         }\r\n    //                         <BuilderBorder key={index}>\r\n    //                             <CustomSwitch\r\n    //                                 label={props.intl.formatMessage({ id: \"IDS_NOT\" })}\r\n    //                                 name={`notoperator_${index}`}\r\n    //                                 type=\"switch\"\r\n    //                                 isMandatory={false}\r\n    //                                 required={false}\r\n    //                                 checked={props.selectedRecord[`notoperator_${index}`] === undefined ? false : props.selectedRecord[`notoperator_${index}`]}\r\n    //                                 onChange={(event) => props.onInputChange(event, 1)}\r\n    //                             />\r\n    //                             <Row className=\"mt-3\">\r\n\r\n    //                                 <DeleteRule marginLeft={1} onClick={() => props.deleteRule(index)}>\r\n    //                                     <FontAwesomeIcon icon={faTrashAlt} color=\"red\" />\r\n    //                                 </DeleteRule>\r\n    //                                 <Col md={4}>\r\n    //                                     <FormSelectSearch\r\n    //                                         formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                         isSearchable={true}\r\n    //                                         name={`columnname_${index}`}\r\n    //                                         showOption={true}\r\n    //                                         options={props.viewColumnListByRule[index] || []}\r\n    //                                         optionId='columnname'\r\n    //                                         optionValue='displayname'\r\n    //                                         value={props.selectedRecord[`columnname_${index}`] || \"\"}\r\n    //                                         onChange={value => props.onRuleChange(value, `columnname_${index}`, index)}\r\n    //                                     ></FormSelectSearch>\r\n    //                                 </Col>\r\n    //                                 {props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.TEXTINPUT ?\r\n    //                                     <>\r\n    //                                         <Col md={2}>\r\n    //                                             <FormSelectSearch\r\n    //                                                 formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                 formLabel=\"\"\r\n    //                                                 isSearchable={true}\r\n    //                                                 name={`ssymbolname_${index}`}\r\n    //                                                 placeholder=\"\"\r\n    //                                                 showOption={true}\r\n    //                                                 options={stringOperators}\r\n    //                                                 optionId='nvalidationcode'\r\n    //                                                 optionValue='ssymbolname'\r\n    //                                                 value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\r\n    //                                                 onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n    //                                             >\r\n    //                                             </FormSelectSearch>\r\n    //                                         </Col>\r\n    //                                         {props.selectedRecord[`ssymbolname_${index}`]\r\n    //                                             && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible ?\r\n    //                                             <>\r\n    //                                                 {props.selectedRecord[`columnname_${index}`].items.needmasterdata ?\r\n\r\n    //                                                     <Col md={4}>\r\n    //                                                         <FormSelectSearch\r\n    //                                                             formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                             isSearchable={true}\r\n    //                                                             name={`${props.selectedRecord[`columnname_${index}`].items.valuemember}_${index}`}\r\n    //                                                             showOption={true}\r\n    //                                                             options={props.viewMasterListByRule[index] || []}\r\n    //                                                             optionId={props.selectedRecord[`columnname_${index}`].items.valuemember}\r\n    //                                                             optionValue={props.selectedRecord[`columnname_${index}`].items.displaymember}\r\n    //                                                             value={props.selectedRecord[`${props.selectedRecord[`columnname_${index}`].items.valuemember}_${index}`] || \"\"}\r\n    //                                                             isMulti={props.selectedRecord[`ssymbolname_${index}`].items.ismulti}\r\n    //                                                             onChange={value => props.onMasterDataChange(value, `${props.selectedRecord[`columnname_${index}`].items.valuemember}_${index}`, index)}\r\n    //                                                         ></FormSelectSearch>\r\n    //                                                     </Col> :\r\n    //                                                     <Col md={4}>\r\n    //                                                         <FormInput\r\n    //                                                             formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                             name={`sinputname_${index}`}\r\n    //                                                             type=\"text\"\r\n    //                                                             onChange={(event) => props.onInputChange(event, 1)}\r\n    //                                                             value={props.selectedRecord ? props.selectedRecord[`sinputname_${index}`] : \"\"}\r\n    //                                                             maxLength={100}\r\n    //                                                         />\r\n    //                                                     </Col>\r\n\r\n    //                                                 }\r\n    //                                             </>\r\n    //                                             : <></>\r\n    //                                         }\r\n\r\n    //                                     </> : props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.NUMERICINPUT ?\r\n    //                                         <>\r\n    //                                             <Col md={2}>\r\n    //                                                 <FormSelectSearch\r\n    //                                                     formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                     formLabel=\"\"\r\n    //                                                     isSearchable={true}\r\n    //                                                     name={`ssymbolname_${index}`}\r\n    //                                                     placeholder=\"\"\r\n    //                                                     showOption={true}\r\n    //                                                     options={numericOperatorData}\r\n    //                                                     optionId='nvalidationcode'\r\n    //                                                     optionValue='ssymbolname'\r\n    //                                                     value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\r\n    //                                                     onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n    //                                                 >\r\n    //                                                 </FormSelectSearch>\r\n    //                                             </Col>\r\n    //                                             {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\r\n    //                                                 <>\r\n    //                                                     <Col md={2}>\r\n    //                                                         <FormInput\r\n    //                                                             formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                             label={props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_FROM\" }) : \"\"}\r\n    //                                                             name={`snumericinput_${index}`}\r\n    //                                                             type=\"text\"\r\n    //                                                             required={false}\r\n    //                                                             isMandatory={false}\r\n    //                                                             value={props.selectedRecord[`snumericinput_${index}`] ? props.selectedRecord[`snumericinput_${index}`] : \"\"}\r\n    //                                                             onChange={(event) => props.onInputChange(event, 2)}\r\n    //                                                             maxLength={10}\r\n    //                                                         />\r\n    //                                                     </Col>\r\n    //                                                     {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ?\r\n    //                                                         (\r\n    //                                                             <Col md={2}>\r\n    //                                                                 <FormInput\r\n    //                                                                     formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                                     label={props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n    //                                                                     name={`snumericinputtwo_${index}`}\r\n    //                                                                     type=\"text\"\r\n    //                                                                     required={false}\r\n    //                                                                     isMandatory={false}\r\n    //                                                                     value={props.selectedRecord[`snumericinputtwo_${index}`] ? props.selectedRecord[`snumericinputtwo_${index}`] : \"\"}\r\n    //                                                                     onChange={(event) => props.onInputChange(event, 2)}\r\n    //                                                                     maxLength={10}\r\n    //                                                                 />\r\n    //                                                             </Col>\r\n    //                                                         ) : <></>\r\n\r\n    //                                                     }\r\n    //                                                 </>\r\n    //                                                 : <></>\r\n    //                                             }\r\n\r\n    //                                         </> : props.selectedRecord[`columnname_${index}`]\r\n    //                                             && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.COMBO ?\r\n    //                                             <>\r\n    //                                                 <Col md={2}>\r\n    //                                                     <FormSelectSearch\r\n    //                                                         formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                         formLabel=\"\"\r\n    //                                                         isSearchable={true}\r\n    //                                                         name={`ssymbolname_${index}`}\r\n    //                                                         placeholder=\"\"\r\n    //                                                         showOption={true}\r\n    //                                                         options={conditionalOperatorData}\r\n    //                                                         optionId='nvalidationcode'\r\n    //                                                         optionValue='ssymbolname'\r\n    //                                                         value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\r\n    //                                                         onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n    //                                                     >\r\n    //                                                     </FormSelectSearch>\r\n    //                                                 </Col>\r\n    //                                                 {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\r\n    //                                                     <Col md={4}>\r\n    //                                                         <FormSelectSearch\r\n    //                                                             formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                             formLabel=\"\"\r\n    //                                                             isSearchable={true}\r\n    //                                                             name={`${props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}_${index}`}\r\n    //                                                             placeholder=\"\"\r\n    //                                                             showOption={true}\r\n    //                                                             options={props.viewMasterListByRule && props.viewMasterListByRule[index] || []}\r\n    //                                                             optionId={props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}\r\n    //                                                             optionValue='sdisplayname'\r\n    //                                                             value={props.selectedRecord[`${props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}_${index}`] || \"\"}\r\n    //                                                             onChange={value => props.onMasterDataChange(value, `${props.selectedRecord[`columnname_${index}`].items.sforeigncolumnname}_${index}`, index)}\r\n    //                                                             isMulti={props.selectedRecord[`ssymbolname_${index}`].items.ismulti}\r\n    //                                                         >\r\n    //                                                         </FormSelectSearch>\r\n    //                                                     </Col> : <></>\r\n    //                                                 }\r\n    //                                             </> : props.selectedRecord[`columnname_${index}`]\r\n    //                                                 && (props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME\r\n    //                                                     || props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATE) ?\r\n    //                                                 <>\r\n    //                                                     <Col md={2}>\r\n    //                                                         <FormSelectSearch\r\n    //                                                             formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                             formLabel=\"\"\r\n    //                                                             isSearchable={true}\r\n    //                                                             name={`ssymbolname_${index}`}\r\n    //                                                             placeholder=\"\"\r\n    //                                                             showOption={true}\r\n    //                                                             options={numericOperatorData}\r\n    //                                                             optionId='nvalidationcode'\r\n    //                                                             optionValue='ssymbolname'\r\n    //                                                             value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\r\n    //                                                             onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n    //                                                         >\r\n    //                                                         </FormSelectSearch>\r\n    //                                                     </Col>\r\n    //                                                     {props.selectedRecord[`ssymbolname_${index}`]\r\n    //                                                         && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\r\n    //                                                         <>\r\n    //                                                             <Col md={2}>\r\n    //                                                                 <DateTimePicker\r\n    //                                                                     formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                                     label={props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_FROM\" }) : \"\"}\r\n    //                                                                     name={`dateinput_${index}`}\r\n    //                                                                     className='form-control'\r\n    //                                                                     placeholderText=\"Select date..\"\r\n    //                                                                     selected={props.selectedRecord[`dateinput_${index}`]}\r\n    //                                                                     // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\r\n    //                                                                     // dateFormat={\"dd-MM-yyyy\"}\r\n    //                                                                     isClearable={false}\r\n    //                                                                     showTimeInput={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? true : false}\r\n    //                                                                     onChange={date => props.handleFilterDateChange(`dateinput_${index}`, date)}\r\n    //                                                                     value={props.selectedRecord[`dateinput_${index}`] || \"\"}\r\n    //                                                                 />\r\n    //                                                             </Col>\r\n    //                                                             {props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ?\r\n    //                                                                 (\r\n    //                                                                     <Col md={2}>\r\n    //                                                                         <DateTimePicker\r\n    //                                                                             formGroupClassName=\"remove-floating-label-margin\"\r\n    //                                                                             label={props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n    //                                                                             name={`dateinputtwo_${index}`}\r\n    //                                                                             className='form-control'\r\n    //                                                                             placeholderText=\"Select date..\"\r\n    //                                                                             selected={props.selectedRecord[`dateinputtwo_${index}`]}\r\n    //                                                                             // dateFormat={\"dd-MM-yyyy\"}\r\n    //                                                                             // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\r\n    //                                                                             isClearable={false}\r\n    //                                                                             showTimeInput={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? true : false}\r\n    //                                                                             onChange={date => props.handleFilterDateChange(`dateinputtwo_${index}`, date)}\r\n    //                                                                             value={props.selectedRecord[`dateinputtwo_${index}`] || \"\"}\r\n    //                                                                         />\r\n    //                                                                     </Col>\r\n    //                                                                 ) : <></>\r\n    //                                                             }\r\n    //                                                         </>\r\n    //                                                         : <></>\r\n    //                                                     }\r\n    //                                                 </>\r\n    //                                                 : <></>\r\n    //                                 }\r\n    //                             </Row>\r\n    //                         </BuilderBorder>\r\n    //                     </> : <></>\r\n    //                 }\r\n\r\n\r\n    //             </>)\r\n    //     });\r\n\r\n    //     return design;\r\n    // }\r\n    function createSqlRules() {\r\n        let indexCount = 0;\r\n        let design = [];\r\n        props.addRuleList.map((items, index) => {\r\n\r\n            const stringOperators = props.selectedRecord[`columnname_${index}`].items\r\n                && props.selectedRecord[`columnname_${index}`].items.needmasterdata ?\r\n                stringOperatorData : stringOperatorData.map(item => { return item.symbolType !== 6 });\r\n\r\n            if (items > -1) {\r\n                indexCount = indexCount + 1;\r\n            };\r\n            design.push(\r\n                <>\r\n                    {items > -1 ?\r\n                        <>\r\n                            {indexCount !== 1 ?\r\n                                <>\r\n                                    <Row>\r\n                                        {/* <ContionalButton type=\"button\" className=\"builder-btn-primary\" marginLeft={1} \r\n                                onClick={()=>props.onConditionClick1(`button_${index}`, 'not')}>\r\n                                <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"Not\" /></span>\r\n                            </ContionalButton> */}\r\n                                        <ContionalButton type=\"button\" className={props.selectedRecord[`button_and_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\r\n                                            onClick={() => props.onConditionClick(`button_and_${index}`, index)}>\r\n                                            <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                                        </ContionalButton>\r\n                                        <ContionalButton type=\"button\" className={props.selectedRecord[`button_or_${index}`] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                                            onClick={() => props.onConditionClick(`button_or_${index}`, index)}>\r\n                                            <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                                        </ContionalButton>\r\n                                    </Row>\r\n                                </> : <></>\r\n                            }\r\n                            <BuilderBorder key={index}>\r\n                                <Row>\r\n                                    <DeleteRule marginLeft={1} onClick={() => props.deleteRule(index)}>\r\n                                        <FontAwesomeIcon icon={faTrashAlt} color=\"red\" />\r\n                                    </DeleteRule>\r\n                                    <Col md={2} key={`tablekey_${index}`}>\r\n                                        <FormSelectSearch\r\n                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                            // formLabel={ props.intl.formatMessage({ id: \"IDS_TABLES\" }) }\r\n                                            isSearchable={true}\r\n                                            name={`stablename_${index}`}\r\n                                            // placeholder={ props.intl.formatMessage({ id: \"IDS_TABLES\" }) }\r\n                                            showOption={true}\r\n                                            options={props.databaseTableList}\r\n                                            optionId='stablename'\r\n                                            optionValue='displayname'\r\n                                            value={props.selectedRecord[`stablename_${index}`] || \"\"}\r\n                                            onChange={value => props.onTableChange(value, `stablename_${index}`, index)}\r\n                                        >\r\n                                        </FormSelectSearch>\r\n                                    </Col>\r\n                                    <Col md={2} key={`columnkey_${index}`}>\r\n                                        <FormSelectSearch\r\n                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                            // formLabel={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\r\n                                            isSearchable={true}\r\n                                            name={`columnname_${index}`}\r\n                                            // placeholder={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\r\n                                            showOption={true}\r\n                                            options={props.tableColumnList[index] || []}\r\n                                            optionId='columnname'\r\n                                            optionValue='displayname'\r\n                                            value={props.selectedRecord[`columnname_${index}`] || \"\"}\r\n                                            // onChange={ value => props.onColumnChange(value, `columnname_${index}`, index) }\r\n                                            onChange={value => props.onRuleChange(value, `columnname_${index}`, index)}\r\n                                        >\r\n                                        </FormSelectSearch>\r\n                                    </Col>\r\n                                    {props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.COMBO ?\r\n                                        <>\r\n                                            <Col md={2}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    formLabel=\"\"\r\n                                                    isSearchable={true}\r\n                                                    name={`ssymbolname_${index}`}\r\n                                                    placeholder=\"\"\r\n                                                    showOption={true}\r\n                                                    options={joinConditionData}\r\n                                                    optionId='nvalidationcode'\r\n                                                    optionValue='ssymbolname'\r\n                                                    value={props.selectedRecord[`ssymbolname_${index}`]}\r\n                                                    onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                            </Col>\r\n                                            <Col md={2} key={`foreigncolumnkey_${index}`}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    // formLabel={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\r\n                                                    isSearchable={true}\r\n                                                    name={`foreigncolumnname_${index}`}\r\n                                                    // placeholder={ props.intl.formatMessage({ id: \"IDS_COLUMNS\" }) }\r\n                                                    showOption={true}\r\n                                                    options={props.foreignTableColumnList[index] || []}\r\n                                                    optionId='columnname'\r\n                                                    optionValue='displayname'\r\n                                                    value={props.selectedRecord[`foreigncolumnname_${index}`] || \"\"}\r\n                                                    // onChange={ value => props.onColumnChange(value, `columnname_${index}`, index) }\r\n                                                    onChange={value => props.onRuleChange(value, `foreigncolumnname_${index}`, index)}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                            </Col>\r\n                                        </>\r\n                                        : <></>}\r\n                                    {/* <Col md={2} key={`tablekey_${index}`}>\r\n                                <FormSelectSearch\r\n                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                    // formLabel={ props.intl.formatMessage({ id: \"IDS_TABLES\" }) }\r\n                                    isSearchable={ true }\r\n                                    name={ `stablename_${index}` }\r\n                                    // placeholder={ props.intl.formatMessage({ id: \"IDS_TABLES\" }) }\r\n                                    showOption={ true }\r\n                                    options={ props.databaseTableList }\r\n                                    optionId='stablename'\r\n                                    optionValue='displayname'\r\n                                    value={ props.selectedRecord[`stablename_${index}`] || \"\" }\r\n                                    onChange={ value => props.onTableChange(value, `stablename_${index}`, index) }\r\n                                >\r\n                                </FormSelectSearch>\r\n                            </Col> */}\r\n\r\n                                    {props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.TEXTINPUT ?\r\n                                        <>\r\n                                            <Col md={2}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    formLabel=\"\"\r\n                                                    isSearchable={true}\r\n                                                    name={`ssymbolname_${index}`}\r\n                                                    placeholder=\"\"\r\n                                                    showOption={true}\r\n                                                    options={stringOperators}\r\n                                                    optionId='nvalidationcode'\r\n                                                    optionValue='ssymbolname'\r\n                                                    value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\r\n                                                    onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                            </Col>\r\n                                            {props.selectedRecord[`ssymbolname_${index}`] && props.selectedRecord[`ssymbolname_${index}`].items.isInputVisible === true ?\r\n                                                <Col md={4}>\r\n                                                    <FormInput\r\n                                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                                        name={`sinputname_${index}`}\r\n                                                        // label={props.intl.formatMessage({ id: \"IDS_INPUT\" })}\r\n                                                        type=\"text\"\r\n                                                        onChange={(event) => props.onInputChange(event, 1)}\r\n                                                        // placeholder={props.intl.formatMessage({ id: \"IDS_INPUT\" })}\r\n                                                        value={props.selectedRecord ? props.selectedRecord[`sinputname_${index}`] : \"\"}\r\n                                                        maxLength={100}\r\n                                                    />\r\n                                                </Col> : <></>\r\n                                            }\r\n\r\n                                        </> : props.selectedRecord[`columnname_${index}`] && props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.NUMERICINPUT ?\r\n                                            <>\r\n                                                <Col md={2}>\r\n                                                    <FormSelectSearch\r\n                                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                                        formLabel=\"\"\r\n                                                        isSearchable={true}\r\n                                                        name={`ssymbolname_${index}`}\r\n                                                        placeholder=\"\"\r\n                                                        showOption={true}\r\n                                                        options={numericOperatorData}\r\n                                                        optionId='nvalidationcode'\r\n                                                        optionValue='ssymbolname'\r\n                                                        value={props.selectedRecord[`ssymbolname_${index}`] || \"\"}\r\n                                                        onChange={value => props.onSymbolChange(value, `ssymbolname_${index}`, index)}\r\n                                                    >\r\n                                                    </FormSelectSearch>\r\n                                                </Col>\r\n                                                {\r\n                                                    props.selectedRecord[`ssymbolname_${index}`] ?\r\n                                                        <Col md={2}>\r\n                                                            <FormInput\r\n                                                                name={`snumericinput_${index}`}\r\n                                                                label={props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_TO\" }) : \"\"}\r\n                                                                type=\"text\"\r\n                                                                required={false}\r\n                                                                isMandatory={false}\r\n                                                                value={props.selectedRecord[`snumericinput_${index}`] ? props.selectedRecord[`snumericinput_${index}`] : \"\"}\r\n                                                                onChange={(event) => props.onInputChange(event, 2)}\r\n                                                                maxLength={10}\r\n                                                            />\r\n                                                        </Col> :\r\n                                                        (props.selectedRecord[`ssymbolname_${index}`].items.symbolType === 5 ?\r\n                                                            <Col md={2}>\r\n                                                                <FormInput\r\n                                                                    label={props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                                    name={`snumericinputtwo_${index}`}\r\n                                                                    type=\"text\"\r\n                                                                    required={false}\r\n                                                                    isMandatory={false}\r\n                                                                    value={props.selectedRecord[`snumericinputtwo_${index}`] ? props.selectedRecord[`snumericinputtwo_${index}`] : \"\"}\r\n                                                                    onChange={(event) => props.onInputChange(event, 2)}\r\n                                                                    maxLength={10}\r\n                                                                />\r\n                                                            </Col>\r\n                                                            : <></>\r\n                                                        )\r\n                                                }\r\n                                            </>\r\n                                            : <></>\r\n                                    }\r\n                                </Row>\r\n                            </BuilderBorder>\r\n                        </>\r\n                        : <></>}\r\n                </>);\r\n\r\n        });\r\n\r\n        return design;\r\n    }\r\n    function createRules(items, groupIndex) {\r\n        let design = [];\r\n        [...Array(items)].map((data, index) => {\r\n            let stringOperators = stringOperatorData;\r\n            design.push(\r\n                <>\r\n                    <Row className=\"mt-3\">\r\n\r\n                        <DeleteRule marginLeft={1} onClick={() => props.deleteRule(groupIndex, index)}>\r\n                            <FontAwesomeIcon icon={faTrashAlt} color=\"red\" />\r\n                        </DeleteRule>\r\n                       \r\n                        <Col md={4}>\r\n                            <FormSelectSearch\r\n                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                isSearchable={true}\r\n                                name={\"columnname\"}\r\n                                showOption={true}\r\n                                options={props.viewColumnListByRule || []}\r\n                                optionId='columnname'\r\n                                optionValue='displayname'\r\n                                value={props.selectedRecord[\"groupList\"][groupIndex][index]&&props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"] || \"\"}\r\n                                onChange={value => props.onRuleChange(value, \"columnname\", groupIndex, index,props.viewMasterListByRule)}\r\n                            ></FormSelectSearch>\r\n                        </Col>\r\n       \r\n                        {props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.columntype === ColumnType.TEXTINPUT ?\r\n                            <>\r\n                                <Col md={2}>\r\n                                    <FormSelectSearch\r\n                                        formGroupClassName=\"remove-floating-label-margin\"\r\n                                        formLabel=\"\"\r\n                                        isSearchable={true}\r\n                                        name={\"ssymbolname\"}\r\n                                        placeholder=\"Select..\"\r\n                                        showOption={true}\r\n                                        options={stringOperators}\r\n                                        optionId='nvalidationcode'\r\n                                        optionValue='ssymbolname'\r\n                                        value={props.selectedRecord[\"groupList\"][groupIndex][index]&&props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] || \"\"}\r\n                                        onChange={value => props.onSymbolChange(value, \"ssymbolname\", groupIndex, index)}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>\r\n                                {props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"]\r\n                                    && props.selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items.isInputVisible ?\r\n                                    <>\r\n                                        {props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata ?\r\n\r\n                                            <Col md={4}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    isSearchable={true}\r\n                                                    name={`${props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}`}\r\n                                                    showOption={true}\r\n                                                    options={props.viewMasterListByRule&&props.viewMasterListByRule[groupIndex]&&props.viewMasterListByRule[groupIndex][index] || []}\r\n                                                    optionId={props.selectedRecord[\"groupList\"][groupIndex][index]&&props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}\r\n                                                    optionValue={props.selectedRecord[\"groupList\"][groupIndex][index]&&props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.displaymember}\r\n                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index]&&props.selectedRecord[\"groupList\"][groupIndex][index][`${props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}`] || \"\"}\r\n                                                    isMulti={props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.ismulti}\r\n                                                    onChange={value => props.onMasterDataChange(value, `${props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember}`, groupIndex, index)}\r\n                                                ></FormSelectSearch>\r\n                                            </Col> :\r\n                                            <Col md={4}>\r\n                                                <FormInput\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    name={`sinputname`}\r\n                                                    type=\"text\"\r\n                                                    onChange={(event) => props.onInputChange(event, 3, groupIndex, index)}\r\n                                                    value={props.selectedRecord[\"groupList\"]&&props.selectedRecord[\"groupList\"][groupIndex]&&props.selectedRecord[\"groupList\"][groupIndex][index] ? props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"][\"sinputname\"] : \"\"}\r\n                                                    maxLength={100}\r\n                                                />\r\n                                            </Col>\r\n\r\n                                        }\r\n                                    </>\r\n                                    : <></>\r\n                                }\r\n\r\n                            </> : props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"] && props.selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.columntype === ColumnType.NUMERICINPUT ?\r\n                                <>\r\n                                    <Col md={2}>\r\n                                        <FormSelectSearch\r\n                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                            formLabel=\"\"\r\n                                            isSearchable={true}\r\n                                            name={\"ssymbolname\"}\r\n                                            placeholder=\"\"\r\n                                            showOption={true}\r\n                                            options={numericOperatorData}\r\n                                            optionId='nvalidationcode'\r\n                                            optionValue='ssymbolname'\r\n                                            value={props.selectedRecord[\"groupList\"][groupIndex][index]&&props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] || \"\"}\r\n                                            onChange={value => props.onSymbolChange(value, `ssymbolname`, groupIndex, index)}\r\n                                        >\r\n                                        </FormSelectSearch>\r\n                                    </Col>\r\n                                    {props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.isInputVisible === true ?\r\n                                        <>\r\n                                            <Col md={2}>\r\n                                                <FormInput\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    label={props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_FROM\" }) : \"\"}\r\n                                                    name={`snumericinput`}\r\n                                                    type=\"text\"\r\n                                                    required={false}\r\n                                                    isMandatory={false}\r\n                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinput`] ? props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinput`] : \"\"}\r\n                                                    onChange={(event) => props.onInputChange(event, 2, groupIndex, index)}\r\n                                                    maxLength={10}\r\n                                                />\r\n                                            </Col>\r\n                                            {props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ?\r\n                                                (\r\n                                                    <Col md={2}>\r\n                                                        <FormInput\r\n                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                            label={props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                            name={`snumericinputtwo`}\r\n                                                            type=\"text\"\r\n                                                            required={false}\r\n                                                            isMandatory={false}\r\n                                                            value={props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinputtwo`] ? props.selectedRecord[\"groupList\"][groupIndex][index][`snumericinputtwo`] : \"\"}\r\n                                                            onChange={(event) => props.onInputChange(event, 2, groupIndex, index)}\r\n                                                            maxLength={10}\r\n                                                        />\r\n                                                    </Col>\r\n                                                ) : <></>\r\n\r\n                                            }\r\n                                        </>\r\n                                        : <></>\r\n                                    }\r\n\r\n                                </> : props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`]\r\n                                    && props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.COMBO ?\r\n                                    <>\r\n                                        <Col md={2}>\r\n                                            <FormSelectSearch\r\n                                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                                formLabel=\"\"\r\n                                                isSearchable={true}\r\n                                                name={`ssymbolname`}\r\n                                                placeholder=\"\"\r\n                                                showOption={true}\r\n                                                options={conditionalOperatorData}\r\n                                                optionId='nvalidationcode'\r\n                                                optionValue='ssymbolname'\r\n                                                value={props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] || \"\"}\r\n                                                onChange={value => props.onSymbolChange(value, `ssymbolname`, groupIndex, index)}\r\n                                            >\r\n                                            </FormSelectSearch>\r\n                                        </Col>\r\n                                        {props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.isInputVisible === true ?\r\n                                            <Col md={4}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    formLabel=\"\"\r\n                                                    isSearchable={true}\r\n                                                    name={`${props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}`}\r\n                                                    placeholder=\"\"\r\n                                                    showOption={true}\r\n                                                    options={props.viewMasterListByRule && props.viewMasterListByRule[groupIndex][index] || []}\r\n                                                    optionId={props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}\r\n                                                    optionValue='sdisplayname'\r\n                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index][`${props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}`] || \"\"}\r\n                                                    onChange={value => props.onMasterDataChange(value, `${props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.sforeigncolumnname}`, groupIndex, index)}\r\n                                                    isMulti={props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.ismulti}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                            </Col> : <></>\r\n                                        }\r\n                                    </> : props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`]\r\n                                        && (props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATATIME\r\n                                            || props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATE) ?\r\n                                        <>\r\n                                            <Col md={2}>\r\n                                                <FormSelectSearch\r\n                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                    formLabel=\"\"\r\n                                                    isSearchable={true}\r\n                                                    name={`ssymbolname`}\r\n                                                    placeholder=\"\"\r\n                                                    showOption={true}\r\n                                                    options={numericOperatorData}\r\n                                                    optionId='nvalidationcode'\r\n                                                    optionValue='ssymbolname'\r\n                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`] || \"\"}\r\n                                                    onChange={value => props.onSymbolChange(value, `ssymbolname`, groupIndex, index)}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                            </Col>\r\n                                            {props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`]\r\n                                                && props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.isInputVisible === true ?\r\n                                                <>\r\n                                                    <Col md={2}>\r\n                                                        <DateTimePicker\r\n                                                            formGroupClassName=\"remove-floating-label-margin\"\r\n                                                            label={props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ? props.intl.formatMessage({ id: \"IDS_FROM\" }) : \"\"}\r\n                                                            name={`dateinput`}\r\n                                                            className='form-control'\r\n                                                            placeholderText=\"Select date..\"\r\n                                                            selected={props.selectedRecord[\"groupList\"][groupIndex][index][`dateinput`]}\r\n                                                            // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\r\n                                                            // dateFormat={\"dd-MM-yyyy\"}\r\n                                                            isClearable={false}\r\n                                                            showTimeInput={props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATATIME ? true : false}\r\n                                                            onChange={date => props.handleFilterDateChange(`dateinput`, date, groupIndex, index)}\r\n                                                            value={props.selectedRecord[\"groupList\"][groupIndex][index][`dateinput`] || \"\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    {props.selectedRecord[\"groupList\"][groupIndex][index][`ssymbolname`].items.symbolType === 5 ?\r\n                                                        (\r\n                                                            <Col md={2}>\r\n                                                                <DateTimePicker\r\n                                                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                                                    label={props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                                                    name={`dateinputtwo`}\r\n                                                                    className='form-control'\r\n                                                                    placeholderText=\"Select date..\"\r\n                                                                    selected={props.selectedRecord[\"groupList\"][groupIndex][index][`dateinputtwo`]}\r\n                                                                    // dateFormat={\"dd-MM-yyyy\"}\r\n                                                                    // dateFormat={props.selectedRecord[`columnname_${index}`].items.columntype === ColumnType.DATATIME ? props.userInfo[\"ssitedatetime\"] : props.userInfo[\"ssitedate\"]}\r\n                                                                    isClearable={false}\r\n                                                                    showTimeInput={props.selectedRecord[\"groupList\"][groupIndex][index][`columnname`].items.columntype === ColumnType.DATATIME ? true : false}\r\n                                                                    onChange={date => props.handleFilterDateChange(`dateinputtwo`, date, groupIndex, index)}\r\n                                                                    value={props.selectedRecord[\"groupList\"][groupIndex][index][`dateinputtwo`] || \"\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        ) : <></>\r\n                                                    }\r\n                                                </>\r\n                                                : <></>\r\n                                            }\r\n                                        </>\r\n                                        : <></>\r\n                        }\r\n                    </Row>\r\n                </>\r\n            )\r\n        });\r\n        return design;\r\n    }\r\n    function createGroupRules() {\r\n        let indexCount = 0;\r\n        let design = [];\r\n        props.addGroupList.length > 0 && props.addGroupList.map((items, index) => {\r\n\r\n            let stringOperators = stringOperatorData;\r\n            if (props.selectedRecord[\"groupList\"] && props.selectedRecord[\"groupList\"][index][\"columnname\"]\r\n                && !props.selectedRecord[\"groupList\"][index][\"columnname\"].items.needmasterdata\r\n                && props.selectedRecord[\"groupList\"][index][\"columnname\"].items.columntype === ColumnType.TEXTINPUT) {\r\n                const temp = stringOperators.filter(item => {\r\n                    if (item.items.symbolType !== 6) {\r\n                        return item\r\n                    }\r\n                });\r\n                stringOperators = temp;\r\n            }\r\n\r\n            if (items > -1) {\r\n                indexCount = indexCount + 1;\r\n            };\r\n            design.push(\r\n                <>\r\n                    {items > -1 ?\r\n                        <>\r\n                            {items > 1 ?\r\n                                <Row>\r\n                                    <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_and\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={1}\r\n                                        onClick={() => props.onConditionClick(\"button_and\", index)}>\r\n                                        <span><FormattedMessage id=\"IDS_AND\" defaultMessage=\"And\" /></span>\r\n                                    </ContionalButton>\r\n                                    <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_or\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                                        onClick={() => props.onConditionClick(\"button_or\", index)}>\r\n                                        <span><FormattedMessage id=\"IDS_OR\" defaultMessage=\"Or\" /></span>\r\n                                    </ContionalButton>\r\n                                    <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_not\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                                        onClick={() => props.onConditionClick(\"button_not\", index)}>\r\n                                        <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"NOT\" /></span>\r\n                                    </ContionalButton>\r\n                                </Row>\r\n\r\n                                :\r\n                                <>\r\n                                    <Row>\r\n                                        <ContionalButton type=\"button\" className={props.selectedRecord[\"groupList\"][index][\"button_not\"] === true ? \"builder-btn-primary\" : \"\"} marginLeft={0}\r\n                                            onClick={() => props.onConditionClick(\"button_not\", index)}>\r\n                                            <span><FormattedMessage id=\"IDS_NOT\" defaultMessage=\"NOT\" /></span>\r\n                                        </ContionalButton>\r\n                                    </Row>\r\n                                </>\r\n                            }\r\n\r\n                            <BuilderBorder key={index}>\r\n                                <Row className=\"mt-3\">\r\n                                    {/* <CustomSwitch\r\n                                        label={props.intl.formatMessage({ id: \"IDS_NOT\" })}\r\n                                        name={\"notoperator\"}\r\n                                        type=\"switch\"\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        checked={props.selectedRecord[\"groupList\"][index][\"notoperator\"] === undefined ? false : props.selectedRecord[\"groupList\"][index][\"notoperator\"]}\r\n                                        onChange={(event) => props.onInputChange(event, 1)}\r\n                                    /> */}\r\n                                    <Col md={2}>\r\n                                        <Button onClick={() => props.addRule(\"views\", index)} className=\"mr-1\">\r\n                                            {'+'} <FormattedMessage id=\"IDS_ADDRULE\" defaultMessage=\"Add Rule\" />\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <>\r\n                                    {createRules(items, index)}\r\n                                </>\r\n\r\n                            </BuilderBorder>\r\n                        </> : <></>\r\n                    }\r\n\r\n\r\n                </>)\r\n        });\r\n\r\n        return design;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <FormInput\r\n                        formGroupClassName=\"remove-floating-label-margin\"\r\n                        label={\"Query Builder Name\"}\r\n                        name={`querybuildername`}\r\n                        type=\"text\"\r\n                        required={false}\r\n                        isMandatory={true}\r\n                        value={props.selectedRecord[\"querybuildername\"] || \"\"}\r\n                        onChange={(event) => props.onInputChange(event)}\r\n                    />\r\n                </Col>\r\n                {/* <Col md={4}>\r\n\r\n                    <FormSelectSearch\r\n                        formGroupClassName=\"remove-floating-label-margin\"\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_QUERYTYPE\" })}\r\n                        isSearchable={true}\r\n                        name={\"querytype\"}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_QUERYTYPE\" })}\r\n                        showOption={true}\r\n                        options={props.queryType || []}\r\n                        optionId='label'\r\n                        optionValue='value'\r\n                        value={props.selectedRecord[\"selectedQueryType\"] || { label: props.intl.formatMessage({ id: \"IDS_VIEWS\" }), value: \"views\" }}\r\n                        // onChange={value => props.onViewComboChange(value, \"sviewname\")}\r\n                        onChange={value => props.onQueryTypeOnclick(value)}\r\n                        closeMenuOnSelect={true}\r\n                    \r\n                    ></FormSelectSearch>\r\n                </Col> */}\r\n                <Col md={4}>\r\n                    {/* <Button onClick={() => props.clearRule()} className=\"mr-1\">\r\n                        <FormattedMessage id=\"IDS_CLEAR\" defaultMessage=\"Clear\" />\r\n                    </Button> */}\r\n                    <Button onClick={() => props.resetRule()}>\r\n                        <FormattedMessage id=\"IDS_RESET\" defaultMessage=\"Reset\" />\r\n                    </Button>\r\n\r\n                </Col>\r\n                <Col md={4}>\r\n                    {\r\n                        props.sqlQuery ?\r\n                            <>\r\n                                <Button onClick={() => props.addRule(\"sql\")} className=\"mr-1\">\r\n                                    {'+'} <FormattedMessage id=\"IDS_ADDRULE\" defaultMessage=\"Add Rule\" />\r\n                                </Button>\r\n                                <Button onClick={() => props.onGenerateQuery()}>\r\n                                    <FormattedMessage id=\"IDS_GENERATEQUERY\" defaultMessage=\"Generate Query\" />\r\n                                </Button>\r\n                            </> : <></>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n            {\r\n                props.sqlQuery === true ?\r\n                    <>\r\n                        <Row className=\"mt-3\">\r\n                            <Col md={12}>\r\n                                {props.addRuleList.length > 0 ? createSqlRules() : <></>}\r\n                            </Col>\r\n                            <Col md={12} >\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        {props.intl.formatMessage({ id: \"IDS_QUERY\" })}\r\n                                        <Button onClick={() => props.onExecuteRule()}>\r\n                                            <FormattedMessage id=\"IDS_EXECUTE\" defaultMessage=\"Execute\" />\r\n                                        </Button>\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                        {props.selectedRecord && props.selectedRecord[\"sdisplayquery\"] ? props.selectedRecord[\"sdisplayquery\"] : \"No Query\"}\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </> :\r\n                    <>\r\n                        <Row className=\"mt-4 mb-4\">\r\n                            <Col md={4}>\r\n                                <FormSelectSearch\r\n                                    formGroupClassName=\"remove-floating-label-margin\"\r\n                                    formLabel={props.intl.formatMessage({ id: \"IDS_VIEWS\" })}\r\n                                    isSearchable={true}\r\n                                    name={\"sviewname\"}\r\n                                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTVIEWS\" })}\r\n                                    showOption={true}\r\n                                    options={props.databaseviewList || []}\r\n                                    optionId='sviewname'\r\n                                    optionValue='displayname'\r\n                                    value={props.selectedRecord[\"sviewname\"] || \"\"}\r\n                                    onChange={value => props.onViewComboChange(value, \"sviewname\")}\r\n\r\n                                ></FormSelectSearch>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Button onClick={() => props.addGroup(\"views\")} className=\"mr-1\">\r\n                                    {'+'} <FormattedMessage id=\"IDS_ADDGROUP\" defaultMessage=\"Add Group\" />\r\n                                </Button>\r\n                            </Col>\r\n                            {/* <Col md={2}>\r\n                                <CustomSwitch\r\n                                    label={props.intl.formatMessage({ id: \"IDS_GROUPBY\" })}\r\n                                    name={\"groupby\"}\r\n                                    type=\"switch\"\r\n                                    isMandatory={false}\r\n                                    required={false}\r\n                                    checked={props.selectedRecord[\"groupby\"] === undefined ? false : props.selectedRecord[\"groupby\"]}\r\n                                    onChange={(event) => props.onInputChange(event, 1)}\r\n                                />\r\n                            </Col> */}\r\n                            <Col md={2}>\r\n                                {/* <Button onClick={() => props.addAggregate()} className=\"mr-1\">\r\n                                    {'+'} <FormattedMessage id=\"IDS_ADDGROUPBY\" defaultMessage=\"Add Groupby\" />\r\n                                </Button> */}\r\n\r\n                            </Col>\r\n                            {/* <Col md={2}>\r\n                                <CustomSwitch\r\n                                    label={props.intl.formatMessage({ id: \"IDS_CUSTOMORDERBY\" })}\r\n                                    name={\"customorderby\"}\r\n                                    type=\"switch\"\r\n                                    isMandatory={false}\r\n                                    required={false}\r\n                                    checked={props.selectedRecord[\"customorderby\"] === undefined ? false : props.selectedRecord[\"customorderby\"]}\r\n                                    onChange={(event) => props.onInputChange(event, 1)}\r\n                                />\r\n                            </Col> */}\r\n                            <Col md={2}>\r\n                                {/* <Button onClick={() => props.addOrderby()} className=\"mr-1\">\r\n                                    {'+'} <FormattedMessage id=\"IDS_ADDORDERBY\" defaultMessage=\"Add Orderby\" />\r\n                                </Button> */}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                {props.addGroupList.length > 0 ? createGroupRules() : <></>}\r\n                                {props.addAggregateList.length > 0 ? createAggregateFunctions() : <></>}\r\n                                {props.addOrderbyList.length > 0 ? createOrderbyFields() : <></>}\r\n                            </Col>\r\n                            <Col md={12} >\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        {props.intl.formatMessage({ id: \"IDS_QUERY\" })}\r\n                                        <div className=\"float-right\">\r\n\r\n                                            <Button onClick={() => props.copySQLQuery(2)} style={{ marginRight: \"0.5rem\" }} >\r\n                                                <FormattedMessage id=\"IDS_COPYSQL\" defaultMessage=\"Copy SQL\" />\r\n                                            </Button>\r\n\r\n                                            <Button onClick={() => props.onExecuteRule()} >\r\n                                                <FormattedMessage id=\"IDS_EXECUTE\" defaultMessage=\"Execute\" />\r\n                                            </Button>\r\n\r\n                                        </div>\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                        <Row>\r\n                                            <Col md={6}>\r\n                                                <FormMultiSelect\r\n                                                    name={\"filtercolumns\"}\r\n                                                    label={props.intl.formatMessage({ id: \"IDS_COLUMNS\" })}\r\n                                                    options={props.selectFields || []}\r\n                                                    optionId={\"value\"}\r\n                                                    optionValue={\"label\"}\r\n                                                    value={props.selectedRecord ? props.selectedRecord[\"filtercolumns\"] || [] : []}\r\n                                                    isMandatory={false}\r\n                                                    isClearable={true}\r\n                                                    disableSearch={false}\r\n                                                    disabled={false}\r\n                                                    closeMenuOnSelect={false}\r\n                                                    alphabeticalSort={true}\r\n                                                    onChange={(event) => props.onFilterComboChange(event, \"filtercolumns\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {props.selectedRecord && props.selectedRecord[\"sdisplayquery\"] ? props.selectedRecord[\"sdisplayquery\"] : props.intl.formatMessage({ id: \"IDS_NOQUERY\" })}\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                {props.data && props.gridColumnList && props.gridColumnList.length > 0 ?\r\n                                    <DataGrid\r\n                                        // primaryKeyField={\"npublicholidaycode\"}\r\n                                        data={props.data}\r\n                                        dataResult={props.dataResult}\r\n                                        dataState={props.dataState}\r\n                                        dataStateChange={props.dataStateChange}\r\n                                        extractedColumnList={props.gridColumnList}\r\n                                        controlMap={props.controlMap}\r\n                                        userRoleControlRights={props.userRoleControlRights}\r\n                                        // inputParam={props.inputParam}\r\n                                        userInfo={props.userInfo}\r\n                                        // methodUrl=\"PublicHolidays\"\r\n                                        // fetchRecord={props.getPublicHolidays}\r\n                                        // editParam={publicHolidaysEditParam}\r\n                                        // deleteRecord={props.deleteRecord}\r\n                                        // deleteParam={publicHolidaysDeleteParam}\r\n                                        pageable={true}\r\n                                        scrollable={\"scrollable\"}\r\n                                        // isComponent={true}\r\n                                        isActionRequired={false}\r\n                                        isToolBarRequired={true}\r\n                                        isRefreshRequired={false}\r\n                                        selectedId={-1}\r\n                                    />\r\n                                    : <></>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n            }\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(BuildQuery);"]},"metadata":{},"sourceType":"module"}