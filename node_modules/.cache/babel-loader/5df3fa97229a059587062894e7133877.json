{"ast":null,"code":"import rsapi from \"../rsapi\";\nimport { toast } from \"react-toastify\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport Axios from \"axios\";\nimport { initRequest, updateStore } from \"./LoginAction\";\nimport { transactionStatus } from \"../components/Enumeration\";\nimport { constructOptionList, showEsign } from \"../components/CommonScript\";\nimport { crudMaster } from './ServiceAction';\nimport { intl } from \"../components/App\";\nexport function getCommentsCombo(inputParam) {\n  return dispatch => {\n    if (inputParam.masterList && inputParam.masterList.length > 0) {\n      dispatch(initRequest(true));\n      let urlArray = [rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n        userinfo: inputParam.userInfo\n      })];\n\n      if (inputParam.operation === \"update\") {\n        urlArray.push(rsapi.post(\"/comments/getEdit\".concat(inputParam.methodUrl), {\n          userinfo: inputParam.userInfo,\n          selectedrecord: inputParam.editRow\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let sampleTestComments = response[0].data;\n        let selectedRecord = {};\n        const defaultLink = sampleTestComments.filter(item => item.ndefaultstatus === transactionStatus.YES);\n        const sampleTestCommentsMap = constructOptionList(sampleTestComments || [], \"nsampletestcommentcode\", \"ssampletestcommentname\", undefined, undefined, true);\n        sampleTestComments = sampleTestCommentsMap.get(\"OptionList\");\n        let editObject = {};\n\n        if (inputParam.operation === \"update\") {\n          editObject = response[1].data;\n          let nsamplecommentscode = {};\n          nsamplecommentscode = {\n            \"label\": editObject.ssampletestcommentname,\n            \"value\": editObject.nsampletestcommentcode\n          };\n          selectedRecord = { ...editObject,\n            nsamplecommentscode\n          };\n        } else {\n          selectedRecord = {\n            nsamplecommentscode: defaultLink.length > 0 ? {\n              \"label\": defaultLink[0].ssampletestcommentname,\n              \"value\": defaultLink[0].nsampletestcommentcode\n            } : \"\"\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            [inputParam.modalName]: true,\n            operation: inputParam.operation,\n            screenName: inputParam.screenName,\n            ncontrolCode: inputParam.ncontrolCode,\n            selectedRecord,\n            loading: false,\n            sampleTestComments,\n            modalType: 'comment',\n            modalName: [inputParam.modalName],\n            editObject\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: inputParam.masterAlertStatus\n      }));\n    }\n  };\n}\nexport function deleteComment(deleteParam) {\n  return dispatch => {\n    const methodUrl = deleteParam.methodUrl;\n    const selected = deleteParam.selectedRecord;\n    const inputParam = {\n      inputData: {\n        [methodUrl.toLowerCase()]: selected,\n        npreregno: deleteParam.npreregno,\n        ntransactiontestcode: deleteParam.ntransactiontestcode,\n        ntransactionsamplecode: deleteParam.ntransactionsamplecode,\n        userinfo: deleteParam.userInfo\n      },\n      classUrl: \"comments\",\n      operation: 'delete',\n      methodUrl: methodUrl,\n      screenName: deleteParam.screenName\n    };\n    const masterData = deleteParam.masterData;\n\n    if (showEsign(deleteParam.esignRights, deleteParam.userInfo.nformcode, deleteParam.ncontrolCode)) {\n      // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         loadEsign: true,\n      //         screenData: { inputParam, masterData },\n      //         openCommentModal: true,\n      //         screenName: deleteParam.screenName,\n      //         operation: 'delete',\n      //         selectedRecord: {}\n      //     }\n      // });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          openCommentModal: true,\n          screenName: deleteParam.screenName,\n          operation: 'delete',\n          selectedRecord: {}\n        }\n      };\n      dispatch(updateStore(updateInfo));\n    } else {\n      dispatch(crudMaster(inputParam, masterData, \"openCommentModal\", {}));\n    }\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/CommentsAction.js"],"names":["rsapi","toast","DEFAULT_RETURN","Axios","initRequest","updateStore","transactionStatus","constructOptionList","showEsign","crudMaster","intl","getCommentsCombo","inputParam","dispatch","masterList","length","urlArray","post","userinfo","userInfo","operation","push","concat","methodUrl","selectedrecord","editRow","all","then","response","sampleTestComments","data","selectedRecord","defaultLink","filter","item","ndefaultstatus","YES","sampleTestCommentsMap","undefined","get","editObject","nsamplecommentscode","ssampletestcommentname","nsampletestcommentcode","type","payload","modalName","screenName","ncontrolCode","loading","modalType","catch","error","status","message","warn","formatMessage","id","masterAlertStatus","deleteComment","deleteParam","selected","inputData","toLowerCase","npreregno","ntransactiontestcode","ntransactionsamplecode","classUrl","masterData","esignRights","nformcode","updateInfo","typeName","loadEsign","screenData","openCommentModal"],"mappings":"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","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport { initRequest, updateStore } from \"./LoginAction\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\nimport { constructOptionList, showEsign } from \"../components/CommonScript\";\r\nimport { crudMaster } from './ServiceAction'\r\nimport { intl } from \"../components/App\";\r\n\r\nexport function getCommentsCombo(inputParam) {\r\n    return (dispatch) => {\r\n        if (inputParam.masterList && inputParam.masterList.length > 0) {\r\n            dispatch(initRequest(true));\r\n            let urlArray = [rsapi.post(\"/sampletestcomments/getSampleTestComments\", { userinfo: inputParam.userInfo })];\r\n            if (inputParam.operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"/comments/getEdit\".concat(inputParam.methodUrl), { userinfo: inputParam.userInfo, selectedrecord: inputParam.editRow }))\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let sampleTestComments = response[0].data;\r\n                    let selectedRecord = {};\r\n                    const defaultLink = sampleTestComments.filter(item => item.ndefaultstatus === transactionStatus.YES);\r\n                    const sampleTestCommentsMap  = constructOptionList(sampleTestComments || [], \"nsampletestcommentcode\",\"ssampletestcommentname\" , undefined, undefined, true);\r\n                    sampleTestComments = sampleTestCommentsMap.get(\"OptionList\");\r\n                    let editObject = {};\r\n                    if (inputParam.operation === \"update\") {\r\n                        editObject = response[1].data;\r\n                        let nsamplecommentscode = {};\r\n                        nsamplecommentscode = { \"label\": editObject.ssampletestcommentname, \"value\": editObject.nsampletestcommentcode }\r\n                        selectedRecord = {\r\n                            ...editObject, nsamplecommentscode\r\n                        };\r\n                    } else {\r\n                        selectedRecord = {\r\n                            nsamplecommentscode: defaultLink.length > 0 ? { \"label\": defaultLink[0].ssampletestcommentname, \"value\": defaultLink[0].nsampletestcommentcode } : \"\",\r\n\r\n                        };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            [inputParam.modalName]: true,\r\n                            operation: inputParam.operation,\r\n                            screenName: inputParam.screenName,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            selectedRecord, loading: false,\r\n                            sampleTestComments,\r\n                            modalType: 'comment',\r\n                            modalName: [inputParam.modalName],\r\n                            editObject\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: inputParam.masterAlertStatus }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function deleteComment(deleteParam) {\r\n    return (dispatch) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                npreregno: deleteParam.npreregno,\r\n                ntransactiontestcode: deleteParam.ntransactiontestcode,\r\n                ntransactionsamplecode: deleteParam.ntransactionsamplecode,\r\n                userinfo: deleteParam.userInfo\r\n            },\r\n            classUrl: \"comments\",\r\n            operation: 'delete',\r\n            methodUrl: methodUrl,\r\n            screenName: deleteParam.screenName\r\n        }\r\n        const masterData = deleteParam.masterData;\r\n        if (showEsign(deleteParam.esignRights, deleteParam.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            // dispatch({\r\n            //     type: DEFAULT_RETURN,\r\n            //     payload: {\r\n            //         loadEsign: true,\r\n            //         screenData: { inputParam, masterData },\r\n            //         openCommentModal: true,\r\n            //         screenName: deleteParam.screenName,\r\n            //         operation: 'delete',\r\n            //         selectedRecord: {}\r\n            //     }\r\n            // });\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {   \r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openCommentModal: true,\r\n                    screenName: deleteParam.screenName,\r\n                    operation: 'delete',\r\n                    selectedRecord: {}}\r\n            }\r\n            dispatch(updateStore(updateInfo));\r\n        } else {\r\n            dispatch(crudMaster(inputParam, masterData, \"openCommentModal\", {}));\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}