{"ast":null,"code":"import rsapi from '../rsapi';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, fillRecordBasedOnCheckBoxSelection, updatedObjectWithNewElement, getRecordBasedOnPrimaryKeyName, reArrangeArrays, filterRecordBasedOnPrimaryKeyName, rearrangeDateFormat, getSameRecordFromTwoArrays, sortDataByParent, constructOptionList, parentChildComboLoad, constructjsonOptionList, childComboLoadForEdit, constructjsonOptionDefault, replaceUpdatedObject } from '../components/CommonScript';\nimport { transactionStatus, checkBoxOperation, SampleType } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { intl } from '../components/App'; // ALPD-4914 created SchedulerConfigurationAction.js file for scheduler configuration screen\n\nexport function onSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/schedulerconfiguration/getRegistrationType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/schedulerconfiguration/getRegistrationSubType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function onRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/schedulerconfiguration/getApprovalConfigVersion\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function changeApprovalConfigVersionChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/schedulerconfiguration/getApproveConfigVersionRegTemplate\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getSchedulerConfigSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      } //sortData(masterData);\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab,\n          regSampleExisted: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function insertSchedulerConfig(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/createSchedulerConfigWithFile\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/createSchedulerConfig\", inputParam.inputData);\n    }\n\n    return requestUrl.then(response => {\n      if (response.data.rtn === \"Success\") {\n        let SchedulerConfigGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.SchedulerConfigGetSample, 'SchedulerConfigSample');\n        let selectedSample = response.data[\"selectedSample\"];\n        let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\n        let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\n        let selectedSubSample = SchedulerConfigGetSubSample;\n        SchedulerConfigGetTest = sortData(SchedulerConfigGetTest, \"nschedulersamplecode\", \"desc\");\n        let selectedTest = SchedulerConfigGetTest.length > 0 ? [SchedulerConfigGetTest[0]] : [];\n        let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\n\n        if (inputParam.inputData.nneedsubsample) {\n          SchedulerConfigGetSubSample = sortData(response.data[\"SchedulerConfigGetSubSample\"], 'nschedulersamplecode', 'desc');\n          selectedSubSample = SchedulerConfigGetSubSample.length > 0 ? [SchedulerConfigGetSubSample[0]] : [];\n          SchedulerConfigGetTest = SchedulerConfigGetTest.filter(x => x.nschedulersubsamplecode === selectedSubSample[0].nschedulersubsamplecode);\n          selectedTest = SchedulerConfigGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n        }\n\n        if (inputParam.multipleselectionFlag) {\n          selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n          updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.SchedulerConfigGetSubSample);\n          updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.SchedulerConfigGetTest);\n          SchedulerConfigGetSubSample = masterData.SchedulerConfigGetSubSample;\n          SchedulerConfigGetTest = masterData.SchedulerConfigGetTest;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedSample,\n          selectedSubSample,\n          selectedTest,\n          SchedulerConfigGetSubSample,\n          SchedulerConfigGetTest,\n          SchedulerConfigGetSample\n        };\n\n        if (masterData[\"kendoFilterList\"] !== undefined) {\n          masterData[\"kendoFilterList\"] = undefined;\n        }\n\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined,\n          openPortal: false,\n          selectedSpec: {},\n          selectComponent: {},\n          SelectedTest: {},\n          selectedComponent: {},\n          Component: [],\n          selectedRecord: {},\n          SelectedTest: [],\n          Test: [],\n          selectedComponent: {},\n          subSampleDataGridList: [],\n          preregConfirmMessage: undefined,\n          regSampleExisted,\n          loadImportFileData: false,\n          loadImportSampleCountData: false,\n          skip: 0,\n          subsampleskip: 0,\n          testskip: 0,\n          isDynamicViewSlideOut: false\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        inputParam.postParamList[1]['clearFilter'] = 'yes';\n        inputParam.postParamList[2]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            preregConfirmMessage: undefined\n          }\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            preregConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              preregConfirmMessage: error.response.data.rtn,\n              preregConfirmParam: {\n                inputParam,\n                masterData\n              },\n              loading: false,\n              showSample: undefined\n            }\n          });\n        } else {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              preregConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport function getSchedulerConfigSubSampleDetail(inputData, isServiceRequired, isParentValue) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      // activeTestTab: inputData.activeTestTab,\n      //  activeSampleTab: inputData.activeTestTab,\n      //  activeSubSampleTab: inputData.activeTestTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      nschedulersamplecode: inputData.nschedulersamplecode,\n      ntype: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 7 ? 4 : undefined : 2,\n      //ALPD-497\n      ntype: inputData.nneedsubsample === true ? inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL ? checkBoxOperation.SINGLEDESELECT : undefined : checkBoxOperation.DESELECT,\n      //ALPD-497\n      checkBoxOperation: inputData.nneedsubsample === true ? inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS ? checkBoxOperation.SINGLESELECT : inputData.checkBoxOperation : inputData.checkBoxOperation,\n      // OrderCodeData: inputData.selectedSample ? inputData.selectedSample.length > 0 && inputData.selectedSample.map(item => item.hasOwnProperty(\"OrderCodeData\") ? item.OrderCodeData : -1).join(\",\") : null,\n      selectednschedulersamplecode: inputData.selectedSample && inputData.selectedSample.length > 0 ? inputData.selectedSample.map(item => item.nschedulersamplecode).join(\",\") : null,\n      selectedTransactionSamplecode: inputData.selectedSample && inputData.selectedSample.length > 1 && inputData.masterData.selectedSubSample ? inputData.masterData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\") : null //  noutsourcerequired: inputData.masterData && inputData.masterData.RealSampleTypeValue ? inputData.masterData.RealSampleTypeValue.noutsourcerequired : transactionStatus.NA\n\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"schedulerconfiguration/getSchedulerConfigSubSample\", inputParamData).then(response => {\n        sortData(response.data, \"descending\", \"nschedulersamplecode\"); // if(isParentValue){\n\n        response.data['SchedulerConfigGetSubSample'] = sortDataByParent(response.data['SchedulerConfigGetSubSample'], inputData.sample, \"nschedulersamplecode\"); //response.data['SchedulerConfigGetTest']= sortDataByParent(response.data['SchedulerConfigGetTest'],response.data['SchedulerConfigGetSubSample'], \"ntransactionsamplecode\");\n        //  }\n\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedTest || []; //   let externalOrderAttachmentList = response.data && response.data.ExternalOrderAttachmentList;\n        //    let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.nschedulersamplecode,\n            selectedSubSample: inputData.masterData.SchedulerConfigGetSubSample.length > 0 ? [inputData.masterData.SchedulerConfigGetSubSample[0]] : [],\n            activeTabIndex: inputData.activeTabIndex\n          }; // let RegistrationTestComment = [];\n          //     let RegistrationTestAttachment = [];\n          //   let RegistrationParameter = [];\n          //   let RegistrationComment = [];\n          //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \n          //if (inputData.checkBoxOperation === 1) {\n\n          if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n            const wholeSubSampleList = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode); // START ALPD-3625 VISHAKH\n            // oldSelectedSubSample.forEach((subsample, index) => {\n            //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n            //         oldSelectedSubSample.splice(index, 1)\n            //     }\n            // })\n\n            oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSampleList.includes(item.nschedulersubsamplecode)); // END ALPD-3625 VISHAKH\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.selectedSubSample, 'nschedulersamplecode');\n            masterData = { ...masterData,\n              selectedTest\n            };\n          } //  if (inputData.checkBoxOperation === 7) {\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n            /*      switch (inputData.activeTestTab) {\r\n                      case \"IDS_TESTCOMMENTS\":\r\n                          let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                          let RegistrationTestComment1 = [];\r\n                          if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                              RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                          }\r\n                          let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                          RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                          activeName = \"RegistrationTestComment\"\r\n                          dataStateName = \"testCommentDataState\"\r\n                          break;\r\n                      case \"IDS_TESTATTACHMENTS\":\r\n                          {\r\n                              let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                              let RegistrationTestAttachment1 = [];\r\n                              if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                              }\r\n                              let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                              activeName = \"RegistrationTestAttachment\"\r\n                              dataStateName = \"testCommentDataState\"\r\n                          }\r\n                          break;\r\n                      case \"IDS_PARAMETERRESULTS\":\r\n                          let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                          let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                          let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                          RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                          activeName = \"RegistrationParameter\"\r\n                          dataStateName = \"resultDataState\"\r\n                          break;\r\n                      default:\r\n                          let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                          let RegistrationTestComment2 = [];\r\n                          if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                              RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                          }\r\n                          let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                          RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                          activeName = \"RegistrationParameter\"\r\n                          dataStateName = \"resultDataState\"\r\n                          break;\r\n                  }\r\n                  masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                  masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                  masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                  masterData[\"RegistrationComment\"] = RegistrationComment;*/\n          } //if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            masterData = { ...masterData,\n              selectedTest: masterData.SchedulerConfigGetTest.length > 0 ? [masterData.SchedulerConfigGetTest[0]] : []\n            };\n            /*  switch (inputData.activeTestTab) {\r\n                  case \"IDS_TESTCOMMENTS\":\r\n                      let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                      let RegistrationTestComment1 = [];\r\n                      if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                          RegistrationTestComment1 = [\r\n                              // ...inputData.masterData.RegistrationTestComment, \r\n                              ...ResponseData];\r\n                      }\r\n                      let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                      RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                      activeName = \"RegistrationTestComment\"\r\n                      dataStateName = \"testCommentDataState\"\r\n                      break;\r\n                  case \"IDS_TESTATTACHMENTS\":\r\n                      {\r\n                          let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                          let RegistrationTestAttachment1 = [];\r\n                          if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                              RegistrationTestAttachment1 = [\r\n                                  // ...inputData.masterData.RegistrationTestAttachment, \r\n                                  ...ResponseData];\r\n                          }\r\n                          let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                          RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                          activeName = \"RegistrationTestAttachment\"\r\n                          dataStateName = \"testCommentDataState\"\r\n                      }\r\n                      break;\r\n                  case \"IDS_PARAMETERRESULTS\":\r\n                      let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                      let RegistrationParameter1 = [\r\n                          // ...inputData.masterData.RegistrationParameter, \r\n                          ...resultResponseData];\r\n                      let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                      RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                      activeName = \"RegistrationParameter\"\r\n                      dataStateName = \"resultDataState\"\r\n                      break;\r\n                  case \"IDS_SAMPLECOMMENTS\":\r\n                      RegistrationComment = response.data.RegistrationComment ?\r\n                          [...response.data.RegistrationComment] : [];\r\n                      activeName = \"RegistrationComment\"\r\n                      dataStateName = \"sampleCommentsDataState\"\r\n                      break;\r\n                  default:\r\n                      let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                      let RegistrationTestComment2 = [];\r\n                      if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                          RegistrationTestComment2 = [\r\n                              // ...inputData.masterData.RegistrationTestComment, \r\n                              ...ResponseData1];\r\n                      }\r\n                      let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                      RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                      activeName = \"RegistrationParameter\"\r\n                      dataStateName = \"resultDataState\"\r\n                      break;\r\n              }\r\n              masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n              masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n              masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n              masterData[\"RegistrationComment\"] = RegistrationComment;*/\n          } // masterData['ExternalOrderAttachmentList'] = externalOrderAttachmentList;\n          // masterData['OutsourceDetailsList'] = outsourceDetailsList;\n\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData; // let bool = false;\n          // Commented bool value because no need to check bool condition to update skipInfo value.\n          // if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\n\n          testskip = 0;\n          subsampleskip = 0; // bool = true\n          // }\n          // if (bool) {\n\n          skipInfo = {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          }; // }\n        } else {\n          //let oldSelectedTest = inputData.masterData.selectedTest\n          //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectednschedulersamplecode: inputData.nschedulersamplecode,\n            selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.SchedulerConfigGetSubSample\n          }; // let RegistrationTestComment = [];\n          // let RegistrationParameter = [];\n          // let RegistrationTestAttachment = [];\n          // let RegistrationComment = [];\n          //if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\n\n          if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL || inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n            const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode); // START ALPD-3625 VISHAKH\n            // oldSelectedTest.forEach((test, index) => {\n            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            //         oldSelectedTest.splice(index, 1)\n            //     }\n            // })\n\n            oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.nschedulertestcode)); // START ALPD-3625 VISHAKH\n\n            let keepOld = false;\n            let nschedulertestcode;\n            let nschedulersamplecode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"\";\n              nschedulersamplecode = inputData.masterData.SchedulerConfigGetSample.length > 0 ? inputData.masterData.SchedulerConfigGetSample[0].nschedulersamplecode : \"\";\n            }\n            /* switch (inputData.activeTestTab) {\r\n                 case \"IDS_PARAMETERRESULTS\":\r\n                     RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                         inputData.masterData.RegistrationParameter : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationParameter\"\r\n                     dataStateName = \"resultDataState\"\r\n                     break;\r\n                 case \"IDS_TESTATTACHMENTS\":\r\n                     {\r\n                         RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                             inputData.masterData.RegistrationTestAttachment : [] :\r\n                             getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                         activeName = \"RegistrationTestAttachment\"\r\n                         dataStateName = \"testCommentDataState\"\r\n                       }\r\n                     break;\r\n                 case \"IDS_TESTCOMMENTS\":\r\n                     RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                         inputData.masterData.RegistrationTestComment : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationTestComment\"\r\n                     dataStateName = \"testCommentDataState\"\r\n                     break;\r\n                 case \"IDS_SAMPLECOMMENTS\":\r\n                     RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                         inputData.masterData.RegistrationComment : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                     activeName = \"RegistrationComment\"\r\n                     dataStateName = \"sampleCommentsDataState\"\r\n                     break;\r\n                 default:\r\n                     RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                         inputData.masterData.RegistrationParameter : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationParameter\"\r\n                     dataStateName = \"resultDataState\"\r\n                     break;\r\n             }*/\n\n          } //else if (inputData.checkBoxOperation === 5) {\n          else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            /*   switch (inputData.activeTestTab) {\r\n                   case \"IDS_TESTCOMMENTS\":\r\n                       let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                       let RegistrationTestComment1 = [];\r\n                       if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                           RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                       }\r\n                       let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                       RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                       activeName = \"RegistrationTestComment\"\r\n                       dataStateName = \"testCommentDataState\"\r\n                       break;\r\n                   case \"IDS_TESTATTACHMENTS\":\r\n                       {\r\n                           let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                           let RegistrationTestAttachment1 = [];\r\n                           if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                               RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                           }\r\n                           let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                           RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                           activeName = \"RegistrationTestAttachment\"\r\n                           dataStateName = \"testCommentDataState\"\r\n                         }\r\n                       break;\r\n                   case \"IDS_PARAMETERRESULTS\":\r\n                       let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                       let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                       let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                       RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                       activeName = \"RegistrationParameter\"\r\n                       dataStateName = \"resultDataState\"\r\n                       break;\r\n                   case \"IDS_SAMPLECOMMENTS\":\r\n                       RegistrationComment = response.data.RegistrationComment ?\r\n                           [...response.data.RegistrationComment] : [];\r\n                       activeName = \"RegistrationComment\"\r\n                       dataStateName = \"sampleCommentsDataState\"\r\n                       break;\r\n                   default:\r\n                       let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                       let RegistrationTestComment2 = [];\r\n                       if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                           RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                       }\r\n                       let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                       RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                       activeName = \"RegistrationParameter\"\r\n                       dataStateName = \"resultDataState\"\r\n                       break;\r\n               }*/\n            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n          } else {\n            /*switch (inputData.activeTestTab) {\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                        [...response.data.RegistrationTestComment] : [];\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    {\r\n                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                            [...response.data.RegistrationTestAttachment] : [];\r\n                        activeName = \"RegistrationTestAttachment\"\r\n                        dataStateName = \"testCommentDataState\"\r\n                      }\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                        [...response.data.RegistrationParameter] : [];\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    RegistrationComment = response.data.RegistrationComment ?\r\n                        [...response.data.RegistrationComment] : [];\r\n                    activeName = \"RegistrationComment\"\r\n                    dataStateName = \"sampleCommentsDataState\"\r\n                    break;\r\n                default:\r\n                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                        [...response.data.RegistrationParameter] : [];\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }*/\n          }\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        } // let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } // Start of ALPD-4130 on Save Additional Filter - ATE-241\n\n\n        let multifilterInfo = {};\n\n        if (inputData.multiFilterLoad !== undefined) {\n          if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n            inputData.searchSampleRef.current.value = \"\";\n          }\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n          }\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n          }\n\n          multifilterInfo = {\n            multiFilterLoad: inputData.multiFilterLoad,\n            openModal: inputData.openModal,\n            searchSampleRef: inputData.searchSampleRef,\n            searchSubSampleRef: inputData.searchSubSampleRef,\n            searchTestRef: inputData.searchTestRef,\n            testskip: inputData.testskip,\n            subsampleskip: inputData.subsampleskip,\n            skip: inputData.skip // filterColumnActive:true\n\n          };\n        } //  End of ALPD-4130 ATE-241\n\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex,\n            // ALPD-4130 Additional Filter Info ATE-241\n            ...multifilterInfo // inputParam:inputData\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample; // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n      let isGrandChildGetRequired = false;\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\n      }\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let selectedSample = inputData.selectedSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\n        let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [];\n        let nschedulertestcode = selectedTest.length > 0 ? selectedTest.map(x => x.nschedulertestcode).join(\",\") : \"-1\";\n        let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n          selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.SchedulerConfigGetSubSample[0]];\n\n          if (inputData.masterData.SchedulerConfigGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        } // START ALPD-3671 VISHAKH\n\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } // END ALPD-3671 VISHAKH\n\n\n        if (inputData.masterData.SchedulerConfigGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        } // inputData = {\n        //     ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\n        //     selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\n        // }\n\n\n        inputData = { ...inputData,\n          nschedulertestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          skipInfo,\n          masterData\n        };\n\n        if (subSample) {\n          if (selectedTest.length === 0) {\n            inputData[\"nschedulersamplecode\"] = selectedSubSample.map(x => x.nschedulersamplecode).join(\",\");\n            inputData[\"nschedulersubsamplecode\"] = selectedSubSample.map(x => x.nschedulersubsamplecode).join(\",\"); // inputData[\"checkBoxOperation\"] = 3\n\n            inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n            inputData[\"childTabsKey\"] = [\"SchedulerConfigGetTest\"];\n            dispatch(getSchedulerTestDetail(inputData, true));\n          } else {//dispatch(getTestChildTabDetailRegistration(inputData, true));\n          }\n        } else {//  dispatch(getTestChildTabDetailRegistration(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.nschedulersamplecode,\n          selectedTest: TestSelected ? TestSelected : inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.SchedulerConfigGetSubSample\n        }; // START ALPD-3671 VISHAKH\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } // END ALPD-3671 VISHAKH\n\n\n        let subsamplecheck = true;\n\n        if (subSample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode); // START ALPD-3625 VISHAKH\n              // oldSelectedSubSample.forEach((test, index) => {\n              //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n              //         oldSelectedSubSample.splice(index, 1)\n              //     }\n              //     return null;\n              // })\n\n              oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSample.includes(item.nschedulersubsamplecode)); // END ALPD-3625 VISHAKH\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.SchedulerConfigGetSubSample[0]];\n                masterData = { ...masterData,\n                  selectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"nschedulersamplecode\"] = selectedSubSample1.map(x => x.nschedulersamplecode).join(\",\");\n                inputData[\"nschedulersubsamplecode\"] = selectedSubSample1.map(x => x.nschedulersubsamplecode).join(\",\"); // inputData[\"checkBoxOperation\"] = 3\n\n                inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n                inputData[\"childTabsKey\"] = [\"SchedulerConfigGetTest\"];\n                subsamplecheck = false; //  dispatch(getRegistrationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode); // START ALPD-3625 VISHAKH\n            // oldSelectedSubSample.forEach((test, index) => {\n            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n            //         oldSelectedSubSample.splice(index, 1)\n            //     }\n            //     return null;\n            // })\n\n            oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubSample.includes(item.nschedulersubsamplecode)); // END ALPD-3625 VISHAKH\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              selectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.SchedulerConfigGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode); // START ALPD-3625 VISHAKH\n        // oldSelectedTest.forEach((test, index) => {\n        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.nschedulertestcode)); // END ALPD-3625 VISHAKH\n\n        let keepOld = false;\n        let nschedulertestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"-1\";\n        } // masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nschedulertestcode, \"nschedulertestcode\")\n        //  masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nschedulertestcode, \"nschedulertestcode\")\n\n\n        let skipInfo = {};\n\n        if (inputData.masterData.SchedulerConfigGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo // activeTabIndex: inputData.activeTabIndex\n\n          }\n        });\n      }\n    }\n  };\n}\nexport function getSchedulerTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      nschedulersubsamplecode: inputData.nschedulersubsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample,\n      selectedTransactionsamplecode: inputData.selectedSubSample && inputData.selectedSubSample.length > 0 && inputData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\"),\n      noutsourcerequired: inputData.masterData && inputData.masterData.RealSampleTypeValue ? inputData.masterData.RealSampleTypeValue.noutsourcerequired : transactionStatus.NA\n    };\n    const subSample = inputData.nneedsubsample;\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"schedulerconfiguration/getSchedulerConfigTest\", inputParamData).then(response => {\n        //sortData(response.data);\n        //ALPD-1609\n        sortData(response.data, 'descending', 'nschedulersamplecode');\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n        let oldSelectedSubSample = inputData.masterData.selectedSubSample || []; // let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\n\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.nschedulersubsamplecode,\n          selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n        // let RegistrationTestComment = [];\n        // let RegistrationTestAttachment = [];\n        // let RegistrationParameter = [];\n        // let RegistrationSampleComment = [];\n        // let RegistrationSampleAttachment = [];\n        //if (inputData.checkBoxOperation === 1) {\n\n        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n          const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode); // START ALPD-3625 VISHAKH\n          // oldSelectedTest.forEach((test, index) => {\n          //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n          //         oldSelectedTest.splice(index, 1)\n          //     }\n          // })\n\n          oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.nschedulertestcode)); // END ALPD-3625 VISHAKH\n\n          let keepOld = false;\n          let nschedulertestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"\";\n          }\n          /*   switch (inputData.activeTestTab) {\r\n                 case \"IDS_PARAMETERRESULTS\":\r\n                     RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                         inputData.masterData.RegistrationParameter : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationParameter\"\r\n                     dataStateName = \"resultDataState\"\r\n                     break;\r\n                 case \"IDS_TESTCOMMENTS\":\r\n                     RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                         inputData.masterData.RegistrationTestComment : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationTestComment\"\r\n                     dataStateName = \"testCommentDataState\"\r\n                     break;\r\n                 case \"IDS_TESTATTACHMENTS\":\r\n                     RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                         inputData.masterData.RegistrationTestAttachment : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationTestAttachment\"\r\n                     dataStateName = \"testCommentDataState\"\r\n                     break;\r\n                 default:\r\n                     RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                         inputData.masterData.RegistrationParameter : [] :\r\n                         getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                     activeName = \"RegistrationParameter\"\r\n                     dataStateName = \"resultDataState\"\r\n                     break;\r\n             }\r\n          */\n\n        } // else if (inputData.checkBoxOperation === 5) {\n        else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n          /*switch (inputData.activeTestTab) {\r\n              case \"IDS_TESTCOMMENTS\":\r\n                  let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                  let RegistrationTestComment1 = [];\r\n                  if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                      RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                  }\r\n                  let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                  RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                  activeName = \"RegistrationTestComment\"\r\n                  dataStateName = \"testCommentDataState\"\r\n                  break;\r\n              case \"IDS_TESTCOMMENTS\":\r\n                  {\r\n                      let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                      let RegistrationTestAttachment1 = [];\r\n                      if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                          RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                      }\r\n                      let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                      RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                      activeName = \"RegistrationTestAttachment\"\r\n                      dataStateName = \"testCommentDataState\"\r\n                  }\r\n                  break;\r\n              case \"IDS_PARAMETERRESULTS\":\r\n                  let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                  let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                  let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                  RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                  activeName = \"RegistrationParameter\"\r\n                  dataStateName = \"resultDataState\"\r\n                  break;\r\n              default:\r\n                  let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                  let RegistrationTestComment2 = [];\r\n                  if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                      RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                  }\r\n                  let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                  RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                  activeName = \"RegistrationParameter\"\r\n                  dataStateName = \"resultDataState\"\r\n                  break;\r\n          }*/\n          // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n        } // else if (inputData.checkBoxOperation === 7) {\n        else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n          let testList = reArrangeArrays(inputData.masterData.SchedulerConfigGetSubSample, response.data.SchedulerConfigGetTest, \"nschedulersubsamplecode\");\n          masterData = { ...masterData,\n            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\n            SchedulerConfigGetTest: testList ? testList.length > 0 ? testList : [] : [] //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n          /* switch (inputData.activeTestTab) {\r\n               case \"IDS_TESTCOMMENTS\":\r\n                   let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                   let RegistrationTestComment1 = [];\r\n                   if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                       RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                   }\r\n                   let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                   RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                   activeName = \"RegistrationTestComment\"\r\n                   dataStateName = \"testCommentDataState\"\r\n                   break;\r\n               case \"IDS_TESTCOMMENTS\":\r\n                   {\r\n                       let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                       let RegistrationTestAttachment1 = [];\r\n                       if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                           RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                       }\r\n                       let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                       RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                       activeName = \"RegistrationTestAttachment\"\r\n                       dataStateName = \"testCommentDataState\"\r\n                   }\r\n                   break;\r\n               case \"IDS_PARAMETERRESULTS\":\r\n                   let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                   // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                   let RegistrationParameter1 = [...resultResponseData];\r\n                   let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1 : -1\r\n                     RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                   activeName = \"RegistrationParameter\"\r\n                   dataStateName = \"resultDataState\"\r\n                   break;\r\n               default:\r\n                   let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                   let RegistrationTestComment2 = [];\r\n                   if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                       RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                   }\r\n                   let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                   RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                   activeName = \"RegistrationParameter\"\r\n                   dataStateName = \"resultDataState\"\r\n                   break;\r\n           }*/\n          // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n        } else {\n          /*  switch (inputData.activeTestTab) {\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                        [...response.data.RegistrationTestComment] : [];\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                        [...response.data.RegistrationTestAttachment] : [];\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                        [...response.data.RegistrationParameter] : [];\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                        [...response.data.RegistrationParameter] : [];\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }*/\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode); // START ALPD-3625 VISHAKH\n          // oldSelectedSubSample.map((test, index) => {\n          //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n          //         oldSelectedSubSample.splice(index, 1)\n          //     }\n          //     return null;\n          // })\n\n          oldSelectedSubSample = oldSelectedSubSample.filter(item => wholeSubsampleList.includes(item.nschedulersubsamplecode)); // END ALPD-3625 VISHAKH\n\n          let keepOld = false;\n          let nschedulersubsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            nschedulersubsamplecode = masterData.selectedSubSample[0].nschedulersubsamplecode;\n          }\n          /* switch (inputData.activeSubSampleTab) {\r\n               case \"IDS_SUBSAMPLECOMMENTS\":\r\n                   RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                   activeName = \"RegistrationSampleComment\"\r\n                   dataStateName = \"subSampleCommentDataState\"\r\n                   break;\r\n               default:\r\n                   RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                   activeName = \"RegistrationSampleAttachment\"\r\n                   dataStateName = \"subSampleAttachmentDataState\"\r\n                   break;\r\n           }*/\n\n        }\n        /*  masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n          masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n          masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n          masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n          masterData['OutsourceDetailsList'] = outsourceDetailsList;*/\n\n\n        let {\n          testskip,\n          testtake,\n          subsampleskip,\n          subsampletake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        let skipInfo = {}; // if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\n\n        testskip = 0; // bool = true\n        // }\n\n        if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\n          subsampleskip = 0; // bool = true\n        } // if (bool) {\n\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subsampleskip,\n          subsampletake\n        }; // }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } //  let inputParam = { attachmentskip: undefined }\n\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            // activeTabIndex: inputData.activeTabIndex,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo //  inputParam\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest; // START ALPD-3625 VISHAKH\n      // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n      let TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersubsamplecode, \"nschedulersubsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      } // END ALPD-3625 VISHAKH\n\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : []; // let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        }; // inputData = {\n        //     ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\n        //     selectedSubSample, checkBoxOperation: 3, activeTabIndex: inputData.masterData.activeTabIndex\n        // }\n        // START ALPD-3671 VISHAKH\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } // END ALPD-3671 VISHAKH\n\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"],\n          nschedulertestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          activeTabIndex: inputData.masterData.activeTabIndex\n        }; //dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedSchedulersubsamplecode: inputData.nschedulersubsamplecode,\n          selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : []\n        }; // START ALPD-3671 VISHAKH\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        } // END ALPD-3671 VISHAKH\n\n\n        const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.ntransactiontestcode); // START ALPD-3625 VISHAKH\n        // oldSelectedTest.forEach((test, index) => {\n        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n        //         oldSelectedTest.splice(index, 1)\n        //     }\n        //     return null;\n        // })\n\n        oldSelectedTest = oldSelectedTest.filter(item => wholeTestList.includes(item.ntransactiontestcode)); // END ALPD-3625 VISHAKH\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            // activeTabIndex: inputData.activeTabIndex,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function ReloadDataSchedulerConfig(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData, \"descending\", \"nschedulersamplecode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab,\n          regSampleExisted: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetailSchedulerConiguration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.nschedulertestcode === \"\") {\n      inputData.nschedulertestcode = \"0\";\n    }\n\n    if (inputData.nschedulertestcode && inputData.nschedulertestcode.length > 0) {\n      let inputParamData = {\n        nschedulertestcode: inputData.nschedulertestcode,\n        nschedulersamplecode: inputData.nschedulersamplecode,\n        ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n        userinfo: inputData.userinfo,\n        nschedulersubsamplecode: inputData.nschedulersubsamplecode ? inputData.nschedulersubsamplecode : inputData.selectedSubSample && inputData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\")\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n      dispatch(initRequest(true));\n\n      if (isServiceRequired) {\n        rsapi.post(\"schedulerconfiguration/getSchedulerConfigParameter\", { ...inputParamData\n        }).then(response => {\n          let skipInfo = {};\n          let responseData = { ...response.data,\n            selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n            selectedTest: inputData.selectedTest\n          }; //responseData = sortData(responseData)\n          // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\n          let masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n            selectedTest: inputData.selectedTest,\n            selectedSchedulerSamplecode: inputData.nschedulersamplecode,\n            selectedSchedulerSubSamplecode: inputData.nschedulersubsamplecode,\n            selectedSchedulerTestCode: inputData.nschedulertestcode,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId\n          };\n\n          if (inputData[\"resultDataState\"] && masterData[\"RegistrationParameter\"] && masterData[\"RegistrationParameter\"].length <= inputData[\"resultDataState\"].skip) {\n            skipInfo = {\n              [\"resultDataState\"]: { ...inputData[\"resultDataState\"],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [\"resultDataState\"]: { ...inputData[\"resultDataState\"],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(error.response.data);\n          }\n        });\n      } else {\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulertestcode\", inputData.removeElementFromArray);\n        let skipInfo = {};\n        let masterData = { ...inputData.masterData,\n          selectedTest: inputData.selectedTest,\n          selectedSchedulerSamplecode: inputData.nschedulersamplecode,\n          selectedSchedulerSubSamplecode: inputData.nschedulersubsamplecode,\n          selectedSchedulerTestCode: inputData.nschedulertestcode\n        };\n\n        if (inputData[\"resultDataState\"] && masterData[\"SchedulerConfigurationParameter\"].length <= inputData[\"resultDataState\"].skip) {\n          skipInfo = {\n            [\"resultDataState\"]: { ...inputData[\"resultDataState\"],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [\"resultDataState\"]: { ...inputData[\"resultDataState\"],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            screenName: inputData.screenName,\n            testtake,\n            testskip: undefined,\n            ...skipInfo\n          }\n        });\n      }\n    } else {\n      let {\n        SchedulerConfigurationParameter\n      } = inputData.masterData;\n      SchedulerConfigurationParameter = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            SchedulerConfigurationParameter\n          },\n          loading: false,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        }\n      });\n    }\n  };\n}\nexport function addsubSampleSchedulerConfiguration(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\n  return function (dispatch) {\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const parentcolumnlist = regcolumnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true);\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: parentcolumnlist,\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n\n    if (specBasedComponent) {\n      const ComponentTestBySpec = rsapi.post(\"/schedulerconfiguration/getComponentBySpec\", { ...Map,\n        specBasedComponent: specBasedComponent,\n        userinfo\n      });\n      urlArray[2] = ComponentTestBySpec;\n    } else {\n      const TestGet = rsapi.post(\"/schedulerconfiguration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage,\n        conditionalTestPackage: true,\n        nneedsubsample: Map[\"nneedsubsample\"]\n      });\n      urlArray[2] = TestGet;\n      const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage\n      });\n      urlArray[5] = TestPackageGet;\n      const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getTestfromSection\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        specBasedComponent: specBasedComponent,\n        specBasedTestPackage: specBasedTestPackage\n      });\n      urlArray[6] = TestSectionGet;\n    }\n\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    urlArray[3] = currentDate;\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    urlArray[4] = dateService;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo);\n      let TestCombined = [];\n      let lstComponent = [];\n      let PackageData = [];\n      let TestSectionData = [];\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (specBasedComponent) {\n        const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n        lstComponent = lstComponentMap.get(\"OptionList\"); //Commented by Dhanushya for jira ETICA-22\n        // if (lstComponent.length > 0) {\n        //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\n        //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n        //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n        //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\n        // }\n      } else {\n        //if (specBasedTestPackage) {\n        const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n        PackageData = PackageDataMap.get(\"OptionList\");\n        const TestSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n        TestSectionData = TestSectionDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n        //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n        // } \n        // }\n        // else {\n\n        TestCombined = response[2].data; // }\n      }\n\n      const comboData1 = newcomboData.comboData;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ? new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      });\n      const inputParam = {\n        screenName: intl.formatMessage({\n          id: \"IDS_SUBSAMPLE\"\n        }),\n        showSaveContinue: false,\n        parentPopUpSize: \"lg\",\n        loading: false,\n        lstComponent,\n        openModal: true,\n        loadPrinter: false,\n        operation: \"create\",\n        loadScheduleSubSample: true,\n        selectedRecord: selectedRecord1,\n        regSubSamplecomboData: comboData1,\n        regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent,\n        TestCombined,\n        regparentSubSampleColumnList: regcolumnList,\n        regchildSubSampleColumnList: regchildColumnList,\n        ncontrolCode: ncontrolcode,\n        timeZoneList,\n        defaultTimeZone,\n        masterData,\n        specBasedComponent,\n        specBasedTestPackage,\n        TestPackage: PackageData,\n        //ALPD-624\n        testskip: 0,\n        subsampleskip: 0,\n        TestSection: TestSectionData,\n        AllTest: TestCombined,\n        AllSection: TestSectionData\n      }; // if (specBasedComponent) {\n      //Added by Dhanushya for jira ETICA-22\n\n      if (specBasedComponent && selectedRecord1['ncomponentcode'] !== undefined) {\n        dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam\n          }\n        });\n      }\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    Component = Component ? Component : [];\n    const TestGet = rsapi.post(\"/schedulerconfiguration/getTestfromDB\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage,\n      nneedsubsample: selectedobject.nneedsubsample\n    });\n    urlArray[0] = TestGet;\n    const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage\n    });\n    urlArray[1] = TestPackageGet;\n    const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getTestfromSection\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent,\n      specBasedTestPackage: specBasedTestPackage,\n      conditionalTestPackage: conditionalTestPackage\n    });\n    urlArray[2] = TestSectionGet;\n    Axios.all(urlArray).then(response => {\n      let PackageData = [];\n      let TestData = [];\n      let TestSectionData = []; // if (specBasedTestPackage) {\n\n      const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n      PackageData = PackageDataMap.get(\"OptionList\");\n      const testSectionDataMap = constructOptionList(response[2].data.TestSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      TestSectionData = testSectionDataMap.get(\"OptionList\"); // if (PackageData.length === 0) {\n      //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n      // } \n      //   }\n      //    else {\n\n      TestData = response[0].data; //  }\n      //let Test = [];\n      // Test[selectedobject.slno] = TestData;\n\n      const Map = {};\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectComponent\"] = selectedobject;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...inputParam,\n          TestCombined: TestData,\n          AllTest: TestData,\n          TestPackage: PackageData,\n          ...Map,\n          loading: false,\n          selectedTestData: [],\n          selectPackage: [],\n          TestSection: TestSectionData,\n          selectSection: [],\n          AllSection: TestSectionData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function testSectionTest(selectedobject, Reg, specBasedComponent, Component, selectComponent, objComponent, LoginProps, selectPackage, selectSection, subSampleBased, selectedSpec, nneedsubsample, action) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    Component = Component ? Component : [];\n    rsapi.post(\"/schedulerconfiguration/getTestBasedTestSection\", {\n      nspecsampletypecode: selectComponent && selectComponent.nspecsampletypecode ? selectComponent.nspecsampletypecode : selectedobject.nspecsampletypecode,\n      specBasedComponent: specBasedComponent,\n      ntestpackagecode: selectPackage.ntestpackagecode && selectPackage.ntestpackagecode.value || -1,\n      nsectioncode: selectSection.nsectioncode.value,\n      nallottedspeccode: selectedSpec && selectedSpec.value !== undefined ? selectedSpec.value : selectedobject.nallottedspeccode\n    }).then(response => {\n      const Map = {};\n      let TestData = response.data;\n      let Test = action !== \"AddSubSample\" ? LoginProps.Test || [] : [];\n      let componentTest = [];\n\n      if (subSampleBased) {\n        componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\n      } else {\n        componentTest = objComponent && Test[objComponent.slno] ? Test[objComponent.slno] : [];\n      }\n\n      const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n      const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\n      delete selectedobject.ntestgrouptestcode;\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectPackage\"] = selectPackage;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          availableTest,\n          TestCombined,\n          ...Map,\n          loading: false,\n          selectedTestData: [],\n          AllTest: LoginProps.AllTest\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveSchedulerSubSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/createSubSampleWithFile\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/createSubSample\", inputParam.inputData);\n    }\n\n    return requestUrl.then(response => {\n      let SchedulerConfigGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.SchedulerConfigGetSubSample, response.data[\"selectedSubSample\"]);\n      let SchedulerConfigGetTest = response.data[\"selectedTest\"];\n      let selectedSubSample = response.data[\"selectedSubSample\"]; //let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"] && response.data[\"SchedulerConfigGetSubSample\"];\n\n      SchedulerConfigGetTest = sortData(SchedulerConfigGetTest, \"nschedulersamplecode\", \"desc\");\n      let selectedTest = SchedulerConfigGetTest.length > 0 ? [SchedulerConfigGetTest[0]] : [];\n      let SchedulerConfigurationParameter = response.data[\"SchedulerConfigurationParameter\"];\n      SchedulerConfigurationParameter = SchedulerConfigurationParameter ? getSameRecordFromTwoArrays(SchedulerConfigurationParameter, selectedTest, 'nschedulertestcode') : SchedulerConfigurationParameter; //  let SchedulerConfigGetSample = replaceUpdatedObject(response.data[\"selectedSample\"], inputParam.inputData.masterData.SchedulerConfigGetSample, 'nschedulersamplecode');\n      //let selectedSample = response.data[\"selectedSample\"];\n\n      let masterData = { ...inputParam.inputData.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSubSample,\n        selectedTest,\n        SchedulerConfigGetSubSample,\n        SchedulerConfigGetTest,\n        SchedulerConfigurationParameter\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        loading: false,\n        showSample: undefined,\n        selectedRecord: {},\n        loadScheduleSubSample: false,\n        showConfirmAlert: false,\n        subSampleConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'yes';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false,\n            subSampleConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              subSampleConfirmMessage: error.response.data.rtn,\n              subSampleConfirmParam: {\n                inputParam\n              },\n              loading: false\n            }\n          });\n        } else if (error.response.data.rtn) {\n          toast.warn(intl.formatMessage({\n            id: error.response.data.rtn\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n        } else {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              showConfirmAlert: false,\n              subSampleConfirmMessage: undefined\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport function getEditSchedulerSubSampleComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, specBasedComponent) {\n  return function (dispatch) {\n    let {\n      userInfo,\n      operation,\n      masterData\n    } = { ...inputParam\n    };\n\n    if (masterData[\"selectedSubSample\"][0].ntransactionstatus === transactionStatus.DRAFT) {\n      if (masterData[\"selectedSubSample\"].length > 1 || masterData[\"selectedSubSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n        inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"] = true;\n      }\n\n      masterData[\"selectedSubSample\"] = [];\n      masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\n      inputParam.editSubSampleSchedulerParam[\"nschedulersamplecode\"] = inputParam[\"mastertoedit\"][\"nschedulersamplecode\"];\n      inputParam.editSubSampleSchedulerParam[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n      inputParam.editSubSampleSchedulerParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\n      inputParam.editSubSampleSchedulerParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\n      const nschedulersubsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n\n      if (nschedulersubsamplecode === undefined) {\n        toast.info(intl.formattedMessage({\n          id: \"IDS_SELECTVALIDSUBSAMPLE\"\n        }));\n      } else {\n        let urlArray = [];\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n        const selectedRegistration = rsapi.post(\"/schedulerconfiguration/getEditSchedulerSubSampleComboService\", { ...inputParam.editSubSampleSchedulerParam,\n          nschedulersubsamplecode,\n          parentcolumnlist: columnList,\n          childcolumnlist: childColumnList,\n          userinfo: userInfo\n        });\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n          datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n          userinfo: userInfo\n        });\n        urlArray = [timeZoneService, selectedRegistration, dateService];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          let selectedRecord = { ...response[1].data[\"EditData\"]\n          };\n          selectedRecord = { ...selectedRecord,\n            ...selectedRecord['jsondata']\n          };\n          const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n          const timeZoneList = timeZoneMap.get(\"OptionList\");\n          const defaultTimeZone = {\n            label: userInfo.stimezoneid,\n            value: userInfo.ntimezonecode\n          };\n\n          if (specBasedComponent) {\n            selectedRecord[\"ncomponentcode\"] = {\n              label: selectedRecord[\"scomponentname\"],\n              value: selectedRecord[\"ncomponentcode\"]\n            };\n          }\n\n          const languagetypeCode = undefined;\n          const comboData = response[1].data;\n          delete comboData['EditData'];\n          let comboValues = {};\n\n          if (columnList.length > 0) {\n            columnList.map(x => {\n              if (x.inputtype === 'combo') {\n                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                  {\n                    if (comboData[x.label].length > 0) {\n                      if (comboData[x.label][0].label === undefined) {\n                        const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                        comboData[x.label] = optionList.get(\"OptionList\");\n                      } else {\n                        comboData[x.label] = comboData[x.label];\n                        const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      }\n                    } else {\n                      comboData[x.label] = [];\n                    } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                    //   childColumnList, withoutCombocomponent)\\\n\n\n                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                  } else {\n                  comboValues = {\n                    \"comboData\": comboData\n                  };\n                }\n              } else {\n                comboValues = {\n                  comboData: comboData,\n                  ...comboValues\n                };\n              }\n            });\n          } else {\n            comboValues = {\n              \"comboData\": comboData\n            };\n          } // withoutCombocomponent.map(date => {\n          //     if (date.inputtype === 'date')\n          //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n          //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n          // })\n\n\n          withoutCombocomponent.map(date => {\n            if (date.inputtype === 'date') {\n              selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n              if (date.nperiodcode) {\n                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n              } else {\n                selectedRecord[date.label + \"value\"] = new Date();\n              }\n\n              if (date.hidebeforedate) {\n                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n              }\n\n              if (date.hideafterdate) {\n                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n              }\n            }\n          });\n          selectedRecord = { ...selectedRecord\n          };\n\n          if (inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"] === true) {\n            if (masterData[\"searchedTest\"]) {\n              if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n                inputParam.searchTestRef.current.value = \"\";\n                masterData['searchedTest'] = undefined;\n              }\n            }\n\n            masterData = { ...masterData,\n              ...response[1].data[\"SubSampleChildDetail\"]\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation,\n              timeZoneList,\n              defaultTimeZone,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolCode,\n              parentPopUpSize: \"lg\",\n              loading: false,\n              showSample: undefined,\n              regSubSamplecomboData: comboValues.comboData,\n              loadScheduleSubSample: true,\n              screenName: \"IDS_SUBSAMPLE\",\n              operation: \"update\",\n              specBasedComponent,\n              //  regRecordToEdit:recordToEdit\n              masterData,\n              loadPreregister: true,\n              withoutCombocomponent\n            }\n          }); // }\n        }).catch(error => {\n          //console.log(\"error:\", error);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.info(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_DRAFTTOEDITSUBSAMPLE\"\n      }));\n    }\n  };\n}\nexport function updateSchedulerConfigSubSample(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSampleWithFile\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSample\", inputParam.inputData);\n    }\n\n    return requestUrl // rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\n    .then(response => {\n      sortData(response.data); //if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\n\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\"); //  }\n      // else{\n      //     masterData={...masterData,\"SchedulerConfigGetSubSample\":response.data[\"SchedulerConfigGetSubSample\"]} \n      // }\n\n      let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\n      masterData = { ...masterData,\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.selectedTest, \"nschedulertestcode\"),\n        SchedulerConfigGetTest\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          })\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function deleteSchedulerSubSample(Map, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n    requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigSubSample\", { ...Map,\n      \"userinfo\": userInfo\n    });\n    return requestUrl.then(response => {\n      sortData(response.data); //replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n\n      let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\n      let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\n      masterData = { ...masterData,\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        //selectedTest: response.data[\"selectedTest\"],\n        selectedTest: response.data[\"selectedTest\"],\n        SchedulerConfigGetTest,\n        SchedulerConfigGetSubSample,\n        searchedSubSample: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          ncontrolcode,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          })\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport const addMoreSchedulerConfigTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\n      if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\n        value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode);\n\n        if (value) {\n          return toast.info(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n          }));\n        } //sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n        //const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\n        // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\n        //if (selectedsample && selectedsample.length > 0) {\n\n\n        const selectedsample = inputParam.selectedSample;\n        const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n            if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\n              // if (selectsubsample && selectsubsample.length > 0) {\n              //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\n              //\n              //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \n              //     {                    \n              const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n              if (findApprovalVersion.length === 1) {\n                const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                  {\n                    inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample && [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\");\n                    dispatch(initRequest(true));\n                    const urlArray = [];\n                    const TestGet = rsapi.post(\"/schedulerconfiguration/getMoreTest\", { ...inputParam\n                    });\n                    urlArray[0] = TestGet;\n                    const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getMoreTestPackage\", { ...inputParam\n                    });\n                    urlArray[1] = TestPackageGet;\n                    const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getMoreTestSection\", { ...inputParam\n                    });\n                    urlArray[2] = TestSectionGet;\n                    Axios.all(urlArray).then(response => {\n                      let PackageData = [];\n                      let TestSectionData = [];\n                      const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\", \"stestpackagename\", undefined, undefined, true);\n                      PackageData = PackageDataMap.get(\"OptionList\");\n                      const TestSectionDataMap = constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n                      TestSectionData = TestSectionDataMap.get(\"OptionList\");\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          availableTest: response[0].data,\n                          TestCombined: response[0].data,\n                          AllTest: response[0].data,\n                          TestPackage: PackageData,\n                          loadChildTest: true,\n                          loading: false,\n                          ncontrolCode,\n                          screenName: \"IDS_TEST\",\n                          operation: \"create\",\n                          openModal: true,\n                          parentPopUpSize: \"lg\",\n                          selectedRecord: {},\n                          showSample: undefined,\n                          loadPrinter: false,\n                          TestSection: TestSectionData,\n                          AllSection: TestSectionData\n                        }\n                      });\n                    }).catch(error => {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          loading: false\n                        }\n                      });\n\n                      if (error.response.status === 500) {\n                        toast.error(error.message);\n                      } else {\n                        toast.info(this.props.formatMessage({\n                          id: error.response.data\n                        }));\n                      }\n                    });\n                  } else {\n                  toast.info(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                  }));\n                }\n              } else {\n                toast.info(intl.formatMessage({\n                  id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                }));\n              } //     }\n              //     else {\n              //         toast.info(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\n              //     }\n              // }                               \n\n            } else {\n              toast.info(intl.formatMessage({\n                id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\"\n              }));\n            }\n          } else {\n            ////     toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n            toast.info(intl.formatMessage({\n              id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n            }));\n          }\n        } else {\n          toast.info(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        } // } else {\n        //     toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\n        // }\n\n      } else {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SELECTSUBSAMPLE\"\n        }));\n      }\n    } else {\n      toast.info(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createSchedulerTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let SchedulerConfigGetTest = updatedObjectWithNewElement(masterData[\"SchedulerConfigGetTest\"], response.data[\"SchedulerConfigGetTest\"]); //let RegistrationGetSub    Sample = updatedObjectWithNewElement(masterData[\"RegistrationGetSubSample\"], response.data[\"RegistrationGetSubSample\"]);\n\n      masterData = { ...masterData,\n        SchedulerConfigGetTest: sortData(SchedulerConfigGetTest, \"descending\", \"nschedulertestcode\"),\n        SchedulerConfigurationParameter: response.data[\"SchedulerConfigurationParameter\"] && response.data[\"SchedulerConfigurationParameter\"],\n        selectedTest: response.data[\"SchedulerConfigGetTest\"]\n      };\n      let respObject = {\n        masterData,\n        [modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {},\n        showConfirmAlert: false,\n        createTestConfirmMessage: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      inputParam.postParamList[1]['clearFilter'] = 'no';\n      inputParam.postParamList[2]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            createTestConfirmMessage: undefined\n          }\n        });\n        toast.error(error.message);\n      } else {\n        if (error.response.data.NeedConfirmAlert) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              showConfirmAlert: true,\n              createTestConfirmMessage: error.response.data.rtn,\n              createTestConfirmParam: {\n                inputParam,\n                masterData,\n                modalName\n              },\n              //[modalName]: false,\n              loading: false,\n              loadChildTest: true,\n              showSample: undefined //openModal: false,\n              //selectedRecord: {}\n\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              [modalName]: false,\n              loading: false,\n              loadChildTest: false,\n              showSample: undefined,\n              openModal: false,\n              selectedRecord: {},\n              createTestConfirmMessage: undefined\n            }\n          });\n          toast.info(error.response.data.rtn);\n        }\n      }\n    });\n  };\n};\nexport function deleteSchedulerConfigTest(Map, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n    requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigTest\", { ...Map,\n      \"userinfo\": userInfo\n    });\n    return requestUrl.then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n      let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\n      let SchedulerConfigurationParameter = response.data[\"SchedulerConfigurationParameter\"]; //let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\n\n      masterData = { ...masterData,\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        //selectedTest: response.data[\"selectedTest\"],\n        selectedTest: response.data[\"selectedTest\"],\n        SchedulerConfigGetTest,\n        SchedulerConfigurationParameter,\n        searchedTest: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          ncontrolcode,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          })\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function getEditSchedulerConfigComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, editableComboList) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    let masterData = inputParam[\"masterData\"];\n    let parentColumnList = [...columnList, ...editableComboList];\n\n    if (masterData[\"selectedSample\"].length > 1 || masterData[\"selectedSample\"].findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName]) === -1) {\n      inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] = true;\n    }\n\n    masterData[\"selectedSample\"] = [];\n    masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\n    const nschedulersamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const selectedRegistration = rsapi.post(\"/schedulerconfiguration/getEditSchedulerConfigDetails\", { ...inputParam.editSchedulerSampleParam,\n      nschedulersamplecode,\n      parentcolumnlist: parentColumnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo,\n      nallottedspeccode: inputParam.mastertoedit.nallottedspeccode || -1\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo: userInfo\n    });\n    const siteService = rsapi.post(\"schedulerconfiguration/getSiteByUser\", {\n      userinfo: userInfo\n    });\n    const schedulerMasterService = rsapi.post(\"schedulerconfiguration/getSchedulerMaster\", {\n      userinfo: userInfo\n    });\n    urlArray = [timeZoneService, selectedRegistration, dateService, siteService, schedulerMasterService];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[1].data[\"EditData\"]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      };\n      let siteMap = [];\n      let siteList = [];\n      let schedulerList = [];\n\n      if (response[3].data.userSite !== undefined) {\n        siteMap = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n        siteList = siteMap.get(\"OptionList\");\n      }\n\n      if (response[4].data.ScheduleMaster !== undefined) {\n        schedulerList = constructOptionList(response[4].data.ScheduleMaster || [], \"nschedulecode\", \"sschedulename\", undefined, undefined, true).get(\"OptionList\");\n      } // if(selectedRecord['Site']!==undefined){\n      //     selectedRecord['nsitecode'] = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true).get(\"OptionList\");\n      // // siteList = siteMap.get(\"OptionList\");\n      // }\n\n\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      };\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.info(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        })); // ALPD-3393\n\n        if (inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] === true) {\n          masterData = sortData({ ...masterData,\n            ...response[1].data[\"SampleChildDetail\"]\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        delete comboData['EditData'];\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoadForEdit(x, comboData, selectedRecord, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        if (editableComboList.length > 0) {\n          editableComboList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  }\n\n                  comboValues = {\n                    \"comboData\": comboData\n                  };\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        }\n\n        withoutCombocomponent.map(date => {\n          if (date.inputtype === 'date') {\n            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ? rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n\n            if (date.nperiodcode) {\n              selectedRecord[date.label + \"value\"] = response[2].data[date.label] ? new Date(response[2].data[date.label][\"datevalue\"]) : null;\n            } else {\n              selectedRecord[date.label + \"value\"] = new Date();\n            }\n\n            if (date.hidebeforedate) {\n              selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"];\n            }\n\n            if (date.hideafterdate) {\n              selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"];\n            }\n          }\n        });\n        let {\n          Specification,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          specValue\n        } = [];\n        specValue = [{\n          nallottedspeccode: selectedRecord.nallottedspeccode,\n          sspecname: selectedRecord.sspecname,\n          sversion: selectedRecord.sversion\n        }];\n        const selectedSpec = {};\n        Specification = constructOptionList(specValue || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        selectedRecord = { ...selectedRecord,\n          ...selectedSpec\n        };\n\n        if (inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] === true) {\n          masterData = sortData({ ...masterData,\n            ...response[1].data[\"SampleChildDetail\"]\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedSpec,\n            Specification,\n            operation: \"update\",\n            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openPortal: true,\n            ncontrolCode: inputParam.editSchedulerSampleParam.ncontrolCode,\n            loadPreregister: true,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            comboData: comboValues.comboData,\n            childColumnList,\n            comboComponents,\n            withoutCombocomponent,\n            columnList,\n            masterData,\n            siteList,\n            schedulerList\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function updateSchedulerConfig(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigWithFile\", inputParam.formData);\n    } else {\n      requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfig\", inputParam.inputData);\n    }\n\n    return requestUrl.then(response => {\n      if (response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\n        replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n        replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.SchedulerConfigGetTest, \"nschedulertestcode\"); //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n        //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n\n        masterData = { ...masterData,\n          selectedSample: response.data[\"selectedSample\"],\n          SchedulerConfigurationParameter: masterData[\"SchedulerConfigurationParameter\"]\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            openPortal: false,\n            loading: false,\n            showConfirmAlert: false,\n            regDateEditConfirmMessage: undefined,\n            loadEsign: false,\n            openModal: false,\n            loadPreregister: false,\n            selectedRecord: {},\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function validateEsignforSchedulerConfig(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"schedulerconfiguration\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"editSchedulerConfig\":\n        dispatch(updateSchedulerConfig(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editSubSample\":\n        dispatch(updateSchedulerConfigSubSample(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"deleteSubSample\":\n        dispatch(deleteSchedulerSubSample(screenData.inputParam.Map, screenData.inputParam.inputData.userinfo, screenData.masterData, screenData.inputParam.ncontrolCode));\n        break;\n\n      case \"deleteSchedulerTest\":\n        dispatch(deleteSchedulerConfigTest(screenData.inputParam.Map, screenData.inputParam.inputData.userinfo, screenData.masterData, screenData.inputParam.ncontrolCode));\n        break;\n\n      case \"deleteSample\":\n        dispatch(deleteSchedulerConfig(screenData.inputParam.Map, screenData.masterData));\n        break;\n\n      case \"approveSample\":\n        dispatch(approveSchedulerConfig(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"activeInactive\":\n        dispatch(updateActiveStatusSchedulerConfig(screenData.inputParam));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function approveSchedulerConfig(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n    requestUrl = rsapi.post(\"/schedulerconfiguration/approveSchedulerConfig\", { ...inputParam.approveSchedulerSampleParam,\n      nschedulersamplecode: inputParam.nschedulersamplecode,\n      sinstrumentid: inputParam.masterData.selectedSample[0][inputParam.approveSchedulerSampleParam.sinstrumentidLabel],\n      ninstrumentcode: inputParam.masterData.selectedSample[0]['ninstrumentcode'],\n      nschedulecode: inputParam.mastertoapprove.nschedulecode,\n      // ALPD-5332 Added by Abdul for MAterial Scheduler\n      nmaterialcode: inputParam.masterData.selectedSample[0]['nmaterialcode'],\n      nsitecode: inputParam.mastertoapprove && inputParam.mastertoapprove.ninstrumentsitecode && inputParam.mastertoapprove.ninstrumentsitecode !== -1 ? inputParam.mastertoapprove.ninstrumentsitecode : -1 // ALPD-5332 End           \n\n    });\n    return requestUrl.then(response => {\n      sortData(response.data); //if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\n\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], inputParam.masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], inputParam.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], inputParam.masterData.SchedulerConfigGetTest, \"nschedulertestcode\"); // let SchedulerConfigGetSample=response.data[\"SchedulerConfigGetSample\"]&&response.data[\"SchedulerConfigGetSample\"];\n      // let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"]&&response.data[\"SchedulerConfigGetSubSample\"];\n      // let SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"]&&response.data[\"SchedulerConfigGetTest\"];\n\n      if (response.data[\"SchedulerConfigGetSampleBefore\"] !== undefined) {\n        replaceUpdatedObject(response.data[\"SchedulerConfigGetSampleBefore\"], inputParam.masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\n      }\n\n      masterData = { ...masterData,\n        // SchedulerConfigGetSample,\n        // SchedulerConfigGetSubSample,\n        // SchedulerConfigGetTest,\n        selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], inputParam.masterData.selectedSample, \"nschedulersamplecode\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], inputParam.masterData.selectedSubSample, \"nschedulersubsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], inputParam.masterData.selectedTest, \"nschedulertestcode\")\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {}\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function deleteSchedulerConfig(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n    requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfig\", { ...inputParam.deleteSchedulerSampleParam,\n      nschedulersamplecode: inputParam.nschedulersamplecode\n    });\n    return requestUrl.then(response => {\n      sortData(response.data);\n      let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\n      let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\n      let SchedulerConfigGetSample = response.data[\"SchedulerConfigGetSample\"];\n      masterData = { ...masterData,\n        selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        SchedulerConfigGetTest,\n        SchedulerConfigGetSubSample,\n        SchedulerConfigGetSample,\n        searchedSubSample: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          selectedRecord: {},\n          showSample: undefined\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function updateActiveStatusSchedulerConfig(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n    requestUrl = rsapi.post(\"/schedulerconfiguration/updateActiveStatusSchedulerConfig\", { ...inputParam.activeInactiveSchedulerSampleParam,\n      nschedulersamplecode: inputParam.nschedulersamplecode,\n      nactivestatus: inputParam.selectedSample[0].nactivestatus\n    });\n    return requestUrl.then(response => {\n      sortData(response.data);\n      let masterData = { ...inputParam.masterData\n      };\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\n      replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\n      masterData = { ...masterData,\n        selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        searchedSubSample: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: intl.formatMessage({\n            id: \"IDS_SUBSAMPLE\"\n          })\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.info(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function getSchedulerMasteDetails(Map, selectedFilter, masterData, searchRef) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/schedulerconfiguration/getSchedulerMasteDetails\", Map).then(response => {\n      const SchedulerMasterDeatils = response.data[\"ScheduleMasterDetails\"] && response.data[\"ScheduleMasterDetails\"];\n      sortData(response.data); // MAHProductManufacturer.length > 0 ?\n      //     selectedFilter[\"nproductmanufcode\"] = {\n      //         \"value\": MAHProductManufacturer[0].nproductmanufcode,\n      //         \"label\": MAHProductManufacturer[0].smanufname\n      //     } : selectedFilter[\"nproductmanufcode\"] = \"\";\n\n      selectedFilter[\"sschedulename\"] = SchedulerMasterDeatils && SchedulerMasterDeatils[0].sschedulename || \"\";\n      let startdate = SchedulerMasterDeatils[0].sstartdate !== undefined ? SchedulerMasterDeatils[0].sstartdate.substring(0, 10) : \"\";\n      let starttime = SchedulerMasterDeatils[0] && SchedulerMasterDeatils[0].sstarttime !== undefined ? SchedulerMasterDeatils[0].sstarttime.substring(16, 11) : \"\";\n      let enddate = SchedulerMasterDeatils[0] !== undefined ? SchedulerMasterDeatils[0].senddate.substring(0, 10) : \"\";\n      let endtime = SchedulerMasterDeatils[0] && SchedulerMasterDeatils[0].sendtime !== undefined ? SchedulerMasterDeatils[0].sendtime.substring(16, 11) : \"\";\n      let startdatetime = startdate + \" \" + starttime;\n      let enddatetime = enddate + \" \" + endtime; // SchedulerMasterDeatils = {\n      //     ...SchedulerMasterDeatils,\n      //     \"0\": {  \n      //         ...SchedulerMasterDeatils[\"0\"],\n      //       \"startdatetime\": startdatetime,\n      //       \"enddatetime\": enddatetime\n      //     }\n      //   };\n\n      /*  let idslabel;\r\n        let fieldToShow;\r\n          if (SchedulerMasterDeatils.sscheduletype === \"O\") {\r\n            idslabel=\"IDS_ONETIME\";\r\n          } else if (SchedulerMasterDeatils.sscheduletype === \"D\") {\r\n            idslabel=\"IDS_DAILY\";\r\n          } else if (SchedulerMasterDeatils.sscheduletype === \"W\") {\r\n            idslabel=\"IDS_WEEKLY\";\r\n          } else {\r\n            idslabel=\"IDS_MONTHLY\";\r\n          }\r\n      /*     SchedulerMasterDeatils = {\r\n            ...SchedulerMasterDeatils,\r\n            sscheduletype: SchedulerMasterDeatils.sscheduletype === \"O\" ? intl.formatMessage({ id: \"IDS_ONETIME\" }) :\r\n                           SchedulerMasterDeatils.sscheduletype === \"D\" ? intl.formatMessage({ id: \"IDS_DAILY\" }) :\r\n                           SchedulerMasterDeatils.sscheduletype === \"W\" ? intl.formatMessage({ id: \"IDS_WEEKLY\" }) :\r\n                           intl.formatMessage({ id: \"IDS_MONTHLY\" })  // Default case\r\n          };\r\n          //idslabel=idslabel.push(\"IDS_STARTDATEANDTIME\");\r\n        fieldToShow=\"stempscheduleType\";\r\n      */\n      // selectedFilter[\"nproductmanufcode\"] = MAHProductManufacturer && MAHProductManufacturer.length > 0 ?\n      //     MAHProductManufacturer[0].nproductmanufcode : -1\n\n      let selectedRecord = {};\n      selectedRecord = selectedFilter;\n      masterData = { ...masterData,\n        ...response.data\n      };\n\n      if (searchRef !== undefined && searchRef.current !== null) {\n        searchRef.current.value = '';\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          // selectedFilter,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/SchedulerConfigurationAction.js"],"names":["rsapi","toast","filterRecordBasedOnTwoArrays","sortData","fillRecordBasedOnCheckBoxSelection","updatedObjectWithNewElement","getRecordBasedOnPrimaryKeyName","reArrangeArrays","filterRecordBasedOnPrimaryKeyName","rearrangeDateFormat","getSameRecordFromTwoArrays","sortDataByParent","constructOptionList","parentChildComboLoad","constructjsonOptionList","childComboLoadForEdit","constructjsonOptionDefault","replaceUpdatedObject","transactionStatus","checkBoxOperation","SampleType","Axios","DEFAULT_RETURN","initRequest","postCRUDOrganiseTransSearch","intl","onSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","onRegTypeChange","onRegSubTypeChange","changeApprovalConfigVersionChange","getSchedulerConfigSample","inputData","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","respObject","selectedFilter","showFilter","skip","testskip","take","testtake","subsampleskip","subsampletake","showSample","activeSampleTab","regSampleExisted","status","info","insertSchedulerConfig","inputParam","requestUrl","isFileupload","formData","rtn","SchedulerConfigGetSample","selectedSample","SchedulerConfigGetSubSample","SchedulerConfigGetTest","selectedSubSample","selectedTest","length","orderTypeValue","nneedsubsample","filter","x","nschedulersubsamplecode","multipleselectionFlag","openModal","loadEsign","showConfirmAlert","selectedRecord","loadPreregister","openPortal","selectedSpec","selectComponent","SelectedTest","selectedComponent","Component","Test","subSampleDataGridList","preregConfirmMessage","loadImportFileData","loadImportSampleCountData","isDynamicViewSlideOut","postParamList","warn","console","log","NeedConfirmAlert","preregConfirmParam","getSchedulerConfigSubSampleDetail","isServiceRequired","isParentValue","inputParamData","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","napprovalconfigcode","userinfo","ndesigntemplatemappingcode","nschedulersamplecode","ntype","QUICKSELECTALL","SINGLEDESELECT","DESELECT","QUICKSELECTSTATUS","SINGLESELECT","selectednschedulersamplecode","map","join","selectedTransactionSamplecode","activeName","dataStateName","subSample","sample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","activeTabIndex","MULTISELECT","wholeSubSampleList","b","includes","wholeTestList","nschedulertestcode","keepOld","bool","sampleGridDataState","sort","multifilterInfo","multiFilterLoad","activeTestTab","isGrandChildGetRequired","TestSelected","subSampleSelected","filterTestSameOldSelectedTest","filterSelectedSubSample","getSchedulerTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","activeSubSampleTab","selectedTransactionsamplecode","noutsourcerequired","RealSampleTypeValue","NA","testList","wholeSubsampleList","toString","selectedSchedulersubsamplecode","ntransactiontestcode","RegistrationTestComment","RegistrationParameter","ReloadDataSchedulerConfig","getTestChildTabDetailSchedulerConiguration","url","responseData","selectedSchedulerSamplecode","selectedSchedulerSubSamplecode","selectedSchedulerTestCode","activeTabId","screenName","SchedulerConfigurationParameter","addsubSampleSchedulerConfiguration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","specBasedComponent","specBasedTestPackage","urlArray","timeZoneService","parentcolumnlist","inputtype","readonly","actualService","childcolumnlist","ComponentTestBySpec","TestGet","nallottedspeccode","slno","conditionalTestPackage","TestPackageGet","TestSectionGet","currentDate","dateService","datecolumnlist","all","timeZoneMap","timeZoneList","get","defaultTimeZone","label","stimezoneid","ntimezonecode","newcomboData","slanguagetypecode","TestCombined","lstComponent","PackageData","TestSectionData","selectedRecord1","lstComponentMap","PackageDataMap","TestPackage","TestSectionDataMap","TestSection","comboData1","comboData","componentrow","loadcurrentdate","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","val","radiodefaultvalue","i","radioOptions","tags","text","formatMessage","id","showSaveContinue","parentPopUpSize","loadPrinter","operation","loadScheduleSubSample","regSubSamplecomboData","regparentSubSampleColumnList","regchildSubSampleColumnList","ncontrolCode","AllTest","AllSection","componentTest","selectedobject","Reg","nspecsampletypecode","Object","keys","TestData","testSectionDataMap","selectedTestData","selectPackage","selectSection","testSectionTest","objComponent","LoginProps","subSampleBased","action","ntestpackagecode","nsectioncode","availableTest","ntestgrouptestcode","saveSchedulerSubSample","subSampleConfirmMessage","subSampleConfirmParam","getEditSchedulerSubSampleComboService","columnList","childColumnList","comboComponents","withoutCombocomponent","userInfo","DRAFT","findIndex","primaryKeyName","editSubSampleSchedulerParam","push","mastertoedit","formattedMessage","selectedRegistration","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","date","updateSchedulerConfigSubSample","regDateEditConfirmMessage","loadRegSubSample","regEditParam","deleteSchedulerSubSample","searchedSubSample","addMoreSchedulerConfigTest","sampleList","some","obj","selectedsample","findTransactionStatus","Set","REJECT","CANCELLED","RELEASED","findApprovalVersion","napprovalversioncode","findSampleSpec","loadChildTest","props","createSchedulerTest","modalName","classUrl","methodUrl","createTestConfirmMessage","createTestConfirmParam","deleteSchedulerConfigTest","searchedTest","getEditSchedulerConfigComboService","editableComboList","parentColumnList","editSchedulerSampleParam","siteService","schedulerMasterService","siteMap","siteList","schedulerList","userSite","ScheduleMaster","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","specValue","sspecname","sversion","ntemplatemanipulationcode","RealRegSubTypeValue","sregsubtypename","updateSchedulerConfig","validateEsignforSchedulerConfig","toLowerCase","dispatchMethods","screenData","deleteSchedulerConfig","approveSchedulerConfig","updateActiveStatusSchedulerConfig","approveSchedulerSampleParam","sinstrumentid","sinstrumentidLabel","ninstrumentcode","nschedulecode","mastertoapprove","nmaterialcode","nsitecode","ninstrumentsitecode","deleteSchedulerSampleParam","activeInactiveSchedulerSampleParam","nactivestatus","getSchedulerMasteDetails","searchRef","SchedulerMasterDeatils","sschedulename","startdate","sstartdate","substring","starttime","sstarttime","enddate","senddate","endtime","sendtime","startdatetime","enddatetime"],"mappings":"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AoB,CAACxD,MAArB,CAA4B/C,IAAI,IACnD6G,kBAAkB,CAACE,QAAnB,CAA4B/G,IAAI,CAACiD,uBAAjC,CADmB,CAAvB,CAV+D,CAa/D;;AACA,gBAAIsD,oBAAoB,CAAC3D,MAArB,GAA8B,CAAlC,EAAqC;AACjCpD,cAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETkD,gBAAAA,iBAAiB,EAAE6D;AAFV,eAAb;AAIH;;AACD,kBAAM5D,YAAY,GAAGrE,0BAA0B,CAACgI,eAAD,EAC3C9G,UAAU,CAACkD,iBADgC,EACb,sBADa,CAA/C;AAEAlD,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETmD,cAAAA;AAFS,aAAb;AAIH,WA7CU,CA8CX;;;AACA,cAAIhC,SAAS,CAAC5B,iBAAV,KAAgCA,iBAAiB,CAACyG,cAAtD,EAAsE;AAExE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACyB,WAlGU,CAmGX;;;AACA,cAAI7E,SAAS,CAAC5B,iBAAV,KAAgCA,iBAAiB,CAAC6G,YAAlD,IAAkEjF,SAAS,CAAC5B,iBAAV,KAAgCA,iBAAiB,CAAC4G,iBAAxH,EAA2I;AACvInG,YAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETmD,cAAAA,YAAY,EAAEnD,UAAU,CAACiD,sBAAX,CAAkCG,MAAlC,GAA2C,CAA3C,GAA+C,CAACpD,UAAU,CAACiD,sBAAX,CAAkC,CAAlC,CAAD,CAA/C,GAAwF;AAF7F,aAAb;AAKF;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {filterRecordBasedOnTwoArrays,sortData, fillRecordBasedOnCheckBoxSelection,updatedObjectWithNewElement, getRecordBasedOnPrimaryKeyName, reArrangeArrays,filterRecordBasedOnPrimaryKeyName, \r\n    rearrangeDateFormat, getSameRecordFromTwoArrays,sortDataByParent,constructOptionList,parentChildComboLoad,constructjsonOptionList,childComboLoadForEdit,constructjsonOptionDefault,replaceUpdatedObject} from '../components/CommonScript';\r\nimport {transactionStatus,checkBoxOperation,SampleType} from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction'\r\nimport { intl } from '../components/App';\r\n\r\n// ALPD-4914 created SchedulerConfigurationAction.js file for scheduler configuration screen\r\nexport function onSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getRegistrationType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/schedulerconfiguration/getRegistrationSubType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getApprovalConfigVersion\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function changeApprovalConfigVersionChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getApproveConfigVersionRegTemplate\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSchedulerConfigSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab, regSampleExisted: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function insertSchedulerConfig(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSchedulerConfigWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSchedulerConfig\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n\r\n                    let SchedulerConfigGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.SchedulerConfigGetSample, 'SchedulerConfigSample');\r\n                    let selectedSample = response.data[\"selectedSample\"];\r\n                    let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n                    let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                    let selectedSubSample = SchedulerConfigGetSubSample;\r\n                    SchedulerConfigGetTest = sortData(SchedulerConfigGetTest, \"nschedulersamplecode\", \"desc\");\r\n                    let selectedTest = SchedulerConfigGetTest.length > 0 ? [SchedulerConfigGetTest[0]] : [];\r\n                    let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        SchedulerConfigGetSubSample = sortData(response.data[\"SchedulerConfigGetSubSample\"], 'nschedulersamplecode', 'desc')\r\n                        selectedSubSample = SchedulerConfigGetSubSample.length > 0 ? [SchedulerConfigGetSubSample[0]] : [];\r\n                        SchedulerConfigGetTest = SchedulerConfigGetTest.filter(x => x.nschedulersubsamplecode === selectedSubSample[0].nschedulersubsamplecode)\r\n                        selectedTest = SchedulerConfigGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                    }\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.SchedulerConfigGetSubSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.SchedulerConfigGetTest);\r\n                        SchedulerConfigGetSubSample = masterData.SchedulerConfigGetSubSample;\r\n                        SchedulerConfigGetTest = masterData.SchedulerConfigGetTest;\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedSample, selectedSubSample, selectedTest,\r\n                        SchedulerConfigGetSubSample, SchedulerConfigGetTest, SchedulerConfigGetSample,\r\n                    }\r\n                    if (masterData[\"kendoFilterList\"] !== undefined) {\r\n                        masterData[\"kendoFilterList\"] = undefined;\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        SelectedTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        SelectedTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: [],\r\n                        preregConfirmMessage: undefined,\r\n                        regSampleExisted, loadImportFileData: false, loadImportSampleCountData: false,\r\n                        skip: 0,\r\n                        subsampleskip: 0,\r\n                        testskip: 0,\r\n                        isDynamicViewSlideOut: false,\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                preregConfirmMessage: error.response.data.rtn,\r\n                                preregConfirmParam: { inputParam, masterData },\r\n                                loading: false,\r\n                                showSample: undefined,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, preregConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSchedulerConfigSubSampleDetail(inputData, isServiceRequired, isParentValue) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n           // activeTestTab: inputData.activeTestTab,\r\n          //  activeSampleTab: inputData.activeTestTab,\r\n          //  activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            nschedulersamplecode: inputData.nschedulersamplecode,\r\n        ntype: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 7 ? 4 : undefined:2, //ALPD-497\r\n            ntype: inputData.nneedsubsample === true ? inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL ? checkBoxOperation.SINGLEDESELECT : undefined : checkBoxOperation.DESELECT, //ALPD-497\r\n           checkBoxOperation: inputData.nneedsubsample === true ?\r\n               inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS ? checkBoxOperation.SINGLESELECT : inputData.checkBoxOperation : inputData.checkBoxOperation,\r\n           // OrderCodeData: inputData.selectedSample ? inputData.selectedSample.length > 0 && inputData.selectedSample.map(item => item.hasOwnProperty(\"OrderCodeData\") ? item.OrderCodeData : -1).join(\",\") : null,\r\n            selectednschedulersamplecode: inputData.selectedSample && inputData.selectedSample.length > 0 ? inputData.selectedSample.map(item => item.nschedulersamplecode).join(\",\") : null,\r\n            selectedTransactionSamplecode: inputData.selectedSample && inputData.selectedSample.length > 1\r\n                && inputData.masterData.selectedSubSample ? inputData.masterData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\") : null,\r\n          //  noutsourcerequired: inputData.masterData && inputData.masterData.RealSampleTypeValue ? inputData.masterData.RealSampleTypeValue.noutsourcerequired : transactionStatus.NA\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"schedulerconfiguration/getSchedulerConfigSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, \"descending\", \"nschedulersamplecode\");\r\n                    // if(isParentValue){\r\n                    response.data['SchedulerConfigGetSubSample'] = sortDataByParent(response.data['SchedulerConfigGetSubSample'], inputData.sample, \"nschedulersamplecode\");\r\n                    //response.data['SchedulerConfigGetTest']= sortDataByParent(response.data['SchedulerConfigGetTest'],response.data['SchedulerConfigGetSubSample'], \"ntransactionsamplecode\");\r\n                    //  }\r\n                   \r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                 //   let externalOrderAttachmentList = response.data && response.data.ExternalOrderAttachmentList;\r\n                //    let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.nschedulersamplecode,\r\n                            selectedSubSample: inputData.masterData.SchedulerConfigGetSubSample.length > 0 ?\r\n                                [inputData.masterData.SchedulerConfigGetSubSample[0]] : [],\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                        }\r\n                       // let RegistrationTestComment = [];\r\n                   //     let RegistrationTestAttachment = [];\r\n                     //   let RegistrationParameter = [];\r\n                     //   let RegistrationComment = [];\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \r\n                        //if (inputData.checkBoxOperation === 1) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n\r\n                            const wholeSubSampleList = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                            // START ALPD-3625 VISHAKH\r\n                            // oldSelectedSubSample.forEach((subsample, index) => {\r\n                            //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSampleList.includes(item.nschedulersubsamplecode)\r\n                            );\r\n                            // END ALPD-3625 VISHAKH\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'nschedulersamplecode')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        //  if (inputData.checkBoxOperation === 7) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                           \r\n                      /*      switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;*/\r\n                        }\r\n                        //if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.SchedulerConfigGetTest.length > 0 ? [masterData.SchedulerConfigGetTest[0]] : []\r\n                            }\r\n\r\n                          /*  switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [\r\n                                                // ...inputData.masterData.RegistrationTestAttachment, \r\n                                                ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [\r\n                                        // ...inputData.masterData.RegistrationParameter, \r\n                                        ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;*/\r\n\r\n                        }\r\n                       // masterData['ExternalOrderAttachmentList'] = externalOrderAttachmentList;\r\n                       // masterData['OutsourceDetailsList'] = outsourceDetailsList;\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        // let bool = false;\r\n                        // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                        // if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\r\n                        testskip = 0;\r\n                        subsampleskip = 0;\r\n                        // bool = true\r\n                        // }\r\n                        // if (bool) {\r\n                        skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        // }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectednschedulersamplecode: inputData.nschedulersamplecode,\r\n                            selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                                [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.SchedulerConfigGetSubSample,\r\n                        }\r\n                        // let RegistrationTestComment = [];\r\n                        // let RegistrationParameter = [];\r\n                        // let RegistrationTestAttachment = [];\r\n                        // let RegistrationComment = [];\r\n\r\n                        //if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL || inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                            const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode)\r\n                            // START ALPD-3625 VISHAKH\r\n                            // oldSelectedTest.forEach((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n                            oldSelectedTest = oldSelectedTest.filter(item =>\r\n                                wholeTestList.includes(item.nschedulertestcode)\r\n                            );\r\n                            // START ALPD-3625 VISHAKH\r\n                            let keepOld = false;\r\n                            let nschedulertestcode;\r\n                            let nschedulersamplecode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                                    inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"\"\r\n                                    nschedulersamplecode = inputData.masterData.SchedulerConfigGetSample.length > 0 ?\r\n                                    inputData.masterData.SchedulerConfigGetSample[0].nschedulersamplecode : \"\"\r\n                            }\r\n                           /* switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                                        inputData.masterData.RegistrationComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/\r\n                        }\r\n                        //else if (inputData.checkBoxOperation === 5) {\r\n                        else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                         /*   switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            /*switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/\r\n                        }\r\n                     \r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    // let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                   // Start of ALPD-4130 on Save Additional Filter - ATE-241\r\n                    let multifilterInfo = {}\r\n                    if (inputData.multiFilterLoad !== undefined) {\r\n                        if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                            inputData.searchSampleRef.current.value = \"\";\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\";\r\n                        }\r\n                        multifilterInfo = {\r\n                            multiFilterLoad: inputData.multiFilterLoad,\r\n                            openModal: inputData.openModal,\r\n                            searchSampleRef: inputData.searchSampleRef,\r\n                            searchSubSampleRef: inputData.searchSubSampleRef,\r\n                            searchTestRef: inputData.searchTestRef,\r\n                            testskip: inputData.testskip,\r\n                            subsampleskip: inputData.subsampleskip,\r\n                            skip: inputData.skip,\r\n                            // filterColumnActive:true\r\n                        }\r\n                    }\r\n                    //  End of ALPD-4130 ATE-241\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            // ALPD-4130 Additional Filter Info ATE-241\r\n                            ...multifilterInfo,\r\n                            // inputParam:inputData\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n\r\n\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n            }\r\n\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [];\r\n                let nschedulertestcode = selectedTest.length > 0 ? selectedTest.map(x => x.nschedulertestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.SchedulerConfigGetSubSample[0]];\r\n                    if (inputData.masterData.SchedulerConfigGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                if (inputData.masterData.SchedulerConfigGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                //     selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\r\n                // }\r\n                inputData = {\r\n                    ...inputData, nschedulertestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT, skipInfo, masterData\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"nschedulersamplecode\"] = selectedSubSample.map(x => x.nschedulersamplecode).join(\",\")\r\n                        inputData[\"nschedulersubsamplecode\"] = selectedSubSample.map(x => x.nschedulersubsamplecode).join(\",\")\r\n                        // inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                        inputData[\"childTabsKey\"] = [\"SchedulerConfigGetTest\"]\r\n                       dispatch(getSchedulerTestDetail(inputData, true));\r\n                    } else {\r\n                        //dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                  //  dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            }\r\n            else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.nschedulersamplecode,\r\n                    selectedTest: TestSelected ? TestSelected : inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.SchedulerConfigGetSubSample\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                            // START ALPD-3625 VISHAKH\r\n                            // oldSelectedSubSample.forEach((test, index) => {\r\n                            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSample.includes(item.nschedulersubsamplecode)\r\n                            );\r\n                            // END ALPD-3625 VISHAKH\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.SchedulerConfigGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"nschedulersamplecode\"] = selectedSubSample1.map(x => x.nschedulersamplecode).join(\",\")\r\n                                inputData[\"nschedulersubsamplecode\"] = selectedSubSample1.map(x => x.nschedulersubsamplecode).join(\",\")\r\n                                // inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                                inputData[\"childTabsKey\"] = [\"SchedulerConfigGetTest\"]\r\n                                subsamplecheck = false;\r\n                              //  dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldSelectedSubSample.forEach((test, index) => {\r\n                        //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSample.includes(item.nschedulersubsamplecode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.SchedulerConfigGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode)\r\n                // START ALPD-3625 VISHAKH\r\n                // oldSelectedTest.forEach((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.nschedulertestcode)\r\n                );\r\n                // END ALPD-3625 VISHAKH\r\n                let keepOld = false;\r\n                let nschedulertestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"-1\"\r\n                }\r\n               // masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nschedulertestcode, \"nschedulertestcode\")\r\n              //  masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nschedulertestcode, \"nschedulertestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.SchedulerConfigGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                        // activeTabIndex: inputData.activeTabIndex\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}export function getSchedulerTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nschedulersubsamplecode: inputData.nschedulersubsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            selectedTransactionsamplecode: inputData.selectedSubSample && inputData.selectedSubSample.length > 0 && inputData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\"),\r\n            noutsourcerequired: inputData.masterData && inputData.masterData.RealSampleTypeValue ? inputData.masterData.RealSampleTypeValue.noutsourcerequired : transactionStatus.NA\r\n\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"schedulerconfiguration/getSchedulerConfigTest\", inputParamData)\r\n                .then(response => {\r\n                    //sortData(response.data);\r\n                    //ALPD-1609\r\n                    sortData(response.data, 'descending', 'nschedulersamplecode')\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    let oldSelectedSubSample = inputData.masterData.selectedSubSample || []\r\n                   // let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.nschedulersubsamplecode,\r\n                        selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                            [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n\r\n                    //let wholeRegistrationTestComments = [];\r\n                    // let RegistrationTestComment = [];\r\n                    // let RegistrationTestAttachment = [];\r\n                    // let RegistrationParameter = [];\r\n                    // let RegistrationSampleComment = [];\r\n                    // let RegistrationSampleAttachment = [];\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                        const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldSelectedTest.forEach((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n\r\n                        // })\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.nschedulertestcode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                        let keepOld = false;\r\n                        let nschedulertestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                                inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"\"\r\n                        }\r\n                     /*   switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                    inputData.masterData.RegistrationTestAttachment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n*/\r\n\r\n\r\n                    }\r\n                    // else if (inputData.checkBoxOperation === 5) {\r\n                    else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                        /*switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    // else if (inputData.checkBoxOperation === 7) {\r\n                    else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                        let testList = reArrangeArrays(inputData.masterData.SchedulerConfigGetSubSample, response.data.SchedulerConfigGetTest, \"nschedulersubsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\r\n                            SchedulerConfigGetTest: testList ? testList.length > 0 ? testList : [] : [],\r\n                            //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                       /* switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let RegistrationParameter1 = [...resultResponseData];\r\n                                let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1 : -1\r\n\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                      /*  switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldSelectedSubSample.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubsampleList.includes(item.nschedulersubsamplecode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                        let keepOld = false;\r\n                        let nschedulersubsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            nschedulersubsamplecode = masterData.selectedSubSample[0].nschedulersubsamplecode\r\n                        }\r\n\r\n                       /* switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }*/\r\n                    }\r\n                  /*  masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n                    masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n                    masterData['OutsourceDetailsList'] = outsourceDetailsList;*/\r\n                    let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\r\n                    testskip = 0;\r\n                    // bool = true\r\n                    // }\r\n                    if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        // bool = true\r\n                    }\r\n                    // if (bool) {\r\n                    skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                    // }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    //  let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            // activeTabIndex: inputData.activeTabIndex,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            //  inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            // START ALPD-3625 VISHAKH\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersubsamplecode, \"nschedulersubsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            // END ALPD-3625 VISHAKH\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                //     selectedSubSample, checkBoxOperation: 3, activeTabIndex: inputData.masterData.activeTabIndex\r\n                // }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], nschedulertestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT, activeTabIndex: inputData.masterData.activeTabIndex\r\n                }\r\n                //dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedSchedulersubsamplecode: inputData.nschedulersubsamplecode,\r\n                    selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                        [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.ntransactiontestcode)\r\n                // START ALPD-3625 VISHAKH\r\n                // oldSelectedTest.forEach((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                );\r\n                // END ALPD-3625 VISHAKH\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                        inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTabIndex: inputData.activeTabIndex,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function ReloadDataSchedulerConfig(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData, \"descending\", \"nschedulersamplecode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab, regSampleExisted: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailSchedulerConiguration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.nschedulertestcode === \"\") {\r\n            inputData.nschedulertestcode = \"0\";\r\n        }\r\n        if (inputData.nschedulertestcode && inputData.nschedulertestcode.length > 0) {\r\n            let inputParamData = {\r\n                nschedulertestcode: inputData.nschedulertestcode,\r\n                nschedulersamplecode: inputData.nschedulersamplecode,\r\n                ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                userinfo: inputData.userinfo,\r\n                nschedulersubsamplecode: inputData.nschedulersubsamplecode ? inputData.nschedulersubsamplecode :\r\n                    inputData.selectedSubSample && inputData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\")\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n         \r\n          \r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(\"schedulerconfiguration/getSchedulerConfigParameter\", { ...inputParamData })\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedSchedulerSamplecode: inputData.nschedulersamplecode,\r\n                                selectedSchedulerSubSamplecode: inputData.nschedulersubsamplecode,\r\n                                selectedSchedulerTestCode: inputData.nschedulertestcode,\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                                activeTabId: inputData.activeTabId\r\n                            }\r\n                            if (inputData[\"resultDataState\"] && masterData[\"RegistrationParameter\"] && masterData[\"RegistrationParameter\"].length <= inputData[\"resultDataState\"].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [\"resultDataState\"]: {\r\n                                        ...inputData[\"resultDataState\"],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [\"resultDataState\"]: {\r\n                                        ...inputData[\"resultDataState\"],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    activeTabIndex: inputData.activeTabIndex,\r\n                                    activeTabId: inputData.activeTabId,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.info(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulertestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedSchedulerSamplecode: inputData.nschedulersamplecode,\r\n                        selectedSchedulerSubSamplecode: inputData.nschedulersubsamplecode,\r\n                        selectedSchedulerTestCode: inputData.nschedulertestcode,\r\n                    }\r\n                    if (inputData[\"resultDataState\"] && masterData[\"SchedulerConfigurationParameter\"].length <= inputData[\"resultDataState\"].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [\"resultDataState\"]: {\r\n                                ...inputData[\"resultDataState\"],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [\"resultDataState\"]: {\r\n                                ...inputData[\"resultDataState\"],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            \r\n            } else {\r\n            let {  SchedulerConfigurationParameter } = inputData.masterData\r\n            SchedulerConfigurationParameter=[];\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        SchedulerConfigurationParameter\r\n                    }, loading: false,\r\n                    activeTabIndex: inputData.activeTabIndex,\r\n                    activeTabId: inputData.activeTabId,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function addsubSampleSchedulerConfiguration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n    regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\r\n    return function (dispatch) {\r\n        const urlArray = []\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const parentcolumnlist= regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true))\r\n        urlArray[0] = timeZoneService;\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist:parentcolumnlist ,\r\n            childcolumnlist: regchildColumnList,\r\n            userinfo\r\n        })\r\n        urlArray[1] = actualService;\r\n\r\n        if (specBasedComponent) {\r\n            const ComponentTestBySpec = rsapi.post(\"/schedulerconfiguration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent,\r\n                userinfo\r\n            })\r\n            urlArray[2] = ComponentTestBySpec;\r\n        } else {\r\n\r\n            const TestGet = rsapi.post(\"/schedulerconfiguration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                slno: 1,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n                nneedsubsample: Map[\"nneedsubsample\"]\r\n\r\n            })\r\n            urlArray[2] = TestGet;\r\n            const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[5] = TestPackageGet;\r\n            const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getTestfromSection\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[6] = TestSectionGet;\r\n\r\n        }\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n\r\n        urlArray[3] = currentDate\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n        urlArray[4] = dateService\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data,\r\n                    selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = [];\r\n                let TestSectionData = [];\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (specBasedComponent) {\r\n\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n                    //Commented by Dhanushya for jira ETICA-22\r\n                    // if (lstComponent.length > 0) {\r\n                    //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                    //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                    //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                    //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    // }\r\n\r\n                } else {\r\n                    //if (specBasedTestPackage) {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n                    const TestSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n\r\n                    // if (PackageData.length === 0) {\r\n                    //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    // } \r\n                    // }\r\n                    // else {\r\n                    TestCombined = response[2].data;\r\n                    // }\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n\r\n                regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                const inputParam = {\r\n                    screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openModal: true,\r\n                    loadPrinter: false,\r\n                    operation: \"create\",\r\n                    loadScheduleSubSample: true,\r\n                    selectedRecord: selectedRecord1,\r\n                    regSubSamplecomboData: comboData1,\r\n                    regSubSamplecomboComponents,\r\n                    regSubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    regparentSubSampleColumnList: regcolumnList,\r\n                    regchildSubSampleColumnList: regchildColumnList,\r\n                    ncontrolCode: ncontrolcode,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    specBasedComponent,\r\n                    specBasedTestPackage,\r\n                    TestPackage: PackageData,\r\n                    //ALPD-624\r\n                    testskip: 0,\r\n                    subsampleskip: 0,\r\n                    TestSection: TestSectionData, AllTest: TestCombined, AllSection: TestSectionData\r\n                }\r\n                // if (specBasedComponent) {\r\n                //Added by Dhanushya for jira ETICA-22\r\n                if (specBasedComponent && selectedRecord1['ncomponentcode']!==undefined) {\r\n\r\n                    dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        Component = Component ? Component : []\r\n        const TestGet = rsapi.post(\"/schedulerconfiguration/getTestfromDB\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage,\r\n            nneedsubsample: selectedobject.nneedsubsample\r\n        });\r\n        urlArray[0] = TestGet;\r\n        const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[1] = TestPackageGet;\r\n\r\n        const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getTestfromSection\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[2] = TestSectionGet;\r\n        Axios.all(urlArray).then(response => {\r\n            let PackageData = []\r\n            let TestData = []\r\n            let TestSectionData = []\r\n            // if (specBasedTestPackage) {\r\n            const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                \"stestpackagename\", undefined, undefined, true);\r\n            PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n            const testSectionDataMap = constructOptionList(response[2].data.TestSection || [], \"nsectioncode\",\r\n                \"ssectionname\", undefined, undefined, true);\r\n            TestSectionData = testSectionDataMap.get(\"OptionList\");\r\n\r\n            // if (PackageData.length === 0) {\r\n            //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n            // } \r\n            //   }\r\n            //    else {\r\n            TestData = response[0].data;\r\n            //  }\r\n            //let Test = [];\r\n            // Test[selectedobject.slno] = TestData;\r\n            const Map = {}\r\n            if (Reg) {\r\n                Map[\"selectedRecord\"] = selectedobject\r\n            } else {\r\n                Map[\"selectComponent\"] = selectedobject\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...inputParam, TestCombined: TestData, AllTest: TestData, TestPackage: PackageData, ...Map, loading: false, selectedTestData: [],\r\n                    selectPackage: [], TestSection: TestSectionData, selectSection: [], AllSection: TestSectionData\r\n\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function testSectionTest(selectedobject, Reg, specBasedComponent, Component, selectComponent, objComponent, LoginProps, selectPackage, selectSection, subSampleBased, selectedSpec, nneedsubsample, action) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        Component = Component ? Component : []\r\n        rsapi.post(\"/schedulerconfiguration/getTestBasedTestSection\", {\r\n            nspecsampletypecode: selectComponent && selectComponent.nspecsampletypecode ? selectComponent.nspecsampletypecode : selectedobject.nspecsampletypecode,\r\n            specBasedComponent: specBasedComponent,\r\n            ntestpackagecode: selectPackage.ntestpackagecode && selectPackage.ntestpackagecode.value || -1,\r\n            nsectioncode: selectSection.nsectioncode.value,\r\n            nallottedspeccode: selectedSpec && selectedSpec.value !== undefined ? selectedSpec.value : selectedobject.nallottedspeccode\r\n        })\r\n            .then(response => {\r\n                const Map = {}\r\n                let TestData = response.data;\r\n                let Test = (action !== \"AddSubSample\") ? (LoginProps.Test || []) : [];\r\n\r\n                let componentTest = [];\r\n                if (subSampleBased) {\r\n                    componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\r\n\r\n                } else {\r\n                    componentTest = objComponent && Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n\r\n                }\r\n                const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n\r\n                delete selectedobject.ntestgrouptestcode;\r\n                if (Reg) {\r\n                    Map[\"selectedRecord\"] = selectedobject\r\n                } else {\r\n                    Map[\"selectPackage\"] = selectPackage\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        availableTest, TestCombined, ...Map, loading: false, selectedTestData: [],\r\n                        AllTest: LoginProps.AllTest\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function saveSchedulerSubSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSubSampleWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSubSample\", inputParam.inputData);\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                let SchedulerConfigGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.SchedulerConfigGetSubSample, response.data[\"selectedSubSample\"]);\r\n                let SchedulerConfigGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample = response.data[\"selectedSubSample\"];\r\n                //let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"] && response.data[\"SchedulerConfigGetSubSample\"];\r\n                SchedulerConfigGetTest = sortData(SchedulerConfigGetTest, \"nschedulersamplecode\", \"desc\");\r\n                let selectedTest = SchedulerConfigGetTest.length > 0 ? [SchedulerConfigGetTest[0]] : [];\r\n                let SchedulerConfigurationParameter = response.data[\"SchedulerConfigurationParameter\"];\r\n                SchedulerConfigurationParameter = SchedulerConfigurationParameter ? getSameRecordFromTwoArrays(SchedulerConfigurationParameter, selectedTest, 'nschedulertestcode') : SchedulerConfigurationParameter;\r\n              //  let SchedulerConfigGetSample = replaceUpdatedObject(response.data[\"selectedSample\"], inputParam.inputData.masterData.SchedulerConfigGetSample, 'nschedulersamplecode');\r\n                //let selectedSample = response.data[\"selectedSample\"];\r\n\r\n\r\n\r\n                let masterData = { ...inputParam.inputData.masterData }\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSubSample, selectedTest,\r\n                    SchedulerConfigGetSubSample, SchedulerConfigGetTest, SchedulerConfigurationParameter,\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadScheduleSubSample: false,\r\n                    showConfirmAlert: false,\r\n                    subSampleConfirmMessage: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                \r\n            })\r\n            .catch(error => {\r\n               \r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, subSampleConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                subSampleConfirmMessage: error.response.data.rtn,\r\n                                subSampleConfirmParam: { inputParam },\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    } else if (error.response.data.rtn) {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data.rtn\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, subSampleConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getEditSchedulerSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n    childColumnList, comboComponents,\r\n    withoutCombocomponent, specBasedComponent) {\r\n    return function (dispatch) {\r\n        let { userInfo, operation, masterData } = { ...inputParam };\r\n        if(masterData[\"selectedSubSample\"][0].ntransactionstatus===transactionStatus.DRAFT){\r\n\r\n        if (masterData[\"selectedSubSample\"].length > 1 ||\r\n            masterData[\"selectedSubSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"] = true;\r\n        }\r\n\r\n        masterData[\"selectedSubSample\"] = [];\r\n        masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        inputParam.editSubSampleSchedulerParam[\"nschedulersamplecode\"] = inputParam[\"mastertoedit\"][\"nschedulersamplecode\"];\r\n        inputParam.editSubSampleSchedulerParam[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n        inputParam.editSubSampleSchedulerParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\r\n        inputParam.editSubSampleSchedulerParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\r\n\r\n        const nschedulersubsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        if (nschedulersubsamplecode === undefined) {\r\n            toast.info(intl.formattedMessage({ id: \"IDS_SELECTVALIDSUBSAMPLE\" }));\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n           \r\n            const selectedRegistration = rsapi.post(\"/schedulerconfiguration/getEditSchedulerSubSampleComboService\", {\r\n                ...inputParam.editSubSampleSchedulerParam, nschedulersubsamplecode, parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo: userInfo\r\n            })\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo: userInfo\r\n            })\r\n\r\n\r\n            urlArray = [timeZoneService, selectedRegistration, dateService]\r\n          \r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n\r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                    if (specBasedComponent) {\r\n                        selectedRecord[\"ncomponentcode\"] = { label: selectedRecord[\"scomponentname\"], value: selectedRecord[\"ncomponentcode\"] }\r\n                    }\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    // withoutCombocomponent.map(date => {\r\n                    //     if (date.inputtype === 'date')\r\n                    //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                    //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\r\n                    // })\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n\r\n                    if (inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"] === true) {\r\n                        if (masterData[\"searchedTest\"]) {\r\n                            if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                                inputParam.searchTestRef.current.value = \"\"\r\n                                masterData['searchedTest'] = undefined\r\n                            }\r\n                        }\r\n                        masterData = { ...masterData, ...response[1].data[\"SubSampleChildDetail\"] };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadScheduleSubSample: true,\r\n                            screenName: \"IDS_SUBSAMPLE\",\r\n                            operation: \"update\",\r\n                            specBasedComponent,\r\n                            //  regRecordToEdit:recordToEdit\r\n                            masterData,\r\n                            loadPreregister:true,\r\n                            withoutCombocomponent\r\n                        }\r\n                    })\r\n                \r\n                    // }\r\n                })\r\n                \r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.info(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n            \r\n            \r\n            \r\n        }\r\n    }else{\r\n        toast.warn(intl.formatMessage({\r\n            id:\"IDS_DRAFTTOEDITSUBSAMPLE\"\r\n        }));\r\n    }\r\n    }\r\n}\r\nexport function updateSchedulerConfigSubSample(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSampleWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSample\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            // rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                //if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n              //  }\r\n                // else{\r\n                //     masterData={...masterData,\"SchedulerConfigGetSubSample\":response.data[\"SchedulerConfigGetSubSample\"]} \r\n                // }\r\n                \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.selectedTest, \"nschedulertestcode\"),\r\n                    SchedulerConfigGetTest,\r\n                    \r\n                    \r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteSchedulerSubSample(Map, userInfo,masterData,ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigSubSample\", {...Map,\"userinfo\":userInfo})\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n                //replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n              \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                   \r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    //selectedTest: response.data[\"selectedTest\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    SchedulerConfigGetTest,\r\n                    SchedulerConfigGetSubSample,\r\n                    searchedSubSample:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,ncontrolcode,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreSchedulerConfigTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\r\n            if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\r\n                value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode)\r\n                if (value) {\r\n                    return toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                }\r\n                //sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n                //const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\r\n                // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\r\n                //if (selectedsample && selectedsample.length > 0) {\r\n\r\n                const selectedsample = inputParam.selectedSample;\r\n                const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n                if (findTransactionStatus.length === 1) {\r\n                    if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                        if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\r\n\r\n                            // if (selectsubsample && selectsubsample.length > 0) {\r\n                            //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\r\n                            //\r\n                            //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \r\n                            //     {                    \r\n\r\n                            const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                            if (findApprovalVersion.length === 1) {\r\n                                const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                                //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                                if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                                {\r\n                                    inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample &&\r\n                                        [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n                                    dispatch(initRequest(true));\r\n                                    const urlArray = []\r\n                                    const TestGet = rsapi.post(\"/schedulerconfiguration/getMoreTest\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[0] = TestGet;\r\n                                    const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getMoreTestPackage\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[1] = TestPackageGet;\r\n\r\n                                    const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getMoreTestSection\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[2] = TestSectionGet;\r\n\r\n                                    Axios.all(urlArray)\r\n                                        .then(response => {\r\n                                            let PackageData = []\r\n                                            let TestSectionData = []\r\n                                            const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\",\r\n                                                \"stestpackagename\", undefined, undefined, true);\r\n                                            PackageData = PackageDataMap.get(\"OptionList\");\r\n                                            const TestSectionDataMap = constructOptionList(response[2].data || [], \"nsectioncode\",\r\n                                                \"ssectionname\", undefined, undefined, true);\r\n                                            TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n                                            dispatch({\r\n                                                type: DEFAULT_RETURN,\r\n                                                payload: {\r\n                                                    availableTest: response[0].data,\r\n                                                    TestCombined: response[0].data,\r\n                                                    AllTest: response[0].data,\r\n                                                    TestPackage: PackageData,\r\n                                                    loadChildTest: true,\r\n                                                    loading: false, ncontrolCode,\r\n                                                    screenName: \"IDS_TEST\",\r\n                                                    operation: \"create\",\r\n                                                    openModal: true,\r\n                                                    parentPopUpSize: \"lg\",\r\n                                                    selectedRecord: {},\r\n                                                    showSample: undefined,\r\n                                                    loadPrinter: false, TestSection: TestSectionData, AllSection: TestSectionData\r\n                                                }\r\n                                            });\r\n                                        })\r\n                                        .catch(error => {\r\n                                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                            if (error.response.status === 500) {\r\n                                                toast.error(error.message);\r\n                                            } else {\r\n                                                toast.info(this.props.formatMessage({ id: error.response.data }));\r\n                                            }\r\n                                        });\r\n                                } else {\r\n                                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                                }\r\n                            } else {\r\n                                toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                            }\r\n                            //     }\r\n                            //     else {\r\n                            //         toast.info(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\r\n                            //     }\r\n                            // }                               \r\n                        }\r\n                        else {\r\n                            toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\" }));\r\n                        }\r\n                    }\r\n                    else {\r\n                        ////     toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                        toast.info(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                    }\r\n                } else {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n                }\r\n                // } else {\r\n                //     toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n                // }\r\n            } else {\r\n                toast.info(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const createSchedulerTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let SchedulerConfigGetTest = updatedObjectWithNewElement(masterData[\"SchedulerConfigGetTest\"], response.data[\"SchedulerConfigGetTest\"]);\r\n\r\n                //let RegistrationGetSub    Sample = updatedObjectWithNewElement(masterData[\"RegistrationGetSubSample\"], response.data[\"RegistrationGetSubSample\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    SchedulerConfigGetTest: sortData(SchedulerConfigGetTest, \"descending\", \"nschedulertestcode\"),\r\n                    SchedulerConfigurationParameter:response.data[\"SchedulerConfigurationParameter\"]&&response.data[\"SchedulerConfigurationParameter\"],\r\n                    selectedTest: response.data[\"SchedulerConfigGetTest\"],\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined\r\n\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'no';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, createTestConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                createTestConfirmMessage: error.response.data.rtn,\r\n                                createTestConfirmParam: { inputParam, masterData, modalName },\r\n\r\n                                //[modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: true,\r\n                                showSample: undefined\r\n\r\n\r\n                                //openModal: false,\r\n                                //selectedRecord: {}\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                [modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: false,\r\n                                showSample: undefined,\r\n                                openModal: false,\r\n                                selectedRecord: {},\r\n                                createTestConfirmMessage: undefined\r\n\r\n\r\n                            }\r\n                        });\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function deleteSchedulerConfigTest(Map, userInfo,masterData,ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigTest\", {...Map,\"userinfo\":userInfo})\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n              \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                let SchedulerConfigurationParameter = response.data[\"SchedulerConfigurationParameter\"];\r\n\r\n                //let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    //selectedTest: response.data[\"selectedTest\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    SchedulerConfigGetTest,\r\n                    SchedulerConfigurationParameter,\r\n                    searchedTest:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,ncontrolcode,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditSchedulerConfigComboService(inputParam, columnList,\r\n    selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent, editableComboList) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n        let masterData = inputParam[\"masterData\"];\r\n        let parentColumnList = [...columnList, ...editableComboList];\r\n        if (masterData[\"selectedSample\"].length > 1 ||\r\n            masterData[\"selectedSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] = true;\r\n        }\r\n        masterData[\"selectedSample\"] = [];\r\n        masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        const nschedulersamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n       \r\n        const selectedRegistration = rsapi.post(\"/schedulerconfiguration/getEditSchedulerConfigDetails\", {\r\n            ...inputParam.editSchedulerSampleParam, nschedulersamplecode, parentcolumnlist: parentColumnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo: userInfo, nallottedspeccode: inputParam.mastertoedit.nallottedspeccode || -1\r\n        })\r\n\r\n        \r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo: userInfo\r\n        })\r\n        const siteService = rsapi.post(\"schedulerconfiguration/getSiteByUser\", {\r\n            userinfo: userInfo})\r\n         \r\n            const schedulerMasterService = rsapi.post(\"schedulerconfiguration/getSchedulerMaster\", {\r\n                userinfo: userInfo})\r\n\r\n        urlArray = [timeZoneService, selectedRegistration, dateService,siteService,schedulerMasterService]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n                selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n              \r\n                let siteMap=[];\r\n                let siteList=[];\r\n                let schedulerList=[];\r\n                if(response[3].data.userSite!==undefined){\r\n                    siteMap = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\r\n                    siteList = siteMap.get(\"OptionList\");\r\n                }\r\n                if(response[4].data.ScheduleMaster!==undefined){\r\n                    schedulerList = constructOptionList(response[4].data.ScheduleMaster || [], \"nschedulecode\", \"sschedulename\", undefined, undefined, true).get(\"OptionList\");\r\n                  \r\n                }\r\n                 \r\n\r\n                    // if(selectedRecord['Site']!==undefined){\r\n                    //     selectedRecord['nsitecode'] = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true).get(\"OptionList\");\r\n                    // // siteList = siteMap.get(\"OptionList\");\r\n                    // }\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n\r\n                \r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    // ALPD-3393\r\n                    if (inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] === true) {\r\n                        masterData = sortData({ ...masterData, ...response[1].data[\"SampleChildDetail\"] })\r\n                    }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterData } });\r\n                }\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    if (editableComboList.length > 0) {\r\n                        editableComboList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes, specValue } = [];\r\n                    specValue = [{ nallottedspeccode: selectedRecord.nallottedspeccode, sspecname: selectedRecord.sspecname, sversion: selectedRecord.sversion }];\r\n                    const selectedSpec = {}\r\n                    Specification = constructOptionList(specValue || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    \r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ?\r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                    selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n\r\n                    if (inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] === true) {\r\n                        masterData = sortData({ ...masterData, ...response[1].data[\"SampleChildDetail\"] })\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                           \r\n                            selectedSpec,\r\n                            Specification,\r\n                            operation: \"update\",\r\n                            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editSchedulerSampleParam.ncontrolCode,\r\n                            loadPreregister:true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData,\r\n                            childColumnList, comboComponents,\r\n                            withoutCombocomponent,\r\n                            columnList,\r\n                            masterData,\r\n                            siteList,\r\n                            schedulerList\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.info(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function updateSchedulerConfig(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfig\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n                    //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedSample: response.data[\"selectedSample\"],\r\n                        \r\n                        SchedulerConfigurationParameter: masterData[\"SchedulerConfigurationParameter\"]\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                            regDateEditConfirmMessage: undefined, loadEsign: false, openModal: false,\r\n                            loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                        }\r\n                    });\r\n                  \r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignforSchedulerConfig(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"schedulerconfiguration\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n\r\n                case \"editSchedulerConfig\":\r\n                    dispatch(updateSchedulerConfig(screenData.inputParam, screenData.masterData));\r\n                    break;\r\n\r\n                    case \"editSubSample\":\r\n                    dispatch(updateSchedulerConfigSubSample(screenData.inputParam, screenData.masterData));\r\n                    break;\r\n\r\n                    case \"deleteSubSample\":\r\n                    dispatch(deleteSchedulerSubSample(screenData.inputParam.Map, screenData.inputParam.inputData.userinfo,screenData.masterData,screenData.inputParam.ncontrolCode));\r\n                    break;\r\n\r\n                    case \"deleteSchedulerTest\":\r\n                    dispatch(deleteSchedulerConfigTest(screenData.inputParam.Map, screenData.inputParam.inputData.userinfo,screenData.masterData,screenData.inputParam.ncontrolCode));\r\n                     break;   \r\n\r\n                     case \"deleteSample\":\r\n                    dispatch(deleteSchedulerConfig(screenData.inputParam.Map, screenData.masterData));\r\n                     break;  \r\n\r\n                     case \"approveSample\":\r\n                        dispatch(approveSchedulerConfig(screenData.inputParam, screenData.masterData));\r\n                         break; \r\n\r\n                         case \"activeInactive\":\r\n                            dispatch(updateActiveStatusSchedulerConfig(screenData.inputParam));\r\n                             break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function approveSchedulerConfig(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n      \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/approveSchedulerConfig\", {...inputParam.approveSchedulerSampleParam,nschedulersamplecode:inputParam.nschedulersamplecode,\r\n                sinstrumentid:inputParam.masterData.selectedSample[0][inputParam.approveSchedulerSampleParam.sinstrumentidLabel],\r\n                ninstrumentcode:inputParam.masterData.selectedSample[0]['ninstrumentcode'],\r\n                nschedulecode:inputParam.mastertoapprove.nschedulecode,\r\n// ALPD-5332 Added by Abdul for MAterial Scheduler\r\n                nmaterialcode:inputParam.masterData.selectedSample[0]['nmaterialcode'],\r\n                nsitecode:(inputParam.mastertoapprove && inputParam.mastertoapprove.ninstrumentsitecode && inputParam.mastertoapprove.ninstrumentsitecode!==-1) ?inputParam.mastertoapprove.ninstrumentsitecode :-1 ,\r\n// ALPD-5332 End           \r\n}\r\n            \r\n            )\r\n       \r\n        return requestUrl\r\n           \r\n            .then(response => {\r\n                sortData(response.data);\r\n                //if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], inputParam.masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], inputParam.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\")\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], inputParam.masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n                // let SchedulerConfigGetSample=response.data[\"SchedulerConfigGetSample\"]&&response.data[\"SchedulerConfigGetSample\"];\r\n                // let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"]&&response.data[\"SchedulerConfigGetSubSample\"];\r\n                // let SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"]&&response.data[\"SchedulerConfigGetTest\"];\r\n                 if(response.data[\"SchedulerConfigGetSampleBefore\"]!==undefined){\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSampleBefore\"], inputParam.masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n\r\n                 }\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    // SchedulerConfigGetSample,\r\n                    // SchedulerConfigGetSubSample,\r\n                    // SchedulerConfigGetTest,\r\n                    selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], inputParam.masterData.selectedSample, \"nschedulersamplecode\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], inputParam.masterData.selectedSubSample, \"nschedulersubsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], inputParam.masterData.selectedTest, \"nschedulertestcode\"),\r\n                    \r\n                    \r\n                    \r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}\r\n                    }\r\n                });\r\n                \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteSchedulerConfig(inputParam,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfig\", {...inputParam.deleteSchedulerSampleParam,\r\n                nschedulersamplecode:inputParam.nschedulersamplecode\r\n                })\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n              \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n                let SchedulerConfigGetSample = response.data[\"SchedulerConfigGetSample\"];\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    SchedulerConfigGetTest,\r\n                    SchedulerConfigGetSubSample,\r\n                    SchedulerConfigGetSample,\r\n                    searchedSubSample:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                         selectedRecord: {}, showSample: undefined\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function updateActiveStatusSchedulerConfig(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateActiveStatusSchedulerConfig\", {...inputParam.activeInactiveSchedulerSampleParam,\r\n                nschedulersamplecode:inputParam.nschedulersamplecode,nactivestatus:inputParam.selectedSample[0].nactivestatus\r\n            })\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n              let masterData={...inputParam.masterData};\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\")\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    searchedSubSample:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSchedulerMasteDetails(Map, selectedFilter, masterData, searchRef) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getSchedulerMasteDetails\", Map)\r\n            .then(response => {\r\n                const SchedulerMasterDeatils = response.data[\"ScheduleMasterDetails\"] && response.data[\"ScheduleMasterDetails\"];\r\n                sortData(response.data)\r\n                // MAHProductManufacturer.length > 0 ?\r\n                //     selectedFilter[\"nproductmanufcode\"] = {\r\n                //         \"value\": MAHProductManufacturer[0].nproductmanufcode,\r\n                //         \"label\": MAHProductManufacturer[0].smanufname\r\n                //     } : selectedFilter[\"nproductmanufcode\"] = \"\";\r\n                selectedFilter[\"sschedulename\"] = SchedulerMasterDeatils && \r\n                SchedulerMasterDeatils[0].sschedulename ||\"\"\r\n\r\n                let startdate=SchedulerMasterDeatils[0].sstartdate !== undefined ?\r\n                SchedulerMasterDeatils[0].sstartdate.substring(0, 10):\"\";\r\n\r\n                let starttime=SchedulerMasterDeatils[0] &&\r\n                SchedulerMasterDeatils[0].sstarttime !== undefined ?\r\n                SchedulerMasterDeatils[0].sstarttime.substring(16, 11):\"\";\r\n           \r\n                let enddate=SchedulerMasterDeatils[0] !== undefined ?\r\n                SchedulerMasterDeatils[0].senddate.substring(0, 10) : \"\";\r\n\r\n                 let endtime=SchedulerMasterDeatils[0] &&\r\n                 SchedulerMasterDeatils[0].sendtime !== undefined ?\r\n                 SchedulerMasterDeatils[0].sendtime.substring(16, 11) : \"\"\r\n                 \r\n                let startdatetime= startdate+\" \"+starttime;\r\n                let enddatetime=enddate+\" \"+endtime;\r\n               \r\n                // SchedulerMasterDeatils = {\r\n                //     ...SchedulerMasterDeatils,\r\n                //     \"0\": {  \r\n                //         ...SchedulerMasterDeatils[\"0\"],\r\n                //       \"startdatetime\": startdatetime,\r\n                //       \"enddatetime\": enddatetime\r\n                //     }\r\n                //   };\r\n                  \r\n                  \r\n                  /*  let idslabel;\r\n                    let fieldToShow;\r\n\r\n                    if (SchedulerMasterDeatils.sscheduletype === \"O\") {\r\n                        idslabel=\"IDS_ONETIME\";\r\n                      } else if (SchedulerMasterDeatils.sscheduletype === \"D\") {\r\n                        idslabel=\"IDS_DAILY\";\r\n                      } else if (SchedulerMasterDeatils.sscheduletype === \"W\") {\r\n                        idslabel=\"IDS_WEEKLY\";\r\n                      } else {\r\n                        idslabel=\"IDS_MONTHLY\";\r\n                      }\r\n\r\n               /*     SchedulerMasterDeatils = {\r\n                        ...SchedulerMasterDeatils,\r\n                        sscheduletype: SchedulerMasterDeatils.sscheduletype === \"O\" ? intl.formatMessage({ id: \"IDS_ONETIME\" }) :\r\n                                       SchedulerMasterDeatils.sscheduletype === \"D\" ? intl.formatMessage({ id: \"IDS_DAILY\" }) :\r\n                                       SchedulerMasterDeatils.sscheduletype === \"W\" ? intl.formatMessage({ id: \"IDS_WEEKLY\" }) :\r\n                                       intl.formatMessage({ id: \"IDS_MONTHLY\" })  // Default case\r\n                      };\r\n\r\n                    //idslabel=idslabel.push(\"IDS_STARTDATEANDTIME\");\r\n                    fieldToShow=\"stempscheduleType\";\r\n*/\r\n\r\n\r\n                // selectedFilter[\"nproductmanufcode\"] = MAHProductManufacturer && MAHProductManufacturer.length > 0 ?\r\n                //     MAHProductManufacturer[0].nproductmanufcode : -1\r\n\r\n                    let selectedRecord={};\r\n                    selectedRecord=selectedFilter;\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                   ...response.data\r\n                    \r\n                   \r\n                };\r\n                if(searchRef!== undefined &&searchRef.current !== null){\r\n                    searchRef.current.value='';\r\n                    masterData['searchedData']=undefined;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                       // selectedFilter,\r\n                        selectedRecord,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}