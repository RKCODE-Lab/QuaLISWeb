{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\approvalconfig\\\\ApprovalConfig.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster } from '../../../actions';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faCopy, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { sortData, getControlMap, showEsign, constructOptionList } from '../../../components/CommonScript';\nimport { process } from '@progress/kendo-data-query';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport Esign from '../../audittrail/Esign';\nimport SampleFilter from './SampleFilter';\nimport AddApprovalConfig from './AddApprovalConfig';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\nimport { openModal, updateStore, getApprovalConfigVersion, getApprovalConfigEditData, copyVersion, setDefault, validateEsignCredential, getFilterChange, getRoleDetails, getCopySubType, filterColumnData, getApprovalConfigurationVersion, approveVersion } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { ApprovalSubType, designProperties, transactionStatus } from '../../../components/Enumeration';\nimport FilterStatusTab from './FilterStatusTab';\nimport ValidationStatusTab from './ValidationStatusTab';\nimport UserRoleAccordion from './UserRoleAccordion';\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\nimport DecisionStatusTab from './DecisionStatusTab';\nimport ActionStatusTab from './ActionStatusTab'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component'; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ApprovalConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteApprovalConfigVersion = deleteId => {\n      if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED || this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"versionData\",\n          selectedObject: \"selectedVersion\",\n          primaryKeyField: \"napproveconfversioncode\",\n          primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n          fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\n          fecthInputObject: {\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            userinfo: this.props.Login.userInfo\n          } // unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\",\n          //  \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\",\n          //     \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\n\n        };\n        const inputData = {\n          'approvalconfigversion': {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue.value,\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        inputData['userinfo'] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: 'ApprovalConfigVersion',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_APPROVALCONFIG\",\n          inputData: inputData,\n          postParam,\n          operation: \"delete\"\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: \"delete\",\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_APPROVALCONFIG\"\n              })\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.approveVersion = approveId => {\n      if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED || this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        if (this.approvalSubTypeValue.value === 2) {\n          const inputData = {\n            // 'approvalconfigversion': {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n            userinfo: this.props.Login.userInfo,\n            nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\n            sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\n            nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1 // nregtypecode:this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\n            // }\n\n          };\n          inputData['userinfo'] = this.props.Login.userInfo; //  inputData['userinfo'] = this.props.Login.userInfo\n\n          const inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: inputData,\n            operation: \"approve\",\n            ncontrolcode: approveId\n          }; //const masterData = this.props.Login.masterData;\n\n          this.props.approveVersion(inputParam); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\n          //     const updateInfo = {\n          //         typeName: DEFAULT_RETURN,\n          //         data: {\n          //             loadEsign: true, screenData: { inputParam, masterData },\n          //             openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\n          //         }\n          //     }\n          //     this.props.updateStore(updateInfo);\n          // }\n          // else {\n          //     this.props.crudMaster(inputParam, masterData, \"openModal\");\n          // }\n        } else {\n          const inputData = {\n            'approvalconfigversion': {\n              napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              napprovalsubtypecode: this.approvalSubTypeValue.value,\n              ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n              userinfo: this.props.Login.userInfo,\n              nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\n              sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\n              nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1\n            }\n          };\n          inputData['userinfo'] = this.props.Login.userInfo;\n          const inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: inputData,\n            operation: \"updateapprove\",\n            ncontrolcode: approveId\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: this.props.intl.formatMessage({\n                  id: \"IDS_APPROVALCONFIG\"\n                }),\n                operation: \"approve\"\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        }\n      }\n    };\n\n    this.getGridJsondata = templatedata => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          //console.log(\"component2:\", component);\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // console.log(\"component row2:\", componentRow);\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\n                  \"tablecolumnname\": componentRow.valuemember,\n                  \"foriegntablename\": componentRow.source,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              } // samplesearchfields.push(componentRow.label)\n\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              }); // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            //console.log(\"component2:\", component);\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.label,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.column.value,\n                \"foriegntablename\": component.source,\n                ...comboDataInputObject\n              });\n            } // samplesearchfields.push(component.label)\n\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n            }\n\n            if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields\n      }; //console.log(\"dynamiccolumns:\", jdynamiccolumns);\n\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey\n      };\n    };\n\n    this.approveVersion1 = approveId => {\n      if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED || this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"versionData\",\n          selectedObject: \"selectedVersion\",\n          primaryKeyField: \"napproveconfversioncode\",\n          primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n          fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\n          fecthInputObject: {\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            userinfo: this.props.Login.userInfo\n          },\n          unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\", \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\n        };\n        let {\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey\n        } = this.getGridJsondata(this.props.Login.selectedTemplate && this.props.Login.selectedTemplate);\n        const inputData = {\n          'approvalconfigversion': {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: this.approvalSubTypeValue.value,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\n            userinfo: this.props.Login.userInfo,\n            nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\n            sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\n            sviewname: this.state.selectedRecord.sviewname,\n            ndesigntemplatemappingcode: this.state.selectedRecord.ndesigntemplatemappingcode.value,\n            sregtemplatename: this.state.selectedRecord.ndesigntemplatemappingcode.label\n          },\n          jdynamiccolumns,\n          jnumericcolumns,\n          sprimarykey: templatePrimaryKey\n        };\n        inputData['userinfo'] = this.props.Login.userInfo; // inputData['jsondata'] = this.props.Login.userInfo\n\n        const inputParam = {\n          methodUrl: 'ApprovalConfigVersion',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_APPROVALCONFIG\",\n          inputData: inputData,\n          postParam,\n          operation: \"updateapprove\"\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_APPROVALCONFIG\"\n              }),\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"copy\") {\n        const subTypeCode = this.approvalSubTypeValue.value;\n        const inputData = {\n          approvalconfigversion: {\n            napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n            napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n            napprovalsubtypecode: subTypeCode,\n            sversionname: this.state.selectedRecord.sversionname,\n            nregtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regtype'] ? this.state.selectedRecord['regtype'].value : this.state.registrationTypeValue[0].value : -1,\n            nregsubtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regsubtype'] ? this.state.selectedRecord['regsubtype'].value : this.state.registrationSubTypeValue[0].value : -1,\n            userinfo: this.props.Login.userInfo,\n            ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1\n          }\n        };\n        inputData['userinfo'] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: 'ApprovalConfigVersion',\n          classUrl: this.props.Login.inputParam.classUrl,\n          displayName: \"IDS_APPROVALCONFIG\",\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: \"copy\"\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_APPROVALCONFIG\"\n              }),\n              operation: \"copy\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else if (this.props.Login.operation === 'approve') {\n        this.approveVersion1(this.props.Login.ncontrolcode);\n      } else {\n        let bool = true;\n        let errormessage = [];\n        let inputData = {};\n        let approvalconfigrole = [];\n        let filterDetailCount = 0;\n        let validationDetailCount = 0;\n        let decisionDetailCount = 0;\n        let actionDetailCount = 0;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData['napprovalconfigcode'] = this.props.Login.masterData.realApprovalConfigCode;\n        inputData['ntreeversiontempcode'] = this.props.Login.userRoleTree[0].ntreeversiontempcode;\n        inputData['napprovalsubtypecode'] = this.approvalSubTypeValue.value;\n        let isAutoApprovalVersion = this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? true : false;\n        const userRoleTree = this.props.Login.userRoleTree.reverse();\n        userRoleTree.map(role => {\n          let approvalconfigrolefilterdetail = [];\n          let approvalconfigrolevalidationdetail = [];\n          let approvalconfigroledecisiondetail = [];\n          let approvalconfigroleactiondetail = []; //to fill role details\n\n          if (this.state.selectedRecord[role.nuserrolecode]) {\n            approvalconfigrole.push({\n              napprovalconfigrolecode: this.props.Login.operation === 'create' ? 0 : role.napprovalconfigrolecode,\n              napprovalconfigcode: role.napprovalconfigcode,\n              ntreeversiontempcode: role.ntreeversiontempcode,\n              nuserrolecode: role.nuserrolecode,\n              nchecklistversioncode: this.state.selectedRecord[role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode].checklist ? this.state.selectedRecord[role.nuserrolecode].checklist : transactionStatus.NA : transactionStatus.NA,\n              npartialapprovalneed: this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] : transactionStatus.YES,\n              nsectionwiseapprovalneed: this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] === transactionStatus.NO ? this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] : transactionStatus.NO : transactionStatus.NO,\n              // nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] : transactionStatus.NO,\n              // nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] : transactionStatus.NO,\n              // nretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] : transactionStatus.NO,\n              // nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] ?\n              //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] : transactionStatus.NO,\n              // nlevelno: role.nlevelno,\n              nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] : transactionStatus.NO,\n              nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] : transactionStatus.NO,\n              nretestneed: this.state.selectedRecord[role.nuserrolecode]['Retest_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Retest_' + role.nuserrolecode] : transactionStatus.NO,\n              nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['Recalc_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['Recalc_' + role.nuserrolecode] : transactionStatus.NO,\n              nlevelno: role.nlevelno,\n              napprovalstatuscode: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautoapproval: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? transactionStatus.YES : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] : transactionStatus.NO,\n              nautoapprovalstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautodescisionstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] : transactionStatus.PASS : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].decisionstatus && this.state.selectedRecord[role.nuserrolecode].decisionstatus.length > 0 ? this.state.selectedRecord[role.nuserrolecode].decisionstatus[0] : transactionStatus.DRAFT // :this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus&&this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus.length>0 ?\n              // :transactionStatus.NA\n              ,\n              ncorrectionneed: this.state.selectedRecord[role.nuserrolecode]['IDS_CORRECTION'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_CORRECTION'] : transactionStatus.NO,\n              nesignneed: this.state.selectedRecord[role.nuserrolecode]['e-Sign_' + role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode]['e-Sign_' + role.nuserrolecode] : transactionStatus.NO,\n              ntransactionstatus: transactionStatus.DRAFT,\n              nsitecode: this.props.Login.userInfo.nmastersitecode,\n              nstatus: transactionStatus.ACTIVE\n            });\n\n            if (this.state.selectedRecord[role.nuserrolecode].filterstatus) {\n              this.state.selectedRecord[role.nuserrolecode].filterstatus.map(filterValue => {\n                filterDetailCount++;\n                approvalconfigrolefilterdetail.push({\n                  napprovalconfigcode: role.napprovalconfigcode,\n                  nuserrolecode: role.nuserrolecode,\n                  nlevelno: role.nlevelno,\n                  ntransactionstatus: filterValue,\n                  nstatus: transactionStatus.ACTIVE\n                });\n                return null;\n              });\n            }\n\n            if (this.state.selectedRecord[role.nuserrolecode].validationstatus) {\n              this.state.selectedRecord[role.nuserrolecode].validationstatus.map(validationValue => {\n                validationDetailCount++;\n                approvalconfigrolevalidationdetail.push({\n                  napprovalconfigcode: role.napprovalconfigcode,\n                  nuserrolecode: role.nuserrolecode,\n                  nlevelno: role.nlevelno,\n                  ntransactionstatus: validationValue,\n                  nstatus: transactionStatus.ACTIVE\n                });\n                return null;\n              });\n            }\n\n            if (this.state.selectedRecord[role.nuserrolecode].decisionstatus) {\n              this.state.selectedRecord[role.nuserrolecode].decisionstatus.map(decisionValue => {\n                decisionDetailCount++;\n                approvalconfigroledecisiondetail.push({\n                  napprovalconfigcode: role.napprovalconfigcode,\n                  nuserrolecode: role.nuserrolecode,\n                  nlevelno: role.nlevelno,\n                  ntransactionstatus: decisionValue,\n                  nstatus: transactionStatus.ACTIVE\n                });\n                return null;\n              });\n            }\n\n            this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`] ? this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`].map(actionValue => {\n              actionDetailCount++;\n              approvalconfigroleactiondetail.push({\n                napprovalconfigcode: role.napprovalconfigcode,\n                nuserrolecode: role.nuserrolecode,\n                nlevelno: role.nlevelno,\n                ntransactionstatus: actionValue,\n                nstatus: transactionStatus.ACTIVE\n              });\n              return null;\n            }) : approvalconfigroleactiondetail.push();\n            actionDetailCount++;\n            approvalconfigroleactiondetail.push({\n              napprovalconfigcode: role.napprovalconfigcode,\n              nuserrolecode: role.nuserrolecode,\n              nlevelno: role.nlevelno,\n              ntransactionstatus: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : -1,\n              nstatus: transactionStatus.ACTIVE\n            });\n            inputData[`approvalconfigrolefilterdetail_${[role.nuserrolecode]}`] = approvalconfigrolefilterdetail;\n            inputData[`approvalconfigrolevalidationdetail_${[role.nuserrolecode]}`] = approvalconfigrolevalidationdetail;\n            inputData[`approvalconfigroledecisiondetail_${[role.nuserrolecode]}`] = approvalconfigroledecisiondetail;\n            inputData[`approvalconfigroleactiondetail_${[role.nuserrolecode]}`] = approvalconfigroleactiondetail;\n            bool = bool ? true : false;\n            return null;\n          } else {\n            bool = false;\n            errormessage.push(role.suserrolename);\n            return false;\n          }\n        }); //role map\n\n        inputData['approvalconfigrole'] = approvalconfigrole;\n        inputData['rolecount'] = this.props.Login.userRoleTree.length;\n        inputData['filterdetailcount'] = filterDetailCount;\n        inputData['validationdetailcount'] = validationDetailCount;\n        inputData['decisiondetailcount'] = decisionDetailCount;\n        inputData['actioncount'] = actionDetailCount;\n        inputData['ntreeversiontempcode'] = this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1;\n        let finalInputData = {};\n        let inputParam = {};\n\n        if (bool) {\n          if (this.props.Login.operation === \"update\") {\n            // edit\n            postParam = {\n              inputListName: \"versionData\",\n              selectedObject: \"selectedVersion\",\n              primaryKeyField: \"napproveconfversioncode\"\n            };\n            const temp1 = {};\n            this.props.Login.versionConfig.map(temp => {\n              if (temp.ntranscode === 81) {\n                temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              } else if (temp.ntranscode === 85) {\n                temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              }\n            });\n            inputData['approvalconfigautoapproval'] = {\n              napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              sversionname: this.state.selectedRecord.sversionname,\n              //  nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\n              //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\n              nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT : transactionStatus.DRAFT,\n              nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\n              nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\n              nstatus: transactionStatus.ACTIVE,\n              ...temp1\n            };\n          } else {\n            inputData['approveconfigversion'] = {\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              napproveconfversionno: -1,\n              ntransactionstatus: transactionStatus.DRAFT,\n              ntreeversiontempcode: this.props.Login.userRoleTree[0].ntreeversiontempcode,\n              sapproveconfversiondesc: '-',\n              nsitecode: this.props.Login.userInfo.nmastersitecode,\n              nstatus: transactionStatus.ACTIVE\n            };\n            const temp1 = {};\n            this.props.Login.versionConfig.map(temp => {\n              if (temp.ntranscode === 81) {\n                temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              } else if (temp.ntranscode === 85) {\n                temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO;\n              }\n            });\n            inputData['approvalconfigautoapproval'] = {\n              napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\n              sversionname: this.state.selectedRecord.sversionname,\n              // nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\n              //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\n              nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\n              nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT : transactionStatus.DRAFT,\n              nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\n              nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\n              nstatus: transactionStatus.ACTIVE,\n              ...temp1\n            };\n          }\n\n          finalInputData['approvalconfigversion'] = inputData;\n          finalInputData['userinfo'] = this.props.Login.userInfo;\n          inputParam = {\n            methodUrl: 'ApprovalConfigVersion',\n            classUrl: this.props.Login.inputParam.classUrl,\n            displayName: \"IDS_APPROVALCONFIG\",\n            inputData: finalInputData,\n            saveType,\n            formRef,\n            operation: this.props.Login.operation,\n            postParam,\n            searchRef: this.searchRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType,\n                openModal: true,\n                operation: this.props.Login.operation,\n                screenName: this.props.intl.formatMessage({\n                  id: \"IDS_APPROVALCONFIG\"\n                })\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FILLDETAILSFOR\"\n          }) + \" \" + errormessage.join(\",\"));\n        }\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteApprovalConfigVersion(deleteId));\n    };\n\n    this.onInputOnChange = (event, role, action) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (role) {\n        let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {};\n        const fieldName = event.target.name.split('_')[0] + '_' + event.target.name.split('_')[1];\n        let actionArray = selectedRecord[`actionStatus_${role.nuserrolecode}`] || [];\n\n        if (event.target.type === 'checkbox') {\n          if (action) {\n            if (event.target.checked) {\n              actionArray.push(action.ntranscode);\n            } else {\n              actionArray.splice(actionArray.indexOf(action.ntranscode), 1);\n            }\n\n            selectedRecord[`actionStatus_${role.nuserrolecode}`] = actionArray;\n          }\n\n          roleDetails[fieldName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n\n          if (fieldName === 'IDS_PARTIALAPPROVAL' && roleDetails[\"IDS_PARTIALAPPROVAL\"] && roleDetails[\"IDS_PARTIALAPPROVAL\"] === transactionStatus.YES) {\n            roleDetails['IDS_SECTIONWISEAPPROVE'] = transactionStatus.NO;\n          }\n\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        } else {\n          roleDetails[fieldName] = event.target.value;\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        }\n      } else {\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          if (event.target.name === 'sviewname') {\n            selectedRecord[event.target.name] = event.target.value.replace(/[^\\w\\s]/gi, \"\");\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, role, comboName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (role) {\n        let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {};\n        const fieldName = comboName.split('_')[0];\n        let filterArray = [];\n        roleDetails[fieldName] = [];\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n\n          if (fieldName === 'checklist') {\n            selectedRecord[`checklistVersion_${role.nuserrolecode}`] = {\n              label: comboData.item.schecklistversionname,\n              value: comboData.item.nchecklistversioncode\n            };\n            filterArray = comboData.item.nchecklistversioncode;\n          } else {\n            if (Array.isArray(comboData)) {\n              comboData.map(item => {\n                return filterArray.push(item.value);\n              });\n            } else {\n              filterArray = comboData.value;\n            }\n          }\n\n          roleDetails[fieldName] = filterArray;\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        } else {\n          selectedRecord[comboName] = [];\n          filterArray = [];\n          roleDetails[fieldName] = filterArray;\n          selectedRecord[role.nuserrolecode] = roleDetails;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[comboName] = comboData;\n\n        if (comboName === 'regtype') {\n          this.props.getCopySubType(comboData, selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.optCopyRegType);\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let approvalSubTypeValue = this.props.Login.masterData.approvalSubTypeValue;\n      let registrationTypeValue = this.props.Login.masterData.registrationTypeValue;\n      let registrationSubTypeValue;\n\n      if (comboData) {\n        selectedRecord[fieldName] = comboData.value;\n        let inputData = {};\n\n        if (fieldName === 'napprovalsubtypecode') {\n          approvalSubTypeValue = comboData;\n          inputData = {\n            nFlag: 2,\n            napprovalsubtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        } else if (fieldName === 'nregtypecode') {\n          registrationTypeValue = comboData;\n          inputData = {\n            nFlag: 3,\n            napprovalsubtypecode: approvalSubTypeValue.value,\n            nregtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        } else if (fieldName === 'nregsubtypecode') {\n          registrationSubTypeValue = comboData;\n          inputData = {\n            nFlag: 4,\n            napprovalsubtypecode: approvalSubTypeValue.value,\n            nregtypecode: registrationTypeValue.value,\n            nregsubtypecode: comboData.value,\n            userinfo: this.props.Login.userInfo\n          };\n        }\n\n        if (fieldName === 'ntreeversiontempcode') {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                userroleTemplateValue: comboData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          const oldState = {\n            approvalsubtype: this.props.Login.masterData.approvalsubtype,\n            registrationtype: this.props.Login.masterData.registrationType,\n            registrationsubtype: this.props.Login.masterData.registrationSubType,\n            approvalSubTypeValue,\n            registrationTypeValue,\n            registrationSubTypeValue,\n            RegistrationTypeList: this.state.RegistrationTypeList,\n            RegistrationSubTypeList: this.state.RegistrationSubTypeList\n          };\n          let inputParamData = {\n            inputData,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getFilterChange(inputParamData, oldState);\n        }\n      } else {\n        selectedRecord[fieldName] = \"\";\n\n        if (fieldName === 'napprovalsubtypecode') {\n          this.approvalSubTypeValue = [];\n          registrationTypeValue = [];\n          registrationSubTypeValue = [];\n        } else if (fieldName === 'nregtypecode') {\n          registrationTypeValue = [];\n          registrationSubTypeValue = [];\n        } else {\n          registrationSubTypeValue = [];\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } // this.searchRef.current.value = \"\"\n\n    };\n\n    this.getApprovalConfigurationVersion = () => {\n      if (this.props.Login.masterData.approvalSubTypeValue) {\n        //this.searchRef.current.value = \"\"\n        let masterData = { ...this.props.Login.masterData,\n          realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\n          realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\n          realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\n          realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\n          realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1\n        };\n        const inputData = {\n          napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue.value : -1,\n          napprovalconfigcode: this.props.Login.masterData.approvalConfigCode,\n          ntreeversiontempcode: this.props.Login.masterData.userroleTemplateValue.value,\n          userinfo: this.props.Login.userInfo\n        };\n        let inputParamData = {\n          inputData,\n          masterData,\n          searchRef: this.searchRef\n        };\n        this.props.getApprovalConfigurationVersion(inputParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.reloadData = () => {\n      // this.searchRef.current.value = \"\";\n      // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"approvalconfig\",\n      //     methodUrl: \"ApprovalConfigFilter\",\n      //     userInfo: this.props.Login.userInfo,\n      //     displayName: \"IDS_APPROVALCONFIG\"\n      // };\n      // this.props.callService(inputParam);\n      this.getApprovalConfigurationVersion();\n    };\n\n    this.userRoleAccordion = userRoleList => {\n      const accordionMap = new Map();\n      userRoleList = sortData(userRoleList, 'ascending', 'nlevelno');\n      userRoleList.map(role => accordionMap.set(role.napprovalconfigrolecode, /*#__PURE__*/React.createElement(UserRoleAccordion, {\n        role: role,\n        roleConfig: this.props.Login.masterData.roleConfig,\n        userRoleControlRights: this.state.userRoleControlRights,\n        controlMap: this.state.controlMap,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        deleteRecord: this.deleteRecord,\n        tabDetail: this.tabDetail(role),\n        onTabOnChange: this.onTabOnChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1450,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.tabDetail = () => {\n      const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0];\n      const tabMap = new Map();\n      tabMap.set(\"IDS_FILTERSTATUS\", /*#__PURE__*/React.createElement(FilterStatusTab, {\n        filterData: process(this.props.Login.masterData.roleFilters ? // sortData(this.props.Login.masterData.roleFilters) : [],\n        // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\n        sortData(this.props.Login.masterData.roleFilters) : [], this.state.filterStatusState),\n        setDefault: this.props.setDefault,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        dataState: this.state.filterStatusState,\n        dataStateChange: event => this.setState({\n          filterStatusState: event.dataState\n        }),\n        screenName: \"IDS_FILTERSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1468,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_VALIDATIONSTATUS\", /*#__PURE__*/React.createElement(ValidationStatusTab, {\n        validationStatus: process(this.props.Login.masterData.roleValidations ? sortData(this.props.Login.masterData.roleValidations) : [], this.state.validationStatusState) // sortData(this.props.Login.masterData.roleValidations) : [],\n        // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\n        ,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        dataState: this.state.validationStatusState,\n        dataStateChange: event => this.setState({\n          validationStatusState: event.dataState\n        }),\n        screenName: \"IDS_VALIDATIONSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1485,\n          columnNumber: 13\n        }\n      })); // if (this.props.Login.masterData.roleDecisions && this.props.Login.masterData.roleDecisions.length > 0) {\n      //     tabMap.set(\"IDS_DECISIONSTATUS\",\n      //         <DecisionStatusTab\n      //             decisionData={process(this.props.Login.masterData.roleDecisions ? sortData(this.props.Login.masterData.roleDecisions) : [],\n      //                 { skip: this.state.dataState.skip, take: this.state.dataState.take })}\n      //             setDefault={this.props.setDefault}\n      //             selectedRole={selectedRole}\n      //             napprovalsubtypecode={this.approvalSubTypeValue.value}\n      //             userInfo={this.props.Login.userInfo}\n      //             masterData={this.props.Login.masterData}\n      //             screenName=\"IDS_DECISIONSTATUS\"\n      //         />)\n      // }\n\n      tabMap.set(\"IDS_ACTIONSTATUS\", /*#__PURE__*/React.createElement(ActionStatusTab, {\n        actionData: process(this.props.Login.masterData.roleActions ? sortData(this.props.Login.masterData.roleActions) : [], {\n          skip: this.state.dataState.skip,\n          take: this.state.dataState.take\n        }),\n        setDefault: this.props.setDefault,\n        selectedRole: selectedRole,\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        screenName: \"IDS_ACTIONSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1512,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onTabOnChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    const filterStatusState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const validationStatusState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      approvalConfigCode: -1,\n      dataResult: [],\n      dataState: dataState,\n      selectedRecord: {},\n      ApprovalsubtypeList: [],\n      RegistrationTypeList: [],\n      RegistrationSubTypeList: [],\n      UserRoleTemplateList: [],\n      filterStatusState,\n      validationStatusState\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let versionStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED) {\n      versionStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\n      versionStatusCSS = \"outline-danger\";\n    }\n\n    const editId = this.state.controlMap.has(\"EditApprovalConfig\") && this.state.controlMap.get(\"EditApprovalConfig\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteApprovalConfig\") && this.state.controlMap.get(\"DeleteApprovalConfig\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveApprovalConfig\") && this.state.controlMap.get(\"ApproveApprovalConfig\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyApprovalConfig\") && this.state.controlMap.get(\"CopyApprovalConfig\").ncontrolcode;\n    const addId = this.state.controlMap.has(\"AddApprovalConfig\") && this.state.controlMap.get(\"AddApprovalConfig\").ncontrolcode;\n    this.approvalSubTypeValue = this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue : this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : this.props.Login.masterData.approvalsubtype ? this.props.Login.masterData.approvalsubtype.length > 0 ? {\n      value: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].napprovalsubtypecode,\n      label: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].ssubtypename\n    } : {} : {};\n    const filterParam = {\n      inputListName: \"versionData\",\n      selectedObject: \"selectedVersion\",\n      primaryKeyField: \"napproveconfversioncode\",\n      searchFieldList: [\"sversionname\", \"sversionstatus\", \"sapproveconfversiondesc\"],\n      fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\n      fecthInputObject: {\n        napprovalsubtypecode: this.approvalSubTypeValue.value,\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      sortField: \"napproveconfversioncode\",\n      sortOrder: \"descending\",\n      //NIBSCRT-2294\n      unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\", \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"treeVersionTemplate\", \"userroleTemplateValue\", \"realApprovalSubTypeValue\", \"realRegistrationTypeValue\", \"realRegistrationSubTypeValue\", \"realTreeVersionTemplateValue\", \"approvalConfigCode\", \"realApprovalConfigCode\"]\n    };\n    const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0];\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_VERSIONNAME\",\n      \"dataField\": \"sversionname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.props.Login.operation !== 'copy' && this.props.Login.userRoleTree && this.props.Login.userRoleTree.map(role => {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_APPROVALSTATUS\",\n        \"alertSuffix\": ` - ${role.suserrolename}`,\n        \"dataField\": `approvalstatus_${role.nuserrolecode}`,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n      mandatoryFields.push({\n        \"idsName\": \"IDS_FILTERSTATUS\",\n        \"alertSuffix\": ` - ${role.suserrolename}`,\n        \"dataField\": `filterstatus_${role.nuserrolecode}`,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n      mandatoryFields.push({\n        \"idsName\": \"IDS_VALIDATIONSTATUS\",\n        \"alertSuffix\": ` - ${role.suserrolename}`,\n        \"dataField\": `validationstatus_${role.nuserrolecode}`,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n\n      if (this.props.Login.decisionStatusOptions && this.props.Login.decisionStatusOptions.length > 0) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_DECISIONSTATUS\",\n          \"alertSuffix\": ` - ${role.suserrolename}`,\n          \"dataField\": `decisionstatus_${role.nuserrolecode}`\n        });\n      }\n\n      return null;\n    });\n    let breadCrumbData = [];\n\n    if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_REGISTRATIONTYPE\",\n        \"value\": this.props.Login.masterData.realRegistrationTypeValue ? this.props.Login.masterData.realRegistrationTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n        \"value\": this.props.Login.masterData.realRegistrationSubTypeValue ? this.props.Login.masterData.realRegistrationSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_USERROLETEMPLATE\",\n        \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\n      }];\n    } else {\n      breadCrumbData = [{\n        \"label\": \"IDS_APPROVALSUBTYPE\",\n        \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\n      }, {\n        \"label\": \"IDS_USERROLETEMPLATE\",\n        \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\n      }];\n    } // console.log(\"this.approvalSubTypeValue:\", Object.keys(this.approvalSubTypeValue).length);\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_APPROVALCONFIG\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.versionData,\n      getMasterDetail: version => this.props.getApprovalConfigVersion(version, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedVersion,\n      primaryKeyField: \"napproveconfversioncode\",\n      mainField: \"sversionname\",\n      firstField: \"sapproveconfversiondesc\",\n      secondField: \"sversionstatus\",\n      isIDSField: \"Yes\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      openModal: () => this.props.openModal(\"create\", this.props.Login.masterData.realApprovalConfigCode, this.approvalSubTypeValue.value, this.props.Login.userInfo, addId, this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -10),\n      needAccordianFilter: false,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      showFilterIcon: true,\n      onFilterSubmit: this.getApprovalConfigurationVersion,\n      filterComponent: [{\n        \"IDS_SAMPLEFILTER\": /*#__PURE__*/React.createElement(SampleFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          filterComboChange: this.onFilterComboChange,\n          approvalSubTypeOptions: this.state.ApprovalsubtypeList,\n          approvalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue,\n          registrationTypeOptions: this.state.RegistrationTypeList,\n          registrationTypeValue: this.props.Login.masterData.registrationTypeValue,\n          registrationSubTypeOptions: this.state.RegistrationSubTypeList,\n          registrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue,\n          userroleTemplateOptions: this.state.UserRoleTemplateList,\n          userroleTemplateValue: this.props.Login.masterData.userroleTemplateValue,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.selectedVersion ? Object.entries(this.props.Login.masterData.selectedVersion).length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedVersion.sversionname)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"readonly-text font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSIONNO\"\n    })}:${this.props.Login.masterData.selectedVersion.sapproveconfversiondesc}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${versionStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedVersion.sversionstatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.getApprovalConfigEditData(this.props.Login.masterData.selectedVersion.napproveconfversioncode, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.approveVersion(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.copyVersion(this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 77\n      }\n    }))))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.versionConfig ? this.props.Login.masterData.versionConfig.map(item => /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: item.stransdisplaystatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 80\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedVersion[`${item.ntranscode}`])))) : \"\")), /*#__PURE__*/React.createElement(Row, {\n      oGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData ? this.props.Login.masterData.approvalconfigRoleNames.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"UserRoles\",\n      accordionTitle: \"suserrolename\",\n      accordionComponent: this.userRoleAccordion(this.props.Login.masterData.approvalconfigRoleNames),\n      inputParam: {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        napprovalsubtypecode: this.approvalSubTypeValue.value\n      },\n      accordionClick: this.props.getRoleDetails,\n      accordionPrimaryKey: \"napprovalconfigrolecode\",\n      accordionObjectName: \"role\",\n      selectedKey: selectedRole.napprovalconfigrolecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 65\n      }\n    }) : \"\" : \"\"))))) : \"\" : \"\"))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: \"IDS_APPROVALCONFIG\",\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'approve' ? [{\n        \"idsName\": \"IDS_VIEWNAME\",\n        \"dataField\": \"sviewname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_TEMPLATEMAPPING\",\n        \"dataField\": \"ndesigntemplatemappingcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'approve' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1102,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"ndesigntemplatemappingcode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATEMAPPING\"\n        }),\n        placeholder: \"Please Select...\",\n        options: this.props.Login.designTemplateMapping // optionId=\"ntimezonecode\"\n        // optionValue=\"stimezoneid\"\n        ,\n        value: this.state.selectedRecord[\"ndesigntemplatemappingcode\"] //defaultValue={props.selectedRecord[\"ndesigntemplatemapping\"]}\n        ,\n        isMandatory: true,\n        isMulti: false,\n        isSearchable: false,\n        isClearable: false,\n        isDisabled: true,\n        closeMenuOnSelect: true,\n        onChange: event => this.onComboChange(event, 'ndesigntemplatemappingcode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        name: \"sviewname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        value: this.state.selectedRecord[\"sviewname\"],\n        isMandatory: true //required={true}\n        ,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1120,\n          columnNumber: 45\n        }\n      })))) : /*#__PURE__*/React.createElement(AddApprovalConfig, {\n        selectedRecord: this.state.selectedRecord ? this.state.selectedRecord : {},\n        userRoleTree: this.props.Login.userRoleTree,\n        approvalSubTypeValue: this.approvalSubTypeValue,\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        approvalStatusOptions: this.props.Login.approvalStatusOptions,\n        approvalStatusValue: this.props.Login.approvalStatusValue,\n        filterStatusOptions: this.props.Login.filterStatusOptions,\n        filterStatusValues: this.props.Login.filterStatusValues,\n        topLevelValidStatusOptions: this.props.Login.topLevelValidStatusOptions,\n        validationStatusOptions: this.props.Login.validationStatusOptions,\n        validationStatusValues: this.props.Login.validationStatusValues,\n        decisionStatusOptions: this.props.Login.decisionStatusOptions,\n        decisionStatusValues: this.props.Login.decisionStatusValues,\n        actionStatus: this.props.Login.actionStatus,\n        checklistOptions: this.props.Login.checklistOptions,\n        checklistValues: this.props.Login.checklistValues,\n        roleConfig: this.props.Login.roleConfig,\n        versionConfig: this.props.Login.versionConfig,\n        operation: this.props.Login.operation,\n        nsubType: this.approvalSubTypeValue.value,\n        registrationTypeOptions: this.props.Login.optCopyRegType,\n        registrationTypeValue: this.state.registrationTypeValue,\n        registrationSubTypeOptions: this.props.Login.optCopyRegSubType,\n        registrationSubTypeValue: this.state.registrationSubTypeValue,\n        selectedVersion: this.props.Login.masterData.selectedVersion,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1136,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      ApprovalsubtypeList,\n      RegistrationTypeList,\n      RegistrationSubTypeList,\n      UserRoleTemplateList,\n      filterStatusState,\n      validationStatusState\n    } = this.state;\n    let updateState = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); // const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode','ascending', false);\n      // const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\n      // const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\n\n      const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode', 'ascending', false);\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\n      const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\n      ApprovalsubtypeList = ApprovalsubtypeListMap.get(\"OptionList\");\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\n      updateState = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      //this.setState({  RegistrationTypeList,RegistrationSubTypeList,templateVersionOptionList});  \n      // RegistrationTypeList=this.props.Login.masterData.RegistrationTypeList\n      // RegistrationSubTypeList=this.props.Login.masterData.RegistrationSubTypeList\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\n      const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\n      updateState = true; // if (this.props.dataState === undefined) {\n      //     filterStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\n      //     validationStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\n      // }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        userRoleControlRights,\n        controlMap,\n        ApprovalsubtypeList,\n        RegistrationTypeList,\n        RegistrationSubTypeList,\n        UserRoleTemplateList,\n        filterStatusState,\n        validationStatusState\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  openModal,\n  updateStore,\n  getApprovalConfigVersion,\n  getApprovalConfigEditData,\n  copyVersion,\n  getFilterChange,\n  validateEsignCredential,\n  getCopySubType,\n  getRoleDetails,\n  setDefault,\n  filterColumnData,\n  getApprovalConfigurationVersion,\n  approveVersion\n})(injectIntl(ApprovalConfig));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/approvalconfig/ApprovalConfig.jsx"],"names":["React","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faCopy","faThumbsUp","faTrashAlt","sortData","getControlMap","showEsign","constructOptionList","process","ListMaster","Esign","SampleFilter","AddApprovalConfig","SlideOutModal","ReadOnlyText","ContentPanel","openModal","updateStore","getApprovalConfigVersion","getApprovalConfigEditData","copyVersion","setDefault","validateEsignCredential","getFilterChange","getRoleDetails","getCopySubType","filterColumnData","getApprovalConfigurationVersion","approveVersion","DEFAULT_RETURN","ApprovalSubType","designProperties","transactionStatus","FilterStatusTab","ValidationStatusTab","UserRoleAccordion","CustomAccordion","DecisionStatusTab","ActionStatusTab","BreadcrumbComponent","ConfirmMessage","Affix","FormInput","FormSelectSearch","mapStateToProps","state","Login","ApprovalConfig","Component","constructor","props","validateEsign","inputParam","inputData","userInfo","sreason","selectedRecord","password","screenData","handleClose","loadEsign","operation","updateInfo","typeName","data","selectedId","deleteApprovalConfigVersion","deleteId","masterData","selectedVersion","ntransactionstatus","APPROVED","RETIRED","warn","intl","formatMessage","id","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","napproveconfversioncode","fetchUrl","fecthInputObject","napprovalsubtypecode","approvalSubTypeValue","value","userinfo","napprovalconfigversioncode","napprovalconfigcode","realApprovalConfigCode","ntreeversiontempcode","realTreeVersionTemplateValue","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","screenName","approveId","nregsubtypecode","registrationSubTypeValue","sregsubtypename","label","nregtypecode","registrationTypeValue","ncontrolcode","getGridJsondata","templatedata","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","mastertemplatefields","sampleAuditFields","sampleAuditEditable","sampleAuditMultilingualFields","map","row","children","column","component","index","hasOwnProperty","componentRow","unique","push","LABEL","displayname","VALUE","filterinputtype","comboDataInputObject","inputtype","source","valuemember","displaymember","dateonly","dateConstraintArraySQL","default","columnname","mandatory","templatemandatory","editableuntill","DRAFT","jsondata","griditem","gridmoreitem","approveVersion1","unchangeList","selectedTemplate","sviewname","ndesigntemplatemappingcode","sregtemplatename","sprimarykey","onSaveClick","saveType","formRef","undefined","subTypeCode","approvalconfigversion","sversionname","TESTRESULTAPPROVAL","searchRef","bool","errormessage","approvalconfigrole","filterDetailCount","validationDetailCount","decisionDetailCount","actionDetailCount","userRoleTree","isAutoApprovalVersion","YES","reverse","role","approvalconfigrolefilterdetail","approvalconfigrolevalidationdetail","approvalconfigroledecisiondetail","approvalconfigroleactiondetail","nuserrolecode","napprovalconfigrolecode","nchecklistversioncode","checklist","NA","npartialapprovalneed","nsectionwiseapprovalneed","NO","nrecomretestneed","nrecomrecalcneed","nretestneed","nrecalcneed","nlevelno","napprovalstatuscode","approvalstatus","nautoapproval","nautoapprovalstatuscode","nautodescisionstatuscode","decisionstatus","PASS","length","ncorrectionneed","nesignneed","nsitecode","nmastersitecode","nstatus","ACTIVE","filterstatus","filterValue","validationstatus","validationValue","decisionValue","actionValue","suserrolename","finalInputData","temp1","versionConfig","temp","ntranscode","stransdisplaystatus","nautoapprovalstatus","nautodescisionstatus","nautoallot","nneedjoballocation","napproveconfversionno","sapproveconfversiondesc","join","ConfirmDelete","confirmMessage","confirm","onInputOnChange","event","action","roleDetails","fieldName","target","name","split","actionArray","type","checked","splice","indexOf","replace","setState","onComboChange","comboData","comboName","filterArray","item","schecklistversionname","Array","isArray","optCopyRegType","onFilterComboChange","nFlag","userroleTemplateValue","oldState","approvalsubtype","registrationtype","registrationType","registrationsubtype","registrationSubType","RegistrationTypeList","RegistrationSubTypeList","inputParamData","realApprovalSubTypeValue","realRegistrationTypeValue","realRegistrationSubTypeValue","approvalConfigCode","reloadData","userRoleAccordion","userRoleList","accordionMap","Map","set","roleConfig","controlMap","deleteRecord","tabDetail","onTabOnChange","selectedRole","approvalconfigRoleNames","tabMap","roleFilters","filterStatusState","dataState","roleValidations","validationStatusState","roleActions","skip","take","tabProps","settings","parseInt","masterStatus","error","dataResult","ApprovalsubtypeList","UserRoleTemplateList","createRef","getDerivedStateFromProps","render","versionStatusCSS","editId","has","get","copyId","addId","ssubtypename","filterParam","searchFieldList","sortField","sortOrder","mandatoryFields","decisionStatusOptions","breadCrumbData","searchedData","versionData","version","Object","entries","sversionstatus","float","designTemplateMapping","approvalStatusOptions","approvalStatusValue","filterStatusOptions","filterStatusValues","topLevelValidStatusOptions","validationStatusOptions","validationStatusValues","decisionStatusValues","actionStatus","checklistOptions","checklistValues","optCopyRegSubType","componentDidUpdate","previousProps","updateState","values","ApprovalsubtypeListMap","RegistrationTypeListMap","RegistrationSubTypeListMap","UserRoleTemplateListMap","treeVersionTemplate","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport { callService, crudMaster } from '../../../actions';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faCopy, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { sortData, getControlMap, showEsign, constructOptionList } from '../../../components/CommonScript'\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport Esign from '../../audittrail/Esign';\r\nimport SampleFilter from './SampleFilter';\r\nimport AddApprovalConfig from './AddApprovalConfig';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\r\nimport {\r\n    openModal, updateStore, getApprovalConfigVersion, getApprovalConfigEditData, copyVersion, setDefault, validateEsignCredential,\r\n    getFilterChange, getRoleDetails, getCopySubType, filterColumnData, getApprovalConfigurationVersion, approveVersion\r\n} from '../../../actions'\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { ApprovalSubType, designProperties, transactionStatus } from '../../../components/Enumeration';\r\nimport FilterStatusTab from './FilterStatusTab';\r\nimport ValidationStatusTab from './ValidationStatusTab';\r\nimport UserRoleAccordion from './UserRoleAccordion';\r\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\r\nimport DecisionStatusTab from './DecisionStatusTab';\r\nimport ActionStatusTab from './ActionStatusTab';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ApprovalConfig extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        const filterStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const validationStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            openModal: false, masterStatus: \"\", error: \"\",\r\n            approvalConfigCode: -1,\r\n            dataResult: [], dataState: dataState, selectedRecord: {},\r\n            ApprovalsubtypeList: [],\r\n            RegistrationTypeList: [],\r\n            RegistrationSubTypeList: [],\r\n            UserRoleTemplateList: [],\r\n            filterStatusState,\r\n            validationStatusState\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\") {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\":\r\n                {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteApprovalConfigVersion = (deleteId) => {\r\n\r\n        if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED ||\r\n            this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        }\r\n        else {\r\n            const postParam = {\r\n                inputListName: \"versionData\", selectedObject: \"selectedVersion\",\r\n                primaryKeyField: \"napproveconfversioncode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\r\n                fecthInputObject: { napprovalsubtypecode: this.approvalSubTypeValue.value, userinfo: this.props.Login.userInfo },\r\n                // unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\",\r\n                //  \"registrationTypeValue\", \"registrationSubType\", \"registrationSubTypeValue\",\r\n                //     \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\r\n            }\r\n            const inputData = {\r\n                'approvalconfigversion': {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData, postParam,\r\n                operation: \"delete\"\r\n\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\",\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" })\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    approveVersion = (approveId) => {\r\n        if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED ||\r\n            this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        } else {\r\n         \r\n            if(this.approvalSubTypeValue.value===2){\r\n            const inputData = {\r\n                // 'approvalconfigversion': {\r\n                napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\r\n                sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\r\n                nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                // nregtypecode:this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                // }\r\n\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n            //  inputData['userinfo'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData,\r\n                operation: \"approve\",ncontrolcode:approveId\r\n            }\r\n            //const masterData = this.props.Login.masterData;\r\n            this.props.approveVersion(inputParam);\r\n\r\n            // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             loadEsign: true, screenData: { inputParam, masterData },\r\n            //             openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n            // }\r\n            // else {\r\n            //     this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            // }\r\n        }else{\r\n            const inputData = {\r\n                 'approvalconfigversion': {\r\n                napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\r\n                sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\r\n                nregtypecode: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue.value : -1,\r\n                 }\r\n                \r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData,\r\n                operation: \"updateapprove\",ncontrolcode:approveId\r\n            }\r\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData:this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n        }\r\n\r\n    }\r\n    getGridJsondata = (templatedata) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    //console.log(\"component2:\", component);\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            // console.log(\"component row2:\", componentRow);\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": false,\r\n                                    \"predefinedconditionalString\": \"\\\"\"+componentRow.valuemember+\"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\r\n                                    \"tablecolumnname\": componentRow.valuemember,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            // samplesearchfields.push(componentRow.label)\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({[componentRow.label] : componentRow.displayname});\r\n                           \r\n                          \r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        //console.log(\"component2:\", component);\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({[component.label] : component.displayname});\r\n                       \r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": false,\r\n                                \"predefinedconditionalString\": \"\\\"\"+component.valuemember+\"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.label,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.column.value,\r\n                                \"foriegntablename\": component.source,\r\n                                ...comboDataInputObject\r\n                            })\r\n                        }\r\n                        // samplesearchfields.push(component.label)\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n                        }\r\n                        if (component.inputtype === 'numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n                      \r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields\r\n        }\r\n\r\n        //console.log(\"dynamiccolumns:\", jdynamiccolumns);\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey };\r\n    }\r\n\r\n\r\n    approveVersion1 = (approveId) => {\r\n        if (this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED ||\r\n            this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        } else {\r\n            const postParam = {\r\n                inputListName: \"versionData\", selectedObject: \"selectedVersion\",\r\n                primaryKeyField: \"napproveconfversioncode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\r\n                fecthInputObject: { napprovalsubtypecode: this.approvalSubTypeValue.value, userinfo: this.props.Login.userInfo },\r\n                unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\", \"registrationSubType\",\r\n                    \"registrationSubTypeValue\", \"ApprovalsubtypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\"]\r\n            }\r\n            \r\n            let {  jdynamiccolumns, jnumericcolumns, templatePrimaryKey } =  this.getGridJsondata(this.props.Login.selectedTemplate &&\r\n                this.props.Login.selectedTemplate);\r\n            const inputData = {\r\n                'approvalconfigversion': {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: this.approvalSubTypeValue.value,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregsubtypecode: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.value : -1,\r\n                    sregsubtypename: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue.label : \"\",\r\n                    sviewname:this.state.selectedRecord.sviewname,\r\n                    ndesigntemplatemappingcode:this.state.selectedRecord.ndesigntemplatemappingcode.value,\r\n                    sregtemplatename:this.state.selectedRecord.ndesigntemplatemappingcode.label,\r\n                },jdynamiccolumns,jnumericcolumns,sprimarykey:templatePrimaryKey\r\n\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n\r\n\r\n           // inputData['jsondata'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData, postParam,\r\n                operation: \"updateapprove\"\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let postParam = undefined;\r\n        if (this.props.Login.operation === \"copy\") {\r\n\r\n            const subTypeCode = this.approvalSubTypeValue.value;\r\n\r\n            const inputData = {\r\n                approvalconfigversion: {\r\n                    napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                    napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                    napprovalsubtypecode: subTypeCode,\r\n                    sversionname: this.state.selectedRecord.sversionname,\r\n                    nregtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regtype'] ? this.state.selectedRecord['regtype'].value : this.state.registrationTypeValue[0].value : -1,\r\n                    nregsubtypecode: subTypeCode === ApprovalSubType.TESTRESULTAPPROVAL ? this.state.selectedRecord['regsubtype'] ? this.state.selectedRecord['regsubtype'].value : this.state.registrationSubTypeValue[0].value : -1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ntreeversiontempcode: this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1\r\n                }\r\n\r\n            }\r\n            inputData['userinfo'] = this.props.Login.userInfo\r\n            const inputParam = {\r\n                methodUrl: 'ApprovalConfigVersion',\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                displayName: \"IDS_APPROVALCONFIG\",\r\n                inputData: inputData, postParam, searchRef: this.searchRef,\r\n                operation: \"copy\"\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" }), operation: \"copy\"\r\n                    }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n\r\n            } else {\r\n\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n\r\n            }\r\n\r\n        }else if(this.props.Login.operation==='approve'){\r\n            this.approveVersion1(this.props.Login.ncontrolcode);\r\n        }\r\n        else {\r\n\r\n            let bool = true;\r\n            let errormessage = [];\r\n            let inputData = {};\r\n            let approvalconfigrole = [];\r\n            let filterDetailCount = 0;\r\n            let validationDetailCount = 0;\r\n            let decisionDetailCount = 0;\r\n            let actionDetailCount = 0;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData['napprovalconfigcode'] = this.props.Login.masterData.realApprovalConfigCode\r\n            inputData['ntreeversiontempcode'] = this.props.Login.userRoleTree[0].ntreeversiontempcode\r\n            inputData['napprovalsubtypecode'] = this.approvalSubTypeValue.value\r\n            let isAutoApprovalVersion = this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? true : false;\r\n\r\n            const userRoleTree = this.props.Login.userRoleTree.reverse();\r\n            userRoleTree.map(role => {\r\n                let approvalconfigrolefilterdetail = [];\r\n                let approvalconfigrolevalidationdetail = [];\r\n                let approvalconfigroledecisiondetail = [];\r\n                let approvalconfigroleactiondetail = [];\r\n                //to fill role details\r\n                if (this.state.selectedRecord[role.nuserrolecode]) {\r\n                    approvalconfigrole.push({\r\n                        napprovalconfigrolecode: this.props.Login.operation === 'create' ? 0 : role.napprovalconfigrolecode,\r\n                        napprovalconfigcode: role.napprovalconfigcode,\r\n                        ntreeversiontempcode: role.ntreeversiontempcode,\r\n                        nuserrolecode: role.nuserrolecode,\r\n                        nchecklistversioncode: this.state.selectedRecord[role.nuserrolecode] ? this.state.selectedRecord[role.nuserrolecode].checklist ?\r\n                            this.state.selectedRecord[role.nuserrolecode].checklist : transactionStatus.NA : transactionStatus.NA,\r\n                        npartialapprovalneed: this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Partial Approval_' + role.nuserrolecode] : transactionStatus.YES,\r\n                        nsectionwiseapprovalneed: this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode]['IDS_PARTIALAPPROVAL'] === transactionStatus.NO ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] ?\r\n                                this.state.selectedRecord[role.nuserrolecode]['IDS_SECTIONWISEAPPROVE'] : transactionStatus.NO\r\n                            : transactionStatus.NO,\r\n                        // nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRETEST'] : transactionStatus.NO,\r\n                        // nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECOMMENDRECALC'] : transactionStatus.NO,\r\n                        // nretestneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RETEST'] : transactionStatus.NO,\r\n                        // nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] ?\r\n                        //     this.state.selectedRecord[role.nuserrolecode]['IDS_RECALC'] : transactionStatus.NO,\r\n                        // nlevelno: role.nlevelno,\r\n                        nrecomretestneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Recommend Retest_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nrecomrecalcneed: this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Recommend Recalc_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nretestneed: this.state.selectedRecord[role.nuserrolecode]['Retest_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Retest_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nrecalcneed: this.state.selectedRecord[role.nuserrolecode]['Recalc_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['Recalc_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        nlevelno: role.nlevelno,\r\n                        napprovalstatuscode: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : transactionStatus.NA,\r\n\r\n                        nautoapproval: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ? transactionStatus.YES :\r\n                            this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] ? this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] : transactionStatus.NO,\r\n\r\n                        nautoapprovalstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ?\r\n                            this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus\r\n                            : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].approvalstatus ?\r\n                                this.state.selectedRecord[role.nuserrolecode].approvalstatus\r\n                                : transactionStatus.NA\r\n                        ,\r\n                        nautodescisionstatuscode: this.state.selectedRecord['IDS_AUTOAPPROVAL'] && this.state.selectedRecord['IDS_AUTOAPPROVAL'] === transactionStatus.YES ?\r\n                            this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] : transactionStatus.PASS\r\n                            : this.state.selectedRecord[role.nuserrolecode]['IDS_AUTOAPPROVAL'] && this.state.selectedRecord[role.nuserrolecode].decisionstatus && this.state.selectedRecord[role.nuserrolecode].decisionstatus.length > 0 ?\r\n                                this.state.selectedRecord[role.nuserrolecode].decisionstatus[0] : transactionStatus.DRAFT\r\n                        // :this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus&&this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus.length>0 ?\r\n                        // :transactionStatus.NA\r\n                        ,\r\n                        ncorrectionneed: this.state.selectedRecord[role.nuserrolecode]['IDS_CORRECTION'] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['IDS_CORRECTION'] : transactionStatus.NO,\r\n                        nesignneed: this.state.selectedRecord[role.nuserrolecode]['e-Sign_' + role.nuserrolecode] ?\r\n                            this.state.selectedRecord[role.nuserrolecode]['e-Sign_' + role.nuserrolecode] : transactionStatus.NO,\r\n                        ntransactionstatus: transactionStatus.DRAFT,\r\n                        nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n                        nstatus: transactionStatus.ACTIVE\r\n\r\n                    })\r\n\r\n\r\n                    if (this.state.selectedRecord[role.nuserrolecode].filterstatus) {\r\n                        this.state.selectedRecord[role.nuserrolecode].filterstatus.map(filterValue => {\r\n                            filterDetailCount++;\r\n                            approvalconfigrolefilterdetail.push({\r\n                                napprovalconfigcode: role.napprovalconfigcode,\r\n                                nuserrolecode: role.nuserrolecode,\r\n                                nlevelno: role.nlevelno,\r\n                                ntransactionstatus: filterValue,\r\n                                nstatus: transactionStatus.ACTIVE\r\n                            })\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (this.state.selectedRecord[role.nuserrolecode].validationstatus) {\r\n                        this.state.selectedRecord[role.nuserrolecode].validationstatus.map(validationValue => {\r\n                            validationDetailCount++;\r\n                            approvalconfigrolevalidationdetail.push({\r\n                                napprovalconfigcode: role.napprovalconfigcode,\r\n                                nuserrolecode: role.nuserrolecode,\r\n                                nlevelno: role.nlevelno,\r\n                                ntransactionstatus: validationValue,\r\n                                nstatus: transactionStatus.ACTIVE\r\n                            })\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (this.state.selectedRecord[role.nuserrolecode].decisionstatus) {\r\n                        this.state.selectedRecord[role.nuserrolecode].decisionstatus.map(decisionValue => {\r\n                            decisionDetailCount++;\r\n                            approvalconfigroledecisiondetail.push({\r\n                                napprovalconfigcode: role.napprovalconfigcode,\r\n                                nuserrolecode: role.nuserrolecode,\r\n                                nlevelno: role.nlevelno,\r\n                                ntransactionstatus: decisionValue,\r\n                                nstatus: transactionStatus.ACTIVE\r\n                            });\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`] ? this.state.selectedRecord[`actionStatus_${role.nuserrolecode}`].map(actionValue => {\r\n                        actionDetailCount++;\r\n                        approvalconfigroleactiondetail.push({\r\n                            napprovalconfigcode: role.napprovalconfigcode,\r\n                            nuserrolecode: role.nuserrolecode,\r\n                            nlevelno: role.nlevelno,\r\n                            ntransactionstatus: actionValue,\r\n                            nstatus: transactionStatus.ACTIVE\r\n                        });\r\n                        return null;\r\n                    }) : approvalconfigroleactiondetail.push();\r\n                    actionDetailCount++;\r\n                    approvalconfigroleactiondetail.push({\r\n                        napprovalconfigcode: role.napprovalconfigcode,\r\n                        nuserrolecode: role.nuserrolecode,\r\n                        nlevelno: role.nlevelno,\r\n                        ntransactionstatus: this.state.selectedRecord[role.nuserrolecode].approvalstatus ? this.state.selectedRecord[role.nuserrolecode].approvalstatus : -1,\r\n                        nstatus: transactionStatus.ACTIVE\r\n                    });\r\n\r\n                    inputData[`approvalconfigrolefilterdetail_${[role.nuserrolecode]}`] = approvalconfigrolefilterdetail\r\n                    inputData[`approvalconfigrolevalidationdetail_${[role.nuserrolecode]}`] = approvalconfigrolevalidationdetail\r\n                    inputData[`approvalconfigroledecisiondetail_${[role.nuserrolecode]}`] = approvalconfigroledecisiondetail\r\n                    inputData[`approvalconfigroleactiondetail_${[role.nuserrolecode]}`] = approvalconfigroleactiondetail\r\n                    bool = bool ? true : false\r\n                    return null;\r\n                } else {\r\n                    bool = false\r\n                    errormessage.push(role.suserrolename)\r\n                    return false;\r\n                }\r\n            })//role map\r\n\r\n            inputData['approvalconfigrole'] = approvalconfigrole\r\n            inputData['rolecount'] = this.props.Login.userRoleTree.length\r\n            inputData['filterdetailcount'] = filterDetailCount\r\n            inputData['validationdetailcount'] = validationDetailCount\r\n            inputData['decisiondetailcount'] = decisionDetailCount\r\n            inputData['actioncount'] = actionDetailCount\r\n            inputData['ntreeversiontempcode'] = this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -1;\r\n            let finalInputData = {}\r\n            let inputParam = {}\r\n            if (bool) {\r\n                if (this.props.Login.operation === \"update\") {\r\n                    // edit\r\n                    postParam = { inputListName: \"versionData\", selectedObject: \"selectedVersion\", primaryKeyField: \"napproveconfversioncode\" };\r\n\r\n                    const temp1 = {};\r\n                    this.props.Login.versionConfig.map(temp => {\r\n                        if (temp.ntranscode === 81) {\r\n                            temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n                        else if (temp.ntranscode === 85) {\r\n                            temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n\r\n\r\n\r\n                    })\r\n\r\n\r\n                    inputData['approvalconfigautoapproval'] = {\r\n                        napprovalconfigversioncode: this.props.Login.masterData.selectedVersion.napproveconfversioncode,\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        sversionname: this.state.selectedRecord.sversionname,\r\n                        //  nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\r\n                        //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\r\n                        nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\r\n                        nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? (this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT) : transactionStatus.DRAFT,\r\n                        nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\r\n                        nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\r\n                        nstatus: transactionStatus.ACTIVE,\r\n                        ...temp1\r\n                    }\r\n                }\r\n                else {\r\n\r\n\r\n                    inputData['approveconfigversion'] = {\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        napproveconfversionno: -1,\r\n                        ntransactionstatus: transactionStatus.DRAFT,\r\n                        ntreeversiontempcode: this.props.Login.userRoleTree[0].ntreeversiontempcode,\r\n                        sapproveconfversiondesc: '-',\r\n                        nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n                        nstatus: transactionStatus.ACTIVE\r\n                    }\r\n                    const temp1 = {};\r\n                    this.props.Login.versionConfig.map(temp => {\r\n                        if (temp.ntranscode === 81) {\r\n                            temp1['nneedautoapproval'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n                        else if (temp.ntranscode === 85) {\r\n                            temp1['nneedautocomplete'] = this.state.selectedRecord[temp.stransdisplaystatus] ? this.state.selectedRecord[temp.stransdisplaystatus] : transactionStatus.NO\r\n                        }\r\n\r\n\r\n\r\n                    })\r\n                    inputData['approvalconfigautoapproval'] = {\r\n                        napprovalconfigcode: this.props.Login.masterData.realApprovalConfigCode,\r\n                        sversionname: this.state.selectedRecord.sversionname,\r\n                        // nneedautocomplete: this.state.selectedRecord['Auto Complete'] ? this.state.selectedRecord['Auto Complete'] : transactionStatus.NO,\r\n                        //  nneedautoapproval: this.state.selectedRecord['Auto Approval'] ? this.state.selectedRecord['Auto Approval'] : transactionStatus.NO,\r\n                        nautoapprovalstatus: this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus ? this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].approvalstatus : transactionStatus.NA,\r\n                        nautodescisionstatus: isAutoApprovalVersion ? transactionStatus.PASS : this.props.Login.userRoleTree && this.props.Login.userRoleTree.length > 0 && this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus ? (this.state.selectedRecord[this.props.Login.userRoleTree[0].nuserrolecode].decisionstatus[0] || transactionStatus.DRAFT) : transactionStatus.DRAFT,\r\n                        nautoallot: this.state.selectedRecord['IDS_AUTOALLOT'] ? this.state.selectedRecord['IDS_AUTOALLOT'] : transactionStatus.NO,\r\n                        nneedjoballocation: this.state.selectedRecord['IDS_JOBALLOCATION'] ? this.state.selectedRecord['IDS_JOBALLOCATION'] : transactionStatus.NO,\r\n                        nstatus: transactionStatus.ACTIVE,\r\n                        ...temp1\r\n                    }\r\n                }\r\n                finalInputData['approvalconfigversion'] = inputData\r\n                finalInputData['userinfo'] = this.props.Login.userInfo\r\n                inputParam = {\r\n                    methodUrl: 'ApprovalConfigVersion',\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    displayName: \"IDS_APPROVALCONFIG\",\r\n                    inputData: finalInputData, saveType, formRef,\r\n                    operation: this.props.Login.operation,\r\n                    postParam, searchRef: this.searchRef\r\n\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                            openModal: true, operation: this.props.Login.operation, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" })\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FILLDETAILSFOR\" }) + \" \" + errormessage.join(\",\"))\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        let versionStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.APPROVED) {\r\n            versionStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedVersion && this.props.Login.masterData.selectedVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n            versionStatusCSS = \"outline-danger\";\r\n        }\r\n        const editId = this.state.controlMap.has(\"EditApprovalConfig\") && this.state.controlMap.get(\"EditApprovalConfig\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteApprovalConfig\") && this.state.controlMap.get(\"DeleteApprovalConfig\").ncontrolcode\r\n        const approveId = this.state.controlMap.has(\"ApproveApprovalConfig\") && this.state.controlMap.get(\"ApproveApprovalConfig\").ncontrolcode\r\n        const copyId = this.state.controlMap.has(\"CopyApprovalConfig\") && this.state.controlMap.get(\"CopyApprovalConfig\").ncontrolcode\r\n        const addId = this.state.controlMap.has(\"AddApprovalConfig\") && this.state.controlMap.get(\"AddApprovalConfig\").ncontrolcode\r\n\r\n        this.approvalSubTypeValue = this.props.Login.masterData.realApprovalSubTypeValue ?\r\n            this.props.Login.masterData.realApprovalSubTypeValue\r\n            : this.props.Login.masterData.approvalSubTypeValue ?\r\n                this.props.Login.masterData.approvalSubTypeValue\r\n                : this.props.Login.masterData.approvalsubtype ? this.props.Login.masterData.approvalsubtype.length > 0 ?\r\n                    {\r\n                        value: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].napprovalsubtypecode,\r\n                        label: sortData(this.props.Login.masterData.approvalsubtype, 'ascending', 'napprovalsubtypecode')[0].ssubtypename\r\n                    } : {} : {};\r\n\r\n        const filterParam = {\r\n            inputListName: \"versionData\",\r\n            selectedObject: \"selectedVersion\",\r\n            primaryKeyField: \"napproveconfversioncode\",\r\n            searchFieldList: [\"sversionname\", \"sversionstatus\", \"sapproveconfversiondesc\"],\r\n            fetchUrl: \"approvalconfig/getApprovalConfigVersion\",\r\n            fecthInputObject: { napprovalsubtypecode: this.approvalSubTypeValue.value, userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            sortField: \"napproveconfversioncode\", sortOrder: \"descending\",\r\n\r\n            //NIBSCRT-2294\r\n            unchangeList: [\"approvalsubtype\", \"approvalSubTypeValue\", \"registrationType\", \"registrationTypeValue\",\r\n                \"registrationSubType\", \"registrationSubTypeValue\", \"ApprovalsubtypeList\",\r\n                \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"treeVersionTemplate\", \"userroleTemplateValue\",\r\n                \"realApprovalSubTypeValue\", \"realRegistrationTypeValue\", \"realRegistrationSubTypeValue\",\r\n                \"realTreeVersionTemplateValue\", \"approvalConfigCode\", \"realApprovalConfigCode\"]\r\n        };\r\n        const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0]\r\n\r\n        const mandatoryFields = [{ \"idsName\": \"IDS_VERSIONNAME\", \"dataField\": \"sversionname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        this.props.Login.operation !== 'copy' && this.props.Login.userRoleTree && this.props.Login.userRoleTree.map(role => {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_APPROVALSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `approvalstatus_${role.nuserrolecode}`, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n            mandatoryFields.push({ \"idsName\": \"IDS_FILTERSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `filterstatus_${role.nuserrolecode}`, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n            mandatoryFields.push({ \"idsName\": \"IDS_VALIDATIONSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `validationstatus_${role.nuserrolecode}`, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n            if (this.props.Login.decisionStatusOptions && this.props.Login.decisionStatusOptions.length > 0) {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_DECISIONSTATUS\", \"alertSuffix\": ` - ${role.suserrolename}`, \"dataField\": `decisionstatus_${role.nuserrolecode}` });\r\n            }\r\n            return null;\r\n        });\r\n        let breadCrumbData = []\r\n        if (this.props.Login.masterData.realApprovalSubTypeValue && this.props.Login.masterData.realApprovalSubTypeValue.value === ApprovalSubType.TESTRESULTAPPROVAL) {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegistrationTypeValue ? this.props.Login.masterData.realRegistrationTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegistrationSubTypeValue ? this.props.Login.masterData.realRegistrationSubTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_USERROLETEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\r\n                }\r\n            ];\r\n        } else {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubTypeValue ? this.props.Login.masterData.realApprovalSubTypeValue.label : \"NA\"\r\n                }, {\r\n                    \"label\": \"IDS_USERROLETEMPLATE\",\r\n                    \"value\": this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.label : \"NA\"\r\n                }\r\n            ]\r\n        }\r\n        // console.log(\"this.approvalSubTypeValue:\", Object.keys(this.approvalSubTypeValue).length);\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    <Affix top={53}>\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                    </Affix>\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_APPROVALCONFIG\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.versionData}\r\n                                getMasterDetail={(version) => this.props.getApprovalConfigVersion(version, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedVersion}\r\n                                primaryKeyField=\"napproveconfversioncode\"\r\n                                mainField=\"sversionname\"\r\n                                firstField=\"sapproveconfversiondesc\"\r\n                                secondField=\"sversionstatus\"\r\n                                isIDSField=\"Yes\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                openModal={() => this.props.openModal(\"create\", this.props.Login.masterData.realApprovalConfigCode, this.approvalSubTypeValue.value,\r\n                                    this.props.Login.userInfo, addId, this.props.Login.masterData.realTreeVersionTemplateValue ? this.props.Login.masterData.realTreeVersionTemplateValue.value : -10)}\r\n                                needAccordianFilter={false}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.getApprovalConfigurationVersion}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLEFILTER\":\r\n                                            <SampleFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                filterComboChange={this.onFilterComboChange}\r\n                                                approvalSubTypeOptions={this.state.ApprovalsubtypeList}\r\n                                                approvalSubTypeValue={this.props.Login.masterData.approvalSubTypeValue}\r\n                                                registrationTypeOptions={this.state.RegistrationTypeList}\r\n                                                registrationTypeValue={this.props.Login.masterData.registrationTypeValue}\r\n                                                registrationSubTypeOptions={this.state.RegistrationSubTypeList}\r\n                                                registrationSubTypeValue={this.props.Login.masterData.registrationSubTypeValue}\r\n                                                userroleTemplateOptions={this.state.UserRoleTemplateList}\r\n                                                userroleTemplateValue={this.props.Login.masterData.userroleTemplateValue}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.selectedVersion ? Object.entries(this.props.Login.masterData.selectedVersion).length > 0 ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedVersion.sversionname}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"readonly-text font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={8} >\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSIONNO\" })}:${this.props.Login.masterData.selectedVersion.sapproveconfversiondesc}`}\r\n                                                                <span className={`btn btn-outlined ${versionStatusCSS} btn-sm ml-3`}>\r\n                                                                    {/* <i class=\"fas fa-check \"></i>  */}\r\n                                                                    {this.props.Login.masterData.selectedVersion.sversionstatus}\r\n                                                                </span>\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                            <>\r\n                                                                <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                    <div className=\"d-inline \">\r\n                                                                        <Nav.Link\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.props.getApprovalConfigEditData(this.props.Login.masterData.selectedVersion.napproveconfversioncode, this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, editId)}>\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            {/* <ConfirmDialog\r\n                                                                        name=\"deleteMessage\"\r\n                                                                        message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                        doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                        doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                        icon={faTrashAlt}\r\n                                                                        //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                        handleClickDelete={() => this.deleteApprovalConfigVersion(deleteId)}\r\n                                                                    /> */}\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                            // data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.approveVersion(approveId)}>\r\n                                                                            <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                        </Nav.Link>\r\n                                                                        <Nav.Link\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                                            onClick={() => this.props.copyVersion(this.approvalSubTypeValue.value, this.props.Login.userInfo, this.props.Login.masterData, copyId)}>\r\n                                                                            <FontAwesomeIcon icon={faCopy} title={this.props.intl.formatMessage({ id: \"IDS_COPY\" })} />\r\n                                                                        </Nav.Link>\r\n                                                                    </div>\r\n                                                                    {/* </Tooltip> */}\r\n                                                                </div>\r\n                                                            </>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Card.Text>\r\n                                                    <Row>\r\n                                                        {this.props.Login.masterData.versionConfig ? this.props.Login.masterData.versionConfig.map(item =>\r\n                                                            <Col md=\"6\">\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel><FormattedMessage id={item.stransdisplaystatus} /></FormLabel>\r\n                                                                    <ReadOnlyText>{this.props.Login.masterData.selectedVersion[`${item.ntranscode}`]}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        ) : \"\"}\r\n                                                    </Row>\r\n                                                </Card.Text>\r\n                                                <Row oGutters={true}>\r\n                                                    <Col md={12}>\r\n                                                        <Card className=\"at-tabs\">\r\n                                                            {this.props.Login.masterData ? this.props.Login.masterData.approvalconfigRoleNames.length > 0 ?\r\n                                                                <CustomAccordion\r\n                                                                    key=\"UserRoles\"\r\n                                                                    accordionTitle=\"suserrolename\"\r\n                                                                    accordionComponent={this.userRoleAccordion(this.props.Login.masterData.approvalconfigRoleNames)}\r\n                                                                    inputParam={{ masterData: this.props.Login.masterData, userinfo: this.props.Login.userInfo, napprovalsubtypecode: this.approvalSubTypeValue.value }}\r\n                                                                    accordionClick={this.props.getRoleDetails}\r\n                                                                    accordionPrimaryKey={\"napprovalconfigrolecode\"}\r\n                                                                    accordionObjectName={\"role\"}\r\n                                                                    selectedKey={selectedRole.napprovalconfigrolecode}\r\n\r\n                                                                />\r\n                                                                : \"\" : \"\"}\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\" : \"\"}\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={\"IDS_APPROVALCONFIG\"}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation==='approve'?[{ \"idsName\": \"IDS_VIEWNAME\", \"dataField\": \"sviewname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"idsName\": \"IDS_TEMPLATEMAPPING\", \"dataField\": \"ndesigntemplatemappingcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]: mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'approve' ?\r\n                                <>\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n                                        <FormSelectSearch\r\n                                                name={\"ndesigntemplatemappingcode\"}\r\n                                                formLabel={this.props.intl.formatMessage({ id: \"IDS_TEMPLATEMAPPING\" })}\r\n                                                placeholder=\"Please Select...\"\r\n                                                options={this.props.Login.designTemplateMapping}\r\n                                                // optionId=\"ntimezonecode\"\r\n                                                // optionValue=\"stimezoneid\"\r\n                                                value={this.state.selectedRecord[\"ndesigntemplatemappingcode\"]}\r\n                                                //defaultValue={props.selectedRecord[\"ndesigntemplatemapping\"]}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isSearchable={false}\r\n                                                isClearable={false}\r\n                                                isDisabled={true}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange={(event) => this.onComboChange(event, 'ndesigntemplatemappingcode')}\r\n                                            />\r\n                                            <FormInput\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                                name={\"sviewname\"}\r\n                                                type=\"text\"\r\n                                                onChange={(event) => this.onInputOnChange(event)}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                                value={this.state.selectedRecord[\"sviewname\"]}\r\n                                                isMandatory={true}\r\n                                                //required={true}\r\n                                                maxLength={100}\r\n                                            />\r\n                                           \r\n                                        </Col>\r\n                                    </Row>\r\n                                </>\r\n                                :\r\n                                <AddApprovalConfig\r\n                                    selectedRecord={this.state.selectedRecord ? this.state.selectedRecord : {}}\r\n                                    userRoleTree={this.props.Login.userRoleTree}\r\n                                    approvalSubTypeValue={this.approvalSubTypeValue}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    approvalStatusOptions={this.props.Login.approvalStatusOptions}\r\n                                    approvalStatusValue={this.props.Login.approvalStatusValue}\r\n                                    filterStatusOptions={this.props.Login.filterStatusOptions}\r\n                                    filterStatusValues={this.props.Login.filterStatusValues}\r\n                                    topLevelValidStatusOptions={this.props.Login.topLevelValidStatusOptions}\r\n                                    validationStatusOptions={this.props.Login.validationStatusOptions}\r\n                                    validationStatusValues={this.props.Login.validationStatusValues}\r\n                                    decisionStatusOptions={this.props.Login.decisionStatusOptions}\r\n                                    decisionStatusValues={this.props.Login.decisionStatusValues}\r\n                                    actionStatus={this.props.Login.actionStatus}\r\n                                    checklistOptions={this.props.Login.checklistOptions}\r\n                                    checklistValues={this.props.Login.checklistValues}\r\n                                    roleConfig={this.props.Login.roleConfig}\r\n                                    versionConfig={this.props.Login.versionConfig}\r\n                                    operation={this.props.Login.operation}\r\n                                    nsubType={this.approvalSubTypeValue.value}\r\n                                    registrationTypeOptions={this.props.Login.optCopyRegType}\r\n                                    registrationTypeValue={this.state.registrationTypeValue}\r\n                                    registrationSubTypeOptions={this.props.Login.optCopyRegSubType}\r\n                                    registrationSubTypeValue={this.state.registrationSubTypeValue}\r\n                                    selectedVersion={this.props.Login.masterData.selectedVersion}\r\n                                    masterData={this.props.Login.masterData}\r\n\r\n                                />}\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteApprovalConfigVersion(deleteId));\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let { selectedRecord, userRoleControlRights, controlMap, ApprovalsubtypeList,\r\n            RegistrationTypeList, RegistrationSubTypeList, UserRoleTemplateList, filterStatusState, validationStatusState } = this.state;\r\n        let updateState = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            // const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode','ascending', false);\r\n            // const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nregtypecode', false);\r\n            // const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nregsubtypecode', false);\r\n            const ApprovalsubtypeListMap = constructOptionList(this.props.Login.masterData.approvalsubtype || [], \"napprovalsubtypecode\", \"ssubtypename\", 'ntemplatecode', 'ascending', false);\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\r\n            const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\r\n\r\n            ApprovalsubtypeList = ApprovalsubtypeListMap.get(\"OptionList\");\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            //this.setState({  RegistrationTypeList,RegistrationSubTypeList,templateVersionOptionList});  \r\n            // RegistrationTypeList=this.props.Login.masterData.RegistrationTypeList\r\n            // RegistrationSubTypeList=this.props.Login.masterData.RegistrationSubTypeList\r\n\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.registrationType || [], \"nregtypecode\", \"sregtypename\", 'nsorter', 'ascending', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.registrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', 'ascending', false);\r\n            const UserRoleTemplateListMap = constructOptionList(this.props.Login.masterData.treeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", 'ntransactionstatus', 'descending', false);\r\n\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            UserRoleTemplateList = UserRoleTemplateListMap.get(\"OptionList\");\r\n            updateState = true;\r\n\r\n            // if (this.props.dataState === undefined) {\r\n            //     filterStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n            //     validationStatusState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n            // }\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, userRoleControlRights, controlMap, ApprovalsubtypeList,\r\n                RegistrationTypeList, RegistrationSubTypeList, UserRoleTemplateList, filterStatusState, validationStatusState\r\n            })\r\n        }\r\n    }\r\n    onInputOnChange = (event, role, action) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (role) {\r\n            let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {}\r\n            const fieldName = event.target.name.split('_')[0] + '_' + event.target.name.split('_')[1]\r\n            let actionArray = selectedRecord[`actionStatus_${role.nuserrolecode}`] || [];\r\n            if (event.target.type === 'checkbox') {\r\n                if (action) {\r\n                    if (event.target.checked) {\r\n                        actionArray.push(action.ntranscode);\r\n                    } else {\r\n                        actionArray.splice(actionArray.indexOf(action.ntranscode), 1)\r\n                    }\r\n                    selectedRecord[`actionStatus_${role.nuserrolecode}`] = actionArray\r\n                }\r\n                roleDetails[fieldName] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO\r\n                if (fieldName === 'IDS_PARTIALAPPROVAL' && roleDetails[\"IDS_PARTIALAPPROVAL\"] && roleDetails[\"IDS_PARTIALAPPROVAL\"] === transactionStatus.YES) {\r\n                    roleDetails['IDS_SECTIONWISEAPPROVE'] = transactionStatus.NO\r\n                }\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            }\r\n            else {\r\n                roleDetails[fieldName] = event.target.value\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            }\r\n        }\r\n        else {\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                if(event.target.name==='sviewname'){\r\n                    selectedRecord[event.target.name] = event.target.value.replace(/[^\\w\\s]/gi, \"\")\r\n\r\n                }else{\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                \r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, role, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (role) {\r\n            let roleDetails = this.state.selectedRecord[role.nuserrolecode] || {}\r\n            const fieldName = comboName.split('_')[0]\r\n            let filterArray = [];\r\n            roleDetails[fieldName] = [];\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData\r\n                if (fieldName === 'checklist') {\r\n                    selectedRecord[`checklistVersion_${role.nuserrolecode}`] = { label: comboData.item.schecklistversionname, value: comboData.item.nchecklistversioncode }\r\n                    filterArray = comboData.item.nchecklistversioncode;\r\n\r\n                } else {\r\n                    if (Array.isArray(comboData)) {\r\n                        comboData.map(item => {\r\n                            return (filterArray.push(item.value))\r\n                        })\r\n                    } else {\r\n                        filterArray = comboData.value;\r\n                    }\r\n                }\r\n                roleDetails[fieldName] = filterArray\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n                filterArray = []\r\n                roleDetails[fieldName] = filterArray\r\n                selectedRecord[role.nuserrolecode] = roleDetails\r\n            }\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = comboData\r\n\r\n            if (comboName === 'regtype') {\r\n                this.props.getCopySubType(comboData, selectedRecord, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.optCopyRegType)\r\n            } else {\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n        }\r\n    }\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        let approvalSubTypeValue = this.props.Login.masterData.approvalSubTypeValue;\r\n        let registrationTypeValue = this.props.Login.masterData.registrationTypeValue;\r\n        let registrationSubTypeValue;\r\n\r\n        if (comboData) {\r\n\r\n            selectedRecord[fieldName] = comboData.value;\r\n            let inputData = {};\r\n            if (fieldName === 'napprovalsubtypecode') {\r\n\r\n                approvalSubTypeValue = comboData\r\n                inputData = { nFlag: 2, napprovalsubtypecode: comboData.value, userinfo: this.props.Login.userInfo };\r\n\r\n            } else if (fieldName === 'nregtypecode') {\r\n\r\n                registrationTypeValue = comboData\r\n                inputData = { nFlag: 3, napprovalsubtypecode: approvalSubTypeValue.value, nregtypecode: comboData.value, userinfo: this.props.Login.userInfo }\r\n\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                registrationSubTypeValue = comboData\r\n                inputData = {\r\n                    nFlag: 4, napprovalsubtypecode: approvalSubTypeValue.value,\r\n                    nregtypecode: registrationTypeValue.value,\r\n                    nregsubtypecode: comboData.value,\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n            }\r\n            if (fieldName === 'ntreeversiontempcode') {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        masterData: {\r\n                            ...this.props.Login.masterData,\r\n                            userroleTemplateValue: comboData\r\n                        }\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                const oldState = {\r\n                    approvalsubtype: this.props.Login.masterData.approvalsubtype,\r\n                    registrationtype: this.props.Login.masterData.registrationType,\r\n                    registrationsubtype: this.props.Login.masterData.registrationSubType,\r\n                    approvalSubTypeValue,\r\n                    registrationTypeValue,\r\n                    registrationSubTypeValue,\r\n                    RegistrationTypeList: this.state.RegistrationTypeList,\r\n                    RegistrationSubTypeList: this.state.RegistrationSubTypeList,\r\n                }\r\n                let inputParamData = { inputData, masterData: this.props.Login.masterData }\r\n                this.props.getFilterChange(inputParamData, oldState)\r\n            }\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = \"\";\r\n            if (fieldName === 'napprovalsubtypecode') {\r\n\r\n                this.approvalSubTypeValue = []\r\n                registrationTypeValue = []\r\n                registrationSubTypeValue = []\r\n\r\n            } else if (fieldName === 'nregtypecode') {\r\n\r\n                registrationTypeValue = []\r\n                registrationSubTypeValue = []\r\n\r\n            } else {\r\n\r\n                registrationSubTypeValue = []\r\n\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // this.searchRef.current.value = \"\"\r\n\r\n    }\r\n    getApprovalConfigurationVersion = () => {\r\n        if (this.props.Login.masterData.approvalSubTypeValue) {\r\n            //this.searchRef.current.value = \"\"\r\n            let masterData = {\r\n                ...this.props.Login.masterData,\r\n                realApprovalSubTypeValue: this.props.Login.masterData.approvalSubTypeValue ? this.props.Login.masterData.approvalSubTypeValue : -1,\r\n                realRegistrationTypeValue: this.props.Login.masterData.registrationTypeValue ? this.props.Login.masterData.registrationTypeValue : -1,\r\n                realRegistrationSubTypeValue: this.props.Login.masterData.registrationSubTypeValue ? this.props.Login.masterData.registrationSubTypeValue : -1,\r\n                realApprovalConfigCode: this.props.Login.masterData.approvalConfigCode || -1,\r\n                realTreeVersionTemplateValue: this.props.Login.masterData.userroleTemplateValue || -1,\r\n\r\n            }\r\n            const inputData = {\r\n                napprovalsubtypecode: this.props.Login.masterData.approvalSubTypeValue ?\r\n                    this.props.Login.masterData.approvalSubTypeValue.value : -1,\r\n                napprovalconfigcode: this.props.Login.masterData.approvalConfigCode,\r\n                ntreeversiontempcode: this.props.Login.masterData.userroleTemplateValue.value,\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n            let inputParamData = { inputData, masterData, searchRef: this.searchRef }\r\n            this.props.getApprovalConfigurationVersion(inputParamData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_APPROVALSUBTYPENOTAVAILABLE\" }))\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        // this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"approvalconfig\",\r\n        //     methodUrl: \"ApprovalConfigFilter\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_APPROVALCONFIG\"\r\n        // };\r\n        // this.props.callService(inputParam);\r\n        this.getApprovalConfigurationVersion()\r\n    }\r\n    userRoleAccordion = (userRoleList) => {\r\n        const accordionMap = new Map();\r\n        userRoleList = sortData(userRoleList, 'ascending', 'nlevelno')\r\n        userRoleList.map((role) =>\r\n            accordionMap.set(role.napprovalconfigrolecode,\r\n                <UserRoleAccordion\r\n                    role={role}\r\n                    roleConfig={this.props.Login.masterData.roleConfig}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    controlMap={this.state.controlMap}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    masterData={this.props.Login.masterData}\r\n                    deleteRecord={this.deleteRecord}\r\n                    tabDetail={this.tabDetail(role)}\r\n                    onTabOnChange={this.onTabOnChange}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    tabDetail = () => {\r\n        const selectedRole = this.props.Login.masterData.selectedRole ? this.props.Login.masterData.selectedRole : this.props.Login.masterData.approvalconfigRoleNames && this.props.Login.masterData.approvalconfigRoleNames.length > 0 && sortData(this.props.Login.masterData.approvalconfigRoleNames, 'ascending', 'nlevelno')[0]\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_FILTERSTATUS\",\r\n            <FilterStatusTab\r\n                filterData={process(this.props.Login.masterData.roleFilters ?\r\n                    // sortData(this.props.Login.masterData.roleFilters) : [],\r\n                    // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                    sortData(this.props.Login.masterData.roleFilters) : [], this.state.filterStatusState)}\r\n                setDefault={this.props.setDefault}\r\n                selectedRole={selectedRole}\r\n                napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                dataState={this.state.filterStatusState}\r\n                dataStateChange={(event) => this.setState({ filterStatusState: event.dataState })}\r\n                screenName=\"IDS_FILTERSTATUS\"\r\n            />\r\n        )\r\n\r\n        tabMap.set(\"IDS_VALIDATIONSTATUS\",\r\n            <ValidationStatusTab\r\n                validationStatus={process(this.props.Login.masterData.roleValidations ?\r\n                    sortData(this.props.Login.masterData.roleValidations) : [], this.state.validationStatusState)}\r\n                // sortData(this.props.Login.masterData.roleValidations) : [],\r\n                // { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                selectedRole={selectedRole}\r\n                napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                dataState={this.state.validationStatusState}\r\n                dataStateChange={(event) => this.setState({ validationStatusState: event.dataState })}\r\n                screenName=\"IDS_VALIDATIONSTATUS\"\r\n            />)\r\n        // if (this.props.Login.masterData.roleDecisions && this.props.Login.masterData.roleDecisions.length > 0) {\r\n        //     tabMap.set(\"IDS_DECISIONSTATUS\",\r\n        //         <DecisionStatusTab\r\n        //             decisionData={process(this.props.Login.masterData.roleDecisions ? sortData(this.props.Login.masterData.roleDecisions) : [],\r\n        //                 { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n        //             setDefault={this.props.setDefault}\r\n        //             selectedRole={selectedRole}\r\n        //             napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n        //             userInfo={this.props.Login.userInfo}\r\n        //             masterData={this.props.Login.masterData}\r\n        //             screenName=\"IDS_DECISIONSTATUS\"\r\n        //         />)\r\n        // }\r\n        tabMap.set(\"IDS_ACTIONSTATUS\",\r\n            <ActionStatusTab\r\n                actionData={process(this.props.Login.masterData.roleActions ? sortData(this.props.Login.masterData.roleActions) : [],\r\n                    { skip: this.state.dataState.skip, take: this.state.dataState.take })}\r\n                setDefault={this.props.setDefault}\r\n                selectedRole={selectedRole}\r\n                napprovalsubtypecode={this.approvalSubTypeValue.value}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_ACTIONSTATUS\"\r\n            />)\r\n        return tabMap;\r\n    }\r\n    onTabOnChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps,\r\n    {\r\n        callService, crudMaster, openModal, updateStore, getApprovalConfigVersion, getApprovalConfigEditData, copyVersion, getFilterChange\r\n        , validateEsignCredential, getCopySubType, getRoleDetails, setDefault, filterColumnData,\r\n        getApprovalConfigurationVersion, approveVersion\r\n    })\r\n    (injectIntl(ApprovalConfig));"]},"metadata":{},"sourceType":"module"}