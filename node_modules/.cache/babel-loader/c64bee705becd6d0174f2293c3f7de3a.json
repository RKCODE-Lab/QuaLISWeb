{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryTaskForm.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { intl } from '../../components/App';\nimport { MediaHeader, MediaLabel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport TestPopOver from './TestPopOver';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { // getPredefinedData,\nupdateStore } from '../../actions';\nimport { connect } from 'react-redux'; //const ResultEntryInstrumentForm = (this.props) => {\n\nclass ResultEntryTaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\n      selectedRecordTaskForm[name] = Data.target.value; //Sync child Data with parent Component\n\n      this.props.onInputChange(Data, name);\n      this.setState({\n        selectedRecordTaskForm\n      });\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecordTaskForm[numericName] = numericData;\n        } else {\n          selectedRecordTaskForm[numericName] = numericData.target.value;\n        }\n      } else {\n        selectedRecordTaskForm[numericName] = \"\";\n      } //Sync child Data with parent Component\n\n\n      this.props.onNumericChange(numericData, numericName);\n      this.setState({\n        selectedRecordTaskForm\n      });\n    };\n\n    this.state = {\n      selectedRecordTaskForm: this.props.selectedRecordTaskForm\n    };\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.selectedRecordTaskForm !== previousProps.selectedRecordTaskForm) {\n      this.setState({\n        selectedRecordTaskForm: this.props.selectedRecordTaskForm\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        isTaskInitialRender: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  render() {\n    let stestsynonyms = this.state.selectedRecordTaskForm.stestsynonym ? this.state.selectedRecordTaskForm.stestsynonym.split(\",\") : []; //   this.props.selectedRecord.stestsynonym ? this.props.selectedRecord.stestsynonym.split(\",\") : []\n\n    let message = `${stestsynonyms.length} ${this.props.intl.formatMessage({\n      id: \"IDS_TESTS\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_SELECTED\"\n    })}`;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, Object.values(this.state.selectedRecordTaskForm).length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }\n    }, stestsynonyms.length === 1 ? `${this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })}: ${stestsynonyms[0]}` :\n    /*#__PURE__*/\n    // <span \n    //     onMouseOver={event => tooltip && tooltip.handleMouseOver(event)}\n    //     onMouseOut={event => tooltip && tooltip.handleMouseOut(event)} //title={()=>tittleContent(stestsynonyms)}\n    //     title={stestsynonyms}>\n    //     {stestsynonyms.length}{\" \"}\n    //     {this.props.intl.formatMessage({id:\"IDS_TESTS\"})}{\" \"}\n    //     {this.props.intl.formatMessage({id:\"IDS_SELECTED\"})}\n    // </span>\n    React.createElement(TestPopOver, {\n      stringList: stestsynonyms,\n      message: message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 41\n      }\n    }))))) : \"\", /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"numeric\",\n      type: \"number\" // placeholder={intl.formatMessage({ id: \"IDS_PREANALYSISTIME\" })}\n      ,\n      isMandatory: false,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_PREANALYSISTIME\"\n      }),\n      value: Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.spreanalysistime : \"\",\n      strict: true,\n      maxLength: 6,\n      noStyle: true,\n      required: true,\n      className: \"form-control\",\n      onChange: event => this.onNumericChange(event, \"spreanalysistime\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: \"labelfont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 38\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MINUTES\"\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"numeric\",\n      type: \"number\",\n      isMandatory: false // placeholder={intl.formatMessage({ id: \"IDS_PREPARATIONTIME\" })}\n      ,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_PREPARATIONTIME\"\n      }),\n      value: Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.spreparationtime : \"\",\n      strict: true,\n      maxLength: 6,\n      noStyle: true,\n      className: \"form-control\",\n      onChange: event => this.onNumericChange(event, \"spreparationtime\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: \"labelfont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 38\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MINUTES\"\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"numeric\",\n      type: \"number\",\n      isMandatory: false // placeholder={intl.formatMessage({ id: \"IDS_ANALYSISTIME\" })}\n      ,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ANALYSISTIME\"\n      }),\n      value: Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.sanalysistime : \"\",\n      strict: true,\n      maxLength: 6,\n      noStyle: true,\n      className: \"form-control\",\n      onChange: event => this.onNumericChange(event, \"sanalysistime\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: \"labelfont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 38\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MINUTES\"\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"numeric\",\n      type: \"number\",\n      isMandatory: false // placeholder={intl.formatMessage({ id: \"IDS_MISCTIME\" })}\n      ,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_MISCTIME\"\n      }),\n      value: Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.smisctime : \"\",\n      strict: true,\n      maxLength: 6,\n      noStyle: true,\n      className: \"form-control\",\n      onChange: event => this.onNumericChange(event, \"smisctime\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: \"labelfont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 38\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MINUTES\"\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"Task Procedure\",\n      placeholder: intl.formatMessage({\n        id: \"IDS_TASKPROCEDURE\"\n      }),\n      label: intl.formatMessage({\n        id: \"IDS_TASKPROCEDURE\"\n      }),\n      type: \"text\" // defaultValue={Object.values(this.state.selectedRecordTaskForm).length > 0 &&\n      //     this.state.selectedRecordTaskForm!==undefined ? this.state.selectedRecordTaskForm.staskprocedure : \"\"}\n      ,\n      value: Object.values(this.state.selectedRecordTaskForm).length > 0 && this.state.selectedRecordTaskForm.staskprocedure !== undefined ? this.state.selectedRecordTaskForm.staskprocedure : \"\",\n      isMandatory: false,\n      required: false,\n      maxLength: 1000,\n      onChange: event => this.onInputChange(event, \"staskprocedure\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"Result\",\n      placeholder: intl.formatMessage({\n        id: \"IDS_COMMENTS\"\n      }),\n      label: intl.formatMessage({\n        id: \"IDS_COMMENTS\"\n      }),\n      type: \"text\" // defaultValue={Object.values(this.state.selectedRecordTaskForm).length > 0 &&\n      //     this.state.selectedRecordTaskForm!==undefined ? this.state.selectedRecordTaskForm.scomments : \"\"}\n      ,\n      value: Object.values(this.state.selectedRecordTaskForm).length > 0 && this.state.selectedRecordTaskForm.scomments !== undefined ? this.state.selectedRecordTaskForm.scomments : \"\",\n      isMandatory: false,\n      required: false,\n      maxLength: 100,\n      onChange: event => this.onInputChange(event, \"scomments\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n} // export default injectIntl(ResultEntryTaskForm);\n\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(ResultEntryTaskForm));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryTaskForm.jsx"],"names":["React","Row","Col","injectIntl","intl","MediaHeader","MediaLabel","ListWrapper","FormNumericInput","FormTextarea","TestPopOver","DEFAULT_RETURN","updateStore","connect","ResultEntryTaskForm","Component","constructor","props","onInputChange","Data","name","selectedRecordTaskForm","state","target","value","setState","onNumericChange","numericData","numericName","componentDidUpdate","previousProps","componentWillUnmount","updateInfo","typeName","data","isTaskInitialRender","render","stestsynonyms","stestsynonym","split","message","length","formatMessage","id","Object","values","spreanalysistime","event","spreparationtime","sanalysistime","smisctime","staskprocedure","undefined","scomments"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { intl } from '../../components/App';\r\nimport { MediaHeader, MediaLabel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport TestPopOver from './TestPopOver';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    // getPredefinedData,\r\n    updateStore\r\n} from '../../actions';\r\nimport { connect } from 'react-redux';\r\n//const ResultEntryInstrumentForm = (this.props) => {\r\nclass ResultEntryTaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            selectedRecordTaskForm: this.props.selectedRecordTaskForm \r\n        }\r\n\r\n    } \r\n       componentDidUpdate(previousProps ) { \r\n        if(this.props.selectedRecordTaskForm!==previousProps.selectedRecordTaskForm ){ \r\n            this.setState({ selectedRecordTaskForm:this.props.selectedRecordTaskForm });\r\n        } \r\n    }\r\n    componentWillUnmount() { \r\n          const updateInfo = {\r\n              typeName: DEFAULT_RETURN, \r\n              data: { isTaskInitialRender: false  } \r\n          }\r\n          this.props.updateStore(updateInfo);\r\n      }\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\r\n        selectedRecordTaskForm[name] = Data.target.value;\r\n        //Sync child Data with parent Component\r\n        this.props.onInputChange(Data, name)\r\n        this.setState({ selectedRecordTaskForm });\r\n    }\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecordTaskForm[numericName] = numericData;\r\n            } else {\r\n                selectedRecordTaskForm[numericName] = numericData.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecordTaskForm[numericName] = \"\";\r\n        }\r\n        //Sync child Data with parent Component\r\n        this.props.onNumericChange(numericData, numericName)\r\n\r\n        this.setState({ selectedRecordTaskForm });\r\n    }\r\n    render() {\r\n        let stestsynonyms =this.state.selectedRecordTaskForm.stestsynonym ? this.state.selectedRecordTaskForm.stestsynonym.split(\",\") : []\r\n      //   this.props.selectedRecord.stestsynonym ? this.props.selectedRecord.stestsynonym.split(\",\") : []\r\n\r\n        let message = `${stestsynonyms.length} ${this.props.intl.formatMessage({ id: \"IDS_TESTS\" })} ${this.props.intl.formatMessage({ id: \"IDS_SELECTED\" })}`\r\n\r\n        return (\r\n            <>\r\n\r\n                {Object.values(this.state.selectedRecordTaskForm).length > 0 ?\r\n                    <div>\r\n                        <Row className=\"mb-4\">\r\n                            <Col md={12}>\r\n                                <MediaHeader className={`labelfont`}>\r\n                                    {stestsynonyms.length === 1 ?\r\n                                        `${this.props.intl.formatMessage({ id: \"IDS_TEST\" })}: ${stestsynonyms[0]}` :\r\n                                        // <span \r\n                                        //     onMouseOver={event => tooltip && tooltip.handleMouseOver(event)}\r\n                                        //     onMouseOut={event => tooltip && tooltip.handleMouseOut(event)} //title={()=>tittleContent(stestsynonyms)}\r\n                                        //     title={stestsynonyms}>\r\n                                        //     {stestsynonyms.length}{\" \"}\r\n                                        //     {this.props.intl.formatMessage({id:\"IDS_TESTS\"})}{\" \"}\r\n                                        //     {this.props.intl.formatMessage({id:\"IDS_SELECTED\"})}\r\n                                        // </span>\r\n                                        <TestPopOver stringList={stestsynonyms} message={message}></TestPopOver>\r\n\r\n                                    }\r\n                                </MediaHeader>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    : \"\"}\r\n\r\n                <Row>\r\n\r\n                    <Col md={8}>\r\n                        <FormNumericInput\r\n                            name=\"numeric\"\r\n                            type=\"number\"\r\n                            // placeholder={intl.formatMessage({ id: \"IDS_PREANALYSISTIME\" })}\r\n                            isMandatory={false}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_PREANALYSISTIME\" })}\r\n                            value={Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.spreanalysistime : \"\"}\r\n                            strict={true}\r\n                            maxLength={6}\r\n                            noStyle={true}\r\n                            required={true}\r\n                            className=\"form-control\"\r\n                            onChange={(event) => this.onNumericChange(event, \"spreanalysistime\")}\r\n                        />\r\n                    </Col>\r\n                    <Col md={2}>\r\n                        {/* {this.this.props.selectedResultGrade.length > 0 ? */}\r\n                        <ListWrapper><MediaLabel className=\"labelfont\" >\r\n                            {this.props.intl.formatMessage({ id: \"IDS_MINUTES\" })}</MediaLabel></ListWrapper>\r\n                        {/* : \"\"} */}\r\n                    </Col>\r\n\r\n                    <Col md={8}>\r\n                        <FormNumericInput\r\n                            name=\"numeric\"\r\n                            type=\"number\"\r\n                            isMandatory={false}\r\n                            // placeholder={intl.formatMessage({ id: \"IDS_PREPARATIONTIME\" })}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_PREPARATIONTIME\" })}\r\n                            value={Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.spreparationtime : \"\"}\r\n                            strict={true}\r\n                            maxLength={6}\r\n                            noStyle={true}\r\n                            className=\"form-control\"\r\n                            onChange={(event) => this.onNumericChange(event, \"spreparationtime\")}\r\n                        />\r\n                    </Col>\r\n                    <Col md={2}>\r\n                        {/* {this.this.props.selectedResultGrade.length > 0 ? */}\r\n                        <ListWrapper><MediaLabel className=\"labelfont\" >\r\n                            {this.props.intl.formatMessage({ id: \"IDS_MINUTES\" })}</MediaLabel></ListWrapper>\r\n                        {/* : \"\"} */}\r\n                    </Col>\r\n\r\n                    <Col md={8}>\r\n                        <FormNumericInput\r\n                            name=\"numeric\"\r\n                            type=\"number\"\r\n                            isMandatory={false}\r\n                            // placeholder={intl.formatMessage({ id: \"IDS_ANALYSISTIME\" })}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_ANALYSISTIME\" })}\r\n                            value={Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.sanalysistime : \"\"}\r\n                            strict={true}\r\n                            maxLength={6}\r\n                            noStyle={true}\r\n                            className=\"form-control\"\r\n                            onChange={(event) => this.onNumericChange(event, \"sanalysistime\")}\r\n                        />\r\n                    </Col>\r\n                    <Col md={2}>\r\n                        {/* {this.this.props.selectedResultGrade.length > 0 ? */}\r\n                        <ListWrapper><MediaLabel className=\"labelfont\" >\r\n                            {this.props.intl.formatMessage({ id: \"IDS_MINUTES\" })}</MediaLabel></ListWrapper>\r\n                        {/* : \"\"} */}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <FormNumericInput\r\n                            name=\"numeric\"\r\n                            type=\"number\"\r\n                            isMandatory={false}\r\n                            // placeholder={intl.formatMessage({ id: \"IDS_MISCTIME\" })}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_MISCTIME\" })}\r\n                            value={Object.values(this.state.selectedRecordTaskForm).length > 0 ? this.state.selectedRecordTaskForm.smisctime : \"\"}\r\n                            strict={true}\r\n                            maxLength={6}\r\n                            noStyle={true}\r\n                            className=\"form-control\"\r\n                            onChange={(event) => this.onNumericChange(event, \"smisctime\")}\r\n                        />\r\n                    </Col>\r\n                    <Col md={2}>\r\n                        {/* {this.this.props.selectedResultGrade.length > 0 ? */}\r\n                        <ListWrapper><MediaLabel className=\"labelfont\" >\r\n                            {this.props.intl.formatMessage({ id: \"IDS_MINUTES\" })}</MediaLabel></ListWrapper>\r\n                        {/* : \"\"} */}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <FormTextarea\r\n                            name={\"Task Procedure\"}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_TASKPROCEDURE\" })}\r\n                            label={intl.formatMessage({ id: \"IDS_TASKPROCEDURE\" })}\r\n                            type=\"text\"\r\n                            // defaultValue={Object.values(this.state.selectedRecordTaskForm).length > 0 &&\r\n                            //     this.state.selectedRecordTaskForm!==undefined ? this.state.selectedRecordTaskForm.staskprocedure : \"\"}\r\n                                value={Object.values(this.state.selectedRecordTaskForm).length > 0 &&\r\n                                    this.state.selectedRecordTaskForm.staskprocedure!==undefined ? this.state.selectedRecordTaskForm.staskprocedure : \"\"}\r\n                                isMandatory={false} \r\n                            required={false}\r\n                            maxLength={1000}\r\n                            onChange={(event) => this.onInputChange(event, \"staskprocedure\")}\r\n                        />\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <FormTextarea\r\n                            name={\"Result\"}\r\n                            placeholder={intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            label={intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                            type=\"text\"\r\n                            // defaultValue={Object.values(this.state.selectedRecordTaskForm).length > 0 &&\r\n                            //     this.state.selectedRecordTaskForm!==undefined ? this.state.selectedRecordTaskForm.scomments : \"\"}\r\n                                value={Object.values(this.state.selectedRecordTaskForm).length > 0 &&\r\n                                    this.state.selectedRecordTaskForm.scomments!==undefined ? this.state.selectedRecordTaskForm.scomments : \"\"}\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={100}\r\n                            onChange={(event) => this.onInputChange(event, \"scomments\")}\r\n                        />\r\n                    </Col>\r\n\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n}\r\n// export default injectIntl(ResultEntryTaskForm);\r\n\r\nexport default connect(null, {\r\n    updateStore \r\n\r\n})(injectIntl(ResultEntryTaskForm));\r\n"]},"metadata":{},"sourceType":"module"}