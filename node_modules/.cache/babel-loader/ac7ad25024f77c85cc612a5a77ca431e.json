{"ast":null,"code":"import _toConsumableArray from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";var _this=this;import rsapi from'../rsapi';import{toast}from'react-toastify';import{filterRecordBasedOnTwoArrays,sortData,fillRecordBasedOnCheckBoxSelection,updatedObjectWithNewElement,getRecordBasedOnPrimaryKeyName,reArrangeArrays,filterRecordBasedOnPrimaryKeyName,rearrangeDateFormat,getSameRecordFromTwoArrays,sortDataByParent,constructOptionList,parentChildComboLoad,constructjsonOptionList,childComboLoadForEdit,constructjsonOptionDefault,replaceUpdatedObject}from'../components/CommonScript';import{transactionStatus,checkBoxOperation,SampleType}from'../components/Enumeration';import Axios from'axios';import{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';import{postCRUDOrganiseTransSearch}from'./ServiceAction';import{intl}from'../components/App';// ALPD-4914 created SchedulerConfigurationAction.js file for scheduler configuration screen\nexport function onSampleTypeChange(Map,masterData,event,labelname){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/schedulerconfiguration/getRegistrationType\",Map).then(function(response){masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},_defineProperty({},labelname,_objectSpread({},event.item)));dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function onRegTypeChange(Map,masterData,event,labelname){return function(dispatch){rsapi.post(\"/schedulerconfiguration/getRegistrationSubType\",Map).then(function(response){masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},_defineProperty({},labelname,_objectSpread({},event.item)));dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function onRegSubTypeChange(Map,masterData,event,labelname){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/schedulerconfiguration/getApprovalConfigVersion\",Map).then(function(response){masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},_defineProperty({},labelname,_objectSpread({},event.item)));dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function changeApprovalConfigVersionChange(Map,masterData,event,labelname){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/schedulerconfiguration/getApproveConfigVersionRegTemplate\",Map).then(function(response){masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},_defineProperty({},labelname,_objectSpread({},event.item)));dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function getSchedulerConfigSample(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\",_objectSpread({},inputData.inputData)).then(function(response){var masterData=_objectSpread(_objectSpread({},inputData.masterData),response.data);if(inputData.searchSampleRef!==undefined&&inputData.searchSampleRef.current!==null){inputData.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var respObject={};if(inputData.selectedFilter){respObject={selectedFilter:_objectSpread({},inputData.selectedFilter)};}//sortData(masterData);\ndispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData,loading:false,showFilter:false,skip:0,testskip:0,take:undefined,testtake:undefined,subsampleskip:0,subsampletake:undefined,showSample:undefined},respObject),{},{activeSampleTab:inputData.inputData.activeSampleTab,regSampleExisted:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function insertSchedulerConfig(inputParam,masterData){return function(dispatch){dispatch(initRequest(true));var requestUrl='';if(inputParam.isFileupload){requestUrl=rsapi.post(\"/schedulerconfiguration/createSchedulerConfigWithFile\",inputParam.formData);}else{requestUrl=rsapi.post(\"/schedulerconfiguration/createSchedulerConfig\",inputParam.inputData);}return requestUrl.then(function(response){if(response.data.rtn===\"Success\"){var _objectSpread6;var SchedulerConfigGetSample=updatedObjectWithNewElement(response.data[\"selectedSample\"],masterData.SchedulerConfigGetSample,'SchedulerConfigSample');var selectedSample=response.data[\"selectedSample\"];var SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"];var SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"];var selectedSubSample=SchedulerConfigGetSubSample;SchedulerConfigGetTest=sortData(SchedulerConfigGetTest,\"nschedulersamplecode\",\"desc\");var selectedTest=SchedulerConfigGetTest.length>0?[SchedulerConfigGetTest[0]]:[];var regSampleExisted=inputParam.inputData&&inputParam.inputData.orderTypeValue===2?true:false;if(inputParam.inputData.nneedsubsample){SchedulerConfigGetSubSample=sortData(response.data[\"SchedulerConfigGetSubSample\"],'nschedulersamplecode','desc');selectedSubSample=SchedulerConfigGetSubSample.length>0?[SchedulerConfigGetSubSample[0]]:[];SchedulerConfigGetTest=SchedulerConfigGetTest.filter(function(x){return x.nschedulersubsamplecode===selectedSubSample[0].nschedulersubsamplecode;});selectedTest=SchedulerConfigGetTest.length>0?response.data[\"selectedTest\"]:[];}if(inputParam.multipleselectionFlag){selectedSample=updatedObjectWithNewElement(response.data[\"selectedSample\"],masterData.selectedSample);updatedObjectWithNewElement(response.data[\"selectedSubSample\"],masterData.SchedulerConfigGetSubSample);updatedObjectWithNewElement(response.data[\"selectedTest\"],masterData.SchedulerConfigGetTest);SchedulerConfigGetSubSample=masterData.SchedulerConfigGetSubSample;SchedulerConfigGetTest=masterData.SchedulerConfigGetTest;}masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedSample:selectedSample,selectedSubSample:selectedSubSample,selectedTest:selectedTest,SchedulerConfigGetSubSample:SchedulerConfigGetSubSample,SchedulerConfigGetTest:SchedulerConfigGetTest,SchedulerConfigGetSample:SchedulerConfigGetSample});if(masterData[\"kendoFilterList\"]!==undefined){masterData[\"kendoFilterList\"]=undefined;}var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},(_objectSpread6={openModal:false,loadEsign:false,showConfirmAlert:false,selectedRecord:undefined,loading:false,loadPreregister:false,showSample:undefined,openPortal:false,selectedSpec:{},selectComponent:{},SelectedTest:{},selectedComponent:{},Component:[]},_defineProperty(_objectSpread6,\"selectedRecord\",{}),_defineProperty(_objectSpread6,\"SelectedTest\",[]),_defineProperty(_objectSpread6,\"Test\",[]),_defineProperty(_objectSpread6,\"selectedComponent\",{}),_defineProperty(_objectSpread6,\"subSampleDataGridList\",[]),_defineProperty(_objectSpread6,\"preregConfirmMessage\",undefined),_defineProperty(_objectSpread6,\"regSampleExisted\",regSampleExisted),_defineProperty(_objectSpread6,\"loadImportFileData\",false),_defineProperty(_objectSpread6,\"loadImportSampleCountData\",false),_defineProperty(_objectSpread6,\"skip\",0),_defineProperty(_objectSpread6,\"subsampleskip\",0),_defineProperty(_objectSpread6,\"testskip\",0),_defineProperty(_objectSpread6,\"isDynamicViewSlideOut\",false),_objectSpread6));inputParam.postParamList[0]['clearFilter']='yes';inputParam.postParamList[1]['clearFilter']='yes';inputParam.postParamList[2]['clearFilter']='yes';dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{toast.warn(response.data.rtn);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showConfirmAlert:false,preregConfirmMessage:undefined}});}}).catch(function(error){console.log(error);if(error.response.status===500){dispatch({type:DEFAULT_RETURN,payload:{loading:false,showConfirmAlert:false,preregConfirmMessage:undefined}});toast.error(error.message);}else{if(error.response.data.NeedConfirmAlert){dispatch({type:DEFAULT_RETURN,payload:{showConfirmAlert:true,preregConfirmMessage:error.response.data.rtn,preregConfirmParam:{inputParam:inputParam,masterData:masterData},loading:false,showSample:undefined}});}else{toast.warn(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showConfirmAlert:false,preregConfirmMessage:undefined}});}}});};}export function getSchedulerConfigSubSampleDetail(inputData,isServiceRequired,isParentValue){return function(dispatch){var _inputParamData;var inputParamData=(_inputParamData={nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntransactionstatus:inputData.ntransactionstatus,napprovalconfigcode:inputData.napprovalconfigcode,// activeTestTab: inputData.activeTestTab,\n//  activeSampleTab: inputData.activeTestTab,\n//  activeSubSampleTab: inputData.activeTestTab,\nuserinfo:inputData.userinfo,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedsubsample:inputData.nneedsubsample,nschedulersamplecode:inputData.nschedulersamplecode,ntype:inputData.nneedsubsample===true?inputData.checkBoxOperation===7?4:undefined:2},_defineProperty(_inputParamData,\"ntype\",inputData.nneedsubsample===true?inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTALL?checkBoxOperation.SINGLEDESELECT:undefined:checkBoxOperation.DESELECT),_defineProperty(_inputParamData,\"checkBoxOperation\",inputData.nneedsubsample===true?inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTSTATUS?checkBoxOperation.SINGLESELECT:inputData.checkBoxOperation:inputData.checkBoxOperation),_defineProperty(_inputParamData,\"selectednschedulersamplecode\",inputData.selectedSample&&inputData.selectedSample.length>0?inputData.selectedSample.map(function(item){return item.nschedulersamplecode;}).join(\",\"):null),_defineProperty(_inputParamData,\"selectedTransactionSamplecode\",inputData.selectedSample&&inputData.selectedSample.length>1&&inputData.masterData.selectedSubSample?inputData.masterData.selectedSubSample.map(function(item){return item.nschedulersubsamplecode;}).join(\",\"):null),_inputParamData);var activeName=\"\";var dataStateName=\"\";var subSample=inputData.nneedsubsample;dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"schedulerconfiguration/getSchedulerConfigSubSample\",inputParamData).then(function(response){sortData(response.data,\"descending\",\"nschedulersamplecode\");// if(isParentValue){\nresponse.data['SchedulerConfigGetSubSample']=sortDataByParent(response.data['SchedulerConfigGetSubSample'],inputData.sample,\"nschedulersamplecode\");//response.data['SchedulerConfigGetTest']= sortDataByParent(response.data['SchedulerConfigGetTest'],response.data['SchedulerConfigGetSubSample'], \"ntransactionsamplecode\");\n//  }\nvar masterData={};var skipInfo={};var oldSelectedTest=inputData.masterData.selectedTest||[];//   let externalOrderAttachmentList = response.data && response.data.ExternalOrderAttachmentList;\n//    let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\nif(subSample){var oldSelectedSubSample=inputData.masterData.selectedSubSample;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulersamplecode\",inputData.removeElementFromArray);masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSample:inputData.selectedSample,selectedPreregno:inputData.nschedulersamplecode,selectedSubSample:inputData.masterData.SchedulerConfigGetSubSample.length>0?[inputData.masterData.SchedulerConfigGetSubSample[0]]:[],activeTabIndex:inputData.activeTabIndex});// let RegistrationTestComment = [];\n//     let RegistrationTestAttachment = [];\n//   let RegistrationParameter = [];\n//   let RegistrationComment = [];\n//if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \n//if (inputData.checkBoxOperation === 1) {\nif(inputData.checkBoxOperation===checkBoxOperation.MULTISELECT){var wholeSubSampleList=masterData.SchedulerConfigGetSubSample.map(function(b){return b.nschedulersubsamplecode;});// START ALPD-3625 VISHAKH\n// oldSelectedSubSample.forEach((subsample, index) => {\n//     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n// })\noldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubSampleList.includes(item.nschedulersubsamplecode);});// END ALPD-3625 VISHAKH\nif(oldSelectedSubSample.length>0){masterData=_objectSpread(_objectSpread({},masterData),{},{selectedSubSample:oldSelectedSubSample});}var selectedTest=getSameRecordFromTwoArrays(oldSelectedTest,masterData.selectedSubSample,'nschedulersamplecode');masterData=_objectSpread(_objectSpread({},masterData),{},{selectedTest:selectedTest});}//  if (inputData.checkBoxOperation === 7) {\nif(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTALL){/*      switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;*/}//if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\nif(inputData.checkBoxOperation===checkBoxOperation.SINGLESELECT||inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTSTATUS){masterData=_objectSpread(_objectSpread({},masterData),{},{selectedTest:masterData.SchedulerConfigGetTest.length>0?[masterData.SchedulerConfigGetTest[0]]:[]});/*  switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [\r\n                                                // ...inputData.masterData.RegistrationTestAttachment, \r\n                                                ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [\r\n                                        // ...inputData.masterData.RegistrationParameter, \r\n                                        ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;*/}// masterData['ExternalOrderAttachmentList'] = externalOrderAttachmentList;\n// masterData['OutsourceDetailsList'] = outsourceDetailsList;\nvar _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake,subsampleskip=_inputData.subsampleskip,subsampletake=_inputData.subsampletake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\n// if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\ntestskip=0;subsampleskip=0;// bool = true\n// }\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake,subsampleskip:subsampleskip,subsampletake:subsampletake};// }\n}else{//let oldSelectedTest = inputData.masterData.selectedTest\n//  let oldSelectedSubSample = inputData.masterData.selectedSubSample\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulersamplecode\",inputData.removeElementFromArray);masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSample:inputData.selectedSample,selectednschedulersamplecode:inputData.nschedulersamplecode,selectedTest:inputData.masterData.SchedulerConfigGetTest.length>0?[inputData.masterData.SchedulerConfigGetTest[0]]:[],selectedSubSample:inputData.masterData.SchedulerConfigGetSubSample});// let RegistrationTestComment = [];\n// let RegistrationParameter = [];\n// let RegistrationTestAttachment = [];\n// let RegistrationComment = [];\n//if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\nif(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTALL||inputData.checkBoxOperation===checkBoxOperation.MULTISELECT){var wholeTestList=masterData.SchedulerConfigGetTest.map(function(b){return b.nschedulertestcode;});// START ALPD-3625 VISHAKH\n// oldSelectedTest.forEach((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n// })\noldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.nschedulertestcode);});// START ALPD-3625 VISHAKH\nvar keepOld=false;var nschedulertestcode;var nschedulersamplecode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{selectedTest:oldSelectedTest});}else{nschedulertestcode=inputData.masterData.SchedulerConfigGetTest.length>0?inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode:\"\";nschedulersamplecode=inputData.masterData.SchedulerConfigGetSample.length>0?inputData.masterData.SchedulerConfigGetSample[0].nschedulersamplecode:\"\";}/* switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                                        inputData.masterData.RegistrationComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/}//else if (inputData.checkBoxOperation === 5) {\nelse if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTSTATUS){/*   switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/ // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n}else{/*switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/}var _inputData2=inputData,_testskip=_inputData2.testskip,_testtake=_inputData2.testtake;var bool=false;if(inputData.masterData.SchedulerConfigGetTest.length<inputData.testskip){_testskip=0;bool=true;}if(bool){skipInfo={testskip:_testskip,testtake:_testtake};}}if(inputData.masterData.selectedSample&&inputData.sampleGridDataState&&inputData.masterData.selectedSample.length<=inputData.sampleGridDataState.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{sampleGridDataState:_objectSpread(_objectSpread({},inputData.sampleGridDataState),{},{skip:0,sort:undefined,filter:undefined})});}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{sampleGridDataState:_objectSpread(_objectSpread({},inputData.sampleGridDataState),{},{sort:undefined,filter:undefined})});}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}// let inputParam = { attachmentskip: undefined }\nif(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}// Start of ALPD-4130 on Save Additional Filter - ATE-241\nvar multifilterInfo={};if(inputData.multiFilterLoad!==undefined){if(inputData.searchSampleRef!==undefined&&inputData.searchSampleRef.current!==null){inputData.searchSampleRef.current.value=\"\";}if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";}multifilterInfo={multiFilterLoad:inputData.multiFilterLoad,openModal:inputData.openModal,searchSampleRef:inputData.searchSampleRef,searchSubSampleRef:inputData.searchSubSampleRef,searchTestRef:inputData.searchTestRef,testskip:inputData.testskip,subsampleskip:inputData.subsampleskip,skip:inputData.skip// filterColumnActive:true\n};}//  End of ALPD-4130 ATE-241\ndispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData,loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab,skip:undefined,take:undefined},skipInfo),{},{activeTabIndex:inputData.activeTabIndex},multifilterInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});}else{var bool=false;var skipInfo={};var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake,subsampletake=_inputData3.subsampletake,subsampleskip=_inputData3.subsampleskip;var oldSelectedTest=inputData.masterData.selectedTest;var oldSelectedSubSample=inputData.masterData.selectedSubSample;// let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\nvar isGrandChildGetRequired=false;var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest,inputData.removeElementFromArray[0].nschedulersamplecode,\"nschedulersamplecode\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample,inputData.removeElementFromArray[0].nschedulersamplecode,\"nschedulersamplecode\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest,inputData.removeElementFromArray[0].nschedulersamplecode,\"nschedulersamplecode\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample,inputData.removeElementFromArray[0].nschedulersamplecode,\"nschedulersamplecode\");}if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.selectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulersamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var selectedSample=inputData.selectedSample;var filterTestSameOldSelectedTest=getSameRecordFromTwoArrays(oldSelectedTest,inputData.masterData.SchedulerConfigGetTest,\"nschedulertestcode\");var selectedTest=filterTestSameOldSelectedTest.length>0?filterTestSameOldSelectedTest:inputData.masterData.SchedulerConfigGetTest.length>0?[inputData.masterData.SchedulerConfigGetTest[0]]:[];var nschedulertestcode=selectedTest.length>0?selectedTest.map(function(x){return x.nschedulertestcode;}).join(\",\"):\"-1\";var selectedSubSample=inputData.masterData.SchedulerConfigGetSubSample;if(subSample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");selectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.SchedulerConfigGetSubSample[0]];if(inputData.masterData.SchedulerConfigGetSubSample.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}// START ALPD-3671 VISHAKH\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSample:selectedSample,selectedSubSample:selectedSubSample,selectedTest:selectedTest});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}// END ALPD-3671 VISHAKH\nif(inputData.masterData.SchedulerConfigGetTest.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:testskip,testtake:testtake});}// inputData = {\n//     ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\n//     selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\n// }\ninputData=_objectSpread(_objectSpread({},inputData),{},_defineProperty({nschedulertestcode:nschedulertestcode,masterData:masterData,selectedTest:selectedTest,selectedSubSample:selectedSubSample,checkBoxOperation:checkBoxOperation.SINGLESELECT,skipInfo:skipInfo},\"masterData\",masterData));if(subSample){if(selectedTest.length===0){inputData[\"nschedulersamplecode\"]=selectedSubSample.map(function(x){return x.nschedulersamplecode;}).join(\",\");inputData[\"nschedulersubsamplecode\"]=selectedSubSample.map(function(x){return x.nschedulersubsamplecode;}).join(\",\");// inputData[\"checkBoxOperation\"] = 3\ninputData[\"checkBoxOperation\"]=checkBoxOperation.SINGLESELECT;inputData[\"childTabsKey\"]=[\"SchedulerConfigGetTest\"];dispatch(getSchedulerTestDetail(inputData,true));}else{//dispatch(getTestChildTabDetailRegistration(inputData, true));\n}}else{//  dispatch(getTestChildTabDetailRegistration(inputData, true));\n}}else{var _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSample:inputData.selectedSample,selectedPreregno:inputData.nschedulersamplecode,selectedTest:TestSelected?TestSelected:inputData.masterData.SchedulerConfigGetTest.length>0?[inputData.masterData.SchedulerConfigGetTest[0]]:[],// RegistrationTestComment,\nselectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.SchedulerConfigGetSubSample});// START ALPD-3671 VISHAKH\nif(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";_masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";_masterData['searchedTest']=undefined;}// END ALPD-3671 VISHAKH\nvar subsamplecheck=true;if(subSample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample,inputData.removeElementFromArray[0].nschedulersamplecode,\"nschedulersamplecode\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.SchedulerConfigGetSubSample.map(function(b){return b.nschedulersubsamplecode;});// START ALPD-3625 VISHAKH\n// oldSelectedSubSample.forEach((test, index) => {\n//     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\noldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubSample.includes(item.nschedulersubsamplecode);});// END ALPD-3625 VISHAKH\nif(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.SchedulerConfigGetSubSample[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{selectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"nschedulersamplecode\"]=selectedSubSample1.map(function(x){return x.nschedulersamplecode;}).join(\",\");inputData[\"nschedulersubsamplecode\"]=selectedSubSample1.map(function(x){return x.nschedulersubsamplecode;}).join(\",\");// inputData[\"checkBoxOperation\"] = 3\ninputData[\"checkBoxOperation\"]=checkBoxOperation.SINGLESELECT;inputData[\"childTabsKey\"]=[\"SchedulerConfigGetTest\"];subsamplecheck=false;//  dispatch(getRegistrationTestDetail(inputData, true));\n}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.SchedulerConfigGetSubSample.map(function(b){return b.nschedulersubsamplecode;});// START ALPD-3625 VISHAKH\n// oldSelectedSubSample.forEach((test, index) => {\n//     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\noldSelectedSubSample=oldSelectedSubSample.filter(function(item){return _wholeSubSample.includes(item.nschedulersubsamplecode);});// END ALPD-3625 VISHAKH\n}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{selectedSubSample:oldSelectedSubSample});}if(inputData.masterData.SchedulerConfigGetSubSample.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.SchedulerConfigGetTest.map(function(b){return b.nschedulertestcode;});// START ALPD-3625 VISHAKH\n// oldSelectedTest.forEach((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\noldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.nschedulertestcode);});// END ALPD-3625 VISHAKH\nvar keepOld=false;var _nschedulertestcode;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{selectedTest:oldSelectedTest});}else{_nschedulertestcode=inputData.masterData.SchedulerConfigGetTest.length>0?inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode:\"-1\";}// masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nschedulertestcode, \"nschedulertestcode\")\n//  masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nschedulertestcode, \"nschedulertestcode\")\nvar _skipInfo={};if(inputData.masterData.SchedulerConfigGetTest.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo=_objectSpread(_objectSpread({},_skipInfo),{},{testskip:testskip,testtake:testtake});}var dataStateArray=[{activeName:'selectedSample',dataStateName:'sampleGridDataState'},{activeName:'RegistrationSourceCountry',dataStateName:'sourceDataState'},{activeName:'RegistrationTestComment',dataStateName:'testCommentDataState'},{activeName:'RegistrationParameter',dataStateName:'resultDataState'}];dataStateArray.map(function(arr){if(inputData[arr.dataStateName]&&_masterData[arr.activeName]&&_masterData[arr.activeName].length<=inputData[arr.dataStateName].skip){_skipInfo=_objectSpread(_objectSpread({},_skipInfo),{},_defineProperty({},arr.dataStateName,_objectSpread(_objectSpread({},inputData[arr.dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{_skipInfo=_objectSpread(_objectSpread({},_skipInfo),{},_defineProperty({},arr.dataStateName,_objectSpread(_objectSpread({},inputData[arr.dataStateName]),{},{sort:undefined,filter:undefined})));}return null;});dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_masterData,loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},_skipInfo)});}}};}export function getSchedulerTestDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,nschedulersubsamplecode:inputData.nschedulersubsamplecode,ntransactionstatus:inputData.ntransactionstatus,napprovalconfigcode:inputData.napprovalconfigcode,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,activeSubSampleTab:inputData.activeSubSampleTab,userinfo:inputData.userinfo,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample,selectedTransactionsamplecode:inputData.selectedSubSample&&inputData.selectedSubSample.length>0&&inputData.selectedSubSample.map(function(item){return item.nschedulersubsamplecode;}).join(\",\"),noutsourcerequired:inputData.masterData&&inputData.masterData.RealSampleTypeValue?inputData.masterData.RealSampleTypeValue.noutsourcerequired:transactionStatus.NA};var subSample=inputData.nneedsubsample;var activeName=\"\";var dataStateName=\"\";dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"schedulerconfiguration/getSchedulerConfigTest\",inputParamData).then(function(response){//sortData(response.data);\n//ALPD-1609\nsortData(response.data,'descending','nschedulersamplecode');var oldSelectedTest=inputData.masterData.selectedTest||[];var oldSelectedSubSample=inputData.masterData.selectedSubSample||[];// let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulersubsamplecode\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSubSample:inputData.selectedSubSample,selectedTransactionsamplecode:inputData.nschedulersubsamplecode,selectedTest:inputData.masterData.SchedulerConfigGetTest.length>0?[inputData.masterData.SchedulerConfigGetTest[0]]:[]// RegistrationTestComment,\n});//let wholeRegistrationTestComments = [];\n// let RegistrationTestComment = [];\n// let RegistrationTestAttachment = [];\n// let RegistrationParameter = [];\n// let RegistrationSampleComment = [];\n// let RegistrationSampleAttachment = [];\n//if (inputData.checkBoxOperation === 1) {\nif(inputData.checkBoxOperation===checkBoxOperation.MULTISELECT){var wholeTestList=masterData.SchedulerConfigGetTest.map(function(b){return b.nschedulertestcode;});// START ALPD-3625 VISHAKH\n// oldSelectedTest.forEach((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n// })\noldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.nschedulertestcode);});// END ALPD-3625 VISHAKH\nvar keepOld=false;var nschedulertestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{selectedTest:oldSelectedTest});}else{nschedulertestcode=inputData.masterData.SchedulerConfigGetTest.length>0?inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode:\"\";}/*   switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                    inputData.masterData.RegistrationTestAttachment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n*/}// else if (inputData.checkBoxOperation === 5) {\nelse if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTSTATUS){/*switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/ // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n}// else if (inputData.checkBoxOperation === 7) {\nelse if(inputData.checkBoxOperation===checkBoxOperation.QUICKSELECTALL){var testList=reArrangeArrays(inputData.masterData.SchedulerConfigGetSubSample,response.data.SchedulerConfigGetTest,\"nschedulersubsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{selectedTest:testList?testList.length>0?[testList[0]]:[]:[],SchedulerConfigGetTest:testList?testList.length>0?testList:[]:[]//ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n});/* switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let RegistrationParameter1 = [...resultResponseData];\r\n                                let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1 : -1\r\n\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/ // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n}else{/*  switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/}if(subSample){var wholeSubsampleList=masterData.SchedulerConfigGetSubSample.map(function(b){return b.nschedulersubsamplecode;});// START ALPD-3625 VISHAKH\n// oldSelectedSubSample.map((test, index) => {\n//     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\noldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubsampleList.includes(item.nschedulersubsamplecode);});// END ALPD-3625 VISHAKH\nvar _keepOld=false;var nschedulersubsamplecode;if(oldSelectedSubSample.length>0){_keepOld=true;}else{nschedulersubsamplecode=masterData.selectedSubSample[0].nschedulersubsamplecode;}/* switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }*/}/*  masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n                    masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n                    masterData['OutsourceDetailsList'] = outsourceDetailsList;*/var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake,subsampleskip=_inputData4.subsampleskip,subsampletake=_inputData4.subsampletake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\ntestskip=0;// bool = true\n// }\nif(inputData.masterData.SchedulerConfigGetSubSample.length<inputData.subsampleskip){subsampleskip=0;// bool = true\n}// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake,subsampleskip:subsampleskip,subsampletake:subsampletake};// }\nif(inputData.masterData.selectedSample&&inputData.sampleGridDataState&&inputData.masterData.selectedSample.length<=inputData.sampleGridDataState.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{sampleGridDataState:_objectSpread(_objectSpread({},inputData.sampleGridDataState),{},{skip:0,sort:undefined,filter:undefined})});}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{sampleGridDataState:_objectSpread(_objectSpread({},inputData.sampleGridDataState),{},{sort:undefined,filter:undefined})});}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}//  let inputParam = { attachmentskip: undefined }\nif(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,// activeTabIndex: inputData.activeTabIndex,\nactiveSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.selectedTest;// START ALPD-3625 VISHAKH\n// let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\nvar TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest,inputData.removeElementFromArray[0].nschedulersubsamplecode,\"nschedulersubsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}// END ALPD-3625 VISHAKH\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.selectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulersubsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var nschedulertestcode=inputData.masterData.SchedulerConfigGetTest.length>0?inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode.toString():\"-1\";var selectedSubSample=inputData.selectedSubSample;// let selectedPreregno = inputData.npreregno;\nvar selectedTest=inputData.masterData.SchedulerConfigGetTest.length>0?[inputData.masterData.SchedulerConfigGetTest[0]]:[];// let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSubSample:selectedSubSample,selectedTest:selectedTest});// inputData = {\n//     ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\n//     selectedSubSample, checkBoxOperation: 3, activeTabIndex: inputData.masterData.activeTabIndex\n// }\n// START ALPD-3671 VISHAKH\nif(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}// END ALPD-3671 VISHAKH\ninputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"RegistrationParameter\"],nschedulertestcode:nschedulertestcode,masterData:masterData,selectedTest:selectedTest,selectedSubSample:selectedSubSample,checkBoxOperation:checkBoxOperation.SINGLESELECT,activeTabIndex:inputData.masterData.activeTabIndex});//dispatch(getTestChildTabDetailRegistration(inputData, true));\n}else{var _masterData2=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSubSample:inputData.selectedSubSample,selectedSchedulersubsamplecode:inputData.nschedulersubsamplecode,selectedTest:inputData.masterData.SchedulerConfigGetTest.length>0?[inputData.masterData.SchedulerConfigGetTest[0]]:[]});// START ALPD-3671 VISHAKH\nif(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";_masterData2['searchedTest']=undefined;}// END ALPD-3671 VISHAKH\nvar wholeTestList=_masterData2.SchedulerConfigGetTest.map(function(b){return b.ntransactiontestcode;});// START ALPD-3625 VISHAKH\n// oldSelectedTest.forEach((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\noldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});// END ALPD-3625 VISHAKH\nvar keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;_masterData2=_objectSpread(_objectSpread({},_masterData2),{},{selectedTest:oldSelectedTest});}else{ntransactiontestcode=inputData.masterData.SchedulerConfigGetTest.length>0?inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode:\"-1\";}_masterData2[\"RegistrationTestComment\"]=keepOld?inputData.masterData.RegistrationTestComment?inputData.masterData.RegistrationTestComment:[]:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");_masterData2[\"RegistrationParameter\"]=keepOld?inputData.masterData.RegistrationParameter?inputData.masterData.RegistrationParameter:[]:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter,ntransactiontestcode,\"ntransactiontestcode\");var skipInfo={};var dataStateArray=[{activeName:'selectedSample',dataStateName:'sampleGridDataState'},{activeName:'RegistrationSourceCountry',dataStateName:'sourceDataState'},{activeName:'RegistrationTestComment',dataStateName:'testCommentDataState'},{activeName:'RegistrationParameter',dataStateName:'resultDataState'}];dataStateArray.map(function(arr){if(inputData[arr.dataStateName]&&_masterData2[arr.activeName]&&_masterData2[arr.activeName].length<=inputData[arr.dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},arr.dataStateName,_objectSpread(_objectSpread({},inputData[arr.dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},arr.dataStateName,_objectSpread(_objectSpread({},inputData[arr.dataStateName]),{},{sort:undefined,filter:undefined})));}return null;});dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_masterData2,loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},skipInfo)});}}};}export function ReloadDataSchedulerConfig(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\",_objectSpread({},inputData.inputData)).then(function(response){var masterData=_objectSpread(_objectSpread({},inputData.masterData),response.data);if(inputData.searchSampleRef!==undefined&&inputData.searchSampleRef.current!==null){inputData.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var respObject={};if(inputData.selectedFilter){respObject={selectedFilter:_objectSpread({},inputData.selectedFilter)};}sortData(masterData,\"descending\",\"nschedulersamplecode\");dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData,loading:false,showFilter:false,skip:0,testskip:0,take:undefined,testtake:undefined,subsampleskip:0,subsampletake:undefined,showSample:undefined},respObject),{},{activeSampleTab:inputData.inputData.activeSampleTab,regSampleExisted:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function getTestChildTabDetailSchedulerConiguration(inputData,isServiceRequired){return function(dispatch){if(inputData.nschedulertestcode===\"\"){inputData.nschedulertestcode=\"0\";}if(inputData.nschedulertestcode&&inputData.nschedulertestcode.length>0){var inputParamData={nschedulertestcode:inputData.nschedulertestcode,nschedulersamplecode:inputData.nschedulersamplecode,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,userinfo:inputData.userinfo,nschedulersubsamplecode:inputData.nschedulersubsamplecode?inputData.nschedulersubsamplecode:inputData.selectedSubSample&&inputData.selectedSubSample.map(function(item){return item.nschedulersubsamplecode;}).join(\",\")};var url=null;var testtake=inputData.testtake;var activeName=\"\";var dataStateName=\"\";dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"schedulerconfiguration/getSchedulerConfigParameter\",_objectSpread({},inputParamData)).then(function(response){var skipInfo={};var responseData=_objectSpread(_objectSpread({},response.data),{},{selectedSample:inputData.selectedSample||inputData.masterData.selectedSample,selectedTest:inputData.selectedTest});//responseData = sortData(responseData)\n// fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulersubsamplecode\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedSample:inputData.selectedSample||inputData.masterData.selectedSample,selectedTest:inputData.selectedTest,selectedSchedulerSamplecode:inputData.nschedulersamplecode,selectedSchedulerSubSamplecode:inputData.nschedulersubsamplecode,selectedSchedulerTestCode:inputData.nschedulertestcode,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId});if(inputData[\"resultDataState\"]&&masterData[\"RegistrationParameter\"]&&masterData[\"RegistrationParameter\"].length<=inputData[\"resultDataState\"].skip){skipInfo=_defineProperty({},\"resultDataState\",_objectSpread(_objectSpread({},inputData[\"resultDataState\"]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},\"resultDataState\",_objectSpread(_objectSpread({},inputData[\"resultDataState\"]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName,testtake:testtake,testskip:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.selectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"nschedulertestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{selectedTest:inputData.selectedTest,selectedSchedulerSamplecode:inputData.nschedulersamplecode,selectedSchedulerSubSamplecode:inputData.nschedulersubsamplecode,selectedSchedulerTestCode:inputData.nschedulertestcode});if(inputData[\"resultDataState\"]&&masterData[\"SchedulerConfigurationParameter\"].length<=inputData[\"resultDataState\"].skip){skipInfo=_defineProperty({},\"resultDataState\",_objectSpread(_objectSpread({},inputData[\"resultDataState\"]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},\"resultDataState\",_objectSpread(_objectSpread({},inputData[\"resultDataState\"]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName,testtake:testtake,testskip:undefined},skipInfo)});}}else{var SchedulerConfigurationParameter=inputData.masterData.SchedulerConfigurationParameter;SchedulerConfigurationParameter=[];dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{selectedTest:[],SchedulerConfigurationParameter:SchedulerConfigurationParameter}),loading:false,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId}});}};}export function addsubSampleSchedulerConfiguration(masterData,userinfo,regcolumnList,selectRecord,regchildColumnList,regSubSamplecomboComponents,regSubSamplewithoutCombocomponent,Map,ncontrolcode,specBasedComponent,specBasedTestPackage){return function(dispatch){var urlArray=[];var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var parentcolumnlist=regcolumnList.filter(function(x){return x.inputtype!=='backendsearchfilter'&&x.inputtype!=='frontendsearchfilter'&&x.readonly!==true;});urlArray[0]=timeZoneService;var actualService=rsapi.post(\"dynamicpreregdesign/getComboValues\",{parentcolumnlist:parentcolumnlist,childcolumnlist:regchildColumnList,userinfo:userinfo});urlArray[1]=actualService;if(specBasedComponent){var ComponentTestBySpec=rsapi.post(\"/schedulerconfiguration/getComponentBySpec\",_objectSpread(_objectSpread({},Map),{},{specBasedComponent:specBasedComponent,userinfo:userinfo}));urlArray[2]=ComponentTestBySpec;}else{var TestGet=rsapi.post(\"/schedulerconfiguration/getTestfromDB\",{nallottedspeccode:Map[\"nallottedspeccode\"],slno:1,specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage,conditionalTestPackage:true,nneedsubsample:Map[\"nneedsubsample\"]});urlArray[2]=TestGet;var TestPackageGet=rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\",{nallottedspeccode:Map[\"nallottedspeccode\"],specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage});urlArray[5]=TestPackageGet;var TestSectionGet=rsapi.post(\"/schedulerconfiguration/getTestfromSection\",{nallottedspeccode:Map[\"nallottedspeccode\"],specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage});urlArray[6]=TestSectionGet;}var currentDate=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:userinfo});urlArray[3]=currentDate;var dateService=rsapi.post(\"dynamicpreregdesign/dateValidation\",{datecolumnlist:regSubSamplewithoutCombocomponent.filter(function(x){return x.inputtype===\"date\";}),userinfo:userinfo});urlArray[4]=dateService;dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var timeZoneMap=constructOptionList(response[0].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,true);var timeZoneList=timeZoneMap.get(\"OptionList\");var defaultTimeZone={label:userinfo.stimezoneid,value:userinfo.ntimezonecode};var newcomboData=parentChildComboLoad(regcolumnList.filter(function(x){return x.inputtype!=='backendsearchfilter'&&x.inputtype!=='frontendsearchfilter'&&x.readonly!==true;}),response[1].data,selectRecord,regchildColumnList,regSubSamplewithoutCombocomponent,undefined,userinfo.slanguagetypecode,userinfo);var TestCombined=[];var lstComponent=[];var PackageData=[];var TestSectionData=[];var selectedRecord1=newcomboData.selectedRecord;if(specBasedComponent){var lstComponentMap=constructOptionList(response[2].data.lstComponent||[],\"ncomponentcode\",\"scomponentname\",undefined,undefined,true);lstComponent=lstComponentMap.get(\"OptionList\");//Commented by Dhanushya for jira ETICA-22\n// if (lstComponent.length > 0) {\n//     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\n//     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\n//     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\n//     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\n// }\n}else{//if (specBasedTestPackage) {\nvar PackageDataMap=constructOptionList(response[5].data.TestPackage||[],\"ntestpackagecode\",\"stestpackagename\",undefined,undefined,true);PackageData=PackageDataMap.get(\"OptionList\");var TestSectionDataMap=constructOptionList(response[6].data.TestSection||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,true);TestSectionData=TestSectionDataMap.get(\"OptionList\");// if (PackageData.length === 0) {\n//     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n// } \n// }\n// else {\nTestCombined=response[2].data;// }\n}var comboData1=newcomboData.comboData;regSubSamplewithoutCombocomponent.map(function(componentrow){if(componentrow.inputtype===\"date\"){if(componentrow.loadcurrentdate){selectedRecord1[componentrow.label]=componentrow.loadcurrentdate?rearrangeDateFormat(userinfo,response[3].data):\"\";selectedRecord1[componentrow.label+\"value\"]=selectedRecord1[componentrow.label];}else if(componentrow.nperiodcode){selectedRecord1[componentrow.label+\"value\"]=response[4].data[componentrow.label]?new Date(response[4].data[componentrow.label][\"datevalue\"]):null;if(componentrow.loadselecteddate){selectedRecord1[componentrow.label]=response[4].data[componentrow.label]?new Date(response[4].data[componentrow.label][\"datevalue\"]):null;}//    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n//    new Date(response[2].data[componentrow.label]):null;\n}else{selectedRecord1[componentrow.label+\"value\"]=new Date();}if(componentrow.hidebeforedate){selectedRecord1[componentrow.label+\"min\"]=selectedRecord1[componentrow.label+\"value\"];}if(componentrow.hideafterdate){selectedRecord1[componentrow.label+\"max\"]=selectedRecord1[componentrow.label+\"value\"];}}else if(componentrow.inputtype===\"radio\"||componentrow.inputtype===\"checkbox\"||componentrow.inputtype===\"predefineddropdown\"){if(componentrow['radiodefaultvalue']){if(componentrow.inputtype===\"checkbox\"){var val='';componentrow.radiodefaultvalue&&componentrow.radiodefaultvalue.length>0&&componentrow.radiodefaultvalue.map(function(x,i){val=val+(i===componentrow.radiodefaultvalue.length-1?x.label:x.label+',');});selectedRecord1[componentrow.label]=val;}else if(componentrow.inputtype===\"predefineddropdown\"){selectedRecord1[componentrow.label]=componentrow.radiodefaultvalue?componentrow.radiodefaultvalue:\"\";}else{selectedRecord1[componentrow.label]=componentrow.radiodefaultvalue?componentrow.radiodefaultvalue.label:\"\";}}else{if(componentrow.inputtype===\"radio\"){selectedRecord1[componentrow.label]=componentrow.radioOptions?componentrow.radioOptions.tags[0].text:\"\";}}}});var inputParam={screenName:intl.formatMessage({id:\"IDS_SUBSAMPLE\"}),showSaveContinue:false,parentPopUpSize:\"lg\",loading:false,lstComponent:lstComponent,openModal:true,loadPrinter:false,operation:\"create\",loadScheduleSubSample:true,selectedRecord:selectedRecord1,regSubSamplecomboData:comboData1,regSubSamplecomboComponents:regSubSamplecomboComponents,regSubSamplewithoutCombocomponent:regSubSamplewithoutCombocomponent,TestCombined:TestCombined,regparentSubSampleColumnList:regcolumnList,regchildSubSampleColumnList:regchildColumnList,ncontrolCode:ncontrolcode,timeZoneList:timeZoneList,defaultTimeZone:defaultTimeZone,masterData:masterData,specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage,TestPackage:PackageData,//ALPD-624\ntestskip:0,subsampleskip:0,TestSection:TestSectionData,AllTest:TestCombined,AllSection:TestSectionData};// if (specBasedComponent) {\n//Added by Dhanushya for jira ETICA-22\nif(specBasedComponent&&selectedRecord1['ncomponentcode']!==undefined){dispatch(componentTest(selectedRecord1,true,specBasedComponent,[],specBasedTestPackage,true,inputParam));}else{dispatch({type:DEFAULT_RETURN,payload:_objectSpread({},inputParam)});}}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function componentTest(selectedobject,Reg,specBasedComponent,Component,specBasedTestPackage,conditionalTestPackage,inputParam){return function(dispatch){dispatch(initRequest(true));var urlArray=[];Component=Component?Component:[];var TestGet=rsapi.post(\"/schedulerconfiguration/getTestfromDB\",{nspecsampletypecode:selectedobject.nspecsampletypecode,slno:Component?Object.keys(Component).length+1:1,specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage,conditionalTestPackage:conditionalTestPackage,nneedsubsample:selectedobject.nneedsubsample});urlArray[0]=TestGet;var TestPackageGet=rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\",{nspecsampletypecode:selectedobject.nspecsampletypecode,slno:Component?Object.keys(Component).length+1:1,specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage,conditionalTestPackage:conditionalTestPackage});urlArray[1]=TestPackageGet;var TestSectionGet=rsapi.post(\"/schedulerconfiguration/getTestfromSection\",{nspecsampletypecode:selectedobject.nspecsampletypecode,slno:Component?Object.keys(Component).length+1:1,specBasedComponent:specBasedComponent,specBasedTestPackage:specBasedTestPackage,conditionalTestPackage:conditionalTestPackage});urlArray[2]=TestSectionGet;Axios.all(urlArray).then(function(response){var PackageData=[];var TestData=[];var TestSectionData=[];// if (specBasedTestPackage) {\nvar PackageDataMap=constructOptionList(response[1].data.TestPackage||[],\"ntestpackagecode\",\"stestpackagename\",undefined,undefined,true);PackageData=PackageDataMap.get(\"OptionList\");var testSectionDataMap=constructOptionList(response[2].data.TestSection||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,true);TestSectionData=testSectionDataMap.get(\"OptionList\");// if (PackageData.length === 0) {\n//     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \n// } \n//   }\n//    else {\nTestData=response[0].data;//  }\n//let Test = [];\n// Test[selectedobject.slno] = TestData;\nvar Map={};if(Reg){Map[\"selectedRecord\"]=selectedobject;}else{Map[\"selectComponent\"]=selectedobject;}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread(_objectSpread({},inputParam),{},{TestCombined:TestData,AllTest:TestData,TestPackage:PackageData},Map),{},{loading:false,selectedTestData:[],selectPackage:[],TestSection:TestSectionData,selectSection:[],AllSection:TestSectionData})});}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function testSectionTest(selectedobject,Reg,specBasedComponent,Component,selectComponent,objComponent,LoginProps,selectPackage,selectSection,subSampleBased,selectedSpec,nneedsubsample,action){return function(dispatch){dispatch(initRequest(true));Component=Component?Component:[];rsapi.post(\"/schedulerconfiguration/getTestBasedTestSection\",{nspecsampletypecode:selectComponent&&selectComponent.nspecsampletypecode?selectComponent.nspecsampletypecode:selectedobject.nspecsampletypecode,specBasedComponent:specBasedComponent,ntestpackagecode:selectPackage.ntestpackagecode&&selectPackage.ntestpackagecode.value||-1,nsectioncode:selectSection.nsectioncode.value,nallottedspeccode:selectedSpec&&selectedSpec.value!==undefined?selectedSpec.value:selectedobject.nallottedspeccode}).then(function(response){var Map={};var TestData=response.data;var Test=action!==\"AddSubSample\"?LoginProps.Test||[]:[];var componentTest=[];if(subSampleBased){componentTest=Test[Component?Object.keys(Component).length+1:1]?Test[Component?Object.keys(Component).length+1:1]:[];}else{componentTest=objComponent&&Test[objComponent.slno]?Test[objComponent.slno]:[];}var availableTest=filterRecordBasedOnTwoArrays(TestData,componentTest,\"ntestcode\");var TestCombined=filterRecordBasedOnTwoArrays(TestData,componentTest,\"ntestcode\");delete selectedobject.ntestgrouptestcode;if(Reg){Map[\"selectedRecord\"]=selectedobject;}else{Map[\"selectPackage\"]=selectPackage;}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({availableTest:availableTest,TestCombined:TestCombined},Map),{},{loading:false,selectedTestData:[],AllTest:LoginProps.AllTest})});}).catch(function(error){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}export function saveSchedulerSubSample(inputParam){return function(dispatch){dispatch(initRequest(true));var requestUrl='';if(inputParam.isFileupload){requestUrl=rsapi.post(\"/schedulerconfiguration/createSubSampleWithFile\",inputParam.formData);}else{requestUrl=rsapi.post(\"/schedulerconfiguration/createSubSample\",inputParam.inputData);}return requestUrl.then(function(response){var SchedulerConfigGetSubSample=updatedObjectWithNewElement(inputParam.inputData.masterData.SchedulerConfigGetSubSample,response.data[\"selectedSubSample\"]);var SchedulerConfigGetTest=response.data[\"selectedTest\"];var selectedSubSample=response.data[\"selectedSubSample\"];//let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"] && response.data[\"SchedulerConfigGetSubSample\"];\nSchedulerConfigGetTest=sortData(SchedulerConfigGetTest,\"nschedulersamplecode\",\"desc\");var selectedTest=SchedulerConfigGetTest.length>0?[SchedulerConfigGetTest[0]]:[];var SchedulerConfigurationParameter=response.data[\"SchedulerConfigurationParameter\"];SchedulerConfigurationParameter=SchedulerConfigurationParameter?getSameRecordFromTwoArrays(SchedulerConfigurationParameter,selectedTest,'nschedulertestcode'):SchedulerConfigurationParameter;//  let SchedulerConfigGetSample = replaceUpdatedObject(response.data[\"selectedSample\"], inputParam.inputData.masterData.SchedulerConfigGetSample, 'nschedulersamplecode');\n//let selectedSample = response.data[\"selectedSample\"];\nvar masterData=_objectSpread({},inputParam.inputData.masterData);masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedSubSample:selectedSubSample,selectedTest:selectedTest,SchedulerConfigGetSubSample:SchedulerConfigGetSubSample,SchedulerConfigGetTest:SchedulerConfigGetTest,SchedulerConfigurationParameter:SchedulerConfigurationParameter});var respObject={masterData:masterData,openModal:false,loadEsign:false,loading:false,showSample:undefined,selectedRecord:{},loadScheduleSubSample:false,showConfirmAlert:false,subSampleConfirmMessage:undefined};inputParam.postParamList[0]['clearFilter']='no';inputParam.postParamList[1]['clearFilter']='yes';inputParam.postParamList[2]['clearFilter']='yes';dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}).catch(function(error){if(error.response.status===500){dispatch({type:DEFAULT_RETURN,payload:{loading:false,showConfirmAlert:false,subSampleConfirmMessage:undefined}});toast.error(error.message);}else{if(error.response.data.NeedConfirmAlert){dispatch({type:DEFAULT_RETURN,payload:{showConfirmAlert:true,subSampleConfirmMessage:error.response.data.rtn,subSampleConfirmParam:{inputParam:inputParam},loading:false}});}else if(error.response.data.rtn){toast.warn(intl.formatMessage({id:error.response.data.rtn}));dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else{toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showConfirmAlert:false,subSampleConfirmMessage:undefined}});}}});};}export function getEditSchedulerSubSampleComboService(inputParam,columnList,selectedRecord1,childColumnList,comboComponents,withoutCombocomponent,specBasedComponent){return function(dispatch){var _inputParam=_objectSpread({},inputParam),userInfo=_inputParam.userInfo,operation=_inputParam.operation,masterData=_inputParam.masterData;if(masterData[\"selectedSubSample\"][0].ntransactionstatus===transactionStatus.DRAFT){if(masterData[\"selectedSubSample\"].length>1||masterData[\"selectedSubSample\"].findIndex(function(x){return x[inputParam.primaryKeyName]===inputParam[\"mastertoedit\"][inputParam.primaryKeyName];})===-1){inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"]=true;}masterData[\"selectedSubSample\"]=[];masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);inputParam.editSubSampleSchedulerParam[\"nschedulersamplecode\"]=inputParam[\"mastertoedit\"][\"nschedulersamplecode\"];inputParam.editSubSampleSchedulerParam[\"checkBoxOperation\"]=checkBoxOperation.SINGLESELECT;inputParam.editSubSampleSchedulerParam[\"nfilterstatus\"]=inputParam[\"mastertoedit\"][\"ntransactionstatus\"];inputParam.editSubSampleSchedulerParam[\"napprovalconfigcode\"]=inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];var nschedulersubsamplecode=inputParam.mastertoedit[inputParam.primaryKeyName];if(nschedulersubsamplecode===undefined){toast.info(intl.formattedMessage({id:\"IDS_SELECTVALIDSUBSAMPLE\"}));}else{var urlArray=[];var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var selectedRegistration=rsapi.post(\"/schedulerconfiguration/getEditSchedulerSubSampleComboService\",_objectSpread(_objectSpread({},inputParam.editSubSampleSchedulerParam),{},{nschedulersubsamplecode:nschedulersubsamplecode,parentcolumnlist:columnList,childcolumnlist:childColumnList,userinfo:userInfo}));var dateService=rsapi.post(\"dynamicpreregdesign/dateValidation\",{datecolumnlist:withoutCombocomponent.filter(function(x){return x.inputtype===\"date\";}),userinfo:userInfo});urlArray=[timeZoneService,selectedRegistration,dateService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var _payload;var selectedRecord=_objectSpread({},response[1].data[\"EditData\"]);selectedRecord=_objectSpread(_objectSpread({},selectedRecord),selectedRecord['jsondata']);var timeZoneMap=constructOptionList(response[0].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,true);var timeZoneList=timeZoneMap.get(\"OptionList\");var defaultTimeZone={label:userInfo.stimezoneid,value:userInfo.ntimezonecode};if(specBasedComponent){selectedRecord[\"ncomponentcode\"]={label:selectedRecord[\"scomponentname\"],value:selectedRecord[\"ncomponentcode\"]};}var languagetypeCode=undefined;var comboData=response[1].data;delete comboData['EditData'];var comboValues={};if(columnList.length>0){columnList.map(function(x){if(x.inputtype==='combo'){if(comboData[x.label]&&comboData[x.label].length>0)//&& comboData[x.label][0].hasOwnProperty(x.source) \n{if(comboData[x.label].length>0){if(comboData[x.label][0].label===undefined){var optionList=constructjsonOptionList(comboData[x.label]||[],x.valuemember,x.displaymember,false,false,true,undefined,x.source,x.isMultiLingual,languagetypeCode,x);comboData[x.label]=optionList.get(\"OptionList\");}else{comboData[x.label]=comboData[x.label];var _optionList=constructjsonOptionDefault(comboData[x.label]||[],x.valuemember,x.displaymember,false,false,true,undefined,x.source,x.isMultiLingual,languagetypeCode,x);}}else{comboData[x.label]=[];}//comboValues = childComboLoad(x, comboData, selectedRecord, \n//   childColumnList, withoutCombocomponent)\\\ncomboValues=childComboLoadForEdit(x,comboData,selectedRecord,childColumnList,withoutCombocomponent);}else{comboValues={\"comboData\":comboData};}}else{comboValues=_objectSpread({comboData:comboData},comboValues);}});}else{comboValues={\"comboData\":comboData};}// withoutCombocomponent.map(date => {\n//     if (date.inputtype === 'date')\n//         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\n//             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\n// })\nwithoutCombocomponent.map(function(date){if(date.inputtype==='date'){selectedRecord[date.label]=selectedRecord[date.label]&&selectedRecord[date.label]!=='-'?rearrangeDateFormat(userInfo,selectedRecord[date.label]):\"\";if(date.nperiodcode){selectedRecord[date.label+\"value\"]=response[2].data[date.label]?new Date(response[2].data[date.label][\"datevalue\"]):null;}else{selectedRecord[date.label+\"value\"]=new Date();}if(date.hidebeforedate){selectedRecord[date.label+\"min\"]=selectedRecord[date.label+\"value\"];}if(date.hideafterdate){selectedRecord[date.label+\"max\"]=selectedRecord[date.label+\"value\"];}}});selectedRecord=_objectSpread({},selectedRecord);if(inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"]===true){if(masterData[\"searchedTest\"]){if(inputParam.searchTestRef!==undefined&&inputParam.searchTestRef.current!==null){inputParam.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}}masterData=_objectSpread(_objectSpread({},masterData),response[1].data[\"SubSampleChildDetail\"]);}dispatch({type:DEFAULT_RETURN,payload:(_payload={operation:operation,timeZoneList:timeZoneList,defaultTimeZone:defaultTimeZone,selectedRecord:selectedRecord,openModal:true,ncontrolCode:inputParam.ncontrolCode,parentPopUpSize:\"lg\",loading:false,showSample:undefined,regSubSamplecomboData:comboValues.comboData,loadScheduleSubSample:true,screenName:\"IDS_SUBSAMPLE\"},_defineProperty(_payload,\"operation\",\"update\"),_defineProperty(_payload,\"specBasedComponent\",specBasedComponent),_defineProperty(_payload,\"masterData\",masterData),_defineProperty(_payload,\"loadPreregister\",true),_defineProperty(_payload,\"withoutCombocomponent\",withoutCombocomponent),_payload)});// }\n}).catch(function(error){//console.log(\"error:\", error);\ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(intl.formatMessage({id:error.response.data}));}});}}else{toast.warn(intl.formatMessage({id:\"IDS_DRAFTTOEDITSUBSAMPLE\"}));}};}export function updateSchedulerConfigSubSample(inputParam,masterData){return function(dispatch){dispatch(initRequest(true));var requestUrl='';if(inputParam.isFileupload){requestUrl=rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSampleWithFile\",inputParam.formData);}else{requestUrl=rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSample\",inputParam.inputData);}return requestUrl// rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\n.then(function(response){sortData(response.data);//if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\nreplaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"],masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");//  }\n// else{\n//     masterData={...masterData,\"SchedulerConfigGetSubSample\":response.data[\"SchedulerConfigGetSubSample\"]} \n// }\nvar SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"];masterData=_objectSpread(_objectSpread({},masterData),{},{selectedSubSample:response.data[\"selectedSubSample\"],selectedTest:replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"],masterData.selectedTest,\"nschedulertestcode\"),SchedulerConfigGetTest:SchedulerConfigGetTest});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openModal:false,loading:false,showConfirmAlert:false,regDateEditConfirmMessage:undefined,loadEsign:false,loadRegSubSample:false,selectedRecord:{},showSample:undefined,screenName:intl.formatMessage({id:\"IDS_SUBSAMPLE\"})}});// let inputData = {\n//     masterData,\n//     selectedTest: masterData.selectedTest,\n//     ntransactiontestcode: masterData.selectedTest ?\n//         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n//     npreregno: masterData.selectedSample ?\n//         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n//     userinfo: inputParam.inputData.userinfo,\n//     activeTestTab : masterData.activeTestTab,\n//     screenName: masterData.activeTestTab,\n//     resultDataState: inputParam.resultDataState,\n//     testCommentDataState: inputParam.testCommentDataState,\n// }\n// dispatch(getTestChildTabDetail(inputData, true))\n}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else if(error.response.status===302){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,regEditParam:inputParam,showConfirmAlert:true,parentPopUpSize:\"xl\",regDateEditConfirmMessage:error.response.data,showSample:undefined}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export function deleteSchedulerSubSample(Map,userInfo,masterData,ncontrolcode){return function(dispatch){dispatch(initRequest(true));var requestUrl='';requestUrl=rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigSubSample\",_objectSpread(_objectSpread({},Map),{},{\"userinfo\":userInfo}));return requestUrl.then(function(response){sortData(response.data);//replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\nvar SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"];var SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"];masterData=_objectSpread(_objectSpread({},masterData),{},{selectedSubSample:response.data[\"selectedSubSample\"],//selectedTest: response.data[\"selectedTest\"],\nselectedTest:response.data[\"selectedTest\"],SchedulerConfigGetTest:SchedulerConfigGetTest,SchedulerConfigGetSubSample:SchedulerConfigGetSubSample,searchedSubSample:undefined});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openModal:false,loading:false,showConfirmAlert:false,ncontrolcode:ncontrolcode,regDateEditConfirmMessage:undefined,loadEsign:false,loadRegSubSample:false,selectedRecord:{},showSample:undefined,screenName:intl.formatMessage({id:\"IDS_SUBSAMPLE\"})}});}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export var addMoreSchedulerConfigTest=function addMoreSchedulerConfigTest(inputParam,ncontrolCode){return function(dispatch){var sampleList=inputParam.sampleList;var value=false;if(inputParam.selectedSample&&inputParam.selectedSample.length>0){if(inputParam.selectedSubSample&&inputParam.selectedSubSample.length>0){value=inputParam.selectedSubSample.some(function(obj){return obj.nspecsampletypecode!==inputParam.selectedSubSample[0].nspecsampletypecode;});if(value){return toast.info(intl.formatMessage({id:\"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"}));}//sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n//const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\n// const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\n//if (selectedsample && selectedsample.length > 0) {\nvar selectedsample=inputParam.selectedSample;var findTransactionStatus=_toConsumableArray(new Set(selectedsample.map(function(item){return item.ntransactionstatus;})));if(findTransactionStatus.length===1){if(findTransactionStatus[0]!==transactionStatus.REJECT&&findTransactionStatus[0]!==transactionStatus.CANCELLED){if(findTransactionStatus[0]!==transactionStatus.RELEASED){// if (selectsubsample && selectsubsample.length > 0) {\n//     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\n//\n//     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \n//     {                    \nvar findApprovalVersion=_toConsumableArray(new Set(selectedsample.map(function(item){return item.napprovalversioncode;})));if(findApprovalVersion.length===1){var findSampleSpec=_toConsumableArray(new Set(selectedsample.map(function(item){return item.nallottedspeccode;})));//const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\nif(findSampleSpec.length===1)//&& findComponent.length === 1 \n{inputParam[\"snspecsampletypecode\"]=inputParam.selectedSubSample&&_toConsumableArray(new Set(inputParam.selectedSubSample.map(function(x){return x.nspecsampletypecode;}))).join(\",\");dispatch(initRequest(true));var urlArray=[];var TestGet=rsapi.post(\"/schedulerconfiguration/getMoreTest\",_objectSpread({},inputParam));urlArray[0]=TestGet;var TestPackageGet=rsapi.post(\"/schedulerconfiguration/getMoreTestPackage\",_objectSpread({},inputParam));urlArray[1]=TestPackageGet;var TestSectionGet=rsapi.post(\"/schedulerconfiguration/getMoreTestSection\",_objectSpread({},inputParam));urlArray[2]=TestSectionGet;Axios.all(urlArray).then(function(response){var PackageData=[];var TestSectionData=[];var PackageDataMap=constructOptionList(response[1].data||[],\"ntestpackagecode\",\"stestpackagename\",undefined,undefined,true);PackageData=PackageDataMap.get(\"OptionList\");var TestSectionDataMap=constructOptionList(response[2].data||[],\"nsectioncode\",\"ssectionname\",undefined,undefined,true);TestSectionData=TestSectionDataMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{availableTest:response[0].data,TestCombined:response[0].data,AllTest:response[0].data,TestPackage:PackageData,loadChildTest:true,loading:false,ncontrolCode:ncontrolCode,screenName:\"IDS_TEST\",operation:\"create\",openModal:true,parentPopUpSize:\"lg\",selectedRecord:{},showSample:undefined,loadPrinter:false,TestSection:TestSectionData,AllSection:TestSectionData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(_this.props.formatMessage({id:error.response.data}));}});}else{toast.info(intl.formatMessage({id:\"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"}));}}else{toast.info(intl.formatMessage({id:\"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"}));}//     }\n//     else {\n//         toast.info(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\n//     }\n// }                               \n}else{toast.info(intl.formatMessage({id:\"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\"}));}}else{////     toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\ntoast.info(intl.formatMessage({id:\"IDS_SAMPLEISREJECTEDORCANCELLED\"}));}}else{toast.info(intl.formatMessage({id:\"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"}));}// } else {\n//     toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\n// }\n}else{toast.info(intl.formatMessage({id:\"IDS_SELECTSUBSAMPLE\"}));}}else{toast.info(intl.formatMessage({id:\"IDS_SELECTSAMPLE\"}));}};};export var createSchedulerTest=function createSchedulerTest(inputParam,masterData,modalName){return function(dispatch){dispatch(initRequest(true));rsapi.post(inputParam.classUrl+\"/\"+inputParam.operation+inputParam.methodUrl,_objectSpread({},inputParam.inputData)).then(function(response){var _respObject;var SchedulerConfigGetTest=updatedObjectWithNewElement(masterData[\"SchedulerConfigGetTest\"],response.data[\"SchedulerConfigGetTest\"]);//let RegistrationGetSub    Sample = updatedObjectWithNewElement(masterData[\"RegistrationGetSubSample\"], response.data[\"RegistrationGetSubSample\"]);\nmasterData=_objectSpread(_objectSpread({},masterData),{},{SchedulerConfigGetTest:sortData(SchedulerConfigGetTest,\"descending\",\"nschedulertestcode\"),SchedulerConfigurationParameter:response.data[\"SchedulerConfigurationParameter\"]&&response.data[\"SchedulerConfigurationParameter\"],selectedTest:response.data[\"SchedulerConfigGetTest\"]});var respObject=(_respObject={masterData:masterData},_defineProperty(_respObject,modalName,false),_defineProperty(_respObject,\"loading\",false),_defineProperty(_respObject,\"loadChildTest\",false),_defineProperty(_respObject,\"showSample\",undefined),_defineProperty(_respObject,\"openModal\",false),_defineProperty(_respObject,\"selectedRecord\",{}),_defineProperty(_respObject,\"showConfirmAlert\",false),_defineProperty(_respObject,\"createTestConfirmMessage\",undefined),_respObject);inputParam.postParamList[0]['clearFilter']='no';inputParam.postParamList[1]['clearFilter']='no';inputParam.postParamList[2]['clearFilter']='yes';dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}).catch(function(error){if(error.response.status===500){dispatch({type:DEFAULT_RETURN,payload:{loading:false,createTestConfirmMessage:undefined}});toast.error(error.message);}else{if(error.response.data.NeedConfirmAlert){dispatch({type:DEFAULT_RETURN,payload:{showConfirmAlert:true,createTestConfirmMessage:error.response.data.rtn,createTestConfirmParam:{inputParam:inputParam,masterData:masterData,modalName:modalName},//[modalName]: false,\nloading:false,loadChildTest:true,showSample:undefined//openModal: false,\n//selectedRecord: {}\n}});}else{var _payload2;dispatch({type:DEFAULT_RETURN,payload:(_payload2={},_defineProperty(_payload2,modalName,false),_defineProperty(_payload2,\"loading\",false),_defineProperty(_payload2,\"loadChildTest\",false),_defineProperty(_payload2,\"showSample\",undefined),_defineProperty(_payload2,\"openModal\",false),_defineProperty(_payload2,\"selectedRecord\",{}),_defineProperty(_payload2,\"createTestConfirmMessage\",undefined),_payload2)});toast.info(error.response.data.rtn);}}});};};export function deleteSchedulerConfigTest(Map,userInfo,masterData,ncontrolcode){return function(dispatch){dispatch(initRequest(true));var requestUrl='';requestUrl=rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigTest\",_objectSpread(_objectSpread({},Map),{},{\"userinfo\":userInfo}));return requestUrl.then(function(response){sortData(response.data);replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"],masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");var SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"];var SchedulerConfigurationParameter=response.data[\"SchedulerConfigurationParameter\"];//let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\nmasterData=_objectSpread(_objectSpread({},masterData),{},{selectedSubSample:response.data[\"selectedSubSample\"],//selectedTest: response.data[\"selectedTest\"],\nselectedTest:response.data[\"selectedTest\"],SchedulerConfigGetTest:SchedulerConfigGetTest,SchedulerConfigurationParameter:SchedulerConfigurationParameter,searchedTest:undefined});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openModal:false,loading:false,showConfirmAlert:false,ncontrolcode:ncontrolcode,regDateEditConfirmMessage:undefined,loadEsign:false,loadRegSubSample:false,selectedRecord:{},showSample:undefined,screenName:intl.formatMessage({id:\"IDS_SUBSAMPLE\"})}});}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export function getEditSchedulerConfigComboService(inputParam,columnList,selectedRecord1,childColumnList,comboComponents,withoutCombocomponent,editableComboList){return function(dispatch){dispatch(initRequest(true));var _inputParam2=_objectSpread({},inputParam),userInfo=_inputParam2.userInfo,operation=_inputParam2.operation;var masterData=inputParam[\"masterData\"];var parentColumnList=[].concat(_toConsumableArray(columnList),_toConsumableArray(editableComboList));if(masterData[\"selectedSample\"].length>1||masterData[\"selectedSample\"].findIndex(function(x){return x[inputParam.primaryKeyName]===inputParam[\"mastertoedit\"][inputParam.primaryKeyName];})===-1){inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"]=true;}masterData[\"selectedSample\"]=[];masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);var nschedulersamplecode=inputParam.mastertoedit[inputParam.primaryKeyName];var urlArray=[];var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var selectedRegistration=rsapi.post(\"/schedulerconfiguration/getEditSchedulerConfigDetails\",_objectSpread(_objectSpread({},inputParam.editSchedulerSampleParam),{},{nschedulersamplecode:nschedulersamplecode,parentcolumnlist:parentColumnList,childcolumnlist:childColumnList,userinfo:userInfo,nallottedspeccode:inputParam.mastertoedit.nallottedspeccode||-1}));var dateService=rsapi.post(\"dynamicpreregdesign/dateValidation\",{datecolumnlist:withoutCombocomponent.filter(function(x){return x.inputtype===\"date\";}),userinfo:userInfo});var siteService=rsapi.post(\"schedulerconfiguration/getSiteByUser\",{userinfo:userInfo});var schedulerMasterService=rsapi.post(\"schedulerconfiguration/getSchedulerMaster\",{userinfo:userInfo});urlArray=[timeZoneService,selectedRegistration,dateService,siteService,schedulerMasterService];Axios.all(urlArray).then(function(response){var selectedRecord=_objectSpread({},response[1].data[\"EditData\"]);selectedRecord=_objectSpread(_objectSpread({},selectedRecord),selectedRecord['jsondata']);var siteMap=[];var siteList=[];var schedulerList=[];if(response[3].data.userSite!==undefined){siteMap=constructOptionList(response[3].data.userSite||[],\"nsitecode\",\"ssitename\",undefined,undefined,true);siteList=siteMap.get(\"OptionList\");}if(response[4].data.ScheduleMaster!==undefined){schedulerList=constructOptionList(response[4].data.ScheduleMaster||[],\"nschedulecode\",\"sschedulename\",undefined,undefined,true).get(\"OptionList\");}// if(selectedRecord['Site']!==undefined){\n//     selectedRecord['nsitecode'] = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true).get(\"OptionList\");\n// // siteList = siteMap.get(\"OptionList\");\n// }\nvar timeZoneMap=constructOptionList(response[0].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,true);var timeZoneList=timeZoneMap.get(\"OptionList\");var defaultTimeZone={label:userInfo.stimezoneid,value:userInfo.ntimezonecode};if(selectedRecord.ntransactionstatus===transactionStatus.CANCELLED||selectedRecord.ntransactionstatus===transactionStatus.REJECT){toast.info(intl.formatMessage({id:\"IDS_CANNOTEDITCANCELLEDSAMPLE\"}));// ALPD-3393\nif(inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"]===true){masterData=sortData(_objectSpread(_objectSpread({},masterData),response[1].data[\"SampleChildDetail\"]));}dispatch({type:DEFAULT_RETURN,payload:{loading:false,masterData:masterData}});}else{var languagetypeCode=undefined;var comboData=response[1].data;delete comboData['EditData'];var comboValues={};if(columnList.length>0){columnList.map(function(x){if(x.inputtype==='combo'){if(comboData[x.label]&&comboData[x.label].length>0)//&& comboData[x.label][0].hasOwnProperty(x.source) \n{if(comboData[x.label].length>0){if(comboData[x.label][0].label===undefined){var optionList=constructjsonOptionList(comboData[x.label]||[],x.valuemember,x.displaymember,false,false,true,undefined,x.source,x.isMultiLingual,languagetypeCode,x);comboData[x.label]=optionList.get(\"OptionList\");}else{comboData[x.label]=comboData[x.label];var _optionList2=constructjsonOptionDefault(comboData[x.label]||[],x.valuemember,x.displaymember,false,false,true,undefined,x.source,x.isMultiLingual,languagetypeCode,x);}}else{comboData[x.label]=[];}//comboValues = childComboLoad(x, comboData, selectedRecord, \n//   childColumnList, withoutCombocomponent)\\\ncomboValues=childComboLoadForEdit(x,comboData,selectedRecord,childColumnList,withoutCombocomponent);}else{comboValues={\"comboData\":comboData};}}else{comboValues=_objectSpread({comboData:comboData},comboValues);}});}else{comboValues={\"comboData\":comboData};}if(editableComboList.length>0){editableComboList.map(function(x){if(x.inputtype==='combo'){if(comboData[x.label]&&comboData[x.label].length>0)//&& comboData[x.label][0].hasOwnProperty(x.source) \n{if(comboData[x.label].length>0){if(comboData[x.label][0].label===undefined){var optionList=constructjsonOptionList(comboData[x.label]||[],x.valuemember,x.displaymember,false,false,true,undefined,x.source,x.isMultiLingual,languagetypeCode,x);comboData[x.label]=optionList.get(\"OptionList\");}else{comboData[x.label]=comboData[x.label];var _optionList3=constructjsonOptionDefault(comboData[x.label]||[],x.valuemember,x.displaymember,false,false,true,undefined,x.source,x.isMultiLingual,languagetypeCode,x);}}else{comboData[x.label]=[];}comboValues={\"comboData\":comboData};}else{comboValues={\"comboData\":comboData};}}else{comboValues=_objectSpread({comboData:comboData},comboValues);}});}withoutCombocomponent.map(function(date){if(date.inputtype==='date'){selectedRecord[date.label]=selectedRecord[date.label]&&selectedRecord[date.label]!=='-'?rearrangeDateFormat(userInfo,selectedRecord[date.label]):\"\";if(date.nperiodcode){selectedRecord[date.label+\"value\"]=response[2].data[date.label]?new Date(response[2].data[date.label][\"datevalue\"]):null;}else{selectedRecord[date.label+\"value\"]=new Date();}if(date.hidebeforedate){selectedRecord[date.label+\"min\"]=selectedRecord[date.label+\"value\"];}if(date.hideafterdate){selectedRecord[date.label+\"max\"]=selectedRecord[date.label+\"value\"];}}});var _ref=[],Specification=_ref.Specification,AgaramTree=_ref.AgaramTree,ActiveKey=_ref.ActiveKey,FocusKey=_ref.FocusKey,OpenNodes=_ref.OpenNodes,specValue=_ref.specValue;specValue=[{nallottedspeccode:selectedRecord.nallottedspeccode,sspecname:selectedRecord.sspecname,sversion:selectedRecord.sversion}];var selectedSpec={};Specification=constructOptionList(specValue||[],\"nallottedspeccode\",\"sspecname\",undefined,undefined,true).get(\"OptionList\");selectedSpec[\"nallottedspeccode\"]=Specification.length>0?{\"value\":Specification[0].value,\"label\":Specification[0].label,\"item\":Specification[0].item}:\"\";selectedSpec[\"sversion\"]=Specification.length>0?Specification[0].item.sversion:\"\";selectedSpec[\"ntemplatemanipulationcode\"]=Specification.length>0?Specification[0].item.ntemplatemanipulationcode:-1;selectedRecord=_objectSpread(_objectSpread({},selectedRecord),selectedSpec);if(inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"]===true){masterData=sortData(_objectSpread(_objectSpread({},masterData),response[1].data[\"SampleChildDetail\"]));}dispatch({type:DEFAULT_RETURN,payload:{selectedSpec:selectedSpec,Specification:Specification,operation:\"update\",screenName:inputParam.masterData.RealRegSubTypeValue.sregsubtypename,timeZoneList:timeZoneList,defaultTimeZone:defaultTimeZone,selectedRecord:selectedRecord,openPortal:true,ncontrolCode:inputParam.editSchedulerSampleParam.ncontrolCode,loadPreregister:true,parentPopUpSize:\"xl\",loading:false,showSample:undefined,comboData:comboValues.comboData,childColumnList:childColumnList,comboComponents:comboComponents,withoutCombocomponent:withoutCombocomponent,columnList:columnList,masterData:masterData,siteList:siteList,schedulerList:schedulerList}});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(intl.formatMessage({id:error.response.data}));}});};}export function updateSchedulerConfig(inputParam,masterData){return function(dispatch){dispatch(initRequest(true));var requestUrl='';if(inputParam.isFileupload){requestUrl=rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigWithFile\",inputParam.formData);}else{requestUrl=rsapi.post(\"/schedulerconfiguration/updateSchedulerConfig\",inputParam.inputData);}return requestUrl.then(function(response){if(response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"],masterData.SchedulerConfigGetSample,\"nschedulersamplecode\");replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"],masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"],masterData.SchedulerConfigGetTest,\"nschedulertestcode\");//  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n//let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\nmasterData=_objectSpread(_objectSpread({},masterData),{},{selectedSample:response.data[\"selectedSample\"],SchedulerConfigurationParameter:masterData[\"SchedulerConfigurationParameter\"]});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openPortal:false,loading:false,showConfirmAlert:false,regDateEditConfirmMessage:undefined,loadEsign:false,openModal:false,loadPreregister:false,selectedRecord:{},showSample:undefined}});}else{toast.info(response.data.rtn);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else if(error.response.status===302){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,regEditParam:inputParam,showConfirmAlert:true,parentPopUpSize:\"xl\",regDateEditConfirmMessage:error.response.data,showSample:undefined}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export function validateEsignforSchedulerConfig(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=\"schedulerconfiguration\";inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}//dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\ndispatch(dispatchMethods(inputParam[\"screenData\"]));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}function dispatchMethods(screenData){return function(dispatch){var action=screenData.inputParam.action;switch(action){case\"editSchedulerConfig\":dispatch(updateSchedulerConfig(screenData.inputParam,screenData.masterData));break;case\"editSubSample\":dispatch(updateSchedulerConfigSubSample(screenData.inputParam,screenData.masterData));break;case\"deleteSubSample\":dispatch(deleteSchedulerSubSample(screenData.inputParam.Map,screenData.inputParam.inputData.userinfo,screenData.masterData,screenData.inputParam.ncontrolCode));break;case\"deleteSchedulerTest\":dispatch(deleteSchedulerConfigTest(screenData.inputParam.Map,screenData.inputParam.inputData.userinfo,screenData.masterData,screenData.inputParam.ncontrolCode));break;case\"deleteSample\":dispatch(deleteSchedulerConfig(screenData.inputParam.Map,screenData.masterData));break;case\"approveSample\":dispatch(approveSchedulerConfig(screenData.inputParam,screenData.masterData));break;case\"activeInactive\":dispatch(updateActiveStatusSchedulerConfig(screenData.inputParam));break;default:break;}};}export function approveSchedulerConfig(inputParam,masterData){return function(dispatch){dispatch(initRequest(true));var requestUrl='';requestUrl=rsapi.post(\"/schedulerconfiguration/approveSchedulerConfig\",_objectSpread(_objectSpread({},inputParam.approveSchedulerSampleParam),{},{nschedulersamplecode:inputParam.nschedulersamplecode,sinstrumentid:inputParam.masterData.selectedSample[0][inputParam.approveSchedulerSampleParam.sinstrumentidLabel],ninstrumentcode:inputParam.masterData.selectedSample[0]['ninstrumentcode'],//ALPD-5453-->Added by Vignesh R(19-02-2025)--Scheduler Configuration\n//ALPD-5453-start\nninstrumentcatcode:inputParam.masterData.selectedSample[0]['ninstrumentcatcode'],//ALPD-5453--end\nnschedulecode:inputParam.mastertoapprove.nschedulecode,// ALPD-5332 Added by Abdul for MAterial Scheduler\nnmaterialcode:inputParam.masterData.selectedSample[0]['nmaterialcode'],nsitecode:inputParam.mastertoapprove&&inputParam.mastertoapprove.ninstrumentsitecode&&inputParam.mastertoapprove.ninstrumentsitecode!==-1?inputParam.mastertoapprove.ninstrumentsitecode:-1// ALPD-5332 End           \n}));return requestUrl.then(function(response){sortData(response.data);//if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\nreplaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"],inputParam.masterData.SchedulerConfigGetSample,\"nschedulersamplecode\");replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"],inputParam.masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"],inputParam.masterData.SchedulerConfigGetTest,\"nschedulertestcode\");// let SchedulerConfigGetSample=response.data[\"SchedulerConfigGetSample\"]&&response.data[\"SchedulerConfigGetSample\"];\n// let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"]&&response.data[\"SchedulerConfigGetSubSample\"];\n// let SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"]&&response.data[\"SchedulerConfigGetTest\"];\nif(response.data[\"SchedulerConfigGetSampleBefore\"]!==undefined){replaceUpdatedObject(response.data[\"SchedulerConfigGetSampleBefore\"],inputParam.masterData.SchedulerConfigGetSample,\"nschedulersamplecode\");}masterData=_objectSpread(_objectSpread({},masterData),{},_defineProperty({// SchedulerConfigGetSample,\n// SchedulerConfigGetSubSample,\n// SchedulerConfigGetTest,\nselectedTest:replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"],inputParam.masterData.selectedSample,\"nschedulersamplecode\"),selectedSubSample:replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"],inputParam.masterData.selectedSubSample,\"nschedulersubsamplecode\")},\"selectedTest\",replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"],inputParam.masterData.selectedTest,\"nschedulertestcode\")));dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openModal:false,loading:false,showConfirmAlert:false,regDateEditConfirmMessage:undefined,loadEsign:false,loadRegSubSample:false,selectedRecord:{}}});}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else if(error.response.status===302){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,regEditParam:inputParam,showConfirmAlert:true,parentPopUpSize:\"xl\",regDateEditConfirmMessage:error.response.data,showSample:undefined}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export function deleteSchedulerConfig(inputParam,masterData){return function(dispatch){dispatch(initRequest(true));var requestUrl='';requestUrl=rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfig\",_objectSpread(_objectSpread({},inputParam.deleteSchedulerSampleParam),{},{nschedulersamplecode:inputParam.nschedulersamplecode}));return requestUrl.then(function(response){sortData(response.data);var SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"];var SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"];var SchedulerConfigGetSample=response.data[\"SchedulerConfigGetSample\"];masterData=_objectSpread(_objectSpread({},masterData),{},{selectedSample:response.data[\"selectedSample\"],selectedSubSample:response.data[\"selectedSubSample\"],selectedTest:response.data[\"selectedTest\"],SchedulerConfigGetTest:SchedulerConfigGetTest,SchedulerConfigGetSubSample:SchedulerConfigGetSubSample,SchedulerConfigGetSample:SchedulerConfigGetSample,searchedSubSample:undefined});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openModal:false,loading:false,showConfirmAlert:false,regDateEditConfirmMessage:undefined,loadEsign:false,selectedRecord:{},showSample:undefined}});}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export function updateActiveStatusSchedulerConfig(inputParam){return function(dispatch){dispatch(initRequest(true));var requestUrl='';requestUrl=rsapi.post(\"/schedulerconfiguration/updateActiveStatusSchedulerConfig\",_objectSpread(_objectSpread({},inputParam.activeInactiveSchedulerSampleParam),{},{nschedulersamplecode:inputParam.nschedulersamplecode,nactivestatus:inputParam.selectedSample[0].nactivestatus}));return requestUrl.then(function(response){sortData(response.data);var masterData=_objectSpread({},inputParam.masterData);replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"],masterData.SchedulerConfigGetSample,\"nschedulersamplecode\");replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"],masterData.SchedulerConfigGetSubSample,\"nschedulersubsamplecode\");replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"],masterData.SchedulerConfigGetTest,\"nschedulertestcode\");masterData=_objectSpread(_objectSpread({},masterData),{},{selectedSample:response.data[\"selectedSample\"],selectedSubSample:response.data[\"selectedSubSample\"],selectedTest:response.data[\"selectedTest\"],searchedSubSample:undefined});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,openModal:false,loading:false,showConfirmAlert:false,regDateEditConfirmMessage:undefined,loadEsign:false,loadRegSubSample:false,selectedRecord:{},showSample:undefined,screenName:intl.formatMessage({id:\"IDS_SUBSAMPLE\"})}});}).catch(function(error){if(error.response.status===500){toast.error(error.message);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}else{toast.info(error.response.data);dispatch({type:DEFAULT_RETURN,payload:{loading:false,showSample:undefined}});}});};}export function getSchedulerMasteDetails(Map,selectedFilter,masterData,searchRef){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/schedulerconfiguration/getSchedulerMasteDetails\",Map).then(function(response){var SchedulerMasterDeatils=response.data[\"ScheduleMasterDetails\"]&&response.data[\"ScheduleMasterDetails\"];sortData(response.data);// MAHProductManufacturer.length > 0 ?\n//     selectedFilter[\"nproductmanufcode\"] = {\n//         \"value\": MAHProductManufacturer[0].nproductmanufcode,\n//         \"label\": MAHProductManufacturer[0].smanufname\n//     } : selectedFilter[\"nproductmanufcode\"] = \"\";\nselectedFilter[\"sschedulename\"]=SchedulerMasterDeatils&&SchedulerMasterDeatils[0].sschedulename||\"\";var startdate=SchedulerMasterDeatils[0].sstartdate!==undefined?SchedulerMasterDeatils[0].sstartdate.substring(0,10):\"\";var starttime=SchedulerMasterDeatils[0]&&SchedulerMasterDeatils[0].sstarttime!==undefined?SchedulerMasterDeatils[0].sstarttime.substring(16,11):\"\";var enddate=SchedulerMasterDeatils[0]!==undefined?SchedulerMasterDeatils[0].senddate.substring(0,10):\"\";var endtime=SchedulerMasterDeatils[0]&&SchedulerMasterDeatils[0].sendtime!==undefined?SchedulerMasterDeatils[0].sendtime.substring(16,11):\"\";var startdatetime=startdate+\" \"+starttime;var enddatetime=enddate+\" \"+endtime;// SchedulerMasterDeatils = {\n//     ...SchedulerMasterDeatils,\n//     \"0\": {  \n//         ...SchedulerMasterDeatils[\"0\"],\n//       \"startdatetime\": startdatetime,\n//       \"enddatetime\": enddatetime\n//     }\n//   };\n/*  let idslabel;\r\n                    let fieldToShow;\r\n\r\n                    if (SchedulerMasterDeatils.sscheduletype === \"O\") {\r\n                        idslabel=\"IDS_ONETIME\";\r\n                      } else if (SchedulerMasterDeatils.sscheduletype === \"D\") {\r\n                        idslabel=\"IDS_DAILY\";\r\n                      } else if (SchedulerMasterDeatils.sscheduletype === \"W\") {\r\n                        idslabel=\"IDS_WEEKLY\";\r\n                      } else {\r\n                        idslabel=\"IDS_MONTHLY\";\r\n                      }\r\n\r\n               /*     SchedulerMasterDeatils = {\r\n                        ...SchedulerMasterDeatils,\r\n                        sscheduletype: SchedulerMasterDeatils.sscheduletype === \"O\" ? intl.formatMessage({ id: \"IDS_ONETIME\" }) :\r\n                                       SchedulerMasterDeatils.sscheduletype === \"D\" ? intl.formatMessage({ id: \"IDS_DAILY\" }) :\r\n                                       SchedulerMasterDeatils.sscheduletype === \"W\" ? intl.formatMessage({ id: \"IDS_WEEKLY\" }) :\r\n                                       intl.formatMessage({ id: \"IDS_MONTHLY\" })  // Default case\r\n                      };\r\n\r\n                    //idslabel=idslabel.push(\"IDS_STARTDATEANDTIME\");\r\n                    fieldToShow=\"stempscheduleType\";\r\n*/ // selectedFilter[\"nproductmanufcode\"] = MAHProductManufacturer && MAHProductManufacturer.length > 0 ?\n//     MAHProductManufacturer[0].nproductmanufcode : -1\nvar selectedRecord={};selectedRecord=selectedFilter;masterData=_objectSpread(_objectSpread({},masterData),response.data);if(searchRef!==undefined&&searchRef.current!==null){searchRef.current.value='';masterData['searchedData']=undefined;}dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,// selectedFilter,\nselectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch(initRequest(false));if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/SchedulerConfigurationAction.js"],"names":["rsapi","toast","filterRecordBasedOnTwoArrays","sortData","fillRecordBasedOnCheckBoxSelection","updatedObjectWithNewElement","getRecordBasedOnPrimaryKeyName","reArrangeArrays","filterRecordBasedOnPrimaryKeyName","rearrangeDateFormat","getSameRecordFromTwoArrays","sortDataByParent","constructOptionList","parentChildComboLoad","constructjsonOptionList","childComboLoadForEdit","constructjsonOptionDefault","replaceUpdatedObject","transactionStatus","checkBoxOperation","SampleType","Axios","DEFAULT_RETURN","initRequest","postCRUDOrganiseTransSearch","intl","onSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","onRegTypeChange","onRegSubTypeChange","changeApprovalConfigVersionChange","getSchedulerConfigSample","inputData","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","respObject","selectedFilter","showFilter","skip","testskip","take","testtake","subsampleskip","subsampletake","showSample","activeSampleTab","regSampleExisted","status","info","insertSchedulerConfig","inputParam","requestUrl","isFileupload","formData","rtn","SchedulerConfigGetSample","selectedSample","SchedulerConfigGetSubSample","SchedulerConfigGetTest","selectedSubSample","selectedTest","length","orderTypeValue","nneedsubsample","filter","x","nschedulersubsamplecode","multipleselectionFlag","openModal","loadEsign","showConfirmAlert","selectedRecord","loadPreregister","openPortal","selectedSpec","selectComponent","SelectedTest","selectedComponent","Component","postParamList","warn","preregConfirmMessage","console","log","NeedConfirmAlert","preregConfirmParam","getSchedulerConfigSubSampleDetail","isServiceRequired","isParentValue","inputParamData","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","napprovalconfigcode","userinfo","ndesigntemplatemappingcode","nschedulersamplecode","ntype","QUICKSELECTALL","SINGLEDESELECT","DESELECT","QUICKSELECTSTATUS","SINGLESELECT","map","join","activeName","dataStateName","subSample","sample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","activeTabIndex","MULTISELECT","wholeSubSampleList","b","includes","selectednschedulersamplecode","wholeTestList","nschedulertestcode","keepOld","bool","sampleGridDataState","sort","multifilterInfo","multiFilterLoad","activeTestTab","isGrandChildGetRequired","TestSelected","subSampleSelected","filterTestSameOldSelectedTest","filterSelectedSubSample","getSchedulerTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","activeSubSampleTab","selectedTransactionsamplecode","noutsourcerequired","RealSampleTypeValue","NA","testList","wholeSubsampleList","toString","selectedSchedulersubsamplecode","ntransactiontestcode","RegistrationTestComment","RegistrationParameter","ReloadDataSchedulerConfig","getTestChildTabDetailSchedulerConiguration","url","responseData","selectedSchedulerSamplecode","selectedSchedulerSubSamplecode","selectedSchedulerTestCode","activeTabId","screenName","SchedulerConfigurationParameter","addsubSampleSchedulerConfiguration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","specBasedComponent","specBasedTestPackage","urlArray","timeZoneService","parentcolumnlist","inputtype","readonly","actualService","childcolumnlist","ComponentTestBySpec","TestGet","nallottedspeccode","slno","conditionalTestPackage","TestPackageGet","TestSectionGet","currentDate","dateService","datecolumnlist","all","timeZoneMap","timeZoneList","get","defaultTimeZone","label","stimezoneid","ntimezonecode","newcomboData","slanguagetypecode","TestCombined","lstComponent","PackageData","TestSectionData","selectedRecord1","lstComponentMap","PackageDataMap","TestPackage","TestSectionDataMap","TestSection","comboData1","comboData","componentrow","loadcurrentdate","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","val","radiodefaultvalue","i","radioOptions","tags","text","formatMessage","id","showSaveContinue","parentPopUpSize","loadPrinter","operation","loadScheduleSubSample","regSubSamplecomboData","regparentSubSampleColumnList","regchildSubSampleColumnList","ncontrolCode","AllTest","AllSection","componentTest","selectedobject","Reg","nspecsampletypecode","Object","keys","TestData","testSectionDataMap","selectedTestData","selectPackage","selectSection","testSectionTest","objComponent","LoginProps","subSampleBased","action","ntestpackagecode","nsectioncode","Test","availableTest","ntestgrouptestcode","saveSchedulerSubSample","subSampleConfirmMessage","subSampleConfirmParam","getEditSchedulerSubSampleComboService","columnList","childColumnList","comboComponents","withoutCombocomponent","userInfo","DRAFT","findIndex","primaryKeyName","editSubSampleSchedulerParam","push","mastertoedit","formattedMessage","selectedRegistration","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","date","updateSchedulerConfigSubSample","regDateEditConfirmMessage","loadRegSubSample","regEditParam","deleteSchedulerSubSample","searchedSubSample","addMoreSchedulerConfigTest","sampleList","some","obj","selectedsample","findTransactionStatus","Set","REJECT","CANCELLED","RELEASED","findApprovalVersion","napprovalversioncode","findSampleSpec","loadChildTest","props","createSchedulerTest","modalName","classUrl","methodUrl","createTestConfirmMessage","createTestConfirmParam","deleteSchedulerConfigTest","searchedTest","getEditSchedulerConfigComboService","editableComboList","parentColumnList","editSchedulerSampleParam","siteService","schedulerMasterService","siteMap","siteList","schedulerList","userSite","ScheduleMaster","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","specValue","sspecname","sversion","ntemplatemanipulationcode","RealRegSubTypeValue","sregsubtypename","updateSchedulerConfig","validateEsignforSchedulerConfig","toLowerCase","dispatchMethods","screenData","deleteSchedulerConfig","approveSchedulerConfig","updateActiveStatusSchedulerConfig","approveSchedulerSampleParam","sinstrumentid","sinstrumentidLabel","ninstrumentcode","ninstrumentcatcode","nschedulecode","mastertoapprove","nmaterialcode","nsitecode","ninstrumentsitecode","deleteSchedulerSampleParam","activeInactiveSchedulerSampleParam","nactivestatus","getSchedulerMasteDetails","searchRef","SchedulerMasterDeatils","sschedulename","startdate","sstartdate","substring","starttime","sstarttime","enddate","senddate","endtime","sendtime","startdatetime","enddatetime"],"mappings":"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ACA;AACA;AACA;AACA;AAEA;AACA+C,oBAAoB,CAAGA,oBAAoB,CAACjD,MAArB,CAA4B,SAAA/C,IAAI,QACnDsG,CAAAA,kBAAkB,CAACE,QAAnB,CAA4BxG,IAAI,CAACiD,uBAAjC,CADmD,EAAhC,CAAvB,CAGA;AACA,GAAI+C,oBAAoB,CAACpD,MAArB,CAA8B,CAAlC,CAAqC,CACjCpD,UAAU,gCACHA,UADG,MAENkD,iBAAiB,CAAEsD,oBAFb,EAAV,CAIH,CACD,GAAMrD,CAAAA,YAAY,CAAGrE,0BAA0B,CAACyH,eAAD,CAC3CvG,UAAU,CAACkD,iBADgC,CACb,sBADa,CAA/C,CAEAlD,UAAU,gCACHA,UADG,MAENmD,YAAY,CAAZA,YAFM,EAAV,CAIH,CACD;AACA,GAAIhC,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACoG,cAAtD,CAAsE,CAExE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFACyB,CACD;AACA,GAAIxE,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACwG,YAAlD,EAAkE5E,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACuG,iBAAxH,CAA2I,CACvI9F,UAAU,gCACHA,UADG,MAENmD,YAAY,CAAEnD,UAAU,CAACiD,sBAAX,CAAkCG,MAAlC,CAA2C,CAA3C,CAA+C,CAACpD,UAAU,CAACiD,sBAAX,CAAkC,CAAlC,CAAD,CAA/C,CAAwF,EAFhG,EAAV,CAKF;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAEyB,CACF;AACA;AACC,eAA2D9B,SAA3D,CAAMW,QAAN,YAAMA,QAAN,CAAgBE,QAAhB,YAAgBA,QAAhB,CAA0BC,aAA1B,YAA0BA,aAA1B,CAAyCC,aAAzC,YAAyCA,aAAzC,CACA;AACA;AACA;AACAJ,QAAQ,CAAG,CAAX,CACAG,aAAa,CAAG,CAAhB,CACA;AACA;AACA;AACAqE,QAAQ,CAAG,CAAExE,QAAQ,CAARA,QAAF,CAAYE,QAAQ,CAARA,QAAZ,CAAsBC,aAAa,CAAbA,aAAtB,CAAqCC,aAAa,CAAbA,aAArC,CAAX,CACA;AACH,CAxLD,IAwLO,CAEH;AACA;AACA1D,kCAAkC,CAAC2C,SAAS,CAACnB,UAAX,CAAuBM,QAAQ,CAACC,IAAhC,CAC9BY,SAAS,CAACsF,YADoB,CACNtF,SAAS,CAAC5B,iBADJ,CACuB,sBADvB,CAE9B4B,SAAS,CAACuF,sBAFoB,CAAlC,CAGA1G,UAAU,gCACHmB,SAAS,CAACnB,UADP,MAEN+C,cAAc,CAAE5B,SAAS,CAAC4B,cAFpB,CAGNkE,4BAA4B,CAAE9F,SAAS,CAACsE,oBAHlC,CAINtC,YAAY,CAAEhC,SAAS,CAACnB,UAAV,CAAqBiD,sBAArB,CAA4CG,MAA5C,CAAqD,CAArD,CACV,CAACjC,SAAS,CAACnB,UAAV,CAAqBiD,sBAArB,CAA4C,CAA5C,CAAD,CADU,CACyC,EALjD,CAMNC,iBAAiB,CAAE/B,SAAS,CAACnB,UAAV,CAAqBgD,2BANlC,EAAV,CAQA;AACA;AACA;AACA;AAEA;AACA,GAAI7B,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACoG,cAAlD,EAAoExE,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACsH,WAA1H,CAAuI,CACnI,GAAMK,CAAAA,aAAa,CAAGlH,UAAU,CAACiD,sBAAX,CAAkC+C,GAAlC,CAAsC,SAAAe,CAAC,QAAIA,CAAAA,CAAC,CAACI,kBAAN,EAAvC,CAAtB,CACA;AACA;AACA;AACA;AACA;AAEA;AACAZ,eAAe,CAAGA,eAAe,CAAChD,MAAhB,CAAuB,SAAA/C,IAAI,QACzC0G,CAAAA,aAAa,CAACF,QAAd,CAAuBxG,IAAI,CAAC2G,kBAA5B,CADyC,EAA3B,CAAlB,CAGA;AACA,GAAIC,CAAAA,OAAO,CAAG,KAAd,CACA,GAAID,CAAAA,kBAAJ,CACA,GAAI1B,CAAAA,oBAAJ,CACA,GAAIc,eAAe,CAACnD,MAAhB,CAAyB,CAA7B,CAAgC,CAC5BgE,OAAO,CAAG,IAAV,CACApH,UAAU,gCACHA,UADG,MAENmD,YAAY,CAAEoD,eAFR,EAAV,CAIH,CAND,IAMO,CACHY,kBAAkB,CAAGhG,SAAS,CAACnB,UAAV,CAAqBiD,sBAArB,CAA4CG,MAA5C,CAAqD,CAArD,CACjBjC,SAAS,CAACnB,UAAV,CAAqBiD,sBAArB,CAA4C,CAA5C,EAA+CkE,kBAD9B,CACmD,EADxE,CAEI1B,oBAAoB,CAAGtE,SAAS,CAACnB,UAAV,CAAqB8C,wBAArB,CAA8CM,MAA9C,CAAuD,CAAvD,CACvBjC,SAAS,CAACnB,UAAV,CAAqB8C,wBAArB,CAA8C,CAA9C,EAAiD2C,oBAD1B,CACiD,EADxE,CAEP,CACF;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BACyB,CACD;AArEA,IAsEK,IAAItE,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACuG,iBAAtD,CAAyE,CAC7E;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BA7CkG,CA8C1E;AACH,CACD;AAhDK,IAiDA,IAAI3E,SAAS,CAAC5B,iBAAV,GAAgCA,iBAAiB,CAACoG,cAAtD,CAAsE,CACvE,GAAIiD,CAAAA,QAAQ,CAAGjK,eAAe,CAACwC,SAAS,CAACnB,UAAV,CAAqBgD,2BAAtB,CAAmD1C,QAAQ,CAACC,IAAT,CAAc0C,sBAAjE,CAAyF,yBAAzF,CAA9B,CACAjD,UAAU,gCACHA,UADG,MAENmD,YAAY,CAAEyF,QAAQ,CAAGA,QAAQ,CAACxF,MAAT,CAAkB,CAAlB,CAAsB,CAACwF,QAAQ,CAAC,CAAD,CAAT,CAAtB,CAAsC,EAAzC,CAA8C,EAF9D,CAGN3F,sBAAsB,CAAE2F,QAAQ,CAAGA,QAAQ,CAACxF,MAAT,CAAkB,CAAlB,CAAsBwF,QAAtB,CAAiC,EAApC,CAAyC,EACzE;AAJM,EAAV,CAOD;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAvD+F,CAwDvE;AACH,CAzDI,IA0DA,CACH;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BACqB,CACD,GAAIxC,SAAJ,CAAe,CACX,GAAIyC,CAAAA,kBAAkB,CAAG7I,UAAU,CAACgD,2BAAX,CAAuCgD,GAAvC,CAA2C,SAAAe,CAAC,QAAIA,CAAAA,CAAC,CAACtD,uBAAN,EAA5C,CAAzB,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA+C,oBAAoB,CAAGA,oBAAoB,CAACjD,MAArB,CAA4B,SAAA/C,IAAI,QA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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {filterRecordBasedOnTwoArrays,sortData, fillRecordBasedOnCheckBoxSelection,updatedObjectWithNewElement, getRecordBasedOnPrimaryKeyName, reArrangeArrays,filterRecordBasedOnPrimaryKeyName, \r\n    rearrangeDateFormat, getSameRecordFromTwoArrays,sortDataByParent,constructOptionList,parentChildComboLoad,constructjsonOptionList,childComboLoadForEdit,constructjsonOptionDefault,replaceUpdatedObject} from '../components/CommonScript';\r\nimport {transactionStatus,checkBoxOperation,SampleType} from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction'\r\nimport { intl } from '../components/App';\r\n\r\n// ALPD-4914 created SchedulerConfigurationAction.js file for scheduler configuration screen\r\nexport function onSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getRegistrationType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/schedulerconfiguration/getRegistrationSubType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function onRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getApprovalConfigVersion\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function changeApprovalConfigVersionChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getApproveConfigVersionRegTemplate\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSchedulerConfigSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab, regSampleExisted: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function insertSchedulerConfig(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSchedulerConfigWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSchedulerConfig\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n\r\n                    let SchedulerConfigGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.SchedulerConfigGetSample, 'SchedulerConfigSample');\r\n                    let selectedSample = response.data[\"selectedSample\"];\r\n                    let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n                    let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                    let selectedSubSample = SchedulerConfigGetSubSample;\r\n                    SchedulerConfigGetTest = sortData(SchedulerConfigGetTest, \"nschedulersamplecode\", \"desc\");\r\n                    let selectedTest = SchedulerConfigGetTest.length > 0 ? [SchedulerConfigGetTest[0]] : [];\r\n                    let regSampleExisted = inputParam.inputData && inputParam.inputData.orderTypeValue === 2 ? true : false;\r\n                    if (inputParam.inputData.nneedsubsample) {\r\n                        SchedulerConfigGetSubSample = sortData(response.data[\"SchedulerConfigGetSubSample\"], 'nschedulersamplecode', 'desc')\r\n                        selectedSubSample = SchedulerConfigGetSubSample.length > 0 ? [SchedulerConfigGetSubSample[0]] : [];\r\n                        SchedulerConfigGetTest = SchedulerConfigGetTest.filter(x => x.nschedulersubsamplecode === selectedSubSample[0].nschedulersubsamplecode)\r\n                        selectedTest = SchedulerConfigGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                    }\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.SchedulerConfigGetSubSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.SchedulerConfigGetTest);\r\n                        SchedulerConfigGetSubSample = masterData.SchedulerConfigGetSubSample;\r\n                        SchedulerConfigGetTest = masterData.SchedulerConfigGetTest;\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedSample, selectedSubSample, selectedTest,\r\n                        SchedulerConfigGetSubSample, SchedulerConfigGetTest, SchedulerConfigGetSample,\r\n                    }\r\n                    if (masterData[\"kendoFilterList\"] !== undefined) {\r\n                        masterData[\"kendoFilterList\"] = undefined;\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined,\r\n                        openPortal: false,\r\n                        selectedSpec: {},\r\n                        selectComponent: {},\r\n                        SelectedTest: {},\r\n                        selectedComponent: {},\r\n                        Component: [],\r\n                        selectedRecord: {},\r\n                        SelectedTest: [],\r\n                        Test: [],\r\n                        selectedComponent: {},\r\n                        subSampleDataGridList: [],\r\n                        preregConfirmMessage: undefined,\r\n                        regSampleExisted, loadImportFileData: false, loadImportSampleCountData: false,\r\n                        skip: 0,\r\n                        subsampleskip: 0,\r\n                        testskip: 0,\r\n                        isDynamicViewSlideOut: false,\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                    inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, preregConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                preregConfirmMessage: error.response.data.rtn,\r\n                                preregConfirmParam: { inputParam, masterData },\r\n                                loading: false,\r\n                                showSample: undefined,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, preregConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSchedulerConfigSubSampleDetail(inputData, isServiceRequired, isParentValue) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n           // activeTestTab: inputData.activeTestTab,\r\n          //  activeSampleTab: inputData.activeTestTab,\r\n          //  activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            nschedulersamplecode: inputData.nschedulersamplecode,\r\n        ntype: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 7 ? 4 : undefined:2, //ALPD-497\r\n            ntype: inputData.nneedsubsample === true ? inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL ? checkBoxOperation.SINGLEDESELECT : undefined : checkBoxOperation.DESELECT, //ALPD-497\r\n           checkBoxOperation: inputData.nneedsubsample === true ?\r\n               inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS ? checkBoxOperation.SINGLESELECT : inputData.checkBoxOperation : inputData.checkBoxOperation,\r\n           // OrderCodeData: inputData.selectedSample ? inputData.selectedSample.length > 0 && inputData.selectedSample.map(item => item.hasOwnProperty(\"OrderCodeData\") ? item.OrderCodeData : -1).join(\",\") : null,\r\n            selectednschedulersamplecode: inputData.selectedSample && inputData.selectedSample.length > 0 ? inputData.selectedSample.map(item => item.nschedulersamplecode).join(\",\") : null,\r\n            selectedTransactionSamplecode: inputData.selectedSample && inputData.selectedSample.length > 1\r\n                && inputData.masterData.selectedSubSample ? inputData.masterData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\") : null,\r\n          //  noutsourcerequired: inputData.masterData && inputData.masterData.RealSampleTypeValue ? inputData.masterData.RealSampleTypeValue.noutsourcerequired : transactionStatus.NA\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"schedulerconfiguration/getSchedulerConfigSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data, \"descending\", \"nschedulersamplecode\");\r\n                    // if(isParentValue){\r\n                    response.data['SchedulerConfigGetSubSample'] = sortDataByParent(response.data['SchedulerConfigGetSubSample'], inputData.sample, \"nschedulersamplecode\");\r\n                    //response.data['SchedulerConfigGetTest']= sortDataByParent(response.data['SchedulerConfigGetTest'],response.data['SchedulerConfigGetSubSample'], \"ntransactionsamplecode\");\r\n                    //  }\r\n                   \r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                 //   let externalOrderAttachmentList = response.data && response.data.ExternalOrderAttachmentList;\r\n                //    let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.nschedulersamplecode,\r\n                            selectedSubSample: inputData.masterData.SchedulerConfigGetSubSample.length > 0 ?\r\n                                [inputData.masterData.SchedulerConfigGetSubSample[0]] : [],\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                        }\r\n                       // let RegistrationTestComment = [];\r\n                   //     let RegistrationTestAttachment = [];\r\n                     //   let RegistrationParameter = [];\r\n                     //   let RegistrationComment = [];\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {  \r\n                        //if (inputData.checkBoxOperation === 1) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n\r\n                            const wholeSubSampleList = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                            // START ALPD-3625 VISHAKH\r\n                            // oldSelectedSubSample.forEach((subsample, index) => {\r\n                            //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSampleList.includes(item.nschedulersubsamplecode)\r\n                            );\r\n                            // END ALPD-3625 VISHAKH\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'nschedulersamplecode')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        //  if (inputData.checkBoxOperation === 7) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                           \r\n                      /*      switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;*/\r\n                        }\r\n                        //if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.SchedulerConfigGetTest.length > 0 ? [masterData.SchedulerConfigGetTest[0]] : []\r\n                            }\r\n\r\n                          /*  switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [\r\n                                                // ...inputData.masterData.RegistrationTestAttachment, \r\n                                                ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [\r\n                                        // ...inputData.masterData.RegistrationParameter, \r\n                                        ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [\r\n                                            // ...inputData.masterData.RegistrationTestComment, \r\n                                            ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                            masterData[\"RegistrationComment\"] = RegistrationComment;*/\r\n\r\n                        }\r\n                       // masterData['ExternalOrderAttachmentList'] = externalOrderAttachmentList;\r\n                       // masterData['OutsourceDetailsList'] = outsourceDetailsList;\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        // let bool = false;\r\n                        // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                        // if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\r\n                        testskip = 0;\r\n                        subsampleskip = 0;\r\n                        // bool = true\r\n                        // }\r\n                        // if (bool) {\r\n                        skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        // }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectednschedulersamplecode: inputData.nschedulersamplecode,\r\n                            selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                                [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.SchedulerConfigGetSubSample,\r\n                        }\r\n                        // let RegistrationTestComment = [];\r\n                        // let RegistrationParameter = [];\r\n                        // let RegistrationTestAttachment = [];\r\n                        // let RegistrationComment = [];\r\n\r\n                        //if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL || inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                            const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode)\r\n                            // START ALPD-3625 VISHAKH\r\n                            // oldSelectedTest.forEach((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n                            oldSelectedTest = oldSelectedTest.filter(item =>\r\n                                wholeTestList.includes(item.nschedulertestcode)\r\n                            );\r\n                            // START ALPD-3625 VISHAKH\r\n                            let keepOld = false;\r\n                            let nschedulertestcode;\r\n                            let nschedulersamplecode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                                    inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"\"\r\n                                    nschedulersamplecode = inputData.masterData.SchedulerConfigGetSample.length > 0 ?\r\n                                    inputData.masterData.SchedulerConfigGetSample[0].nschedulersamplecode : \"\"\r\n                            }\r\n                           /* switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = keepOld ? inputData.masterData.RegistrationComment ?\r\n                                        inputData.masterData.RegistrationComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/\r\n                        }\r\n                        //else if (inputData.checkBoxOperation === 5) {\r\n                        else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                         /*   switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            /*switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    {\r\n                                        RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n\r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_SAMPLECOMMENTS\":\r\n                                    RegistrationComment = response.data.RegistrationComment ?\r\n                                        [...response.data.RegistrationComment] : [];\r\n                                    activeName = \"RegistrationComment\"\r\n                                    dataStateName = \"sampleCommentsDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }*/\r\n                        }\r\n                     \r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    // let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                   // Start of ALPD-4130 on Save Additional Filter - ATE-241\r\n                    let multifilterInfo = {}\r\n                    if (inputData.multiFilterLoad !== undefined) {\r\n                        if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                            inputData.searchSampleRef.current.value = \"\";\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\";\r\n                        }\r\n                        multifilterInfo = {\r\n                            multiFilterLoad: inputData.multiFilterLoad,\r\n                            openModal: inputData.openModal,\r\n                            searchSampleRef: inputData.searchSampleRef,\r\n                            searchSubSampleRef: inputData.searchSubSampleRef,\r\n                            searchTestRef: inputData.searchTestRef,\r\n                            testskip: inputData.testskip,\r\n                            subsampleskip: inputData.subsampleskip,\r\n                            skip: inputData.skip,\r\n                            // filterColumnActive:true\r\n                        }\r\n                    }\r\n                    //  End of ALPD-4130 ATE-241\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            // ALPD-4130 Additional Filter Info ATE-241\r\n                            ...multifilterInfo,\r\n                            // inputParam:inputData\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n\r\n\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n            }\r\n\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [];\r\n                let nschedulertestcode = selectedTest.length > 0 ? selectedTest.map(x => x.nschedulertestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.SchedulerConfigGetSubSample[0]];\r\n                    if (inputData.masterData.SchedulerConfigGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                if (inputData.masterData.SchedulerConfigGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                //     selectedSubSample, checkBoxOperation: 3, skipInfo, masterData\r\n                // }\r\n                inputData = {\r\n                    ...inputData, nschedulertestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT, skipInfo, masterData\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"nschedulersamplecode\"] = selectedSubSample.map(x => x.nschedulersamplecode).join(\",\")\r\n                        inputData[\"nschedulersubsamplecode\"] = selectedSubSample.map(x => x.nschedulersubsamplecode).join(\",\")\r\n                        // inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                        inputData[\"childTabsKey\"] = [\"SchedulerConfigGetTest\"]\r\n                       dispatch(getSchedulerTestDetail(inputData, true));\r\n                    } else {\r\n                        //dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                  //  dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            }\r\n            else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.nschedulersamplecode,\r\n                    selectedTest: TestSelected ? TestSelected : inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.SchedulerConfigGetSubSample\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].nschedulersamplecode, \"nschedulersamplecode\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                            // START ALPD-3625 VISHAKH\r\n                            // oldSelectedSubSample.forEach((test, index) => {\r\n                            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSample.includes(item.nschedulersubsamplecode)\r\n                            );\r\n                            // END ALPD-3625 VISHAKH\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.SchedulerConfigGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"nschedulersamplecode\"] = selectedSubSample1.map(x => x.nschedulersamplecode).join(\",\")\r\n                                inputData[\"nschedulersubsamplecode\"] = selectedSubSample1.map(x => x.nschedulersubsamplecode).join(\",\")\r\n                                // inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                                inputData[\"childTabsKey\"] = [\"SchedulerConfigGetTest\"]\r\n                                subsamplecheck = false;\r\n                              //  dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldSelectedSubSample.forEach((test, index) => {\r\n                        //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSample.includes(item.nschedulersubsamplecode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.SchedulerConfigGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode)\r\n                // START ALPD-3625 VISHAKH\r\n                // oldSelectedTest.forEach((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.nschedulertestcode)\r\n                );\r\n                // END ALPD-3625 VISHAKH\r\n                let keepOld = false;\r\n                let nschedulertestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"-1\"\r\n                }\r\n               // masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, nschedulertestcode, \"nschedulertestcode\")\r\n              //  masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, nschedulertestcode, \"nschedulertestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.SchedulerConfigGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                        // activeTabIndex: inputData.activeTabIndex\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}export function getSchedulerTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nschedulersubsamplecode: inputData.nschedulersubsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            selectedTransactionsamplecode: inputData.selectedSubSample && inputData.selectedSubSample.length > 0 && inputData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\"),\r\n            noutsourcerequired: inputData.masterData && inputData.masterData.RealSampleTypeValue ? inputData.masterData.RealSampleTypeValue.noutsourcerequired : transactionStatus.NA\r\n\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"schedulerconfiguration/getSchedulerConfigTest\", inputParamData)\r\n                .then(response => {\r\n                    //sortData(response.data);\r\n                    //ALPD-1609\r\n                    sortData(response.data, 'descending', 'nschedulersamplecode')\r\n                    let oldSelectedTest = inputData.masterData.selectedTest || []\r\n                    let oldSelectedSubSample = inputData.masterData.selectedSubSample || []\r\n                   // let outsourceDetailsList = response.data && response.data.OutsourceDetailsList;\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.nschedulersubsamplecode,\r\n                        selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                            [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n\r\n                    //let wholeRegistrationTestComments = [];\r\n                    // let RegistrationTestComment = [];\r\n                    // let RegistrationTestAttachment = [];\r\n                    // let RegistrationParameter = [];\r\n                    // let RegistrationSampleComment = [];\r\n                    // let RegistrationSampleAttachment = [];\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\r\n                        const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.nschedulertestcode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldSelectedTest.forEach((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n\r\n                        // })\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.nschedulertestcode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                        let keepOld = false;\r\n                        let nschedulertestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                                inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode : \"\"\r\n                        }\r\n                     /*   switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                    inputData.masterData.RegistrationTestAttachment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n*/\r\n\r\n\r\n                    }\r\n                    // else if (inputData.checkBoxOperation === 5) {\r\n                    else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\r\n                        /*switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    // else if (inputData.checkBoxOperation === 7) {\r\n                    else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\r\n                        let testList = reArrangeArrays(inputData.masterData.SchedulerConfigGetSubSample, response.data.SchedulerConfigGetTest, \"nschedulersubsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedTest: testList ? testList.length > 0 ? [testList[0]] : [] : [],\r\n                            SchedulerConfigGetTest: testList ? testList.length > 0 ? testList : [] : [],\r\n                            //ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                       /* switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                // let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let RegistrationParameter1 = [...resultResponseData];\r\n                                let ntransactiontestcode1 = testList ? testList.length > 0 ? testList[0].ntransactiontestcode : inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1 : -1\r\n\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                      /*  switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }*/\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.SchedulerConfigGetSubSample.map(b => b.nschedulersubsamplecode)\r\n                        // START ALPD-3625 VISHAKH\r\n                        // oldSelectedSubSample.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubsampleList.includes(item.nschedulersubsamplecode)\r\n                        );\r\n                        // END ALPD-3625 VISHAKH\r\n                        let keepOld = false;\r\n                        let nschedulersubsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            nschedulersubsamplecode = masterData.selectedSubSample[0].nschedulersubsamplecode\r\n                        }\r\n\r\n                       /* switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }*/\r\n                    }\r\n                  /*  masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    masterData[\"RegistrationSampleComment\"] = RegistrationSampleComment;\r\n                    masterData[\"RegistrationSampleAttachment\"] = RegistrationSampleAttachment;\r\n                    masterData['OutsourceDetailsList'] = outsourceDetailsList;*/\r\n                    let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.SchedulerConfigGetTest.length < inputData.testskip) {\r\n                    testskip = 0;\r\n                    // bool = true\r\n                    // }\r\n                    if (inputData.masterData.SchedulerConfigGetSubSample.length < inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        // bool = true\r\n                    }\r\n                    // if (bool) {\r\n                    skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                    // }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    //  let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            // activeTabIndex: inputData.activeTabIndex,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            //  inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            // START ALPD-3625 VISHAKH\r\n            // let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].nschedulersubsamplecode, \"nschedulersubsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            // END ALPD-3625 VISHAKH\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let nschedulertestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ? inputData.masterData.SchedulerConfigGetTest[0].nschedulertestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.SchedulerConfigGetTest.length > 0 ? [inputData.masterData.SchedulerConfigGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.SchedulerConfigGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                //     selectedSubSample, checkBoxOperation: 3, activeTabIndex: inputData.masterData.activeTabIndex\r\n                // }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationParameter\"], nschedulertestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT, activeTabIndex: inputData.masterData.activeTabIndex\r\n                }\r\n                //dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedSchedulersubsamplecode: inputData.nschedulersubsamplecode,\r\n                    selectedTest: inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                        [inputData.masterData.SchedulerConfigGetTest[0]] : [],\r\n                }\r\n                // START ALPD-3671 VISHAKH\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // END ALPD-3671 VISHAKH\r\n                const wholeTestList = masterData.SchedulerConfigGetTest.map(b => b.ntransactiontestcode)\r\n                // START ALPD-3625 VISHAKH\r\n                // oldSelectedTest.forEach((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                );\r\n                // END ALPD-3625 VISHAKH\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.SchedulerConfigGetTest.length > 0 ?\r\n                        inputData.masterData.SchedulerConfigGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTabIndex: inputData.activeTabIndex,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function ReloadDataSchedulerConfig(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"schedulerconfiguration/getSchedulerConfigByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData, \"descending\", \"nschedulersamplecode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip: 0,\r\n                        subsampletake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab, regSampleExisted: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailSchedulerConiguration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.nschedulertestcode === \"\") {\r\n            inputData.nschedulertestcode = \"0\";\r\n        }\r\n        if (inputData.nschedulertestcode && inputData.nschedulertestcode.length > 0) {\r\n            let inputParamData = {\r\n                nschedulertestcode: inputData.nschedulertestcode,\r\n                nschedulersamplecode: inputData.nschedulersamplecode,\r\n                ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                userinfo: inputData.userinfo,\r\n                nschedulersubsamplecode: inputData.nschedulersubsamplecode ? inputData.nschedulersubsamplecode :\r\n                    inputData.selectedSubSample && inputData.selectedSubSample.map(item => item.nschedulersubsamplecode).join(\",\")\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n         \r\n          \r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(\"schedulerconfiguration/getSchedulerConfigParameter\", { ...inputParamData })\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulersubsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedSchedulerSamplecode: inputData.nschedulersamplecode,\r\n                                selectedSchedulerSubSamplecode: inputData.nschedulersubsamplecode,\r\n                                selectedSchedulerTestCode: inputData.nschedulertestcode,\r\n                                activeTabIndex: inputData.activeTabIndex,\r\n                                activeTabId: inputData.activeTabId\r\n                            }\r\n                            if (inputData[\"resultDataState\"] && masterData[\"RegistrationParameter\"] && masterData[\"RegistrationParameter\"].length <= inputData[\"resultDataState\"].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [\"resultDataState\"]: {\r\n                                        ...inputData[\"resultDataState\"],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [\"resultDataState\"]: {\r\n                                        ...inputData[\"resultDataState\"],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    activeTabIndex: inputData.activeTabIndex,\r\n                                    activeTabId: inputData.activeTabId,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.info(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"nschedulertestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedSchedulerSamplecode: inputData.nschedulersamplecode,\r\n                        selectedSchedulerSubSamplecode: inputData.nschedulersubsamplecode,\r\n                        selectedSchedulerTestCode: inputData.nschedulertestcode,\r\n                    }\r\n                    if (inputData[\"resultDataState\"] && masterData[\"SchedulerConfigurationParameter\"].length <= inputData[\"resultDataState\"].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [\"resultDataState\"]: {\r\n                                ...inputData[\"resultDataState\"],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [\"resultDataState\"]: {\r\n                                ...inputData[\"resultDataState\"],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            \r\n            } else {\r\n            let {  SchedulerConfigurationParameter } = inputData.masterData\r\n            SchedulerConfigurationParameter=[];\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        SchedulerConfigurationParameter\r\n                    }, loading: false,\r\n                    activeTabIndex: inputData.activeTabIndex,\r\n                    activeTabId: inputData.activeTabId,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function addsubSampleSchedulerConfiguration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n    regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent, specBasedTestPackage) {\r\n    return function (dispatch) {\r\n        const urlArray = []\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const parentcolumnlist= regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true))\r\n        urlArray[0] = timeZoneService;\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist:parentcolumnlist ,\r\n            childcolumnlist: regchildColumnList,\r\n            userinfo\r\n        })\r\n        urlArray[1] = actualService;\r\n\r\n        if (specBasedComponent) {\r\n            const ComponentTestBySpec = rsapi.post(\"/schedulerconfiguration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent,\r\n                userinfo\r\n            })\r\n            urlArray[2] = ComponentTestBySpec;\r\n        } else {\r\n\r\n            const TestGet = rsapi.post(\"/schedulerconfiguration/getTestfromDB\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                slno: 1,\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n                conditionalTestPackage: true,\r\n                nneedsubsample: Map[\"nneedsubsample\"]\r\n\r\n            })\r\n            urlArray[2] = TestGet;\r\n            const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[5] = TestPackageGet;\r\n            const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getTestfromSection\", {\r\n                nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                specBasedComponent: specBasedComponent,\r\n                specBasedTestPackage: specBasedTestPackage,\r\n            });\r\n            urlArray[6] = TestSectionGet;\r\n\r\n        }\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n\r\n        urlArray[3] = currentDate\r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: regSubSamplewithoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n        urlArray[4] = dateService\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(regcolumnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data,\r\n                    selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                let PackageData = [];\r\n                let TestSectionData = [];\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (specBasedComponent) {\r\n\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                        \"scomponentname\", undefined, undefined, true);\r\n\r\n                    lstComponent = lstComponentMap.get(\"OptionList\");\r\n                    //Commented by Dhanushya for jira ETICA-22\r\n                    // if (lstComponent.length > 0) {\r\n                    //     selectedRecord1['ncomponentcode'] = { ...lstComponent[0] }\r\n                    //     selectedRecord1[\"Sample Name\"] = selectedRecord1['ncomponentcode'].label;\r\n                    //     selectedRecord1[\"nspecsampletypecode\"] = selectedRecord1['ncomponentcode'].item.nspecsampletypecode;\r\n                    //     selectedRecord1[\"nneedsubsample\"] = Map.nneedsubsample\r\n\r\n                    // }\r\n\r\n                } else {\r\n                    //if (specBasedTestPackage) {\r\n                    const PackageDataMap = constructOptionList(response[5].data.TestPackage || [], \"ntestpackagecode\",\r\n                        \"stestpackagename\", undefined, undefined, true);\r\n                    PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n                    const TestSectionDataMap = constructOptionList(response[6].data.TestSection || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n                    TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n\r\n                    // if (PackageData.length === 0) {\r\n                    //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n                    // } \r\n                    // }\r\n                    // else {\r\n                    TestCombined = response[2].data;\r\n                    // }\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n\r\n                regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[4].data[componentrow.label] ?\r\n                                new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[4].data[componentrow.label] ?\r\n                                    new Date(response[4].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n\r\n                const inputParam = {\r\n                    screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent,\r\n                    openModal: true,\r\n                    loadPrinter: false,\r\n                    operation: \"create\",\r\n                    loadScheduleSubSample: true,\r\n                    selectedRecord: selectedRecord1,\r\n                    regSubSamplecomboData: comboData1,\r\n                    regSubSamplecomboComponents,\r\n                    regSubSamplewithoutCombocomponent,\r\n                    TestCombined,\r\n                    regparentSubSampleColumnList: regcolumnList,\r\n                    regchildSubSampleColumnList: regchildColumnList,\r\n                    ncontrolCode: ncontrolcode,\r\n                    timeZoneList,\r\n                    defaultTimeZone,\r\n                    masterData,\r\n                    specBasedComponent,\r\n                    specBasedTestPackage,\r\n                    TestPackage: PackageData,\r\n                    //ALPD-624\r\n                    testskip: 0,\r\n                    subsampleskip: 0,\r\n                    TestSection: TestSectionData, AllTest: TestCombined, AllSection: TestSectionData\r\n                }\r\n                // if (specBasedComponent) {\r\n                //Added by Dhanushya for jira ETICA-22\r\n                if (specBasedComponent && selectedRecord1['ncomponentcode']!==undefined) {\r\n\r\n                    dispatch(componentTest(selectedRecord1, true, specBasedComponent, [], specBasedTestPackage, true, inputParam))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { ...inputParam } })\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component, specBasedTestPackage, conditionalTestPackage, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const urlArray = []\r\n        Component = Component ? Component : []\r\n        const TestGet = rsapi.post(\"/schedulerconfiguration/getTestfromDB\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage,\r\n            nneedsubsample: selectedobject.nneedsubsample\r\n        });\r\n        urlArray[0] = TestGet;\r\n        const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getTestfromTestPackage\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[1] = TestPackageGet;\r\n\r\n        const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getTestfromSection\", {\r\n            nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent,\r\n            specBasedTestPackage: specBasedTestPackage,\r\n            conditionalTestPackage: conditionalTestPackage\r\n        });\r\n        urlArray[2] = TestSectionGet;\r\n        Axios.all(urlArray).then(response => {\r\n            let PackageData = []\r\n            let TestData = []\r\n            let TestSectionData = []\r\n            // if (specBasedTestPackage) {\r\n            const PackageDataMap = constructOptionList(response[1].data.TestPackage || [], \"ntestpackagecode\",\r\n                \"stestpackagename\", undefined, undefined, true);\r\n            PackageData = PackageDataMap.get(\"OptionList\");\r\n\r\n            const testSectionDataMap = constructOptionList(response[2].data.TestSection || [], \"nsectioncode\",\r\n                \"ssectionname\", undefined, undefined, true);\r\n            TestSectionData = testSectionDataMap.get(\"OptionList\");\r\n\r\n            // if (PackageData.length === 0) {\r\n            //     dispatch(getAllTest(selectComponent, LoginProps, undefined, specBasedComponent, undefined, false, undefined)); \r\n            // } \r\n            //   }\r\n            //    else {\r\n            TestData = response[0].data;\r\n            //  }\r\n            //let Test = [];\r\n            // Test[selectedobject.slno] = TestData;\r\n            const Map = {}\r\n            if (Reg) {\r\n                Map[\"selectedRecord\"] = selectedobject\r\n            } else {\r\n                Map[\"selectComponent\"] = selectedobject\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...inputParam, TestCombined: TestData, AllTest: TestData, TestPackage: PackageData, ...Map, loading: false, selectedTestData: [],\r\n                    selectPackage: [], TestSection: TestSectionData, selectSection: [], AllSection: TestSectionData\r\n\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function testSectionTest(selectedobject, Reg, specBasedComponent, Component, selectComponent, objComponent, LoginProps, selectPackage, selectSection, subSampleBased, selectedSpec, nneedsubsample, action) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        Component = Component ? Component : []\r\n        rsapi.post(\"/schedulerconfiguration/getTestBasedTestSection\", {\r\n            nspecsampletypecode: selectComponent && selectComponent.nspecsampletypecode ? selectComponent.nspecsampletypecode : selectedobject.nspecsampletypecode,\r\n            specBasedComponent: specBasedComponent,\r\n            ntestpackagecode: selectPackage.ntestpackagecode && selectPackage.ntestpackagecode.value || -1,\r\n            nsectioncode: selectSection.nsectioncode.value,\r\n            nallottedspeccode: selectedSpec && selectedSpec.value !== undefined ? selectedSpec.value : selectedobject.nallottedspeccode\r\n        })\r\n            .then(response => {\r\n                const Map = {}\r\n                let TestData = response.data;\r\n                let Test = (action !== \"AddSubSample\") ? (LoginProps.Test || []) : [];\r\n\r\n                let componentTest = [];\r\n                if (subSampleBased) {\r\n                    componentTest = Test[Component ? Object.keys(Component).length + 1 : 1] ? Test[Component ? Object.keys(Component).length + 1 : 1] : [];\r\n\r\n                } else {\r\n                    componentTest = objComponent && Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n\r\n                }\r\n                const availableTest = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n                const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestcode\");\r\n\r\n                delete selectedobject.ntestgrouptestcode;\r\n                if (Reg) {\r\n                    Map[\"selectedRecord\"] = selectedobject\r\n                } else {\r\n                    Map[\"selectPackage\"] = selectPackage\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        availableTest, TestCombined, ...Map, loading: false, selectedTestData: [],\r\n                        AllTest: LoginProps.AllTest\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function saveSchedulerSubSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSubSampleWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/createSubSample\", inputParam.inputData);\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                let SchedulerConfigGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.SchedulerConfigGetSubSample, response.data[\"selectedSubSample\"]);\r\n                let SchedulerConfigGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample = response.data[\"selectedSubSample\"];\r\n                //let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"] && response.data[\"SchedulerConfigGetSubSample\"];\r\n                SchedulerConfigGetTest = sortData(SchedulerConfigGetTest, \"nschedulersamplecode\", \"desc\");\r\n                let selectedTest = SchedulerConfigGetTest.length > 0 ? [SchedulerConfigGetTest[0]] : [];\r\n                let SchedulerConfigurationParameter = response.data[\"SchedulerConfigurationParameter\"];\r\n                SchedulerConfigurationParameter = SchedulerConfigurationParameter ? getSameRecordFromTwoArrays(SchedulerConfigurationParameter, selectedTest, 'nschedulertestcode') : SchedulerConfigurationParameter;\r\n              //  let SchedulerConfigGetSample = replaceUpdatedObject(response.data[\"selectedSample\"], inputParam.inputData.masterData.SchedulerConfigGetSample, 'nschedulersamplecode');\r\n                //let selectedSample = response.data[\"selectedSample\"];\r\n\r\n\r\n\r\n                let masterData = { ...inputParam.inputData.masterData }\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSubSample, selectedTest,\r\n                    SchedulerConfigGetSubSample, SchedulerConfigGetTest, SchedulerConfigurationParameter,\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadScheduleSubSample: false,\r\n                    showConfirmAlert: false,\r\n                    subSampleConfirmMessage: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'yes';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                \r\n            })\r\n            .catch(error => {\r\n               \r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false, subSampleConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                subSampleConfirmMessage: error.response.data.rtn,\r\n                                subSampleConfirmParam: { inputParam },\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    } else if (error.response.data.rtn) {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data.rtn\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.error(error.message);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false,\r\n                                showConfirmAlert: false, subSampleConfirmMessage: undefined\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getEditSchedulerSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n    childColumnList, comboComponents,\r\n    withoutCombocomponent, specBasedComponent) {\r\n    return function (dispatch) {\r\n        let { userInfo, operation, masterData } = { ...inputParam };\r\n        if(masterData[\"selectedSubSample\"][0].ntransactionstatus===transactionStatus.DRAFT){\r\n\r\n        if (masterData[\"selectedSubSample\"].length > 1 ||\r\n            masterData[\"selectedSubSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"] = true;\r\n        }\r\n\r\n        masterData[\"selectedSubSample\"] = [];\r\n        masterData[\"selectedSubSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        inputParam.editSubSampleSchedulerParam[\"nschedulersamplecode\"] = inputParam[\"mastertoedit\"][\"nschedulersamplecode\"];\r\n        inputParam.editSubSampleSchedulerParam[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\r\n        inputParam.editSubSampleSchedulerParam[\"nfilterstatus\"] = inputParam[\"mastertoedit\"][\"ntransactionstatus\"];\r\n        inputParam.editSubSampleSchedulerParam[\"napprovalconfigcode\"] = inputParam[\"mastertoedit\"][\"napprovalconfigcode\"];\r\n\r\n        const nschedulersubsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        if (nschedulersubsamplecode === undefined) {\r\n            toast.info(intl.formattedMessage({ id: \"IDS_SELECTVALIDSUBSAMPLE\" }));\r\n        }\r\n        else {\r\n            let urlArray = [];\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n           \r\n            const selectedRegistration = rsapi.post(\"/schedulerconfiguration/getEditSchedulerSubSampleComboService\", {\r\n                ...inputParam.editSubSampleSchedulerParam, nschedulersubsamplecode, parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo: userInfo\r\n            })\r\n\r\n            const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n                datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n                userinfo: userInfo\r\n            })\r\n\r\n\r\n            urlArray = [timeZoneService, selectedRegistration, dateService]\r\n          \r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n\r\n                    selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n                    if (specBasedComponent) {\r\n                        selectedRecord[\"ncomponentcode\"] = { label: selectedRecord[\"scomponentname\"], value: selectedRecord[\"ncomponentcode\"] }\r\n                    }\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    // withoutCombocomponent.map(date => {\r\n                    //     if (date.inputtype === 'date')\r\n                    //         selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                    //             rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\";\r\n                    // })\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    selectedRecord = { ...selectedRecord }\r\n\r\n                    if (inputParam.editSubSampleSchedulerParam[\"getSubSampleChildDetail\"] === true) {\r\n                        if (masterData[\"searchedTest\"]) {\r\n                            if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                                inputParam.searchTestRef.current.value = \"\"\r\n                                masterData['searchedTest'] = undefined\r\n                            }\r\n                        }\r\n                        masterData = { ...masterData, ...response[1].data[\"SubSampleChildDetail\"] };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadScheduleSubSample: true,\r\n                            screenName: \"IDS_SUBSAMPLE\",\r\n                            operation: \"update\",\r\n                            specBasedComponent,\r\n                            //  regRecordToEdit:recordToEdit\r\n                            masterData,\r\n                            loadPreregister:true,\r\n                            withoutCombocomponent\r\n                        }\r\n                    })\r\n                \r\n                    // }\r\n                })\r\n                \r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.info(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n            \r\n            \r\n            \r\n        }\r\n    }else{\r\n        toast.warn(intl.formatMessage({\r\n            id:\"IDS_DRAFTTOEDITSUBSAMPLE\"\r\n        }));\r\n    }\r\n    }\r\n}\r\nexport function updateSchedulerConfigSubSample(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSampleWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigSubSample\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            // rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                //if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n              //  }\r\n                // else{\r\n                //     masterData={...masterData,\"SchedulerConfigGetSubSample\":response.data[\"SchedulerConfigGetSubSample\"]} \r\n                // }\r\n                \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.selectedTest, \"nschedulertestcode\"),\r\n                    SchedulerConfigGetTest,\r\n                    \r\n                    \r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteSchedulerSubSample(Map, userInfo,masterData,ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigSubSample\", {...Map,\"userinfo\":userInfo})\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n                //replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n              \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                   \r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    //selectedTest: response.data[\"selectedTest\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    SchedulerConfigGetTest,\r\n                    SchedulerConfigGetSubSample,\r\n                    searchedSubSample:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,ncontrolcode,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreSchedulerConfigTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if (inputParam.selectedSample && inputParam.selectedSample.length > 0) {\r\n            if (inputParam.selectedSubSample && inputParam.selectedSubSample.length > 0) {\r\n                value = inputParam.selectedSubSample.some(obj => obj.nspecsampletypecode !== inputParam.selectedSubSample[0].nspecsampletypecode)\r\n                if (value) {\r\n                    return toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                }\r\n                //sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n                //const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedSample, \"npreregno\");\r\n                // const selectsubsample = getSameRecordFromTwoArrays(subsampleList, inputParam.selectedsubsample, \"ntransactionsamplecode\");\r\n                //if (selectedsample && selectedsample.length > 0) {\r\n\r\n                const selectedsample = inputParam.selectedSample;\r\n                const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n                if (findTransactionStatus.length === 1) {\r\n                    if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                        if (findTransactionStatus[0] !== transactionStatus.RELEASED) {\r\n\r\n                            // if (selectsubsample && selectsubsample.length > 0) {\r\n                            //     const findSubSampleStatus = [...new Set(selectsubsample.map(item => item.ntransactionstatus))];\r\n                            //\r\n                            //     if (findSubSampleStatus[0] !== transactionStatus.REJECT && findSubSampleStatus[0] !== transactionStatus.CANCELLED) \r\n                            //     {                    \r\n\r\n                            const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                            if (findApprovalVersion.length === 1) {\r\n                                const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                                //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                                if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                                {\r\n                                    inputParam[\"snspecsampletypecode\"] = inputParam.selectedSubSample &&\r\n                                        [...new Set(inputParam.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n                                    dispatch(initRequest(true));\r\n                                    const urlArray = []\r\n                                    const TestGet = rsapi.post(\"/schedulerconfiguration/getMoreTest\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[0] = TestGet;\r\n                                    const TestPackageGet = rsapi.post(\"/schedulerconfiguration/getMoreTestPackage\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[1] = TestPackageGet;\r\n\r\n                                    const TestSectionGet = rsapi.post(\"/schedulerconfiguration/getMoreTestSection\", {\r\n                                        ...inputParam\r\n                                    });\r\n                                    urlArray[2] = TestSectionGet;\r\n\r\n                                    Axios.all(urlArray)\r\n                                        .then(response => {\r\n                                            let PackageData = []\r\n                                            let TestSectionData = []\r\n                                            const PackageDataMap = constructOptionList(response[1].data || [], \"ntestpackagecode\",\r\n                                                \"stestpackagename\", undefined, undefined, true);\r\n                                            PackageData = PackageDataMap.get(\"OptionList\");\r\n                                            const TestSectionDataMap = constructOptionList(response[2].data || [], \"nsectioncode\",\r\n                                                \"ssectionname\", undefined, undefined, true);\r\n                                            TestSectionData = TestSectionDataMap.get(\"OptionList\");\r\n                                            dispatch({\r\n                                                type: DEFAULT_RETURN,\r\n                                                payload: {\r\n                                                    availableTest: response[0].data,\r\n                                                    TestCombined: response[0].data,\r\n                                                    AllTest: response[0].data,\r\n                                                    TestPackage: PackageData,\r\n                                                    loadChildTest: true,\r\n                                                    loading: false, ncontrolCode,\r\n                                                    screenName: \"IDS_TEST\",\r\n                                                    operation: \"create\",\r\n                                                    openModal: true,\r\n                                                    parentPopUpSize: \"lg\",\r\n                                                    selectedRecord: {},\r\n                                                    showSample: undefined,\r\n                                                    loadPrinter: false, TestSection: TestSectionData, AllSection: TestSectionData\r\n                                                }\r\n                                            });\r\n                                        })\r\n                                        .catch(error => {\r\n                                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                            if (error.response.status === 500) {\r\n                                                toast.error(error.message);\r\n                                            } else {\r\n                                                toast.info(this.props.formatMessage({ id: error.response.data }));\r\n                                            }\r\n                                        });\r\n                                } else {\r\n                                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                                }\r\n                            } else {\r\n                                toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                            }\r\n                            //     }\r\n                            //     else {\r\n                            //         toast.info(intl.formatMessage({ id: \"IDS_SUBSAMPLEISREJECTEDORCANCELLED\" }));\r\n                            //     }\r\n                            // }                               \r\n                        }\r\n                        else {\r\n                            toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORRELEASEDSAMPLES\" }));\r\n                        }\r\n                    }\r\n                    else {\r\n                        ////     toast.info(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                        toast.info(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                    }\r\n                } else {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n                }\r\n                // } else {\r\n                //     toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n                // }\r\n            } else {\r\n                toast.info(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.info(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const createSchedulerTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let SchedulerConfigGetTest = updatedObjectWithNewElement(masterData[\"SchedulerConfigGetTest\"], response.data[\"SchedulerConfigGetTest\"]);\r\n\r\n                //let RegistrationGetSub    Sample = updatedObjectWithNewElement(masterData[\"RegistrationGetSubSample\"], response.data[\"RegistrationGetSubSample\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    SchedulerConfigGetTest: sortData(SchedulerConfigGetTest, \"descending\", \"nschedulertestcode\"),\r\n                    SchedulerConfigurationParameter:response.data[\"SchedulerConfigurationParameter\"]&&response.data[\"SchedulerConfigurationParameter\"],\r\n                    selectedTest: response.data[\"SchedulerConfigGetTest\"],\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {},\r\n                    showConfirmAlert: false,\r\n                    createTestConfirmMessage: undefined\r\n\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no';\r\n                inputParam.postParamList[1]['clearFilter'] = 'no';\r\n                inputParam.postParamList[2]['clearFilter'] = 'yes';\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                if (error.response.status === 500) {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, createTestConfirmMessage: undefined } })\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    if (error.response.data.NeedConfirmAlert) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                showConfirmAlert: true,\r\n                                createTestConfirmMessage: error.response.data.rtn,\r\n                                createTestConfirmParam: { inputParam, masterData, modalName },\r\n\r\n                                //[modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: true,\r\n                                showSample: undefined\r\n\r\n\r\n                                //openModal: false,\r\n                                //selectedRecord: {}\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                [modalName]: false,\r\n                                loading: false,\r\n                                loadChildTest: false,\r\n                                showSample: undefined,\r\n                                openModal: false,\r\n                                selectedRecord: {},\r\n                                createTestConfirmMessage: undefined\r\n\r\n\r\n                            }\r\n                        });\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function deleteSchedulerConfigTest(Map, userInfo,masterData,ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfigTest\", {...Map,\"userinfo\":userInfo})\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n              \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                let SchedulerConfigurationParameter = response.data[\"SchedulerConfigurationParameter\"];\r\n\r\n                //let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    //selectedTest: response.data[\"selectedTest\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    SchedulerConfigGetTest,\r\n                    SchedulerConfigurationParameter,\r\n                    searchedTest:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,ncontrolcode,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditSchedulerConfigComboService(inputParam, columnList,\r\n    selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent, editableComboList) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n        let masterData = inputParam[\"masterData\"];\r\n        let parentColumnList = [...columnList, ...editableComboList];\r\n        if (masterData[\"selectedSample\"].length > 1 ||\r\n            masterData[\"selectedSample\"]\r\n                .findIndex(x => x[inputParam.primaryKeyName] === inputParam[\"mastertoedit\"][inputParam.primaryKeyName])\r\n            === -1) {\r\n            inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] = true;\r\n        }\r\n        masterData[\"selectedSample\"] = [];\r\n        masterData[\"selectedSample\"].push(inputParam[\"mastertoedit\"]);\r\n\r\n        const nschedulersamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n       \r\n        const selectedRegistration = rsapi.post(\"/schedulerconfiguration/getEditSchedulerConfigDetails\", {\r\n            ...inputParam.editSchedulerSampleParam, nschedulersamplecode, parentcolumnlist: parentColumnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo: userInfo, nallottedspeccode: inputParam.mastertoedit.nallottedspeccode || -1\r\n        })\r\n\r\n        \r\n\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo: userInfo\r\n        })\r\n        const siteService = rsapi.post(\"schedulerconfiguration/getSiteByUser\", {\r\n            userinfo: userInfo})\r\n         \r\n            const schedulerMasterService = rsapi.post(\"schedulerconfiguration/getSchedulerMaster\", {\r\n                userinfo: userInfo})\r\n\r\n        urlArray = [timeZoneService, selectedRegistration, dateService,siteService,schedulerMasterService]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[1].data[\"EditData\"] };\r\n                selectedRecord = { ...selectedRecord, ...selectedRecord['jsondata'] }\r\n              \r\n                let siteMap=[];\r\n                let siteList=[];\r\n                let schedulerList=[];\r\n                if(response[3].data.userSite!==undefined){\r\n                    siteMap = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\r\n                    siteList = siteMap.get(\"OptionList\");\r\n                }\r\n                if(response[4].data.ScheduleMaster!==undefined){\r\n                    schedulerList = constructOptionList(response[4].data.ScheduleMaster || [], \"nschedulecode\", \"sschedulename\", undefined, undefined, true).get(\"OptionList\");\r\n                  \r\n                }\r\n                 \r\n\r\n                    // if(selectedRecord['Site']!==undefined){\r\n                    //     selectedRecord['nsitecode'] = constructOptionList(response[3].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true).get(\"OptionList\");\r\n                    // // siteList = siteMap.get(\"OptionList\");\r\n                    // }\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n\r\n\r\n                \r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    // ALPD-3393\r\n                    if (inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] === true) {\r\n                        masterData = sortData({ ...masterData, ...response[1].data[\"SampleChildDetail\"] })\r\n                    }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterData } });\r\n                }\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    delete comboData['EditData']\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoadForEdit(x, comboData, selectedRecord,\r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n                    if (editableComboList.length > 0) {\r\n                        editableComboList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                    withoutCombocomponent.map(date => {\r\n                        if (date.inputtype === 'date') {\r\n                            selectedRecord[date.label] = selectedRecord[date.label] && selectedRecord[date.label] !== '-' ?\r\n                                rearrangeDateFormat(userInfo, selectedRecord[date.label]) : \"\"\r\n\r\n                            if (date.nperiodcode) {\r\n                                selectedRecord[date.label + \"value\"] = response[2].data[date.label] ?\r\n                                    new Date(response[2].data[date.label][\"datevalue\"]) : null;\r\n                            } else {\r\n                                selectedRecord[date.label + \"value\"] = new Date();\r\n                            }\r\n\r\n                            if (date.hidebeforedate) {\r\n                                selectedRecord[date.label + \"min\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                            if (date.hideafterdate) {\r\n                                selectedRecord[date.label + \"max\"] = selectedRecord[date.label + \"value\"]\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes, specValue } = [];\r\n                    specValue = [{ nallottedspeccode: selectedRecord.nallottedspeccode, sspecname: selectedRecord.sspecname, sversion: selectedRecord.sversion }];\r\n                    const selectedSpec = {}\r\n                    Specification = constructOptionList(specValue || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    \r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ?\r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                    selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n\r\n                    if (inputParam.editSchedulerSampleParam[\"getSampleChildDetail\"] === true) {\r\n                        masterData = sortData({ ...masterData, ...response[1].data[\"SampleChildDetail\"] })\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                           \r\n                            selectedSpec,\r\n                            Specification,\r\n                            operation: \"update\",\r\n                            screenName: inputParam.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editSchedulerSampleParam.ncontrolCode,\r\n                            loadPreregister:true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData,\r\n                            childColumnList, comboComponents,\r\n                            withoutCombocomponent,\r\n                            columnList,\r\n                            masterData,\r\n                            siteList,\r\n                            schedulerList\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.info(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function updateSchedulerConfig(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfigWithFile\", inputParam.formData)\r\n        } else {\r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateSchedulerConfig\", inputParam.inputData)\r\n        }\r\n        return requestUrl\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n                    //  let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                    //let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedSample: response.data[\"selectedSample\"],\r\n                        \r\n                        SchedulerConfigurationParameter: masterData[\"SchedulerConfigurationParameter\"]\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                            regDateEditConfirmMessage: undefined, loadEsign: false, openModal: false,\r\n                            loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                        }\r\n                    });\r\n                  \r\n                } else {\r\n                    toast.info(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignforSchedulerConfig(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"schedulerconfiguration\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n\r\n                case \"editSchedulerConfig\":\r\n                    dispatch(updateSchedulerConfig(screenData.inputParam, screenData.masterData));\r\n                    break;\r\n\r\n                    case \"editSubSample\":\r\n                    dispatch(updateSchedulerConfigSubSample(screenData.inputParam, screenData.masterData));\r\n                    break;\r\n\r\n                    case \"deleteSubSample\":\r\n                    dispatch(deleteSchedulerSubSample(screenData.inputParam.Map, screenData.inputParam.inputData.userinfo,screenData.masterData,screenData.inputParam.ncontrolCode));\r\n                    break;\r\n\r\n                    case \"deleteSchedulerTest\":\r\n                    dispatch(deleteSchedulerConfigTest(screenData.inputParam.Map, screenData.inputParam.inputData.userinfo,screenData.masterData,screenData.inputParam.ncontrolCode));\r\n                     break;   \r\n\r\n                     case \"deleteSample\":\r\n                    dispatch(deleteSchedulerConfig(screenData.inputParam.Map, screenData.masterData));\r\n                     break;  \r\n\r\n                     case \"approveSample\":\r\n                        dispatch(approveSchedulerConfig(screenData.inputParam, screenData.masterData));\r\n                         break; \r\n\r\n                         case \"activeInactive\":\r\n                            dispatch(updateActiveStatusSchedulerConfig(screenData.inputParam));\r\n                             break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function approveSchedulerConfig(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n      \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/approveSchedulerConfig\", {...inputParam.approveSchedulerSampleParam,nschedulersamplecode:inputParam.nschedulersamplecode,\r\n                sinstrumentid:inputParam.masterData.selectedSample[0][inputParam.approveSchedulerSampleParam.sinstrumentidLabel],\r\n                ninstrumentcode:inputParam.masterData.selectedSample[0]['ninstrumentcode'],\r\n\t\t\t\t//ALPD-5453-->Added by Vignesh R(19-02-2025)--Scheduler Configuration\r\n                //ALPD-5453-start\r\n\t\t\t\tninstrumentcatcode:inputParam.masterData.selectedSample[0]['ninstrumentcatcode'],\r\n                //ALPD-5453--end\r\n                nschedulecode:inputParam.mastertoapprove.nschedulecode,\r\n                // ALPD-5332 Added by Abdul for MAterial Scheduler\r\n                nmaterialcode:inputParam.masterData.selectedSample[0]['nmaterialcode'],\r\n                nsitecode:(inputParam.mastertoapprove && inputParam.mastertoapprove.ninstrumentsitecode && inputParam.mastertoapprove.ninstrumentsitecode!==-1) ?inputParam.mastertoapprove.ninstrumentsitecode :-1 ,\r\n// ALPD-5332 End           \r\n}\r\n            \r\n            )\r\n       \r\n        return requestUrl\r\n           \r\n            .then(response => {\r\n                sortData(response.data);\r\n                //if(inputParam.inputData.masterData.SchedulerConfigGetSubSample!==undefined){\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], inputParam.masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], inputParam.masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\")\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], inputParam.masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n                // let SchedulerConfigGetSample=response.data[\"SchedulerConfigGetSample\"]&&response.data[\"SchedulerConfigGetSample\"];\r\n                // let SchedulerConfigGetSubSample=response.data[\"SchedulerConfigGetSubSample\"]&&response.data[\"SchedulerConfigGetSubSample\"];\r\n                // let SchedulerConfigGetTest=response.data[\"SchedulerConfigGetTest\"]&&response.data[\"SchedulerConfigGetTest\"];\r\n                 if(response.data[\"SchedulerConfigGetSampleBefore\"]!==undefined){\r\n                    replaceUpdatedObject(response.data[\"SchedulerConfigGetSampleBefore\"], inputParam.masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n\r\n                 }\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    // SchedulerConfigGetSample,\r\n                    // SchedulerConfigGetSubSample,\r\n                    // SchedulerConfigGetTest,\r\n                    selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], inputParam.masterData.selectedSample, \"nschedulersamplecode\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], inputParam.masterData.selectedSubSample, \"nschedulersubsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], inputParam.masterData.selectedTest, \"nschedulertestcode\"),\r\n                    \r\n                    \r\n                    \r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}\r\n                    }\r\n                });\r\n                \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign: false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteSchedulerConfig(inputParam,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/deleteSchedulerConfig\", {...inputParam.deleteSchedulerSampleParam,\r\n                nschedulersamplecode:inputParam.nschedulersamplecode\r\n                })\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n              \r\n                let SchedulerConfigGetTest = response.data[\"SchedulerConfigGetTest\"];\r\n                let SchedulerConfigGetSubSample = response.data[\"SchedulerConfigGetSubSample\"];\r\n                let SchedulerConfigGetSample = response.data[\"SchedulerConfigGetSample\"];\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    SchedulerConfigGetTest,\r\n                    SchedulerConfigGetSubSample,\r\n                    SchedulerConfigGetSample,\r\n                    searchedSubSample:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                         selectedRecord: {}, showSample: undefined\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function updateActiveStatusSchedulerConfig(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n       \r\n            requestUrl = rsapi.post(\"/schedulerconfiguration/updateActiveStatusSchedulerConfig\", {...inputParam.activeInactiveSchedulerSampleParam,\r\n                nschedulersamplecode:inputParam.nschedulersamplecode,nactivestatus:inputParam.selectedSample[0].nactivestatus\r\n            })\r\n        \r\n        return requestUrl\r\n            .then(response => {\r\n                sortData(response.data);\r\n              let masterData={...inputParam.masterData};\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSample\"], masterData.SchedulerConfigGetSample, \"nschedulersamplecode\");\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetSubSample\"], masterData.SchedulerConfigGetSubSample, \"nschedulersubsamplecode\")\r\n                replaceUpdatedObject(response.data[\"SchedulerConfigGetTest\"], masterData.SchedulerConfigGetTest, \"nschedulertestcode\");\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    searchedSubSample:undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: intl.formatMessage({ id: \"IDS_SUBSAMPLE\" }),\r\n                    }\r\n                });\r\n               \r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n              \r\n                else {\r\n                    toast.info(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSchedulerMasteDetails(Map, selectedFilter, masterData, searchRef) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/schedulerconfiguration/getSchedulerMasteDetails\", Map)\r\n            .then(response => {\r\n                const SchedulerMasterDeatils = response.data[\"ScheduleMasterDetails\"] && response.data[\"ScheduleMasterDetails\"];\r\n                sortData(response.data)\r\n                // MAHProductManufacturer.length > 0 ?\r\n                //     selectedFilter[\"nproductmanufcode\"] = {\r\n                //         \"value\": MAHProductManufacturer[0].nproductmanufcode,\r\n                //         \"label\": MAHProductManufacturer[0].smanufname\r\n                //     } : selectedFilter[\"nproductmanufcode\"] = \"\";\r\n                selectedFilter[\"sschedulename\"] = SchedulerMasterDeatils && \r\n                SchedulerMasterDeatils[0].sschedulename ||\"\"\r\n\r\n                let startdate=SchedulerMasterDeatils[0].sstartdate !== undefined ?\r\n                SchedulerMasterDeatils[0].sstartdate.substring(0, 10):\"\";\r\n\r\n                let starttime=SchedulerMasterDeatils[0] &&\r\n                SchedulerMasterDeatils[0].sstarttime !== undefined ?\r\n                SchedulerMasterDeatils[0].sstarttime.substring(16, 11):\"\";\r\n           \r\n                let enddate=SchedulerMasterDeatils[0] !== undefined ?\r\n                SchedulerMasterDeatils[0].senddate.substring(0, 10) : \"\";\r\n\r\n                 let endtime=SchedulerMasterDeatils[0] &&\r\n                 SchedulerMasterDeatils[0].sendtime !== undefined ?\r\n                 SchedulerMasterDeatils[0].sendtime.substring(16, 11) : \"\"\r\n                 \r\n                let startdatetime= startdate+\" \"+starttime;\r\n                let enddatetime=enddate+\" \"+endtime;\r\n               \r\n                // SchedulerMasterDeatils = {\r\n                //     ...SchedulerMasterDeatils,\r\n                //     \"0\": {  \r\n                //         ...SchedulerMasterDeatils[\"0\"],\r\n                //       \"startdatetime\": startdatetime,\r\n                //       \"enddatetime\": enddatetime\r\n                //     }\r\n                //   };\r\n                  \r\n                  \r\n                  /*  let idslabel;\r\n                    let fieldToShow;\r\n\r\n                    if (SchedulerMasterDeatils.sscheduletype === \"O\") {\r\n                        idslabel=\"IDS_ONETIME\";\r\n                      } else if (SchedulerMasterDeatils.sscheduletype === \"D\") {\r\n                        idslabel=\"IDS_DAILY\";\r\n                      } else if (SchedulerMasterDeatils.sscheduletype === \"W\") {\r\n                        idslabel=\"IDS_WEEKLY\";\r\n                      } else {\r\n                        idslabel=\"IDS_MONTHLY\";\r\n                      }\r\n\r\n               /*     SchedulerMasterDeatils = {\r\n                        ...SchedulerMasterDeatils,\r\n                        sscheduletype: SchedulerMasterDeatils.sscheduletype === \"O\" ? intl.formatMessage({ id: \"IDS_ONETIME\" }) :\r\n                                       SchedulerMasterDeatils.sscheduletype === \"D\" ? intl.formatMessage({ id: \"IDS_DAILY\" }) :\r\n                                       SchedulerMasterDeatils.sscheduletype === \"W\" ? intl.formatMessage({ id: \"IDS_WEEKLY\" }) :\r\n                                       intl.formatMessage({ id: \"IDS_MONTHLY\" })  // Default case\r\n                      };\r\n\r\n                    //idslabel=idslabel.push(\"IDS_STARTDATEANDTIME\");\r\n                    fieldToShow=\"stempscheduleType\";\r\n*/\r\n\r\n\r\n                // selectedFilter[\"nproductmanufcode\"] = MAHProductManufacturer && MAHProductManufacturer.length > 0 ?\r\n                //     MAHProductManufacturer[0].nproductmanufcode : -1\r\n\r\n                    let selectedRecord={};\r\n                    selectedRecord=selectedFilter;\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                   ...response.data\r\n                    \r\n                   \r\n                };\r\n                if(searchRef!== undefined &&searchRef.current !== null){\r\n                    searchRef.current.value='';\r\n                    masterData['searchedData']=undefined;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                       // selectedFilter,\r\n                        selectedRecord,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}