{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\approvalstatusconfig\\\\ApprovalStatusConfig.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { process } from '@progress/kendo-data-query';\nimport { callService, crudMaster, getApprovalSubType, closeFilterService, changeFilterSubmit, getComboService, getTransactionForms, updateStore, getRegTypeBySampleType, getFilterSubmit, getRegSubTypeByRegtype, validateEsignCredential, filterColumnData } from '../../actions';\nimport { Col, Row } from 'react-bootstrap';\nimport { SampleType } from '../../components/Enumeration';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { Affix } from \"rsuite\";\nimport { toast } from 'react-toastify';\nimport { injectIntl } from 'react-intl';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport ApprovalStatusConfigFilter from '../../pages/approvalstatusconfig/ApprovalStatusConfigFilter';\nimport BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\nimport AddApprovalStatusConfig from './AddApprovalStatusConfig';\n\nclass ApprovalStatusConfig extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeFilter = () => {\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\n        napprovalsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.item.napprovalsubtypecode : -1 : -1,\n        nregsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\n        nregtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\n        nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\n        defaultSample: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType : \"\",\n        defaultRegType: this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType : \"\",\n        defaultRegSubType: this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType : \"\",\n        defaultApprovalSubType: this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType : \"\",\n        defaultForms: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms : \"\"\n      };\n      const masterData = { ...this.props.Login.masterData\n      };\n      const inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.closeFilterService(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.switchGroupBy = event => {\n      const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      let dataState = this.state.dataState || {};\n      let dataResult = this.state.dataResult || {};\n\n      if (selectedSwitch === transactionStatus.YES) {\n        dataState = {\n          skip: 0,\n          take: this.state.dataState.take,\n          group: [{\n            field: 'sapprovalstatusfunctions'\n          }]\n        };\n        dataResult = process(this.props.Login.masterData.approvalstatsusconfig || [], dataState);\n      } else {\n        dataState = {\n          skip: 0,\n          take: this.state.dataState.take\n        };\n        dataResult = process(this.props.Login.masterData.approvalstatsusconfig || [], dataState);\n      }\n\n      this.setState({\n        selectedSwitch,\n        dataState,\n        dataResult\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      let inputData = [];\n\n      if (fieldName === \"nsampletypecode\") {\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: parseInt(comboData.value),\n          defaultSample: comboData\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getRegTypeBySampleType(inputParam);\n      } else if (fieldName === \"nformcode\") {\n        const masterData = { ...this.props.Login.masterData,\n          defaultForms: comboData\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (fieldName == \"napprovalsubtypecode\") {\n        const masterData = { ...this.props.Login.masterData,\n          defaultApprovalSubType: comboData\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (fieldName == \"nregtypecode\") {\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: parseInt(comboData.value),\n          nsampletypecode: this.props.Login.masterData.defaultSample.value,\n          defaultRegType: comboData\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getRegSubTypeByRegtype(inputParam);\n      } else if (fieldName == \"nregsubtypecode\") {\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.props.Login.masterData.defaultRegType.value,\n          defaultRegSubType: comboData,\n          nregsubtypecode: comboData.value\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getTransactionForms(inputParam);\n      } else if (fieldName === \"ntranscode\") {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[\"ntranscode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"nstatusfunctioncode\") {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[\"nstatusfunctioncode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = [];\n      inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultSample.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultRegType ? this.props.Login.masterData.defaultRegType.value : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultSample.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultRegSubType ? this.props.Login.masterData.defaultRegSubType.value : -1),\n        nsampletypecode: this.props.Login.masterData.defaultSample.value,\n        nformcode: this.props.Login.masterData.defaultForms ? this.props.Login.masterData.defaultForms.value : -1,\n        napprovalsubtypecode: this.props.Login.masterData.defaultApprovalSubType ? this.props.Login.masterData.defaultApprovalSubType.item.napprovalsubtypecode : -1\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleType: this.props.Login.masterData.defaultSample,\n        realdefaultForms: this.props.Login.masterData.defaultForms,\n        realRegType: this.props.Login.masterData.defaultRegType,\n        realRegSubType: this.props.Login.masterData.defaultRegSubType,\n        realApprovalSubType: this.props.Login.masterData.defaultApprovalSubType\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getFilterSubmit(inputParam);\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"nsampletypecode\": this.props.Login.masterData.defaultSample.value,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"approvalstatusconfig\"] = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      let selectedTrans = [];\n      this.state.selectedRecord.ntranscode && this.state.selectedRecord.ntranscode.map(data => {\n        selectedTrans.push({\n          nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\n          nstatusfunctioncode: this.state.selectedRecord[\"nstatusfunctioncode\"] ? this.state.selectedRecord[\"nstatusfunctioncode\"].value : -1,\n          napprovalsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.item.napprovalsubtypecode : -1 : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\n          nregtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\n          nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\n          ntranscode: data.item.ntranscode\n        });\n      });\n      inputData[\"approvalstatusconfig\"] = selectedTrans;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_APPROVALSTATUSCONFIG\"\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\n        napprovalsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.item.napprovalsubtypecode : -1 : -1,\n        nregsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\n        nregtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\n        nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\n        defaultSample: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType : \"\",\n        defaultRegType: this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType : \"\",\n        defaultRegSubType: this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType : \"\",\n        defaultApprovalSubType: this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType : \"\",\n        defaultForms: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms : \"\"\n      }; // console.log(\"close inputdata\");\n      // inputData[\"breadcrumdata\"] = breadcrumdata;\n\n      const masterData = { ...this.props.Login.masterData\n      };\n      const inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.closeFilterService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      group: [],\n      selectedSwitch: false\n    };\n    this.detailedFieldList = [{\n      \"idsName\": \"IDS_STATUSFUNCTION\",\n      \"dataField\": \"sapprovalstatusfunctions\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    } //   { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\n    ];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_STATUSFUNCTION\",\n      \"dataField\": \"sapprovalstatusfunctions\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // expandChange = event => {\n  //     const item = event.dataItem;\n  //     const isExpanded =\n  //         event.dataItem.expanded === undefined\n  //             ? event.dataItem.aggregates\n  //             : event.dataItem.expanded;\n  //     event.dataItem.expanded = !isExpanded;\n  //     this.setState({ ...this.state });\n  //     //this.setState({ ...this.state.dataState });\n  // };\n\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: this.props.Login.displayName,\n      primaryeyField: \"nstatusconfigcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId,\n      nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\n      nregtypecode: this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\n      nregsubtypecode: this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\n      nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\n      napprovalsubtypecode: this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.value : -1\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    let breadCrumbData = [];\n    this.props.Login.masterData.realSampleType && this.props.Login.masterData.realSampleType.value == 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.label : \"-\"\n    }, {\n      \"label\": \"IDS_FORMNAME\",\n      \"value\": this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.label : \"-\"\n    }, {\n      \"label\": \"IDS_FORMNAME\",\n      \"value\": this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.label : \"-\"\n    }];\n    this.props.Login.masterData && this.props.Login.masterData.realdefaultForms && this.props.Login.masterData.realdefaultForms.value === 55 && breadCrumbData.push({\n      \"label\": \"IDS_APPROVALSUBTYPE\",\n      \"value\": this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.label : \"-\"\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponentToolbar, {\n      showSearch: false,\n      showSwitch: true,\n      closeFilter: this.closeFilter,\n      callCloseFunction: true,\n      breadCrumbItem: breadCrumbData,\n      filterComponent: [{\n        \"IDS_APPROVALSTATUSCONFIG\": /*#__PURE__*/React.createElement(ApprovalStatusConfigFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          defaultForms: this.props.Login.masterData[\"defaultForms\"] || [],\n          defaultSample: this.props.Login.masterData[\"defaultSample\"] || [],\n          defaultRegType: this.props.Login.masterData[\"defaultRegType\"] || [],\n          defaultRegSubType: this.props.Login.masterData[\"defaultRegSubType\"] || [],\n          defaultApprovalSubType: this.props.Login.masterData[\"defaultApprovalSubType\"] || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypes: this.state.SampleTypes || [],\n          approvalSubType: this.state.approvalSubType || [],\n          qualisForms: this.state.qualisForms || [],\n          registrationTypes: this.state.registrationTypes || [],\n          regSubTypeList: this.state.regSubTypeList || [],\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 65\n          }\n        })\n      }],\n      onFilterSubmit: this.onFilterSubmit,\n      switchGroupBy: this.switchGroupBy,\n      selectedSwitch: this.state.selectedSwitch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nstatusconfigcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      deleteParam: deleteParam,\n      deleteRecord: this.deleteRecord,\n      scrollable: 'scrollable',\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      isActionRequired: true,\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getComboService(addParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 33\n      }\n    }) : \"\")))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_STATUSFUNCTION\",\n        \"dataField\": \"nstatusfunctioncode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n        \"dataField\": \"ntranscode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddApprovalStatusConfig, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        statusFunctionList: this.props.Login.statusFunctionList || [],\n        transactionsList: this.props.Login.transactionsList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.approvalstatsusconfig,\n          dataResult: process(this.props.Login.masterData.approvalstatsusconfig, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          if (this.state.selectedSwitch === transactionStatus.YES) {\n            dataState = {\n              skip: 0,\n              take: this.state.dataState.take,\n              group: [{\n                field: 'sapprovalstatusfunctions'\n              }]\n            };\n          } else {\n            dataState = {\n              skip: 0,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        if (this.state.selectedSwitch === transactionStatus.YES) {\n          if (this.state.dataResult.data) {\n            if (this.state.dataResult.data.length === 1) {\n              if (this.state.dataResult.data[0].items.length === 1) {\n                let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n                dataState = {\n                  skip: skipcount,\n                  take: this.state.dataState.take,\n                  group: [{\n                    field: 'sapprovalstatusfunctions'\n                  }]\n                };\n              }\n            }\n          }\n        } else {\n          if (this.state.dataResult.data) {\n            if (this.state.dataResult.data.length === 1) {\n              let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n              dataState = {\n                skip: skipcount,\n                take: this.state.dataState.take\n              };\n            }\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData.approvalstatsusconfig || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.approvalstatsusconfig || [], dataState),\n          dataState\n        });\n      }\n\n      let SampleTypes = this.state.SampleTypes || [];\n      let qualisForms = this.state.qualisForms || [];\n      let approvalSubType = this.state.approvalSubType || {};\n      let registrationTypes = this.state.registrationTypes || {};\n      let regSubTypeList = this.state.regSubTypeList || {};\n\n      if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\n        SampleTypes = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, false).get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisForms !== previousProps.Login.masterData.qualisForms) {\n        qualisForms = constructOptionList(this.props.Login.masterData.qualisForms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, false).get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.approvalSubType !== previousProps.Login.masterData.approvalSubType) {\n        approvalSubType = constructOptionList(this.props.Login.masterData.approvalSubType || [], \"napprovalsubtypecode\", \"ssubtypename\", undefined, undefined, false).get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes !== previousProps.Login.masterData.registrationTypes) {\n        registrationTypes = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, false).get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.regSubTypeList !== previousProps.Login.masterData.regSubTypeList) {\n        regSubTypeList = constructOptionList(this.props.Login.masterData.regSubTypeList || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, false).get(\"OptionList\");\n      }\n\n      this.setState({\n        SampleTypes,\n        qualisForms,\n        approvalSubType,\n        registrationTypes,\n        regSubTypeList\n      });\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  closeFilterService,\n  getComboService,\n  getTransactionForms,\n  getFilterSubmit,\n  getRegSubTypeByRegtype,\n  getRegSubTypeByRegtype,\n  filterColumnData,\n  getApprovalSubType,\n  getRegTypeBySampleType,\n  changeFilterSubmit\n})(injectIntl(ApprovalStatusConfig));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/approvalstatusconfig/ApprovalStatusConfig.jsx"],"names":["React","Component","connect","process","callService","crudMaster","getApprovalSubType","closeFilterService","changeFilterSubmit","getComboService","getTransactionForms","updateStore","getRegTypeBySampleType","getFilterSubmit","getRegSubTypeByRegtype","validateEsignCredential","filterColumnData","Col","Row","SampleType","SlideOutModal","CustomSwitch","Affix","toast","injectIntl","getControlMap","showEsign","constructOptionList","DEFAULT_RETURN","Esign","transactionStatus","ListWrapper","DataGrid","ApprovalStatusConfigFilter","BreadcrumbComponentToolbar","AddApprovalStatusConfig","ApprovalStatusConfig","constructor","props","dataStateChange","event","setState","dataResult","state","data","dataState","closeFilter","inputData","userinfo","Login","userInfo","nformcode","masterData","realdefaultForms","value","napprovalsubtypecode","realSampleType","Masters","realApprovalSubType","item","nregsubtypecode","realRegSubType","nregtypecode","realRegType","nsampletypecode","defaultSample","defaultRegType","defaultRegSubType","defaultApprovalSubType","defaultForms","inputParam","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","switchGroupBy","selectedSwitch","target","checked","YES","NO","skip","take","group","field","approvalstatsusconfig","onComboChange","comboData","fieldName","parseInt","onFilterSubmit","NA","deleteRecord","deleteParam","classUrl","methodUrl","displayName","toLowerCase","userRoleControlRights","ncontrolCode","screenData","screenName","intl","formatMessage","id","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onSaveClick","saveType","formRef","undefined","selectedTrans","ntranscode","map","push","nstatusfunctioncode","esignNeeded","onInputOnChange","type","name","reloadData","createRef","settings","masterStatus","error","controlMap","Map","detailedFieldList","extractedColumnList","getDerivedStateFromProps","warn","render","addId","has","concat","get","ncontrolcode","addParam","primaryeyField","primaryKeyValue","breadCrumbData","SampleTypes","approvalSubType","qualisForms","registrationTypes","regSubTypeList","statusFunctionList","transactionsList","componentDidUpdate","previousProps","Object","values","length","items","skipcount","mapStateToProps"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport {\r\n    callService, crudMaster, getApprovalSubType, closeFilterService, changeFilterSubmit, getComboService, getTransactionForms, updateStore, getRegTypeBySampleType, getFilterSubmit, getRegSubTypeByRegtype, validateEsignCredential, filterColumnData\r\n} from '../../actions'\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport {\r\n    SampleType\r\n\r\n} from '../../components/Enumeration';\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nimport { Affix } from \"rsuite\";\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl } from 'react-intl';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport ApprovalStatusConfigFilter from '../../pages/approvalstatusconfig/ApprovalStatusConfigFilter';\r\nimport BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\r\nimport AddApprovalStatusConfig from './AddApprovalStatusConfig';\r\nclass ApprovalStatusConfig extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.formRef = React.createRef();\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            group: [],\r\n            selectedSwitch:false\r\n        };\r\n\r\n        this.detailedFieldList = [\r\n            { \"idsName\": \"IDS_STATUSFUNCTION\", \"dataField\": \"sapprovalstatusfunctions\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            //   { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_STATUSFUNCTION\", \"dataField\": \"sapprovalstatusfunctions\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ]\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n  \r\n    // switchGroupBy = (event)=>{\r\n\r\n    //     const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    //     let dataState = this.state.dataState || {};\r\n    //      if (selectedSwitch === transactionStatus.YES){\r\n    //         dataState= {...dataState, group: [{ field: 'sapprovalstatusfunctions' }]} ;\r\n    //      }\r\n    //     else{\r\n    //         dataState= {skip: dataState.skip,  take: dataState.take} \r\n    //     }\r\n    //     this.setState({selectedSwitch, dataState});\r\n    // }\r\n\r\n    closeFilter = () => {\r\n    \r\n\r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\r\n            napprovalsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? (this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.item.napprovalsubtypecode : -1) : -1,\r\n            nregsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\r\n            nregtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\r\n            nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\r\n            defaultSample: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType : \"\",\r\n            defaultRegType: this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType : \"\",\r\n            defaultRegSubType: this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType : \"\",\r\n            defaultApprovalSubType: this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType : \"\",\r\n            defaultForms: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms : \"\"\r\n        }\r\n     \r\n        const masterData = { ...this.props.Login.masterData }\r\n        const inputParam = { masterData, inputData }\r\n        this.props.closeFilterService(inputParam);\r\n\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    // expandChange = event => {\r\n    //     const item = event.dataItem;\r\n    //     const isExpanded =\r\n    //         event.dataItem.expanded === undefined\r\n    //             ? event.dataItem.aggregates\r\n    //             : event.dataItem.expanded;\r\n    //     event.dataItem.expanded = !isExpanded;\r\n    //     this.setState({ ...this.state });\r\n    //     //this.setState({ ...this.state.dataState });\r\n    // };\r\n\r\n    switchGroupBy = (event) => {\r\n\r\n        const selectedSwitch = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        let dataState = this.state.dataState || {};\r\n        let dataResult = this.state.dataResult || {};\r\n        if (selectedSwitch === transactionStatus.YES) {\r\n            dataState = { skip: 0, take: this.state.dataState.take, group: [{ field: 'sapprovalstatusfunctions' }] };\r\n            dataResult = process(this.props.Login.masterData.approvalstatsusconfig || [], dataState)\r\n        }\r\n        else {\r\n            dataState = { skip: 0, take: this.state.dataState.take }\r\n            dataResult = process(this.props.Login.masterData.approvalstatsusconfig || [], dataState)\r\n        }\r\n        this.setState({ selectedSwitch, dataState, dataResult });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        let inputData = [];\r\n        if (fieldName === \"nsampletypecode\") {\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: parseInt(comboData.value),\r\n                defaultSample: comboData\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getRegTypeBySampleType(inputParam);\r\n\r\n        }\r\n        else if (fieldName === \"nformcode\") {\r\n\r\n            const masterData = { ...this.props.Login.masterData, defaultForms: comboData }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else if (fieldName == \"napprovalsubtypecode\") {\r\n            const masterData = { ...this.props.Login.masterData, defaultApprovalSubType: comboData }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n        else if (fieldName == \"nregtypecode\") {\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: parseInt(comboData.value),\r\n                nsampletypecode: this.props.Login.masterData.defaultSample.value,\r\n                defaultRegType: comboData\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getRegSubTypeByRegtype(inputParam)\r\n        }\r\n\r\n        else if (fieldName == \"nregsubtypecode\") {\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.props.Login.masterData.defaultRegType.value,\r\n                defaultRegSubType: comboData,\r\n                nregsubtypecode: comboData.value\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getTransactionForms(inputParam);\r\n\r\n        }\r\n        else if (fieldName === \"ntranscode\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[\"ntranscode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === \"nstatusfunctioncode\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[\"nstatusfunctioncode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onFilterSubmit = () => {\r\n        let inputData = [];\r\n        inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.defaultSample.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultRegType ? this.props.Login.masterData.defaultRegType.value : -1),\r\n            nregsubtypecode: this.props.Login.masterData.defaultSample.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultRegSubType ? this.props.Login.masterData.defaultRegSubType.value : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultSample.value,\r\n            nformcode: this.props.Login.masterData.defaultForms ? this.props.Login.masterData.defaultForms.value : -1,\r\n            napprovalsubtypecode: this.props.Login.masterData.defaultApprovalSubType ? this.props.Login.masterData.defaultApprovalSubType.item.napprovalsubtypecode : -1\r\n        }\r\n\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleType: this.props.Login.masterData.defaultSample,\r\n            realdefaultForms: this.props.Login.masterData.defaultForms,\r\n            realRegType: this.props.Login.masterData.defaultRegType,\r\n            realRegSubType: this.props.Login.masterData.defaultRegSubType,\r\n            realApprovalSubType: this.props.Login.masterData.defaultApprovalSubType\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getFilterSubmit(inputParam);\r\n\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"nsampletypecode\": this.props.Login.masterData.defaultSample.value,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"approvalstatusconfig\"] = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        let selectedTrans = [];\r\n\r\n        this.state.selectedRecord.ntranscode && this.state.selectedRecord.ntranscode.map(data => {\r\n            selectedTrans.push({\r\n                nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\r\n                nstatusfunctioncode: this.state.selectedRecord[\"nstatusfunctioncode\"] ? this.state.selectedRecord[\"nstatusfunctioncode\"].value : -1,\r\n                napprovalsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? (this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.item.napprovalsubtypecode : -1) : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\r\n                nregtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\r\n                nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\r\n                ntranscode: data.item.ntranscode\r\n            })\r\n\r\n        })\r\n        inputData[\"approvalstatusconfig\"] = selectedTrans;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_APPROVALSTATUSCONFIG\" }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: this.props.Login.displayName, primaryeyField: \"nstatusconfigcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId,\r\n            nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\r\n            nregtypecode: this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\r\n            nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\r\n            napprovalsubtypecode: this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.value : -1\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData.realSampleType && this.props.Login.masterData.realSampleType.value == 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.label : \"-\"\r\n                },\r\n\r\n                {\r\n                    \"label\": \"IDS_FORMNAME\",\r\n                    \"value\": this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.label : \"-\"\r\n                }\r\n\r\n            ]\r\n            :\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.label : \"-\"\r\n                },\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.label : \"-\"\r\n                },\r\n\r\n                {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.label : \"-\"\r\n                },\r\n                {\r\n                    \"label\": \"IDS_FORMNAME\",\r\n                    \"value\": this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.label : \"-\"\r\n                }\r\n            ]\r\n\r\n        this.props.Login.masterData && this.props.Login.masterData.realdefaultForms && this.props.Login.masterData.realdefaultForms.value === 55 &&\r\n            breadCrumbData.push(\r\n                {\r\n\r\n                    \"label\": \"IDS_APPROVALSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.label : \"-\"\r\n                }\r\n\r\n            )\r\n        return (\r\n            <>\r\n\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    <Affix top={53}>\r\n                        <BreadcrumbComponentToolbar\r\n                            showSearch={false}\r\n                            showSwitch={true}\r\n                            closeFilter={this.closeFilter}\r\n                            callCloseFunction={true}\r\n                            breadCrumbItem={breadCrumbData}\r\n                            filterComponent={[\r\n                                {\r\n                                    \"IDS_APPROVALSTATUSCONFIG\": <ApprovalStatusConfigFilter\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        defaultForms={this.props.Login.masterData[\"defaultForms\"] || []}\r\n                                        defaultSample={this.props.Login.masterData[\"defaultSample\"] || []}\r\n                                        defaultRegType={this.props.Login.masterData[\"defaultRegType\"] || []}\r\n                                        defaultRegSubType={this.props.Login.masterData[\"defaultRegSubType\"] || []}\r\n                                        defaultApprovalSubType={this.props.Login.masterData[\"defaultApprovalSubType\"] || []}\r\n                                        userInfo={this.props.Login.userInfo || {}}\r\n                                        SampleTypes={this.state.SampleTypes || []}\r\n                                        approvalSubType={this.state.approvalSubType || []}\r\n                                        qualisForms={this.state.qualisForms || []}\r\n                                        registrationTypes={this.state.registrationTypes || []}\r\n                                        regSubTypeList={this.state.regSubTypeList || []}\r\n                                        onComboChange={this.onComboChange}\r\n                                    />\r\n                                }]}\r\n                            onFilterSubmit={this.onFilterSubmit}\r\n                            switchGroupBy={this.switchGroupBy}\r\n                            selectedSwitch={this.state.selectedSwitch}\r\n                            \r\n                        />\r\n                    </Affix>\r\n                    <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n\r\n                                    primaryKeyField={\"nstatusconfigcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    pageable={true}\r\n                                    deleteParam={deleteParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    scrollable={'scrollable'}\r\n                                    isToolBarRequired={true}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.getComboService(addParam)}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                </div>\r\n               \r\n              \r\n                { }\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={[\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_STATUSFUNCTION\", \"dataField\": \"nstatusfunctioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                            { \"mandatory\": true, \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"ntranscode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddApprovalStatusConfig\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                statusFunctionList={this.props.Login.statusFunctionList || []}\r\n                                transactionsList={this.props.Login.transactionsList || []}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                            />}\r\n                    />\r\n                    : \"\"}\r\n\r\n\r\n            </>);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nformcode: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms.value : -1,\r\n            napprovalsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? (this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType.item.napprovalsubtypecode : -1) : -1,\r\n            nregsubtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType.value : -1,\r\n            nregtypecode: this.props.Login.masterData.realSampleType.value === SampleType.Masters ? -1 : this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType.value : -1,\r\n            nsampletypecode: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType.value : -1,\r\n            defaultSample: this.props.Login.masterData.realSampleType ? this.props.Login.masterData.realSampleType : \"\",\r\n            defaultRegType: this.props.Login.masterData.realRegType ? this.props.Login.masterData.realRegType : \"\",\r\n            defaultRegSubType: this.props.Login.masterData.realRegSubType ? this.props.Login.masterData.realRegSubType : \"\",\r\n            defaultApprovalSubType: this.props.Login.masterData.realApprovalSubType ? this.props.Login.masterData.realApprovalSubType : \"\",\r\n            defaultForms: this.props.Login.masterData.realdefaultForms ? this.props.Login.masterData.realdefaultForms : \"\"\r\n        }\r\n        // console.log(\"close inputdata\");\r\n        // inputData[\"breadcrumdata\"] = breadcrumdata;\r\n        const masterData = { ...this.props.Login.masterData }\r\n        const inputParam = { masterData, inputData }\r\n        this.props.closeFilterService(inputParam);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap,\r\n                    data: this.props.Login.masterData.approvalstatsusconfig,\r\n                    dataResult: process(this.props.Login.masterData.approvalstatsusconfig,\r\n                        this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    if (this.state.selectedSwitch === transactionStatus.YES) {\r\n                        dataState = { skip: 0, take: this.state.dataState.take, group: [{ field: 'sapprovalstatusfunctions' }] }\r\n                    }\r\n                    else {\r\n                        dataState = { skip: 0, take: this.state.dataState.take }\r\n                    }\r\n\r\n                }\r\n\r\n                if (this.state.selectedSwitch === transactionStatus.YES) {\r\n                    if (this.state.dataResult.data) {\r\n                        if (this.state.dataResult.data.length === 1) {\r\n                            if (this.state.dataResult.data[0].items.length === 1) {\r\n                                let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                                    this.state.dataState.skip\r\n                                dataState = { skip: skipcount, take: this.state.dataState.take, group: [{ field: 'sapprovalstatusfunctions' }] }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.state.dataResult.data) {\r\n                        if (this.state.dataResult.data.length === 1) {\r\n                            let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                                this.state.dataState.skip\r\n                            dataState = { skip: skipcount, take: this.state.dataState.take }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData.approvalstatsusconfig || [], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.approvalstatsusconfig || [], dataState),\r\n                    dataState\r\n                });\r\n\r\n            }\r\n            let SampleTypes = this.state.SampleTypes || [];\r\n            let qualisForms = this.state.qualisForms || [];\r\n            let approvalSubType = this.state.approvalSubType || {};\r\n            let registrationTypes = this.state.registrationTypes || {};\r\n            let regSubTypeList = this.state.regSubTypeList || {};\r\n\r\n            if (this.props.Login.masterData.SampleTypes !== previousProps.Login.masterData.SampleTypes) {\r\n                SampleTypes = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", undefined, undefined, false).get(\"OptionList\");\r\n            }\r\n\r\n            if (this.props.Login.masterData.qualisForms !== previousProps.Login.masterData.qualisForms) {\r\n                qualisForms = constructOptionList(this.props.Login.masterData.qualisForms || [], \"nformcode\",\r\n                    \"sdisplayname\", undefined, undefined, false).get(\"OptionList\");\r\n            }\r\n\r\n            if (this.props.Login.masterData.approvalSubType !== previousProps.Login.masterData.approvalSubType) {\r\n                approvalSubType = constructOptionList(this.props.Login.masterData.approvalSubType || [], \"napprovalsubtypecode\",\r\n                    \"ssubtypename\", undefined, undefined, false).get(\"OptionList\");\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.registrationTypes !== previousProps.Login.masterData.registrationTypes) {\r\n                registrationTypes = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, false).get(\"OptionList\");\r\n\r\n            }\r\n            if (this.props.Login.masterData.regSubTypeList !== previousProps.Login.masterData.regSubTypeList) {\r\n                regSubTypeList = constructOptionList(this.props.Login.masterData.regSubTypeList || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", undefined, undefined, false).get(\"OptionList\");\r\n\r\n            }\r\n\r\n\r\n            this.setState({ SampleTypes, qualisForms, approvalSubType, registrationTypes, regSubTypeList });\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential, closeFilterService, getComboService, getTransactionForms, getFilterSubmit, getRegSubTypeByRegtype, getRegSubTypeByRegtype, filterColumnData, getApprovalSubType, getRegTypeBySampleType, changeFilterSubmit,\r\n})(injectIntl(ApprovalStatusConfig));"]},"metadata":{},"sourceType":"module"}