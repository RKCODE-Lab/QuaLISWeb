{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { ColumnType, queryTypeFilter } from '../components/Enumeration';\nimport { format } from 'date-fns';\nexport function getRulesEngineAdd(userInfo, rulesengine, inputParam, masterData) {\n  let testcomments = [];\n  let reportcomments = [];\n  let predefcomments = [];\n  let sampletestcommentsList = [];\n  let selectedRecord = {};\n  let addGroupList = [];\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = [];\n\n    if (rulesengine) {\n      url.push(rsapi.post(\"/rulesengine/getdatabasetables\", {\n        userinfo: userInfo\n      }));\n    } else {\n      url.push(rsapi.post(\"/rulesengine/getRulesEngineAdd\", {\n        userinfo: userInfo\n      }));\n      url.push(rsapi.post(\"/grade/getGrade\", {\n        userinfo: userInfo\n      }));\n      url.push(rsapi.post(\"/site/getSite\", {\n        userinfo: userInfo\n      }));\n      url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n        userinfo: userInfo\n      }));\n      url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\n        userinfo: userInfo\n      }));\n      url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n        userinfo: userInfo\n      }));\n    }\n\n    Axios.all(url).then(response => {\n      if (rulesengine) {\n        const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n        const tableListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestparametercode\", \"stestparametersynonym\", false, false, false);\n        const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n        const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n        const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n        const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n        let commentsubtypelst = response[5].data['CommentSubType'];\n        let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n        const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n        let commentlist = response[3].data;\n        let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n        let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n        let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n        testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n        masterData['testParameter'] = {};\n        masterData['testParameterComments'] = {};\n        masterData['testParameterreportComments'] = {};\n        masterData['testComments'] = {};\n        masterData['reportComments'] = {};\n        masterData['testSite'] = {};\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"groupList\"][0] = [];\n        selectedRecord[\"groupList\"][0][\"button_and\"] = true;\n        selectedRecord[\"groupList\"][0][0] = {};\n        addGroupList[0] = 1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            operation: 'create',\n            databaseTableList: tableListMap.get(\"OptionList\"),\n            DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n            GradeList: Grade.get(\"OptionList\"),\n            siteList: site.get(\"OptionList\"),\n            openPortalModal: true,\n            resultTypeList: resultType.get(\"OptionList\"),\n            screenName: \"IDS_QUERYBUILDER\",\n            rulesengine,\n            testcomments,\n            reportcomments,\n            ...inputParam,\n            siteObject: {},\n            testCommentObject: {},\n            reportCommentObject: {},\n            testInitiateTests: [],\n            testCommentsTests: [],\n            reportCommentsTests: [],\n            testCommentsTestsTab: [],\n            reportCommentsTestsTab: [],\n            testInitiateSiteTab: [],\n            activeTabIndex: 0,\n            masterData,\n            rulesOption: tableListMap.get(\"OptionList\"),\n            testInitiateTestOptions: tableListMap.get(\"OptionList\"),\n            testCommentsTestOptions: tableListMap.get(\"OptionList\"),\n            reportCommentsTestOptions: tableListMap.get(\"OptionList\"),\n            CommentType: CommentType.get(\"OptionList\"),\n            CommentSubType: CommentSubType.get(\"OptionList\"),\n            predefcomments,\n            openModalPopup: false,\n            openmodalsavePopup: false,\n            addGroupList,\n            selectedRecord,\n            viewColumnListByRule: tableListMap.get(\"OptionList\")\n          }\n        });\n      } else {\n        const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n        const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n        const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\n        const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n        const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n        const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n        let commentsubtypelst = response[5].data['CommentSubType'];\n        let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n        const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n        let commentlist = response[3].data;\n        let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n        let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n        let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n        testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n        masterData['testParameter'] = {};\n        masterData['testParameterComments'] = {};\n        masterData['testParameterreportComments'] = {};\n        masterData['testComments'] = {};\n        masterData['reportComments'] = {};\n        masterData['testSite'] = {};\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"groupList\"][0] = [];\n        selectedRecord[\"groupList\"][0][\"button_and\"] = true;\n        selectedRecord[\"groupList\"][0][0] = {};\n        addGroupList[0] = 1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            operation: 'create',\n            databaseviewList: viewListMap.get(\"OptionList\"),\n            testcomments,\n            reportcomments,\n            DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n            GradeList: Grade.get(\"OptionList\"),\n            siteList: site.get(\"OptionList\"),\n            resultTypeList: resultType.get(\"OptionList\"),\n            openPortalModal: true,\n            screenName: \"IDS_ADDRULESENGINE\",\n            rulesengine,\n            ...inputParam,\n            siteObject: {},\n            testCommentObject: {},\n            reportCommentObject: {},\n            testInitiateTests: [],\n            testCommentsTests: [],\n            reportCommentsTests: [],\n            testCommentsTestsTab: [],\n            reportCommentsTestsTab: [],\n            testInitiateSiteTab: [],\n            activeTabIndex: 0,\n            masterData,\n            rulesOption: viewListMap.get(\"OptionList\"),\n            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\n            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\n            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\n            CommentType: CommentType.get(\"OptionList\"),\n            CommentSubType: CommentSubType.get(\"OptionList\"),\n            predefcomments,\n            openModalPopup: false,\n            openmodalsavePopup: false,\n            addGroupList,\n            selectedRecord,\n            viewColumnListByRule: viewListMap.get(\"OptionList\")\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedRulesEngine(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/rulesengine/getSelectedRulesEngine\", {\n      'userinfo': userInfo,\n      \"ntransactionrulesenginecode\": inputParam.ntransactionrulesenginecode,\n      nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\n    }).then(response => {\n      masterData = { ...masterData,\n        SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRulesEngine(nproductcatcode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/rulesengine/getRulesEngine\", {\n      'userinfo': userInfo,\n      \"nproductcatcode\": nproductcatcode\n    }).then(response => {\n      masterData = { ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRulesEngine(operation, masterData, ncontrolCode, userInfo) {\n  let testcomments = [];\n  let reportcomments = [];\n  let predefcomments = [];\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = {};\n    urlArray.push(rsapi.post(\"rulesengine/getEditRulesEngine\", {\n      'ntransactionrulesenginecode': masterData.SelectedRulesEngine['ntransactionrulesenginecode'],\n      'masterData': masterData,\n      \"userinfo\": userInfo\n    }));\n    urlArray.push(rsapi.post(\"/grade/getGrade\", {\n      userinfo: userInfo\n    }));\n    urlArray.push(rsapi.post(\"/site/getSite\", {\n      userinfo: userInfo\n    }));\n    urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n      userinfo: userInfo\n    }));\n    urlArray.push(rsapi.post(\"/rulesengine/getRulesEngineAdd\", {\n      userinfo: userInfo\n    }));\n    urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\n      userinfo: userInfo\n    }));\n    urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\n      userinfo: userInfo\n    }));\n    urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n      userinfo: userInfo\n    }));\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      let responsedata = response[0].data;\n      let srulename = responsedata['RulesEngineEdit'][0]['srulename'];\n      let groupList = responsedata['RulesEngineEdit'][0]['jsondata'];\n      let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata'];\n      selectedRecord[\"groupList\"] = [];\n      groupList.map((ruleslist, index) => {\n        if (ruleslist.hasOwnProperty('button_or')) {\n          selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"];\n          selectedRecord[\"groupList\"][index][\"button_or\"] = true;\n        }\n\n        if (ruleslist.hasOwnProperty('button_and')) {\n          selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"];\n          selectedRecord[\"groupList\"][index][\"button_and\"] = true;\n        }\n\n        if (ruleslist.hasOwnProperty('button_not_button_and')) {\n          selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"];\n          selectedRecord[\"groupList\"][index][\"button_and\"] = true;\n          selectedRecord[\"groupList\"][index][\"button_not\"] = true;\n        }\n\n        if (ruleslist.hasOwnProperty('button_not_button_or')) {\n          selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"];\n          selectedRecord[\"groupList\"][index][\"button_or\"] = true;\n          selectedRecord[\"groupList\"][index][\"button_not\"] = true;\n        }\n      }); // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\n      //     selectedRecord[\"groupList\"]['button_not'] = true\n      // }\n      // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\n      //     selectedRecord[\"groupList\"]['button_not'] = true\n      // }\n\n      if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\n        selectedRecord[\"groupList\"]['button_or'] = true;\n      } else {\n        selectedRecord[\"groupList\"]['button_and'] = true;\n      }\n\n      selectedRecord['srulename'] = srulename;\n      selectedRecord['srulenamecopy'] = srulename; // selectedRecord[\"groupList\"][0][\"button_and\"] = true\n\n      let addGroupList = [];\n      addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList'];\n      const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n      const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n      const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\n      const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n      const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n      const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n      let commentsubtypelst = response[7].data['CommentSubType'];\n      let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n      const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n      let commentlist = response[3].data;\n      let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n      let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n      let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n      testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n      reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n      predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n      masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'];\n      masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'];\n      masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'];\n      masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject'];\n      masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'];\n      masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject'];\n      selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode'];\n      selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins'];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: operation,\n          screenName: \"IDS_EDITRULESENGINE\",\n          selectedRecord,\n          openPortalModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false,\n          addGroupList,\n          viewColumnListByRule: viewListMap.get(\"OptionList\"),\n          rulesOption: viewListMap.get(\"OptionList\"),\n          testcomments,\n          reportcomments,\n          DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n          GradeList: Grade.get(\"OptionList\"),\n          siteList: site.get(\"OptionList\"),\n          resultTypeList: resultType.get(\"OptionList\"),\n          testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\n          testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\n          reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\n          siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\n          testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\n          reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\n          testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\n          testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\n          reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\n          CommentType: CommentType.get(\"OptionList\"),\n          CommentSubType: CommentSubType.get(\"OptionList\"),\n          predefcomments,\n          openModalPopup: false,\n          openmodalsavePopup: false,\n          activeTabIndex: 0,\n          action: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/RuleEngineAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","format","getRulesEngineAdd","userInfo","rulesengine","inputParam","masterData","testcomments","reportcomments","predefcomments","sampletestcommentsList","selectedRecord","addGroupList","dispatch","url","push","post","userinfo","all","then","response","DiagnosticCase","data","tableListMap","Grade","resultType","undefined","site","CommentType","commentsubtypelst","w","filter","x","ncommentsubtypecode","CommentSubType","commentlist","y","z","get","type","payload","loading","operation","databaseTableList","DiagnosticCaseList","GradeList","siteList","openPortalModal","resultTypeList","screenName","siteObject","testCommentObject","reportCommentObject","testInitiateTests","testCommentsTests","reportCommentsTests","testCommentsTestsTab","reportCommentsTestsTab","testInitiateSiteTab","activeTabIndex","rulesOption","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","openModalPopup","openmodalsavePopup","viewColumnListByRule","viewListMap","databaseviewList","catch","error","status","message","warn","getSelectedRulesEngine","ntransactionrulesenginecode","nproductcatcode","SelectedProductCategory","SelectedRulesEngine","getRulesEngine","getEditRulesEngine","ncontrolCode","urlArray","responsedata","srulename","groupList","outcomeList","map","ruleslist","index","hasOwnProperty","action","formatMessage","id"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\nexport function getRulesEngineAdd(userInfo, rulesengine, inputParam, masterData) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    let sampletestcommentsList = []\r\n    let selectedRecord = {}\r\n    let addGroupList = []\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = [];\r\n        if (rulesengine) {\r\n            url.push(rsapi.post(\"/rulesengine/getdatabasetables\", {\r\n                userinfo: userInfo\r\n            }));\r\n\r\n        } else {\r\n            url.push(rsapi.post(\"/rulesengine/getRulesEngineAdd\", {\r\n                userinfo: userInfo\r\n            }));\r\n            url.push(rsapi.post(\"/grade/getGrade\", {\r\n                userinfo: userInfo\r\n            }));\r\n            url.push(rsapi.post(\"/site/getSite\", {\r\n                userinfo: userInfo\r\n            }));\r\n            url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                userinfo: userInfo\r\n            }));\r\n            url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                userinfo: userInfo\r\n            }));\r\n        }\r\n        Axios.all(url)\r\n            .then(response => {\r\n                if (rulesengine) {\r\n\r\n\r\n                    const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const tableListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestparametercode\", \"stestparametersynonym\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n\r\n\r\n\r\n                    let commentsubtypelst = response[5].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    masterData['testComments'] = {}\r\n                    masterData['reportComments'] = {}\r\n                    masterData['testSite'] = {}\r\n\r\n                    selectedRecord[\"groupList\"] = [];\r\n                    selectedRecord[\"groupList\"][0] = [];\r\n                    selectedRecord[\"groupList\"][0][\"button_and\"] = true;\r\n                    selectedRecord[\"groupList\"][0][0] = {};\r\n                    addGroupList[0] = 1;\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            operation: 'create',\r\n                            databaseTableList: tableListMap.get(\"OptionList\"),\r\n                            DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                            GradeList: Grade.get(\"OptionList\"),\r\n                            siteList: site.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            resultTypeList: resultType.get(\"OptionList\"),\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            rulesengine,\r\n                            testcomments,\r\n                            reportcomments,\r\n                            ...inputParam,\r\n                            siteObject: {},\r\n                            testCommentObject: {},\r\n                            reportCommentObject: {},\r\n                            testInitiateTests: [],\r\n                            testCommentsTests: [],\r\n                            reportCommentsTests: []\r\n                            ,\r\n\r\n                            testCommentsTestsTab: [],\r\n                            reportCommentsTestsTab: [],\r\n                            testInitiateSiteTab: [],\r\n                            activeTabIndex: 0,\r\n                            masterData,\r\n                            rulesOption: tableListMap.get(\"OptionList\"),\r\n                            testInitiateTestOptions: tableListMap.get(\"OptionList\"),\r\n                            testCommentsTestOptions: tableListMap.get(\"OptionList\"),\r\n                            reportCommentsTestOptions: tableListMap.get(\"OptionList\"),\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            addGroupList,\r\n                            selectedRecord,\r\n                            viewColumnListByRule: tableListMap.get(\"OptionList\")\r\n\r\n                        }\r\n                    });\r\n                } else {\r\n                    const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    let commentsubtypelst = response[5].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    masterData['testComments'] = {}\r\n                    masterData['reportComments'] = {}\r\n                    masterData['testSite'] = {}\r\n\r\n\r\n                    selectedRecord[\"groupList\"] = [];\r\n                    selectedRecord[\"groupList\"][0] = [];\r\n                    selectedRecord[\"groupList\"][0][\"button_and\"] = true;\r\n                    selectedRecord[\"groupList\"][0][0] = {};\r\n                    addGroupList[0] = 1;\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            operation: 'create',\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            testcomments,\r\n                            reportcomments,\r\n                            DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                            GradeList: Grade.get(\"OptionList\"),\r\n                            siteList: site.get(\"OptionList\"),\r\n                            resultTypeList: resultType.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_ADDRULESENGINE\",\r\n                            rulesengine,\r\n                            ...inputParam,\r\n\r\n                            siteObject: {},\r\n                            testCommentObject: {},\r\n                            reportCommentObject: {},\r\n                            testInitiateTests: [],\r\n                            testCommentsTests: [],\r\n                            reportCommentsTests: []\r\n                            ,\r\n\r\n                            testCommentsTestsTab: [],\r\n                            reportCommentsTestsTab: [],\r\n                            testInitiateSiteTab: [],\r\n                            activeTabIndex: 0,\r\n                            masterData,\r\n                            rulesOption: viewListMap.get(\"OptionList\"),\r\n                            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\r\n                            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            addGroupList,\r\n                            selectedRecord,\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\")\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getSelectedRulesEngine(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/rulesengine/getSelectedRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntransactionrulesenginecode\": inputParam.ntransactionrulesenginecode, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getRulesEngine(nproductcatcode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/rulesengine/getRulesEngine\",\r\n            { 'userinfo': userInfo, \"nproductcatcode\": nproductcatcode })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getEditRulesEngine(operation, masterData, ncontrolCode, userInfo) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let selectedRecord = {}\r\n        urlArray.push(rsapi.post(\"rulesengine/getEditRulesEngine\", {\r\n            'ntransactionrulesenginecode':\r\n                masterData.SelectedRulesEngine['ntransactionrulesenginecode'], 'masterData': masterData, \"userinfo\": userInfo\r\n        }));\r\n        urlArray.push(rsapi.post(\"/grade/getGrade\", {\r\n            userinfo: userInfo\r\n        }));\r\n        urlArray.push(rsapi.post(\"/site/getSite\", {\r\n            userinfo: userInfo\r\n        }));\r\n        urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n            userinfo: userInfo\r\n        }));\r\n        urlArray.push(rsapi.post(\"/rulesengine/getRulesEngineAdd\", {\r\n            userinfo: userInfo\r\n        }));\r\n        urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\r\n            userinfo: userInfo\r\n        }));\r\n\r\n        urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n            userinfo: userInfo\r\n        }));\r\n        urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n            userinfo: userInfo\r\n        }));\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                masterData['testParameter'] = {}\r\n                masterData['testParameterComments'] = {}\r\n                masterData['testParameterreportComments'] = {}\r\n                let responsedata = response[0].data\r\n                let srulename = responsedata['RulesEngineEdit'][0]['srulename']\r\n                let groupList = responsedata['RulesEngineEdit'][0]['jsondata']\r\n                let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata']\r\n                selectedRecord[\"groupList\"] = []\r\n                groupList.map((ruleslist, index) => {\r\n\r\n                    if (ruleslist.hasOwnProperty('button_or')) {\r\n                        selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"]\r\n                        selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                    }\r\n                    if (ruleslist.hasOwnProperty('button_and')) {\r\n                        selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"]\r\n                        selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                    }\r\n                    if (ruleslist.hasOwnProperty('button_not_button_and')) {\r\n                        selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"]\r\n                        selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                        selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                    }\r\n                    if (ruleslist.hasOwnProperty('button_not_button_or')) {\r\n                        selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"]\r\n                        selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                        selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                    }\r\n                })\r\n                // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\r\n                //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                // }\r\n                // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\r\n                //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                // }\r\n                if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\r\n                    selectedRecord[\"groupList\"]['button_or'] = true\r\n                }\r\n                else {\r\n                    selectedRecord[\"groupList\"]['button_and'] = true\r\n                }\r\n                selectedRecord['srulename'] = srulename\r\n                selectedRecord['srulenamecopy'] = srulename\r\n                // selectedRecord[\"groupList\"][0][\"button_and\"] = true\r\n                let addGroupList = []\r\n                addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList']\r\n                const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                let commentsubtypelst = response[7].data['CommentSubType']\r\n                let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                let commentlist = response[3].data\r\n                let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n                testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests']\r\n                masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests']\r\n                masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests']\r\n\r\n                masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject']\r\n                masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject']\r\n                masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject']\r\n                selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode']\r\n                selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins']\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        operation: operation, screenName: \"IDS_EDITRULESENGINE\", selectedRecord,\r\n                        openPortalModal: true, ncontrolCode: ncontrolCode, loading: false, addGroupList,\r\n\r\n                        viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n                        rulesOption: viewListMap.get(\"OptionList\"),\r\n                        testcomments,\r\n                        reportcomments,\r\n                        DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                        GradeList: Grade.get(\"OptionList\"),\r\n                        siteList: site.get(\"OptionList\"),\r\n                        resultTypeList: resultType.get(\"OptionList\"),\r\n                        testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\r\n                        testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\r\n                        reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\r\n                        siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\r\n                        testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\r\n                        reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\r\n                        testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\r\n                        testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\r\n                        reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\r\n                        CommentType: CommentType.get(\"OptionList\"),\r\n                        CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                        predefcomments,\r\n                        openModalPopup: false,\r\n                        openmodalsavePopup: false,\r\n                        activeTabIndex: 0,\r\n                        action: \"update\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}