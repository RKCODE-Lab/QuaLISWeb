{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getComponentListfromUnwantedAttr, getRegistration, TestListManipulation } from './RegistrationValidation';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      //selectedRecord: this.props.Login.selectedRecord,\n      //selectedSpec: this.props.Login.selectedSpec,\n      componentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {}\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SUBSAMPLENAME\",\n          \"dataField\": \"ssubsamplename\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TOTALQUANTITY\",\n          \"dataField\": \"ssampleqty\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"UNIT\",\n          \"dataField\": \"nunitcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.state.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.state.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            this.setState({\n              selectedTestData: [],\n              loadSpec: false,\n              SelectedTest: [],\n              Test: [],\n              Component: [],\n              selectedSpec\n            }); // const updateInfo = {\n            //     typeName: DEFAULT_RETURN,\n            //     data: { selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [] }\n            // }\n            // this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.props.Login.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let inputParem = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      let product = false;\n      let productCategory = false;\n      let nproductcatcode = -1;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.name === 'Product') {\n        const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n        const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          product = true;\n        }\n      } else if (control.name === 'Product Category') {\n        // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\n        const ncategorybasedflow = comboData && comboData['item']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          productCategory = true;\n        }\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n        inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item,\n          label: comboName\n        };\n        let nproductcode = -1;\n\n        if (product) {\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n\n        const mapOfFilter = {\n          nproductcode,\n          nproductcatcode,\n          nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n        };\n        this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n      } else {\n        if (productCategory) {\n          const ncategorybasedflow = selectedRecord[comboName] && selectedRecord[comboName].value;\n        } else if (product) {\n          const nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      this.setState({\n        loadSpec: true\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSpec: true\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, subSample, specBasedComponent) => {\n      if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n        delete selectedComponent[\"selected\"];\n        this.props.getTest(selectedComponent, this.props.Login, subSample, specBasedComponent);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      this.setState({\n        loadSpec: false,\n        selectedRecord: { ...this.state.selectedRecord,\n          ...this.state.selectedSpec\n        }\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSpec: false,\n      //         selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ? this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n      this.props.getNewRegSpecification(inputParam, this.props.Login.masterData); // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, subSample) => {\n      if (comboData !== null) {\n        if (!subSample) {\n          const selectComponent = this.state.selectComponent || {};\n\n          if (fieldName === 'ntzdreceivedate') {\n            selectComponent[\"ntzdreceivedate\"] = comboData;\n          } else {\n            const oldspecsampletypecode = selectComponent.nspecsampletypecode;\n\n            if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {//selectComponent[\"nneedservice\"] = true;\n            }\n\n            selectComponent[\"ncomponentcode\"] = comboData;\n            selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          }\n\n          this.setState({\n            selectComponent\n          }); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: {\n          //         selectComponent\n          //     }\n          // }\n          // this.props.updateStore(updateInfo);\n        } else {\n          const selectComponent = this.state.selectComponent || {};\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ? selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode : -1;\n          this.setState({\n            selectComponent\n          });\n        }\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        objcomponent[\"ssubsamplename\"] = selectedComponent[\"ssubsamplename\"];\n        objcomponent[\"nunitcode\"] = selectedComponent[\"nunitcode\"] ? selectedComponent[\"nunitcode\"].value : -1;\n        objcomponent[\"sunitname\"] = selectedComponent[\"nunitcode\"] ? selectedComponent[\"nunitcode\"].label : \"\";\n        objcomponent[\"scoments\"] = selectedComponent[\"scoments\"] ? selectedComponent[\"scoments\"] : \"\";\n        objcomponent[\"ssampleqty\"] = selectedComponent[\"ssampleqty\"] ? selectedComponent[\"ssampleqty\"] : 0;\n        objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.editSubSample(inputData, objComponent, this.props.Login.userInfo, specBasedComponent);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const Component = this.props.Login.Component;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = Component.findIndex(x => x.slno === dataItem.slno);\n\n      if (index > -1) {\n        Component.splice(index, 1);\n      }\n\n      Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n      SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: Component[0],\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest: Test[selectedComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          loadTest: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        tesDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = specBasedComponent => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      } else {\n        if (operation === \"create\") {\n          this.insertRegistration(true);\n        }\n      }\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENTNAME\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ssubsamplename\"] = objcomponent[\"ssubsamplename\"] ? objcomponent[\"ssubsamplename\"] : \"\";\n      saveComponent[\"nunitcode\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].value : -1;\n      saveComponent[\"sunitname\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n      saveComponent[\"ssampleqty\"] = objcomponent[\"ssampleqty\"] ? objcomponent[\"ssampleqty\"] : -1;\n      saveComponent[\"scomments\"] = objcomponent[\"scomments\"] ? objcomponent[\"scomments\"] : \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      saveComponent[\"ssubsamplename\"] = objcomponent[\"ssubsamplename\"] ? objcomponent[\"ssubsamplename\"] : \"\";\n      saveComponent[\"nunitcode\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].value : -1;\n      saveComponent[\"sunitname\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n      saveComponent[\"ssampleqty\"] = objcomponent[\"ssampleqty\"] ? objcomponent[\"ssampleqty\"] : -1;\n      saveComponent[\"scomments\"] = objcomponent[\"scomments\"] ? objcomponent[\"scomments\"] : \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      objcomponent1[\"ssubsamplename\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let Test = this.props.Login.Test;\n    let Map = {};\n    Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n    Map[\"component\"] = getComponentListfromUnwantedAttr(this.props.Login.Component);\n    Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate); //formatDate(this.fromDate);\n\n    Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate); //formatDate(this.toDate);\n\n    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n    Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n    Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n    Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n    Map[\"Registration\"] = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec);\n    Map[\"userinfo\"] = this.props.Login.userInfo;\n    Map[\"nflag\"] = 2;\n    Map[\"ntype\"] = 1;\n    Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n    Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n    Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n    const inputParam = {\n      inputData: Map,\n      postParamList: this.props.postParamList,\n      action: \"preregister\"\n    };\n    this.props.insertRegistration(inputParam, this.props.Login.masterData);\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    }\n\n    const testColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"ssourcename\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"smethodname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      width: \"200px\"\n    }];\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.state.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\",\n      className: this.props.className || \"\",\n      show: this.props.show,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1048,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.inputParam ? this.props.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 33\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 49\n      }\n    }), \" \", this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 57\n      }\n    }) : \"\") : this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 49\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.state.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 49\n      }\n    })) : this.props.hideSave ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 49\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 33\n      }\n    }, this.state.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedRecord: this.state.selectedRecord,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChange,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      Unit: this.props.Login.Unit || [],\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      SelectedTest: this.props.Login.SelectedTest // selectedTestData={this.props.Login.selectedTestData}\n      ,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.props.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.userInfo,\n      timeZoneList: this.props.timeZoneList,\n      defaultTimeZone: this.props.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide //={this.selectSubSample}\n      ,\n      handleComponentRowClick: this.handleComponentRowClick,\n      subSample: 3,\n      specBasedComponent: 3,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      componentDataState: this.state.componentDataState,\n      testdataStateChange: this.testDataStateChange,\n      componentdataStateChange: this.componentDataStateChange,\n      subSampledataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 59\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","transactionStatus","faCalculator","comboChild","convertDateTimetoString","getSameRecordFromTwoArrays","rearrangeDateFormat","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","AddComponentPopUp","AddSubSample","getComponentListfromUnwantedAttr","getRegistration","TestListManipulation","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","componentDataState","skip","take","settings","parseInt","testDataState","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","handleSaveClick","saveType","startLabel","label","mandatoryFields","loadComponent","loadSubSample","loadTest","loadSpec","masterData","registrationTemplate","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","mandatory","push","inputtype","esign","forEach","item","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","setState","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","updateInfo","typeName","data","onComboChange","control","customName","parentList","childComboList","childColumnList","inputParem","comboName","product","productCategory","nproductcatcode","name","ProductCategory","comboComponents","filter","x","ncategorybasedflow","value","child","columnList","val","withoutCombocomponent","source","primarykeyField","valuemember","nproductcode","mapOfFilter","nsampletypecode","RealSampleTypeValue","userInfo","onInputOnChange","event","target","type","checked","onNumericInputChange","handleDateChange","dateValue","dateName","screenName","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","selectedComponent","subSample","specBasedComponent","Object","keys","warn","closeSpec","closeComponent","closeTest","closeSubSample","selectedSubSample","onspecChange","oldpromarycode","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","userinfo","selectedNode","primaryKey","handleComponentRowClick","dataItem","slno","AddComponent","Map","nallottedspeccode","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","oldspecsampletypecode","nspecsampletypecode","onInputComponentOnChange","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","index","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","SubSampleObjectAfterSave","SubSampleObject","editComponent","editselectedcomponent","inputData","objComponent","deleteComponent","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","componentDataStateChange","dataState","testDataStateChange","tesDataState","subSampleDataStateChange","onUpdateRegistration","myRef","PrevoiusLoginData","componentColumnList","width","componentDidUpdate","previousProps","masterStatus","check","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","showSaveContinue","objcomponent1","Components","fromDate","toDate","RealRegSubTypeValue","nregsubtypecode","PREREGISTER","activeSampleTab","activeTestTab","postParamList","action","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","testColumnList","className","show","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","hideSave","showSave","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","TestCombined","myScrollRef","RealFilterStatusValue","lstComponent","timeZoneList","sreceiveddate","CurrentTime","Unit","userRoleControlRights","handleChange","defaultTimeZone"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport {transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport { comboChild, convertDateTimetoString, \r\n    getSameRecordFromTwoArrays, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,insertRegistration\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport { getComponentListfromUnwantedAttr, \r\n    getRegistration, TestListManipulation } from './RegistrationValidation';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        //selectedRecord: this.props.Login.selectedRecord,\r\n        //selectedSpec: this.props.Login.selectedSpec,\r\n        componentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n    }\r\n\r\n\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SUBSAMPLENAME\", \"dataField\": \"ssubsamplename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TOTALQUANTITY\", \"dataField\": \"ssampleqty\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"UNIT\", \"dataField\": \"nunitcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.state.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ? mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.state.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n                    this.setState({\r\n                        selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    })\r\n                    // const updateInfo = {\r\n                    //     typeName: DEFAULT_RETURN,\r\n                    //     data: { selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [] }\r\n                    // }\r\n                    // this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.props.Login.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n        let inputParem = {}\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let product = false;\r\n        let productCategory = false;\r\n        let nproductcatcode = -1\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.name === 'Product') {\r\n            const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n            const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                product = true\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Product Category') {\r\n            // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                productCategory = true\r\n            }\r\n        }\r\n\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n            inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item,\r\n                label: comboName\r\n            }\r\n            let nproductcode = -1\r\n            if (product) {\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n            const mapOfFilter = {\r\n                nproductcode, nproductcatcode,\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectedRecord, this.props.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n        } else {\r\n\r\n            if (productCategory) {\r\n                const ncategorybasedflow = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n\r\n            } else if (product) {\r\n                const nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n                }\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.userInfo, selectedRecord, this.props.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    // onInputOnChange = (event, value) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (event.target.type === 'toggle') {\r\n    //         selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    //     } else if (event.target.type === 'numeric') {\r\n    //         if (/\\D/.test(event.target.value))\r\n    //             selectedRecord[event.target.name] = event.target.value;\r\n    //     } else if (event.target.type === 'checkbox') {\r\n    //         selectedRecord[event.target.name] = value;\r\n    //     } else if (event.target.type === 'radio') {\r\n    //         selectedRecord[event.target.name] = value\r\n    //     } else {\r\n    //         selectedRecord[event.target.name] = event.target.value;\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    //     // this.saveComponentProperties()\r\n    // }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n            this.setState({ selectedSpec: this.props.Login.selectedSpec });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        this.setState({\r\n            loadSpec: true\r\n        })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSpec: true\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, subSample, specBasedComponent) => {\r\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n            delete selectedComponent[\"selected\"];\r\n            this.props.getTest(selectedComponent, this.props.Login, subSample, specBasedComponent);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        this.setState({\r\n            loadSpec: false, selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n        })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSpec: false,\r\n        //         selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n                this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, subSample) => {\r\n        if (comboData !== null) {\r\n            if (!subSample) {\r\n                const selectComponent = this.state.selectComponent || {};\r\n                if (fieldName === 'ntzdreceivedate') {\r\n                    selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                } else {\r\n                    const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                    if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                        //selectComponent[\"nneedservice\"] = true;\r\n                    }\r\n                    selectComponent[\"ncomponentcode\"] = comboData;\r\n                    selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n\r\n                }\r\n                this.setState({ selectComponent })\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         selectComponent\r\n                //     }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            } else {\r\n                const selectComponent = this.state.selectComponent || {};\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ? selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode : -1;\r\n                this.setState({ selectComponent })\r\n            }\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            objcomponent[\"ssubsamplename\"] = selectedComponent[\"ssubsamplename\"];\r\n            objcomponent[\"nunitcode\"] = selectedComponent[\"nunitcode\"] ? selectedComponent[\"nunitcode\"].value : -1;\r\n            objcomponent[\"sunitname\"] = selectedComponent[\"nunitcode\"] ? selectedComponent[\"nunitcode\"].label : \"\";\r\n            objcomponent[\"scoments\"] = selectedComponent[\"scoments\"] ? selectedComponent[\"scoments\"] : \"\";\r\n            objcomponent[\"ssampleqty\"] = selectedComponent[\"ssampleqty\"] ? selectedComponent[\"ssampleqty\"] : 0;\r\n            objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadSubSample: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ssubsamplename\"] = objcomponent[\"ssubsamplename\"] ? objcomponent[\"ssubsamplename\"] : \"\";\r\n            saveComponent[\"nunitcode\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].value : -1;\r\n            saveComponent[\"sunitname\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            saveComponent[\"ssampleqty\"] = objcomponent[\"ssampleqty\"] ? objcomponent[\"ssampleqty\"] : -1;\r\n            saveComponent[\"scomments\"] = objcomponent[\"scomments\"] ? objcomponent[\"scomments\"] : \"\";\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent, loadSubSample: false,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            saveComponent[\"ssubsamplename\"] = objcomponent[\"ssubsamplename\"] ? objcomponent[\"ssubsamplename\"] : \"\";\r\n            saveComponent[\"nunitcode\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].value : -1;\r\n            saveComponent[\"sunitname\"] = objcomponent[\"nunitcode\"] ? objcomponent[\"nunitcode\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\r\n                this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            saveComponent[\"ssampleqty\"] = objcomponent[\"ssampleqty\"] ? objcomponent[\"ssampleqty\"] : -1;\r\n            saveComponent[\"scomments\"] = objcomponent[\"scomments\"] ? objcomponent[\"scomments\"] : \"\";\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            objcomponent1[\"ssubsamplename\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.editSubSample(inputData, objComponent, this.props.Login.userInfo, specBasedComponent);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const Component = this.props.Login.Component;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        const index = Component.findIndex(x => x.slno === dataItem.slno);\r\n        if (index > -1) {\r\n            Component.splice(index, 1);\r\n        }\r\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Component, selectedComponent: Component[0], Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n        selectedTestData.map((item) => {\r\n            return selectedTestArray.push(item.item);\r\n        });\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        let Test = this.props.Login.Test || [];\r\n\r\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n        //  ArrayTest.push(selectedTestArray);\r\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            tesDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n        else {\r\n            if (operation === \"create\") {\r\n                this.insertRegistration(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let Test = this.props.Login.Test;\r\n        let Map = {};\r\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n        Map[\"component\"] = getComponentListfromUnwantedAttr(this.props.Login.Component);\r\n        Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n        Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n        Map[\"Registration\"] = getRegistration(this.props.Login.masterData, this.state.selectedRecord,this.state.selectedSpec);\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nflag\"] = 2;\r\n        Map[\"ntype\"] = 1;\r\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n        const inputParam = {\r\n            inputData: Map,\r\n            postParamList: this.props.postParamList,\r\n            action: \"preregister\"\r\n        }\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        const testColumnList = [\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n            { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.state.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                className={this.props.className || \"\"}\r\n                show={this.props.show}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.inputParam ?\r\n                            this.props.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.loginoperation ?\r\n                                    <FormattedMessage id={this.props.screenName} />\r\n                                    : <>\r\n                                        {this.props.operation ?\r\n                                            <>\r\n                                                <FormattedMessage id={this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase())}\r\n                                                    defaultMessage='Add' />\r\n                                                {\" \"}\r\n                                                {\r\n                                                    this.props.screenName ?\r\n                                                        <FormattedMessage id={this.props.screenName} />\r\n                                                        : \"\"\r\n                                                }\r\n                                            </>\r\n                                            :\r\n                                            this.props.screenName ?\r\n                                                <FormattedMessage id={this.props.screenName} />\r\n                                                : \"\"}\r\n                                    </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.state.loadSpec ?\r\n                        this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                            this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.hideSave ? \"\" :\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner ref={this.myRef}>\r\n                        <Card.Body>\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n                                    {\r\n                                        this.state.loadSpec ?\r\n                                            <AddSpecification\r\n                                                AgaramTree={this.props.Login.AgaramTree}\r\n                                                openNodes={this.props.Login.OpenNodes}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                focusKey={this.props.Login.FocusKey}\r\n                                                activeKey={this.props.Login.ActiveKey}\r\n                                                Specification={this.props.Login.Specification}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedSpec={this.state.selectedSpec}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onSpecChange={this.onspecChange}\r\n                                            />\r\n                                            : this.props.Login.loadTest ?\r\n                                                <AddTest\r\n                                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                                    TestChange={this.TestChange}\r\n                                                    selectedTestData={this.props.Login.selectedTestData}\r\n                                                /> : this.props.Login.loadComponent ?\r\n                                                    <AddComponentPopUp\r\n                                                        ref={this.myScrollRef}\r\n                                                        selectComponent={this.state.selectComponent || {}}\r\n                                                        RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        handleDateChange={this.handleDateChange}\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        // onComboChange={this.onComponentComboChange}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                        CurrentTime={this.props.Login.CurrentTime}\r\n                                                    />\r\n                                                    : this.props.Login.loadSubSample ?\r\n                                                        <AddSubSample\r\n                                                            Component={this.props.Login.lstComponent || []}\r\n                                                            selectComponent={this.state.selectComponent}\r\n                                                            Unit={this.props.Login.Unit || []}\r\n                                                            onComponentChange={this.onComponentChange}\r\n                                                            onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        />\r\n                                                        : <RegisterSlideOut\r\n                                                            selectedSpec={this.state.selectedSpec}\r\n                                                            selectedRecord={this.state.selectedRecord}\r\n                                                            selectedComponent={this.props.Login.selectedComponent}\r\n                                                            SelectedTest={this.props.Login.SelectedTest}\r\n                                                            // selectedTestData={this.props.Login.selectedTestData}\r\n                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                            templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                                this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                            handleChange={this.props.handleChange}\r\n                                                            handleDateChange={this.props.handleDateChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                            comboData={this.props.Login.comboData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            userInfo={this.props.userInfo}\r\n                                                            timeZoneList={this.props.timeZoneList}\r\n                                                            defaultTimeZone={this.props.defaultTimeZone}\r\n                                                            AddSpec={this.AddSpec}\r\n                                                            addTest={this.addTestslide}\r\n                                                            //={this.selectSubSample}\r\n                                                            handleComponentRowClick={this.handleComponentRowClick}\r\n                                                            subSample={3}\r\n                                                            specBasedComponent={3}\r\n                                                            AddComponent={this.AddComponent}\r\n                                                            deleteComponent={this.deleteComponent}\r\n                                                            deleteTest={this.deleteTest}\r\n                                                            editComponent={this.editComponent}\r\n                                                            componentColumnList={this.componentColumnList}\r\n                                                            Component={this.props.Login.Component}\r\n                                                            TestChange={this.TestChange}\r\n                                                            testDataState={this.state.testDataState}\r\n                                                            subSampleDataState={this.state.subSampleDataState}\r\n                                                            componentDataState={this.state.componentDataState}\r\n                                                            testdataStateChange={this.testDataStateChange}\r\n                                                            componentdataStateChange={this.componentDataStateChange}\r\n                                                            subSampledataStateChange={this.subSampleDataStateChange}\r\n                                                            addsubSample={this.addsubSample}\r\n                                                            editSubSample={this.editSubSample}\r\n\r\n                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest, \r\n    addsubSample, editSubSample,insertRegistration\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}