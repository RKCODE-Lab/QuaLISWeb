{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, sortDataByParent } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { REPORTTYPE, checkBoxOperation, reportCOAType, transactionStatus } from '../components/Enumeration';\nimport { intl } from '../components/App';\nexport function getsubSampleDetail(inputData, isServiceRequired, isParentValue) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeTestTab,\n      activeSubSampleTab: inputData.activeTestTab,\n      userinfo: inputData.userinfo,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode ? inputData.ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\n      // checkBoxOperation: inputData.masterData.searchedSubSample ?  \n      //     inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation,\n      checkBoxOperation: inputData.masterData.searchedSubSample ? inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation : checkBoxOperation.SINGLESELECT : inputData.checkBoxOperation,\n      // noParameterget:inputData.checkBoxOperation == 1 ? 3 : 4,\n      // noParameterget:inputData.checkBoxOperation == checkBoxOperation.MULTISELECT ? checkBoxOperation.SINGLESELECT : checkBoxOperation.,\n      nbatchmastercode: inputData.nbatchmastercode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalSubSample\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          APSelectedSample: inputData.APSelectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : [];\n        inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []; //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n\n        let skipInfo = {};\n        let masterData = {};\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n          let AP_TEST = inputData.masterData.AP_TEST;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n          if (isParentValue) {\n            inputData.masterData.AP_SUBSAMPLE = sortDataByParent(responseData['AP_SUBSAMPLE'], inputData.masterData.AP_SAMPLE, \"npreregno\");\n          }\n\n          masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            selectedPreregno: inputData.npreregno,\n            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n          };\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          }\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          } //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 5) {\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                APSelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const APSelectedTest = oldSelectedTest.length > 0 ? getSameRecordFromTwoArrays(oldSelectedTest, masterData.APSelectedSubSample, 'npreregno') : responseData.APSelectedTest;\n            masterData = { ...masterData,\n              APSelectedTest,\n              AP_TEST,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter,\n              RegistrationSampleAttachment: responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0 ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment\n            };\n          } // if(inputData.checkBoxOperation === 7 )\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n            masterData = { ...masterData,\n              APSelectedTest: responseData.APSelectedTest,\n              AP_TEST: responseData.AP_TEST,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter,\n              RegistrationSampleAttachment: responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0 ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment\n            };\n          } //if (inputData.checkBoxOperation === 3) {\n\n\n          if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            masterData = { ...masterData,\n              APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : [],\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter,\n              RegistrationSampleAttachment: responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0 ? responseData.RegistrationSampleAttachment : [] : [],\n              RegistrationTestAttachment: responseData.RegistrationTestAttachment ? responseData.RegistrationTestAttachment.length > 0 ? responseData.RegistrationTestAttachment : [] : [],\n              RegistrationAttachment: responseData.RegistrationAttachment ? responseData.RegistrationAttachment.length > 0 ? responseData.RegistrationAttachment : [] : [],\n              RegistrationSampleComment: responseData.RegistrationSampleComment ? responseData.RegistrationSampleComment.length > 0 ? responseData.RegistrationSampleComment : [] : [],\n              RegistrationTestComment: responseData.RegistrationTestComment ? responseData.RegistrationTestComment.length > 0 ? responseData.RegistrationTestComment : [] : [],\n              RegistrationComment: responseData.RegistrationComment ? responseData.RegistrationComment.length > 0 ? responseData.RegistrationComment : [] : []\n            };\n          }\n\n          let {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          } = inputData; // let bool = false;\n          // Commented bool value because no need to check bool condition to update skipInfo value.\n          // if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\n\n          testskip = 0;\n          subSampleSkip = 0; //     bool = true\n          // }\n          // if (bool) {\n\n          skipInfo = {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          }; // }\n        } else {\n          let oldApprovalParameter = inputData.masterData.ApprovalParameter;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          let APSelectedSubSamplenew = [];\n          APSelectedSubSamplenew = [...inputData.masterData.APSelectedSubSample, ...response.data.APSelectedSubSample];\n          masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            //APSelectedSubSample: inputData.masterData.APSelectedSubSample,\n            APSelectedSubSample: APSelectedSubSamplenew,\n            APSelectedTest: inputData.masterData.APSelectedTest || [],\n            selectedPreregno: inputData.npreregno\n          };\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          } // if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          //     inputData.searchSubSampleRef.current.value = \"\";\n          //     masterData['searchedSubSample'] = undefined\n          // }\n          // if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          //     inputData.searchTestRef.current.value = \"\"\n          //     masterData['searchedTests'] = undefined\n          // }\n\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n\n          let ApprovalParameter = [];\n          let ResultUsedInstrument = [];\n          let ResultUsedTasks = [];\n          let RegistrationTestAttachment = [];\n          let ApprovalResultChangeHistory = [];\n          let RegistrationTestComment = [];\n          let ApprovalHistory = []; //if (inputData.checkBoxOperation === 1) {\n\n          if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              inputData.masterData['ApprovalParameter'] = oldApprovalParameter;\n              masterData = { ...masterData,\n                //AP_TEST:responseData.AP_TEST,\n                ApprovalParameter: oldApprovalParameter,\n                APSelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // } else if (inputData.checkBoxOperation === 5) {\n\n          } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            let dbData = [];\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                dbData = response.data.ResultUsedInstrument || [];\n                list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TASK\":\n                dbData = response.data.ResultUsedTasks || [];\n                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                dbData = response.data.ApprovalResultChangeHistory || [];\n                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                dbData = response.data.ApprovalHistory || [];\n                list = [...inputData.masterData.ApprovalHistory, ...dbData];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              default:\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } // else if(inputData.checkBoxOperation === 7 )\n          else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n            // masterData = {\n            //     ...masterData,\n            //     APSelectedTest:responseData.APSelectedTest,\n            //     AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n            // }\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                list = response.data.ApprovalParameter || [];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                list = response.data.ResultUsedInstrument || [];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                list = response.data.ResultUsedTasks || [];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                list = response.data.ApprovalResultChangeHistory || [];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                list = response.data.ApprovalHistory || [];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                list = response.data.ApprovalParameter ? [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter] : [...inputData.masterData.ApprovalParameter];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else {\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                list = response.data.ApprovalParameter || [];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                list = response.data.ResultUsedInstrument || [];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                list = response.data.ResultUsedTasks || [];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                list = response.data.ApprovalResultChangeHistory || [];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                list = response.data.ApprovalHistory || [];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                list = response.data.ApprovalParameter ? [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter] : [...inputData.masterData.ApprovalParameter];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            activeSubSampleTab: inputData.activeSubSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let skipInfo = {};\n      let bool = false;\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n      let TestSelected = [];\n      let subSampleSelected = [];\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      let isGrandChildGetRequired = false;\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n          APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\n\n          if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          APSelectedSample,\n          APSelectedSubSample,\n          APSelectedTest\n        };\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        } // inputData = {\n        //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\n        //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\n        //     APSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\n        // }\n\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          masterData,\n          ...skipInfo\n        };\n\n        if (subSample) {\n          if (APSelectedTest.length === 0) {\n            inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\"); // inputData[\"checkBoxOperation\"] = 3\n\n            inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT;\n            inputData[\"childTabsKey\"] = [\"AP_TEST\"];\n            dispatch(getTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetail(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetail(inputData, true));\n        } // dispatch(getTestChildTabDetail(inputData, true));\n\n      } else {\n        let masterData = { ...inputData.masterData,\n          APSelectedTest: TestSelected ? TestSelected : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\n          APSelectedSample: inputData.APSelectedSample,\n          APSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n        };\n        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (subSample) {\n          if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ApprovalParameter,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              ApprovalResultChangeHistory,\n              RegistrationTestComment,\n              ApprovalHistory,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            activeSubSampleTab: inputData.activeSubSampleTab,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      userinfo: inputData.userinfo,\n      ntransactionstatus: inputData.ntransactionstatus,\n      //  ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      nbatchmastercode: inputData.nbatchmastercode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let masterData = {};\n    let subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalTest\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData); //responseData = sortData(responseData,'descending', 'npreregno')\n\n        inputData.searchTestRef.current.null = \"\"; //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n\n        let oldSelectedTest = inputData.masterData.APSelectedTest;\n        let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n        inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          APSelectedTest: inputData.masterData.APSelectedTest,\n          // APselectedSample: inputData.APSelectedSample,\n          APSelectedSubSample: inputData.APSelectedSubSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subSampleSkip) {\n          subSampleSkip = 0;\n        } // if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n\n\n        testskip = 0; // bool = true\n        // }\n\n        let skipInfo = {}; // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        }; // }\n\n        let ApprovalParameter = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ApprovalResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let ApprovalHistory = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = []; //if (inputData.checkBoxOperation === 1) {\n\n        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n          ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode; // }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n\n          if (subSample) {\n            let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.map((test, index) => {\n              if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactionsamplecode;\n            ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode;\n\n            switch (inputData.activeSubSampleTab) {\n              case \"IDS_SUBSAMPLECOMMENTS\":\n                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n                activeName = \"RegistrationSampleComment\";\n                dataStateName = \"subSampleCommentDataState\";\n                break;\n\n              default:\n                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n                activeName = \"RegistrationSampleAttachment\";\n                dataStateName = \"subSampleAttachmentDataState\";\n                break;\n            }\n          } //  } else if (inputData.checkBoxOperation === 5) {\n\n        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.ResultUsedInstrument || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ApprovalResultChangeHistory || [];\n              list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              dbData = response.data.ApprovalHistory || [];\n              list = [...inputData.masterData.ApprovalHistory, ...dbData];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          } // } else if (inputData.checkBoxOperation === 7) {\n\n        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {\n          let testList = reArrangeArrays(inputData.masterData.AP_SUBSAMPLE, responseData.AP_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            APSelectedTest: [testList[0]],\n            AP_TEST: testList,\n            ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter\n          }; // let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\n\n          let keepOld = false; // let ntransactiontestcode;\n          // if (oldSelectedTest.length > 0) {\n          //     keepOld = true\n          //     masterData = {\n          //         ...masterData,\n          //         APSelectedTest: oldSelectedTest\n          //     }\n          // } else {\n          //     ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\"\n          // }\n\n          let ntransactiontestcode = testList.length > 0 ? testList[0].ntransactiontestcode : \"\";\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = response.data.APSelectedTest ? response.data.APSelectedTest.length > 0 ? response.data.APSelectedTest[0].ntransactiontestcode : inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : -1 : -1 : -1; //inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode: -1 : -1\n\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              list = response.data.ApprovalParameter || [];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument || [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks || [];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ApprovalResultChangeHistory || [];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              list = response.data.ApprovalHistory || [];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              list = response.data.ApprovalParameter ? [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter] : [...inputData.masterData.ApprovalParameter];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true; // masterData = {\n            //     ...masterData,\n            //     //AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:oldApprovalParameter,\n            //     APSelectedSubSample: oldSelectedSubSample\n            // }\n          } else {\n            ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode;\n          } // ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\n\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          ApprovalParameter,\n          ResultUsedInstrument,\n          ResultUsedTasks,\n          RegistrationTestAttachment,\n          ApprovalResultChangeHistory,\n          RegistrationTestComment,\n          ApprovalHistory,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        skipInfo = { ...skipInfo,\n          subSampleCommentDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          subSampleAttachmentDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              APSelectedSubSample: inputData.APSelectedSubSample,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              activeTestTab: inputData.activeTestTab,\n              activeSampleTab: inputData.activeSampleTab,\n              skip: undefined,\n              take: undefined,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.masterData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno; //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n\n        let APSelectedSubSample = inputData.APSelectedSubSample; //let APSelectedSubSample = inputData.masterData.APSelectedSubSample\n\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\n        let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\n        let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        } // inputData = {\n        //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\n        //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\n        //     APSelectedSubSample, checkBoxOperation: 3, skipInfo\n        // }\n\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: checkBoxOperation.SINGLESELECT,\n          skipInfo\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        let keepOld = false;\n        let ntransactiontestcode;\n        let masterData = { ...inputData.masterData,\n          APSelectedSubSample: inputData.APSelectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          APSelectedTest: TestSelected ? TestSelected : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n        };\n        const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            APSelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ApprovalParameter,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              ApprovalResultChangeHistory,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            ...skipInfo,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    } //}\n\n  };\n}\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_TESTHISTORY\":\n          url = \"history/getTestHistory\";\n          activeName = \"RegistrationTestHistory\";\n          dataStateName = \"registrationTestHistoryDataState\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              selectedTest: inputData.APselectedTest\n            }; //responseData = inputData.checkBoxOperation === 7 ?  sortData( response.data,\"descending\",\"npreregno\"):responseData;\n            //sortData( responseData,\"descending\",\"ntransactionsamplecode\")\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              APSelectedSample: inputData.APSelectedSample || inputData.masterData.APSelectedSample,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              APSelectedTest: inputData.APSelectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode ? inputData.ntransactionsamplecode : inputData.masterData.APSelectedSubSample[0].ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId\n            };\n\n            if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                availableReleaseRecord: undefined,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTabId: inputData.activeTabId,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            APSelectedTest: inputData.APSelectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              availableReleaseRecord: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            availableReleaseRecord: undefined,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory,\n        RegistrationTestHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        case \"IDS_TESTHISTORY\":\n          RegistrationTestHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo,\n        OrderCodeData: inputData.OrderCodeData ? inputData.OrderCodeData : -1\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"comments/getSampleComment\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        case \"IDS_EXTERNALORDERREPORTS\":\n          url = \"registration/getExternalOrderAttachment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              activeTestTab: inputData.activeSampleTab,\n              screenName: inputData.screenName,\n              selectedId: null,\n              activeTabIndex: inputData.activeTabIndex\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\n        replaceUpdatedObject(response.data[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\n        let AP_SAMPLE = response.data[\"AP_SAMPLE\"];\n        let AP_SUBSAMPLE = response.data[\"AP_SUBSAMPLE\"];\n        let AP_TEST = response.data[\"AP_TEST\"];\n        delete response.data[\"AP_SAMPLE\"];\n        delete response.data[\"AP_SUBSAMPLE\"];\n        delete response.data[\"AP_TEST\"];\n        let masterData = { ...inputParam.masterData,\n          ...response.data,\n          APSelectedSample: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\n          APSelectedSubSample: replaceUpdatedObject(AP_SUBSAMPLE, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\"),\n          //APSelectedSubSample: getSameRecordFromTwoArrays(response.data.updatedSubSample, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\", undefined),\n          APSelectedTest: replaceUpdatedObject(AP_TEST, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\") //APSelectedTest: getSameRecordFromTwoArrays(response.data.updatedTest, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\", undefined),\n\n        }; // let masterData = {\n        //     ...inputParam.masterData,\n        //     ...response.data,\n        //     AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        //     AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        //     AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n        // }\n        // dispatch({type: DEFAULT_RETURN, payload:{\n        // masterData:{\n        //     ...inputParam.inputData.masterData,\n        //     ...response.data, \n        //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\n        //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n        //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\n        // },\n        //     loading:false ,\n        //     loadEsign:false,\n        //     openChildModal:false                     \n        // }}) \n\n        let respObject = {\n          masterData,\n          inputParam,\n          openChildModal: false,\n          operation: \"dynamic\",\n          masterStatus: \"\",\n          errorCode: undefined,\n          loadEsign: false,\n          showEsign: false,\n          selectedRecord: {},\n          loading: false,\n          availableReleaseRecord: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        }); //toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\n      //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realApprovalVersionList: inputData.realApprovalVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realRegTypeList: inputData.realRegTypeList,\n            realRegSubTypeList: inputData.realRegSubTypeList,\n            realFilterStatusList: inputData.realFilterStatusList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realApprovalVersionList: inputData.realApprovalVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realRegTypeList: inputData.realRegTypeList,\n            realRegSubTypeList: inputData.realRegSubTypeList,\n            realFilterStatusList: inputData.realFilterStatusList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApproveConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //toast.warn(\"Please Select All the Values in Filter\");\n      toast.warn(intl.FormattedMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; //  responseData = sortData(responseData)\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList,\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList,\n            realRegTypeList: inputParam.inputData.realRegTypeList,\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList,\n            realFilterStatusList: inputParam.inputData.realFilterStatusList // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterEdit(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\n      userinfo: inputParam.userInfo\n    };\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getEditParameter\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...responseData,\n            loading: false,\n            openChildModal: true,\n            operation: \"update\",\n            screenName: \"IDS_APPROVALPARAMETER\" // ncontrolCode:inputParam.ncontrolCode,\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTTEST\"\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        if (inputParam.operation === 'dynamic') {\n          const methodUrl = \"performaction\";\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n        } else if (inputParam.operation === 'reportgeneration') {\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']));\n        } else if (inputParam.operation === 'decision') {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]));\n        } else if (inputParam.operation === 'enforce') {\n          const methodUrl = inputParam.screenData.inputParam.methodUrl;\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(updateEnforceStatus(inputParam[\"screenData\"].inputParam));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function previewSampleReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let ndecisionStatus = inputParam.sample.ndecisionstatus;\n\n    if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\n      ndecisionStatus = transactionStatus.PASS;\n    }\n\n    const inputData = {\n      ndecisionstatus: ndecisionStatus,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n      nreporttypecode: REPORTTYPE.SAMPLEREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.sample.nregtypecode,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      npreregno: inputParam.sample.npreregno\n    };\n    rsapi.post(\"approval/previewSampleReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCOAReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo, idsName, dataField) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getEnforceCommentsHistory\", {\n      ntransactionresultcode: selectedParam.ntransactionresultcode,\n      userinfo: userInfo,\n      fetchField: dataField\n    }).then(response => {\n      if (response.data.length > 0) {\n        masterData = { ...masterData,\n          enforceCommentsHistory: response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData,\n            openChildModal: true,\n            operation: \"view\",\n            screenName: \"IDS_ENFORCECOMMENTHISTORY\",\n            idsName: idsName,\n            dataField: dataField\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function reportGenerate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      userinfo: inputParam.userinfo,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      reportName: \"RJ_Testwise_Report_QRCode\",\n      reportFormat: \"pdf\"\n    };\n    rsapi.post(\"reportjasper/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        if (response.data.filePath) {\n          // let user = response;\n          let elnURL = response.data.filePath;\n          window.open(elnURL, '_blank');\n        } else {\n          toast.info(intl.FormattedMessage({\n            id: \"IDS_ELNUIURLNOTAVAILABLE\"\n          }));\n        } // document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filePath);\n        // document.getElementById(\"download_data\").click();\n\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSubSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.ntransactionsamplecode.length > 0) {\n      let inputParamData = {\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"attachment/getSubSampleAttachment\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"comments/getSubSampleComment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                APSelectedSubSample: inputData.APSelectedSubSample // selectedTestCode: inputData.ntransactiontestcode,\n\n              },\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              APSelectedSample: inputData.APSelectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      //toast.warn(\"Please Select a Sample\");\n      toast.warn(intl.FormattedMessage({\n        id: \"IDS_PLSSELECTASAMPLE\"\n      }));\n    }\n  };\n}\nexport function ViewPatientDetails(masterData, screenName, userInfo, viewdetails) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const selectedRecord = {\n      ntestcode: viewdetails.test.ntestcode\n    };\n    rsapi.post(\"approval/getSampleViewDetails\", {\n      selectedRecord,\n      PatientId: viewdetails.test.spatientid,\n      npreregno: viewdetails.test.npreregno,\n      userinfo: userInfo\n    }).then(response => {\n      masterData['AuditModifiedComments'] = [];\n      masterData['AuditModifiedComments'] = response.data['AuditModifiedComments'];\n      masterData['CurrentResult'] = [];\n      masterData['CurrentResult'] = response.data['CurrentResult'];\n      masterData['viewdetails'] = [];\n      masterData['viewdetails'] = response.data['viewdetails'][0]; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_PREVIOUSRESULTVIEW\",\n          operation: \"\",\n          loading: false,\n          openChildModal: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBasedCompletedBatch(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getTestBasedOnCompletedBatch\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data // defaultTestvalues: inputData.defaultTestvalues //,\n            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\n            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateEnforceStatus(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateEnforceStatus\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      replaceUpdatedObject(responseData[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\n      replaceUpdatedObject(responseData[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n      replaceUpdatedObject(responseData[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\n      delete responseData[\"AP_SAMPLE\"];\n      delete responseData[\"AP_SUBSAMPLE\"];\n      delete responseData[\"AP_TEST\"];\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        APSelectedSample: replaceUpdatedObject(responseData.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\n        APSelectedSubSample: replaceUpdatedObject(responseData.updatedSubSample, inputParam.masterData.APSelectedSubSample, 'ntransactionsamplecode'),\n        APSelectedTest: replaceUpdatedObject(responseData.updatedTest, inputParam.masterData.APSelectedTest, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"update\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkReleaseRecord(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/checkReleaseRecord\", inputParam.inputData).then(response => {\n      let availableReleaseRecord;\n\n      if (response.data.rtn == \"Success\") {\n        availableReleaseRecord = true;\n      } else {\n        availableReleaseRecord = false;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          availableReleaseRecord,\n          loading: false,\n          action: inputParam.action,\n          ncontrolCode: inputParam.inputData.performaction.ncontrolCode\n        }\n      }); // else{\n      //     dispatch(performAction(inputParam))\n      // } \n      // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\n      }\n    });\n  };\n}\nexport function getTestResultCorrection(inputParam) {\n  return function (dispatch) {\n    let transactiontestcode = inputParam.APSelectedTest && inputParam.APSelectedTest.filter(i => i.ntransactionstatus === 25).map(item => item.ntransactiontestcode).join(\",\");\n    let inputData = {\n      userinfo: inputParam.userInfo,\n      ntransactiontestcode: transactiontestcode\n    };\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getTestResultCorrection\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        let masterData = { ...inputParam.masterData,\n          ...response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            openChildModal: true,\n            operation: \"\",\n            screenName: \"IDS_RESULTCORRECTION\" // ncontrolCode:inputParam.ncontrolCode,\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTCOMPLETETEST\"\n        }\n      });\n    }\n  };\n}\nexport function fetchParameterDetails(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      ntransactionresultcode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getReleaseResults\", inputParamData).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.ReleaseParameter;\n      let predefDefaultFlag = false;\n      parameterResults.map((param, index) => {\n        selectedResultGrade[index] = {\n          ngradecode: param.ngradecode\n        };\n        paremterResultcode[index] = param.ntransactionresultcode;\n        let jsondata = JSON.parse(param.jsondata['value']);\n\n        if (jsondata.hasOwnProperty('additionalInfo')) {\n          additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n        }\n\n        predefDefaultFlag = false;\n        response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n          if (!predefDefaultFlag) {\n            predefDefaultFlag = true;\n            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n          }\n        });\n\n        if (parameterResults[index][\"nparametertypecode\"] == 1) {\n          parameterResults[index][\"nresultaccuracycode\"] = {\n            \"value\": parameterResults[index][\"nresultaccuracycode\"],\n            \"label\": parameterResults[index][\"sresultaccuracyname\"]\n          };\n          parameterResults[index][\"nunitcode\"] = {\n            \"value\": parameterResults[index][\"nunitcode\"],\n            \"label\": parameterResults[index][\"sunitname\"]\n          };\n        }\n\n        param['editable'] = false;\n      });\n      const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\", \"sresultaccuracyname\", undefined, undefined, false);\n      const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\n      const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\", \"sunitname\", undefined, undefined, false);\n      const Unit = UnitList.get(\"OptionList\"); //parameterResults[0]= {...parameterResults,nunitcode };\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"IDS_RESULTCORRECTION\",\n          masterData: { ...editParam.masterData,\n            ...response.data,\n            paremterResultcode,\n            //,\n            selectedResultGrade,\n            ResultAccuracy,\n            Unit\n          },\n          selectedRecord: {\n            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n            selectedResultGrade: selectedResultGrade,\n            ReleaseParameter: parameterResults //response.data.ReleaseParameter\n\n          },\n          parameterResults: response.data.ReleaseParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          openModal: true,\n          modalShow: true,\n          //operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_CHANGERESULT\"\n          }),\n          selectedId: editParam.primaryKeyValue,\n          ncontrolcode: editParam.editResultId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ApprovalAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","sortDataByParent","postCRUDOrganiseTransSearch","REPORTTYPE","checkBoxOperation","reportCOAType","transactionStatus","intl","getsubSampleDetail","inputData","isServiceRequired","isParentValue","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","activeSubSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","searchedSubSample","length","SINGLESELECT","nbatchmastercode","activeName","dataStateName","subSample","post","then","response","responseData","data","APSelectedSample","oldSelectedTest","APSelectedTest","AP_TEST","skipInfo","oldSelectedSubSample","APSelectedSubSample","childTabsKey","removeElementFromArray","AP_SUBSAMPLE","AP_SAMPLE","selectedPreregno","searchTestRef","undefined","current","value","searchSubSampleRef","MULTISELECT","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","ApprovalParameter","RegistrationSampleAttachment","QUICKSELECTALL","QUICKSELECTSTATUS","RegistrationTestAttachment","RegistrationAttachment","RegistrationSampleComment","RegistrationTestComment","RegistrationComment","testskip","testtake","subSampleSkip","subSampleTake","oldApprovalParameter","APSelectedSubSamplenew","bool","ResultUsedInstrument","ResultUsedTasks","ApprovalResultChangeHistory","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","list","dbData","selectedTest","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","activeTabIndex","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","x","join","getTestDetail","getTestChildTabDetail","null","wholeSubsampleList","testList","subSampleCommentDataState","subSampleAttachmentDataState","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","APselectedTest","selectedTestCode","activeTabId","availableReleaseRecord","screenName","RegistrationTestHistory","getSampleChildTabDetail","OrderCodeData","selectedSample","selectedId","formatMessage","id","performAction","inputParam","rtn","updatedSample","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","openModal","updateDecision","updatedSubSample","updatedTest","getRegistrationType","SampleTypeValue","realApprovalVersionList","realDesignTemplateMappingList","realRegTypeList","realRegSubTypeList","realFilterStatusList","getRegistrationSubType","RegTypeValue","getFilterStatus","RegSubTypeValue","getFilterBasedTest","DesignTemplateMappingValue","FormattedMessage","getApprovalVersion","getApprovalSample","searchSampleRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getParameterEdit","item","multilingualMsg","validateEsignforApproval","methodUrl","toLowerCase","generateCOAReport","screenData","updateEnforceStatus","previewSampleReport","ndecisionStatus","sample","ndecisionstatus","DRAFT","PASS","nprimarykey","ncoareporttypecode","SAMPLECERTIFICATEPRIVIEW","nreporttypecode","SAMPLEREPORT","sprimarykeyname","ncontrolcode","document","getElementById","setAttribute","filepath","click","SAMPLEWISE","COAREPORT","getEnforceCommentsHistory","selectedParam","idsName","dataField","fetchField","enforceCommentsHistory","reportGenerate","reportName","reportFormat","filePath","elnURL","window","open","info","getSubSampleChildTabDetail","ViewPatientDetails","viewdetails","PatientId","spatientid","getTestBasedCompletedBatch","checkReleaseRecord","action","performaction","getTestResultCorrection","transactiontestcode","i","fetchParameterDetails","editParam","additionalInfo","selectedResultGrade","paremterResultcode","parameterResults","ReleaseParameter","predefDefaultFlag","param","ngradecode","jsondata","JSON","parse","hasOwnProperty","PredefinedValues","predefinedvalue","ResultAccuracyList","ResultAccuracy","UnitList","Unit","isParameterInitialRender","modalShow","modalTitle","editResultId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName, reArrangeArrays,sortDataByParent } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport { REPORTTYPE, checkBoxOperation, reportCOAType, transactionStatus } from '../components/Enumeration';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getsubSampleDetail(inputData, isServiceRequired,isParentValue) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeTestTab,\r\n            activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode : inputData.ndesigntemplatemappingcode ? inputData.ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            // checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n            //     inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation,\r\n\r\n            checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n                inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:checkBoxOperation.SINGLESELECT:inputData.checkBoxOperation,   \r\n\r\n           // noParameterget:inputData.checkBoxOperation == 1 ? 3 : 4,\r\n           // noParameterget:inputData.checkBoxOperation == checkBoxOperation.MULTISELECT ? checkBoxOperation.SINGLESELECT : checkBoxOperation.,\r\n            nbatchmastercode:inputData.nbatchmastercode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalSubSample\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, APSelectedSample: inputData.APSelectedSample }\r\n                    responseData = sortData(responseData);\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : []\r\n                    inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                    //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    \r\n                    \r\n                    if (subSample) {\r\n                        \r\n                        let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                        let AP_TEST = inputData.masterData.AP_TEST\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        if(isParentValue){\r\n                        inputData.masterData.AP_SUBSAMPLE= sortDataByParent(responseData['AP_SUBSAMPLE'],inputData.masterData.AP_SAMPLE, \"npreregno\");\r\n                    }\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.AP_SUBSAMPLE[0]] : [],\r\n                        }\r\n                        \r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        //if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 5) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {    \r\n\r\n                            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    APSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const APSelectedTest = oldSelectedTest.length >0 ? getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.APSelectedSubSample, 'npreregno') : responseData.APSelectedTest\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest,\r\n                                AP_TEST,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter,\r\n                                RegistrationSampleAttachment : responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0  ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment: masterData.RegistrationSampleAttachment\r\n                            }\r\n                        }\r\n                       // if(inputData.checkBoxOperation === 7 )\r\n                        if(inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL)\r\n                        {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest:responseData.APSelectedTest,\r\n                                AP_TEST:responseData.AP_TEST,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter,\r\n                                RegistrationSampleAttachment : responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0  ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment: masterData.RegistrationSampleAttachment\r\n                            }\r\n                        }\r\n                        //if (inputData.checkBoxOperation === 3) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.SINGLESELECT || inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {    \r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : [],\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :masterData.ApprovalParameter : masterData.ApprovalParameter,\r\n                                RegistrationSampleAttachment : responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0  ? responseData.RegistrationSampleAttachment : []: [],\r\n                                RegistrationTestAttachment : responseData.RegistrationTestAttachment ? responseData.RegistrationTestAttachment.length > 0  ? responseData.RegistrationTestAttachment : []: [],\r\n                                RegistrationAttachment : responseData.RegistrationAttachment ? responseData.RegistrationAttachment.length > 0  ? responseData.RegistrationAttachment : []: [],\r\n                                RegistrationSampleComment : responseData.RegistrationSampleComment ? responseData.RegistrationSampleComment.length > 0  ? responseData.RegistrationSampleComment : []: [],\r\n                                RegistrationTestComment : responseData.RegistrationTestComment ? responseData.RegistrationTestComment.length > 0  ? responseData.RegistrationTestComment : []: [],\r\n                                RegistrationComment : responseData.RegistrationComment ? responseData.RegistrationComment.length > 0  ? responseData.RegistrationComment : []: []\r\n                               \r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        // let bool = false;\r\n                        // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                        // if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                        //     bool = true\r\n                        // }\r\n                        // if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        // }\r\n                    }\r\n                    else {\r\n                        let oldApprovalParameter = inputData.masterData.ApprovalParameter;\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        let APSelectedSubSamplenew = []\r\n                        APSelectedSubSamplenew=[\r\n                        ...inputData.masterData.APSelectedSubSample,\r\n                        ...response.data.APSelectedSubSample];\r\n\r\n\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            //APSelectedSubSample: inputData.masterData.APSelectedSubSample,\r\n                            APSelectedSubSample:APSelectedSubSamplenew,\r\n                            APSelectedTest: inputData.masterData.APSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        // if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        //     inputData.searchSubSampleRef.current.value = \"\";\r\n                        //     masterData['searchedSubSample'] = undefined\r\n                        // }\r\n                        // if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        //     inputData.searchTestRef.current.value = \"\"\r\n                        //     masterData['searchedTests'] = undefined\r\n                        // }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        //if (inputData.checkBoxOperation === 1) {\r\n                        if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {    \r\n\r\n                            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                inputData.masterData['ApprovalParameter'] = oldApprovalParameter\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    //AP_TEST:responseData.AP_TEST,\r\n                                    ApprovalParameter:oldApprovalParameter,\r\n                                    APSelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                       // } else if (inputData.checkBoxOperation === 5) {\r\n                        } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {    \r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                           \r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    dbData = response.data.ResultUsedInstrument || []\r\n                                    list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    dbData = response.data.ResultUsedTasks || []\r\n                                    list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    dbData = response.data.ApprovalResultChangeHistory || []\r\n                                    list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    dbData = response.data.ApprovalHistory || []\r\n                                    list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                default:\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } \r\n                       // else if(inputData.checkBoxOperation === 7 )\r\n                        else if(inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL)\r\n                        {\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     APSelectedTest:responseData.APSelectedTest,\r\n                            //     AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            // }\r\n\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                          \r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    list = response.data.ApprovalParameter || []\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    list = response.data.ResultUsedInstrument || []\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    list = response.data.ResultUsedTasks || []\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    list = response.data.ApprovalResultChangeHistory || []\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    list = response.data.ApprovalHistory || []\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    list = response.data.ApprovalParameter?[...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]:\r\n                                    [...inputData.masterData.ApprovalParameter]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }else {\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                          \r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    list = response.data.ApprovalParameter || []\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    list = response.data.ResultUsedInstrument || []\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    list = response.data.ResultUsedTasks || []\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    list = response.data.ApprovalResultChangeHistory || []\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    list = response.data.ApprovalHistory || []\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    list = response.data.ApprovalParameter?[...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]:\r\n                                    [...inputData.masterData.ApprovalParameter]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeSubSampleTab:inputData.activeSubSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n            let isGrandChildGetRequired = false;\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = false;\r\n                } else {\r\n                    isGrandChildGetRequired = true;\r\n                }\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n        \r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, APSelectedSample, APSelectedSubSample, APSelectedTest }\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                //     APSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\r\n                // }\r\n\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT,masterData,...skipInfo\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (APSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                       // inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"checkBoxOperation\"] = checkBoxOperation.SINGLESELECT\r\n                        inputData[\"childTabsKey\"] = [\"AP_TEST\"]\r\n                        dispatch(getTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetail(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n\r\n                // dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n              \r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    APSelectedTest: TestSelected ? TestSelected :inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\r\n                    APSelectedSample: inputData.APSelectedSample,\r\n                    APSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.AP_SUBSAMPLE.length>0 ? [inputData.masterData.AP_SUBSAMPLE[0]]:[]\r\n                }\r\n                let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                });\r\n\r\n                if(subSample)\r\n                {\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n    \r\n                }\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    case \"IDS_RESULTS\":\r\n                        ApprovalParameter = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName (inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].npreregno, \"npreregno\"): filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                        break;\r\n                    case \"IDS_INSTRUMENT\":\r\n                        ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TASK\":\r\n                        ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_RESULTCHANGEHISTORY\":\r\n                        ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTAPPROVALHISTORY\":\r\n                        ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    default:\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory,\r\n                            ...skipInfo,\r\n                        },\r\n                        ...skipInfo,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        activeSubSampleTab:inputData.activeSubSampleTab,\r\n                        activeTabIndex: inputData.activeTabIndex\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ntransactionstatus:inputData.ntransactionstatus,\r\n          //  ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            ndesigntemplatemappingcode : inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            nbatchmastercode:inputData.nbatchmastercode\r\n\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let masterData = {};\r\n        let subSample = inputData.nneedsubsample;\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalTest\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    //responseData = sortData(responseData,'descending', 'npreregno')\r\n                    inputData.searchTestRef.current.null = \"\"\r\n                    //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n\r\n                    inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.masterData.APSelectedTest,\r\n                        // APselectedSample: inputData.APSelectedSample,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subSampleSkip) {\r\n                        subSampleSkip = 0;\r\n                    }\r\n                    // if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    let skipInfo = {}\r\n                    // if (bool) {\r\n                        skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                    // }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n\r\n\r\n                    //if (inputData.checkBoxOperation === 1) {\r\n                    if (inputData.checkBoxOperation === checkBoxOperation.MULTISELECT) {    \r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                       \r\n                        ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        if(subSample)\r\n                        {\r\n                            let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.map((test, index) => {\r\n                                if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                       \r\n                        ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\r\n                            switch (inputData.activeSubSampleTab) {\r\n                                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                    RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleComment\"\r\n                                    dataStateName = \"subSampleCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleAttachment\"\r\n                                    dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                  //  } else if (inputData.checkBoxOperation === 5) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTSTATUS) {    \r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.ResultUsedInstrument || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ApprovalResultChangeHistory || []\r\n                                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                dbData = response.data.ApprovalHistory || []\r\n                                list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                   // } else if (inputData.checkBoxOperation === 7) {\r\n                    } else if (inputData.checkBoxOperation === checkBoxOperation.QUICKSELECTALL) {    \r\n                        let testList = reArrangeArrays( inputData.masterData.AP_SUBSAMPLE, responseData.AP_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest:[testList[0]],\r\n                            AP_TEST: testList,\r\n                            ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n                        // let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                    \r\n                         let keepOld = false;\r\n                        // let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         APSelectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        //     ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\"\r\n                        // }\r\n                        let ntransactiontestcode = testList.length > 0 ? testList[0].ntransactiontestcode : \"\"\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter =  getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = response.data.APSelectedTest ? response.data.APSelectedTest.length > 0 ? \r\n                                response.data.APSelectedTest[0].ntransactiontestcode : inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ?  inputData.masterData.AP_TEST[0].ntransactiontestcode :-1:-1:-1\r\n                                \r\n                                //inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode: -1 : -1\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.ApprovalParameter || []\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument || []\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks || []\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ApprovalResultChangeHistory || []\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                list = response.data.ApprovalHistory || []\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.ApprovalParameter?[...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]:\r\n                                [...inputData.masterData.ApprovalParameter]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if(subSample)\r\n                        {\r\n                            let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.map((test, index) => {\r\n                                if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     //AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:oldApprovalParameter,\r\n                            //     APSelectedSubSample: oldSelectedSubSample\r\n                            // }\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n                       \r\n                       // ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\r\n                            switch (inputData.activeSubSampleTab) {\r\n                                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                    RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleComment\"\r\n                                    dataStateName = \"subSampleCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleAttachment\"\r\n                                    dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        subSampleCommentDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        subSampleAttachmentDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            ...skipInfo,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let TestSelected = \r\n          inputData[\"statusNone\"] ?\r\n            getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n            filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.masterData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.APSelectedSubSample\r\n                //let APSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\r\n                let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\r\n                let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n                }\r\n                // inputData = {\r\n                //     ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                //         \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                //     APSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                // }\r\n\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: checkBoxOperation.SINGLESELECT, skipInfo\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } \r\n            else {\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        APSelectedTest: TestSelected ? TestSelected : inputData.masterData.AP_TEST.length > 0 ?\r\n                            [inputData.masterData.AP_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    });\r\n                    if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ?\r\n                            inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        case \"IDS_RESULTS\":\r\n                            ApprovalParameter = keepOld ? \r\n                            inputData[\"statusNone\"] ?\r\n                            getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):\r\n                            filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_INSTRUMENT\":\r\n                            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TASK\":\r\n                            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_RESULTCHANGEHISTORY\":\r\n                            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTAPPROVALHISTORY\":\r\n                            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        default:\r\n                            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        //}\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_TESTHISTORY\":\r\n                    url = \"history/getTestHistory\"\r\n                    activeName = \"RegistrationTestHistory\"\r\n                    dataStateName = \"registrationTestHistoryDataState\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample, selectedTest: inputData.APselectedTest }\r\n                            //responseData = inputData.checkBoxOperation === 7 ?  sortData( response.data,\"descending\",\"npreregno\"):responseData;\r\n                            //sortData( responseData,\"descending\",\"ntransactionsamplecode\")\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                APSelectedSample: inputData.APSelectedSample || inputData.masterData.APSelectedSample,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\r\n                                APSelectedTest: inputData.APSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode ? inputData.ntransactionsamplecode :inputData.masterData.APSelectedSubSample[0].ntransactionsamplecode ,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                                activeTabIndex:inputData.activeTabIndex,\r\n                                activeTabId:inputData.activeTabId\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    availableReleaseRecord:undefined,\r\n                                    activeTabIndex:inputData.activeTabIndex,\r\n                                    activeTabId:inputData.activeTabId,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.APSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            availableReleaseRecord:undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        availableReleaseRecord:undefined,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory, RegistrationTestHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                case \"IDS_TESTHISTORY\":\r\n                    RegistrationTestHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo,\r\n                OrderCodeData: inputData.OrderCodeData ? inputData.OrderCodeData : -1\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                case \"IDS_EXTERNALORDERREPORTS\":\r\n                    url = \"registration/getExternalOrderAttachment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                activeTestTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName,\r\n                                selectedId: null,\r\n                                activeTabIndex: inputData.activeTabIndex\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            \r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                    replaceUpdatedObject(response.data[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\r\n\r\n                    let AP_SAMPLE = response.data[\"AP_SAMPLE\"];\r\n                    let AP_SUBSAMPLE = response.data[\"AP_SUBSAMPLE\"];\r\n                    let AP_TEST = response.data[\"AP_TEST\"];\r\n\r\n\r\n                    delete response.data[\"AP_SAMPLE\"];\r\n                    delete response.data[\"AP_SUBSAMPLE\"];\r\n                    delete response.data[\"AP_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.masterData,\r\n                         ...response.data,\r\n                         APSelectedSample: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\r\n                          APSelectedSubSample: replaceUpdatedObject(AP_SUBSAMPLE, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\"),\r\n                         //APSelectedSubSample: getSameRecordFromTwoArrays(response.data.updatedSubSample, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\", undefined),\r\n                         APSelectedTest: replaceUpdatedObject(AP_TEST, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\"),\r\n                        //APSelectedTest: getSameRecordFromTwoArrays(response.data.updatedTest, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\", undefined),\r\n                    }\r\n                // let masterData = {\r\n                //     ...inputParam.masterData,\r\n                //     ...response.data,\r\n                //     AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                //     AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                //     AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n                // }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\r\n                //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    availableReleaseRecord:undefined                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n                \r\n            }else{\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false\r\n                    }\r\n                });\r\n                //toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\r\n                //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realApprovalVersionList:inputData.realApprovalVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realRegTypeList:inputData.realRegTypeList,\r\n                            realRegSubTypeList :inputData.realRegSubTypeList,\r\n                            realFilterStatusList:inputData.realFilterStatusList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realApprovalVersionList:inputData.realApprovalVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realRegTypeList:inputData.realRegTypeList,\r\n                            realRegSubTypeList :inputData.realRegSubTypeList,\r\n                            realFilterStatusList:inputData.realFilterStatusList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApproveConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue:inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            //toast.warn(\"Please Select All the Values in Filter\");\r\n            toast.warn(intl.FormattedMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n              //  responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realApprovalVersionList:inputParam.inputData.realApprovalVersionList,\r\n                            realDesignTemplateMappingList:inputParam.inputData.realDesignTemplateMappingList,\r\n                            realRegTypeList:inputParam.inputData.realRegTypeList,\r\n                            realRegSubTypeList :inputParam.inputData.realRegSubTypeList,\r\n                            realFilterStatusList:inputParam.inputData.realFilterStatusList\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getParameterEdit(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getEditParameter\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"update\",\r\n                            screenName: \"IDS_APPROVALPARAMETER\"\r\n                            // ncontrolCode:inputParam.ncontrolCode,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTTEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function validateEsignforApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    if (inputParam.operation === 'dynamic') {\r\n                        const methodUrl = \"performaction\"\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                        }\r\n                        dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    } else if (inputParam.operation === 'reportgeneration') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']))\r\n                    }\r\n                    else if (inputParam.operation === 'decision') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    }\r\n                    else if (inputParam.operation === 'enforce') {\r\n                        const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n    \r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                        }\r\n                        dispatch(updateEnforceStatus(inputParam[\"screenData\"].inputParam))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function previewSampleReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        let ndecisionStatus = inputParam.sample.ndecisionstatus;\r\n        if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\r\n            ndecisionStatus = transactionStatus.PASS;\r\n        }\r\n        const inputData = {\r\n            ndecisionstatus: ndecisionStatus,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n            nreporttypecode: REPORTTYPE.SAMPLEREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.sample.nregtypecode,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            npreregno: inputParam.sample.npreregno\r\n        }\r\n        rsapi.post(\"approval/previewSampleReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateCOAReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo,idsName,dataField) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getEnforceCommentsHistory\", {\r\n            ntransactionresultcode: selectedParam.ntransactionresultcode,\r\n            userinfo: userInfo,\r\n            fetchField:dataField\r\n        })\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    masterData = { ...masterData, enforceCommentsHistory: response.data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData,\r\n                            openChildModal: true,\r\n                            operation: \"view\",\r\n                            screenName: \"IDS_ENFORCECOMMENTHISTORY\",\r\n                            idsName:idsName,\r\n                            dataField:dataField\r\n                        }\r\n                    })\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\" } })\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function reportGenerate(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            userinfo: inputParam.userinfo,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            reportName:\"RJ_Testwise_Report_QRCode\",\r\n            reportFormat:\"pdf\"\r\n           \r\n        }\r\n        rsapi.post(\"reportjasper/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n\r\n                    if (response.data.filePath) {\r\n                       // let user = response;\r\n                        let elnURL = response.data.filePath;\r\n                        window.open(elnURL, '_blank');\r\n                    } else {\r\n                        toast.info(intl.FormattedMessage({\r\n                            id: \"IDS_ELNUIURLNOTAVAILABLE\"\r\n                        }))\r\n                    }\r\n\r\n                    // document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filePath);\r\n                    // document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSubSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactionsamplecode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSubSampleTab) {\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSubSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"comments/getSubSampleComment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    APSelectedSubSample: inputData.APSelectedSubSample,\r\n                                   // selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeTestTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            //toast.warn(\"Please Select a Sample\");\r\n            toast.warn(intl.FormattedMessage({\r\n                id: \"IDS_PLSSELECTASAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function ViewPatientDetails(masterData, screenName, userInfo, viewdetails) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const selectedRecord={\r\n            ntestcode:viewdetails.test.ntestcode\r\n        }\r\n        rsapi.post(\"approval/getSampleViewDetails\", { selectedRecord, PatientId:viewdetails.test.spatientid, npreregno: viewdetails.test.npreregno, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData['AuditModifiedComments'] = [];\r\n                masterData['AuditModifiedComments'] = response.data['AuditModifiedComments']\r\n                masterData['CurrentResult'] = [];\r\n                masterData['CurrentResult'] = response.data['CurrentResult']\r\n                masterData['viewdetails'] = [];\r\n                masterData['viewdetails'] = response.data['viewdetails'][0]\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_PREVIOUSRESULTVIEW\",\r\n                        operation: \"\",\r\n                        loading: false,\r\n                        openChildModal: true,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function  getTestBasedCompletedBatch (inputData){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getTestBasedOnCompletedBatch\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                           // defaultTestvalues: inputData.defaultTestvalues //,\r\n                            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateEnforceStatus(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateEnforceStatus\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                replaceUpdatedObject(responseData[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\r\n                replaceUpdatedObject(responseData[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(responseData[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\r\n\r\n                delete responseData[\"AP_SAMPLE\"];\r\n                delete responseData[\"AP_SUBSAMPLE\"];\r\n                delete responseData[\"AP_TEST\"];\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    APSelectedSample: replaceUpdatedObject(responseData.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\r\n                    APSelectedSubSample: replaceUpdatedObject(responseData.updatedSubSample, inputParam.masterData.APSelectedSubSample, 'ntransactionsamplecode'),\r\n                    APSelectedTest: replaceUpdatedObject(responseData.updatedTest, inputParam.masterData.APSelectedTest, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"update\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function checkReleaseRecord(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/checkReleaseRecord\", inputParam.inputData)\r\n            .then(response => {\r\n                let availableReleaseRecord;\r\n                if(response.data.rtn==\"Success\"){\r\n                    availableReleaseRecord = true\r\n                }else{\r\n                    availableReleaseRecord = false\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        availableReleaseRecord,\r\n                        loading: false,\r\n                        action:inputParam.action,\r\n                        ncontrolCode:inputParam.inputData.performaction.ncontrolCode\r\n                    }\r\n                });\r\n                // else{\r\n                //     dispatch(performAction(inputParam))\r\n                // } \r\n\r\n               // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n              \r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getTestResultCorrection(inputParam) {\r\n    return function (dispatch) {\r\n        let transactiontestcode= inputParam.APSelectedTest && inputParam.APSelectedTest.filter(i => i.ntransactionstatus===25).map(item => item.ntransactiontestcode).join(\",\");\r\n        let inputData = {\r\n            userinfo: inputParam.userInfo,\r\n            ntransactiontestcode:transactiontestcode\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getTestResultCorrection\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    let masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...response.data\r\n                                }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"\",\r\n                            screenName: \"IDS_RESULTCORRECTION\"\r\n                            // ncontrolCode:inputParam.ncontrolCode,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTCOMPLETETEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function fetchParameterDetails(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            ntransactionresultcode: editParam.primaryKeyValue,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getReleaseResults\", inputParamData)\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.ReleaseParameter\r\n                let predefDefaultFlag = false;\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                    paremterResultcode[index] = param.ntransactionresultcode;\r\n                    let jsondata = JSON.parse(param.jsondata['value'])\r\n                    if (jsondata.hasOwnProperty('additionalInfo')) {\r\n                        additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo']\r\n                    }\r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                            if (!predefDefaultFlag) {\r\n                                predefDefaultFlag = true;\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    undefined, undefined).get(\"OptionList\");\r\n                            }\r\n                        });\r\n                        if( parameterResults[index][\"nparametertypecode\"] ==1) {\r\n                            parameterResults[index][\"nresultaccuracycode\"] ={\r\n                                \"value\": parameterResults[index][\"nresultaccuracycode\"],\r\n                                \"label\": parameterResults[index][\"sresultaccuracyname\"],\r\n                            };\r\n\r\n                            parameterResults[index][\"nunitcode\"] ={\r\n                                \"value\": parameterResults[index][\"nunitcode\"],\r\n                                \"label\": parameterResults[index][\"sunitname\"],\r\n                            };\r\n                        }\r\n                    param['editable'] = false;\r\n                    });\r\n\r\n                    const ResultAccuracyList = constructOptionList(response.data[\"ResultAccuracy\"] || [], \"nresultaccuracycode\",\"sresultaccuracyname\", undefined, undefined, false);   \r\n                    const ResultAccuracy = ResultAccuracyList.get(\"OptionList\");\r\n\r\n                    const UnitList = constructOptionList(response.data[\"Unit\"] || [], \"nunitcode\",\"sunitname\", undefined, undefined, false);   \r\n                    const Unit = UnitList.get(\"OptionList\");\r\n                     //parameterResults[0]= {...parameterResults,nunitcode };\r\n      \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        screenName: \"IDS_RESULTCORRECTION\",\r\n                        masterData: {\r\n                            ...editParam.masterData,\r\n                            ...response.data,\r\n                            paremterResultcode,//,\r\n                            selectedResultGrade,\r\n                            ResultAccuracy,\r\n                            Unit\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ReleaseParameter: parameterResults//response.data.ReleaseParameter\r\n\r\n                        },\r\n                        parameterResults: response.data.ReleaseParameter,\r\n                        isParameterInitialRender: true,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        modalShow: true,\r\n                        //operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_CHANGERESULT\" }),\r\n                        selectedId: editParam.primaryKeyValue,\r\n                        ncontrolcode: editParam.editResultId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}