{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\goodsin\\\\GoodsIn.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { callService, crudMaster, updateStore, getGoodsInFilterSubmit, validateEsignCredential, getGoodsInComboService, getGoodsInDetail, getClient, getProject, filterColumnData, getPreviewTemplate, viewInformation } from '../../actions';\nimport { toast } from 'react-toastify';\nimport { convertDateValuetoString, rearrangeDateFormat, getControlMap, showEsign, formatInputDate, comboChild, convertDateTimetoStringDBFormat, onDropAttachFileList, deleteAttachmentDropZone, Lims_JSON_stringify } from '../../components/CommonScript';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { Col, Row, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport GoodsInFilter from './GoodsInFilter';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport AddGoodsIn from './AddGoodsIn';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { SampleType, designProperties, transactionStatus } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faPlus, faFileImport, faEye } from '@fortawesome/free-solid-svg-icons';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport { ReactComponent as GoodsReceivedIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/goods-received.svg\";\nimport AddFile from './AddFile';\nimport GoodsInView from './GoodsInView';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass GoodsIn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      let masterData = this.props.Login.masterData;\n      masterData[dateName] = dateValue;\n      this.setState({\n        masterData\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realfromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realtoDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let masterData = { ...this.props.Login.masterData,\n        realfromDate,\n        realtoDate\n      };\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userinfo: this.props.Login.userInfo\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getGoodsInFilterSubmit(inputParam);\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let realfromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realtoDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let masterData = { ...this.props.Login.masterData,\n        realfromDate,\n        realtoDate\n      };\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userinfo: this.props.Login.userInfo\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getGoodsInFilterSubmit(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else if (event.target.name === \"noutofhours\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\n        }\n      } else {\n        if (event.target.value !== \"\") {\n          selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nclientcatcode\") {\n        selectedRecord[\"nclientcatcode\"] = comboData;\n        this.props.getClient(this.state.selectedRecord.nclientcatcode.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\n      } else if (fieldName === \"nclientcode\") {\n        selectedRecord[\"nclientcode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"nprojecttypecode\") {\n        selectedRecord[\"nprojecttypecode\"] = comboData;\n        this.props.getProject(this.state.selectedRecord.nprojecttypecode.value, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\n      } else if (fieldName === \"nprojectmastercode\") {\n        selectedRecord[\"nprojectmastercode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ncouriercode\") {\n        selectedRecord[\"ncouriercode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onDynamicComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let comboName = customName || control.label;\n\n      if (comboData) {\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          \"pkey\": control.valuemember,\n          \"nquerybuildertablecode\": control.nquerybuildertablecode,\n          source: control.source\n        };\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = control => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.GoodsInSample, event.dataState),\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.screenName === \"IDS_GOODSIN\") {\n        if (this.state.selectedRecord[\"nnoofpackages\"] <= 0) {\n          return toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_ENTERTHEPACKAGEGREATERTHANZERO\"\n          }));\n        }\n\n        let postParam = undefined;\n        let dataState = undefined;\n        let inputData = [];\n        inputData[\"goodsin\"] = {};\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n\n        if (this.props.Login.operation === \"update\") {\n          postParam = {\n            inputListName: \"GoodsIn\",\n            selectedObject: \"selectedGoodsIn\",\n            primaryKeyField: \"ngoodsincode\"\n          };\n          postParam[\"primaryKeyValue\"] = this.props.Login.masterData.selectedGoodsIn.ngoodsincode;\n          inputData[\"goodsin\"][\"ngoodsincode\"] = this.props.Login.masterData.selectedGoodsIn.ngoodsincode;\n        }\n\n        inputData[\"goodsin\"][\"nclientcatcode\"] = this.state.selectedRecord[\"nclientcatcode\"] ? this.state.selectedRecord[\"nclientcatcode\"].value : -1;\n        inputData[\"goodsin\"][\"nclientcode\"] = this.state.selectedRecord[\"nclientcode\"] ? this.state.selectedRecord[\"nclientcode\"].value : -1;\n        inputData[\"goodsin\"][\"nprojecttypecode\"] = this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"].value : -1;\n        inputData[\"goodsin\"][\"nprojectmastercode\"] = this.state.selectedRecord[\"nprojectmastercode\"] ? this.state.selectedRecord[\"nprojectmastercode\"].value : -1;\n        inputData[\"goodsin\"][\"ncouriercode\"] = this.state.selectedRecord[\"ncouriercode\"] ? this.state.selectedRecord[\"ncouriercode\"].value : -1;\n        inputData[\"goodsin\"][\"nnoofpackages\"] = this.state.selectedRecord[\"nnoofpackages\"];\n        inputData[\"goodsin\"][\"noutofhours\"] = this.state.selectedRecord[\"noutofhours\"] ? this.state.selectedRecord[\"noutofhours\"] : transactionStatus.NO;\n        inputData[\"goodsin\"][\"sconsignmentno\"] = this.state.selectedRecord[\"sconsignmentno\"] ? this.state.selectedRecord[\"sconsignmentno\"] : \"\";\n        inputData[\"goodsin\"][\"ssecurityrefno\"] = this.state.selectedRecord[\"ssecurityrefno\"] ? this.state.selectedRecord[\"ssecurityrefno\"] : \"\";\n        inputData[\"goodsin\"][\"scomments\"] = this.state.selectedRecord[\"scomments\"] ? this.state.selectedRecord[\"scomments\"] : \"\";\n        inputData[\"goodsin\"][\"dgoodsindatetime\"] = formatInputDate(this.state.selectedRecord[\"dgoodsindatetime\"], false); //inputData[\"goodsin\"][\"ntzgoodsindatetime\"] = this.state.selectedRecord[\"ntimezonecode\"] ? this.state.selectedRecord[\"ntimezonecode\"].value : 1;\n\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"GoodsIn\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          selectedId: this.state.selectedRecord[\"ngoodsincode\"],\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          dataState,\n          searchRef: this.searchRef,\n          postParam: postParam\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_GOODSIN\"\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else if (this.props.Login.screenName === \"IDS_GOODSINSAMPLE\") {\n        this.insertGoodsInSample();\n      } else if (this.props.Login.screenName === \"IDS_GOODSINIMPORT\") {\n        this.importGoodsInSample();\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteGoodsIn(\"delete\", deleteId));\n    };\n\n    this.DeleteGoodsIn = (operation, ncontrolCode) => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      inputData[\"goodsin\"] = this.props.Login.masterData.selectedGoodsIn;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const postParam = {\n        inputListName: \"GoodsIn\",\n        selectedObject: \"selectedGoodsIn\",\n        primaryKeyField: \"ngoodsincode\",\n        primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\n        fetchUrl: \"goodsin/getActiveGoodsInById\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"GoodsIn\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_GOODSIN\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.receiveGoodsIn = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"goodsin\"] = this.props.Login.masterData.selectedGoodsIn;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const postParam = {\n        inputListName: \"GoodsIn\",\n        selectedObject: \"selectedGoodsIn\",\n        primaryKeyField: \"ngoodsincode\",\n        primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\n        fetchUrl: \"goodsin/getActiveGoodsInById\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"GoodsIn\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"receive\",\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_GOODSIN\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.approveGoodsIn = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"goodsin\"] = this.props.Login.masterData.selectedGoodsIn;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const postParam = {\n        inputListName: \"GoodsIn\",\n        selectedObject: \"selectedGoodsIn\",\n        primaryKeyField: \"ngoodsincode\",\n        primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\n        fetchUrl: \"goodsin/getActiveGoodsInById\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"GoodsIn\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"approve\",\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_GOODSIN\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.openSampleGoodsIn = () => {\n      const addSampleId = this.state.controlMap.has(\"AddSampleGoodsIn\") ? this.state.controlMap.get(\"AddSampleGoodsIn\").ncontrolcode : -1;\n      this.addSampleGoodsIn(\"IDS_GOODSINSAMPLE\", \"create\", this.props.Login.masterData, this.state.selectedRecord, this.props.Login.userInfo, addSampleId);\n    };\n\n    this.addSampleGoodsIn = (ScreenName, operation, masterData, selectedRecord, userInfo, controlCode, importData) => {\n      let data = [];\n      const withoutCombocomponent = [];\n      let mandatorySampleFields = [];\n      const Layout = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping[0].jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  if (componentrow.mandatory === true) {\n                    mandatorySampleFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                });\n              } else {\n                component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component);\n\n                if (component.mandatory === true) {\n                  mandatorySampleFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }\n            });\n            this.setState({\n              mandatorySampleFields: mandatorySampleFields\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        const mapOfFilterRegData = {\n          nsampletypecode: parseInt(SampleType.GOODSIN)\n        };\n        this.props.getPreviewTemplate(masterData, userInfo, controlCode, data, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, true, mapOfFilterRegData, false, operation, ScreenName, importData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURETEMPLATE\"\n        }));\n      }\n    };\n\n    this.ImportFile = () => {\n      const Status = this.props.Login.masterData.selectedGoodsIn.ntransactionstatus;\n      let updateInfo = {}; //  if(Status === transactionStatus.APPROVED ){\n      //      toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECEIVERECORD\" }));\n      //  }else {\n\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          operation: \"import\",\n          screenName: \"IDS_GOODSINIMPORT\"\n        }\n      };\n      this.props.updateStore(updateInfo); //}\n    };\n\n    this.onDropSampleFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.DeleteGoodsInSample = operation => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      inputData[\"ngoodsincode\"] = operation.selectedRecord.ngoodsincode;\n      inputData[\"ngoodsinsamplecode\"] = operation.selectedRecord.ngoodsinsamplecode;\n      inputData[\"ndesigntemplatemappingcode\"] = operation.selectedRecord.ndesigntemplatemappingcode;\n      inputData[\"ntransactionstatus\"] = this.props.Login.masterData.selectedGoodsIn.ntransactionstatus;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const postParam = {\n        inputListName: \"GoodsIn\",\n        selectedObject: \"selectedGoodsIn\",\n        primaryKeyField: \"ngoodsincode\",\n        primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\n        fetchUrl: \"goodsin/getActiveGoodsInById\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"GoodsInSample\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, operation.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_GOODSINSAMPLE\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.insertGoodsInSample = () => {\n      let Map = {};\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      Map[\"fromDate\"] = fromDate;\n      Map[\"toDate\"] = toDate;\n      Map[\"ngoodsincode\"] = this.props.Login.masterData.selectedGoodsIn.ngoodsincode;\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.DesignTemplateMapping[0].ndesigntemplatemappingcode;\n      const param = this.goodsInSample(this.props.Login.masterData, this.state.selectedRecord, this.props.Login.masterData.DesignTemplateMapping[0].jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.Login.comboComponents);\n      Map[\"GoodsInSample\"] = param.GoodsInSample;\n      Map[\"DateList\"] = param.dateList;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"GoodsInSample\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: Map,\n        selectedId: this.state.selectedRecord[\"ngoodsinsamplecode\"],\n        operation: 'create',\n        searchRef: this.searchRef\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_GOODSIN\"\n            }),\n            operation: 'create'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.goodsInSample = (masterData, selectedRecord, templateList, userInfo, defaulttimeZone, operation, comboComponents) => {\n      let GoodsInSample = {};\n      let dateList = [];\n      GoodsInSample[\"ngoodsincode\"] = masterData.selectedGoodsIn.ngoodsincode;\n      GoodsInSample[\"ndesigntemplatemappingcode\"] = masterData.DesignTemplateMapping[0].ndesigntemplatemappingcode;\n      GoodsInSample[\"nunitcode\"] = selectedRecord[comboComponents[comboComponents.findIndex(x => x.name === 'Unit')]['label']] ? selectedRecord[comboComponents[comboComponents.findIndex(x => x.name === 'Unit')]['label']].value : -1;\n      GoodsInSample[\"nquantity\"] = selectedRecord[\"Quantity\"];\n      GoodsInSample[\"sexternalsampleid\"] = selectedRecord[\"External Sample Id\"];\n      GoodsInSample[\"scomments\"] = selectedRecord[\"Comments\"];\n      GoodsInSample[\"jsondata\"] = {};\n      GoodsInSample[\"jsonuidata\"] = {};\n      templateList && templateList.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"predefineddropdown\") {\n                  if (componentrow.inputtype === \"predefineddropdown\") {\n                    GoodsInSample[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                      value: selectedRecord[componentrow.label].value,\n                      label: selectedRecord[componentrow.label].label\n                    } : -1;\n                    GoodsInSample[\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\n                  } else {\n                    GoodsInSample[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? {\n                      value: selectedRecord[componentrow.label].value,\n                      label: selectedRecord[componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: operation === \"update\" ? selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedRecord[componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedRecord[componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] ? selectedRecord[componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedRecord[componentrow.label].vale\n                    } : -1;\n                    GoodsInSample[\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\n                  }\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    GoodsInSample[\"jsondata\"][componentrow.label] = typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : typeof selectedRecord[componentrow.label] === \"number\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? new Date(selectedRecord[componentrow.label]) : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                    GoodsInSample[\"jsonuidata\"][componentrow.label] = GoodsInSample[\"jsondata\"][componentrow.label];\n                  } else {\n                    GoodsInSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : typeof selectedRecord[componentrow.label] === \"number\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? new Date(selectedRecord[componentrow.label]) : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : new Date(), userInfo) : typeof selectedRecord[componentrow.label] === \"number\" ? convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ? new Date(selectedRecord[componentrow.label]) : new Date(), userInfo) : selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\" : \"\";\n                    GoodsInSample[\"jsonuidata\"][componentrow.label] = GoodsInSample[\"jsondata\"][componentrow.label];\n                  }\n\n                  if (componentrow.timezone) {\n                    GoodsInSample[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ? {\n                      value: selectedRecord[`tz${componentrow.label}`].value,\n                      label: selectedRecord[`tz${componentrow.label}`].label\n                    } : defaulttimeZone ? defaulttimeZone : -1;\n                    GoodsInSample[\"jsonuidata\"][`tz${componentrow.label}`] = GoodsInSample[\"jsondata\"][`tz${componentrow.label}`];\n                  }\n\n                  dateList.push(componentrow.label);\n                } else {\n                  GoodsInSample[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label] : \"\";\n                  GoodsInSample[\"jsonuidata\"][componentrow.label] = GoodsInSample[\"jsondata\"][componentrow.label];\n                }\n              });\n              return GoodsInSample;\n            } else {\n              if (component.inputtype === \"combo\" || component.inputtype === \"predefineddropdown\") {\n                if (component.inputtype === \"predefineddropdown\") {\n                  GoodsInSample[\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n                    value: selectedRecord[component.label].value,\n                    label: selectedRecord[component.label].label\n                  } : -1;\n                  GoodsInSample[\"jsonuidata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label].label : \"\";\n                } else {\n                  GoodsInSample[\"jsondata\"][component.label] = selectedRecord[component.label] ? {\n                    value: selectedRecord[component.label].value,\n                    label: selectedRecord[component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: operation === \"update\" ? selectedRecord[component.label].item ? selectedRecord[component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedRecord[component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedRecord[component.label].item ? selectedRecord[component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedRecord[component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] ? selectedRecord[component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedRecord[component.label].vale\n                  } : -1;\n                  GoodsInSample[\"jsonuidata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label].label : \"\";\n                }\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  console.log(typeof selectedRecord[component.label] === \"object\");\n                  GoodsInSample[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : typeof selectedRecord[component.label] === \"number\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? new Date(selectedRecord[component.label]) : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                  GoodsInSample[\"jsonuidata\"][component.label] = GoodsInSample[\"jsondata\"][component.label];\n                } else {\n                  GoodsInSample[\"jsondata\"][component.label] = component.loadcurrentdate ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : typeof selectedRecord[component.label] === \"number\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? new Date(selectedRecord[component.label]) : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? selectedRecord[component.label] : new Date(), userInfo) : typeof selectedRecord[component.label] === \"number\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ? new Date(selectedRecord[component.label]) : new Date(), userInfo) : selectedRecord[component.label] ? selectedRecord[component.label] : \"\" : \"\";\n                  GoodsInSample[\"jsonuidata\"][component.label] = GoodsInSample[\"jsondata\"][component.label];\n                }\n\n                if (component.timezone) {\n                  GoodsInSample[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ? {\n                    value: selectedRecord[`tz${component.label}`].value,\n                    label: selectedRecord[`tz${component.label}`].label\n                  } : defaulttimeZone ? defaulttimeZone : -1;\n                  GoodsInSample[\"jsonuidata\"][`tz${component.label}`] = GoodsInSample[\"jsondata\"][`tz${component.label}`];\n                }\n\n                dateList.push(component.label);\n              } else {\n                GoodsInSample[\"jsondata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label] : \"\";\n                GoodsInSample[\"jsonuidata\"][component.label] = GoodsInSample[\"jsondata\"][component.label];\n              }\n\n              return GoodsInSample;\n            }\n          });\n        });\n      });\n      const param = {\n        GoodsInSample,\n        dateList\n      };\n      return param;\n    };\n\n    this.importGoodsInSample = () => {\n      const formData = new FormData();\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.stemplatefilename;\n      let comboComponents = [];\n      let data = [];\n      const withoutCombocomponent = [];\n      let mandatory = [];\n      let mandatoryImportFields = {};\n\n      if (acceptedFiles && acceptedFiles.length === 1) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\", file);\n        });\n        const dateList = [];\n        this.state.DynamicDateField.map(x => {\n          dateList.push(x['2']);\n        });\n        const Layout = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping[0].jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            row.children.map(column => {\n              column.children.map(component => {\n                if (component.hasOwnProperty(\"children\")) {\n                  component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                      data.push(componentrow);\n                    } else {\n                      withoutCombocomponent.push(componentrow);\n                    }\n\n                    if (componentrow.mandatory === true) {\n                      mandatory.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  });\n                } else {\n                  component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : withoutCombocomponent.push(component);\n\n                  if (component.mandatory === true) {\n                    mandatory.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.label,\n                      \"dataField\": component.label,\n                      \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              });\n            });\n          });\n          comboComponents = data;\n        }\n\n        mandatory.map(x => {\n          mandatoryImportFields[x.dataField] = x.mandatory;\n        });\n        formData.append('mandatoryFields', Lims_JSON_stringify(JSON.stringify(mandatoryImportFields), false));\n        formData.append('comboComponents', Lims_JSON_stringify(JSON.stringify(comboComponents), false));\n        formData.append('dateconstraints', Lims_JSON_stringify(JSON.stringify(this.state.DynamicDateConstraints), false));\n        formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false));\n        formData.append('combinationunique', Lims_JSON_stringify(JSON.stringify(this.state.DynamicCombinationUnique), false));\n        formData.append('ndesigntemplatemappingcode', this.props.Login.masterData.ndesigntemplatemappingcode);\n        formData.append(\"ngoodsincode\", this.props.Login.masterData.selectedGoodsIn.ngoodsincode);\n        formData.append(\"ntransactionstatus\", this.props.Login.masterData.selectedGoodsIn.ntransactionstatus);\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"GoodsInSample\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: this.props.Login.operation\n        };\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: \"IDS_GOODSINIMPORT\"\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTTHEFILE\"\n        }));\n      }\n    };\n\n    this.searchRef = React.createRef();\n    this.formRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      filterGoodsInParam: {},\n      operation: \"\",\n      firstPane: 0,\n      paneHeight: 0,\n      secondPaneHeight: 0,\n      tabPane: 0,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      splitChangeWidthPercentage: 28.6,\n      goodsinSearchField: [],\n      propertyPopupWidth: \"60\",\n      data: [],\n      mandatorySampleFields: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.multilingualMsg\n      }));\n      props.Login.multilingualMsg = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Rendering the component only if \n    // passed props value is changed\n    if (nextState.data.length > 0 && nextState.data === this.state.data) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.realfromDate, this.props.Login.masterData.realtoDate, this.props.Login.userInfo);\n    let fromDate = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n    let toDate = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n    const addId = this.state.controlMap.has(\"AddGoodsIn\") ? this.state.controlMap.get(\"AddGoodsIn\").ncontrolcode : -1;\n    const editId = this.state.controlMap.has(\"EditGoodsIn\") ? this.state.controlMap.get(\"EditGoodsIn\").ncontrolcode : -1;\n    const deleteId = this.state.controlMap.has(\"DeleteGoodsIn\") ? this.state.controlMap.get(\"DeleteGoodsIn\").ncontrolcode : -1;\n    const receiveId = this.state.controlMap.has(\"ReceiveGoodsIn\") ? this.state.controlMap.get(\"ReceiveGoodsIn\").ncontrolcode : -1;\n    const approveId = this.state.controlMap.has(\"ApproveGoodsIn\") ? this.state.controlMap.get(\"ApproveGoodsIn\").ncontrolcode : -1; //const editSampleId = this.state.controlMap.has(\"EditSampleGoodsIn\") ? this.state.controlMap.get(\"EditSampleGoodsIn\").ncontrolcode : -1;\n\n    const delSampleId = this.state.controlMap.has(\"DeleteSampleGoodsIn\") ? this.state.controlMap.get(\"DeleteSampleGoodsIn\").ncontrolcode : -1;\n    const goodsinAddParam = {\n      screenName: \"IDS_GOODSIN\",\n      operation: \"create\",\n      primaryKeyField: \"ngoodsincode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const goodsinEditParam = {\n      screenName: \"IDS_GOODSIN\",\n      operation: \"update\",\n      primaryKeyField: \"ngoodsincode\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData\n    };\n    const goodsinDeleteParam = {\n      screenName: \"IDS_GOODSIN\",\n      methodUrl: \"GoodsIn\",\n      operation: \"delete\",\n      ncontrolCode: deleteId\n    }; // const goodsinSampleEditParam ={ \n    //     screenName: \"IDS_GOODSINSAMPLE\", operation: \"update\", primaryKeyField: \"ngoodsinsamplecode\",\n    //     userInfo: this.props.Login.userInfo, ncontrolCode: editSampleId,masterData:this.props.Login.masterData\n    // }    \n\n    const filterParam = {\n      inputListName: \"GoodsIn\",\n      selectedObject: \"selectedGoodsIn\",\n      primaryKeyField: \"ngoodsincode\",\n      fetchUrl: \"goodsin/getActiveGoodsInById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sgoodsinid1\", \"sclientname\", \"sprojectname\", \"scouriername\", \"nnoofpackages\", \"sconsignmentno\", \"sgoodsindatetime\", \"ssecurityrefno\", \"scomments\", \"stransdisplaystatus\"]\n    };\n    const viewInfoFields = [];\n    viewInfoFields.push({\n      \"fieldName\": \"sclientcatname\",\n      \"label\": \"IDS_CLIENTCATEGORY\"\n    }, {\n      \"fieldName\": \"sclientname\",\n      \"label\": \"IDS_CLIENT\"\n    }, {\n      \"fieldName\": \"sprojecttypename\",\n      \"label\": \"IDS_PROJECTTYPE\"\n    }, {\n      \"fieldName\": \"sprojectname\",\n      \"label\": \"IDS_PROJECT\"\n    }, {\n      \"fieldName\": \"scouriername\",\n      \"label\": \"IDS_COURIERCARRIER\"\n    }, {\n      \"fieldName\": \"nnoofpackages\",\n      \"label\": \"IDS_NOOFPACKAGES\"\n    }, {\n      \"fieldName\": \"noutofhours\",\n      \"label\": \"IDS_OUTOFHOURS\"\n    }, {\n      \"fieldName\": \"ssecurityrefno\",\n      \"label\": \"IDS_SECURITYREFNO\"\n    }, {\n      \"fieldName\": \"scomments\",\n      \"label\": \"IDS_COMMENTS\"\n    });\n    let breadCrumbData = [];\n    breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }];\n    let mandatoryFields = [];\n\n    if (this.props.Login.ScreenName === \"IDS_GOODSIN\") {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_CLIENTCATEGORY\",\n        \"dataField\": \"nclientcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CLIENT\",\n        \"dataField\": \"nclientcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_NOOFPACKAGES\",\n        \"dataField\": \"nnoofpackages\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_GOODSINDATE\",\n        \"dataField\": \"dgoodsindatetime\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n\n      if (this.props.Login.userInfo.istimezoneshow === transactionStatus.YES) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzgoodsindate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      }\n\n      if (this.state.selectedRecord[\"noutofhours\"] === transactionStatus.YES) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_SECURITYREFNO\",\n          \"dataField\": \"ssecurityrefno\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        });\n      }\n    }\n\n    let userStatusCSS = \"\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.selectedGoodsIn && this.props.Login.masterData.selectedGoodsIn.ntransactionstatus === transactionStatus.DRAFT) {\n      userStatusCSS = \"outline-secondary\";\n      activeIconCSS = \"\";\n    } else if (this.props.Login.masterData.selectedGoodsIn && this.props.Login.masterData.selectedGoodsIn.ntransactionstatus === transactionStatus.RECEIVED) {\n      userStatusCSS = \"outline-success\";\n    } else {\n      userStatusCSS = \"outline-Final\";\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"IDS_GOODSIN\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.GoodsIn,\n      getMasterDetail: GoodsIn => this.props.getGoodsInDetail(GoodsIn, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedGoodsIn,\n      primaryKeyField: \"ngoodsincode\",\n      mainField: \"sgoodsinid1\",\n      firstField: \"sgoodsindatetime\",\n      secondField: \"stransdisplaystatus\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getGoodsInComboService(goodsinAddParam),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_GOODSINFILTER\": /*#__PURE__*/React.createElement(GoodsInFilter, {\n          fromDate: fromDate,\n          toDate: toDate,\n          handleFilterDateChange: this.handleFilterDateChange,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.selectedGoodsIn && this.props.Login.masterData.GoodsIn && this.props.Login.masterData.GoodsIn.length > 0 && this.props.Login.masterData.selectedGoodsIn ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.selectedGoodsIn.sconsignmentno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: activeIconCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 65\n      }\n    }), this.props.Login.masterData.selectedGoodsIn.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: e => this.props.getGoodsInComboService(goodsinEditParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(receiveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RECEIVE\"\n      }),\n      onClick: () => this.receiveGoodsIn(receiveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(GoodsReceivedIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"goodsreceivedicon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.approveGoodsIn(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWINFO\"\n      }),\n      onClick: () => this.props.viewInformation(this.props.Login.masterData.selectedGoodsIn.ngoodsincode, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ngoodsinsamplecode\",\n      data: this.props.Login.masterData.GoodsInSample || [],\n      dataResult: process(this.props.Login.masterData.GoodsInSample || [], this.state.sampleGridDataState),\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      userInfo: this.props.Login.userInfo,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam //editParam={goodsinSampleEditParam}\n      //fetchRecord={this.editSampleGoodsIn}\n      ,\n      deleteRecord: this.DeleteGoodsInSample,\n      methodUrl: \"SampleGoodsIn\",\n      pageable: true,\n      isComponent: false,\n      hasDynamicColSize: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      isAddRequired: true,\n      addRecord: this.openSampleGoodsIn,\n      isRefreshRequired: false,\n      isImportRequired: true,\n      isDownloadPDFRequired: false,\n      isDownloadExcelRequired: false,\n      import: this.ImportFile,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      expandField: \"expanded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 53\n      }\n    }))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_GOODSINSAMPLE\" ? this.state.mandatorySampleFields : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_GOODSIN\" && (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") ? /*#__PURE__*/React.createElement(AddGoodsIn, {\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        ClientCategory: this.props.Login.ClientCategory,\n        Client: this.props.Login.Client,\n        ProjectType: this.props.Login.ProjectType,\n        Courier: this.props.Login.Courier,\n        Project: this.props.Login.Project,\n        TimeZone: this.props.Login.TimeZone,\n        selectedRecord: this.state.selectedRecord || {},\n        currentTime: this.props.Login.currentTime || [],\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_GOODSIN\" && this.props.Login.operation === \"View\" ? /*#__PURE__*/React.createElement(GoodsInView, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecordView: this.props.Login.masterData.selectedRecordView,\n        viewInfoFields: viewInfoFields || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_GOODSINSAMPLE\" ? /*#__PURE__*/React.createElement(DynamicSlideout, {\n        selectedRecord: this.props.Login.selectedRecord,\n        templateData: this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping[0].jsondata,\n        handleDateChange: this.handleDateChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputOnChange,\n        comboData: this.props.Login.comboData,\n        onComboChange: this.onDynamicComboChange,\n        onDropFile: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        onNumericBlur: this.onNumericBlur,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        Login: this.props.Login,\n        addMasterRecord: this.addMasterRecord,\n        editMasterRecord: this.editMasterRecord,\n        userRoleControlRights: this.props.Login.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_GOODSINIMPORT\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onDrop: this.onDropSampleFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 33\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\",\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\",\n        \"dataType\": [option[designProperties.LISTITEM]]\n      };\n    });\n    return temparray;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      selectedRecord,\n      skip,\n      take,\n      masterData,\n      sampleGridDataState,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      DynamicDateField,\n      DynamicTemplateField,\n      DynamicDateConstraints,\n      DynamicCombinationUnique\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        bool = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n    }\n\n    if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n      sampleGridDataState = this.props.Login.sampleGridDataState;\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata && this.props.Login.masterData.DynamicDesign.jsondata.value);\n\n      if (dynamicColumn !== null) {\n        DynamicGridItem = dynamicColumn.griditem ? dynamicColumn.griditem : [];\n        DynamicGridMoreField = dynamicColumn.gridmoreitem ? dynamicColumn.gridmoreitem : [];\n        DynamicDateField = dynamicColumn.datefields ? dynamicColumn.datefields : [];\n        DynamicTemplateField = dynamicColumn.templatefields ? dynamicColumn.templatefields : [];\n        DynamicDateConstraints = dynamicColumn.dateconstraints ? dynamicColumn.dateconstraints : [];\n        DynamicCombinationUnique = dynamicColumn.combinationunique ? dynamicColumn.combinationunique : [];\n      }\n    }\n\n    if (bool) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        skip,\n        take,\n        masterData,\n        sampleGridDataState,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        DynamicDateField,\n        DynamicTemplateField,\n        DynamicDateConstraints,\n        DynamicCombinationUnique\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getGoodsInFilterSubmit,\n  validateEsignCredential,\n  getGoodsInComboService,\n  getGoodsInDetail,\n  getClient,\n  getProject,\n  filterColumnData,\n  getPreviewTemplate,\n  viewInformation\n})(injectIntl(GoodsIn));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/goodsin/GoodsIn.jsx"],"names":["React","connect","injectIntl","FormattedMessage","BreadcrumbComponent","callService","crudMaster","updateStore","getGoodsInFilterSubmit","validateEsignCredential","getGoodsInComboService","getGoodsInDetail","getClient","getProject","filterColumnData","getPreviewTemplate","viewInformation","toast","convertDateValuetoString","rearrangeDateFormat","getControlMap","showEsign","formatInputDate","comboChild","convertDateTimetoStringDBFormat","onDropAttachFileList","deleteAttachmentDropZone","Lims_JSON_stringify","ListWrapper","DEFAULT_RETURN","Col","Row","Card","Nav","FormGroup","FormLabel","GoodsInFilter","ListMaster","AddGoodsIn","Esign","SlideOutModal","SampleType","designProperties","transactionStatus","ConfirmMessage","ContentPanel","ReadOnlyText","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faPlus","faFileImport","faEye","DynamicSlideout","DataGrid","process","AddFile","GoodsInView","mapStateToProps","state","Login","GoodsIn","Component","constructor","props","openFilter","showFilter","updateInfo","typeName","data","closeFilter","handleFilterDateChange","dateName","dateValue","masterData","setState","handleDateChange","selectedRecord","onFilterSubmit","obj","fromDate","toDate","userInfo","realfromDate","realtoDate","inputData","userinfo","inputParam","reloadData","searchRef","current","value","closeModal","loadEsign","openModal","operation","selectedId","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","screenData","onInputOnChange","event","target","type","name","checked","onComboChange","comboData","fieldName","nclientcatcode","nprojecttypecode","onDynamicComboChange","control","customName","comboName","valuemember","nquerybuildertablecode","source","onNumericInputOnChange","onNumericBlur","max","parseFloat","precision","parseInt","min","sampleInfoDataStateChange","dataResult","GoodsInSample","dataState","sampleGridDataState","onSaveClick","saveType","formRef","screenName","warn","intl","formatMessage","id","postParam","undefined","inputListName","selectedObject","primaryKeyField","selectedGoodsIn","ngoodsincode","NO","classUrl","methodUrl","displayName","userRoleControlRights","nformcode","ncontrolCode","insertGoodsInSample","importGoodsInSample","ConfirmDelete","deleteId","confirmMessage","confirm","DeleteGoodsIn","primaryKeyValue","fetchUrl","fecthInputObject","receiveGoodsIn","approveGoodsIn","openSampleGoodsIn","addSampleId","controlMap","has","get","ncontrolcode","addSampleGoodsIn","ScreenName","controlCode","importData","withoutCombocomponent","mandatorySampleFields","Layout","DesignTemplateMapping","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","inputtype","push","mandatory","comboComponents","childColumnList","columnList","val","mapOfFilterRegData","nsampletypecode","GOODSIN","info","ImportFile","Status","ntransactionstatus","onDropSampleFile","attachedFiles","maxSize","actionType","deleteAttachment","file","DeleteGoodsInSample","ngoodsinsamplecode","ndesigntemplatemappingcode","Map","param","goodsInSample","defaultTimeZone","dateList","templateList","defaulttimeZone","findIndex","x","pkey","table","item","vale","Date","loadcurrentdate","timezone","console","log","formData","FormData","acceptedFiles","stemplatefilename","mandatoryImportFields","length","forEach","index","append","DynamicDateField","dataField","JSON","stringify","DynamicDateConstraints","DynamicCombinationUnique","isFileupload","esignNeeded","createRef","skip","take","settings","masterStatus","error","filterGoodsInParam","firstPane","paneHeight","secondPaneHeight","tabPane","splitChangeWidthPercentage","goodsinSearchField","propertyPopupWidth","getDerivedStateFromProps","multilingualMsg","componentDidMount","parentHeight","height","clientHeight","shouldComponentUpdate","nextProps","nextState","render","addId","editId","receiveId","approveId","delSampleId","goodsinAddParam","goodsinEditParam","goodsinDeleteParam","filterParam","searchFieldList","viewInfoFields","breadCrumbData","breadCrumbFrom","breadCrumbto","mandatoryFields","istimezoneshow","YES","userStatusCSS","activeIconCSS","DRAFT","RECEIVED","sidebarview","searchedData","sconsignmentno","stransdisplaystatus","indexOf","e","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","ClientCategory","Client","ProjectType","Courier","Project","TimeZone","currentTime","selectedRecordView","onDropFile","timeZoneList","addMasterRecord","editMasterRecord","temparray","option","LABEL","slanguagetypecode","VALUE","LISTITEM","componentDidUpdate","previousProps","DynamicTemplateField","bool","Object","values","DynamicDesign","dynamicColumn","parse","griditem","gridmoreitem","datefields","templatefields","dateconstraints","combinationunique"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAoBC,gBAApB,QAA4C,YAA5C;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,SAASC,WAAT,EAAqBC,UAArB,EAAgCC,WAAhC,EAA4CC,sBAA5C,EAAmEC,uBAAnE,EAA2FC,sBAA3F,EAAkHC,gBAAlH,EAAmIC,SAAnI,EAA6IC,UAA7I,EAAwJC,gBAAxJ,EAAyKC,kBAAzK,EAA4LC,eAA5L,QAAoN,eAApN;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,wBAAT,EAAmCC,mBAAnC,EAAwDC,aAAxD,EAAsEC,SAAtE,EAAgFC,eAAhF,EAAgGC,UAAhG,EAA2GC,+BAA3G,EAA2IC,oBAA3I,EAAgKC,wBAAhK,EAAyLC,mBAAzL,QAAoN,+BAApN;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,GAA1B,EAA8BC,SAA9B,EAAwCC,SAAxC,QAAyD,iBAAzD;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,OAAOC,UAAP,MAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAsCC,iBAAtC,QAA+D,8BAA/D;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,SAASC,YAAT,EAAsBC,YAAtB,QAA0C,6BAA1C;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAiCC,UAAjC,EAA4CC,MAA5C,EAAmDC,YAAnD,EAAiEC,KAAjE,QAA8E,mCAA9E;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAKA,MAAMC,OAAN,SAAsB9D,KAAK,CAAC+D,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA0anBC,UA1amB,GA0aN,MAAM;AACf,UAAIC,UAAU,GAAG,CAAC,KAAKF,KAAL,CAAWJ,KAAX,CAAiBM,UAAnC;AACA,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAExC,cADK;AAEfyC,QAAAA,IAAI,EAAE;AAAEH,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKF,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,KAjbkB;;AAAA,SAmbnBG,WAnbmB,GAmbL,MAAM;AAEhB,YAAMH,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAExC,cADK;AAEfyC,QAAAA,IAAI,EAAE;AAAEH,UAAAA,UAAU,EAAE;AAAd;AAFS,OAAnB;AAIA,WAAKF,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,KA1bkB;;AAAA,SA4bnBI,sBA5bmB,GA4bM,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC9C,UAAIC,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAAlC;AACAA,MAAAA,UAAU,CAACF,QAAD,CAAV,GAAuBC,SAAvB;AACA,WAAKE,QAAL,CAAe;AAACD,QAAAA;AAAD,OAAf;AAEH,KAjckB;;AAAA,SAmcnBE,gBAncmB,GAmcA,CAACJ,QAAD,EAAWC,SAAX,KAAyB;AACxC,YAAM;AAAEI,QAAAA;AAAF,UAAqB,KAAKlB,KAAhC;AACAkB,MAAAA,cAAc,CAACL,QAAD,CAAd,GAA2BC,SAA3B;AACA,WAAKE,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AACH,KAvckB;;AAAA,SAycnBC,cAzcmB,GAycF,MAAM;AACnB,UAAIC,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA7B,EAAuC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAnE,EAA2E,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA5F,CAAlC;AACA,UAAIC,YAAY,GAAGjE,mBAAmB,CAAC,KAAK8C,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlB,EAA4B,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAAxD,CAAtC;AACA,UAAII,UAAU,GAAGlE,mBAAmB,CAAC,KAAK8C,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlB,EAA4B,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAxD,CAApC;AACA,UAAIP,UAAU,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAAtB;AAAkCS,QAAAA,YAAlC;AAAgDC,QAAAA;AAAhD,OAAjB;AACA,UAAIC,SAAS,GAAE;AACXL,QAAAA,QAAQ,EAAED,GAAG,CAACC,QADH;AAEXC,QAAAA,MAAM,EAAGF,GAAG,CAACE,MAFF;AAGXK,QAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAHhB,OAAf;AAMA,UAAIK,UAAU,GAAG;AACbb,QAAAA,UADa;AAEbW,QAAAA;AAFa,OAAjB;AAIA,WAAKrB,KAAL,CAAWzD,sBAAX,CAAkCgF,UAAlC;AAIH,KA5dkB;;AAAA,SA6dnBC,UA7dmB,GA6dN,MAAM;AACf,WAAKC,SAAL,CAAeC,OAAf,CAAuBC,KAAvB,GAA+B,EAA/B;AACA,UAAIZ,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA7B,EAAuC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAnE,EAA2E,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA5F,CAAlC;AACA,UAAIC,YAAY,GAAGjE,mBAAmB,CAAC,KAAK8C,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlB,EAA4B,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAAxD,CAAtC;AACA,UAAII,UAAU,GAAGlE,mBAAmB,CAAC,KAAK8C,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlB,EAA4B,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAxD,CAApC;AACA,UAAIP,UAAU,GAAG,EAAE,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAAtB;AAAkCS,QAAAA,YAAlC;AAAgDC,QAAAA;AAAhD,OAAjB;AACA,UAAIC,SAAS,GAAE;AACXL,QAAAA,QAAQ,EAAED,GAAG,CAACC,QADH;AAEXC,QAAAA,MAAM,EAAGF,GAAG,CAACE,MAFF;AAGXK,QAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAHhB,OAAf;AAMA,UAAIK,UAAU,GAAG;AACbb,QAAAA,UADa;AAEbW,QAAAA;AAFa,OAAjB;AAIA,WAAKrB,KAAL,CAAWzD,sBAAX,CAAkCgF,UAAlC;AACH,KA9ekB;;AAAA,SAgfnBK,UAhfmB,GAgfN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBiC,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBkC,SAAjC;AACA,UAAIjB,cAAc,GAAG,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiB,cAAtC;;AACA,UAAI,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiC,SAArB,EAAgC;AAC5B,YAAI,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjB,KAA+B,QAAnC,EAA6C;AACzCF,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACAjB,UAAAA,cAAc,GAAG,EAAjB;AACH,SAJD,MAKK;AACDgB,UAAAA,SAAS,GAAG,KAAZ;AACAhB,UAAAA,cAAc,CAAC,OAAD,CAAd,GAA0B,CAA1B;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,EAA9B;AACH;AACJ,OAbD,MAcK;AACDiB,QAAAA,SAAS,GAAG,KAAZ;AACAjB,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAMV,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAExC,cADK;AAEfyC,QAAAA,IAAI,EAAE;AAAEyB,UAAAA,SAAF;AAAaD,UAAAA,SAAb;AAAwBhB,UAAAA,cAAxB;AAAwCmB,UAAAA,UAAU,EAAE;AAApD;AAFS,OAAnB;AAIA,WAAKhC,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AAEH,KA7gBkB;;AAAA,SA+gBnB8B,aA/gBmB,GA+gBH,MAAM;AAClB,YAAMV,UAAU,GAAG;AACfF,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBsB,QADZ;AAERgB,YAAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWkB,cAAX,CAA0B,eAA1B,CAFD;AAGRsB,YAAAA,WAAW,EAAC,KAAKxC,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,KAA4C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,EAAyCc,KAHzF;AAIRS,YAAAA,iBAAiB,EAAC,KAAKzC,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,KAA4C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,EAAyCwB;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAK3C,KAAL,CAAWkB,cAAX,CAA0B,eAA1B;AARH,SADI;AAWf0B,QAAAA,UAAU,EAAE,KAAKvC,KAAL,CAAWJ,KAAX,CAAiB2C;AAXd,OAAnB;AAaA,WAAKvC,KAAL,CAAWxD,uBAAX,CAAmC+E,UAAnC,EAA+C,WAA/C;AACH,KA9hBkB;;AAAA,SAgiBnBiB,eAhiBmB,GAgiBAC,KAAD,IAAW;AACzB,YAAM5B,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAX,IAA6B,EAApD;;AACA,UAAI4B,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIF,KAAK,CAACC,MAAN,CAAaE,IAAb,KAAsB,OAA1B,EAAmC;AAC/B/B,UAAAA,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH,SAFD,MAEM,IAAGJ,KAAK,CAACC,MAAN,CAAaE,IAAb,KAAsB,aAAzB,EAAuC;AACzC/B,UAAAA,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH,SAFK,MAEC;AACHhC,UAAAA,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH;AACJ,OARD,MASK;AACG,YAAIJ,KAAK,CAACC,MAAN,CAAaf,KAAb,KAAuB,EAA3B,EAA+B;AAC3Bd,UAAAA,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaf,KAAb,KAAuB,EAAvB,GAA4Bc,KAAK,CAACC,MAAN,CAAaf,KAAzC,GAAiDd,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAnG;AACH,SAFD,MAEO;AACH/B,UAAAA,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAaE,IAAd,CAAd,GAAoCH,KAAK,CAACC,MAAN,CAAaf,KAAjD;AACH;AAER;;AACD,WAAKhB,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AACH,KApjBkB;;AAAA,SAsjBnBiC,aAtjBmB,GAsjBH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMnC,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAX,IAA6B,EAApD;;AACA,UAAGmC,SAAS,KAAK,gBAAjB,EAAkC;AAC9BnC,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCkC,SAAnC;AACA,aAAK/C,KAAL,CAAWrD,SAAX,CAAqB,KAAKgD,KAAL,CAAWkB,cAAX,CAA0BoC,cAA1B,CAAyCtB,KAA9D,EAAoE,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBc,UAArF,EAAiG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlH,EAA4HL,cAA5H;AACH,OAHD,MAGM,IAAGmC,SAAS,KAAK,aAAjB,EAA+B;AACjCnC,QAAAA,cAAc,CAAC,aAAD,CAAd,GAAgCkC,SAAhC;AACA,aAAKpC,QAAL,CAAc;AAAEE,UAAAA;AAAF,SAAd;AACH,OAHK,MAGA,IAAGmC,SAAS,KAAK,kBAAjB,EAAoC;AACtCnC,QAAAA,cAAc,CAAC,kBAAD,CAAd,GAAqCkC,SAArC;AACA,aAAK/C,KAAL,CAAWpD,UAAX,CAAsB,KAAK+C,KAAL,CAAWkB,cAAX,CAA0BqC,gBAA1B,CAA2CvB,KAAjE,EAAuE,KAAK3B,KAAL,CAAWJ,KAAX,CAAiBc,UAAxF,EAAoG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBsB,QAArH,EAA+HL,cAA/H;AACH,OAHK,MAGA,IAAGmC,SAAS,KAAK,oBAAjB,EAAsC;AACxCnC,QAAAA,cAAc,CAAC,oBAAD,CAAd,GAAuCkC,SAAvC;AACA,aAAKpC,QAAL,CAAc;AAAEE,UAAAA;AAAF,SAAd;AACH,OAHK,MAGA,IAAGmC,SAAS,KAAK,cAAjB,EAAgC;AAClCnC,QAAAA,cAAc,CAAC,cAAD,CAAd,GAAiCkC,SAAjC;AACA,aAAKpC,QAAL,CAAc;AAAEE,UAAAA;AAAF,SAAd;AACH;AACJ,KAxkBkB;;AAAA,SA0kBnBsC,oBA1kBmB,GA0kBI,CAACJ,SAAD,EAAYK,OAAZ,EAAqBC,UAArB,KAAoC;AACvD,YAAMxC,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAX,IAA6B,EAApD;AACA,UAAIyC,SAAS,GAAGD,UAAU,IAAID,OAAO,CAACf,KAAtC;;AACA,UAAIU,SAAJ,EAAe;AAEXA,QAAAA,SAAS,CAAC,MAAD,CAAT,GAAoB,EAChB,GAAGA,SAAS,CAAC,MAAD,CADI;AACM,kBAAQK,OAAO,CAACG,WADtB;AAEhB,oCAA0BH,OAAO,CAACI,sBAFlB;AAE0CC,UAAAA,MAAM,EAAEL,OAAO,CAACK;AAF1D,SAApB;AAIA5C,QAAAA,cAAc,CAACyC,SAAD,CAAd,GAA4BP,SAA5B;AACH,OAPD,MAOO;AACHlC,QAAAA,cAAc,CAACyC,SAAD,CAAd,GAA4B,EAA5B;AACH;;AACD,WAAK3C,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AACH,KAxlBkB;;AAAA,SA0lBnB6C,sBA1lBmB,GA0lBM,CAAC/B,KAAD,EAAQiB,IAAR,KAAiB;AACtC,YAAM/B,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAAC+B,IAAD,CAAd,GAAuBjB,KAAvB;AACA,WAAKhB,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AACH,KA9lBkB;;AAAA,SAgmBnB8C,aAhmBmB,GAgmBFP,OAAD,IAAa;AACzB,UAAIvC,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAhC;;AACA,UAAIA,cAAc,CAACuC,OAAO,CAACf,KAAT,CAAlB,EAAmC;AAC/B,YAAIe,OAAO,CAACQ,GAAZ,EAAiB;AACb,cAAI,EAAE/C,cAAc,CAACuC,OAAO,CAACf,KAAT,CAAd,GAAgCwB,UAAU,CAACT,OAAO,CAACQ,GAAT,CAA5C,CAAJ,EAAgE;AAC5D/C,YAAAA,cAAc,CAACuC,OAAO,CAACf,KAAT,CAAd,GAAgCe,OAAO,CAACU,SAAR,GAAoBD,UAAU,CAACT,OAAO,CAACQ,GAAT,CAA9B,GAA8CG,QAAQ,CAACX,OAAO,CAACQ,GAAT,CAAtF;AACH;AACJ;;AACD,YAAIR,OAAO,CAACY,GAAZ,EAAiB;AACb,cAAI,EAAEnD,cAAc,CAACuC,OAAO,CAACf,KAAT,CAAd,GAAgCwB,UAAU,CAACT,OAAO,CAACY,GAAT,CAA5C,CAAJ,EAAgE;AAC5DnD,YAAAA,cAAc,CAACuC,OAAO,CAACf,KAAT,CAAd,GAAgCe,OAAO,CAACU,SAAR,GAAoBD,UAAU,CAACT,OAAO,CAACY,GAAT,CAA9B,GAA8CD,QAAQ,CAACX,OAAO,CAACY,GAAT,CAAtF;AACH;AACJ;AACJ;;AACD,WAAKrD,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AACH,KA/mBkB;;AAAA,SAinBnBoD,yBAjnBmB,GAinBUxB,KAAD,IAAW;AACnC,WAAK9B,QAAL,CAAc;AACVuD,QAAAA,UAAU,EAAE3E,OAAO,CAAC,KAAKS,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByD,aAA7B,EAA2C1B,KAAK,CAAC2B,SAAjD,CADT;AAEVC,QAAAA,mBAAmB,EAAE5B,KAAK,CAAC2B;AAFjB,OAAd;AAKH,KAvnBkB;;AAAA,SAioBnBE,WAjoBmB,GAioBL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAEjC,UAAG,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAAiC,aAApC,EAAkD;AAC9C,YAAG,KAAK9E,KAAL,CAAWkB,cAAX,CAA0B,eAA1B,KAA4C,CAA/C,EAAiD;AAC7C,iBAAQ7D,KAAK,CAAC0H,IAAN,CAAW,KAAK1E,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX,CAAR;AACH;;AAED,YAAIC,SAAS,GAAGC,SAAhB;AACA,YAAIX,SAAS,GAAGW,SAAhB;AACA,YAAI1D,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,SAAD,CAAT,GAAuB,EAAvB;AACAA,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBsB,QAAzC;AAEA,YAAIH,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA7B,EAAuC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAnE,EAA2E,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA5F,CAAlC;AACA,YAAIF,QAAQ,GAAGD,GAAG,CAACC,QAAnB;AACA,YAAIC,MAAM,GAAGF,GAAG,CAACE,MAAjB;AACAI,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBL,QAAxB;AACAK,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBJ,MAAtB;;AAEA,YAAI,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjB,KAA+B,QAAnC,EAA6C;AACzC+C,UAAAA,SAAS,GAAG;AACRE,YAAAA,aAAa,EAAE,SADP;AAERC,YAAAA,cAAc,EAAE,iBAFR;AAGRC,YAAAA,eAAe,EAAE;AAHT,WAAZ;AAMAJ,UAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,KAAK9E,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAA3E;AACA/D,UAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,cAArB,IAAsC,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAAlF;AACH;;AACD/D,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,gBAArB,IAAyC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,gBAA1B,IAA8C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,gBAA1B,EAA4Cc,KAA1F,GAAkG,CAAC,CAA5I;AACAN,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,aAArB,IAAsC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,IAA2C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,EAAyCc,KAApF,GAA4F,CAAC,CAAnI;AACAN,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,kBAArB,IAA2C,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,kBAA1B,IAAgD,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,kBAA1B,EAA8Cc,KAA9F,GAAsG,CAAC,CAAlJ;AACAN,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,oBAArB,IAA6C,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,oBAA1B,IAAkD,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,oBAA1B,EAAgDc,KAAlG,GAA0G,CAAC,CAAxJ;AACAN,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,cAArB,IAAuC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,cAA1B,IAA4C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,cAA1B,EAA0Cc,KAAtF,GAA6F,CAAC,CAArI;AACAN,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,eAArB,IAAwC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,eAA1B,CAAxC;AACAQ,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,aAArB,IAAsC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,IAA2C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,CAA3C,GAAqFnC,iBAAiB,CAAC2G,EAA7I;AACAhE,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,gBAArB,IAAyC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,gBAA1B,IAA8C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,gBAA1B,CAA9C,GAA4F,EAArI;AACAQ,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,gBAArB,IAAyC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,gBAA1B,IAA8C,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,gBAA1B,CAA9C,GAA4F,EAArI;AACAQ,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,WAArB,IAAoC,KAAK1B,KAAL,CAAWkB,cAAX,CAA0B,WAA1B,IAAyC,KAAKlB,KAAL,CAAWkB,cAAX,CAA0B,WAA1B,CAAzC,GAAkF,EAAtH;AACAQ,QAAAA,SAAS,CAAC,SAAD,CAAT,CAAqB,kBAArB,IAA4ChE,eAAe,CAAC,KAAKsC,KAAL,CAAWkB,cAAX,CAA0B,kBAA1B,CAAD,EAAgD,KAAhD,CAA3D,CArC8C,CAsC1C;;AAIJ,cAAMU,UAAU,GAAG;AACf+D,UAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QADvB;AAEfC,UAAAA,SAAS,EAAE,SAFI;AAGfC,UAAAA,WAAW,EAAE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4BiE,WAH1B;AAIfnE,UAAAA,SAAS,EAAEA,SAJI;AAKfW,UAAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWkB,cAAX,CAA0B,cAA1B,CALG;AAMfkB,UAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmC,SANb;AAMwBwC,UAAAA,QANxB;AAMkCC,UAAAA,OANlC;AAM2CJ,UAAAA,SAN3C;AAOf3C,UAAAA,SAAS,EAAE,KAAKA,SAPD;AAQfqD,UAAAA,SAAS,EAACA;AARK,SAAnB;;AAWA,YAAI1H,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8E,KAAK1F,KAAL,CAAWJ,KAAX,CAAiB+F,YAA/F,CAAb,EAA2H;AACvH,gBAAMxF,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAExC,cADK;AAEfyC,YAAAA,IAAI,EAAE;AACFwB,cAAAA,SAAS,EAAE,IADT;AACeU,cAAAA,UAAU,EAAE;AAAEhB,gBAAAA,UAAF;AAAcb,gBAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAA3C,eAD3B;AAEFoB,cAAAA,SAAS,EAAE,IAFT;AAEe2C,cAAAA,UAAU,EAAE,KAAKzE,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAF3B;AAGF9C,cAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmC;AAH1B;AAFS,WAAnB;AAQA,eAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,SAVD,MAUM;AACF,eAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkC,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBc,UAAnD,EAA+D,WAA/D;AACH;AACJ,OAlED,MAkEM,IAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAAgC,mBAAnC,EAAuD;AACzD,aAAKmB,mBAAL;AACH,OAFK,MAEA,IAAG,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAA+B,mBAAlC,EAAsD;AACxD,aAAKoB,mBAAL;AACH;AACJ,KA1sBkB;;AAAA,SA6sBnBC,aA7sBmB,GA6sBFC,QAAD,IAAc;AAC1B,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAKjG,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAK7E,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAK7E,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAK7E,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAKqB,aAAL,CAAmB,QAAnB,EAA4BH,QAA5B,CAFV;AAGH,KAjtBkB;;AAAA,SAmtBnBG,aAntBmB,GAmtBJ,CAACnE,SAAD,EAAY4D,YAAZ,KAA6B;AACxC,UAAItE,SAAS,GAAG,EAAhB;AAEA,UAAIN,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA7B,EAAuC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAnE,EAA2E,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA5F,CAAlC;AACA,UAAIF,QAAQ,GAAGD,GAAG,CAACC,QAAnB;AACA,UAAIC,MAAM,GAAGF,GAAG,CAACE,MAAjB;AACAI,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBL,QAAxB;AACAK,MAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBJ,MAAtB;AAGAI,MAAAA,SAAS,CAAC,SAAD,CAAT,GAAuB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAAnD;AACA9D,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAyB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA1C;AACA,YAAM4D,SAAS,GAAG;AACdE,QAAAA,aAAa,EAAE,SADD;AACYC,QAAAA,cAAc,EAAE,iBAD5B;AAEdC,QAAAA,eAAe,EAAE,cAFH;AAGdiB,QAAAA,eAAe,EAAE,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAH/C;AAIdgB,QAAAA,QAAQ,EAAE,8BAJI;AAKdC,QAAAA,gBAAgB,EAAE;AAAE/E,UAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAA7B;AALJ,OAAlB;AAOA,YAAMK,UAAU,GAAG;AACfgE,QAAAA,SAAS,EAAE,SADI;AAEfD,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QAFvB;AAGfjE,QAAAA,SAAS,EAAEA,SAHI;AAIfU,QAAAA,SAAS,EAAE,QAJI;AAKf+C,QAAAA;AALe,OAAnB;AAOA,YAAMpE,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAApC;;AACA,UAAItD,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8EC,YAA9E,CAAb,EAA0G;AACtG,cAAMxF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAExC,cADK;AAEfyC,UAAAA,IAAI,EAAE;AACFwB,YAAAA,SAAS,EAAE,IADT;AACeU,YAAAA,UAAU,EAAE;AAAEhB,cAAAA,UAAF;AAAcb,cAAAA;AAAd,aAD3B;AAEFoB,YAAAA,SAAS,EAAE,IAFT;AAEe2C,YAAAA,UAAU,EAAE,aAF3B;AAE0C1C,YAAAA;AAF1C;AAFS,SAAnB;AAOA,aAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,OATD,MAUK;AACD,aAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkCb,UAAlC,EAA8C,WAA9C;AACH;AACJ,KA3vBkB;;AAAA,SA8vBnB4F,cA9vBmB,GA8vBH,CAACvE,SAAD,EAAY4D,YAAZ,KAA6B;AACzC,UAAItE,SAAS,GAAG,EAAhB;AAEAA,MAAAA,SAAS,CAAC,SAAD,CAAT,GAAuB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAAnD;AACA9D,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAyB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA1C;AACA,YAAM4D,SAAS,GAAG;AACdE,QAAAA,aAAa,EAAE,SADD;AACYC,QAAAA,cAAc,EAAE,iBAD5B;AAEdC,QAAAA,eAAe,EAAE,cAFH;AAGdiB,QAAAA,eAAe,EAAE,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAH/C;AAIdgB,QAAAA,QAAQ,EAAE,8BAJI;AAKdC,QAAAA,gBAAgB,EAAE;AAAE/E,UAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAA7B;AALJ,OAAlB;AAOA,YAAMK,UAAU,GAAG;AACfgE,QAAAA,SAAS,EAAE,SADI;AAEfD,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QAFvB;AAGfjE,QAAAA,SAAS,EAAEA,SAHI;AAIfU,QAAAA,SAAS,EAAE,SAJI;AAKf+C,QAAAA;AALe,OAAnB;AAOA,YAAMpE,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAApC;;AACA,UAAItD,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8EC,YAA9E,CAAb,EAA0G;AACtG,cAAMxF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAExC,cADK;AAEfyC,UAAAA,IAAI,EAAE;AACFwB,YAAAA,SAAS,EAAE,IADT;AACeU,YAAAA,UAAU,EAAE;AAAEhB,cAAAA,UAAF;AAAcb,cAAAA;AAAd,aAD3B;AAEFoB,YAAAA,SAAS,EAAE,IAFT;AAEe2C,YAAAA,UAAU,EAAE,aAF3B;AAE0C1C,YAAAA;AAF1C;AAFS,SAAnB;AAOA,aAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,OATD,MAUK;AACD,aAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkCb,UAAlC,EAA8C,WAA9C;AACH;AACJ,KA/xBkB;;AAAA,SAiyBnB6F,cAjyBmB,GAiyBH,CAACxE,SAAD,EAAY4D,YAAZ,KAA6B;AACzC,UAAItE,SAAS,GAAG,EAAhB;AAEAA,MAAAA,SAAS,CAAC,SAAD,CAAT,GAAuB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAAnD;AACA9D,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAyB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA1C;AACA,YAAM4D,SAAS,GAAG;AACdE,QAAAA,aAAa,EAAE,SADD;AACYC,QAAAA,cAAc,EAAE,iBAD5B;AAEdC,QAAAA,eAAe,EAAE,cAFH;AAGdiB,QAAAA,eAAe,EAAE,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAH/C;AAIdgB,QAAAA,QAAQ,EAAE,8BAJI;AAKdC,QAAAA,gBAAgB,EAAE;AAAE/E,UAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAA7B;AALJ,OAAlB;AAOA,YAAMK,UAAU,GAAG;AACfgE,QAAAA,SAAS,EAAE,SADI;AAEfD,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QAFvB;AAGfjE,QAAAA,SAAS,EAAEA,SAHI;AAIfU,QAAAA,SAAS,EAAE,SAJI;AAKf+C,QAAAA;AALe,OAAnB;AAOA,YAAMpE,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAApC;;AACA,UAAItD,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8EC,YAA9E,CAAb,EAA0G;AACtG,cAAMxF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAExC,cADK;AAEfyC,UAAAA,IAAI,EAAE;AACFwB,YAAAA,SAAS,EAAE,IADT;AACeU,YAAAA,UAAU,EAAE;AAAEhB,cAAAA,UAAF;AAAcb,cAAAA;AAAd,aAD3B;AAEFoB,YAAAA,SAAS,EAAE,IAFT;AAEe2C,YAAAA,UAAU,EAAE,aAF3B;AAE0C1C,YAAAA;AAF1C;AAFS,SAAnB;AAOA,aAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,OATD,MAUK;AACD,aAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkCb,UAAlC,EAA8C,WAA9C;AACH;AACJ,KAl0BkB;;AAAA,SAo0BlB8F,iBAp0BkB,GAo0BE,MAAM;AACvB,YAAMC,WAAW,GAAG,KAAK9G,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,kBAA1B,IAAgD,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,kBAA1B,EAA8CC,YAA9F,GAA6G,CAAC,CAAlI;AACC,WAAKC,gBAAL,CAAsB,mBAAtB,EAA2C,QAA3C,EAAqD,KAAK9G,KAAL,CAAWJ,KAAX,CAAiBc,UAAtE,EACsB,KAAKf,KAAL,CAAWkB,cADjC,EACgD,KAAKb,KAAL,CAAWJ,KAAX,CAAiBsB,QADjE,EAC0EuF,WAD1E;AAGH,KAz0BiB;;AAAA,SA40BnBK,gBA50BmB,GA40BA,CAACC,UAAD,EAAahF,SAAb,EAAwBrB,UAAxB,EAAmCG,cAAnC,EAAmDK,QAAnD,EAA6D8F,WAA7D,EAAyEC,UAAzE,KAAwF;AAEnG,UAAI5G,IAAI,GAAG,EAAX;AACA,YAAM6G,qBAAqB,GAAG,EAA9B;AACA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,YAAMC,MAAM,GAAG,KAAKpH,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,IACR,KAAKrH,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,CAAkD,CAAlD,EAAqDC,QAD5D;;AAEA,UAAIF,MAAM,KAAKrC,SAAf,EAA0B;AACtBqC,QAAAA,MAAM,CAACG,GAAP,CAAWC,GAAG,IAAI;AACdA,UAAAA,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvBA,YAAAA,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAC7B,kBAAGA,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAH,EAAyC;AACrCD,gBAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AACnC,sBAAIA,YAAY,CAACC,SAAb,KAA2B,OAA3B,IAAsCD,YAAY,CAACC,SAAb,KAA2B,qBAAjE,IACGD,YAAY,CAACC,SAAb,KAA2B,sBADlC,EAC0D;AACtDzH,oBAAAA,IAAI,CAAC0H,IAAL,CAAUF,YAAV;AACH,mBAHD,MAGO;AACHX,oBAAAA,qBAAqB,CAACa,IAAtB,CAA2BF,YAA3B;AACH;;AACD,sBAAGA,YAAY,CAACG,SAAb,KAA0B,IAA7B,EAAkC;AAC9Bb,oBAAAA,qBAAqB,CAACY,IAAtB,CAA2B;AACvB,mCAAa,IADU;AAEvB,iCAAWF,YAAY,CAACxF,KAFD;AAGvB,mCAAawF,YAAY,CAACxF,KAHH;AAIvB,wCAAkBwF,YAAY,CAACC,SAAb,KAA2B,OAA3B,GACd,YADc,GACC,WALI;AAMvB,qCAAeD,YAAY,CAACC,SAAb,KAA2B,OAA3B,GACX,WADW,GACG;AAPK,qBAA3B;AASH;AACJ,iBAlBD;AAmBH,eApBD,MAoBM;AACFH,gBAAAA,SAAS,CAACG,SAAV,KAAwB,OAAxB,IAAmCH,SAAS,CAACG,SAAV,KAAwB,qBAA3D,IACKH,SAAS,CAACG,SAAV,KAAwB,sBAD7B,GAEKzH,IAAI,CAAC0H,IAAL,CAAUJ,SAAV,CAFL,GAE4BT,qBAAqB,CAACa,IAAtB,CAA2BJ,SAA3B,CAF5B;;AAGI,oBAAGA,SAAS,CAACK,SAAV,KAAuB,IAA1B,EAA+B;AAC3Bb,kBAAAA,qBAAqB,CAACY,IAAtB,CAA2B;AACvB,iCAAa,IADU;AAEvB,+BAAWJ,SAAS,CAACtF,KAFE;AAGvB,iCAAasF,SAAS,CAACtF,KAHA;AAIvB,sCAAkBsF,SAAS,CAACG,SAAV,KAAwB,OAAxB,GACd,YADc,GACC,WALI;AAMvB,mCAAeH,SAAS,CAACG,SAAV,KAAwB,OAAxB,GACX,WADW,GACG;AAPK,mBAA3B;AASH;AAER;AACJ,aAtCD;AAuCA,iBAAKnH,QAAL,CAAc;AAACwG,cAAAA,qBAAqB,EAACA;AAAvB,aAAd;AACH,WAzCD;AA2CH,SA5CD;AA6CA,cAAMc,eAAe,GAAG5H,IAAxB;AACA,YAAI6H,eAAe,GAAG,EAAtB;AACA7H,QAAAA,IAAI,CAACkH,GAAL,CAASY,UAAU,IAAI;AACnB,gBAAMC,GAAG,GAAG9K,UAAU,CAAC+C,IAAD,EAAO8H,UAAP,EAAmBD,eAAnB,EAAoC,IAApC,CAAtB;AACA7H,UAAAA,IAAI,GAAG+H,GAAG,CAAC/H,IAAX;AACA6H,UAAAA,eAAe,GAAGE,GAAG,CAACF,eAAtB;AACA,iBAAO,IAAP;AACH,SALD;AAMA,cAAMG,kBAAkB,GAAG;AACvBC,UAAAA,eAAe,EAAEvE,QAAQ,CAACvF,UAAU,CAAC+J,OAAZ;AADF,SAA3B;AAKA,aAAKvI,KAAL,CAAWlD,kBAAX,CAA8B4D,UAA9B,EAA0CQ,QAA1C,EAAoD8F,WAApD,EACI3G,IADJ,EACUQ,cADV,EAC0BqH,eAD1B,EAC0CD,eAD1C,EAC2Df,qBAD3D,EACkF,IADlF,EACwF,IADxF,EAEImB,kBAFJ,EAEwB,KAFxB,EAE+BtG,SAF/B,EAE0CgF,UAF1C,EAEsDE,UAFtD;AAGH,OA9DD,MA8DQ;AACJjK,QAAAA,KAAK,CAACwL,IAAN,CAAW,KAAKxI,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAER,KAr5BkB;;AAAA,SAu5BnB4D,UAv5BmB,GAu5BN,MAAM;AACf,YAAMC,MAAM,GAAG,KAAK1I,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CwD,kBAA3D;AACA,UAAIxI,UAAU,GAAE,EAAhB,CAFe,CAGf;AACA;AACA;;AACIA,MAAAA,UAAU,GAAG;AACTC,QAAAA,QAAQ,EAAExC,cADD;AAETyC,QAAAA,IAAI,EAAE;AACFyB,UAAAA,SAAS,EAAC,IADR;AAEFC,UAAAA,SAAS,EAAE,QAFT;AAGF0C,UAAAA,UAAU,EAAG;AAHX;AAFG,OAAb;AAQA,WAAKzE,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB,EAdW,CAef;AAEH,KAx6BkB;;AAAA,SA06BnByI,gBA16BmB,GA06BA,CAACC,aAAD,EAAgB7F,SAAhB,EAA2B8F,OAA3B,KAAuC;AACtD,UAAIjI,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAACmC,SAAD,CAAd,GAA4BxF,oBAAoB,CAC5CqD,cAAc,CAACmC,SAAD,CAD8B,EAClB6F,aADkB,EACJC,OADI,CAAhD;AAEA,WAAKnI,QAAL,CAAc;AAAEE,QAAAA,cAAF;AAAkBkI,QAAAA,UAAU,EAAE;AAA9B,OAAd;AACH,KA/6BkB;;AAAA,SAi7BnBC,gBAj7BmB,GAi7BA,CAACvG,KAAD,EAAQwG,IAAR,EAAcjG,SAAd,KAA4B;AAC3C,UAAInC,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAX,IAA6B,EAAlD;AACAA,MAAAA,cAAc,CAACmC,SAAD,CAAd,GAA4BvF,wBAAwB,CAACoD,cAAc,CAACmC,SAAD,CAAf,EAA2BiG,IAA3B,CAApD;AAEA,WAAKtI,QAAL,CAAc;AAACE,QAAAA,cAAD;AAAgBkI,QAAAA,UAAU,EAAE;AAA5B,OAAd;AACH,KAt7BkB;;AAAA,SAi+BnBG,mBAj+BmB,GAi+BGnH,SAAD,IAAe;AAChC,UAAIV,SAAS,GAAG,EAAhB;AAEA,UAAIN,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA7B,EAAuC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAnE,EAA2E,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA5F,CAAlC;AACA,UAAIF,QAAQ,GAAGD,GAAG,CAACC,QAAnB;AACA,UAAIC,MAAM,GAAGF,GAAG,CAACE,MAAjB;AACAI,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBL,QAAxB;AACAK,MAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBJ,MAAtB;AAEAI,MAAAA,SAAS,CAAC,cAAD,CAAT,GAA2BU,SAAS,CAAClB,cAAV,CAAyBuE,YAApD;AACA/D,MAAAA,SAAS,CAAC,oBAAD,CAAT,GAAiCU,SAAS,CAAClB,cAAV,CAAyBsI,kBAA1D;AACA9H,MAAAA,SAAS,CAAC,4BAAD,CAAT,GAAyCU,SAAS,CAAClB,cAAV,CAAyBuI,0BAAlE;AACA/H,MAAAA,SAAS,CAAC,oBAAD,CAAT,GAAiC,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CwD,kBAA7E;AACAtH,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAyB,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA1C;AACA,YAAM4D,SAAS,GAAG;AACdE,QAAAA,aAAa,EAAE,SADD;AACYC,QAAAA,cAAc,EAAE,iBAD5B;AAEdC,QAAAA,eAAe,EAAE,cAFH;AAGdiB,QAAAA,eAAe,EAAE,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAH/C;AAIdgB,QAAAA,QAAQ,EAAE,8BAJI;AAKdC,QAAAA,gBAAgB,EAAE;AAAE/E,UAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAA7B;AALJ,OAAlB;AAOA,YAAMK,UAAU,GAAG;AACfgE,QAAAA,SAAS,EAAE,eADI;AAEfD,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QAFvB;AAGfjE,QAAAA,SAAS,EAAEA,SAHI;AAIfU,QAAAA,SAAS,EAAE,QAJI;AAKf+C,QAAAA;AALe,OAAnB;AAOA,YAAMpE,UAAU,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAApC;;AACA,UAAItD,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8E3D,SAAS,CAAC4D,YAAxF,CAAb,EAAoH;AAChH,cAAMxF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAExC,cADK;AAEfyC,UAAAA,IAAI,EAAE;AACFwB,YAAAA,SAAS,EAAE,IADT;AACeU,YAAAA,UAAU,EAAE;AAAEhB,cAAAA,UAAF;AAAcb,cAAAA;AAAd,aAD3B;AAEFoB,YAAAA,SAAS,EAAE,IAFT;AAEe2C,YAAAA,UAAU,EAAE,mBAF3B;AAEgD1C,YAAAA;AAFhD;AAFS,SAAnB;AAOA,aAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,OATD,MAUK;AACD,aAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkCb,UAAlC,EAA8C,WAA9C;AACH;AACJ,KA3gCkB;;AAAA,SA8gCnBkF,mBA9gCmB,GA8gCE,MAAM;AACvB,UAAIyD,GAAG,GAAE,EAAT;AAEA,UAAItI,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA7B,EAAuC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAnE,EAA2E,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBsB,QAA5F,CAAlC;AACA,UAAIF,QAAQ,GAAGD,GAAG,CAACC,QAAnB;AACA,UAAIC,MAAM,GAAGF,GAAG,CAACE,MAAjB;AACAoI,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBrI,QAAlB;AACAqI,MAAAA,GAAG,CAAC,QAAD,CAAH,GAAgBpI,MAAhB;AAEAoI,MAAAA,GAAG,CAAC,cAAD,CAAH,GAAqB,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAAjE;AACAiE,MAAAA,GAAG,CAAC,4BAAD,CAAH,GAAmC,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,CAAkD,CAAlD,EAAqD+B,0BAAxF;AACA,YAAME,KAAK,GAAI,KAAKC,aAAL,CAAmB,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiBc,UAApC,EAA+C,KAAKf,KAAL,CAAWkB,cAA1D,EACX,KAAKb,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,CAAmD,CAAnD,EAAsDC,QAD3C,EAEX,KAAKtH,KAAL,CAAWJ,KAAX,CAAiBsB,QAFN,EAEe,KAAKlB,KAAL,CAAWJ,KAAX,CAAiB4J,eAFhC,EAEiD,QAFjD,EAE0D,KAAKxJ,KAAL,CAAWJ,KAAX,CAAiBqI,eAF3E,CAAf;AAGAoB,MAAAA,GAAG,CAAC,eAAD,CAAH,GAAuBC,KAAK,CAACnF,aAA7B;AACAkF,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBC,KAAK,CAACG,QAAxB;AACAJ,MAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiBsB,QAAnC;AAEA,YAAMK,UAAU,GAAG;AACf+D,QAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QADvB;AAEfC,QAAAA,SAAS,EAAE,eAFI;AAGfC,QAAAA,WAAW,EAAE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4BiE,WAH1B;AAIfnE,QAAAA,SAAS,EAAEgI,GAJI;AAKfrH,QAAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWkB,cAAX,CAA0B,oBAA1B,CALG;AAMfkB,QAAAA,SAAS,EAAE,QANI;AAOfN,QAAAA,SAAS,EAAE,KAAKA;AAPD,OAAnB;;AAUA,UAAIrE,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8E,KAAK1F,KAAL,CAAWJ,KAAX,CAAiB+F,YAA/F,CAAb,EAA2H;AACvH,cAAMxF,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAExC,cADK;AAEfyC,UAAAA,IAAI,EAAE;AACFwB,YAAAA,SAAS,EAAE,IADT;AACeU,YAAAA,UAAU,EAAE;AAAEhB,cAAAA,UAAF;AAAcb,cAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAA3C,aAD3B;AAEFoB,YAAAA,SAAS,EAAE,IAFT;AAEe2C,YAAAA,UAAU,EAAE,KAAKzE,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE;AAAN,aAA9B,CAF3B;AAGF9C,YAAAA,SAAS,EAAE;AAHT;AAFS,SAAnB;AAQA,aAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,OAVD,MAUM;AACF,aAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkC,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBc,UAAnD,EAA+D,WAA/D;AACH;AAIJ,KA1jCkB;;AAAA,SA4jCnB6I,aA5jCmB,GA4jCH,CAAC7I,UAAD,EAAYG,cAAZ,EAA2B6I,YAA3B,EAAwCxI,QAAxC,EAAiDyI,eAAjD,EAAiE5H,SAAjE,EAA2EkG,eAA3E,KAA+F;AAC3G,UAAI9D,aAAa,GAAG,EAApB;AACA,UAAIsF,QAAQ,GAAG,EAAf;AACAtF,MAAAA,aAAa,CAAC,cAAD,CAAb,GAAgCzD,UAAU,CAACyE,eAAX,CAA2BC,YAA3D;AACAjB,MAAAA,aAAa,CAAC,4BAAD,CAAb,GAA6CzD,UAAU,CAAC2G,qBAAX,CAAiC,CAAjC,EAAoC+B,0BAAjF;AAGAjF,MAAAA,aAAa,CAAC,WAAD,CAAb,GAA6BtD,cAAc,CAACoH,eAAe,CAACA,eAAe,CAAC2B,SAAhB,CAA0BC,CAAC,IAAIA,CAAC,CAACjH,IAAF,KAAW,MAA1C,CAAD,CAAf,CAAmE,OAAnE,CAAD,CAAd,GACzB/B,cAAc,CAACoH,eAAe,CAACA,eAAe,CAAC2B,SAAhB,CAA0BC,CAAC,IAAIA,CAAC,CAACjH,IAAF,KAAW,MAA1C,CAAD,CAAf,CAAmE,OAAnE,CAAD,CAAd,CAA4FjB,KADnE,GAC2E,CAAC,CADzG;AAEAwC,MAAAA,aAAa,CAAC,WAAD,CAAb,GAA6BtD,cAAc,CAAC,UAAD,CAA3C;AACAsD,MAAAA,aAAa,CAAC,mBAAD,CAAb,GAAqCtD,cAAc,CAAC,oBAAD,CAAnD;AACAsD,MAAAA,aAAa,CAAC,WAAD,CAAb,GAA6BtD,cAAc,CAAC,UAAD,CAA3C;AAEAsD,MAAAA,aAAa,CAAC,UAAD,CAAb,GAA4B,EAA5B;AACAA,MAAAA,aAAa,CAAC,YAAD,CAAb,GAA8B,EAA9B;AAGAuF,MAAAA,YAAY,IAAIA,YAAY,CAACnC,GAAb,CAAiBC,GAAG,IAAI;AACpC,eAAOA,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AAC9B,iBAAOA,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AACpC,gBAAIA,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC,qBAAOD,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AAC1C,oBAAIA,YAAY,CAACC,SAAb,KAA2B,OAA3B,IAAsCD,YAAY,CAACC,SAAb,KAA2B,oBAArE,EAA2F;AACvF,sBAAID,YAAY,CAACC,SAAb,KAA2B,oBAA/B,EAAqD;AACjD3D,oBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,IAAgDxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5C;AACIV,sBAAAA,KAAK,EAAEd,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCV,KAD9C;AAEIU,sBAAAA,KAAK,EAAExB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCA;AAF9C,qBAD4C,GAMxC,CAAC,CANT;AAOA8B,oBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4B0D,YAAY,CAACxF,KAAzC,IAAkDxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAAqCxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCA,KAAxE,GAAgF,EAAlI;AAEH,mBAVD,MAUO;AACH8B,oBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,IAAgDxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5C;AACIV,sBAAAA,KAAK,EAAEd,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCV,KAD9C;AAEIU,sBAAAA,KAAK,EAAExB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCA,KAF9C;AAGIyH,sBAAAA,IAAI,EAAEjC,YAAY,CAACtE,WAHvB;AAIIC,sBAAAA,sBAAsB,EAAEqE,YAAY,CAACrE,sBAJzC;AAKIC,sBAAAA,MAAM,EAAEoE,YAAY,CAACpE,MALzB;AAMI,uBAACoE,YAAY,CAACkC,KAAb,CAAmBC,IAAnB,CAAwBrC,SAAxB,KAAsC,SAAtC,GAAkD,oBAAlD,GAAyEE,YAAY,CAACtE,WAAvF,GAAqGxB,SAAS,KAAK,QAAd,GACjGlB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmC2H,IAAnC,GAA0CnJ,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmC2H,IAAnC,CAAwC1C,QAAxC,CAAiDO,YAAY,CAACkC,KAAb,CAAmBC,IAAnB,CAAwBrC,SAAxB,KAAsC,SAAtC,GAAkD,oBAAlD,GAAyEE,YAAY,CAACtE,WAAvI,CAA1C,GACI1C,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCwF,YAAY,CAACkC,KAAb,CAAmBC,IAAnB,CAAwBrC,SAAxB,KAAsC,SAAtC,GAAkD,oBAAlD,GAAyEE,YAAY,CAACtE,WAAzH,CAF6F,GAIjG1C,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmC2H,IAAnC,GAA0CnJ,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmC2H,IAAnC,CAAwC1C,QAAxC,CAAiDO,YAAY,CAACkC,KAAb,CAAmBC,IAAnB,CAAwBrC,SAAxB,KAAsC,SAAtC,GAAkD,oBAAlD,GAAyEE,YAAY,CAACtE,WAAvI,CAA1C,GACI1C,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCwF,YAAY,CAACkC,KAAb,CAAmBC,IAAnB,CAAwBrC,SAAxB,KAAsC,SAAtC,GAAkD,oBAAlD,GAAyEE,YAAY,CAACtE,WAAzH,IAAwI1C,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCwF,YAAY,CAACkC,KAAb,CAAmBC,IAAnB,CAAwBrC,SAAxB,KAAsC,SAAtC,GAAkD,oBAAlD,GAAyEE,YAAY,CAACtE,WAAzH,CAAxI,GACM1C,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmC4H;AAZrD,qBAD4C,GAexC,CAAC,CAfT;AAgBA9F,oBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4B0D,YAAY,CAACxF,KAAzC,IAAkDxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAAqCxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,CAAmCA,KAAxE,GAAgF,EAAlI;AAEH;AACJ,iBA/BD,MAgCK,IAAIwF,YAAY,CAACC,SAAb,KAA2B,MAA/B,EAAuC;AACxC,sBAAID,YAAY,CAACG,SAAjB,EAA4B;AACxB7D,oBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,IAAiD,OAAOxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAArB,KAA8C,QAA/C,GAC5C9E,+BAA+B,CAACsD,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5BxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CADc,GACS,IAAI6H,IAAJ,EADV,EACsBhJ,QADtB,CADa,GAG3C,OAAOL,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAArB,KAA8C,QAA/C,GACI9E,+BAA+B,CAACsD,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5B,IAAI6H,IAAJ,CAASrJ,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAvB,CAD4B,GACmB,IAAI6H,IAAJ,EADpB,EACgChJ,QADhC,CADnC,GAGML,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GACExB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CADhB,GACuC,EAPjD;AASA8B,oBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4B0D,YAAY,CAACxF,KAAzC,IAAkD8B,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,CAAlD;AACH,mBAXD,MAWO;AACH8B,oBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,IAAgDwF,YAAY,CAACsC,eAAb,GAC5C,OAAOtJ,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAArB,KAA8C,QAA9C,GACI9E,+BAA+B,CAACsD,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5BxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CADc,GACS,IAAI6H,IAAJ,EADV,EACsBhJ,QADtB,CADnC,GAGI,OAAOL,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAArB,KAA8C,QAA9C,GACI9E,+BAA+B,CAACsD,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5B,IAAI6H,IAAJ,CAASrJ,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAvB,CAD4B,GACmB,IAAI6H,IAAJ,EADpB,EACgChJ,QADhC,CADnC,GAIML,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GACExB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CADhB,GACuC,EATL,GAU5CxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAAqC,OAAOxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAArB,KAA8C,QAA9C,GACjC9E,+BAA+B,CAACsD,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5BxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CADc,GACS,IAAI6H,IAAJ,EADV,EACsBhJ,QADtB,CADE,GAEgC,OAAOL,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAArB,KAA8C,QAA9C,GAC7D9E,+BAA+B,CAACsD,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5B,IAAI6H,IAAJ,CAASrJ,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAvB,CAD4B,GACmB,IAAI6H,IAAJ,EADpB,EACgChJ,QADhC,CAD8B,GAI3DL,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GACExB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CADhB,GAEI,EARd,GAQmB,EAlBvB;AAoBA8B,oBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4B0D,YAAY,CAACxF,KAAzC,IAAkD8B,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,CAAlD;AACH;;AACD,sBAAIwF,YAAY,CAACuC,QAAjB,EAA2B;AACvBjG,oBAAAA,aAAa,CAAC,UAAD,CAAb,CAA2B,KAAI0D,YAAY,CAACxF,KAAM,EAAlD,IAAuDxB,cAAc,CAAE,KAAIgH,YAAY,CAACxF,KAAM,EAAzB,CAAd,GACnD;AAAEV,sBAAAA,KAAK,EAAEd,cAAc,CAAE,KAAIgH,YAAY,CAACxF,KAAM,EAAzB,CAAd,CAA0CV,KAAnD;AAA0DU,sBAAAA,KAAK,EAAExB,cAAc,CAAE,KAAIgH,YAAY,CAACxF,KAAM,EAAzB,CAAd,CAA0CA;AAA3G,qBADmD,GAEnDsH,eAAe,GAAGA,eAAH,GAAqB,CAAC,CAFzC;AAIAxF,oBAAAA,aAAa,CAAC,YAAD,CAAb,CAA6B,KAAI0D,YAAY,CAACxF,KAAM,EAApD,IAAyD8B,aAAa,CAAC,UAAD,CAAb,CAA2B,KAAI0D,YAAY,CAACxF,KAAM,EAAlD,CAAzD;AACH;;AACDoH,kBAAAA,QAAQ,CAAC1B,IAAT,CAAcF,YAAY,CAACxF,KAA3B;AACH,iBA3CI,MA6CA;AACD8B,kBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,IAAgDxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAAd,GAC5CxB,cAAc,CAACgH,YAAY,CAACxF,KAAd,CAD8B,GACP,EADzC;AAGA8B,kBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4B0D,YAAY,CAACxF,KAAzC,IAAkD8B,aAAa,CAAC,UAAD,CAAb,CAA0B0D,YAAY,CAACxF,KAAvC,CAAlD;AACH;AACJ,eApFM,CAAP;AAqFA,qBAAO8B,aAAP;AAEH,aAxFD,MAyFK;AACD,kBAAIwD,SAAS,CAACG,SAAV,KAAwB,OAAxB,IAAmCH,SAAS,CAACG,SAAV,KAAwB,oBAA/D,EAAqF;AACjF,oBAAIH,SAAS,CAACG,SAAV,KAAwB,oBAA5B,EAAkD;AAC9C3D,kBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,IAA6CxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACzC;AACIV,oBAAAA,KAAK,EAAEd,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCV,KAD3C;AAEIU,oBAAAA,KAAK,EAAExB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCA;AAF3C,mBADyC,GAMrC,CAAC,CANT;AAOA8B,kBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4BwD,SAAS,CAACtF,KAAtC,IAA+CxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAAkCxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCA,KAAlE,GAA0E,EAAzH;AAEH,iBAVD,MAUO;AACH8B,kBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,IAA6CxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACzC;AACIV,oBAAAA,KAAK,EAAEd,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCV,KAD3C;AAEIU,oBAAAA,KAAK,EAAExB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCA,KAF3C;AAGIyH,oBAAAA,IAAI,EAAEnC,SAAS,CAACpE,WAHpB;AAIIC,oBAAAA,sBAAsB,EAAEmE,SAAS,CAACnE,sBAJtC;AAKIC,oBAAAA,MAAM,EAAEkE,SAAS,CAAClE,MALtB;AAMI,qBAACkE,SAAS,CAACoC,KAAV,CAAgBC,IAAhB,CAAqBrC,SAArB,KAAmC,SAAnC,GAA+C,oBAA/C,GAAsEA,SAAS,CAACpE,WAAjF,GAA+FxB,SAAS,KAAK,QAAd,GAC3FlB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgC2H,IAAhC,GAAuCnJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgC2H,IAAhC,CAAqC1C,QAArC,CAA8CK,SAAS,CAACoC,KAAV,CAAgBC,IAAhB,CAAqBrC,SAArB,KAAmC,SAAnC,GAA+C,oBAA/C,GAAsEA,SAAS,CAACpE,WAA9H,CAAvC,GACI1C,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCsF,SAAS,CAACoC,KAAV,CAAgBC,IAAhB,CAAqBrC,SAArB,KAAmC,SAAnC,GAA+C,oBAA/C,GAAsEA,SAAS,CAACpE,WAAhH,CAFuF,GAI3F1C,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgC2H,IAAhC,GAAuCnJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgC2H,IAAhC,CAAqC1C,QAArC,CAA8CK,SAAS,CAACoC,KAAV,CAAgBC,IAAhB,CAAqBrC,SAArB,KAAmC,SAAnC,GAA+C,oBAA/C,GAAsEA,SAAS,CAACpE,WAA9H,CAAvC,GACI1C,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCsF,SAAS,CAACoC,KAAV,CAAgBC,IAAhB,CAAqBrC,SAArB,KAAmC,SAAnC,GAA+C,oBAA/C,GAAsEA,SAAS,CAACpE,WAAhH,IAA+H1C,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCsF,SAAS,CAACoC,KAAV,CAAgBC,IAAhB,CAAqBrC,SAArB,KAAmC,SAAnC,GAA+C,oBAA/C,GAAsEA,SAAS,CAACpE,WAAhH,CAA/H,GACM1C,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgC4H;AAZlD,mBADyC,GAerC,CAAC,CAfT;AAgBI9F,kBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4BwD,SAAS,CAACtF,KAAtC,IAA+CxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAAkCxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,CAAgCA,KAAlE,GAA0E,EAAzH;AAEP;AACJ,eA/BD,MAgCK,IAAIsF,SAAS,CAACG,SAAV,KAAwB,MAA5B,EAAoC;AACrC,oBAAIH,SAAS,CAACK,SAAd,EAAyB;AACrBqC,kBAAAA,OAAO,CAACC,GAAR,CAAY,OAAOzJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAAvD;AACA8B,kBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,IAA6C,OAAOxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAA3C,GAEzC9E,+BAA+B,CAACsD,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAC5BxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CADc,GACM,IAAI6H,IAAJ,EADP,EACmBhJ,QADnB,CAFU,GAIxC,OAAOL,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAA5C,GACI9E,+BAA+B,CAACsD,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAC5B,IAAI6H,IAAJ,CAASrJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAvB,CAD4B,GACgB,IAAI6H,IAAJ,EADjB,EAC6BhJ,QAD7B,CADnC,GAGIL,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACIxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CADlB,GACsC,EAR9C;AAUA8B,kBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4BwD,SAAS,CAACtF,KAAtC,IAA+C8B,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,CAA/C;AACH,iBAbD,MAaO;AACH8B,kBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,IAA6CsF,SAAS,CAACwC,eAAV,GACzC,OAAOtJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAA3C,GACI9E,+BAA+B,CAACsD,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAC5BxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CADc,GACM,IAAI6H,IAAJ,EADP,EACmBhJ,QADnB,CADnC,GAGI,OAAOL,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAA3C,GACI9E,+BAA+B,CAACsD,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAC5B,IAAI6H,IAAJ,CAASrJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAvB,CAD4B,GACgB,IAAI6H,IAAJ,EADjB,EAC6BhJ,QAD7B,CADnC,GAIML,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACExB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CADhB,GACoC,EATL,GAUzCxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAAkC,OAAOxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAA3C,GAAsD9E,+BAA+B,CAACsD,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACpHxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CADsG,GAClF,IAAI6H,IAAJ,EADiF,EACrEhJ,QADqE,CAArF,GAC4B,OAAOL,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAArB,KAA2C,QAA3C,GAC1D9E,+BAA+B,CAACsD,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GAC5B,IAAI6H,IAAJ,CAASrJ,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAvB,CAD4B,GACgB,IAAI6H,IAAJ,EADjB,EAC6BhJ,QAD7B,CAD2B,GAGxDL,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACExB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CADhB,GACoC,EAL1C,GAK+C,EAfnD;AAiBA8B,kBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4BwD,SAAS,CAACtF,KAAtC,IAA+C8B,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,CAA/C;AACH;;AACD,oBAAIsF,SAAS,CAACyC,QAAd,EAAwB;AACpBjG,kBAAAA,aAAa,CAAC,UAAD,CAAb,CAA2B,KAAIwD,SAAS,CAACtF,KAAM,EAA/C,IAAoDxB,cAAc,CAAE,KAAI8G,SAAS,CAACtF,KAAM,EAAtB,CAAd,GAChD;AAAEV,oBAAAA,KAAK,EAAEd,cAAc,CAAE,KAAI8G,SAAS,CAACtF,KAAM,EAAtB,CAAd,CAAuCV,KAAhD;AAAuDU,oBAAAA,KAAK,EAAExB,cAAc,CAAE,KAAI8G,SAAS,CAACtF,KAAM,EAAtB,CAAd,CAAuCA;AAArG,mBADgD,GAEhDsH,eAAe,GAAGA,eAAH,GAAqB,CAAC,CAFzC;AAIAxF,kBAAAA,aAAa,CAAC,YAAD,CAAb,CAA6B,KAAIwD,SAAS,CAACtF,KAAM,EAAjD,IAAsD8B,aAAa,CAAC,UAAD,CAAb,CAA2B,KAAIwD,SAAS,CAACtF,KAAM,EAA/C,CAAtD;AACH;;AACDoH,gBAAAA,QAAQ,CAAC1B,IAAT,CAAcJ,SAAS,CAACtF,KAAxB;AACH,eA1CI,MA2CA;AACD8B,gBAAAA,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,IAA6CxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAAd,GACzCxB,cAAc,CAAC8G,SAAS,CAACtF,KAAX,CAD2B,GACP,EADtC;AAGA8B,gBAAAA,aAAa,CAAC,YAAD,CAAb,CAA4BwD,SAAS,CAACtF,KAAtC,IAA+C8B,aAAa,CAAC,UAAD,CAAb,CAA0BwD,SAAS,CAACtF,KAApC,CAA/C;AACH;;AACD,qBAAO8B,aAAP;AACH;AACJ,WA9KM,CAAP;AAgLH,SAjLM,CAAP;AAkLH,OAnLe,CAAhB;AAoLA,YAAMmF,KAAK,GAAG;AAAEnF,QAAAA,aAAF;AAAiBsF,QAAAA;AAAjB,OAAd;AACA,aAAOH,KAAP;AAEH,KApwCkB;;AAAA,SAswCnBzD,mBAtwCmB,GAswCE,MAAM;AAEvB,YAAM0E,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACA,YAAM3J,cAAc,GAAG,KAAKlB,KAAL,CAAWkB,cAAlC;AACA,YAAM4J,aAAa,GAAG5J,cAAc,CAAC6J,iBAArC;AACA,UAAIzC,eAAe,GAAC,EAApB;AACA,UAAI5H,IAAI,GAAG,EAAX;AACA,YAAM6G,qBAAqB,GAAG,EAA9B;AACA,UAAIc,SAAS,GAAE,EAAf;AACA,UAAI2C,qBAAqB,GAAC,EAA1B;;AAGA,UAAGF,aAAa,IAAIA,aAAa,CAACG,MAAd,KAAwB,CAA5C,EAA8C;AAC1CH,QAAAA,aAAa,CAACI,OAAd,CAAsB,CAAC5B,IAAD,EAAO6B,KAAP,KAAiB;AACnCP,UAAAA,QAAQ,CAACQ,MAAT,CAAgB,cAAhB,EAAgC9B,IAAhC;AACH,SAFD;AAGA,cAAMQ,QAAQ,GAAG,EAAjB;AACA,aAAK9J,KAAL,CAAWqL,gBAAX,CAA4BzD,GAA5B,CAAgCsC,CAAC,IAAG;AAChCJ,UAAAA,QAAQ,CAAC1B,IAAT,CAAc8B,CAAC,CAAC,GAAD,CAAf;AACH,SAFD;AAKJ,cAAMzC,MAAM,GAAG,KAAKpH,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,IAAqD,KAAKrH,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,CAAkD,CAAlD,EAAqDC,QAAzH;;AACA,YAAIF,MAAM,KAAKrC,SAAf,EAA0B;AACtBqC,UAAAA,MAAM,CAACG,GAAP,CAAWC,GAAG,IAAI;AACdA,YAAAA,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvBA,cAAAA,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAC7B,oBAAGA,SAAS,CAACC,cAAV,CAAyB,UAAzB,CAAH,EAAyC;AACrCD,kBAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBM,YAAY,IAAI;AACnC,wBAAIA,YAAY,CAACC,SAAb,KAA2B,OAA3B,IAAsCD,YAAY,CAACC,SAAb,KAA2B,qBAAjE,IACGD,YAAY,CAACC,SAAb,KAA2B,sBADlC,EAC0D;AACtDzH,sBAAAA,IAAI,CAAC0H,IAAL,CAAUF,YAAV;AACH,qBAHD,MAGO;AACHX,sBAAAA,qBAAqB,CAACa,IAAtB,CAA2BF,YAA3B;AACH;;AACD,wBAAGA,YAAY,CAACG,SAAb,KAA0B,IAA7B,EAAkC;AAC9BA,sBAAAA,SAAS,CAACD,IAAV,CAAe;AACX,qCAAa,IADF;AAEX,mCAAWF,YAAY,CAACxF,KAFb;AAGX,qCAAawF,YAAY,CAACxF,KAHf;AAIX,0CAAkBwF,YAAY,CAACC,SAAb,KAA2B,OAA3B,GACd,YADc,GACC,WALR;AAMX,uCAAeD,YAAY,CAACC,SAAb,KAA2B,OAA3B,GACX,WADW,GACG;AAPP,uBAAf;AASH;AACJ,mBAlBD;AAmBH,iBApBD,MAoBM;AACFH,kBAAAA,SAAS,CAACG,SAAV,KAAwB,OAAxB,IAAmCH,SAAS,CAACG,SAAV,KAAwB,qBAA3D,IACKH,SAAS,CAACG,SAAV,KAAwB,sBAD7B,GAEKzH,IAAI,CAAC0H,IAAL,CAAUJ,SAAV,CAFL,GAE4BT,qBAAqB,CAACa,IAAtB,CAA2BJ,SAA3B,CAF5B;;AAGI,sBAAGA,SAAS,CAACK,SAAV,KAAuB,IAA1B,EAA+B;AAC3BA,oBAAAA,SAAS,CAACD,IAAV,CAAe;AACX,mCAAa,IADF;AAEX,iCAAWJ,SAAS,CAACtF,KAFV;AAGX,mCAAasF,SAAS,CAACtF,KAHZ;AAIX,wCAAkBsF,SAAS,CAACG,SAAV,KAAwB,OAAxB,GACd,YADc,GACC,WALR;AAMX,qCAAeH,SAAS,CAACG,SAAV,KAAwB,OAAxB,GACX,WADW,GACG;AAPP,qBAAf;AASH;AAER;AACJ,eAtCD;AAuCH,aAxCD;AAyCH,WA1CD;AA2CAG,UAAAA,eAAe,GAAG5H,IAAlB;AACH;;AACD2H,QAAAA,SAAS,CAACT,GAAV,CAAcsC,CAAC,IAAE;AACbc,UAAAA,qBAAqB,CAACd,CAAC,CAACoB,SAAH,CAArB,GAAmCpB,CAAC,CAAC7B,SAArC;AAED,SAHH;AAKIuC,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,iBAAhB,EAAkCrN,mBAAmB,CAACwN,IAAI,CAACC,SAAL,CAAeR,qBAAf,CAAD,EAAuC,KAAvC,CAArD;AACAJ,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,iBAAhB,EAAmCrN,mBAAmB,CAACwN,IAAI,CAACC,SAAL,CAAelD,eAAf,CAAD,EAAkC,KAAlC,CAAtD;AACAsC,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,iBAAhB,EAAmCrN,mBAAmB,CAACwN,IAAI,CAACC,SAAL,CAAe,KAAKxL,KAAL,CAAWyL,sBAA1B,CAAD,EAAoD,KAApD,CAAtD;AACAb,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,UAAhB,EAA4BrN,mBAAmB,CAACwN,IAAI,CAACC,SAAL,CAAe1B,QAAf,CAAD,EAA2B,KAA3B,CAA/C;AACAc,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,mBAAhB,EAAqCrN,mBAAmB,CAACwN,IAAI,CAACC,SAAL,CAAe,KAAKxL,KAAL,CAAW0L,wBAA1B,CAAD,EAAsD,KAAtD,CAAxD;AACAd,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,4BAAhB,EAA8C,KAAK/K,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B0I,0BAA1E;AACAmB,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,cAAhB,EAA+B,KAAK/K,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAA3E;AACAmF,QAAAA,QAAQ,CAACQ,MAAT,CAAgB,oBAAhB,EAAqC,KAAK/K,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CwD,kBAAjF;AAEA,cAAMpH,UAAU,GAAG;AACf+D,UAAAA,QAAQ,EAAE,KAAKtF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4B+D,QADvB;AAEfC,UAAAA,SAAS,EAAE,eAFI;AAGfC,UAAAA,WAAW,EAAE,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB2B,UAAjB,CAA4BiE,WAH1B;AAIfnE,UAAAA,SAAS,EAAE;AAAEC,YAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAA7B,WAJI;AAKfqJ,UAAAA,QAAQ,EAAEA,QALK;AAMfe,UAAAA,YAAY,EAAE,IANC;AAOfvJ,UAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmC;AAPb,SAAnB;AAWA,cAAMwJ,WAAW,GAAGnO,SAAS,CAAC,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,EAA8E,KAAK1F,KAAL,CAAWJ,KAAX,CAAiB+F,YAA/F,CAA7B;;AACA,YAAI4F,WAAJ,EAAiB;AACb,gBAAMpL,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAExC,cADK;AAEfyC,YAAAA,IAAI,EAAE;AACFwB,cAAAA,SAAS,EAAE,IADT;AACeU,cAAAA,UAAU,EAAE;AAAEhB,gBAAAA,UAAF;AAAcb,gBAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAA3C,eAD3B;AAEFoB,cAAAA,SAAS,EAAE,IAFT;AAEe2C,cAAAA,UAAU,EAAE,KAAKzE,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAF3B;AAGF9C,cAAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmC;AAH1B;AAFS,WAAnB;AASA,eAAK/B,KAAL,CAAW1D,WAAX,CAAuB6D,UAAvB;AACH,SAXD,MAYK;AACD,eAAKH,KAAL,CAAW3D,UAAX,CAAsBkF,UAAtB,EAAkC,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBc,UAAnD,EAA+D,WAA/D;AACH;AAEJ,OAnGD,MAmGM;AACF1D,QAAAA,KAAK,CAAC0H,IAAN,CAAW,KAAK1E,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KAz3CkB;;AAEf,SAAKpD,SAAL,GAAiB1F,KAAK,CAACyP,SAAN,EAAjB;AACA,SAAKhH,OAAL,GAAezI,KAAK,CAACyP,SAAN,EAAf;AACA,SAAKxF,cAAL,GAAsB,IAAIrH,cAAJ,EAAtB;AAEA,SAAKgB,KAAL,GAAa;AACTyE,MAAAA,SAAS,EAAE;AAAEqH,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAK1L,KAAL,CAAWJ,KAAX,CAAiB+L,QAAjB,GAA4B5H,QAAQ,CAAC,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB+L,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OADF;AAETtH,MAAAA,mBAAmB,EAAG;AAAGoH,QAAAA,IAAI,EAAE,CAAT;AAAYC,QAAAA,IAAI,EAAE,KAAK1L,KAAL,CAAWJ,KAAX,CAAiB+L,QAAjB,GAA4B5H,QAAQ,CAAC,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB+L,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAxF,OAFb;AAGTlG,MAAAA,qBAAqB,EAAE,EAHd;AAITiB,MAAAA,UAAU,EAAE,IAAI2C,GAAJ,EAJH;AAKTuC,MAAAA,YAAY,EAAE,EALL;AAMTC,MAAAA,KAAK,EAAE,EANE;AAOThL,MAAAA,cAAc,EAAE,EAPP;AAQTiL,MAAAA,kBAAkB,EAAE,EARX;AAST/J,MAAAA,SAAS,EAAE,EATF;AAUTgK,MAAAA,SAAS,EAAE,CAVF;AAWTC,MAAAA,UAAU,EAAE,CAXH;AAYTC,MAAAA,gBAAgB,EAAE,CAZT;AAaTC,MAAAA,OAAO,EAAE,CAbA;AAcTT,MAAAA,IAAI,EAAE,CAdG;AAeTC,MAAAA,IAAI,EAAE,KAAK1L,KAAL,CAAWJ,KAAX,CAAiB+L,QAAjB,IAA6B,KAAK3L,KAAL,CAAWJ,KAAX,CAAiB+L,QAAjB,CAA0B,CAA1B,CAf1B;AAgBTQ,MAAAA,0BAA0B,EAAE,IAhBnB;AAiBTC,MAAAA,kBAAkB,EAAE,EAjBX;AAkBTC,MAAAA,kBAAkB,EAAE,IAlBX;AAmBThM,MAAAA,IAAI,EAAE,EAnBG;AAoBT8G,MAAAA,qBAAqB,EAAC;AApBb,KAAb;AAuBH;;AAE8B,SAAxBmF,wBAAwB,CAACtM,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYgM,YAAZ,KAA6B,EAAjC,EAAqC;AACjC5O,MAAAA,KAAK,CAAC0H,IAAN,CAAW1E,KAAK,CAACJ,KAAN,CAAYgM,YAAvB;AACA5L,MAAAA,KAAK,CAACJ,KAAN,CAAYgM,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAI5L,KAAK,CAACJ,KAAN,CAAY2M,eAAZ,KAAgCxH,SAAhC,IAA6C/E,KAAK,CAACJ,KAAN,CAAY2M,eAAZ,KAAgC,EAAjF,EAAqF;AACjFvP,MAAAA,KAAK,CAAC0H,IAAN,CAAW1E,KAAK,CAAC2E,IAAN,CAAWC,aAAX,CAAyB;AAAEC,QAAAA,EAAE,EAAE7E,KAAK,CAACJ,KAAN,CAAY2M;AAAlB,OAAzB,CAAX;AACAvM,MAAAA,KAAK,CAACJ,KAAN,CAAY2M,eAAZ,GAA8B,EAA9B;AACH;;AAED,QAAIvM,KAAK,CAACJ,KAAN,CAAYiM,KAAZ,KAAsBlM,KAAK,CAACkM,KAAhC,EAAuC;AACnC7O,MAAAA,KAAK,CAAC6O,KAAN,CAAY7L,KAAK,CAACJ,KAAN,CAAYiM,KAAxB;AACA7L,MAAAA,KAAK,CAACJ,KAAN,CAAYiM,KAAZ,GAAoB,EAApB;AACH;;AAED,WAAO,IAAP;AACH;;AAEDW,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,YAAT,EAAuB;AACnB,YAAMC,MAAM,GAAG,KAAKD,YAAL,CAAkBE,YAAjC;AACA,WAAKhM,QAAL,CAAc;AACVoL,QAAAA,SAAS,EAAEW,MAAM,GAAG,EADV;AAEVD,QAAAA,YAAY,EAAEC,MAAM,GAAG;AAFb,OAAd;AAIH;AACJ;;AAEDE,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC;AACA;AACA,QAAIA,SAAS,CAACzM,IAAV,CAAeuK,MAAf,GAAwB,CAAxB,IAA6BkC,SAAS,CAACzM,IAAV,KAAmB,KAAKV,KAAL,CAAWU,IAA/D,EAAqE;AACjE,aAAO,KAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACJ;;AAED0M,EAAAA,MAAM,GAAI;AACN,QAAIhM,GAAG,GAAG9D,wBAAwB,CAAC,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BS,YAA7B,EAA2C,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BU,UAAvE,EAAmF,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBsB,QAApG,CAAlC;AAEA,QAAIF,QAAQ,GAAC,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAA5B,GAAuC9D,mBAAmB,CAAC,KAAK8C,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlB,EAA4B,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BM,QAAxD,CAA1D,GAA8H,IAAIkJ,IAAJ,EAA3I;AACA,QAAIjJ,MAAM,GAAC,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAA5B,GAAqC/D,mBAAmB,CAAC,KAAK8C,KAAL,CAAWJ,KAAX,CAAiBsB,QAAlB,EAA4B,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4BO,MAAxD,CAAxD,GAA0H,IAAIiJ,IAAJ,EAArI;AAEA,UAAM8C,KAAK,GAAG,KAAKrN,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,YAA1B,IAA0C,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,YAA1B,EAAwCC,YAAlF,GAAiG,CAAC,CAAhH;AACA,UAAMoG,MAAM,GAAG,KAAKtN,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,aAA1B,IAA2C,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,aAA1B,EAAyCC,YAApF,GAAmG,CAAC,CAAnH;AACA,UAAMd,QAAQ,GAAG,KAAKpG,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,eAA1B,IAA6C,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,eAA1B,EAA2CC,YAAxF,GAAuG,CAAC,CAAzH;AACA,UAAMqG,SAAS,GAAG,KAAKvN,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,IAA8C,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,gBAA1B,EAA4CC,YAA1F,GAAyG,CAAC,CAA5H;AACA,UAAMsG,SAAS,GAAG,KAAKxN,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,gBAA1B,IAA8C,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,gBAA1B,EAA4CC,YAA1F,GAAyG,CAAC,CAA5H,CAVM,CAWN;;AACA,UAAMuG,WAAW,GAAG,KAAKzN,KAAL,CAAW+G,UAAX,CAAsBC,GAAtB,CAA0B,qBAA1B,IAAmD,KAAKhH,KAAL,CAAW+G,UAAX,CAAsBE,GAAtB,CAA0B,qBAA1B,EAAiDC,YAApG,GAAmH,CAAC,CAAxI;AAEA,UAAMwG,eAAe,GAAG;AACpB5I,MAAAA,UAAU,EAAE,aADQ;AACO1C,MAAAA,SAAS,EAAE,QADlB;AAC4BmD,MAAAA,eAAe,EAAE,cAD7C;AAEpBhE,MAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsB,QAFP;AAEiByE,MAAAA,YAAY,EAAEqH;AAF/B,KAAxB;AAKA,UAAMM,gBAAgB,GAAG;AACrB7I,MAAAA,UAAU,EAAE,aADS;AACM1C,MAAAA,SAAS,EAAE,QADjB;AAC2BmD,MAAAA,eAAe,EAAE,cAD5C;AAErBhE,MAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsB,QAFN;AAEgByE,MAAAA,YAAY,EAAEsH,MAF9B;AAEqCvM,MAAAA,UAAU,EAAC,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAFjE,KAAzB;AAMA,UAAM6M,kBAAkB,GAAG;AACvB9I,MAAAA,UAAU,EAAE,aADW;AACIc,MAAAA,SAAS,EAAE,SADf;AAC0BxD,MAAAA,SAAS,EAAE,QADrC;AAC+C4D,MAAAA,YAAY,EAAEI;AAD7D,KAA3B,CAzBM,CA4BN;AACA;AACA;AAEA;;AAEA,UAAMyH,WAAW,GAAG;AAChBxI,MAAAA,aAAa,EAAE,SADC;AACUC,MAAAA,cAAc,EAAE,iBAD1B;AAC6CC,MAAAA,eAAe,EAAE,cAD9D;AAEhBkB,MAAAA,QAAQ,EAAE,8BAFM;AAE0BC,MAAAA,gBAAgB,EAAE;AAAE/E,QAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiBsB;AAA7B,OAF5C;AAGhBR,MAAAA,UAAU,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAHb;AAIhB+M,MAAAA,eAAe,EAAE,CAAC,aAAD,EAAe,aAAf,EAA8B,cAA9B,EAA8C,cAA9C,EAA6D,eAA7D,EAA6E,gBAA7E,EAA8F,kBAA9F,EAAiH,gBAAjH,EAAkI,WAAlI,EAA+I,qBAA/I;AAJD,KAApB;AAOA,UAAMC,cAAc,GAAC,EAArB;AACAA,IAAAA,cAAc,CAAC3F,IAAf,CACI;AAAE,mBAAa,gBAAf;AAAiC,eAAS;AAA1C,KADJ,EAEI;AAAE,mBAAa,aAAf;AAA8B,eAAS;AAAvC,KAFJ,EAGI;AAAE,mBAAa,kBAAf;AAAmC,eAAS;AAA5C,KAHJ,EAII;AAAE,mBAAa,cAAf;AAA+B,eAAS;AAAxC,KAJJ,EAKI;AAAE,mBAAa,cAAf;AAA+B,eAAS;AAAxC,KALJ,EAMI;AAAE,mBAAa,eAAf;AAAgC,eAAS;AAAzC,KANJ,EAOI;AAAE,mBAAa,aAAf;AAA8B,eAAS;AAAvC,KAPJ,EAQI;AAAE,mBAAa,gBAAf;AAAiC,eAAS;AAA1C,KARJ,EASI;AAAE,mBAAa,WAAf;AAA4B,eAAS;AAArC,KATJ;AAaA,QAAI4F,cAAc,GAAG,EAArB;AACAA,IAAAA,cAAc,GAAG,CACb;AACI,eAAS,UADb;AAEI,eAAS5M,GAAG,CAAC6M;AAFjB,KADa,EAKb;AACI,eAAS,QADb;AAEI,eAAS7M,GAAG,CAAC8M;AAFjB,KALa,CAAjB;AAWA,QAAIC,eAAe,GAAG,EAAtB;;AACI,QAAG,KAAK9N,KAAL,CAAWJ,KAAX,CAAiBmH,UAAjB,KAA8B,aAAjC,EAA+C;AAC3C+G,MAAAA,eAAe,CAAC/F,IAAhB,CACI;AAAE,mBAAW,oBAAb;AAAmC,qBAAa,gBAAhD;AAAmE,0BAAiB,YAApF;AAAkG,uBAAe;AAAjH,OADJ,EAEI;AAAE,mBAAW,YAAb;AAA2B,qBAAa,aAAxC;AAAwD,0BAAiB,YAAzE;AAAuF,uBAAe;AAAtG,OAFJ,EAGI;AAAE,mBAAW,kBAAb;AAAiC,qBAAa,eAA9C;AAAgE,0BAAiB,WAAjF;AAA8F,uBAAe;AAA7G,OAHJ,EAII;AAAE,mBAAW,iBAAb;AAAgC,qBAAa,kBAA7C;AAAkE,0BAAiB,YAAnF;AAAiG,uBAAe;AAAhH,OAJJ;;AAQA,UAAG,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0B6M,cAA1B,KAA6CrP,iBAAiB,CAACsP,GAAlE,EAAsE;AAClEF,QAAAA,eAAe,CAAC/F,IAAhB,CAAqB;AAAE,qBAAW,cAAb;AAA6B,uBAAa,gBAA1C;AAA6D,4BAAiB,YAA9E;AAA4F,yBAAe;AAA3G,SAArB;AACH;;AAED,UAAI,KAAKpI,KAAL,CAAWkB,cAAX,CAA0B,aAA1B,MAA6CnC,iBAAiB,CAACsP,GAAnE,EAAwE;AACpEF,QAAAA,eAAe,CAAC/F,IAAhB,CAAqB;AAAE,qBAAW,mBAAb;AAAkC,uBAAa,gBAA/C;AAAiE,4BAAiB,WAAlF;AAA+F,yBAAe;AAA9G,SAArB;AACH;AACJ;;AAGD,QAAIkG,aAAa,GAAG,EAApB;AACA,QAAIC,aAAa,GAAG,aAApB;;AACA,QAAI,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,IAA+C,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CwD,kBAA5C,KAAmEjK,iBAAiB,CAACyP,KAAxI,EAA+I;AAC3IF,MAAAA,aAAa,GAAG,mBAAhB;AACAC,MAAAA,aAAa,GAAG,EAAhB;AACH,KAHD,MAIK,IAAI,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,IAA+C,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CwD,kBAA5C,KAAmEjK,iBAAiB,CAAC0P,QAAxI,EAAkJ;AACnJH,MAAAA,aAAa,GAAG,iBAAhB;AACH,KAFI,MAGA;AACDA,MAAAA,aAAa,GAAG,eAAhB;AACH;;AAIL,wBACI,uDACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,kEAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAEN,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAsB,MAAA,SAAS,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAG,GAAE,CAAC,KAAKhO,KAAL,CAAW0O,WAAZ,GAA0B,GAA1B,GAAgC,GAAI,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,OAAO,EAAG,MAAI,KAAK1N,QAAL,CAAc;AAAC0N,QAAAA,WAAW,EAAC,CAAC,KAAK1O,KAAL,CAAW0O;AAAzB,OAAd,CAApB;AAA0E,MAAA,SAAS,EAAC,kBAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC,KAAK1O,KAAL,CAAW0O,WAAZ,gBACG;AAAG,MAAA,KAAK,EAAC,iBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAEG;AAAG,MAAA,KAAK,EAAC,oBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR,CADJ,eAOI,oBAAC,UAAD;AACI,MAAA,aAAa,EAAE,KAAKrO,KAAL,CAAW2E,IAAX,CAAgBC,aADnC;AAEI,MAAA,UAAU,EAAE,aAFhB;AAGI,MAAA,UAAU,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBc,UAHjC;AAII,MAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBsB,QAJ/B;AAKI,MAAA,UAAU,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B4N,YAA5B,IAA4C,KAAKtO,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4Bb,OALxF;AAMI,MAAA,eAAe,EAAGA,OAAD,IAAa,KAAKG,KAAL,CAAWtD,gBAAX,CAA4BmD,OAA5B,EAAqC,KAAKG,KAAL,CAAWJ,KAAX,CAAiBsB,QAAtD,EAAgE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjF,CANlC;AAOI,MAAA,cAAc,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAPhD;AAQI,MAAA,eAAe,EAAC,cARpB;AASI,MAAA,SAAS,EAAC,aATd;AAUI,MAAA,UAAU,EAAC,kBAVf;AAWI,MAAA,WAAW,EAAC,qBAXhB;AAYI,MAAA,UAAU,EAAC,KAZf;AAaI,MAAA,gBAAgB,EAAE,KAAKnF,KAAL,CAAWnD,gBAbjC;AAcI,MAAA,WAAW,EAAE2Q,WAdjB;AAeI,MAAA,qBAAqB,EAAE,KAAK7N,KAAL,CAAW8F,qBAftC;AAgBI,MAAA,KAAK,EAAEuH,KAhBX;AAiBI,MAAA,SAAS,EAAE,KAAKvL,SAjBpB;AAkBI,MAAA,UAAU,EAAE,KAAKD,UAlBrB;AAmBI,MAAA,UAAU,EAAE,IAnBhB;AAoBI,MAAA,SAAS,EAAE,MAAM,KAAKxB,KAAL,CAAWvD,sBAAX,CAAkC4Q,eAAlC,CApBrB;AAqBI,MAAA,UAAU,EAAE,KAAKpN,UArBrB;AAsBI,MAAA,WAAW,EAAE,KAAKK,WAtBtB;AAuBI,MAAA,cAAc,EAAE,KAAKQ,cAvBzB;AAwBI,MAAA,cAAc,EAAE,IAxBpB;AAyBI,MAAA,UAAU,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiBM,UAzBjC;AA0BI,MAAA,eAAe,EAAE,CACb;AACI,0CACI,oBAAC,aAAD;AACI,UAAA,QAAQ,EAAEc,QADd;AAEI,UAAA,MAAM,EAAEC,MAFZ;AAGI,UAAA,sBAAsB,EAAE,KAAKV,sBAHjC;AAII,UAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWJ,KAAX,CAAiBsB,QAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,OADa,CA1BrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ,eAgDI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAG,GAAE,CAAC,KAAKvB,KAAL,CAAW0O,WAAZ,GAA0B,GAA1B,GAAgC,IAAK,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKrO,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,IAA+C,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4Bb,OAA3E,IAAsF,KAAKG,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4Bb,OAA5B,CAAoC+K,MAApC,GAA6C,CAAnI,IAAwI,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAApK,gBACG,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,oBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4C,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CoJ,cAAxF,CADA,eAEA,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,SAAS,EAAG,oBAAmBN,aAAc,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAEC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKlO,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CqJ,mBAFjD,CADJ,CADJ,eAOI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,kCAApB;AAAuD,MAAA,IAAI,EAAC,GAA5D;AACI,MAAA,MAAM,EAAE,KAAK7O,KAAL,CAAW8F,qBAAX,CAAiCgJ,OAAjC,CAAyCxB,MAAzC,MAAqD,CAAC,CADlE;AAEI,kBAAU,KAAKjN,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,MAAA,OAAO,EAAG6J,CAAD,IAAO,KAAK1O,KAAL,CAAWvD,sBAAX,CAAkC6Q,gBAAlC,CAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEvO,WAAvB;AAAoC,MAAA,KAAK,EAAE,KAAKiB,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADA,eAOA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,oDAApB;AAAyE,MAAA,IAAI,EAAC,GAA9E;AACI,MAAA,MAAM,EAAE,KAAKlF,KAAL,CAAW8F,qBAAX,CAAiCgJ,OAAjC,CAAyC1I,QAAzC,MAAuD,CAAC,CADpE;AAEI,kBAAU,KAAK/F,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,MAAA,OAAO,EAAE,MAAM,KAAKiB,aAAL,CAAmBC,QAAnB,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE/G,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAPA,eAaA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,oDAApB;AAAyE,MAAA,IAAI,EAAC,GAA9E;AACI,MAAA,MAAM,EAAE,KAAKW,KAAL,CAAW8F,qBAAX,CAAiCgJ,OAAjC,CAAyCvB,SAAzC,MAAwD,CAAC,CADrE;AAEI,kBAAU,KAAKlN,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,MAAA,OAAO,EAAE,MAAM,KAAKyB,cAAL,CAAoB4G,SAApB,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAC,cAA7B;AAA4C,MAAA,KAAK,EAAC,IAAlD;AAAuD,MAAA,MAAM,EAAC,IAA9D;AACgB,MAAA,IAAI,EAAC,mBADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAbA,eAoBA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,oDAApB;AAAyE,MAAA,IAAI,EAAC,GAA9E;AACI,MAAA,MAAM,EAAE,KAAKvN,KAAL,CAAW8F,qBAAX,CAAiCgJ,OAAjC,CAAyCtB,SAAzC,MAAwD,CAAC,CADrE;AAEI,kBAAU,KAAKnN,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,MAAA,OAAO,EAAE,MAAM,KAAK0B,cAAL,CAAoB4G,SAApB,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAElO,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CApBA,eA0BA,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,oDAApB;AAAyE,MAAA,IAAI,EAAC,GAA9E;AACI,kBAAU,KAAKe,KAAL,CAAW2E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADd;AAEI,MAAA,OAAO,EAAE,MAAM,KAAK7E,KAAL,CAAWjD,eAAX,CAA2B,KAAKiD,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByE,eAA5B,CAA4CC,YAAvE,EAAoF,KAAKpF,KAAL,CAAWJ,KAAX,CAAiBsB,QAArG,EAA8G,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAA/H,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEtB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CA1BA,CAPJ,CADJ,CAFA,CADJ,eA+CI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAeI,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE,oBADrB;AAEI,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByD,aAA5B,IAA4C,EAFtD;AAGI,MAAA,UAAU,EAAE5E,OAAO,CAAC,KAAKS,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4ByD,aAA5B,IAA4C,EAA7C,EAAiD,KAAKxE,KAAL,CAAW0E,mBAA5D,CAHvB;AAII,MAAA,SAAS,EAAE,KAAK1E,KAAL,CAAW0E,mBAJ1B;AAKI,MAAA,eAAe,EAAE,KAAKJ,yBAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAK0K,iBAAL,CAAuB,KAAKhP,KAAL,CAAWiP,eAAlC,KAAsD,EAN/E;AAOI,MAAA,iBAAiB,EAAE,KAAKD,iBAAL,CAAuB,KAAKhP,KAAL,CAAWkP,oBAAlC,KAA2D,EAPlF;AAQI,MAAA,QAAQ,EAAE,KAAK7O,KAAL,CAAWJ,KAAX,CAAiBsB,QAR/B;AASI,MAAA,UAAU,EAAE,KAAKvB,KAAL,CAAW+G,UAT3B;AAUI,MAAA,qBAAqB,EAAE,KAAK/G,KAAL,CAAW8F,qBAVtC;AAWI,MAAA,UAAU,EAAE,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB2B,UAXjC,CAYI;AACA;AAbJ;AAcI,MAAA,YAAY,EAAI,KAAK2H,mBAdzB;AAeI,MAAA,SAAS,EAAG,eAfhB;AAgBI,MAAA,QAAQ,EAAE,IAhBd;AAiBI,MAAA,WAAW,EAAE,KAjBjB;AAkBI,MAAA,iBAAiB,EAAE,IAlBvB;AAmBI,MAAA,gBAAgB,EAAE,IAnBtB;AAoBI,MAAA,iBAAiB,EAAE,IApBvB;AAqBI,MAAA,aAAa,EAAE,IArBnB;AAsBI,MAAA,SAAS,EAAE,KAAK1C,iBAtBpB;AAuBI,MAAA,iBAAiB,EAAG,KAvBxB;AAwBI,MAAA,gBAAgB,EAAE,IAxBtB;AAyBI,MAAA,qBAAqB,EAAE,KAzB3B;AA0BI,MAAA,uBAAuB,EAAE,KA1B7B;AA2BI,MAAA,MAAM,EAAE,KAAKiC,UA3BjB;AA4BI,MAAA,UAAU,EAAE,YA5BhB;AA6BI,MAAA,UAAU,EAAE,OA7BhB;AA8BI,MAAA,WAAW,EAAC,UA9BhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,CA/CJ,CADH,GAqGA,EAtGL,CADJ,CADJ,CADJ,CAhDJ,CAFJ,CADJ,EAoKM,KAAKzI,KAAL,CAAWJ,KAAX,CAAiBkC,SAAjB,iBACE,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBkC,SAD3B;AAEI,MAAA,UAAU,EAAE,KAAKF,UAFrB;AAGI,MAAA,SAAS,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBmC,SAHhC;AAII,MAAA,UAAU,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiB2B,UAJjC;AAKI,MAAA,UAAU,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiB6E,UALjC;AAMI,MAAA,WAAW,EAAE,KAAKH,WANtB;AAOI,MAAA,KAAK,EAAE,KAAKtE,KAAL,CAAWJ,KAAX,CAAiBiC,SAP5B;AAQI,MAAA,aAAa,EAAE,KAAKI,aARxB;AASI,MAAA,YAAY,EAAE,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBgM,YATnC;AAUI,MAAA,WAAW,EAAE,KAAK5L,KAAL,CAAW1D,WAV5B;AAWI,MAAA,cAAc,EAAE,KAAKqD,KAAL,CAAWkB,cAAX,IAA6B,EAXjD;AAYI,MAAA,eAAe,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAA+B,mBAA/B,GAAqD,KAAK9E,KAAL,CAAWwH,qBAAhE,GAAyF2G,eAZ9G;AAaI,MAAA,YAAY,EAAE,KAAK9N,KAAL,CAAWJ,KAAX,CAAiBiC,SAAjB,gBACV,oBAAC,KAAD;AACA,QAAA,SAAS,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBmC,SAD5B;AAEA,QAAA,aAAa,EAAE,KAAK/B,KAAL,CAAW2E,IAAX,CAAgBC,aAF/B;AAGA,QAAA,eAAe,EAAE,KAAKpC,eAHtB;AAIA,QAAA,UAAU,EAAE,KAAKxC,KAAL,CAAWJ,KAAX,CAAiB2B,UAJ7B;AAKA,QAAA,cAAc,EAAE,KAAK5B,KAAL,CAAWkB,cAAX,IAA6B,EAL7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAQV,KAAKb,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAAiC,aAAjC,KAAoD,KAAKzE,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjB,KAAgC,QAAhC,IAA4C,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjB,KAA+B,QAA/H,iBACA,oBAAC,UAAD;AACI,QAAA,sBAAsB,EAAE,KAAK2B,sBADjC;AAEI,QAAA,eAAe,EAAE,KAAKlB,eAF1B;AAGI,QAAA,gBAAgB,EAAG,KAAK5B,gBAH5B;AAII,QAAA,aAAa,EAAE,KAAKkC,aAJxB;AAKI,QAAA,aAAa,EAAE,KAAK9C,KAAL,CAAW2E,IAAX,CAAgBC,aALnC;AAMI,QAAA,SAAS,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBmC,SANhC;AAOI,QAAA,UAAU,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiB2B,UAPjC;AAQI,QAAA,cAAc,EAAG,KAAKvB,KAAL,CAAWJ,KAAX,CAAiBkP,cARtC;AASI,QAAA,MAAM,EAAE,KAAK9O,KAAL,CAAWJ,KAAX,CAAiBmP,MAT7B;AAUI,QAAA,WAAW,EAAE,KAAK/O,KAAL,CAAWJ,KAAX,CAAiBoP,WAVlC;AAWI,QAAA,OAAO,EAAE,KAAKhP,KAAL,CAAWJ,KAAX,CAAiBqP,OAX9B;AAYI,QAAA,OAAO,EAAE,KAAKjP,KAAL,CAAWJ,KAAX,CAAiBsP,OAZ9B;AAaI,QAAA,QAAQ,EAAE,KAAKlP,KAAL,CAAWJ,KAAX,CAAiBuP,QAb/B;AAcI,QAAA,cAAc,EAAE,KAAKxP,KAAL,CAAWkB,cAAX,IAA6B,EAdjD;AAeI,QAAA,WAAW,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBwP,WAAjB,IAAgC,EAfjD;AAgBI,QAAA,QAAQ,EAAE,KAAKpP,KAAL,CAAWJ,KAAX,CAAiBsB,QAhB/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAoBA,KAAKlB,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAAgC,aAAhC,IAAiD,KAAKzE,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjB,KAA8B,MAA/E,gBACA,oBAAC,WAAD;AACI,QAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBsB,QAD/B;AAEI,QAAA,kBAAkB,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2O,kBAFpD;AAGI,QAAA,cAAc,EAAE3B,cAAc,IAAG,EAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAMA,KAAK1N,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAAgC,mBAAhC,gBACQ,oBAAC,eAAD;AACI,QAAA,cAAc,EAAE,KAAKzE,KAAL,CAAWJ,KAAX,CAAiBiB,cADrC;AAEI,QAAA,YAAY,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,IAAqD,KAAKrH,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B2G,qBAA5B,CAAmD,CAAnD,EAAsDC,QAF7H;AAGI,QAAA,gBAAgB,EAAE,KAAK1G,gBAH3B;AAII,QAAA,eAAe,EAAE,KAAK4B,eAJ1B;AAKI,QAAA,oBAAoB,EAAE,KAAKkB,sBAL/B;AAMI,QAAA,SAAS,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBmD,SANhC;AAOI,QAAA,aAAa,EAAE,KAAKI,oBAPxB;AAQI,QAAA,UAAU,EAAE,KAAKmM,UARrB;AASI,QAAA,gBAAgB,EAAE,KAAKtG,gBAT3B;AAUI,QAAA,aAAa,EAAE,KAAKrF,aAVxB;AAWI,QAAA,QAAQ,EAAE,KAAK3D,KAAL,CAAWJ,KAAX,CAAiBsB,QAX/B;AAYI,QAAA,YAAY,EAAE,KAAKlB,KAAL,CAAWJ,KAAX,CAAiB2P,YAZnC;AAaI,QAAA,eAAe,EAAE,KAAKvP,KAAL,CAAWJ,KAAX,CAAiB4J,eAbtC;AAcI,QAAA,KAAK,EAAE,KAAKxJ,KAAL,CAAWJ,KAdtB;AAeI,QAAA,eAAe,EAAE,KAAK4P,eAf1B;AAgBI,QAAA,gBAAgB,EAAE,KAAKC,gBAhB3B;AAiBI,QAAA,qBAAqB,EAAE,KAAKzP,KAAL,CAAWJ,KAAX,CAAiB6F,qBAjB5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADR,GAqBD,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB6E,UAAjB,KAA+B,mBAA/B,gBACK,oBAAC,OAAD;AACI,QAAA,cAAc,EAAE,KAAK9E,KAAL,CAAWkB,cAAX,IAA6B,EADjD;AAEI,QAAA,MAAM,EAAE,KAAK+H,gBAFjB;AAGI,QAAA,gBAAgB,EAAE,KAAKI,gBAH3B;AAII,QAAA,UAAU,EAAE,KAAKrJ,KAAL,CAAWoJ,UAJ3B;AAKI,QAAA,SAAS,EAAE,KAAK/I,KAAL,CAAWJ,KAAX,CAAiBmC,SALhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,GAQC,EA5ER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArKR,CADJ;AA0PH;;AAmND4M,EAAAA,iBAAiB,CAACtO,IAAD,EAAO;AACpB,UAAMqP,SAAS,GAAGrP,IAAI,IAAIA,IAAI,CAACkH,GAAL,CAAUoI,MAAD,IAAY;AAC3C,aAAO;AAAE,mBAAWA,MAAM,CAAClR,gBAAgB,CAACmR,KAAlB,CAAN,CAA+B,KAAK5P,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0B2O,iBAAzD,KAA+E,GAA5F;AAAiG,qBAAaF,MAAM,CAAClR,gBAAgB,CAACqR,KAAlB,CAApH;AAA8I,iBAAS,OAAvJ;AAAgK,sBAAc,GAA9K;AAAmL,oBAAY,CAACH,MAAM,CAAClR,gBAAgB,CAACsR,QAAlB,CAAP;AAA/L,OAAP;AACH,KAFyB,CAA1B;AAGA,WAAOL,SAAP;AACH;;AA4vBDM,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI;AAAExK,MAAAA,qBAAF;AAAyBiB,MAAAA,UAAzB;AAAoC7F,MAAAA,cAApC;AAAmD4K,MAAAA,IAAnD;AAAyDC,MAAAA,IAAzD;AAA8DhL,MAAAA,UAA9D;AAAyE2D,MAAAA,mBAAzE;AACAuK,MAAAA,eADA;AACgBC,MAAAA,oBADhB;AACqC7D,MAAAA,gBADrC;AACsDkF,MAAAA,oBADtD;AAC2E9E,MAAAA,sBAD3E;AACkGC,MAAAA;AADlG,QAC+H,KAAK1L,KADxI;AAEA,QAAIwQ,IAAI,GAAG,KAAX;;AACA,QAAI,KAAKnQ,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,KAAgCuP,aAAa,CAACrQ,KAAd,CAAoBc,UAAxD,EAAoE;AAChE,UAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAA1B,KAAwCuK,aAAa,CAACrQ,KAAd,CAAoBsB,QAApB,CAA6BwE,SAAzE,EAAoF;AAChFD,QAAAA,qBAAqB,GAAG,EAAxB;;AACA,YAAI,KAAKzF,KAAL,CAAWJ,KAAX,CAAiB6F,qBAArB,EAA4C;AACxC,eAAKzF,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAjB,CAAuC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAjE,KAA+E0K,MAAM,CAACC,MAAP,CAAc,KAAKrQ,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAjB,CAAuC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAjE,CAAd,EAA2F6B,GAA3F,CAA+FyC,IAAI,IAClLvE,qBAAqB,CAACsC,IAAtB,CAA2BiC,IAAI,CAACnD,YAAhC,CAD+E,CAA/E;AAEH;;AACDH,QAAAA,UAAU,GAAGvJ,aAAa,CAAC,KAAK6C,KAAL,CAAWJ,KAAX,CAAiB6F,qBAAlB,EAAyC,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBsB,QAAjB,CAA0BwE,SAAnE,CAA1B;AACAyK,QAAAA,IAAI,GAAG,IAAP;AACH;AACJ;;AACD,QAAI,KAAKnQ,KAAL,CAAWJ,KAAX,CAAiBiB,cAAjB,KAAoCoP,aAAa,CAACrQ,KAAd,CAAoBiB,cAA5D,EAA4E;AACxEA,MAAAA,cAAc,GAAG,KAAKb,KAAL,CAAWJ,KAAX,CAAiBiB,cAAlC;AACAsP,MAAAA,IAAI,GAAG,IAAP;AACH;;AAED,QAAI,KAAKnQ,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,KAAgCuP,aAAa,CAACrQ,KAAd,CAAoBc,UAAxD,EAAoE;AAEhEyP,MAAAA,IAAI,GAAG,IAAP;AACA1E,MAAAA,IAAI,GAAG,KAAKzL,KAAL,CAAWJ,KAAX,CAAiB6L,IAAjB,KAA0B1G,SAA1B,GAAsC0G,IAAtC,GAA6C,KAAKzL,KAAL,CAAWJ,KAAX,CAAiB6L,IAArE;AACAC,MAAAA,IAAI,GAAG,KAAK1L,KAAL,CAAWJ,KAAX,CAAiB8L,IAAjB,IAAyBA,IAAhC;AACH;;AAED,QAAI,KAAK1L,KAAL,CAAWJ,KAAX,CAAiByE,mBAAjB,IAAwC,KAAKrE,KAAL,CAAWJ,KAAX,CAAiByE,mBAAjB,KAAyC4L,aAAa,CAACrQ,KAAd,CAAoByE,mBAAzG,EAA8H;AAC1HA,MAAAA,mBAAmB,GAAG,KAAKrE,KAAL,CAAWJ,KAAX,CAAiByE,mBAAvC;AACH;;AAED,QAAI,KAAKrE,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B4P,aAA5B,IAA6C,KAAKtQ,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B4P,aAA5B,KAA8CL,aAAa,CAACrQ,KAAd,CAAoBc,UAApB,CAA+B4P,aAA9H,EAA6I;AACzI,YAAMC,aAAa,GAAGrF,IAAI,CAACsF,KAAL,CAAW,KAAKxQ,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B4P,aAA5B,CAA0ChJ,QAA1C,IAAsD,KAAKtH,KAAL,CAAWJ,KAAX,CAAiBc,UAAjB,CAA4B4P,aAA5B,CAA0ChJ,QAA1C,CAAmD3F,KAApH,CAAtB;;AACA,UAAG4O,aAAa,KAAK,IAArB,EAA0B;AACtB3B,QAAAA,eAAe,GAAG2B,aAAa,CAACE,QAAd,GAAyBF,aAAa,CAACE,QAAvC,GAAkD,EAApE;AACA5B,QAAAA,oBAAoB,GAAG0B,aAAa,CAACG,YAAd,GAA6BH,aAAa,CAACG,YAA3C,GAA0D,EAAjF;AACA1F,QAAAA,gBAAgB,GAAGuF,aAAa,CAACI,UAAd,GAA2BJ,aAAa,CAACI,UAAzC,GAAsD,EAAzE;AACAT,QAAAA,oBAAoB,GAAGK,aAAa,CAACK,cAAd,GAA+BL,aAAa,CAACK,cAA7C,GAA8D,EAArF;AACAxF,QAAAA,sBAAsB,GAAGmF,aAAa,CAACM,eAAd,GAAgCN,aAAa,CAACM,eAA9C,GAAgE,EAAzF;AACAxF,QAAAA,wBAAwB,GAAGkF,aAAa,CAACO,iBAAd,GAAmCP,aAAa,CAACO,iBAAjD,GAAqE,EAAhG;AACH;AAGJ;;AAGD,QAAIX,IAAJ,EAAU;AACN,WAAKxP,QAAL,CAAc;AACV8E,QAAAA,qBADU;AACaiB,QAAAA,UADb;AACwB7F,QAAAA,cADxB;AACuC4K,QAAAA,IADvC;AAC6CC,QAAAA,IAD7C;AACkDhL,QAAAA,UADlD;AAC6D2D,QAAAA,mBAD7D;AAEVuK,QAAAA,eAFU;AAEMC,QAAAA,oBAFN;AAE4B7D,QAAAA,gBAF5B;AAE6CkF,QAAAA,oBAF7C;AAEmE9E,QAAAA,sBAFnE;AAE0FC,QAAAA;AAF1F,OAAd;AAIH;AACJ;;AAh7CiC;;AAm7CtC,eAAerP,OAAO,CAAC0D,eAAD,EAAkB;AACpCtD,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,WADW;AACCC,EAAAA,sBADD;AACwBC,EAAAA,uBADxB;AACgDC,EAAAA,sBADhD;AACwEC,EAAAA,gBADxE;AACyFC,EAAAA,SADzF;AACmGC,EAAAA,UADnG;AAC8GC,EAAAA,gBAD9G;AAC+HC,EAAAA,kBAD/H;AACkJC,EAAAA;AADlJ,CAAlB,CAAP,CAGZd,UAAU,CAAC4D,OAAD,CAHE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl,FormattedMessage } from 'react-intl';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { callService,crudMaster,updateStore,getGoodsInFilterSubmit,validateEsignCredential,getGoodsInComboService,getGoodsInDetail,getClient,getProject,filterColumnData,getPreviewTemplate,viewInformation  } from '../../actions';\r\nimport { toast } from 'react-toastify';\r\nimport { convertDateValuetoString, rearrangeDateFormat, getControlMap,showEsign,formatInputDate,comboChild,convertDateTimetoStringDBFormat,onDropAttachFileList,deleteAttachmentDropZone,Lims_JSON_stringify } from '../../components/CommonScript';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {  Col, Row, Card, Nav,FormGroup,FormLabel } from 'react-bootstrap';\r\nimport GoodsInFilter from './GoodsInFilter';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport AddGoodsIn  from './AddGoodsIn';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { SampleType, designProperties,transactionStatus } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { ContentPanel,ReadOnlyText } from '../../components/App.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt,faThumbsUp,faPlus,faFileImport, faEye } from '@fortawesome/free-solid-svg-icons';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { ReactComponent as GoodsReceivedIcon } from '../../assets/image/goods-received.svg';\r\nimport AddFile from './AddFile';\r\nimport GoodsInView from './GoodsInView';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\nclass GoodsIn extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchRef = React.createRef();    \r\n        this.formRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.state = {\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            sampleGridDataState : {  skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            filterGoodsInParam: {},\r\n            operation: \"\",           \r\n            firstPane: 0,\r\n            paneHeight: 0,\r\n            secondPaneHeight: 0,\r\n            tabPane: 0,          \r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],           \r\n            splitChangeWidthPercentage: 28.6,\r\n            goodsinSearchField: [],           \r\n            propertyPopupWidth: \"60\",\r\n            data: [],\r\n            mandatorySampleFields:[]\r\n        \r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\") {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.multilingualMsg }));\r\n            props.Login.multilingualMsg = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // Rendering the component only if \r\n        // passed props value is changed\r\n        if (nextState.data.length > 0 && nextState.data === this.state.data) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realfromDate, this.props.Login.masterData.realtoDate, this.props.Login.userInfo);\r\n\r\n        let fromDate=this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\r\n        let toDate=this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\r\n\r\n        const addId = this.state.controlMap.has(\"AddGoodsIn\") ? this.state.controlMap.get(\"AddGoodsIn\").ncontrolcode : -1;\r\n        const editId = this.state.controlMap.has(\"EditGoodsIn\") ? this.state.controlMap.get(\"EditGoodsIn\").ncontrolcode : -1;\r\n        const deleteId = this.state.controlMap.has(\"DeleteGoodsIn\") ? this.state.controlMap.get(\"DeleteGoodsIn\").ncontrolcode : -1;\r\n        const receiveId = this.state.controlMap.has(\"ReceiveGoodsIn\") ? this.state.controlMap.get(\"ReceiveGoodsIn\").ncontrolcode : -1;\r\n        const approveId = this.state.controlMap.has(\"ApproveGoodsIn\") ? this.state.controlMap.get(\"ApproveGoodsIn\").ncontrolcode : -1;\r\n        //const editSampleId = this.state.controlMap.has(\"EditSampleGoodsIn\") ? this.state.controlMap.get(\"EditSampleGoodsIn\").ncontrolcode : -1;\r\n        const delSampleId = this.state.controlMap.has(\"DeleteSampleGoodsIn\") ? this.state.controlMap.get(\"DeleteSampleGoodsIn\").ncontrolcode : -1;\r\n\r\n        const goodsinAddParam = {\r\n            screenName: \"IDS_GOODSIN\", operation: \"create\", primaryKeyField: \"ngoodsincode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const goodsinEditParam = {\r\n            screenName: \"IDS_GOODSIN\", operation: \"update\", primaryKeyField: \"ngoodsincode\",\r\n            userInfo: this.props.Login.userInfo, ncontrolCode: editId,masterData:this.props.Login.masterData\r\n            \r\n        };\r\n\r\n        const goodsinDeleteParam = { \r\n            screenName: \"IDS_GOODSIN\", methodUrl: \"GoodsIn\", operation: \"delete\", ncontrolCode: deleteId };\r\n\r\n        // const goodsinSampleEditParam ={ \r\n        //     screenName: \"IDS_GOODSINSAMPLE\", operation: \"update\", primaryKeyField: \"ngoodsinsamplecode\",\r\n        //     userInfo: this.props.Login.userInfo, ncontrolCode: editSampleId,masterData:this.props.Login.masterData\r\n\r\n        // }    \r\n\r\n        const filterParam = {\r\n            inputListName: \"GoodsIn\", selectedObject: \"selectedGoodsIn\", primaryKeyField: \"ngoodsincode\",\r\n            fetchUrl: \"goodsin/getActiveGoodsInById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sgoodsinid1\",\"sclientname\", \"sprojectname\", \"scouriername\",\"nnoofpackages\",\"sconsignmentno\",\"sgoodsindatetime\",\"ssecurityrefno\",\"scomments\" ,\"stransdisplaystatus\"]\r\n        };\r\n\r\n        const viewInfoFields=[];\r\n        viewInfoFields.push(\r\n            { \"fieldName\": \"sclientcatname\", \"label\": \"IDS_CLIENTCATEGORY\"},\r\n            { \"fieldName\": \"sclientname\", \"label\": \"IDS_CLIENT\"},\r\n            { \"fieldName\": \"sprojecttypename\", \"label\": \"IDS_PROJECTTYPE\"},\r\n            { \"fieldName\": \"sprojectname\", \"label\": \"IDS_PROJECT\"},\r\n            { \"fieldName\": \"scouriername\", \"label\": \"IDS_COURIERCARRIER\"},\r\n            { \"fieldName\": \"nnoofpackages\", \"label\": \"IDS_NOOFPACKAGES\"},\r\n            { \"fieldName\": \"noutofhours\", \"label\": \"IDS_OUTOFHOURS\"},\r\n            { \"fieldName\": \"ssecurityrefno\", \"label\": \"IDS_SECURITYREFNO\"},\r\n            { \"fieldName\": \"scomments\", \"label\": \"IDS_COMMENTS\"}\r\n        )                        \r\n                                           \r\n\r\n        let breadCrumbData = [];\r\n        breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            },\r\n            {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            }\r\n        ]; \r\n\r\n        let mandatoryFields = [];\r\n            if(this.props.Login.ScreenName===\"IDS_GOODSIN\"){\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_CLIENTCATEGORY\", \"dataField\": \"nclientcatcode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_CLIENT\", \"dataField\": \"nclientcode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_NOOFPACKAGES\", \"dataField\": \"nnoofpackages\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_GOODSINDATE\", \"dataField\": \"dgoodsindatetime\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n    \r\n                )\r\n    \r\n                if(this.props.Login.userInfo.istimezoneshow === transactionStatus.YES){\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzgoodsindate\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n                }\r\n    \r\n                if (this.state.selectedRecord[\"noutofhours\"] === transactionStatus.YES) {\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_SECURITYREFNO\", \"dataField\": \"ssecurityrefno\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"});\r\n                }\r\n            }\r\n           \r\n\r\n            let userStatusCSS = \"\";\r\n            let activeIconCSS = \"fa fa-check\";\r\n            if (this.props.Login.masterData.selectedGoodsIn && this.props.Login.masterData.selectedGoodsIn.ntransactionstatus === transactionStatus.DRAFT) {\r\n                userStatusCSS = \"outline-secondary\";\r\n                activeIconCSS = \"\";\r\n            }\r\n            else if (this.props.Login.masterData.selectedGoodsIn && this.props.Login.masterData.selectedGoodsIn.ntransactionstatus === transactionStatus.RECEIVED) {\r\n                userStatusCSS = \"outline-success\";\r\n            }\r\n            else {\r\n                userStatusCSS = \"outline-Final\";\r\n            }\r\n   \r\n\r\n        \r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                    <Row noGutters={true} className=\"toolbar-top\">\r\n                        <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                            <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                                {!this.state.sidebarview ?\r\n                                    <i class=\"fa fa-less-than\"></i> :\r\n                                    <i class=\"fa fa-greater-than\"></i> \r\n                                }\r\n                            </span>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"IDS_GOODSIN\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.GoodsIn}\r\n                                getMasterDetail={(GoodsIn) => this.props.getGoodsInDetail(GoodsIn, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedGoodsIn}\r\n                                primaryKeyField=\"ngoodsincode\"\r\n                                mainField=\"sgoodsinid1\"\r\n                                firstField=\"sgoodsindatetime\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getGoodsInComboService(goodsinAddParam)}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_GOODSINFILTER\":\r\n                                            <GoodsInFilter\r\n                                                fromDate={fromDate}\r\n                                                toDate={toDate}\r\n                                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                                userInfo={this.props.Login.userInfo}\r\n\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        {this.props.Login.masterData.selectedGoodsIn && this.props.Login.masterData.GoodsIn && this.props.Login.masterData.GoodsIn.length > 0 && this.props.Login.masterData.selectedGoodsIn ?\r\n                                            <Card className=\"border-0\">\r\n                                                <Card.Header>\r\n                                                <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedGoodsIn.sconsignmentno}</Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                            <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                <i className={activeIconCSS}></i>\r\n                                                                {this.props.Login.masterData.selectedGoodsIn.stransdisplaystatus}\r\n                                                            </span>\r\n                                                        </h2>\r\n                                                        <div className=\"d-inline \">\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            onClick={(e) => this.props.getGoodsInComboService(goodsinEditParam)} >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />                                                            \r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(receiveId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_RECEIVE\" })}\r\n                                                            onClick={() => this.receiveGoodsIn(receiveId)}>\r\n                                                            <GoodsReceivedIcon className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                            name=\"goodsreceivedicon\"/>                                                                                                                       \r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                            onClick={() => this.approveGoodsIn(approveId)}>\r\n                                                            <FontAwesomeIcon icon={faThumbsUp} />                                                            \r\n                                                        </Nav.Link> \r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"#\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWINFO\" })}\r\n                                                            onClick={() => this.props.viewInformation(this.props.Login.masterData.selectedGoodsIn.ngoodsincode,this.props.Login.userInfo,this.props.Login.masterData)}>\r\n                                                            <FontAwesomeIcon icon={faEye} />                                                            \r\n                                                        </Nav.Link> \r\n\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>                                                    \r\n                                                    {/* <Row noGutters={true} >\r\n                                                        <Col md={12}>\r\n                                                            <div className=\"d-flex justify-content-end\">\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(addSampleId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                    onClick={() => this.addSampleGoodsIn(\"IDS_GOODSINSAMPLE\", \"create\", this.props.Login.masterData,this.state.selectedRecord,this.props.Login.userInfo,addSampleId)}>\r\n                                                                    <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })} />                                                                                                                         \r\n                                                                </Nav.Link>\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    </Row>                                      */}\r\n\r\n                                                    <DataGrid\r\n                                                        primaryKeyField={\"ngoodsinsamplecode\"}\r\n                                                        data={this.props.Login.masterData.GoodsInSample ||[]}\r\n                                                        dataResult={process(this.props.Login.masterData.GoodsInSample ||[], this.state.sampleGridDataState)}\r\n                                                        dataState={this.state.sampleGridDataState}\r\n                                                        dataStateChange={this.sampleInfoDataStateChange}\r\n                                                        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}                                                       \r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        controlMap={this.state.controlMap}\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        //editParam={goodsinSampleEditParam}\r\n                                                        //fetchRecord={this.editSampleGoodsIn}\r\n                                                        deleteRecord = {this.DeleteGoodsInSample}\r\n                                                        methodUrl ={\"SampleGoodsIn\"}\r\n                                                        pageable={true}\r\n                                                        isComponent={false}\r\n                                                        hasDynamicColSize={true}\r\n                                                        isActionRequired={true}\r\n                                                        isToolBarRequired={true}\r\n                                                        isAddRequired={true}\r\n                                                        addRecord={this.openSampleGoodsIn}\r\n                                                        isRefreshRequired ={false}\r\n                                                        isImportRequired={true}\r\n                                                        isDownloadPDFRequired={false}\r\n                                                        isDownloadExcelRequired={false}\r\n                                                        import={this.ImportFile}\r\n                                                        scrollable={'scrollable'}\r\n                                                        gridHeight={'600px'}\r\n                                                        expandField=\"expanded\"\r\n                                                    />\r\n\r\n                       \r\n\r\n                                                </Card.Body>\r\n\r\n                                            </Card>\r\n                                        :\"\"}\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>   \r\n\r\n                    </Row>\r\n                </ListWrapper>  \r\n                { this.props.Login.openModal &&\r\n                    <SlideOutModal \r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenName ===\"IDS_GOODSINSAMPLE\" ? this.state.mandatorySampleFields :  mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ? (\r\n                            <Esign \r\n                            operation={this.props.Login.operation}\r\n                            formatMessage={this.props.intl.formatMessage}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        ) : this.props.Login.screenName ===  \"IDS_GOODSIN\"  && (this.props.Login.operation ===  \"create\" || this.props.Login.operation === \"update\") ? (\r\n                            <AddGoodsIn\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                handleDateChange ={this.handleDateChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                ClientCategory ={this.props.Login.ClientCategory}\r\n                                Client={this.props.Login.Client}\r\n                                ProjectType={this.props.Login.ProjectType}\r\n                                Courier={this.props.Login.Courier}\r\n                                Project={this.props.Login.Project}\r\n                                TimeZone={this.props.Login.TimeZone}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n    \r\n                            />\r\n                        ) : this.props.Login.screenName === \"IDS_GOODSIN\" && this.props.Login.operation ===\"View\" ? (\r\n                            <GoodsInView\r\n                                userInfo={this.props.Login.userInfo}\r\n                                selectedRecordView={this.props.Login.masterData.selectedRecordView}\r\n                                viewInfoFields={viewInfoFields|| []}\r\n                            />  \r\n                        ) : this.props.Login.screenName === \"IDS_GOODSINSAMPLE\" ? (                                \r\n                                    <DynamicSlideout\r\n                                        selectedRecord={this.props.Login.selectedRecord}\r\n                                        templateData={this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping [0].jsondata}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputChange={this.onNumericInputOnChange}\r\n                                        comboData={this.props.Login.comboData}\r\n                                        onComboChange={this.onDynamicComboChange}\r\n                                        onDropFile={this.onDropFile}\r\n                                        deleteAttachment={this.deleteAttachment}\r\n                                        onNumericBlur={this.onNumericBlur}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                        Login={this.props.Login}\r\n                                        addMasterRecord={this.addMasterRecord}\r\n                                        editMasterRecord={this.editMasterRecord}\r\n                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                    ></DynamicSlideout>  \r\n                                                    \r\n                        ): this.props.Login.screenName ===\"IDS_GOODSINIMPORT\" ? (\r\n                                <AddFile\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onDrop={this.onDropSampleFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    actionType={this.state.actionType}\r\n                                    operation={this.props.Login.operation}                                   \r\n                                />\r\n                        ):( \"\" )\r\n                        \r\n                        \r\n                        }\r\n                    />\r\n                }  \r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData[dateName] = dateValue;         \r\n        this.setState ({masterData});\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onFilterSubmit = () => {         \r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n        let realfromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realtoDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let masterData = { ...this.props.Login.masterData, realfromDate, realtoDate};\r\n        let inputData ={\r\n            fromDate: obj.fromDate,\r\n            toDate : obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n\r\n        }       \r\n        let inputParam = {\r\n            masterData,\r\n            inputData\r\n        }\r\n        this.props.getGoodsInFilterSubmit(inputParam);\r\n\r\n        \r\n\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n        let realfromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realtoDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let masterData = { ...this.props.Login.masterData, realfromDate, realtoDate};\r\n        let inputData ={\r\n            fromDate: obj.fromDate,\r\n            toDate : obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n\r\n        }       \r\n        let inputParam = {\r\n            masterData,\r\n            inputData\r\n        }\r\n        this.props.getGoodsInFilterSubmit(inputParam);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }else if(event.target.name === \"noutofhours\"){\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\r\n            }\r\n        } \r\n        else {\r\n                if (event.target.value !== \"\") {\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n           \r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if(fieldName === \"nclientcatcode\"){\r\n            selectedRecord[\"nclientcatcode\"] = comboData;\r\n            this.props.getClient(this.state.selectedRecord.nclientcatcode.value,this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\r\n        }else if(fieldName === \"nclientcode\"){\r\n            selectedRecord[\"nclientcode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }else if(fieldName === \"nprojecttypecode\"){\r\n            selectedRecord[\"nprojecttypecode\"] = comboData;\r\n            this.props.getProject(this.state.selectedRecord.nprojecttypecode.value,this.props.Login.masterData, this.props.Login.userInfo, selectedRecord);\r\n        }else if(fieldName === \"nprojectmastercode\"){\r\n            selectedRecord[\"nprojectmastercode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }else if(fieldName === \"ncouriercode\"){\r\n            selectedRecord[\"ncouriercode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onDynamicComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let comboName = customName || control.label;\r\n        if (comboData) {\r\n            \r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                \"nquerybuildertablecode\": control.nquerybuildertablecode, source: control.source\r\n            };\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = [];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }   \r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onNumericBlur = (control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.GoodsInSample,event.dataState),\r\n            sampleGridDataState: event.dataState\r\n        });\r\n      \r\n    }\r\n\r\n\r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\", \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\", \"dataType\": [option[designProperties.LISTITEM]] };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        if(this.props.Login.screenName ===  \"IDS_GOODSIN\"){\r\n            if(this.state.selectedRecord[\"nnoofpackages\"]<=0){\r\n                return (toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERTHEPACKAGEGREATERTHANZERO\" })));\r\n            }\r\n    \r\n            let postParam = undefined;\r\n            let dataState = undefined;\r\n            let inputData = [];\r\n            inputData[\"goodsin\"] = {};\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    \r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n    \r\n            if (this.props.Login.operation === \"update\") {\r\n                postParam = {\r\n                    inputListName: \"GoodsIn\",\r\n                    selectedObject: \"selectedGoodsIn\",\r\n                    primaryKeyField: \"ngoodsincode\",\r\n                };\r\n    \r\n                postParam[\"primaryKeyValue\"] = this.props.Login.masterData.selectedGoodsIn.ngoodsincode;\r\n                inputData[\"goodsin\"][\"ngoodsincode\"]= this.props.Login.masterData.selectedGoodsIn.ngoodsincode;\r\n            }\r\n            inputData[\"goodsin\"][\"nclientcatcode\"] = this.state.selectedRecord[\"nclientcatcode\"] ? this.state.selectedRecord[\"nclientcatcode\"].value : -1;              \r\n            inputData[\"goodsin\"][\"nclientcode\"] = this.state.selectedRecord[\"nclientcode\"] ? this.state.selectedRecord[\"nclientcode\"].value : -1;\r\n            inputData[\"goodsin\"][\"nprojecttypecode\"] = this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"].value : -1;\r\n            inputData[\"goodsin\"][\"nprojectmastercode\"] = this.state.selectedRecord[\"nprojectmastercode\"] ? this.state.selectedRecord[\"nprojectmastercode\"].value : -1;\r\n            inputData[\"goodsin\"][\"ncouriercode\"] = this.state.selectedRecord[\"ncouriercode\"] ? this.state.selectedRecord[\"ncouriercode\"].value :-1;\r\n            inputData[\"goodsin\"][\"nnoofpackages\"] = this.state.selectedRecord[\"nnoofpackages\"];\r\n            inputData[\"goodsin\"][\"noutofhours\"] = this.state.selectedRecord[\"noutofhours\"] ? this.state.selectedRecord[\"noutofhours\"] :transactionStatus.NO;\r\n            inputData[\"goodsin\"][\"sconsignmentno\"] = this.state.selectedRecord[\"sconsignmentno\"] ? this.state.selectedRecord[\"sconsignmentno\"] : \"\";\r\n            inputData[\"goodsin\"][\"ssecurityrefno\"] = this.state.selectedRecord[\"ssecurityrefno\"] ? this.state.selectedRecord[\"ssecurityrefno\"] : \"\";\r\n            inputData[\"goodsin\"][\"scomments\"] = this.state.selectedRecord[\"scomments\"] ? this.state.selectedRecord[\"scomments\"] : \"\";\r\n            inputData[\"goodsin\"][\"dgoodsindatetime\"] =  formatInputDate(this.state.selectedRecord[\"dgoodsindatetime\"], false);\r\n                //inputData[\"goodsin\"][\"ntzgoodsindatetime\"] = this.state.selectedRecord[\"ntimezonecode\"] ? this.state.selectedRecord[\"ntimezonecode\"].value : 1;\r\n    \r\n    \r\n            \r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"GoodsIn\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                selectedId: this.state.selectedRecord[\"ngoodsincode\"],\r\n                operation: this.props.Login.operation, saveType, formRef, dataState,\r\n                searchRef: this.searchRef,\r\n                postParam:postParam\r\n                    \r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_GOODSIN\"}),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }else if(this.props.Login.screenName === \"IDS_GOODSINSAMPLE\"){\r\n            this.insertGoodsInSample();             \r\n        }else if(this.props.Login.screenName ===\"IDS_GOODSINIMPORT\"){\r\n            this.importGoodsInSample();\r\n        }       \r\n    }\r\n   \r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.DeleteGoodsIn(\"delete\",deleteId));\r\n    }\r\n\r\n    DeleteGoodsIn= (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n\r\n        inputData[\"goodsin\"] = this.props.Login.masterData.selectedGoodsIn;  \r\n        inputData[\"userinfo\"]  = this.props.Login.userInfo;   \r\n        const postParam = {\r\n            inputListName: \"GoodsIn\", selectedObject: \"selectedGoodsIn\",\r\n            primaryKeyField: \"ngoodsincode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\r\n            fetchUrl: \"goodsin/getActiveGoodsInById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"GoodsIn\", \r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_GOODSIN\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    receiveGoodsIn= (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"goodsin\"] = this.props.Login.masterData.selectedGoodsIn;  \r\n        inputData[\"userinfo\"]  = this.props.Login.userInfo;   \r\n        const postParam = {\r\n            inputListName: \"GoodsIn\", selectedObject: \"selectedGoodsIn\",\r\n            primaryKeyField: \"ngoodsincode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\r\n            fetchUrl: \"goodsin/getActiveGoodsInById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"GoodsIn\", \r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"receive\",\r\n            postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_GOODSIN\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    approveGoodsIn= (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"goodsin\"] = this.props.Login.masterData.selectedGoodsIn;  \r\n        inputData[\"userinfo\"]  = this.props.Login.userInfo;   \r\n        const postParam = {\r\n            inputListName: \"GoodsIn\", selectedObject: \"selectedGoodsIn\",\r\n            primaryKeyField: \"ngoodsincode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\r\n            fetchUrl: \"goodsin/getActiveGoodsInById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"GoodsIn\", \r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"approve\",\r\n            postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_GOODSIN\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n     openSampleGoodsIn = () => {\r\n        const addSampleId = this.state.controlMap.has(\"AddSampleGoodsIn\") ? this.state.controlMap.get(\"AddSampleGoodsIn\").ncontrolcode : -1;\r\n         this.addSampleGoodsIn(\"IDS_GOODSINSAMPLE\", \"create\", this.props.Login.masterData,\r\n                               this.state.selectedRecord,this.props.Login.userInfo,addSampleId);\r\n\r\n     }\r\n\r\n\r\n    addSampleGoodsIn = (ScreenName, operation, masterData,selectedRecord, userInfo, controlCode,importData) => {\r\n\r\n            let data = [];\r\n            const withoutCombocomponent = [];\r\n            let mandatorySampleFields = [];\r\n            const Layout = this.props.Login.masterData.DesignTemplateMapping\r\n                && this.props.Login.masterData.DesignTemplateMapping[0].jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if(component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                        || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    if(componentrow.mandatory=== true){\r\n                                        mandatorySampleFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": componentrow.label,\r\n                                            \"dataField\": componentrow.label,\r\n                                            \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }else {\r\n                                component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                  || component.inputtype === \"frontendsearchfilter\" ?\r\n                                     data.push(component) : withoutCombocomponent.push(component)\r\n                                    if(component.mandatory ===true){\r\n                                        mandatorySampleFields.push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n\r\n                            }\r\n                        })\r\n                        this.setState({mandatorySampleFields:mandatorySampleFields});  \r\n                    })   \r\n\r\n                })\r\n                const comboComponents = data\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n                const mapOfFilterRegData = {\r\n                    nsampletypecode: parseInt(SampleType.GOODSIN),\r\n\r\n                }  \r\n         \r\n                this.props.getPreviewTemplate(masterData, userInfo, controlCode,\r\n                    data, selectedRecord, childColumnList,comboComponents, withoutCombocomponent, true, true,\r\n                    mapOfFilterRegData, false, operation, ScreenName, importData)                \r\n            } else  {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_CONFIGURETEMPLATE\" }));\r\n            }\r\n        \r\n    }\r\n\r\n    ImportFile = () => {\r\n        const Status = this.props.Login.masterData.selectedGoodsIn.ntransactionstatus;\r\n        let updateInfo ={};\r\n        //  if(Status === transactionStatus.APPROVED ){\r\n        //      toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECEIVERECORD\" }));\r\n        //  }else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal:true,\r\n                    operation: \"import\",\r\n                    screenName : \"IDS_GOODSINIMPORT\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);       \r\n        //}\r\n\r\n    }\r\n    \r\n    onDropSampleFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(\r\n            selectedRecord[fieldName],attachedFiles,maxSize);\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    };\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName],file);\r\n\r\n        this.setState({selectedRecord,actionType: \"delete\"});\r\n    };\r\n\r\n    // editSampleGoodsIn = (goodsinSampleEditParam) => {\r\n    //     let data = [];\r\n    //     const withoutCombocomponent = []\r\n    //     const Layout = this.props.Login.masterData.DesignTemplateMapping\r\n    //                     && this.props.Login.masterData.DesignTemplateMapping[0].jsondata\r\n    //     if (Layout !== undefined) {\r\n    //         Layout.map(row => {\r\n    //             return row.children.map(column => {\r\n    //                 return column.children.map(component => {\r\n    //                     return component.hasOwnProperty(\"children\") ?\r\n    //                         component.children.map(componentrow => {\r\n    //                             if (componentrow.inputtype === \"combo\") {\r\n    //                                 data.push(componentrow)\r\n    //                             } else {\r\n    //                                 withoutCombocomponent.push(componentrow)\r\n    //                             }\r\n\r\n    //                             return null;\r\n    //                         })\r\n    //                         : component.inputtype === \"combo\" ?\r\n    //                             data.push(component) : withoutCombocomponent.push(component)\r\n    //                 })\r\n    //             })\r\n    //         })\r\n    //         const comboComponents = data\r\n    //         let childColumnList = {};\r\n    //         data.map(columnList => {\r\n    //             const val = comboChild(data, columnList, childColumnList, true);\r\n    //             data = val.data;\r\n    //             childColumnList = val.childColumnList\r\n    //             return null;\r\n    //         })\r\n\r\n    //         this.props.getEditGoodsInSampleService(goodsinSampleEditParam,data, this.state.selectedRecord, childColumnList,\r\n    //             comboComponents, withoutCombocomponent)\r\n    //     } else {\r\n    //         toast.info(\"Configure the  template\")\r\n    //     }\r\n\r\n    // }\r\n\r\n    DeleteGoodsInSample= (operation) => {\r\n        let inputData = [];\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        inputData[\"ngoodsincode\"] =operation.selectedRecord.ngoodsincode;\r\n        inputData[\"ngoodsinsamplecode\"] =operation.selectedRecord.ngoodsinsamplecode;\r\n        inputData[\"ndesigntemplatemappingcode\"] =operation.selectedRecord.ndesigntemplatemappingcode;\r\n        inputData[\"ntransactionstatus\"] =this.props.Login.masterData.selectedGoodsIn.ntransactionstatus;\r\n        inputData[\"userinfo\"]  = this.props.Login.userInfo;   \r\n        const postParam = {\r\n            inputListName: \"GoodsIn\", selectedObject: \"selectedGoodsIn\",\r\n            primaryKeyField: \"ngoodsincode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedGoodsIn.ngoodsincode,\r\n            fetchUrl: \"goodsin/getActiveGoodsInById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"GoodsInSample\", \r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, operation.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_GOODSINSAMPLE\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    insertGoodsInSample= () => {\r\n        let Map ={};\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        Map[\"fromDate\"] = fromDate;\r\n        Map[\"toDate\"] = toDate;\r\n\r\n        Map[\"ngoodsincode\"] =this.props.Login.masterData.selectedGoodsIn.ngoodsincode;  \r\n        Map[\"ndesigntemplatemappingcode\"] =this.props.Login.masterData.DesignTemplateMapping[0].ndesigntemplatemappingcode;\r\n        const param =  this.goodsInSample(this.props.Login.masterData,this.state.selectedRecord,\r\n            this.props.Login.masterData.DesignTemplateMapping [0].jsondata,\r\n            this.props.Login.userInfo,this.props.Login.defaultTimeZone, 'create',this.props.Login.comboComponents);  \r\n        Map[\"GoodsInSample\"] = param.GoodsInSample;\r\n        Map[\"DateList\"] = param.dateList;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"GoodsInSample\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: Map,\r\n            selectedId: this.state.selectedRecord[\"ngoodsinsamplecode\"],\r\n            operation: 'create',\r\n            searchRef: this.searchRef\r\n                \r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_GOODSIN\"}),\r\n                    operation: 'create'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n\r\n\r\n    }\r\n    \r\n    goodsInSample = (masterData,selectedRecord,templateList,userInfo,defaulttimeZone,operation,comboComponents) => {\r\n        let GoodsInSample = {};\r\n        let dateList = [];\r\n        GoodsInSample[\"ngoodsincode\"] = masterData.selectedGoodsIn.ngoodsincode;  \r\n        GoodsInSample[\"ndesigntemplatemappingcode\"] =masterData.DesignTemplateMapping[0].ndesigntemplatemappingcode;\r\n    \r\n    \r\n        GoodsInSample[\"nunitcode\"] = selectedRecord[comboComponents[comboComponents.findIndex(x => x.name === 'Unit')]['label']] ?\r\n            selectedRecord[comboComponents[comboComponents.findIndex(x => x.name === 'Unit')]['label']].value : -1;\r\n        GoodsInSample[\"nquantity\"] = selectedRecord[\"Quantity\"];\r\n        GoodsInSample[\"sexternalsampleid\"] = selectedRecord[\"External Sample Id\"];\r\n        GoodsInSample[\"scomments\"] = selectedRecord[\"Comments\"];\r\n      \r\n        GoodsInSample[\"jsondata\"] = {};\r\n        GoodsInSample[\"jsonuidata\"] = {};\r\n\r\n\r\n        templateList && templateList.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"predefineddropdown\") {\r\n                                if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                    GoodsInSample[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            value: selectedRecord[componentrow.label].value,\r\n                                            label: selectedRecord[componentrow.label].label\r\n                                           \r\n    \r\n                                        } : -1\r\n                                    GoodsInSample[\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\r\n    \r\n                                } else {\r\n                                    GoodsInSample[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            value: selectedRecord[componentrow.label].value,\r\n                                            label: selectedRecord[componentrow.label].label,\r\n                                            pkey: componentrow.valuemember,\r\n                                            nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                            source: componentrow.source,\r\n                                            [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: operation === \"update\" ?\r\n                                                selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                    selectedRecord[componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                :\r\n                                                selectedRecord[componentrow.label].item ? selectedRecord[componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                    selectedRecord[componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] ? selectedRecord[componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                        : selectedRecord[componentrow.label].vale\r\n    \r\n                                        } : -1\r\n                                    GoodsInSample[\"jsonuidata\"][componentrow.label] = selectedRecord[componentrow.label] ? selectedRecord[componentrow.label].label : \"\";\r\n    \r\n                                }\r\n                            }\r\n                            else if (componentrow.inputtype === \"date\") {\r\n                                if (componentrow.mandatory) {\r\n                                    GoodsInSample[\"jsondata\"][componentrow.label] = (typeof selectedRecord[componentrow.label] === \"object\") ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                            selectedRecord[componentrow.label] : new Date(), userInfo) :\r\n                                        (typeof selectedRecord[componentrow.label] === \"number\") ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                new Date(selectedRecord[componentrow.label]) : new Date(), userInfo)\r\n                                            : selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : \"\";\r\n    \r\n                                    GoodsInSample[\"jsonuidata\"][componentrow.label] = GoodsInSample[\"jsondata\"][componentrow.label]\r\n                                } else {\r\n                                    GoodsInSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                        typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) :\r\n                                            typeof selectedRecord[componentrow.label] === \"number\" ?\r\n                                                convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                    new Date(selectedRecord[componentrow.label]) : new Date(), userInfo)\r\n    \r\n                                                : selectedRecord[componentrow.label] ?\r\n                                                    selectedRecord[componentrow.label] : \"\" :\r\n                                        selectedRecord[componentrow.label] ? typeof selectedRecord[componentrow.label] === \"object\" ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                selectedRecord[componentrow.label] : new Date(), userInfo) : typeof selectedRecord[componentrow.label] === \"number\" ?\r\n                                                convertDateTimetoStringDBFormat(selectedRecord[componentrow.label] ?\r\n                                                    new Date(selectedRecord[componentrow.label]) : new Date(), userInfo)\r\n    \r\n                                                : selectedRecord[componentrow.label] ?\r\n                                                    selectedRecord[componentrow.label]\r\n                                                    : \"\" : \"\";\r\n    \r\n                                    GoodsInSample[\"jsonuidata\"][componentrow.label] = GoodsInSample[\"jsondata\"][componentrow.label]\r\n                                }\r\n                                if (componentrow.timezone) {\r\n                                    GoodsInSample[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                                        { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                                        defaulttimeZone ? defaulttimeZone : -1\r\n    \r\n                                    GoodsInSample[\"jsonuidata\"][`tz${componentrow.label}`] = GoodsInSample[\"jsondata\"][`tz${componentrow.label}`]\r\n                                }\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n    \r\n                            else {\r\n                                GoodsInSample[\"jsondata\"][componentrow.label] = selectedRecord[componentrow.label] ?\r\n                                    selectedRecord[componentrow.label] : \"\"\r\n    \r\n                                GoodsInSample[\"jsonuidata\"][componentrow.label] = GoodsInSample[\"jsondata\"][componentrow.label]\r\n                            }\r\n                        })\r\n                        return GoodsInSample;\r\n    \r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"combo\" || component.inputtype === \"predefineddropdown\") {\r\n                            if (component.inputtype === \"predefineddropdown\") {\r\n                                GoodsInSample[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    {\r\n                                        value: selectedRecord[component.label].value,\r\n                                        label: selectedRecord[component.label].label,\r\n                                       \r\n    \r\n                                    } : -1\r\n                                GoodsInSample[\"jsonuidata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label].label : \"\";\r\n    \r\n                            } else {\r\n                                GoodsInSample[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                    {\r\n                                        value: selectedRecord[component.label].value,\r\n                                        label: selectedRecord[component.label].label,\r\n                                        pkey: component.valuemember,\r\n                                        nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                        source: component.source,\r\n                                        [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: operation === \"update\" ?\r\n                                            selectedRecord[component.label].item ? selectedRecord[component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] :\r\n                                                selectedRecord[component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                            :\r\n                                            selectedRecord[component.label].item ? selectedRecord[component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] :\r\n                                                selectedRecord[component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] ? selectedRecord[component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                    : selectedRecord[component.label].vale\r\n    \r\n                                    } : -1\r\n                                    GoodsInSample[\"jsonuidata\"][component.label] = selectedRecord[component.label] ? selectedRecord[component.label].label : \"\";\r\n    \r\n                            }                            \r\n                        }\r\n                        else if (component.inputtype === \"date\") {\r\n                            if (component.mandatory) {\r\n                                console.log(typeof selectedRecord[component.label] === \"object\")\r\n                                GoodsInSample[\"jsondata\"][component.label] = typeof selectedRecord[component.label] === \"object\" ?\r\n    \r\n                                    convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                        selectedRecord[component.label] : new Date(), userInfo) :\r\n                                    (typeof selectedRecord[component.label] === \"number\") ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            new Date(selectedRecord[component.label]) : new Date(), userInfo) :\r\n                                        selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\";\r\n    \r\n                                GoodsInSample[\"jsonuidata\"][component.label] = GoodsInSample[\"jsondata\"][component.label]\r\n                            } else {\r\n                                GoodsInSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                    typeof selectedRecord[component.label] === \"object\" ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : new Date(), userInfo) :\r\n                                        typeof selectedRecord[component.label] === \"number\" ?\r\n                                            convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                                new Date(selectedRecord[component.label]) : new Date(), userInfo)\r\n    \r\n                                            : selectedRecord[component.label] ?\r\n                                                selectedRecord[component.label] : \"\" :\r\n                                    selectedRecord[component.label] ? typeof selectedRecord[component.label] === \"object\" ? convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                        selectedRecord[component.label] : new Date(), userInfo) : typeof selectedRecord[component.label] === \"number\" ?\r\n                                        convertDateTimetoStringDBFormat(selectedRecord[component.label] ?\r\n                                            new Date(selectedRecord[component.label]) : new Date(), userInfo)\r\n                                        : selectedRecord[component.label] ?\r\n                                            selectedRecord[component.label] : \"\" : \"\";\r\n    \r\n                                GoodsInSample[\"jsonuidata\"][component.label] = GoodsInSample[\"jsondata\"][component.label]\r\n                            }\r\n                            if (component.timezone) {\r\n                                GoodsInSample[\"jsondata\"][`tz${component.label}`] = selectedRecord[`tz${component.label}`] ?\r\n                                    { value: selectedRecord[`tz${component.label}`].value, label: selectedRecord[`tz${component.label}`].label } :\r\n                                    defaulttimeZone ? defaulttimeZone : -1\r\n    \r\n                                GoodsInSample[\"jsonuidata\"][`tz${component.label}`] = GoodsInSample[\"jsondata\"][`tz${component.label}`]\r\n                            }\r\n                            dateList.push(component.label)\r\n                        }\r\n                        else {\r\n                            GoodsInSample[\"jsondata\"][component.label] = selectedRecord[component.label] ?\r\n                                selectedRecord[component.label] : \"\"\r\n    \r\n                            GoodsInSample[\"jsonuidata\"][component.label] = GoodsInSample[\"jsondata\"][component.label]\r\n                        }\r\n                        return GoodsInSample;\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        const param = { GoodsInSample, dateList }\r\n        return param;\r\n\r\n    }\r\n\r\n    importGoodsInSample =() => {\r\n\r\n        const formData = new FormData();\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.stemplatefilename;\r\n        let comboComponents=[];\r\n        let data = [];\r\n        const withoutCombocomponent = [];\r\n        let mandatory =[];\r\n        let mandatoryImportFields={};    \r\n\r\n\r\n        if(acceptedFiles && acceptedFiles.length ===1){\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\", file);\r\n            });\r\n            const dateList = [];\r\n            this.state.DynamicDateField.map(x=> {\r\n                dateList.push(x['2'])\r\n            });\r\n\r\n           \r\n        const Layout = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping[0].jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if(component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                    || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n                                if(componentrow.mandatory=== true){\r\n                                    mandatory.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": componentrow.label,\r\n                                        \"dataField\": componentrow.label,\r\n                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                            \"selectbox\" : \"textbox\"\r\n                                    })\r\n                                }\r\n                            })\r\n                        }else {\r\n                            component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                              || component.inputtype === \"frontendsearchfilter\" ?\r\n                                 data.push(component) : withoutCombocomponent.push(component)\r\n                                if(component.mandatory ===true){\r\n                                    mandatory.push({\r\n                                        \"mandatory\": true,\r\n                                        \"idsName\": component.label,\r\n                                        \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                        \"controlType\": component.inputtype === \"combo\" ?\r\n                                            \"selectbox\" : \"textbox\"\r\n                                    })\r\n                                }\r\n\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            comboComponents = data\r\n        }      \r\n        mandatory.map(x=>{\r\n            mandatoryImportFields[x.dataField]=x.mandatory;\r\n\r\n          })\r\n\r\n            formData.append('mandatoryFields',Lims_JSON_stringify(JSON.stringify(mandatoryImportFields),false))\r\n            formData.append('comboComponents', Lims_JSON_stringify(JSON.stringify(comboComponents), false))\r\n            formData.append('dateconstraints', Lims_JSON_stringify(JSON.stringify(this.state.DynamicDateConstraints), false))\r\n            formData.append('datelist', Lims_JSON_stringify(JSON.stringify(dateList), false))\r\n            formData.append('combinationunique', Lims_JSON_stringify(JSON.stringify(this.state.DynamicCombinationUnique), false))\r\n            formData.append('ndesigntemplatemappingcode', this.props.Login.masterData.ndesigntemplatemappingcode)\r\n            formData.append(\"ngoodsincode\",this.props.Login.masterData.selectedGoodsIn.ngoodsincode)\r\n            formData.append(\"ntransactionstatus\",this.props.Login.masterData.selectedGoodsIn.ntransactionstatus)\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"GoodsInSample\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: this.props.Login.operation,\r\n\r\n            }\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_GOODSINIMPORT\" }),\r\n                        operation: this.props.Login.operation,\r\n                    },\r\n\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }                                                                                                                                                                                                                \r\n\r\n        }else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTTHEFILE\" }))\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { userRoleControlRights, controlMap,selectedRecord,skip, take,masterData,sampleGridDataState,\r\n            DynamicGridItem,DynamicGridMoreField,DynamicDateField,DynamicTemplateField,DynamicDateConstraints,DynamicCombinationUnique } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                bool = true;\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord\r\n            bool = true;\r\n        }     \r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {     \r\n\r\n            bool = true;\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take   \r\n        }\r\n\r\n        if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n            sampleGridDataState = this.props.Login.sampleGridDataState;\r\n        }\r\n\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata && this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            if(dynamicColumn !== null){\r\n                DynamicGridItem = dynamicColumn.griditem ? dynamicColumn.griditem : [];\r\n                DynamicGridMoreField = dynamicColumn.gridmoreitem ? dynamicColumn.gridmoreitem : [];\r\n                DynamicDateField = dynamicColumn.datefields ? dynamicColumn.datefields : [];\r\n                DynamicTemplateField = dynamicColumn.templatefields ? dynamicColumn.templatefields : [];\r\n                DynamicDateConstraints = dynamicColumn.dateconstraints ? dynamicColumn.dateconstraints : [];\r\n                DynamicCombinationUnique = dynamicColumn.combinationunique ?  dynamicColumn.combinationunique : [] ;                \r\n            }\r\n            \r\n\r\n        }    \r\n\r\n        \r\n        if (bool) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap,selectedRecord,skip, take,masterData,sampleGridDataState,\r\n                DynamicGridItem,DynamicGridMoreField, DynamicDateField,DynamicTemplateField ,DynamicDateConstraints,DynamicCombinationUnique\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,getGoodsInFilterSubmit,validateEsignCredential,getGoodsInComboService ,getGoodsInDetail,getClient,getProject,filterColumnData,getPreviewTemplate,viewInformation\r\n    \r\n})(injectIntl(GoodsIn))"]},"metadata":{},"sourceType":"module"}