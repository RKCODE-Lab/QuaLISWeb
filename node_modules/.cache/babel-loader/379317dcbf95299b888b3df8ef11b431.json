{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\subcontractsamples\\\\SubContractTestDetail.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, getSubContractorComboService, updateStore, updateSubContractSamplesdetails, updateReceiveSTTSubContractTest, updateReceiveResultSubContractTest, addFile, saveSubcontractorTestFile } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { create_UUID, deleteAttachmentDropZone, getControlMap, Lims_JSON_stringify, onDropAttachFileList, showEsign } from '../../components/CommonScript';\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign'; // import './product.css';\n\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\nimport SendSubContractor from './SendSubContractor';\nimport AddSubContractorTestAttchment from './AddSubContractorTestAttchment';\n\nclass SubContractTestDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"sendsubcontractor\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveSupplierFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let FileArray = [];\n      let subcontractorTestFile = {\n        nsubcontractortestdetailcode: selectedRecord.subcontractortestdetail.nsubcontractortestdetailcode,\n        nattachmenttypecode // ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, subcontractorTestFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nsupplierfilecode && selectedRecord.nsupplierfilecode > 0 && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false); //tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            FileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false); // subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n\n          subcontractorTestFile[\"nlinkcode\"] = transactionStatus.NA;\n          subcontractorTestFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          subcontractorTestFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          FileArray.push(subcontractorTestFile);\n        }\n      } else {\n        subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false); //subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n\n        subcontractorTestFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        subcontractorTestFile[\"ssystemfilename\"] = \"\";\n        subcontractorTestFile[\"nfilesize\"] = 0;\n        FileArray.push(subcontractorTestFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"subcontractorFile\", JSON.stringify(FileArray));\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      let selectedId = null;\n      let postParam = undefined;\n\n      if (this.props.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"Supplier\",\n          selectedObject: \"SelectedSupplier\",\n          primaryKeyField: \"nsuppliercode\"\n        };\n        selectedId = selectedRecord[\"nsupplierfilecode\"];\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\n            slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"fileattachment\",\n        classUrl: \"subcontracttestdetail\",\n        saveType,\n        formRef,\n        methodUrl: \"updateSubcontractorTestFile\",\n        postParam,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      this.props.saveSubcontractorTestFile(inputParam, this.props.Login.masterData);\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedRecord || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\"\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === \"radio\") {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation == \"fileattachment\") {\n        return this.onSaveSupplierFile(saveType, formRef);\n      }\n\n      let inputData = [];\n      let dataState = undefined;\n      let selectedId = null;\n      dataState = this.state.dataState;\n      selectedId = this.props.Login.selectedRecord['subcontractortestdetail'].nsubcontractortestdetailcode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"subcontractortestdetail\"] = this.state.selectedRecord['subcontractortestdetail'];\n      inputData[\"subcontractortestdetail\"]['nsuppliercode'] = this.state.selectedRecord['nsuppliercode'].value;\n      inputData[\"subcontractortestdetail\"]['ncontrolleadtime'] = this.state.selectedRecord['nsuppliercode'].item.ncontrolleadtime;\n      inputData[\"subcontractortestdetail\"]['nperiodcode'] = this.state.selectedRecord['nsuppliercode'].item.nperiodcode;\n      inputData[\"subcontractortestdetail\"]['sremarks'] = this.state.selectedRecord['sremarks']; // if (inputData[\"subcontractordetails\"].hasOwnProperty('esignpassword')) {\n      //     if (inputData[\"subcontractordetails\"]['esignpassword'] === '') {\n      //         delete inputData[\"subcontractordetails\"]['esigncomments']\n      //         delete inputData[\"subcontractordetails\"]['esignpassword']\n      //     }\n      // }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"updateSubContractSamplesdetails\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SENDSUBCONTRACTOR\",\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.updateSubContractSamplesdetails(inputParam, this.props.Login.masterData, \"openModal\", \"\", \"\");\n      }\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \" + this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      })) ? \"openChildModal\" : \"openModal\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modalName);\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SUBCONTRACTOR\",\n      \"dataField\": \"ssuppliername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EXPECTEDDATE\",\n      \"dataField\": \"sexpecteddate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CONTROLLEADTIME\",\n      \"dataField\": \"scontrolleaddate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\"\n    }, // { \"idsName\": \"IDS_ARNO\" , \"dataField\": \"sarno\", \"width\": \"200px\" },\n    // { \"idsName\": \"IDS_SAMPLEARNO\" , \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_DISPLAYSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsubcontractortestdetailcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getProductComboService,\n      editParam: [],\n      deleteRecord: this.deleteRecord,\n      deleteParam: [],\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      listMasterShowIcon: 0,\n      masterdata: this.props.Login.masterData || [],\n      sendRecord: this.props.getSubContractorComboService,\n      updateReceiveSTTSubContractTest: this.props.updateReceiveSTTSubContractTest,\n      updateReceiveResultSubContractTest: this.props.updateReceiveResultSubContractTest,\n      addFile: this.props.addFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal || this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \" + this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      })) ? this.props.Login.openChildModal : this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      showSaveContinue: true,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"sendsubcontractor\" ? /*#__PURE__*/React.createElement(SendSubContractor, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        subContracorMapList: this.props.Login.subContracorMapList || [],\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"fileattachment\" ? /*#__PURE__*/React.createElement(AddSubContractorTestAttchment, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        subContracorMapList: this.props.Login.subContracorMapList || [],\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        linkMaster: this.props.Login.linkMaster,\n        onDrop: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        let dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        };\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData[\"SubContractSamples\"],\n          dataResult: process(this.props.Login.masterData[\"SubContractSamples\"], dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData[\"SubContractSamples\"],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: this.props.Login.masterData[\"SubContractSamples\"]\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSubContractorComboService,\n  updateSubContractSamplesdetails,\n  updateReceiveSTTSubContractTest,\n  updateReceiveResultSubContractTest,\n  addFile,\n  saveSubcontractorTestFile\n})(injectIntl(SubContractTestDetail));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/subcontractsamples/SubContractTestDetail.jsx"],"names":["React","Component","Col","Row","injectIntl","connect","toast","callService","crudMaster","getSubContractorComboService","updateStore","updateSubContractSamplesdetails","updateReceiveSTTSubContractTest","updateReceiveResultSubContractTest","addFile","saveSubcontractorTestFile","DEFAULT_RETURN","create_UUID","deleteAttachmentDropZone","getControlMap","Lims_JSON_stringify","onDropAttachFileList","showEsign","attachmentType","transactionStatus","ConfirmMessage","SlideOutModal","Esign","process","DataGrid","ListWrapper","SendSubContractor","AddSubContractorTestAttchment","SubContractTestDetail","constructor","props","closeModal","loadEsign","Login","openModal","openChildModal","selectedRecord","selectedId","operation","updateInfo","typeName","data","dataStateChange","event","setState","dataResult","state","dataState","onSaveSupplierFile","saveType","formRef","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","FileArray","subcontractorTestFile","nsubcontractortestdetailcode","subcontractortestdetail","formData","FormData","FTP","Array","isArray","length","forEach","file","index","tempData","Object","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","nsupplierfilecode","undefined","NA","size","append","push","YES","nfilesize","slinkfilename","trim","nlinkcode","value","JSON","stringify","userInfo","postParam","inputListName","selectedObject","primaryKeyField","inputParam","inputData","sformname","smodulename","slanguagename","isFileupload","classUrl","methodUrl","masterData","deleteAttachment","fieldName","selectedFile","actionType","onDropFile","attachedFiles","maxSize","onInputOnChange","optional","target","type","checked","onComboChange","comboData","reloadData","displayName","onSaveClick","item","ncontrolleadtime","nperiodcode","searchRef","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","validateEsign","modalName","genericLabel","slanguagetypecode","concat","intl","formatMessage","id","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","confirmMessage","extractedColumnList","getDerivedStateFromProps","warn","render","getProductComboService","deleteRecord","subContracorMapList","linkMaster","componentDidUpdate","previousProps","values","map","ncontrolcode","componentWillUnmount","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster,getSubContractorComboService,updateStore,updateSubContractSamplesdetails,\r\n    updateReceiveSTTSubContractTest,updateReceiveResultSubContractTest,addFile,saveSubcontractorTestFile\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { create_UUID, deleteAttachmentDropZone, getControlMap, Lims_JSON_stringify, onDropAttachFileList, showEsign } from '../../components/CommonScript';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\n// import './product.css';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\r\nimport SendSubContractor from './SendSubContractor';\r\nimport AddSubContractorTestAttchment from './AddSubContractorTestAttchment';\r\n\r\nclass SubContractTestDetail extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n            {\"idsName\": \"IDS_SUBCONTRACTOR\", \"dataField\": \"ssuppliername\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_EXPECTEDDATE\", \"dataField\": \"sexpecteddate\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_CONTROLLEADTIME\", \"dataField\": \"scontrolleaddate\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\"},\r\n            // { \"idsName\": \"IDS_ARNO\" , \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_SAMPLEARNO\" , \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" }\r\n        ];\r\n    }\r\n\r\n   \r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"sendsubcontractor\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal=false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            openChildModal=false;\r\n            selectedRecord = {};\r\n            selectedId=null\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal,openChildModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsubcontractortestdetailcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.getProductComboService}\r\n                                    editParam={[]}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={[]}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    listMasterShowIcon = {0}\r\n                                    masterdata = {this.props.Login.masterData || []}\r\n                                    sendRecord = {this.props.getSubContractorComboService}\r\n                                    updateReceiveSTTSubContractTest = {this.props.updateReceiveSTTSubContractTest}\r\n                                    updateReceiveResultSubContractTest = {this.props.updateReceiveResultSubContractTest}\r\n                                    addFile = {this.props.addFile}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal || this.props.Login.openChildModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \"+this.props.intl.formatMessage({id : \"IDS_FILE\"})) ?\r\n                        this.props.Login.openChildModal:\r\n                        this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        showSaveContinue={true}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> \r\n                            :\r\n                            this.props.Login.operation === \"sendsubcontractor\" ?\r\n                            <SendSubContractor\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                subContracorMapList={this.props.Login.subContracorMapList || []}\r\n                                operation={this.props.Login.operation}\r\n                                userInfo={this.props.Login.userInfo}\r\n                            />\r\n                            :this.props.Login.operation === \"fileattachment\" ?\r\n                            <AddSubContractorTestAttchment\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                subContracorMapList={this.props.Login.subContracorMapList || []}\r\n                                operation={this.props.Login.operation}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                linkMaster = {this.props.Login.linkMaster}\r\n                                onDrop = {this.onDropFile}\r\n                                deleteAttachment = {this.deleteAttachment}\r\n                            />\r\n                            \r\n                            :\"\"\r\n                        }\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    onSaveSupplierFile = (saveType, formRef) => {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const acceptedFiles = selectedRecord.sfilename;\r\n            const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n            let isFileEdited = transactionStatus.NO;\r\n            let FileArray = [];\r\n            let subcontractorTestFile = {\r\n                nsubcontractortestdetailcode: selectedRecord.subcontractortestdetail.nsubcontractortestdetailcode,\r\n                nattachmenttypecode,\r\n                // ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n            };\r\n            const formData = new FormData();\r\n            if (nattachmenttypecode === attachmentType.FTP) {\r\n                if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                    acceptedFiles.forEach((file, index) => {\r\n                        const tempData = Object.assign({}, subcontractorTestFile);\r\n                        const splittedFileName = file.name.split('.');\r\n                        const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                        const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                        const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                        const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nsupplierfilecode && selectedRecord.nsupplierfilecode > 0\r\n                            && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                        tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\r\n                        //tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\r\n                        tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                        tempData[\"ssystemfilename\"] = uniquefilename;\r\n                        tempData[\"nfilesize\"] = file.size;\r\n                        formData.append(\"uploadedFile\" + index, file);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        FileArray.push(tempData);\r\n                    });\r\n                    formData.append(\"filecount\", acceptedFiles.length);\r\n                    isFileEdited = transactionStatus.YES;\r\n                } else {\r\n                    subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\r\n                   // subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\r\n                    subcontractorTestFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                    subcontractorTestFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                    subcontractorTestFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                    FileArray.push(subcontractorTestFile);\r\n                }\r\n            } else {\r\n                subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false);\r\n                //subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\r\n                subcontractorTestFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n                subcontractorTestFile[\"ssystemfilename\"] = \"\";\r\n                subcontractorTestFile[\"nfilesize\"] = 0;\r\n                FileArray.push(subcontractorTestFile);\r\n            }\r\n            formData.append(\"isFileEdited\", isFileEdited);\r\n            formData.append(\"subcontractorFile\", JSON.stringify(FileArray));\r\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n    \r\n    \r\n    \r\n            let selectedId = null;\r\n            let postParam = undefined;\r\n            if (this.props.operation === \"update\") {\r\n                // edit\r\n                postParam = { inputListName: \"Supplier\", selectedObject: \"SelectedSupplier\", primaryKeyField: \"nsuppliercode\" };\r\n                selectedId = selectedRecord[\"nsupplierfilecode\"];\r\n            }\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                        slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n                    }\r\n                },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"fileattachment\",\r\n                classUrl: \"subcontracttestdetail\",\r\n                saveType, formRef, methodUrl: \"updateSubcontractorTestFile\", postParam,\r\n                selectedRecord:{...this.state.selectedRecord}\r\n            }\r\n            this.props.saveSubcontractorTestFile(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n            let selectedFile = this.state.selectedRecord || {};\r\n            selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n            this.setState({\r\n                selectedFile, actionType: \"delete\" \r\n            });\r\n        }\r\n    \r\n    onDropFile = (attachedFiles, fieldName, maxSize) => {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n            this.setState({ selectedRecord, actionType: \"new\" });\r\n        }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                let dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                \r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData[\"SubContractSamples\"],\r\n                    dataResult: process(this.props.Login.masterData[\"SubContractSamples\"],dataState)\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData[\"SubContractSamples\"], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult:this.props.Login.masterData[\"SubContractSamples\"]\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event,optional) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else if (event.target.type === \"radio\"){\r\n            selectedRecord[event.target.name] = optional;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n   \r\n    \r\n    reloadData = () => {\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl, \r\n            displayName: this.props.Login.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n    \r\n    onSaveClick = (saveType, formRef) => {\r\n        \r\n        if(this.props.Login.operation == \"fileattachment\")\r\n        {\r\n            return this.onSaveSupplierFile(saveType, formRef);\r\n        }\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        dataState = this.state.dataState;\r\n        selectedId = this.props.Login.selectedRecord['subcontractortestdetail'].nsubcontractortestdetailcode;\r\n\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"subcontractortestdetail\"] = this.state.selectedRecord['subcontractortestdetail'];\r\n        inputData[\"subcontractortestdetail\"]['nsuppliercode'] = this.state.selectedRecord['nsuppliercode'].value;\r\n        inputData[\"subcontractortestdetail\"]['ncontrolleadtime'] = this.state.selectedRecord['nsuppliercode'].item.ncontrolleadtime;\r\n         inputData[\"subcontractortestdetail\"]['nperiodcode'] = this.state.selectedRecord['nsuppliercode'].item.nperiodcode;\r\n        inputData[\"subcontractortestdetail\"]['sremarks'] = this.state.selectedRecord['sremarks'];\r\n\r\n        // if (inputData[\"subcontractordetails\"].hasOwnProperty('esignpassword')) {\r\n        //     if (inputData[\"subcontractordetails\"]['esignpassword'] === '') {\r\n        //         delete inputData[\"subcontractordetails\"]['esigncomments']\r\n        //         delete inputData[\"subcontractordetails\"]['esignpassword']\r\n        //     }\r\n        // }\r\n\r\n        \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"updateSubContractSamplesdetails\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef, searchRef: this.searchRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: \"IDS_SENDSUBCONTRACTOR\",\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateSubContractSamplesdetails(inputParam, this.props.Login.masterData, \"openModal\",\"\",\"\");\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        let modalName = this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \"+this.props.intl.formatMessage({id : \"IDS_FILE\"})) ? \"openChildModal\" : \"openModal\";\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,updateStore, getSubContractorComboService,updateSubContractSamplesdetails,\r\n    updateReceiveSTTSubContractTest,updateReceiveResultSubContractTest,addFile,saveSubcontractorTestFile\r\n})(injectIntl(SubContractTestDetail));"]},"metadata":{},"sourceType":"module"}