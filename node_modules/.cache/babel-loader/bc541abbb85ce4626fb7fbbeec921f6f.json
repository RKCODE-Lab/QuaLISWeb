{"ast":null,"code":"import React from'react';import{injectIntl}from'react-intl';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{Col,Row}from'react-bootstrap';import FormInput from'../../components/form-input/form-input.component';import CustomSwitch from'../../components/custom-switch/custom-switch.component';import FormTextarea from'../../components/form-textarea/form-textarea.component';import FormNumericInput from'../../components/form-numeric-input/form-numeric-input.component';import AddTestMethod from'./AddTestMethod';import AddTestInstrumentCategory from'./AddTestInstrumentCategory';import AddTestSection from'./AddTestSection';var AddTest=function AddTest(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_TESTCATEGORY\"}),isSearchable:true,name:\"ntestcategorycode\",placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,showOption:true,options:props.testData.testCategory||[],optionId:\"ntestcategorycode\",optionValue:\"stestcategoryname\",value:props.selectedRecord[\"ntestcategorycode\"],onChange:function onChange(value){return props.onComboChange(value,\"ntestcategorycode\",1);},alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormInput,{name:\"stestname\",label:props.intl.formatMessage({id:\"IDS_TESTNAME\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,2);},placeholder:props.intl.formatMessage({id:\"IDS_TESTNAME\"}),value:props.selectedRecord?props.selectedRecord[\"stestname\"]:\"\",isMandatory:\"*\",required:true,maxLength:100}),/*#__PURE__*/React.createElement(FormInput,{name:\"stestsynonym\",label:props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"}),value:props.selectedRecord?props.selectedRecord[\"stestsynonym\"]:\"\",isMandatory:\"*\",required:true,maxLength:100}),/*#__PURE__*/React.createElement(FormTextarea,{name:\"sdescription\",label:props.intl.formatMessage({id:\"IDS_TESTPROCEDURE\"}),onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_TESTPROCEDURE\"}),value:props.selectedRecord?props.selectedRecord[\"sdescription\"]:\"\",rows:\"2\",required:false,maxLength:255}),/*#__PURE__*/React.createElement(FormNumericInput,{name:\"ncost\",label:props.intl.formatMessage({id:\"IDS_PRICE\"}),type:\"number\",value:props.selectedRecord[\"ncost\"],placeholder:props.intl.formatMessage({id:\"IDS_PRICE\"}),strict:true,min:0//max={9999999.99}\n,maxLength:10,onChange:function onChange(value){return props.onNumericInputChange(value,\"ncost\");},noStyle:true,precision:2,className:\"form-control\",errors:\"Please provide a valid number.\"})),props.needOtherTest&&/*#__PURE__*/React.createElement(AddTestSection,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,section:props.otherTestData.section,isMulti:false}),props.needOtherTest&&/*#__PURE__*/React.createElement(AddTestMethod,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,method:props.otherTestData.method,isMulti:false}),props.needOtherTest&&/*#__PURE__*/React.createElement(AddTestInstrumentCategory,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,instrumentcategory:props.otherTestData.instrumentcategory,isMulti:false}),/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(CustomSwitch,{name:\"naccredited\",label:props.intl.formatMessage({id:\"IDS_ACCREDITED\"}),type:\"switch\",onChange:function onChange(event){return props.onInputOnChange(event,1,[70,71]);},placeholder:props.intl.formatMessage({id:\"IDS_ACCREDITED\"}),defaultValue:props.selectedRecord[\"naccredited\"]===70?true:false,checked:props.selectedRecord[\"naccredited\"]===70?true:false}),/*#__PURE__*/React.createElement(CustomSwitch,{name:\"ntransactionstatus\",label:props.intl.formatMessage({id:\"IDS_ACTIVE\"}),type:\"switch\",onChange:function onChange(event){return props.onInputOnChange(event,1,[1,2]);}//onChange={(event)=>props.onActiveStatusChange(event, [1, 2])}\n,placeholder:props.intl.formatMessage({id:\"IDS_ACTIVE\"}),defaultValue:props.selectedRecord[\"ntransactionstatus\"]===1?true:false,checked:props.selectedRecord[\"ntransactionstatus\"]===1?true:false})));};export default injectIntl(AddTest);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testmanagement/AddTest.jsx"],"names":["React","injectIntl","FormSelectSearch","Col","Row","FormInput","CustomSwitch","FormTextarea","FormNumericInput","AddTestMethod","AddTestInstrumentCategory","AddTestSection","AddTest","props","intl","formatMessage","id","testData","testCategory","selectedRecord","value","onComboChange","event","onInputOnChange","onNumericInputChange","needOtherTest","otherTestData","section","method","instrumentcategory"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport AddTestMethod from './AddTestMethod';\r\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\r\nimport AddTestSection from './AddTestSection';\r\n\r\nconst AddTest = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_TESTCATEGORY\" })}\r\n                    isSearchable={true}\r\n                    name={\"ntestcategorycode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    showOption={true}\r\n                    options={props.testData.testCategory || []}\r\n                    optionId='ntestcategorycode'\r\n                    optionValue='stestcategoryname'\r\n                    value={props.selectedRecord[\"ntestcategorycode\"]}\r\n                    onChange={value => props.onComboChange(value, \"ntestcategorycode\", 1)}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormInput\r\n                    name={\"stestname\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 2)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestname\"]:\"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                <FormInput\r\n                    name={\"stestsynonym\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestsynonym\"]:\"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                <FormTextarea\r\n                    name={\"sdescription\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"sdescription\"]:\"\"}\r\n                    rows=\"2\"\r\n                    required={false}\r\n                    maxLength={255}\r\n                >\r\n                </FormTextarea>\r\n                <FormNumericInput\r\n                    name={\"ncost\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"ncost\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    strict={true}\r\n                    min={0}\r\n                    //max={9999999.99}\r\n                    maxLength={10}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"ncost\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n            </Col>\r\n            { props.needOtherTest && \r\n            <AddTestSection\r\n                onComboChange={props.onComboChange}\r\n                selectedRecord={props.selectedRecord}\r\n                section={props.otherTestData.section}\r\n                isMulti={false}\r\n            />}\r\n            { props.needOtherTest && \r\n            <AddTestMethod\r\n                onComboChange={props.onComboChange}\r\n                selectedRecord={props.selectedRecord}\r\n                method={props.otherTestData.method}\r\n                isMulti={false}\r\n            />}\r\n            { props.needOtherTest && \r\n            <AddTestInstrumentCategory\r\n                onComboChange={props.onComboChange}\r\n                selectedRecord={props.selectedRecord}\r\n                instrumentcategory={props.otherTestData.instrumentcategory}\r\n                isMulti={false}\r\n            />}\r\n            <Col md={12}>\r\n                <CustomSwitch\r\n                    name={\"naccredited\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                    type=\"switch\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1, [70, 71])}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                    defaultValue={props.selectedRecord[\"naccredited\"] === 70 ? true : false }\r\n                    checked={props.selectedRecord[\"naccredited\"] === 70 ? true : false }\r\n                >\r\n                </CustomSwitch>\r\n                <CustomSwitch\r\n                    name={\"ntransactionstatus\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_ACTIVE\"})}\r\n                    type=\"switch\"\r\n                    onChange={(event)=>props.onInputOnChange(event, 1, [1, 2])}\r\n                    //onChange={(event)=>props.onActiveStatusChange(event, [1, 2])}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\"})}\r\n                    defaultValue ={props.selectedRecord[\"ntransactionstatus\"] === 1 ? true :false}\r\n                    checked={props.selectedRecord[\"ntransactionstatus\"] === 1 ? true :false}\r\n                >\r\n                </CustomSwitch>\r\n            </Col>           \r\n        </Row>\r\n     );\r\n}\r\n\r\nexport default injectIntl(AddTest);"]},"metadata":{},"sourceType":"module"}