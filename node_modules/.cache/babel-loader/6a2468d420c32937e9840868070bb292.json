{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getGoodsInComboService(goodsInParam) {\n  return function (dispatch) {\n    const manufacturerService = rsapi.post(\"manufacturer/getManufacturerListForCombo\", {\n      userinfo: goodsInParam.userInfo\n    });\n    const courierService = rsapi.post(\"courier/getAllActiveCourier\", {\n      userinfo: goodsInParam.userInfo\n    });\n    const recipientService = rsapi.post(\"users/getUserWithDeptForCombo\", {\n      userinfo: goodsInParam.userInfo\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: goodsInParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (goodsInParam.operation === \"create\") {\n      urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService];\n    } else {\n      const url = goodsInParam.inputParam.classUrl + \"/getActiveGoodsInById\";\n      const goodsInById = rsapi.post(url, {\n        [goodsInParam.primaryKeyField]: goodsInParam.primaryKeyValue,\n        \"userinfo\": goodsInParam.userInfo\n      });\n      urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService, goodsInById];\n      selectedId = goodsInParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const manufacturerMap = constructOptionList(response[0].data || [], \"nmanufcode\", \"smanufname\", undefined, undefined, true);\n      const courierMap = constructOptionList(response[1].data || [], \"ncouriercode\", \"scouriername\", undefined, undefined, false);\n      const recipientMap = constructOptionList(response[2].data || [], \"nusercode\", \"susername\", undefined, undefined, true);\n      const timeZoneMap = constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const manufacturerList = manufacturerMap.get(\"OptionList\");\n      const courierList = courierMap.get(\"OptionList\");\n      const recipientList = recipientMap.get(\"OptionList\");\n      const timeZoneList = timeZoneMap.get(\"OptionList\"); //const currentTime = new Date(response[4].data);\n\n      const currentTime = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\n      let validRecord = true;\n      let selectedRecord = {\n        //\"dgoodsindate\": new Date(response[4].data),\n        \"ntzgoodsindate\": {\n          \"value\": goodsInParam.userInfo.ntimezonecode,\n          \"label\": goodsInParam.userInfo.stimezoneid\n        },\n        \"stzgoodsindate\": goodsInParam.userInfo.stimezoneid\n      };\n\n      if (goodsInParam.operation === \"update\") {\n        if (response[5].data[\"ntransactionstatus\"] === transactionStatus.GOODS_RECEIVED) {\n          validRecord = false;\n        } else {\n          let manufacturer = [];\n          let courier = [];\n          let user = [];\n          let timeZone = [];\n          selectedRecord = response[5].data;\n          manufacturer.push({\n            \"value\": response[5].data[\"nmanufcode\"],\n            \"label\": response[5].data[\"smanufname\"]\n          });\n\n          if (response[5].data[\"ncouriercode\"] !== -1) {\n            courier.push({\n              \"value\": response[5].data[\"ncouriercode\"],\n              \"label\": response[5].data[\"scouriername\"]\n            });\n            selectedRecord[\"ncouriercode\"] = courier[0];\n          } else {\n            selectedRecord[\"ncouriercode\"] = undefined;\n          }\n\n          user.push({\n            \"value\": response[5].data[\"nrecipientcode\"],\n            \"label\": response[5].data[\"suserfullname\"]\n          });\n          timeZone.push({\n            \"value\": response[5].data[\"ntzgoodsindate\"],\n            \"label\": response[5].data[\"stzgoodsindate\"]\n          });\n          selectedRecord[\"nmanufcode\"] = manufacturer[0];\n          selectedRecord[\"nrecipientcode\"] = user[0]; //selectedRecord[\"ndeptcode\"] = response[5].data[\"ndeptcode\"];\n\n          selectedRecord[\"sdeptname\"] = response[5].data[\"sdeptname\"];\n          selectedRecord[\"ntzgoodsindate\"] = timeZone[0];\n          selectedRecord[\"stzgoodsindate\"] = timeZone[0].label; //selectedRecord[\"dgoodsindate\"] = new Date(response[5].data[\"sgoodsindate\"]);\n\n          selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[5].data[\"sgoodsindate\"]);\n        }\n      } else {\n        //selectedRecord[\"dgoodsindate\"]= new Date(response[4].data);\n        selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\n        selectedRecord[\"nmanufcode\"] = manufacturerMap.get(\"DefaultValue\");\n        selectedRecord[\"ncouriercode\"] = courierMap.get(\"DefaultValue\");\n        selectedRecord[\"nrecipientcode\"] = recipientMap.get(\"DefaultValue\"); // selectedRecord[\"ntzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\");\n        //selectedRecord[\"stzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\") ? timeZoneMap.get(\"DefaultValue\").label :\"\";\n      }\n\n      if (validRecord) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            currentTime,\n            manufacturerList,\n            //:response[0].data || [], \n            courierList,\n            //:response[1].data  || [], \n            recipientList,\n            //:response[2].data  || [],   \n            timeZoneList,\n            //:response[3].data  || [],                                                                                     \n            operation: goodsInParam.operation,\n            screenName: goodsInParam.screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: goodsInParam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_GOODSINALREADYRECEIVED\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getGoodsInDetail(goodsIn, fromDate, toDate, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"goodsin/getGoodsIn\", {\n      nrmsno: goodsIn.nrmsno,\n      fromDate,\n      toDate,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getChainCustodyComboDataService(chainCustodyParam) {\n  return function (dispatch) {\n    // if (chainCustodyParam.masterData.SelectedGoodsIn.ntransactionstatus === transactionStatus.GOODS_IN) {\n    //     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINNOTRECEIVED\" }));\n    // }\n    // else {\n    let selectedId = null;\n    let selectedRecord = {\n      \"dreceiveddate\": new Date(),\n      \"ntzreceiveddate\": {\n        \"value\": chainCustodyParam.userInfo.ntimezonecode,\n        \"label\": chainCustodyParam.userInfo.stimezoneid\n      },\n      \"stzreceiveddate\": chainCustodyParam.userInfo.stimezoneid\n    };\n\n    if (chainCustodyParam.operation === \"update\") {\n      if (chainCustodyParam.editRow.nreceivedownercode === chainCustodyParam.userInfo.nusercode) {\n        selectedId = chainCustodyParam.primaryKeyValue;\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n        const ccById = rsapi.post(\"goodsin/getActiveChainCustodyById\", {\n          [chainCustodyParam.primaryKeyField]: chainCustodyParam.primaryKeyValue,\n          \"userinfo\": chainCustodyParam.userInfo\n        });\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo: chainCustodyParam.userInfo\n        });\n        const urlArray = [timeZoneService, ccById, UTCtimeZoneService];\n        dispatch(initRequest(true));\n        Axios.all(urlArray) // dispatch(initRequest(true));\n        // return rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField] : chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo} )\n        .then(response => {\n          selectedRecord = response[1].data;\n          let timeZone = [];\n          timeZone.push({\n            \"value\": response[1].data[\"ntzreceiveddate\"],\n            \"label\": response[1].data[\"stzreceiveddate\"]\n          });\n          const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n          const timeZoneList = timeZoneMap.get(\"OptionList\");\n          selectedRecord[\"ntzreceiveddate\"] = timeZone[0];\n          selectedRecord[\"stzreceiveddate\"] = timeZone[0].label; //selectedRecord[\"dreceiveddate\"] = new Date(response[1].data[\"sreceiveddate\"]);\n\n          selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data[\"sreceiveddate\"]);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              timeZoneList,\n              //:response[0].data  || [],                                                                                 \n              operation: chainCustodyParam.operation,\n              screenName: chainCustodyParam.screenName,\n              selectedRecord,\n              openChildModal: true,\n              ncontrolCode: chainCustodyParam.ncontrolCode,\n              loading: false,\n              selectedId,\n              //currentTime:new Date(response[2].data)\n              currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[2].data)\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_INVALIDOWNERTOEDIT\"\n        }));\n      }\n    } else {\n      dispatch(initRequest(true));\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: chainCustodyParam.userInfo\n      });\n      const validateGoodsIn = rsapi.post(\"goodsin/validateGoodsIn\", {\n        nrmsno: chainCustodyParam.masterData.SelectedGoodsIn.nrmsno,\n        userinfo: chainCustodyParam.userInfo\n      });\n      let urlArray = [timeZoneService, UTCtimeZoneService, validateGoodsIn];\n      return Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            //:response.data  || [],\n            operation: chainCustodyParam.operation,\n            selectedRecord: { ...selectedRecord,\n              //dreceiveddate: new Date(response[1].data) \n              dreceiveddate: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\n            },\n            openChildModal: true,\n            screenName: chainCustodyParam.screenName,\n            ncontrolCode: chainCustodyParam.ncontrolCode,\n            loading: false,\n            selectedId,\n            //currentTime:new Date(response[1].data)\n            currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  }; // }\n}\nexport function getGoodsInPrinterComboService(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"barcode/getPrinter\", inputParam.userInfo).then(response => {\n      let selectedRecord = {\n        sprintername: {\n          value: response.data[0].sprintername,\n          label: response.data[0].sprintername,\n          item: response.data[0]\n        }\n      };\n      const printerList = constructOptionList(response.data || [], \"sprintername\", \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          printerList,\n          selectedRecord,\n          operation: \"printer\",\n          screenName: \"PrintBarcode\",\n          dataToPrint: inputParam.selectedGoodsIn.nrmsno,\n          ncontrolcode: inputParam.ncontrolcode,\n          loading: false,\n          openModal: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function reloadGoodsIn(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"goodsin/getGoodsIn\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/GoodsInAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","sortData","constructOptionList","rearrangeDateFormat","intl","transactionStatus","getGoodsInComboService","goodsInParam","dispatch","manufacturerService","post","userinfo","userInfo","courierService","recipientService","timeZoneService","UTCtimeZoneService","urlArray","selectedId","operation","url","inputParam","classUrl","goodsInById","primaryKeyField","primaryKeyValue","all","then","response","manufacturerMap","data","undefined","courierMap","recipientMap","timeZoneMap","manufacturerList","get","courierList","recipientList","timeZoneList","currentTime","validRecord","selectedRecord","ntimezonecode","stimezoneid","GOODS_RECEIVED","manufacturer","courier","user","timeZone","push","label","type","payload","screenName","openModal","ncontrolCode","loading","warn","formatMessage","id","catch","error","status","message","getGoodsInDetail","goodsIn","fromDate","toDate","masterData","nrmsno","getChainCustodyComboDataService","chainCustodyParam","Date","editRow","nreceivedownercode","nusercode","ccById","openChildModal","validateGoodsIn","SelectedGoodsIn","dreceiveddate","getGoodsInPrinterComboService","sprintername","value","item","printerList","dataToPrint","selectedGoodsIn","ncontrolcode","reloadGoodsIn","inputData","responseData","searchRef","current","showFilter"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getGoodsInComboService(goodsInParam) {\r\n    return function (dispatch) {\r\n\r\n        const manufacturerService = rsapi.post(\"manufacturer/getManufacturerListForCombo\", { userinfo: goodsInParam.userInfo });\r\n        const courierService = rsapi.post(\"courier/getAllActiveCourier\", { userinfo: goodsInParam.userInfo });\r\n        const recipientService = rsapi.post(\"users/getUserWithDeptForCombo\", { userinfo: goodsInParam.userInfo });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: goodsInParam.userInfo });\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n        if (goodsInParam.operation === \"create\") {\r\n            urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService];\r\n        }\r\n        else {\r\n            const url = goodsInParam.inputParam.classUrl + \"/getActiveGoodsInById\";\r\n\r\n            const goodsInById = rsapi.post(url, { [goodsInParam.primaryKeyField]: goodsInParam.primaryKeyValue, \"userinfo\": goodsInParam.userInfo });\r\n            urlArray = [manufacturerService, courierService, recipientService, timeZoneService, UTCtimeZoneService, goodsInById];\r\n            selectedId = goodsInParam.primaryKeyValue;\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const manufacturerMap = constructOptionList(response[0].data || [], \"nmanufcode\",\r\n                    \"smanufname\", undefined, undefined, true);\r\n\r\n                const courierMap = constructOptionList(response[1].data || [], \"ncouriercode\",\r\n                    \"scouriername\", undefined, undefined, false);\r\n\r\n                const recipientMap = constructOptionList(response[2].data || [], \"nusercode\",\r\n                    \"susername\", undefined, undefined, true);\r\n\r\n                const timeZoneMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n\r\n                const manufacturerList = manufacturerMap.get(\"OptionList\");\r\n                const courierList = courierMap.get(\"OptionList\");\r\n                const recipientList = recipientMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                //const currentTime = new Date(response[4].data);\r\n                const currentTime = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\r\n\r\n                let validRecord = true;\r\n                let selectedRecord = {\r\n                    //\"dgoodsindate\": new Date(response[4].data),\r\n                    \"ntzgoodsindate\": {\r\n                        \"value\": goodsInParam.userInfo.ntimezonecode,\r\n                        \"label\": goodsInParam.userInfo.stimezoneid\r\n                    },\r\n                    \"stzgoodsindate\": goodsInParam.userInfo.stimezoneid\r\n                };\r\n                if (goodsInParam.operation === \"update\") {\r\n                    if (response[5].data[\"ntransactionstatus\"] === transactionStatus.GOODS_RECEIVED) {\r\n                        validRecord = false;\r\n                    }\r\n                    else {\r\n                        let manufacturer = [];\r\n                        let courier = [];\r\n                        let user = [];\r\n                        let timeZone = [];\r\n                        selectedRecord = response[5].data;\r\n\r\n                        manufacturer.push({ \"value\": response[5].data[\"nmanufcode\"], \"label\": response[5].data[\"smanufname\"] });\r\n                        if (response[5].data[\"ncouriercode\"] !== -1) {\r\n                            courier.push({ \"value\": response[5].data[\"ncouriercode\"], \"label\": response[5].data[\"scouriername\"] });\r\n                            selectedRecord[\"ncouriercode\"] = courier[0];\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"ncouriercode\"] = undefined;\r\n                        }\r\n                        user.push({ \"value\": response[5].data[\"nrecipientcode\"], \"label\": response[5].data[\"suserfullname\"] });\r\n                        timeZone.push({ \"value\": response[5].data[\"ntzgoodsindate\"], \"label\": response[5].data[\"stzgoodsindate\"] });\r\n\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n                        selectedRecord[\"nrecipientcode\"] = user[0];\r\n                        //selectedRecord[\"ndeptcode\"] = response[5].data[\"ndeptcode\"];\r\n                        selectedRecord[\"sdeptname\"] = response[5].data[\"sdeptname\"];\r\n                        selectedRecord[\"ntzgoodsindate\"] = timeZone[0];\r\n                        selectedRecord[\"stzgoodsindate\"] = timeZone[0].label;\r\n\r\n                       //selectedRecord[\"dgoodsindate\"] = new Date(response[5].data[\"sgoodsindate\"]);\r\n\r\n                       selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[5].data[\"sgoodsindate\"]);\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    //selectedRecord[\"dgoodsindate\"]= new Date(response[4].data);\r\n                    selectedRecord[\"dgoodsindate\"] = rearrangeDateFormat(goodsInParam.userInfo, response[4].data);\r\n                  \r\n                  \r\n                    selectedRecord[\"nmanufcode\"] = manufacturerMap.get(\"DefaultValue\");\r\n                    selectedRecord[\"ncouriercode\"] = courierMap.get(\"DefaultValue\");\r\n                    selectedRecord[\"nrecipientcode\"] = recipientMap.get(\"DefaultValue\");\r\n                    // selectedRecord[\"ntzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\");\r\n                    //selectedRecord[\"stzgoodsindate\"] = timeZoneMap.get(\"DefaultValue\") ? timeZoneMap.get(\"DefaultValue\").label :\"\";\r\n                }\r\n                if (validRecord) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            currentTime,\r\n                            manufacturerList,//:response[0].data || [], \r\n                            courierList,//:response[1].data  || [], \r\n                            recipientList,//:response[2].data  || [],   \r\n                            timeZoneList,//:response[3].data  || [],                                                                                     \r\n                            operation: goodsInParam.operation, screenName: goodsInParam.screenName,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: goodsInParam.ncontrolCode,\r\n                            loading: false, selectedId\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_GOODSINALREADYRECEIVED\" }));\r\n                }\r\n            })\r\n            .catch(error => {              \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getGoodsInDetail(goodsIn, fromDate, toDate, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"goodsin/getGoodsIn\", { nrmsno: goodsIn.nrmsno, fromDate, toDate, userinfo: userInfo })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChainCustodyComboDataService(chainCustodyParam) {\r\n    return function (dispatch) {\r\n\r\n        // if (chainCustodyParam.masterData.SelectedGoodsIn.ntransactionstatus === transactionStatus.GOODS_IN) {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_GOODSINNOTRECEIVED\" }));\r\n        // }\r\n        // else {\r\n        let selectedId = null;\r\n        let selectedRecord = {\r\n            \"dreceiveddate\": new Date(),\r\n            \"ntzreceiveddate\": {\r\n                \"value\": chainCustodyParam.userInfo.ntimezonecode,\r\n                \"label\": chainCustodyParam.userInfo.stimezoneid\r\n            },\r\n            \"stzreceiveddate\": chainCustodyParam.userInfo.stimezoneid\r\n        };\r\n\r\n        if (chainCustodyParam.operation === \"update\") {\r\n            if (chainCustodyParam.editRow.nreceivedownercode === chainCustodyParam.userInfo.nusercode) {\r\n                selectedId = chainCustodyParam.primaryKeyValue;\r\n                const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n                const ccById = rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField]: chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo });\r\n                const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\r\n           \r\n                const urlArray = [timeZoneService, ccById, UTCtimeZoneService];\r\n\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    // dispatch(initRequest(true));\r\n                    // return rsapi.post(\"goodsin/getActiveChainCustodyById\", { [chainCustodyParam.primaryKeyField] : chainCustodyParam.primaryKeyValue, \"userinfo\": chainCustodyParam.userInfo} )\r\n                    .then(response => {\r\n                        selectedRecord = response[1].data;\r\n\r\n                        let timeZone = [];\r\n                        timeZone.push({ \"value\": response[1].data[\"ntzreceiveddate\"], \"label\": response[1].data[\"stzreceiveddate\"] });\r\n\r\n                        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                            \"stimezoneid\", undefined, undefined, true);\r\n\r\n                        const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n                        selectedRecord[\"ntzreceiveddate\"] = timeZone[0];\r\n                        selectedRecord[\"stzreceiveddate\"] = timeZone[0].label;\r\n\r\n                        //selectedRecord[\"dreceiveddate\"] = new Date(response[1].data[\"sreceiveddate\"]);\r\n\r\n                        selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data[\"sreceiveddate\"]);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                timeZoneList,//:response[0].data  || [],                                                                                 \r\n                                operation: chainCustodyParam.operation,\r\n                                screenName: chainCustodyParam.screenName,\r\n                                selectedRecord,\r\n                                openChildModal: true,\r\n                                ncontrolCode: chainCustodyParam.ncontrolCode,\r\n                                loading: false, selectedId,\r\n                                //currentTime:new Date(response[2].data)\r\n                                currentTime:rearrangeDateFormat(chainCustodyParam.userInfo, response[2].data)\r\n                            }\r\n                        });\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_INVALIDOWNERTOEDIT\" }));\r\n            }\r\n        }\r\n        else {\r\n            dispatch(initRequest(true));\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: chainCustodyParam.userInfo });\r\n            const validateGoodsIn = rsapi.post(\"goodsin/validateGoodsIn\", {\r\n                nrmsno: chainCustodyParam.masterData.SelectedGoodsIn.nrmsno,\r\n                userinfo: chainCustodyParam.userInfo\r\n            });\r\n            let urlArray = [timeZoneService, UTCtimeZoneService,validateGoodsIn];\r\n            return Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            timeZoneList,//:response.data  || [],\r\n                            operation: chainCustodyParam.operation,\r\n                            selectedRecord: { ...selectedRecord, \r\n                                //dreceiveddate: new Date(response[1].data) \r\n                                dreceiveddate: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\r\n                            },\r\n                            openChildModal: true,\r\n                            screenName: chainCustodyParam.screenName,\r\n                            ncontrolCode: chainCustodyParam.ncontrolCode,\r\n                            loading: false, selectedId,\r\n                            //currentTime:new Date(response[1].data)\r\n                            currentTime: rearrangeDateFormat(chainCustodyParam.userInfo, response[1].data)\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    // }\r\n}\r\n\r\nexport function getGoodsInPrinterComboService(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true))\r\n        rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\r\n            .then(response => {\r\n                let selectedRecord = {\r\n                    sprintername: {\r\n                        value: response.data[0].sprintername,\r\n                        label: response.data[0].sprintername,\r\n                        item: response.data[0]\r\n                    }\r\n                };\r\n                const printerList = constructOptionList(response.data || [], \"sprintername\",\r\n                    \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        printerList,\r\n                        selectedRecord,\r\n                        operation: \"printer\",\r\n                        screenName: \"PrintBarcode\",\r\n                        dataToPrint: inputParam.selectedGoodsIn.nrmsno,\r\n                        ncontrolcode: inputParam.ncontrolcode,\r\n                        loading: false,\r\n                        openModal: true\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function reloadGoodsIn(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"goodsin/getGoodsIn\", {...inputParam.inputData})\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}