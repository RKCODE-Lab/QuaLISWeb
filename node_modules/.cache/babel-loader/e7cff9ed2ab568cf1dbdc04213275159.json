{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { rearrangeDateFormat } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nexport function getComboSampleReceiving(addParam, masterData) {\n  return function (dispatch) {\n    let userInfo = addParam.userInfo;\n    dispatch(initRequest(true));\n    return rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    }).then(response => {\n      let date = rearrangeDateFormat(userInfo, response.data); // masterData[\"barcodeFields\"] ={};\n      // masterData [\"barcodedata\"]={};\n      // masterData [\"jsondataBarcodeFields\"]={};\n\n      let selectedRecord = { ...addParam.selectedRecord,\n        \"dcollectiondate\": date\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            \"barcodeFields\": [],\n            \"barcodedata\": [],\n            \"jsondataBarcodeFields\": []\n          },\n          operation: addParam.operation,\n          screenName: addParam.screenName,\n          selectedRecord: selectedRecord,\n          openModal: true,\n          ncontrolcode: addParam.ncontrolCode,\n          loading: false,\n          barcodenorecord: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBarcodeDataRecord(inputParam) {\n  return function (dispatch) {\n    const obj1 = {};\n    dispatch(initRequest(true));\n    rsapi.post(\"samplereceiving/getBarcodeConfigData\", {\n      userinfo: inputParam.inputData.userinfo,\n      nprojecttypecode: inputParam.masterData.selectedProjectType.value,\n      spositionvalue: inputParam.inputData.selectedRecord.sbarcodeid,\n      nbarcodeLength: inputParam.inputData.selectedRecord.sbarcodeid.length,\n      jsondata: obj1\n    }).then(response => {\n      // let b = [];\n      // b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\n      // b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\n      // let str = [];\n      // str = [...barcodeFields, ...b]\n      //let barcodedata = { ...response.data.jsondataBarcodeData, \"Unit Name\": response.data.addValue[0].sunitname, \"Sample Quantity\": response.data.addValue[0].nsampleqty };\n      let barcodeFields = response.data.jsondataBarcodeFields;\n      let barcodedata = response.data.jsondataBarcodeData;\n      inputParam.masterData[\"jsondataBarcodeFields\"] = response.data.jsondataBarcodeFields;\n      let masterData = { ...inputParam.masterData,\n        \"barcodedata\": barcodedata,\n        \"barcodeFields\": barcodeFields\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          ...inputParam.inputData.selectedRecord,\n          loading: false,\n          barcodenorecord: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function saveReceiving(inputParam, masterData) {\n  return function (dispatch) {\n    const service1 = rsapi.post(\"samplereceiving/\" + inputParam.operation + \"SampleReceiving\", inputParam.inputData);\n    const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.inputData.userinfo\n    });\n    let urlArray = [];\n    dispatch(initRequest(true));\n    urlArray = [service1, service2];\n    Axios.all(urlArray).then(response => {\n      //let masterData = { ...inputParam.masterData, ...response.data, selectedProjectType: inputParam.inputData.selectedProjectType }\n      masterData = { ...masterData,\n        \"SampleReceiving\": response[0].data.SampleReceiving,\n        \"barcodedata\": \"\"\n      };\n      let openModal = false;\n\n      if (inputParam.saveType === 2) {\n        openModal = true;\n      }\n\n      masterData[\"jsondataBarcodeFields\"] = response[0].data.jsondataBarcodeFields;\n      masterData = { ...masterData,\n        \"SampleReceiving\": response[0].data.SampleReceiving,\n        \"barcodedata\": \"\"\n      };\n      let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"sbarcodeid\": \"\",\n        \"dcollectiondate\": date,\n        \"scomments\": \"\"\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          barcodeFields: [],\n          barcodedata: [],\n          barcodenorecord: [],\n          openModal: openModal,\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveSampleReceivingById(editParam) {\n  return function (dispatch) {\n    let selectedId = null;\n    rsapi.post(\"samplereceiving/getActiveSampleReceivingById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"nprojecttypecode\": editParam.editRow.nprojecttypecode,\n      \"spositionvalue\": editParam.editRow.sbarcodeid,\n      \"userinfo\": editParam.userInfo\n    }).then(response => {\n      selectedId = editParam.primaryKeyValue;\n      let date = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleColletionByID['scollectiondate']);\n      let selectedRecord = response.data && response.data.activeSampleColletionByID; // let b = [];\n      // b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\n      // b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\n      // let str = [];\n      // str = [...barcodeFields, ...b]\n      // let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\n      // let barcodeFields = response.data.jsondataBarcodeFields;\n\n      let barcodeFields = response.data.jsondataBarcodeFields;\n      let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\n      let masterData = { ...editParam.masterData,\n        \"barcodedata\": barcodedata,\n        \"barcodeFields\": barcodeFields\n      }; //let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata, \"barcodeFields\": barcodeFields }\n\n      selectedRecord = { ...editParam.selectedRecord,\n        \"sbarcodeid\": response.data.activeSampleColletionByID['sbarcodeid'],\n        \"dcollectiondate\": date,\n        \"scomments\": response.data.activeSampleColletionByID['scomments']\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          operation: editParam.operation,\n          ncontrolcode: editParam.ncontrolCode,\n          openModal: true,\n          loading: false,\n          barcodenorecord: false,\n          selectedId,\n          screenName: editParam.screenName,\n          dataState: editParam.dataState\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleReceiving(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"samplereceiving/getSampleReceiving\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data,\n        selectedProjectType: inputParam.inputData.selectedProjectType\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function SampleReceivingReportReadBarcode(SampleReceivingReportId, data) {\n//     if (SampleReceivingReportId !== false) {\n//         let obj = convertDateValuetoString(data.masterData.FromDate,\n//             data.masterData.ToDate,\n//             data.userInfo);\n//         let fromDate = obj.fromDate;\n//         let toDate = obj.toDate;\n//         const filterTestParam = {\n//             todate: toDate,\n//             fromdate: fromDate\n//         }\n//         this.props.generateControlBasedReport(SampleReceivingReportId, filterTestParam, this.props.Login, \"nsamplereceivingcode\",\n//             this.state.selectedRecord.nsamplereceivingcode);\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/SampleReceivingAction.js"],"names":["rsapi","Axios","toast","rearrangeDateFormat","DEFAULT_RETURN","initRequest","getComboSampleReceiving","addParam","masterData","dispatch","userInfo","post","userinfo","then","response","date","data","selectedRecord","type","payload","operation","screenName","openModal","ncontrolcode","ncontrolCode","loading","barcodenorecord","catch","error","status","message","warn","getBarcodeDataRecord","inputParam","obj1","inputData","nprojecttypecode","selectedProjectType","value","spositionvalue","sbarcodeid","nbarcodeLength","length","jsondata","barcodeFields","jsondataBarcodeFields","barcodedata","jsondataBarcodeData","saveReceiving","service1","service2","urlArray","all","SampleReceiving","saveType","loadEsign","getActiveSampleReceivingById","editParam","selectedId","primaryKeyField","primaryKeyValue","editRow","activeSampleColletionByID","dataState","getSampleReceiving"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { rearrangeDateFormat } from '../components/CommonScript'\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\nexport function getComboSampleReceiving(addParam,masterData) {\r\n    return function (dispatch) {\r\n        let userInfo = addParam.userInfo;\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo })\r\n            .then(response => {\r\n                let date = rearrangeDateFormat(userInfo, response.data);\r\n                // masterData[\"barcodeFields\"] ={};\r\n                // masterData [\"barcodedata\"]={};\r\n                // masterData [\"jsondataBarcodeFields\"]={};\r\n\r\n                let selectedRecord = { ...addParam.selectedRecord, \"dcollectiondate\": date }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,\r\n                            \"barcodeFields\" :[],\r\n                            \"barcodedata\":[],\r\n                            \"jsondataBarcodeFields\":[]\r\n                        },\r\n                        operation: addParam.operation,\r\n                        screenName: addParam.screenName,\r\n                        selectedRecord: selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolcode: addParam.ncontrolCode,\r\n                        loading: false,\r\n                        barcodenorecord: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getBarcodeDataRecord(inputParam) {\r\n    return function (dispatch) {\r\n        const obj1 = {};\r\n       \r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"samplereceiving/getBarcodeConfigData\", {\r\n                userinfo: inputParam.inputData.userinfo,\r\n                nprojecttypecode: inputParam.masterData.selectedProjectType.value, spositionvalue: inputParam.inputData.selectedRecord.sbarcodeid,\r\n                nbarcodeLength: inputParam.inputData.selectedRecord.sbarcodeid.length, jsondata: obj1\r\n            }\r\n            ).then(response => {\r\n\r\n\r\n                // let b = [];\r\n                // b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\r\n                // b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\r\n                // let str = [];\r\n                // str = [...barcodeFields, ...b]\r\n                //let barcodedata = { ...response.data.jsondataBarcodeData, \"Unit Name\": response.data.addValue[0].sunitname, \"Sample Quantity\": response.data.addValue[0].nsampleqty };\r\n                \r\n                let barcodeFields = response.data.jsondataBarcodeFields;\r\n                let barcodedata = response.data.jsondataBarcodeData;\r\n              \r\n                inputParam.masterData[\"jsondataBarcodeFields\"]=response.data.jsondataBarcodeFields;\r\n\r\n                let masterData = { ...inputParam.masterData, \"barcodedata\": barcodedata, \"barcodeFields\": barcodeFields }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        ...inputParam.inputData.selectedRecord,\r\n                        loading: false,\r\n                        barcodenorecord: false\r\n                    }\r\n                });\r\n            }\r\n            )\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\n\r\nexport function saveReceiving(inputParam, masterData) {\r\n    return function (dispatch) {\r\n\r\n        const service1 = rsapi.post(\"samplereceiving/\" + inputParam.operation + \"SampleReceiving\", inputParam.inputData);\r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: inputParam.inputData.userinfo\r\n        });\r\n        let urlArray = [];\r\n        dispatch(initRequest(true));\r\n\r\n        urlArray = [service1, service2]\r\n        Axios.all(urlArray).then(response => {\r\n\r\n            //let masterData = { ...inputParam.masterData, ...response.data, selectedProjectType: inputParam.inputData.selectedProjectType }\r\n            masterData = { ...masterData, \"SampleReceiving\": response[0].data.SampleReceiving, \"barcodedata\": \"\" }\r\n            let openModal = false;\r\n            if (inputParam.saveType === 2) {\r\n                openModal = true;\r\n            }\r\n\r\n            masterData[\"jsondataBarcodeFields\"]=response[0].data.jsondataBarcodeFields;\r\n \r\n            masterData = { ...masterData,\"SampleReceiving\": response[0].data.SampleReceiving, \"barcodedata\": \"\" }\r\n\r\n            let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\r\n\r\n            let selectedRecord = { ...inputParam.selectedRecord, \"sbarcodeid\": \"\", \"dcollectiondate\": date, \"scomments\": \"\" }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    barcodeFields:[],\r\n                    barcodedata:[],\r\n                    barcodenorecord:[],\r\n                    openModal: openModal,\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getActiveSampleReceivingById(editParam) {\r\n    return function (dispatch) {\r\n\r\n        let selectedId = null;\r\n        rsapi.post(\"samplereceiving/getActiveSampleReceivingById\",\r\n            {\r\n                [editParam.primaryKeyField]: editParam.primaryKeyValue, \"nprojecttypecode\": editParam.editRow.nprojecttypecode, \"spositionvalue\": editParam.editRow.sbarcodeid, \"userinfo\": editParam.userInfo\r\n            }).then(response => {\r\n                selectedId = editParam.primaryKeyValue;\r\n\r\n                let date = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleColletionByID['scollectiondate']);\r\n\r\n                let selectedRecord = response.data && response.data.activeSampleColletionByID\r\n                // let b = [];\r\n                // b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\r\n                // b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\r\n\r\n                // let str = [];\r\n                // str = [...barcodeFields, ...b]\r\n\r\n                // let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\r\n                // let barcodeFields = response.data.jsondataBarcodeFields;\r\n\r\n                let barcodeFields = response.data.jsondataBarcodeFields;\r\n              \r\n                let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\r\n                let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata , \"barcodeFields\":barcodeFields}\r\n\r\n                //let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata, \"barcodeFields\": barcodeFields }\r\n\r\n                selectedRecord = {\r\n                    ...editParam.selectedRecord, \"sbarcodeid\": response.data.activeSampleColletionByID['sbarcodeid'],\r\n                    \"dcollectiondate\": date, \"scomments\": response.data.activeSampleColletionByID['scomments']\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        operation: editParam.operation,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        barcodenorecord:false,\r\n                        selectedId,\r\n                        screenName: editParam.screenName,\r\n                        dataState:editParam.dataState,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getSampleReceiving(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplereceiving/getSampleReceiving\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data, selectedProjectType: inputParam.inputData.selectedProjectType }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export function SampleReceivingReportReadBarcode(SampleReceivingReportId, data) {\r\n\r\n//     if (SampleReceivingReportId !== false) {\r\n//         let obj = convertDateValuetoString(data.masterData.FromDate,\r\n//             data.masterData.ToDate,\r\n//             data.userInfo);\r\n//         let fromDate = obj.fromDate;\r\n//         let toDate = obj.toDate;\r\n\r\n//         const filterTestParam = {\r\n//             todate: toDate,\r\n//             fromdate: fromDate\r\n//         }\r\n\r\n\r\n//         this.props.generateControlBasedReport(SampleReceivingReportId, filterTestParam, this.props.Login, \"nsamplereceivingcode\",\r\n//             this.state.selectedRecord.nsamplereceivingcode);\r\n\r\n//     }\r\n\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}