{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\audittrail\\\\AuditTrail.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Button, Card, Nav } from 'react-bootstrap'; //Nav, Card, Button\n//import { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { constructOptionList, getStartOfDay, getEndOfDay, sortData, validateTwoDigitDate, convertDateValuetoString, rearrangeDateFormat, getControlMap } from '../../components/CommonScript'; //showEsign, getControlMap,\n\nimport { callService, crudMaster, validateEsignCredential, updateStore, filterTransactionList, filterColumnData, getAuditTrailDetail, getFilterAuditTrailRecords, getFormNameByModule, getExportExcel, ViewAuditDetails } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport AuditTrailFilter from './AuditTrailFilter';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SplitterLayout from 'react-splitter-layout';\nimport { MediaHeader, ProductList } from '../product/product.styled';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel, faSync } from '@fortawesome/free-solid-svg-icons';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\n\nclass AuditTrail extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        this.setState({\n          dataResult: process(this.props.Login.masterData.AuditDetails || [], event.dataState),\n          dataStateAll: event.dataState,\n          kendoSkip: event.dataState.skip,\n          kendoTake: event.dataState.skip\n        });\n      } else {\n        let data = [];\n\n        if (event.dataState.filter === null && event.dataState.sort === null) {\n          let auditdata = this.props.Login.masterData.AuditDetails && this.props.Login.masterData.AuditDetails.slice(0, event.dataState.take + event.dataState.skip) || [];\n          data = process(auditdata || [], event.dataState);\n        } else {\n          data = process(this.props.Login.masterData.AuditDetails || [], event.dataState);\n        }\n\n        this.setState({\n          dataResult: data,\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.pageChange = event => {\n      this.setState({\n        kendoSkip: event.page.skip,\n        kendoTake: event.page.take\n      });\n    };\n\n    this.exportExcelNew = () => {\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\n        formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\n        usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\n        userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\n        viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\n        userinfo: this.props.Login.userInfo,\n        sauditdate: this.props.Login.masterData.SelectedAuditTrail.saudittraildate,\n        nauditformcode: 78,\n        ncontrolcode: 78\n      };\n      let inputParam = {\n        inputData\n      };\n      this.props.getExportExcel(inputParam); // if(this.props.Login.resultStatus === \"Success\"){\n      //     toast.info(\"Excel export successfully\");\n      // }\n    };\n\n    this.closeModal = () => {\n      let openModal = this.props.Login.openModal;\n      openModal = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.ViewAuditDetails = viewdetails => {\n      console.log('ewe', viewdetails);\n      let openModal = this.props.Login.openModal;\n      openModal = true;\n      let screenName = 'IDS_AUDITVIEWDETAILS';\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          screenName\n        }\n      };\n      this.props.ViewAuditDetails(this.props.Login.masterData, this.props.Login.userInfo, viewdetails, screenName);\n    };\n\n    this.expandChange = event => {\n      event.dataItem[event.target.props.expandField] = event.value;\n      this.setState({\n        dataResult: process(this.props.Login.masterData.AuditDetails || [], this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState),\n        dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.onReload = () => {\n      // let dFromDate = this.props.Login.masterData.breadCrumbFrom ? (this.props.Login.masterData.breadCrumbFrom) : this.props.Login.masterData.FromDate;\n      // let dToDate = this.props.Login.masterData.breadCrumbTo ? (this.props.Login.masterData.breadCrumbTo) : this.props.Login.masterData.ToDate;\n      //var dTempFromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\n      //let dTempToDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\n      //let temp = dFromDate.indexOf('-');\n      // let fromMonth = (dTempFromDate.getMonth()+1);\n      // let toMonth = (dTempToDate.getMonth()+1);\n      // let fromMonth = String(new Date(dFromDate).getMonth() + 1)\n      // let toMonth = String(new Date(dToDate).getMonth() + 1)\n      // let fromYear = dFromDate.substring(0, 4);\n      // let toYear = dToDate.substring(0, 4);\n      // let ntempviewtypecode = 0;\n      let breadCrumbFrom = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\n      let breadCrumbTo = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\n      let breadCrumbModule = this.props.Login.masterData.breadCrumbModule;\n      let breadCrumbForm = this.props.Login.masterData.breadCrumbForm;\n      let breadCrumbUser = this.props.Login.masterData.breadCrumbUser;\n      let breadCrumbRole = this.props.Login.masterData.breadCrumbRole;\n      let breadCrumbViewType = this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType : this.props.Login.ViewType;\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        modulecode: breadCrumbModule ? breadCrumbModule.value : 0,\n        formcode: breadCrumbForm ? breadCrumbForm.value : 0,\n        usercode: breadCrumbUser ? breadCrumbUser.value : 0,\n        userrole: breadCrumbRole ? breadCrumbRole.value : 0,\n        viewtypecode: breadCrumbViewType ? breadCrumbViewType.value : this.props.Login.masterData.ViewType.nauditactionfiltercode,\n        // viewtypecode : this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode :0,\n        // viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\n        userinfo: this.props.Login.userInfo,\n        postParamList: this.filterParam\n      };\n      let masterData = { ...this.props.Login.masterData,\n        breadCrumbFrom,\n        breadCrumbTo,\n        breadCrumbModule,\n        breadCrumbForm,\n        breadCrumbUser,\n        breadCrumbRole,\n        //breadCrumbViewType : breadCrumbViewType ? breadCrumbViewType :\n        // this.props.Login.masterData.ViewType\n        breadCrumbViewType: breadCrumbViewType ? breadCrumbViewType : {\n          label: this.props.Login.masterData.ViewType.sauditactionfiltername,\n          value: this.props.Login.masterData.ViewType.nauditactionfiltercode,\n          item: this.props.Login.masterData.ViewType\n        }\n      };\n      let inputParam = {\n        masterData,\n        inputData,\n        searchRef: this.searchRef,\n        detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\n      };\n      this.props.getFilterAuditTrailRecords(inputParam);\n    };\n\n    this.onFilterSubmit = () => {\n      let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let breadCrumbModule = this.state.selectedRecord['nmodulecode'];\n      let breadCrumbForm = this.state.selectedRecord['nformcode'];\n      let breadCrumbUser = this.state.selectedRecord['nusercode'];\n      let breadCrumbRole = this.state.selectedRecord['nuserrolecode'];\n      let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\n      let masterData = { ...this.props.Login.masterData,\n        breadCrumbFrom,\n        breadCrumbTo,\n        breadCrumbModule,\n        breadCrumbForm,\n        breadCrumbUser,\n        breadCrumbRole,\n        breadCrumbViewType\n      };\n      let fromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\n      let toDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\n        formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\n        usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\n        userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\n        //viewtypecode: ntempviewtypecode,//this.state.selectedcombo[\"nviewtypecode\"] ? this.state.selectedcombo[\"nviewtypecode\"].value:0,\n        viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\n        userinfo: this.props.Login.userInfo,\n        postParamList: this.filterParam\n      };\n      let inputParam = {\n        masterData,\n        inputData,\n        searchRef: this.searchRef,\n        detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\n      };\n      this.props.getFilterAuditTrailRecords(inputParam);\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      if (comboData != null) {\n        if (fieldName === \"nmodulecode\" || fieldName === \"nformcode\" || fieldName === \"nusercode\" || fieldName === \"nuserrolecode\" || fieldName === \"nauditactionfiltercode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData; // let qualisForms = this.state.qualisForms;\n\n          let qualisForms = this.state.wholeQualisForms;\n\n          if (fieldName === \"nmodulecode\") {\n            selectedRecord[\"nformcode\"] = \"\";\n            qualisForms = qualisForms.filter(form => form.item.nmodulecode === comboData.value);\n          } else if (selectedRecord.nmodulecode && selectedRecord.nmodulecode.value) {\n            qualisForms = qualisForms.filter(form => form.item.nmodulecode === selectedRecord.nmodulecode.value);\n          }\n\n          this.setState({\n            selectedRecord,\n            qualisForms\n          });\n        }\n        /*if (fieldName === \"nauditactionfiltercode\") {\r\n               this.searchRef.current.value = \"\";\r\n               const selectedcombo = this.state.selectedcombo || {};\r\n            selectedcombo[fieldName] = comboData;\r\n            const dataStateAll = {\r\n                skip: 0,\r\n                take: 100\r\n            };\r\n               this.setState({ selectedcombo, dataStateAll });\r\n               let masterData = {\r\n                ...this.props.Login.masterData, searchedAudit: undefined\r\n            }\r\n            let inputData = {\r\n                fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\r\n                toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\r\n                modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n                formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n                usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n                userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n                viewtypecode: this.state.selectedcombo[\"nauditactionfiltercode\"] ? this.state.selectedcombo[\"nauditactionfiltercode\"].value : 0,\r\n                userinfo: this.props.Login.userInfo,\r\n                postParamList: this.filterParam,\r\n            }\r\n               let inputParam = { masterData, inputData }\r\n            this.props.getFilterAuditTrailRecords(inputParam)\r\n        }*/\n\n      } else {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n\n        if (fieldName === 'nmodulecode') {\n          selectedRecord[\"nformcode\"] = \"\";\n          const qualisForms = this.state.wholeQualisForms;\n          this.setState({\n            selectedRecord,\n            qualisForms\n          });\n        } else this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[dateName] = dateValue; //this.setState({selectedRecord});\n\n      let viewTypeAuditList = this.state.viewTypeAudit;\n      let dFromDate = this.state.selectedRecord[\"fromdate\"] ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let dToDate = this.state.selectedRecord[\"todate\"] ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate); // let ntempviewtypecode = 0;\n\n      let fromMonth = String(dFromDate.getMonth() + 1);\n      let toMonth = String(dToDate.getMonth() + 1);\n      let fromYear = String(dFromDate.getFullYear());\n      let toYear = String(dToDate.getFullYear());\n\n      if (fromYear !== toYear) {\n        selectedRecord[\"nauditactionfiltercode\"] = viewTypeAuditList.length > 0 ? {\n          \"value\": viewTypeAuditList[2].item.nauditactionfiltercode,\n          \"label\": viewTypeAuditList[2].item.sauditactionfiltername\n        } : this.state.selectedRecord[\"nauditactionfiltercode\"]; // ntempviewtypecode = viewTypeAuditList[2].item.nauditactionfiltercode;\n      } else if (fromMonth !== toMonth) {\n        selectedRecord[\"nauditactionfiltercode\"] = viewTypeAuditList.length > 0 ? {\n          \"value\": viewTypeAuditList[1].item.nauditactionfiltercode,\n          \"label\": viewTypeAuditList[1].item.sauditactionfiltername\n        } : this.state.selectedRecord[\"nauditactionfiltercode\"]; // ntempviewtypecode = viewTypeAuditList[1].item.nauditactionfiltercode;\n      } else {\n        selectedRecord[\"nauditactionfiltercode\"] = viewTypeAuditList.length > 0 ? {\n          \"value\": viewTypeAuditList[0].item.nauditactionfiltercode,\n          \"label\": viewTypeAuditList[0].item.sauditactionfiltername\n        } : this.state.selectedRecord[\"nauditactionfiltercode\"]; // ntempviewtypecode = viewTypeAuditList[0].item.nauditactionfiltercode;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.breadcrumbList = () => {\n      let breadCrumbArray = []; // let fromDate = this.props.Login.masterData.breadCrumbFrom ? this.props.Login.masterData.breadCrumbFrom : this.props.Login.masterData.FromDate;\n      //    let toDate = this.props.Login.masterData.breadCrumbTo ? this.props.Login.masterData.breadCrumbTo : this.props.Login.masterData.ToDate;\n\n      let fromDate = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\n      let toDate = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      breadCrumbArray.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      });\n      this.props.Login.masterData.breadCrumbModule && breadCrumbArray.push({\n        \"label\": \"IDS_MODULENAME\",\n        \"value\": this.props.Login.masterData.breadCrumbModule.label\n      });\n      this.props.Login.masterData.breadCrumbForm && breadCrumbArray.push({\n        \"label\": \"IDS_FORMNAME\",\n        \"value\": this.props.Login.masterData.breadCrumbForm.label\n      });\n      this.props.Login.masterData.breadCrumbUser && breadCrumbArray.push({\n        \"label\": \"IDS_USERNAME\",\n        \"value\": this.props.Login.masterData.breadCrumbUser.label\n      });\n      this.props.Login.masterData.breadCrumbRole && breadCrumbArray.push({\n        \"label\": \"IDS_USERROLE\",\n        \"value\": this.props.Login.masterData.breadCrumbRole.label\n      });\n      breadCrumbArray.push({\n        \"label\": \"IDS_VIEWPERIOD\",\n        \"value\": this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.label : this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.sauditactionfiltername : \"\"\n      }); // this.state.selectedRecord[\"nformcode\"] &&\n      //  {\n      //     \"label\": \"IDS_FORMNAME\",\n      //     \"value\": this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].label : \"\"\n      // },\n      // this.state.selectedRecord[\"nusercode\"] &&\n      // {\n      //     \"label\": \"IDS_USERNAME\",\n      //     \"value\": this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].label : \"\"\n      // },\n      // this.state.selectedRecord[\"nuserrolecode\"] &&\n      // {\n      //     \"label\": \"IDS_USERROLE\",\n      //     \"value\": this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].label : \"\"\n      // }\n\n      return breadCrumbArray;\n    };\n\n    this.myRef = React.createRef(); // this.searchAuditRef = React.createRef();\n\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\n      group: [{\n        field: \"viewPeriod\",\n        dir: \"desc\"\n      }] //field: \"groupDate\" , dir: \"desc\" \n\n    };\n    const dataStateAll = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\n    };\n    this.searchFieldList = [\"sauditdate\"];\n    this.state = {\n      masterStatus: \"\",\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      error: \"\",\n      isOpen: false,\n      selectedRecord: {},\n      //selectedcombo: {},\n      operation: \"\",\n      gridHeight: 'auto',\n      screenName: undefined,\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      ConfirmDialogScreen: false,\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: dataState,\n      dataStateAll: dataStateAll,\n      qualisModule: [],\n      qualisForms: [],\n      users: [],\n      userRole: [],\n      viewTypeAudit: [],\n      wholeQualisForms: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      kendoSkip: 0,\n      kendoTake: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.searchAuditRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //const ViewAuditDetails = props.controlMap.has(\"ViewAuditDetails\") && props.controlMap.get(\"ViewAuditDetails\").ncontrolcode;\n    const ViewAuditDetails = this.state.controlMap.has(\"ViewAuditDetails\") && this.state.controlMap.get(\"ViewAuditDetails\").ncontrolcode;\n    this.props.Login.masterData.AuditDetails = this.props.Login.masterData.AuditDetails && sortData(this.props.Login.masterData.AuditDetails, \"descending\", \"nauditcode\");\n    this.feildsForGrid = this.props.Login.needOldValueColumn ? [{\n      \"idsName\": \"IDS_FEILDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_OLDVALUE\",\n      \"dataField\": \"soldvalue\",\n      \"width\": \"100px\"\n    }, {\n      \"idsName\": \"IDS_NEWVALUE\",\n      \"dataField\": \"snewvalue\",\n      \"width\": \"100px\"\n    }] : [{\n      \"idsName\": \"IDS_FEILDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_NEWVALUE\",\n      \"dataField\": \"snewvalue\",\n      \"width\": \"100px\"\n    }];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_AUDITDATE\",\n      \"dataField\": \"sauditdate\",\n      \"width\": \"200px\",\n      \"componentName\": \"date\"\n    }, {\n      \"idsName\": \"IDS_AUDITACTION\",\n      \"dataField\": \"sauditaction\",\n      \"width\": \"200px\"\n    }, //  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\n    {\n      \"idsName\": \"IDS_NEWCOMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"350px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONTYPE\",\n      \"dataField\": \"sactiontype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_MODULENAME\",\n      \"dataField\": \"smodulename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FORMNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ESIGNCOMMENTS\",\n      \"dataField\": \"sreason\",\n      \"width\": \"200px\"\n    }];\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let auditParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      // fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\n      // toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\n      // moduleCode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\n      // formCode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\n      // userCode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\n      // userRole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\n      // viewTypeCode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0\n      skip: this.state.skip,\n      take: this.state.take,\n      fromDate: obj.fromDate,\n      toDate: obj.toDate,\n      moduleCode: this.props.Login.masterData.breadCrumbModule ? this.props.Login.masterData.breadCrumbModule.value : 0,\n      formCode: this.props.Login.masterData.breadCrumbForm ? this.props.Login.masterData.breadCrumbForm.value : 0,\n      userCode: this.props.Login.masterData.breadCrumbUser ? this.props.Login.masterData.breadCrumbUser.value : 0,\n      userRole: this.props.Login.masterData.breadCrumbRole ? this.props.Login.masterData.breadCrumbRole.value : 0,\n      viewTypeCode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value : this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode : 0 //viewTypeCode :this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode:0\n\n    };\n    this.filterParam = {\n      inputListName: \"AuditTrail\",\n      selectedObject: \"SelectedAuditTrail\",\n      primaryKeyField: \"saudittraildate\",\n      fetchUrl: \"audittrail/getAuditTrailDetail\",\n      masterData: this.props.Login.masterData,\n      fecthInputObject: {\n        // fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\n        // toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\n        // modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\n        // formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\n        // usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\n        // userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\n        // viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\n        userinfo: this.props.Login.userInfo,\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        modulecode: this.props.Login.masterData.breadCrumbModule ? this.props.Login.masterData.breadCrumbModule.value : 0,\n        formcode: this.props.Login.masterData.breadCrumbForm ? this.props.Login.masterData.breadCrumbForm.value : 0,\n        usercode: this.props.Login.masterData.breadCrumbUser ? this.props.Login.masterData.breadCrumbUser.value : 0,\n        userrole: this.props.Login.masterData.breadCrumbRole ? this.props.Login.masterData.breadCrumbRole.value : 0,\n        viewtypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value : this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode : 0\n      },\n      filteredListName: \"searchedAudit\",\n      clearFilter: \"no\",\n      updatedListname: \"SelectedAuditTrail\",\n      searchRef: this.searchAuditRef,\n      searchFieldList: this.searchFieldList,\n      unchangeList: [\"QualisModule\", \"QualisForms\", \"Users\", \"UserRole\", \"ViewTypeAudit\"],\n      changeList: [\"AuditDetails\"]\n    };\n    this.breadCrumbData = this.breadcrumbList();\n    console.log('-->123 :', this.props.Login.masterData.AuditTrail); // this.state.selectedRecord && this.state.selectedRecord[\"nmodulecode\"] &&\n    // {\n    //     \"label\": \"IDS_MODULENAME\",\n    //     \"value\": this.state.selectedRecord[\"nmodulecode\"].label \n    // }\n    // this.state.selectedRecord[\"nformcode\"] &&\n    //  {\n    //     \"label\": \"IDS_FORMNAME\",\n    //     \"value\": this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].label : \"\"\n    // }, \n    // this.state.selectedRecord[\"nusercode\"] &&\n    // {\n    //     \"label\": \"IDS_USERNAME\",\n    //     \"value\": this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].label : \"\"\n    // }, \n    // this.state.selectedRecord[\"nuserrolecode\"] &&\n    // {\n    //     \"label\": \"IDS_USERROLE\",\n    //     \"value\": this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].label : \"\"\n    // }\n    // ]\n    // let auditInputData = {\n    //     fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\n    //     toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\n    //     modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\n    //     formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\n    //     usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\n    //     userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\n    //     viewtypecode: this.state.selectedcombo[\"nauditactionfiltercode\"] ? this.state.selectedcombo[\"nauditactionfiltercode\"].value : 0,\n    //     userinfo: this.props.Login.userInfo\n    // }\n\n    this.postParamList = [{\n      filteredListName: \"searchedAudit\",\n      clearFilter: \"no\",\n      searchRef: this.searchRef,\n      primaryKeyField: \"saudittraildate\",\n      fetchUrl: \"audittrail/getFilterAuditTrailRecords\",\n      fecthInputObject: this.filterParam,\n      //childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }],\n      selectedObject: \"SelectedAuditTrail\",\n      inputListName: \"AuditTrail\",\n      updatedListname: \"SelectedAuditTrail\",\n      unchangeList: [\"QualisModule\", \"QualisForms\", \"Users\", \"UserRole\", \"ViewTypeAudit\"]\n    }];\n    const auditInfoFields = [{\n      \"fieldName\": \"sauditaction\",\n      \"label\": \"IDS_AUDITACTION\"\n    }, {\n      \"fieldName\": \"sformname\",\n      \"label\": \"IDS_SCREEN\"\n    }, {\n      \"fieldName\": \"smodulename\",\n      \"label\": \"IDS_MODULENAME\"\n    }, {\n      \"fieldName\": \"sauditdate\",\n      \"label\": \"IDS_AUDITDATE\"\n    }, {\n      \"fieldName\": \"suserrolename\",\n      \"label\": \"IDS_USERROLENAME\"\n    }, {\n      \"fieldName\": \"susername\",\n      \"label\": \"IDS_USERNAME\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mtop-fixed-breadcrumb client-listing-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage //paneHeight={this.state.parentHeight}\n      // masterList={this.props.Login.masterData.searchedAudit || \n      //     this.props.Login.masterData.AuditTrail ? sortData(this.props.Login.masterData.AuditTrail,'descending','saudittraildate') : []}\n      // masterList={this.props.Login.masterData.searchedAudit ? this.props.Login.masterData.searchedAudit :\n      //   this.props.Login.masterData.AuditTrail ? sortData(this.props.Login.masterData.AuditTrail, 'descending', 'saudittraildate') : []}\n      ,\n      masterList: this.props.Login.masterData.searchedAudit || this.props.Login.masterData.AuditTrail || [],\n      selectedMaster: [this.props.Login.masterData.SelectedAuditTrail],\n      primaryKeyField: \"saudittraildate\",\n      getMasterDetail: this.props.getAuditTrailDetail,\n      inputParam: auditParam //additionalParam={['napprovalversioncode']}\n      ,\n      mainField: \"sauditdate\",\n      selectedListName: \"SelectedAuditTrail\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedAudit\",\n      searchRef: this.searchRef,\n      filterParam: this.filterParam,\n      objectName: \"auditrail\",\n      listName: \"IDS_AUDITTRAIL\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit // needAccordianFilter={true}\n      ,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      needFilter: true,\n      needAccordianFilter: false,\n      filterComponent: [{\n        \"IDS_AUDITTRAIL\": /*#__PURE__*/React.createElement(AuditTrailFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          filterModuleName: this.state.qualisModule,\n          filterFormName: this.state.qualisForms,\n          filterViewType: this.state.viewTypeAudit,\n          filterUsers: this.state.users,\n          filterUserRole: this.state.userRole,\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 49\n          }\n        })\n      }] // accordianfilterComponent={[\n      //     {\n      //         \"IDS_AUDITTRAIL\":\n      //             <ViewTypeFilter\n      //                 selectedRecord={this.state.selectedcombo || {}}\n      //                 filterViewType={this.state.viewTypeAudit}\n      //                 userInfo={this.props.Login.userInfo}\n      //                 onComboChange={this.onComboChange}\n      //             />\n      //     }\n      // ]}\n      ,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 49\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.SelectedAuditTrail && this.props.Login.masterData.SelectedAuditTrail !== undefined ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap padding-class\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid // gridWidth={\"57.5rem\"}\n    , {\n      gridHeight: this.state.gridHeight + 'px',\n      expandField: \"expanded\",\n      userRoleControlRights: this.state.userRoleControlRights && this.state.userRoleControlRights,\n      pageable: true,\n      pageSizes: this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting)),\n      scrollable: \"scrollable\",\n      primaryKeyField: \"nauditcode\",\n      data: this.props.Login.masterData.AuditDetails || [],\n      dataResult: this.state.dataResult,\n      total: this.props.Login.masterData.AuditDetails && this.props.Login.masterData.AuditDetails.length || 0 //  dataResult={process(this.props.Login.masterData.AuditDetails || [],\n      //  this.state.selectedRecord[\"nauditactionfiltercode\"]\n      //     && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1\n      //   ? this.state.dataStateAll : this.state.dataState)}\n      ,\n      dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList || [],\n      controlMap: this.state.controlMap,\n      methodUrl: \"AuditTrail\",\n      groupable: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? true : false : false //isActionRequired={false}\n      ,\n      isToolBarRequired: true,\n      isAddRequired: false,\n      isRefreshRequired: false,\n      isDownloadPDFRequired: false,\n      isDownloadExcelRequired: true,\n      isExportExcelRequired: true,\n      isIdsField: \"yes\",\n      isActionRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faEye\",\n        objectName: \"AuditDetails\",\n        hidden: this.state.userRoleControlRights.indexOf(ViewAuditDetails) === -1,\n        onClick: viewdetails => this.ViewAuditDetails(viewdetails)\n      }],\n      exportExcelNew: this.exportExcelNew,\n      onExpandChange: this.expandChange,\n      hideDetailBand: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 57\n      }\n    })))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      inputParam: this.props.Login.inputParam,\n      screenName: 'IDS_MODIFIEDCOMMENTS',\n      hideSave: true,\n      addComponent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n        controlMap: this.state.controlMap,\n        auditInfoFields: auditInfoFields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedSpecification: this.props.Login.viewdetails,\n        userInfo: this.props.Login.userInfo,\n        selectedNode: this.props.Login.masterData.selectedNode,\n        selectedRecord: this.state.filterData,\n        approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n        screenName: \"IDS_SPECIFICATIONINFO\",\n        deleteRecord: this.deleteRecord,\n        addSpecification: this.props.addSpecification,\n        filterData: this.state.filterData //completeSpecification={this.completeSpecification}\n        ,\n        completeSpecification: this.validateTestGroupComplete,\n        approveSpecification: this.approveSpecification,\n        specificationReport: this.specificationReport,\n        retireSpec: this.retireSpec,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 41\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nauditcommentscode\",\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid,\n        dataResult: this.props.Login.masterData[\"AuditModifiedComments\"] && this.props.Login.masterData[\"AuditModifiedComments\"].length > 0 && process(this.props.Login.masterData[\"AuditModifiedComments\"], this.props.screenName === undefined || this.props.screenName === \"IDS_AUDITVIEWDETAILS\" ? this.state.sectionDataState : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.props.Login.screenName === undefined || this.props.Login.screenName === \"IDS_AUDITVIEWDETAILS\" ? this.state.sectionDataState : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: event => this.setState({\n          sectionDataState: event.dataState\n        }),\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        pageable: true,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting)),\n        scrollable: 'scrollable',\n        gridHeight: '600px',\n        hideColumnFilter: false,\n        selectedId: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 33\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  // covertDatetoString(startDateValue, endDateValue) {\n  //     const startDate = new Date(startDateValue);\n  //     const endDate = new Date(endDateValue);\n  //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\n  //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\n  //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\n  //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\n  //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\n  //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\n  //     const fromDate = fromDateOnly + \"T00:00:00\";\n  //     const toDate = toDateOnly + \"T23:59:59\";\n  //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\n  // }\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      qualisModule,\n      qualisForms,\n      wholeQualisForms,\n      users,\n      userRole,\n      viewTypeAudit,\n      dataStateAll,\n      dataState,\n      dataResult,\n      skip,\n      take\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.masterData.QualisModule !== previousProps.Login.masterData.QualisModule || this.props.Login.masterData.QualisForms !== previousProps.Login.masterData.QualisForms || this.props.Login.masterData.Users !== previousProps.Login.masterData.Users || this.props.Login.masterData.UserRole !== previousProps.Login.masterData.UserRole) {\n      updateState = true;\n      const qualisModuleMap = constructOptionList(this.props.Login.masterData.QualisModule || [], \"nmodulecode\", \"smodulename\", \"nsorter\", \"ascending\", false); //const allQualisModuleList = qualisModule.get(\"OptionList\");\n\n      const qualisModuleList = qualisModuleMap.get(\"OptionList\");\n      const qualisFormsMap = constructOptionList(this.props.Login.masterData.QualisForms || [], \"nformcode\", \"sformname\", \"nsorter\", \"ascending\", false); // const allQualisFormsList = qualisForms.get(\"OptionList\");\n\n      let qualisFormsList = [];\n\n      if (selectedRecord && selectedRecord.nmodulecode && selectedRecord.nmodulecode.value) {\n        qualisFormsList = qualisFormsMap.get(\"OptionList\").filter(form => form.item.nmodulecode === selectedRecord.nmodulecode.value);\n      } else {\n        qualisFormsList = qualisFormsMap.get(\"OptionList\");\n      }\n\n      const usersMap = constructOptionList(this.props.Login.masterData.Users || [], \"nusercode\", \"susername\", undefined, undefined, undefined); //const allUsersList = users.get(\"OptionList\");\n\n      const usersList = usersMap.get(\"OptionList\");\n      const userRoleMap = constructOptionList(this.props.Login.masterData.UserRole || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, undefined); //const allUserRoleList = userRole.get(\"OptionList\");\n\n      const userRoleList = userRoleMap.get(\"OptionList\");\n      const viewTypeAuditMap = constructOptionList(this.props.Login.masterData.ViewTypeAudit || [], \"nauditactionfiltercode\", \"sauditactionfiltername\", \"nsorter\", \"ascending\", false);\n      const viewTypeAuditList = viewTypeAuditMap.get(\"OptionList\");\n      qualisModule = qualisModuleList;\n      qualisForms = qualisFormsList;\n      wholeQualisForms = qualisFormsList;\n      users = usersList;\n      userRole = userRoleList;\n      viewTypeAudit = viewTypeAuditList;\n      selectedRecord = {\n        nauditactionfiltercode: viewTypeAuditList.length > 0 ? {\n          \"value\": viewTypeAuditList[0].item.nauditactionfiltercode,\n          \"label\": viewTypeAuditList[0].item.sauditactionfiltername\n        } : this.state.selectedRecord[\"nauditactionfiltercode\"]\n      };\n    }\n\n    if (this.props.Login.resetDataGridPage && this.props.Login.resetDataGridPage !== previousProps.Login.resetDataGridPage) {\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        dataStateAll.skip = 0;\n        updateState = true;\n      } else {\n        dataState.skip = 0;\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (selectedRecord && selectedRecord.nmodulecode && selectedRecord.nmodulecode.value) {\n        qualisForms = qualisForms.filter(form => form.item.nmodulecode === selectedRecord.nmodulecode.value);\n      } else {\n        qualisForms = wholeQualisForms;\n      }\n\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        dataStateAll = {\n          skip: 0,\n          take: dataStateAll.take,\n          group: dataStateAll.group\n        };\n        updateState = true;\n      } else {\n        dataState = {\n          skip: 0,\n          take: dataState.take,\n          group: dataState.group\n        };\n        updateState = true;\n      }\n\n      const auditdate = this.props.Login.masterData.AuditDetails && this.props.Login.masterData.AuditDetails.slice(dataState.skip, dataState.take + dataState.skip) || [];\n      dataResult = process(auditdate || [], dataState);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      updateState = true;\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        qualisModule,\n        qualisForms,\n        wholeQualisForms,\n        users,\n        userRole,\n        viewTypeAudit,\n        dataStateAll,\n        dataState,\n        dataResult,\n        skip,\n        take\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.myRef.current.offsetParent.clientHeight !== this.state.gridHeight) {\n      this.setState({\n        gridHeight: this.myRef.current.offsetParent.clientHeight\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  filterTransactionList,\n  updateStore,\n  filterColumnData,\n  getAuditTrailDetail,\n  getFilterAuditTrailRecords,\n  getFormNameByModule,\n  getExportExcel,\n  ViewAuditDetails\n})(injectIntl(AuditTrail));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/audittrail/AuditTrail.jsx"],"names":["React","connect","injectIntl","Row","Col","Button","Card","Nav","process","toast","PerfectScrollbar","ContentPanel","MediaLabel","constructOptionList","getStartOfDay","getEndOfDay","sortData","validateTwoDigitDate","convertDateValuetoString","rearrangeDateFormat","getControlMap","callService","crudMaster","validateEsignCredential","updateStore","filterTransactionList","filterColumnData","getAuditTrailDetail","getFilterAuditTrailRecords","getFormNameByModule","getExportExcel","ViewAuditDetails","DEFAULT_RETURN","AuditTrailFilter","TransactionListMaster","BreadcrumbComponent","DataGrid","SplitterLayout","MediaHeader","ProductList","FontAwesomeIcon","faFileExcel","faSync","SlideOutModal","SpecificationInfo","AuditTrail","Component","constructor","props","dataStateChange","event","state","selectedRecord","value","setState","dataResult","Login","masterData","AuditDetails","dataState","dataStateAll","kendoSkip","skip","kendoTake","data","filter","sort","auditdata","slice","take","paneSizeChange","d","splitChangeWidthPercentage","pageChange","page","exportExcelNew","fromDate","FromDate","toDate","ToDate","obj","userInfo","inputData","modulecode","formcode","usercode","userrole","viewtypecode","userinfo","sauditdate","SelectedAuditTrail","saudittraildate","nauditformcode","ncontrolcode","inputParam","closeModal","openModal","updateInfo","typeName","viewdetails","console","log","screenName","expandChange","dataItem","target","expandField","handlePageChange","e","onReload","breadCrumbFrom","breadCrumbTo","breadCrumbModule","breadCrumbForm","breadCrumbUser","breadCrumbRole","breadCrumbViewType","ViewType","nauditactionfiltercode","postParamList","filterParam","label","sauditactionfiltername","item","searchRef","detailSkip","onFilterSubmit","onComboChange","comboData","fieldName","caseNo","qualisForms","wholeQualisForms","form","nmodulecode","handleDateChange","dateName","dateValue","viewTypeAuditList","viewTypeAudit","dFromDate","dToDate","fromMonth","String","getMonth","toMonth","fromYear","getFullYear","toYear","length","openFilter","showFilter","closeFilter","breadcrumbList","breadCrumbArray","push","breadCrumbto","myRef","createRef","settings","parseInt","group","field","dir","searchFieldList","masterStatus","sectionDataState","error","isOpen","operation","gridHeight","undefined","userRoleControlRights","ControlRights","ConfirmDialogScreen","controlMap","Map","qualisModule","users","userRole","searchAuditRef","getDerivedStateFromProps","warn","render","has","get","feildsForGrid","needOldValueColumn","extractedColumnList","auditParam","moduleCode","formCode","userCode","viewTypeCode","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","filteredListName","clearFilter","updatedListname","unchangeList","changeList","breadCrumbData","auditInfoFields","searchedAudit","intl","formatMessage","id","split","map","setting","title","controlname","objectName","hidden","indexOf","onClick","selectedNode","filterData","ApprovalRoleActionDetail","deleteRecord","addSpecification","validateTestGroupComplete","approveSpecification","specificationReport","retireSpec","componentDidUpdate","previousProps","updateState","QualisModule","QualisForms","Users","UserRole","qualisModuleMap","qualisModuleList","qualisFormsMap","qualisFormsList","usersMap","usersList","userRoleMap","userRoleList","viewTypeAuditMap","ViewTypeAudit","resetDataGridPage","auditdate","nformcode","Object","values","componentDidMount","current","offsetParent","clientHeight","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Button, Card, Nav } from 'react-bootstrap';//Nav, Card, Button\r\n//import { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { constructOptionList, getStartOfDay, getEndOfDay, sortData, validateTwoDigitDate, convertDateValuetoString, rearrangeDateFormat, getControlMap } from '../../components/CommonScript';//showEsign, getControlMap,\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, filterTransactionList,\r\n    filterColumnData,\r\n    getAuditTrailDetail, getFilterAuditTrailRecords, getFormNameByModule, getExportExcel, ViewAuditDetails\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport AuditTrailFilter from './AuditTrailFilter';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { MediaHeader, ProductList } from '../product/product.styled';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileExcel, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\r\n\r\n\r\nclass AuditTrail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        // this.searchAuditRef = React.createRef();\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\r\n            group: [{ field: \"viewPeriod\", dir: \"desc\" }] //field: \"groupDate\" , dir: \"desc\" \r\n        };\r\n\r\n        const dataStateAll = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\r\n        };\r\n\r\n        this.searchFieldList = [\"sauditdate\"]\r\n\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            sectionDataState: { skip: 0, take: 10 },\r\n\r\n            error: \"\",\r\n            isOpen: false,\r\n            selectedRecord: {},\r\n            //selectedcombo: {},\r\n            operation: \"\",\r\n            gridHeight: 'auto',\r\n            screenName: undefined,\r\n\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            ConfirmDialogScreen: false,\r\n            controlMap: new Map(),\r\n\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            dataStateAll: dataStateAll,\r\n            qualisModule: [],\r\n            qualisForms: [],\r\n            users: [],\r\n            userRole: [],\r\n            viewTypeAudit: [],\r\n            wholeQualisForms: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            kendoSkip: 0,\r\n            kendoTake: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\r\n            splitChangeWidthPercentage: 30,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.searchAuditRef = React.createRef();\r\n\r\n    }\r\n    dataStateChange = (event) => {\r\n        if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n            this.setState({\r\n                dataResult: process(this.props.Login.masterData.AuditDetails || [], event.dataState),\r\n                dataStateAll: event.dataState, kendoSkip: event.dataState.skip, kendoTake: event.dataState.skip\r\n            });\r\n        }\r\n        else {\r\n            let data = [];\r\n            if (event.dataState.filter === null && event.dataState.sort === null) {\r\n                let auditdata = (this.props.Login.masterData.AuditDetails &&\r\n                    this.props.Login.masterData.AuditDetails.slice(0,\r\n                        event.dataState.take + event.dataState.skip)) || []\r\n                data = process(auditdata || [], event.dataState)\r\n            } else {\r\n\r\n                data = process(this.props.Login.masterData.AuditDetails || [], event.dataState)\r\n\r\n            }\r\n            this.setState({\r\n                dataResult: data,\r\n                dataState: event.dataState,\r\n            });\r\n        }\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    pageChange = (event) => {\r\n        this.setState({\r\n            kendoSkip: event.page.skip,\r\n            kendoTake: event.page.take\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    exportExcelNew = () => {\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n            formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n            usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n            userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n            viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\r\n            userinfo: this.props.Login.userInfo,\r\n            sauditdate: this.props.Login.masterData.SelectedAuditTrail.saudittraildate,\r\n            nauditformcode: 78,\r\n            ncontrolcode: 78\r\n\r\n        }\r\n\r\n        let inputParam = { inputData }\r\n        this.props.getExportExcel(inputParam);\r\n        // if(this.props.Login.resultStatus === \"Success\"){\r\n        //     toast.info(\"Excel export successfully\");\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        //const ViewAuditDetails = props.controlMap.has(\"ViewAuditDetails\") && props.controlMap.get(\"ViewAuditDetails\").ncontrolcode;\r\n        const ViewAuditDetails = this.state.controlMap.has(\"ViewAuditDetails\") && this.state.controlMap.get(\"ViewAuditDetails\").ncontrolcode;\r\n\r\n        this.props.Login.masterData.AuditDetails = this.props.Login.masterData.AuditDetails &&\r\n            sortData(this.props.Login.masterData.AuditDetails, \"descending\", \"nauditcode\")\r\n\r\n        this.feildsForGrid =\r\n            this.props.Login.needOldValueColumn ? [\r\n                { \"idsName\": \"IDS_FEILDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_OLDVALUE\", \"dataField\": \"soldvalue\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_NEWVALUE\", \"dataField\": \"snewvalue\", \"width\": \"100px\" }] :\r\n                [\r\n                    { \"idsName\": \"IDS_FEILDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_NEWVALUE\", \"dataField\": \"snewvalue\", \"width\": \"100px\" }\r\n                ];\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_AUDITDATE\", \"dataField\": \"sauditdate\", \"width\": \"200px\", \"componentName\": \"date\" },\r\n            { \"idsName\": \"IDS_AUDITACTION\", \"dataField\": \"sauditaction\", \"width\": \"200px\" },\r\n            //  { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n            { \"idsName\": \"IDS_NEWCOMMENTS\", \"dataField\": \"scomments\", \"width\": \"350px\" },\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_ACTIONTYPE\", \"dataField\": \"sactiontype\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"smodulename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_ESIGNCOMMENTS\", \"dataField\": \"sreason\", \"width\": \"200px\" },\r\n\r\n\r\n        ]\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        }\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n            this.props.Login.masterData.ToDate,\r\n            this.props.Login.userInfo);\r\n\r\n        let auditParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            // fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\r\n            // toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\r\n            // moduleCode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n            // formCode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n            // userCode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n            // userRole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n            // viewTypeCode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0\r\n\r\n            skip: this.state.skip,\r\n            take: this.state.take,\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            moduleCode: this.props.Login.masterData.breadCrumbModule ? this.props.Login.masterData.breadCrumbModule.value : 0,\r\n            formCode: this.props.Login.masterData.breadCrumbForm ? this.props.Login.masterData.breadCrumbForm.value : 0,\r\n            userCode: this.props.Login.masterData.breadCrumbUser ? this.props.Login.masterData.breadCrumbUser.value : 0,\r\n            userRole: this.props.Login.masterData.breadCrumbRole ? this.props.Login.masterData.breadCrumbRole.value : 0,\r\n            viewTypeCode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value :\r\n                this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode : 0\r\n            //viewTypeCode :this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode:0\r\n        }\r\n\r\n        this.filterParam = {\r\n            inputListName: \"AuditTrail\", selectedObject: \"SelectedAuditTrail\", primaryKeyField: \"saudittraildate\",\r\n            fetchUrl: \"audittrail/getAuditTrailDetail\", masterData: this.props.Login.masterData,\r\n\r\n            fecthInputObject: {\r\n                // fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\r\n                // toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\r\n                // modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n                // formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n                // usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n                // userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n                // viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\r\n\r\n                userinfo: this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                modulecode: this.props.Login.masterData.breadCrumbModule ? this.props.Login.masterData.breadCrumbModule.value : 0,\r\n                formcode: this.props.Login.masterData.breadCrumbForm ? this.props.Login.masterData.breadCrumbForm.value : 0,\r\n                usercode: this.props.Login.masterData.breadCrumbUser ? this.props.Login.masterData.breadCrumbUser.value : 0,\r\n                userrole: this.props.Login.masterData.breadCrumbRole ? this.props.Login.masterData.breadCrumbRole.value : 0,\r\n                viewtypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value :\r\n                    this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode : 0\r\n\r\n            },\r\n            filteredListName: \"searchedAudit\",\r\n            clearFilter: \"no\",\r\n            updatedListname: \"SelectedAuditTrail\",\r\n            searchRef: this.searchAuditRef,\r\n            searchFieldList: this.searchFieldList,\r\n            unchangeList: [\"QualisModule\", \"QualisForms\", \"Users\", \"UserRole\", \"ViewTypeAudit\"],\r\n            changeList: [\"AuditDetails\"]\r\n\r\n        };\r\n\r\n        this.breadCrumbData = this.breadcrumbList();\r\n        console.log('-->123 :', this.props.Login.masterData.AuditTrail)\r\n\r\n\r\n        // this.state.selectedRecord && this.state.selectedRecord[\"nmodulecode\"] &&\r\n        // {\r\n        //     \"label\": \"IDS_MODULENAME\",\r\n        //     \"value\": this.state.selectedRecord[\"nmodulecode\"].label \r\n        // }\r\n        // this.state.selectedRecord[\"nformcode\"] &&\r\n        //  {\r\n        //     \"label\": \"IDS_FORMNAME\",\r\n        //     \"value\": this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].label : \"\"\r\n        // }, \r\n        // this.state.selectedRecord[\"nusercode\"] &&\r\n        // {\r\n        //     \"label\": \"IDS_USERNAME\",\r\n        //     \"value\": this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].label : \"\"\r\n        // }, \r\n        // this.state.selectedRecord[\"nuserrolecode\"] &&\r\n        // {\r\n        //     \"label\": \"IDS_USERROLE\",\r\n        //     \"value\": this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].label : \"\"\r\n\r\n        // }\r\n        // ]\r\n\r\n        // let auditInputData = {\r\n        //     fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\r\n        //     toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\r\n        //     modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n        //     formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n        //     usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n        //     userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n        //     viewtypecode: this.state.selectedcombo[\"nauditactionfiltercode\"] ? this.state.selectedcombo[\"nauditactionfiltercode\"].value : 0,\r\n        //     userinfo: this.props.Login.userInfo\r\n        // }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedAudit\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchRef,\r\n                primaryKeyField: \"saudittraildate\",\r\n                fetchUrl: \"audittrail/getFilterAuditTrailRecords\",\r\n                fecthInputObject: this.filterParam,\r\n                //childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }],\r\n                selectedObject: \"SelectedAuditTrail\",\r\n                inputListName: \"AuditTrail\",\r\n                updatedListname: \"SelectedAuditTrail\",\r\n                unchangeList: [\"QualisModule\", \"QualisForms\", \"Users\", \"UserRole\", \"ViewTypeAudit\"]\r\n            }];\r\n        const auditInfoFields = [{ \"fieldName\": \"sauditaction\", \"label\": \"IDS_AUDITACTION\" },\r\n        { \"fieldName\": \"sformname\", \"label\": \"IDS_SCREEN\" },\r\n        { \"fieldName\": \"smodulename\", \"label\": \"IDS_MODULENAME\" },\r\n        { \"fieldName\": \"sauditdate\", \"label\": \"IDS_AUDITDATE\" },\r\n        { \"fieldName\": \"suserrolename\", \"label\": \"IDS_USERROLENAME\" },\r\n        { \"fieldName\": \"susername\", \"label\": \"IDS_USERNAME\" }];\r\n        return (\r\n            <>\r\n                <div className=\"mtop-fixed-breadcrumb client-listing-wrap\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters>\r\n                        {/* //ref={(parentHeight) => { this.parentHeight = parentHeight }} */}\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" >\r\n                            <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                            >\r\n                                {/* <Col md={3}> */}\r\n                                <TransactionListMaster\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    //paneHeight={this.state.parentHeight}\r\n                                    // masterList={this.props.Login.masterData.searchedAudit || \r\n                                    //     this.props.Login.masterData.AuditTrail ? sortData(this.props.Login.masterData.AuditTrail,'descending','saudittraildate') : []}\r\n                                    // masterList={this.props.Login.masterData.searchedAudit ? this.props.Login.masterData.searchedAudit :\r\n                                    //   this.props.Login.masterData.AuditTrail ? sortData(this.props.Login.masterData.AuditTrail, 'descending', 'saudittraildate') : []}\r\n\r\n                                    masterList={this.props.Login.masterData.searchedAudit ||\r\n                                        (this.props.Login.masterData.AuditTrail || [])}\r\n                                    selectedMaster={[this.props.Login.masterData.SelectedAuditTrail]}\r\n                                    primaryKeyField=\"saudittraildate\"\r\n                                    getMasterDetail={this.props.getAuditTrailDetail}\r\n                                    inputParam={auditParam}\r\n                                    //additionalParam={['napprovalversioncode']}\r\n                                    mainField=\"sauditdate\"\r\n                                    selectedListName=\"SelectedAuditTrail\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    searchListName=\"searchedAudit\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={this.filterParam}\r\n                                    objectName=\"auditrail\"\r\n                                    listName=\"IDS_AUDITTRAIL\"\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    // needAccordianFilter={true}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    needFilter={true}\r\n                                    needAccordianFilter={false}\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_AUDITTRAIL\":\r\n                                                <AuditTrailFilter\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    filterModuleName={this.state.qualisModule}\r\n                                                    filterFormName={this.state.qualisForms}\r\n                                                    filterViewType={this.state.viewTypeAudit}\r\n                                                    filterUsers={this.state.users}\r\n                                                    filterUserRole={this.state.userRole}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    fromDate={fromDate}\r\n                                                    toDate={toDate}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n                                    // accordianfilterComponent={[\r\n                                    //     {\r\n                                    //         \"IDS_AUDITTRAIL\":\r\n                                    //             <ViewTypeFilter\r\n                                    //                 selectedRecord={this.state.selectedcombo || {}}\r\n                                    //                 filterViewType={this.state.viewTypeAudit}\r\n                                    //                 userInfo={this.props.Login.userInfo}\r\n                                    //                 onComboChange={this.onComboChange}\r\n                                    //             />\r\n                                    //     }\r\n                                    // ]}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.onReload()}\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                            {/* </Tooltip> */}\r\n                                        </ProductList>\r\n                                    }\r\n                                />\r\n                                {/* <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={400} customClassName=\"fixed_list_height\"> */}\r\n                                {/* <Col md={9}> */}\r\n                                <PerfectScrollbar>\r\n                                    <div ref={this.myRef}>\r\n                                        {this.props.Login.masterData.SelectedAuditTrail && this.props.Login.masterData.SelectedAuditTrail !== undefined ?\r\n                                            <ContentPanel className=\"panel-main-content\">\r\n                                                <Card className=\"border-0\">\r\n                                                    {/* <Card.Header className=\"padding-class\">\r\n                                                    <Card.Title className=\"product-title-main\">{this.props.Login.masterData.SelectedAuditTrail.sauditdate}\r\n                                                            <div className=\"d-flex product-category\" style={{ float: \"right\",marginRight:\"1rem\" }}>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADEXCEL\" })}\r\n                                                                //data-for=\"tooltip_list_wrap\"\r\n                                                                onClick={this.exportExcelNew}>\r\n                                                                <FontAwesomeIcon icon={faFileExcel} />\r\n                                                            </Nav.Link>\r\n                                                            </div>\r\n                                                    </Card.Title>\r\n                                            </Card.Header> */}\r\n\r\n                                                    <Card.Body className='form-static-wrap padding-class'>\r\n                                                        <DataGrid\r\n                                                            // gridWidth={\"57.5rem\"}\r\n                                                            gridHeight={this.state.gridHeight + 'px'}\r\n                                                            expandField=\"expanded\"\r\n                                                            userRoleControlRights={this.state.userRoleControlRights && this.state.userRoleControlRights}\r\n                                                            pageable={true}\r\n                                                            pageSizes={this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting))}\r\n                                                            scrollable={\"scrollable\"}\r\n                                                            primaryKeyField=\"nauditcode\"\r\n                                                            data={this.props.Login.masterData.AuditDetails || []}\r\n                                                            dataResult={this.state.dataResult}\r\n                                                            total={this.props.Login.masterData.AuditDetails && this.props.Login.masterData.AuditDetails.length || 0}\r\n                                                            //  dataResult={process(this.props.Login.masterData.AuditDetails || [],\r\n                                                            //  this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n                                                            //     && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1\r\n                                                            //   ? this.state.dataStateAll : this.state.dataState)}\r\n                                                            dataState={this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll\r\n                                                                : this.state.dataState}\r\n                                                            dataStateChange={this.dataStateChange}\r\n                                                            extractedColumnList={this.extractedColumnList || []}\r\n                                                            controlMap={this.state.controlMap}\r\n                                                            methodUrl=\"AuditTrail\"\r\n                                                            groupable={this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? true : false : false}\r\n                                                            //isActionRequired={false}\r\n                                                            isToolBarRequired={true}\r\n                                                            isAddRequired={false}\r\n                                                            isRefreshRequired={false}\r\n                                                            isDownloadPDFRequired={false}\r\n                                                            isDownloadExcelRequired={true}\r\n                                                            isExportExcelRequired={true}\r\n                                                            isIdsField=\"yes\"\r\n                                                            isActionRequired={true}\r\n                                                            actionIcons={[{\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                                                controlname: \"faEye\",\r\n                                                                objectName: \"AuditDetails\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(ViewAuditDetails) === -1,\r\n                                                                onClick: (viewdetails) => this.ViewAuditDetails(viewdetails)\r\n                                                            }]}\r\n                                                            exportExcelNew={this.exportExcelNew}\r\n                                                            onExpandChange={this.expandChange}\r\n                                                            hideDetailBand={true}\r\n                                                        />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n\r\n                                            : \"\"\r\n                                        }\r\n                                    </div>\r\n                                </PerfectScrollbar>\r\n                            </SplitterLayout>\r\n                            {/* </SplitterLayout> */}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={'IDS_MODIFIEDCOMMENTS'}\r\n                        hideSave={true}\r\n                        addComponent={\r\n                            <>\r\n\r\n                                <Card className='one' >\r\n                                    <Card.Body>\r\n                                        <SpecificationInfo\r\n                                            controlMap={this.state.controlMap}\r\n                                            auditInfoFields={auditInfoFields}\r\n                                            userRoleControlRights={this.state.userRoleControlRights}\r\n                                            selectedSpecification={this.props.Login.viewdetails}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            selectedNode={this.props.Login.masterData.selectedNode}\r\n                                            selectedRecord={this.state.filterData}\r\n                                            approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                            screenName=\"IDS_SPECIFICATIONINFO\"\r\n                                            deleteRecord={this.deleteRecord}\r\n                                            addSpecification={this.props.addSpecification}\r\n                                            filterData={this.state.filterData}\r\n                                            //completeSpecification={this.completeSpecification}\r\n                                            completeSpecification={this.validateTestGroupComplete}\r\n                                            approveSpecification={this.approveSpecification}\r\n                                            specificationReport={this.specificationReport}\r\n                                            retireSpec={this.retireSpec}\r\n                                        />\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                <br></br>\r\n\r\n                                <DataGrid\r\n                                    primaryKeyField=\"nauditcommentscode\"\r\n                                    detailedFieldList={this.feildsForGrid}\r\n                                    extractedColumnList={this.feildsForGrid}\r\n                                    dataResult={this.props.Login.masterData[\"AuditModifiedComments\"] && this.props.Login.masterData[\"AuditModifiedComments\"].length > 0\r\n                                        && process(this.props.Login.masterData[\"AuditModifiedComments\"],\r\n                                            (this.props.screenName === undefined || this.props.screenName === \"IDS_AUDITVIEWDETAILS\")\r\n                                                ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                                    dataState={(this.props.Login.screenName === undefined || this.props.Login.screenName === \"IDS_AUDITVIEWDETAILS\")\r\n                                        ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n                                    dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    pageable={true}\r\n                                    pageSizes={this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting))} scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    hideColumnFilter={false}\r\n                                    selectedId={0}\r\n                                >\r\n                                </DataGrid>\r\n                            </>\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n            </>\r\n\r\n        );\r\n\r\n    }\r\n    closeModal = () => {\r\n        let openModal = this.props.Login.openModal;\r\n        openModal = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    ViewAuditDetails = (viewdetails) => {\r\n        console.log('ewe', viewdetails)\r\n        let openModal = this.props.Login.openModal;\r\n        openModal = true;\r\n        let screenName = 'IDS_AUDITVIEWDETAILS'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, screenName }\r\n        }\r\n        this.props.ViewAuditDetails(this.props.Login.masterData, this.props.Login.userInfo, viewdetails, screenName);\r\n    };\r\n    expandChange = (event) => {\r\n        event.dataItem[event.target.props.expandField] = event.value;\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.AuditDetails || [], this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll :\r\n                this.state.dataState),\r\n            dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll\r\n                : this.state.dataState,\r\n        });\r\n    };\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n\r\n    onReload = () => {\r\n\r\n        // let dFromDate = this.props.Login.masterData.breadCrumbFrom ? (this.props.Login.masterData.breadCrumbFrom) : this.props.Login.masterData.FromDate;\r\n        // let dToDate = this.props.Login.masterData.breadCrumbTo ? (this.props.Login.masterData.breadCrumbTo) : this.props.Login.masterData.ToDate;\r\n        //var dTempFromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        //let dTempToDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        //let temp = dFromDate.indexOf('-');\r\n        // let fromMonth = (dTempFromDate.getMonth()+1);\r\n        // let toMonth = (dTempToDate.getMonth()+1);\r\n        // let fromMonth = String(new Date(dFromDate).getMonth() + 1)\r\n        // let toMonth = String(new Date(dToDate).getMonth() + 1)\r\n        // let fromYear = dFromDate.substring(0, 4);\r\n        // let toYear = dToDate.substring(0, 4);\r\n        // let ntempviewtypecode = 0;\r\n        let breadCrumbFrom = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\r\n        let breadCrumbTo = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\r\n        let breadCrumbModule = this.props.Login.masterData.breadCrumbModule\r\n        let breadCrumbForm = this.props.Login.masterData.breadCrumbForm\r\n        let breadCrumbUser = this.props.Login.masterData.breadCrumbUser\r\n        let breadCrumbRole = this.props.Login.masterData.breadCrumbRole\r\n        let breadCrumbViewType = this.props.Login.masterData.breadCrumbViewType\r\n            ? this.props.Login.masterData.breadCrumbViewType : this.props.Login.ViewType;\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            modulecode: breadCrumbModule ? breadCrumbModule.value : 0,\r\n            formcode: breadCrumbForm ? breadCrumbForm.value : 0,\r\n            usercode: breadCrumbUser ? breadCrumbUser.value : 0,\r\n            userrole: breadCrumbRole ? breadCrumbRole.value : 0,\r\n            viewtypecode: breadCrumbViewType ? breadCrumbViewType.value\r\n                : this.props.Login.masterData.ViewType.nauditactionfiltercode,\r\n\r\n            // viewtypecode : this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.nauditactionfiltercode :0,\r\n            // viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\r\n            userinfo: this.props.Login.userInfo,\r\n            postParamList: this.filterParam,\r\n        }\r\n\r\n        let masterData = {\r\n            ...this.props.Login.masterData, breadCrumbFrom, breadCrumbTo, breadCrumbModule,\r\n            breadCrumbForm, breadCrumbUser, breadCrumbRole,\r\n            //breadCrumbViewType : breadCrumbViewType ? breadCrumbViewType :\r\n            // this.props.Login.masterData.ViewType\r\n            breadCrumbViewType: breadCrumbViewType ? breadCrumbViewType\r\n                : {\r\n                    label: this.props.Login.masterData.ViewType.sauditactionfiltername,\r\n                    value: this.props.Login.masterData.ViewType.nauditactionfiltercode,\r\n                    item: this.props.Login.masterData.ViewType\r\n                }\r\n        }\r\n\r\n\r\n        let inputParam = { masterData, inputData, searchRef: this.searchRef, detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip }\r\n        this.props.getFilterAuditTrailRecords(inputParam)\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let breadCrumbModule = this.state.selectedRecord['nmodulecode']\r\n        let breadCrumbForm = this.state.selectedRecord['nformcode']\r\n        let breadCrumbUser = this.state.selectedRecord['nusercode']\r\n        let breadCrumbRole = this.state.selectedRecord['nuserrolecode']\r\n        let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode']\r\n\r\n        let masterData = {\r\n            ...this.props.Login.masterData, breadCrumbFrom, breadCrumbTo, breadCrumbModule, breadCrumbForm, breadCrumbUser, breadCrumbRole, breadCrumbViewType\r\n        }\r\n        let fromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        let toDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n            formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n            usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n            userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n            //viewtypecode: ntempviewtypecode,//this.state.selectedcombo[\"nviewtypecode\"] ? this.state.selectedcombo[\"nviewtypecode\"].value:0,\r\n            viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            postParamList: this.filterParam,\r\n        }\r\n\r\n        let inputParam = {\r\n            masterData, inputData, searchRef: this.searchRef,\r\n            detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\r\n        }\r\n        this.props.getFilterAuditTrailRecords(inputParam)\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"nmodulecode\" || fieldName === \"nformcode\"\r\n                || fieldName === \"nusercode\" || fieldName === \"nuserrolecode\" || fieldName === \"nauditactionfiltercode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n                // let qualisForms = this.state.qualisForms;\r\n                let qualisForms = this.state.wholeQualisForms;\r\n                if (fieldName === \"nmodulecode\") {\r\n\r\n                    selectedRecord[\"nformcode\"] = \"\";\r\n                    qualisForms = qualisForms.filter(form => form.item.nmodulecode === comboData.value);\r\n\r\n                } else if (selectedRecord.nmodulecode && selectedRecord.nmodulecode.value) {\r\n\r\n                    qualisForms = qualisForms.filter(form => form.item.nmodulecode === selectedRecord.nmodulecode.value);\r\n\r\n                }\r\n                this.setState({ selectedRecord, qualisForms });\r\n            }\r\n\r\n\r\n\r\n            /*if (fieldName === \"nauditactionfiltercode\") {\r\n \r\n                this.searchRef.current.value = \"\";\r\n \r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n                const dataStateAll = {\r\n                    skip: 0,\r\n                    take: 100\r\n                };\r\n \r\n                this.setState({ selectedcombo, dataStateAll });\r\n \r\n                let masterData = {\r\n                    ...this.props.Login.masterData, searchedAudit: undefined\r\n                }\r\n                let inputData = {\r\n                    fromDate: this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : this.props.Login.masterData.FromDate,\r\n                    toDate: this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : this.props.Login.masterData.ToDate,\r\n                    modulecode: this.state.selectedRecord[\"nmodulecode\"] ? this.state.selectedRecord[\"nmodulecode\"].value : 0,\r\n                    formcode: this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].value : 0,\r\n                    usercode: this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].value : 0,\r\n                    userrole: this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].value : 0,\r\n                    viewtypecode: this.state.selectedcombo[\"nauditactionfiltercode\"] ? this.state.selectedcombo[\"nauditactionfiltercode\"].value : 0,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    postParamList: this.filterParam,\r\n                }\r\n \r\n                let inputParam = { masterData, inputData }\r\n                this.props.getFilterAuditTrailRecords(inputParam)\r\n            }*/\r\n\r\n        }\r\n        else {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            if (fieldName === 'nmodulecode') {\r\n                selectedRecord[\"nformcode\"] = \"\";\r\n                const qualisForms = this.state.wholeQualisForms;\r\n                this.setState({ selectedRecord, qualisForms });\r\n            }\r\n            else\r\n                this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[dateName] = dateValue;\r\n\r\n\r\n        //this.setState({selectedRecord});\r\n\r\n        let viewTypeAuditList = this.state.viewTypeAudit;\r\n\r\n        let dFromDate = this.state.selectedRecord[\"fromdate\"] ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let dToDate = this.state.selectedRecord[\"todate\"] ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        // let ntempviewtypecode = 0;\r\n        let fromMonth = String(dFromDate.getMonth() + 1)\r\n        let toMonth = String(dToDate.getMonth() + 1)\r\n        let fromYear = String(dFromDate.getFullYear());\r\n        let toYear = String(dToDate.getFullYear());\r\n\r\n        if (fromYear !== toYear) {\r\n\r\n            selectedRecord[\"nauditactionfiltercode\"] =\r\n                viewTypeAuditList.length > 0 ? {\r\n                    \"value\": viewTypeAuditList[2].item.nauditactionfiltercode,\r\n                    \"label\": viewTypeAuditList[2].item.sauditactionfiltername\r\n                } : this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n\r\n            // ntempviewtypecode = viewTypeAuditList[2].item.nauditactionfiltercode;\r\n        }\r\n        else if (fromMonth !== toMonth) {\r\n            selectedRecord[\"nauditactionfiltercode\"] = viewTypeAuditList.length > 0 ? {\r\n                \"value\": viewTypeAuditList[1].item.nauditactionfiltercode,\r\n                \"label\": viewTypeAuditList[1].item.sauditactionfiltername\r\n            } : this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n\r\n\r\n            // ntempviewtypecode = viewTypeAuditList[1].item.nauditactionfiltercode;\r\n        }\r\n        else {\r\n            selectedRecord[\"nauditactionfiltercode\"] = viewTypeAuditList.length > 0 ? {\r\n                \"value\": viewTypeAuditList[0].item.nauditactionfiltercode,\r\n                \"label\": viewTypeAuditList[0].item.sauditactionfiltername\r\n            } : this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n\r\n            // ntempviewtypecode = viewTypeAuditList[0].item.nauditactionfiltercode;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    breadcrumbList = () => {\r\n        let breadCrumbArray = [];\r\n        // let fromDate = this.props.Login.masterData.breadCrumbFrom ? this.props.Login.masterData.breadCrumbFrom : this.props.Login.masterData.FromDate;\r\n        //    let toDate = this.props.Login.masterData.breadCrumbTo ? this.props.Login.masterData.breadCrumbTo : this.props.Login.masterData.ToDate;\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\r\n        let toDate = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\r\n\r\n        let obj = convertDateValuetoString(fromDate,\r\n            toDate,\r\n            this.props.Login.userInfo);\r\n        breadCrumbArray.push({\r\n            \"label\": \"IDS_FROM\",\r\n            \"value\": obj.breadCrumbFrom\r\n        }, {\r\n            \"label\": \"IDS_TO\",\r\n            \"value\": obj.breadCrumbto\r\n        });\r\n        this.props.Login.masterData.breadCrumbModule &&\r\n            breadCrumbArray.push(\r\n                {\r\n                    \"label\": \"IDS_MODULENAME\",\r\n                    \"value\": this.props.Login.masterData.breadCrumbModule.label\r\n                });\r\n        this.props.Login.masterData.breadCrumbForm &&\r\n            breadCrumbArray.push(\r\n                {\r\n                    \"label\": \"IDS_FORMNAME\",\r\n                    \"value\": this.props.Login.masterData.breadCrumbForm.label\r\n                });\r\n        this.props.Login.masterData.breadCrumbUser &&\r\n            breadCrumbArray.push(\r\n                {\r\n                    \"label\": \"IDS_USERNAME\",\r\n                    \"value\": this.props.Login.masterData.breadCrumbUser.label\r\n                });\r\n        this.props.Login.masterData.breadCrumbRole &&\r\n            breadCrumbArray.push(\r\n                {\r\n                    \"label\": \"IDS_USERROLE\",\r\n                    \"value\": this.props.Login.masterData.breadCrumbRole.label\r\n                });\r\n\r\n        breadCrumbArray.push(\r\n            {\r\n                \"label\": \"IDS_VIEWPERIOD\",\r\n                \"value\": this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.label :\r\n                    this.props.Login.masterData.ViewType ? this.props.Login.masterData.ViewType.sauditactionfiltername : \"\"\r\n            });\r\n\r\n\r\n        // this.state.selectedRecord[\"nformcode\"] &&\r\n        //  {\r\n        //     \"label\": \"IDS_FORMNAME\",\r\n        //     \"value\": this.state.selectedRecord[\"nformcode\"] ? this.state.selectedRecord[\"nformcode\"].label : \"\"\r\n        // },\r\n        // this.state.selectedRecord[\"nusercode\"] &&\r\n        // {\r\n        //     \"label\": \"IDS_USERNAME\",\r\n        //     \"value\": this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"].label : \"\"\r\n        // },\r\n        // this.state.selectedRecord[\"nuserrolecode\"] &&\r\n        // {\r\n        //     \"label\": \"IDS_USERROLE\",\r\n        //     \"value\": this.state.selectedRecord[\"nuserrolecode\"] ? this.state.selectedRecord[\"nuserrolecode\"].label : \"\"\r\n\r\n        // }\r\n        return breadCrumbArray;\r\n    };\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n\r\n\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let updateState = false;\r\n        let { selectedRecord, qualisModule, qualisForms, wholeQualisForms, users, userRole,\r\n            viewTypeAudit, dataStateAll, dataState, dataResult, skip, take } = this.state\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.masterData.QualisModule !== previousProps.Login.masterData.QualisModule\r\n            || this.props.Login.masterData.QualisForms !== previousProps.Login.masterData.QualisForms\r\n            || this.props.Login.masterData.Users !== previousProps.Login.masterData.Users\r\n            || this.props.Login.masterData.UserRole !== previousProps.Login.masterData.UserRole\r\n        ) {\r\n            updateState = true;\r\n            const qualisModuleMap = constructOptionList(this.props.Login.masterData.QualisModule || [], \"nmodulecode\",\r\n                \"smodulename\", \"nsorter\", \"ascending\", false);\r\n            //const allQualisModuleList = qualisModule.get(\"OptionList\");\r\n            const qualisModuleList = qualisModuleMap.get(\"OptionList\");\r\n\r\n            const qualisFormsMap = constructOptionList(this.props.Login.masterData.QualisForms || [], \"nformcode\",\r\n                \"sformname\", \"nsorter\", \"ascending\", false);\r\n            // const allQualisFormsList = qualisForms.get(\"OptionList\");\r\n            let qualisFormsList = []\r\n            if (selectedRecord && selectedRecord.nmodulecode && selectedRecord.nmodulecode.value) {\r\n                qualisFormsList = qualisFormsMap.get(\"OptionList\").filter(form => form.item.nmodulecode === selectedRecord.nmodulecode.value);\r\n            } else {\r\n                qualisFormsList = qualisFormsMap.get(\"OptionList\");\r\n            }\r\n\r\n            const usersMap = constructOptionList(this.props.Login.masterData.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, undefined);\r\n            //const allUsersList = users.get(\"OptionList\");\r\n            const usersList = usersMap.get(\"OptionList\");\r\n\r\n            const userRoleMap = constructOptionList(this.props.Login.masterData.UserRole || [], \"nuserrolecode\",\r\n                \"suserrolename\", undefined, undefined, undefined);\r\n            //const allUserRoleList = userRole.get(\"OptionList\");\r\n            const userRoleList = userRoleMap.get(\"OptionList\");\r\n\r\n            const viewTypeAuditMap = constructOptionList(this.props.Login.masterData.ViewTypeAudit || [], \"nauditactionfiltercode\",\r\n                \"sauditactionfiltername\", \"nsorter\", \"ascending\", false);\r\n            const viewTypeAuditList = viewTypeAuditMap.get(\"OptionList\");\r\n\r\n\r\n            qualisModule = qualisModuleList\r\n            qualisForms = qualisFormsList\r\n            wholeQualisForms = qualisFormsList\r\n            users = usersList\r\n            userRole = userRoleList\r\n            viewTypeAudit = viewTypeAuditList\r\n            selectedRecord = {\r\n                nauditactionfiltercode: viewTypeAuditList.length > 0 ? {\r\n                    \"value\": viewTypeAuditList[0].item.nauditactionfiltercode,\r\n                    \"label\": viewTypeAuditList[0].item.sauditactionfiltername\r\n                } : this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n            }\r\n\r\n        }\r\n\r\n        if (this.props.Login.resetDataGridPage && this.props.Login.resetDataGridPage !== previousProps.Login.resetDataGridPage) {\r\n            if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n\r\n                dataStateAll.skip = 0\r\n                updateState = true;\r\n            }\r\n            else {\r\n\r\n                dataState.skip = 0\r\n                updateState = true;\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            updateState = true;\r\n            if (selectedRecord && selectedRecord.nmodulecode && selectedRecord.nmodulecode.value) {\r\n                qualisForms = qualisForms.filter(form => form.item.nmodulecode === selectedRecord.nmodulecode.value);\r\n            } else {\r\n                qualisForms = wholeQualisForms;\r\n            }\r\n            if (this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n\r\n                dataStateAll = { skip: 0, take: dataStateAll.take, group: dataStateAll.group }\r\n                updateState = true;\r\n            }\r\n            else {\r\n\r\n                dataState = { skip: 0, take: dataState.take, group: dataState.group }\r\n                updateState = true;\r\n            }\r\n            const auditdate = (this.props.Login.masterData.AuditDetails && this.props.Login.masterData.AuditDetails.slice(dataState.skip, dataState.take + dataState.skip)) || []\r\n            dataResult = process(auditdate || [], dataState)\r\n\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            updateState = true;\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, qualisModule, qualisForms, wholeQualisForms, users, userRole,\r\n                viewTypeAudit, dataStateAll, dataState, dataResult, skip, take\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.myRef.current.offsetParent.clientHeight !== this.state.gridHeight) {\r\n            this.setState({\r\n                gridHeight: this.myRef.current.offsetParent.clientHeight\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, filterTransactionList,\r\n    updateStore, filterColumnData, getAuditTrailDetail, getFilterAuditTrailRecords, getFormNameByModule, getExportExcel, ViewAuditDetails\r\n})(injectIntl(AuditTrail));"]},"metadata":{},"sourceType":"module"}