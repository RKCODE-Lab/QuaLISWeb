{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\SimpleGridWithSelection.jsx\";\nimport React from 'react';\nimport { AtTableWrap } from '../client-group.styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Grid, GridColumn as Column, GridNoRecords } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query'; // import ReactTooltip from 'react-tooltip';\n\nimport { Card, Col, FormGroup, FormLabel, Row } from 'react-bootstrap';\nimport { FormControlStatic } from './data-grid.styles';\nimport { parse } from '@fortawesome/fontawesome-svg-core';\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\n\nclass SimpleGridWithSelection extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.expandChange = event => {\n      const isExpanded = true; //     event.dataItem.expanded === undefined ?\n      //         event.dataItem.aggregates : event.dataItem.expanded;\n      // if (this.props.hasSubChild && event.value === true) {\n\n      event.dataItem.expanded = true;\n      this.props.childHandleExpandChange(event, this.props.dataState); // }\n      // else {\n      //     event.dataItem.expanded = !isExpanded;\n\n      this.setState({\n        isExpanded\n      }); // }\n    };\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }, this.props.hasSubChild ? /*#__PURE__*/React.createElement(SingleSelectionDataGrid, {\n        hasSubChild: this.props.hasSubChild,\n        subChildDataResult: this.props.subChildDataResult && this.props.subChildDataResult || [],\n        extractedColumnList: this.props.subChildColumnList,\n        subChildSelectionChange: this.props.subChildSelectionChange,\n        subChildList: this.props.subChildList[props.dataItem[this.props.subChildMappingField]] || [],\n        subChildHeaderSelectionChange: this.props.subChildHeaderSelectionChange,\n        subChildSelectAll: this.props.subChildSelectAll,\n        abc: props.dataItem.ntransactionsamplecode,\n        selectedsubcild: this.props.selectedsubcild,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }\n      }) : \"\"), \" \");\n    };\n\n    this.subChildColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    } // { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\n    //  { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\n    ];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid //    data={this.props.childDataResult}\n    , {\n      data: process(this.props.childList, {\n        skip: 0,\n        take: this.props.childList.length\n      }),\n      selectedField: \"selected\" // expandField={this.props.expandField ? this.props.expandField : false}\n      ,\n      detail: this.props.hideDetailBand ? false : this.detailBand // onExpandChange={this.expandChange}\n      ,\n      onSelectionChange: this.props.childSelectionChange,\n      onHeaderSelectionChange: this.props.headerSelectionChange,\n      scrollable: this.props.scrollable,\n      selectable: {\n        enabled: true,\n        drag: false,\n        cell: false,\n        mode: 'multiple'\n      },\n      onRowClick: this.props.rowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Column, {\n      field: \"selected\",\n      width: \"50px\",\n      title: this.props.title //   headerSelectionValue={this.props.selectAll}\n      ,\n      headerSelectionValue: Object.values(this.props.childList).every(dd => {\n        return dd.selected === true;\n      }) ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(Column, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        //data-for=\"tooltip-samplegrid-wrap\"\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 33\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 56\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default injectIntl(SimpleGridWithSelection);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/SimpleGridWithSelection.jsx"],"names":["React","AtTableWrap","FormattedMessage","injectIntl","Grid","GridColumn","Column","GridNoRecords","process","Card","Col","FormGroup","FormLabel","Row","FormControlStatic","parse","SingleSelectionDataGrid","SimpleGridWithSelection","Component","constructor","props","expandChange","event","isExpanded","dataItem","expanded","childHandleExpandChange","dataState","setState","detailBand","hasSubChild","subChildDataResult","subChildColumnList","subChildSelectionChange","subChildList","subChildMappingField","subChildHeaderSelectionChange","subChildSelectAll","ntransactionsamplecode","selectedsubcild","render","childList","skip","take","length","hideDetailBand","childSelectionChange","headerSelectionChange","scrollable","enabled","drag","cell","mode","rowClick","title","Object","values","every","dd","selected","extractedColumnList","map","item","index","intl","formatMessage","id","idsName","row","dataField","isIdsField"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { AtTableWrap } from '../client-group.styles';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Grid, GridColumn as Column, GridNoRecords } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { Card, Col, FormGroup, FormLabel, Row } from 'react-bootstrap';\r\nimport { FormControlStatic } from './data-grid.styles';\r\nimport { parse } from '@fortawesome/fontawesome-svg-core';\r\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\r\n\r\nclass SimpleGridWithSelection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.subChildColumnList = [{ \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ssamplearno\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            // { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            //  { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n    }\r\n    expandChange = (event) => {\r\n         const isExpanded =true\r\n        //     event.dataItem.expanded === undefined ?\r\n        //         event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        // if (this.props.hasSubChild && event.value === true) {\r\n            event.dataItem.expanded = true;\r\n            this.props.childHandleExpandChange(event, this.props.dataState)\r\n        // }\r\n        // else {\r\n        //     event.dataItem.expanded = !isExpanded;\r\n             this.setState({ isExpanded });\r\n        // }\r\n    }\r\n    detailBand = (props) => {\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    { this.props.hasSubChild ?\r\n                            <SingleSelectionDataGrid \r\n                                hasSubChild={this.props.hasSubChild}\r\n                                subChildDataResult={this.props.subChildDataResult && this.props.subChildDataResult || []}\r\n                                extractedColumnList={this.props.subChildColumnList}\r\n                                subChildSelectionChange={this.props.subChildSelectionChange}\r\n                                subChildList={this.props.subChildList[(props.dataItem[this.props.subChildMappingField])] || []}\r\n                                subChildHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            subChildSelectAll={this.props.subChildSelectAll}\r\n                            abc={props.dataItem.ntransactionsamplecode}\r\n                            selectedsubcild={this.props.selectedsubcild}\r\n\r\n                            />\r\n                            \r\n                           :\"\" }\r\n                </Col> </Row>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <AtTableWrap className=\"at-list-table\">\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-samplegrid-wrap\" /> */}\r\n                {/* <Tooltip openDelay={100} position=\"auto\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                <Grid\r\n                //    data={this.props.childDataResult}\r\n                    data={process(this.props.childList, { skip: 0, take: this.props.childList.length })}\r\n                    selectedField=\"selected\"\r\n                   // expandField={this.props.expandField ? this.props.expandField : false}\r\n                    detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                   // onExpandChange={this.expandChange}\r\n                    onSelectionChange={this.props.childSelectionChange}\r\n                    onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                    scrollable={this.props.scrollable}\r\n                    selectable={{\r\n                        enabled: true,\r\n                        drag: false,\r\n                        cell: false,\r\n                        mode: 'multiple'\r\n                      }} \r\n                     onRowClick={this.props.rowClick}>\r\n                    <Column\r\n                        field=\"selected\"\r\n                        width=\"50px\"\r\n                        title={this.props.title}\r\n                        //   headerSelectionValue={this.props.selectAll}\r\n                        headerSelectionValue={Object.values(this.props.childList).every((dd) => {\r\n                            return dd.selected === true\r\n                        }) ? true : false\r\n                        }\r\n                    />\r\n                    {/* <Column type='checkbox' width='50'></Column> */}\r\n\r\n                    {this.props.extractedColumnList.map((item, index) =>\r\n                        <Column key={index}\r\n                            title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                            cell={(row) => (\r\n                                <td \r\n                                //data-for=\"tooltip-samplegrid-wrap\"\r\n                                    data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                    {/* title={row[\"dataItem\"][item.dataField]}> */}\r\n                                    {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                        : row[\"dataItem\"][item.dataField]}\r\n                                </td>)}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                {/* </Tooltip>           */}\r\n            </AtTableWrap>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(SimpleGridWithSelection);"]},"metadata":{},"sourceType":"module"}