{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes'; //import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getPlasmaMasterFileComboService(plasmaparam) {\n  return function (dispatch) {\n    if (plasmaparam.operation === \"create\" || plasmaparam.operation === \"update\") {\n      const manufService = rsapi.post(\"plasmamasterfile/getManufacturer\", {\n        userinfo: plasmaparam.userInfo\n      });\n      let urlArray = [];\n      let selectedId = null;\n\n      if (plasmaparam.operation === \"create\") {\n        urlArray = [manufService];\n      } else {\n        const plasmaById = rsapi.post(\"plasmamasterfile/getActivePlasmaMasterFileById\", {\n          [plasmaparam.primaryKeyField]: plasmaparam.primaryKeyValue,\n          \"userinfo\": plasmaparam.userInfo\n        });\n        urlArray = [manufService, plasmaById];\n        selectedId = plasmaparam.primaryKeyValue;\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let manufacturer = [];\n        let selectedRecord = {};\n\n        if (plasmaparam.operation === \"update\") {\n          selectedRecord = response[1].data;\n          manufacturer.push({\n            \"value\": response[1].data[\"nmanufcode\"],\n            \"label\": response[1].data[\"smanufname\"]\n          });\n          selectedRecord[\"nmanufcode\"] = manufacturer[0];\n        } else {\n          selectedRecord[\"ntransactionstatus\"] = 1;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            manufList: response[0].data || [],\n            selectedRecord,\n            openModal: true,\n            operation: plasmaparam.operation,\n            screenName: plasmaparam.screenName,\n            ncontrolCode: plasmaparam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } // else {\n    //     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\n    // }\n\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/PlasmaMasterFileAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","intl","getPlasmaMasterFileComboService","plasmaparam","dispatch","operation","manufService","post","userinfo","userInfo","urlArray","selectedId","plasmaById","primaryKeyField","primaryKeyValue","all","then","response","manufacturer","selectedRecord","data","push","type","payload","manufList","openModal","screenName","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\n//import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function getPlasmaMasterFileComboService(plasmaparam) {\r\n    return function (dispatch) {\r\n\r\n        if (plasmaparam.operation === \"create\" || plasmaparam.operation === \"update\") {\r\n\r\n            const manufService = rsapi.post(\"plasmamasterfile/getManufacturer\", { userinfo: plasmaparam.userInfo });\r\n\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            if (plasmaparam.operation === \"create\") {\r\n\r\n                urlArray = [manufService];\r\n            }\r\n            else {\r\n                const plasmaById = rsapi.post(\"plasmamasterfile/getActivePlasmaMasterFileById\", { [plasmaparam.primaryKeyField]: plasmaparam.primaryKeyValue, \"userinfo\": plasmaparam.userInfo });\r\n\r\n                urlArray = [manufService, plasmaById];\r\n                selectedId = plasmaparam.primaryKeyValue;\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n\r\n                    let manufacturer = [];\r\n\r\n                    let selectedRecord = {};\r\n\r\n                    if (plasmaparam.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n\r\n                        manufacturer.push({ \"value\": response[1].data[\"nmanufcode\"], \"label\": response[1].data[\"smanufname\"] });\r\n\r\n\r\n                        selectedRecord[\"nmanufcode\"] = manufacturer[0];\r\n\r\n\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"ntransactionstatus\"] = 1;\r\n\r\n\r\n                    }\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            manufList: response[0].data || [],\r\n\r\n                            selectedRecord, openModal: true,\r\n                            operation: plasmaparam.operation, screenName: plasmaparam.screenName,\r\n                            ncontrolCode: plasmaparam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        // else {\r\n        //     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\r\n        // }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}