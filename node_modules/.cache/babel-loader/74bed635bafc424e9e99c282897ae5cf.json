{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\MaterialInventory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Nav, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faPencilAlt, faCalendar, faEye, faRocket, faBarcode } from '@fortawesome/free-solid-svg-icons'; //import { faTrashAlt, faPencilAlt, faCalendar, faEye } from '@fortawesome/free-solid-svg-icons';\n//import { faTrashAlt, faPencilAlt, faCalendar, faEye, faRocket } from '@fortawesome/free-solid-svg-icons';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ModalShow from '../../components/ModalShow.jsx';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign, getControlMap, constructOptionList, rearrangeDateFormatDateOnly, sortData, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, comboChild, convertDateTimetoStringDBFormat, Lims_JSON_stringify, replaceBackSlash } from '../../components/CommonScript';\nimport { callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment, initialcombochangeMaterialInvget, getMaterialInventoryByID, getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange, getSiteonchange } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, attachmentType, designProperties } from '../../components/Enumeration';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component'; // import ReactTooltip from 'react-tooltip';\n\nimport MaterialFilter from './MaterialFilter';\nimport { Affix } from 'rsuite';\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\nimport AddMaterialFile from './AddMaterialFile';\nimport InvenotryTransaction from './InvenotryTransaction';\nimport MaterialInvFileTab from './MaterialInvFileTab';\nimport { MediaLabel, ProductList } from '../product/product.styled';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport ResultEntryTransactionTab from './ResultEntryTransactionTab';\nimport DynamicSlideoutMaterial from './DynamicSlideoutMaterial';\nimport MaterialInventoryHistory from './MaterialInventoryHistory';\nimport AddPrinter from '../registration/AddPrinter'; //import { ReactComponent as Reject } from '../../assets/image/reject.svg';\n\nimport { ReactComponent as RetireaMaterialInventory } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/RetireaMaterialInventory.svg\";\nimport BarcodeGeneratorComponent from '../../components/BarcodeGeneratorComponent';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MaterialInventory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.state\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.quantityTransaction = param => {\n      //if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode === transactionStatus.RELEASED) {\n      let ncontrolCode = this.props.Login.ncontrolCode;\n      let openModal = this.props.Login.openModal;\n      openModal = true;\n      ncontrolCode = param;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal\n        }\n      };\n      this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode); // }\n      // else {\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRELEASEDINVENTORY\" }));\n      // }\n    };\n\n    this.viewQuantityTrans = viewQuantityTransdetails => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      let ModaTitle = this.props.Login.ModaTitle;\n      showModalPopup = true;\n      ModaTitle = 'IDS_QUANTITYTRANSACTION';\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup,\n          ModaTitle,\n          viewQuantityTransdetails\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.accordianDesign = (Template, selectedmasterlistmain1) => {\n      let selectedmasterlistmain = [];\n      selectedmasterlistmain.push(selectedmasterlistmain1);\n      let designaccordian = [];\n      Template.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.inputtype === 'combo') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 803,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 804,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 805,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 805,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 806,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label]['label'] : \"-\"))));\n              }\n            } else if (component.inputtype === 'date') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 818,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 819,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 821,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? rearrangeDateFormatDateOnly(this.props.Login.userInfo, selectedmasterlistmain[0][component.label]) // selectedmasterlistmain[0][component.label]\n                : \"-\"))));\n              }\n            } else if (component.inputtype === 'toggle') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 837,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 838,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 839,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 839,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 840,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] && selectedmasterlistmain[0][component.label] === transactionStatus.YES ? 'Yes' : 'No'))));\n              }\n            } else {\n              if (component.label !== undefined) {\n                if (!component.needAccordian) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 854,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 855,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 857,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [component.label],\n                    message: [component.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 857,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 858,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"))));\n                }\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.inputtype === 'combo') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 872,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 873,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 874,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 874,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 875,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'date') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 887,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 888,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 889,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 889,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 890,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'toggle') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 902,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 903,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 904,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 904,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 905,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] && selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ? 'Yes' : 'No'))));\n                }\n              } else {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 918,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 919,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 920,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 920,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 921,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              }\n            });\n          });\n        });\n      });\n      return designaccordian;\n    };\n\n    this.onComboChangeopendate = (comboData, control) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[control] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangedynamic = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        //const comboDatamain = this.props.Login.templateData.comboData\n        if (control.valuemember && control.nquerybuildertablecode) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            \"source\": control.source\n          };\n        }\n\n        let comboName = customName || control.label;\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.inputtype === 'date') {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[`tz${control.label}`] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? control.label !== 'Section' ? control.parent && control.parent === true : true : control.parent && control.parent === true) {\n          let data = [];\n          const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata;\n          Layout.map(row => {\n            row.children.map(column => {\n              column.children.map(component => {\n                if (component.hasOwnProperty('child')) {\n                  component.child.map(c => {\n                    if (comboData === null) {\n                      if (c.label === control.label) {\n                        if (control.label === 'Section') {\n                          if (this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.YES) delete selectedRecord[\"Available Quantity/Unit\"]; //  delete selectedRecord[\"Transaction Type\"]  \n                          // delete selectedRecord[\"Inventory Transaction Type\"]  \n                        } // delete comboDatamain[\"Transaction Type\"] \n                        //  delete comboDatamain[\"Site\"] \n                        //  delete comboDatamain[control.label] \n\n\n                        delete selectedRecord[control.label]; //delete selectedRecord[component.label]  \n                      }\n                    }\n                  });\n                }\n\n                if (component.inputtype === 'combo') {\n                  data.push(component);\n                }\n\n                component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                  if (componentrow.inputtype === 'combo') {\n                    data.push(componentrow);\n                  }\n                });\n              });\n            });\n          });\n          const comboComponents = data;\n\n          if (comboData) {\n            let parentcolumnlist = [];\n            comboComponents.map(columnList => {\n              if (columnList.hasOwnProperty('child')) {\n                if (control.label === columnList.label) parentcolumnlist.push(columnList);\n              }\n            });\n            let childColumnList = {};\n            parentcolumnlist.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              if (control.label === columnList.label) childColumnList = val.childColumnList;\n            });\n            const inputParem = {\n              child: control.child,\n              source: control.source,\n              primarykeyField: control.valuemember,\n              value: comboData.value,\n              item: comboData.item\n            }; //       if (control.label === 'Site') {\n            //         // comboData\n            //         this.props.getSiteonchange(comboData, this.props.Login.masterData,\n            //             this.props.Login.userInfo, selectedRecord, this.props.Login.templateData, true)\n            //     }\n            //    else \n\n            if (control.label === 'Section') {\n              // comboData\n              this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord, this.props.Login.templateData, true);\n            } else {\n              this.props.getMaterialChildValues(inputParem, this.props.Login.userInfo, selectedRecord, parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, control.label, childColumnList[control.label][0].label, this.props.Login.masterData);\n            }\n          } else {\n            this.setState({\n              selectedRecord //    ,disablefields:true\n\n            });\n          }\n        } else {\n          if (control.label === 'Transaction Type' // || control.label === 'IDS_SECTION'\n          ) {\n            this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord, this.props.Login.templateData);\n          } else {\n            selectedRecord[control.label] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          }\n        }\n      } else {\n        if (control.label === 'Storage Location') {\n          delete selectedRecord[control.label];\n        } else if (control.label === 'Supplier') {\n          delete selectedRecord[control.label];\n        } else if (control.label === 'Manufacturer') {\n          delete selectedRecord[control.label];\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.barcodePrintMaterialInventory = () => {\n      if (this.props.Login.masterData.SelectedMaterialInventory) {\n        if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\n          //let materialName = this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'] && this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'];\n          const generateBarcodeValue = this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'];\n          const additionDesignToPrint = generateBarcodeValue + \"<br>\" + generateBarcodeValue + \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + generateBarcodeValue;\n          const selectedRecord = {\n            generateBarcodeValue,\n            additionDesignToPrint\n          };\n          let showBarcode = true;\n          let openModal = true;\n          let screenname = 'IDS_PRINTBARCODE';\n          let operation = '';\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openModal,\n              showBarcode,\n              screenname,\n              selectedRecord,\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMATERIALINVENTORY\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALINVENTORY\"\n        }));\n      }\n    };\n\n    this.viewMaterialInventoryDetails = () => {\n      // console.log('this.state.SelectedMaterialInventory :', this.state.SelectedMaterialInventory)\n      // console.log('tthis.props.Login.showModalPopup :', this.props.Login.masterData.SelectedMaterialInventory)\n      if (this.props.Login.masterData.SelectedMaterialInventory) {\n        if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\n          // let showModalPopup = this.props.Login.showModalPopup;\n          let showInventoryDetails = this.state.showInventoryDetails; //showModalPopup = true;\n\n          if (showInventoryDetails === undefined) {\n            this.setState({\n              showInventoryDetails: true\n            });\n          }\n\n          if (showInventoryDetails) {\n            this.setState({\n              showInventoryDetails: false\n            });\n          } else {\n            this.setState({\n              showInventoryDetails: true\n            });\n          } // ModaTitle = 'IDS_MATERIALINVENTORYDETAILS'\n          // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //    // data: { showModalPopup, ModaTitle }\n          //    data: { showInventoryDetails, ModaTitle }\n          // }\n          // this.props.updateStore(updateInfo);\n\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMATERIALINVENTORY\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALINVENTORY\"\n        }));\n      }\n    };\n\n    this.closeModalShow = () => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      showModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.onSaveMaterialFile = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let testFileArray = [];\n      let testFile = {\n        nmaterialconfigcode: this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\n        nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\n        nmaterialinventoryfilecode: selectedRecord.nmaterialinventoryfilecode ? selectedRecord.nmaterialinventoryfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode,\n        ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n      };\n      testFile['sdefaultstatus'] = {};\n      testFile['sdefaultstatus'] = testFile['ndefaultstatus'] === 3 ? 'Yes' : 'No';\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, testFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n            tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            tempData[\"dcreateddate\"] = this.props.Login.dcreateddate && convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo);\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            testFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          testFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n          testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n          testFile[\"nlinkcode\"] = transactionStatus.NA;\n          testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          testFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          testFile[\"dcreateddate\"] = this.props.Login.dcreateddate && convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo);\n          testFileArray.push(testFile);\n        }\n      } else {\n        testFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename.trim()), false);\n        testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"), false);\n        testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        testFile[\"slinkname\"] = selectedRecord['nlinkcode'].label && selectedRecord['nlinkcode'].label;\n        testFile[\"dcreateddate\"] = this.props.Login.dcreateddate && convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo);\n        testFile[\"ssystemfilename\"] = \"\";\n        testFile[\"nfilesize\"] = 0;\n        testFileArray.push(testFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"materialinventoryfile\", JSON.stringify(testFileArray[0])); //let selectedId = null;\n\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"MaterialInventory\",\n          selectedObject: \"SelectedMaterialInventory\",\n          primaryKeyField: \"nmaterialinventorycode\"\n        }; //selectedId = selectedRecord[\"nmaterialinventoryfilecode\"];\n      }\n\n      let inputParam;\n\n      if (this.props.Login.operation === 'create') {\n        inputParam = {\n          // inputData: { userinfo: this.props.Login.userInfo },\n          inputData: {\n            \"userinfo\": { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\n              //ALPD-1628(while saving the file and link,audit trail is not captured the respective language)\n              slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n            }\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"create\",\n          classUrl: \"materialinventory\",\n          methodUrl: \"MaterialInventoryFile\",\n          postParam,\n          searchRef: this.searchRef,\n          isChild: true\n        };\n      } else {\n        inputParam = {\n          // inputData: { userinfo: this.props.Login.userInfo },\n          inputData: {\n            \"userinfo\": { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\n              //ALPD-1628(while saving the file and link,audit trail is not captured the respective language)\n              slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n            }\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"update\",\n          classUrl: \"materialinventory\",\n          methodUrl: \"MaterialInventoryFile\",\n          postParam\n        };\n      }\n\n      return inputParam;\n    };\n\n    this.dynamicmandatoryFeilds = Template => {\n      console.log('mandatory', Template);\n      let mandatoryFeildsMaterial = [];\n      let slanguagetypecode = this.props.Login.userInfo.slanguagetypecode;\n      let bool = false; //ALPD-4842 material Inventory-->while add the Quantity transaction, section not showing\n\n      let sectionneed = this.props.Login.masterData.SelectedMaterialCategory && this.props.Login.masterData.SelectedMaterialCategory.needSectionwise || -1;\n      Template.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.mandatory) {\n              if (component.inputtype === 'combo') {\n                if (component.label === 'Section') {\n                  if (sectionneed === transactionStatus.YES) {\n                    mandatoryFeildsMaterial.push({\n                      // \"idsName\": component.label, \"dataField\": component.label,\n                      \"idsName\": component.displayname[slanguagetypecode],\n                      \"dataField\": component.label,\n                      \"mandatoryLabel\": \"IDS_SELECT\",\n                      \"controlType\": \"selectbox\"\n                    });\n                  }\n                } else {\n                  mandatoryFeildsMaterial.push({\n                    // \"idsName\": component.label, \"dataField\": component.label,\n                    \"idsName\": component.displayname[slanguagetypecode],\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": \"IDS_SELECT\",\n                    \"controlType\": \"selectbox\"\n                  });\n                }\n              } else {\n                mandatoryFeildsMaterial.push({\n                  // \"idsName\": component.label, \"dataField\": component.label,\n                  \"idsName\": component.displayname[slanguagetypecode],\n                  \"dataField\": component.label,\n                  \"mandatoryLabel\": \"IDS_ENTER\",\n                  \"controlType\": \"selectbox\"\n                });\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.mandatory) {\n                if (componentrow.inputtype === 'combo') {\n                  mandatoryFeildsMaterial.push({\n                    // \"idsName\": componentrow.label, \"dataField\": componentrow.label,\n                    \"idsName\": componentrow.displayname[slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": \"IDS_SELECT\",\n                    \"controlType\": \"selectbox\"\n                  });\n                } else {\n                  mandatoryFeildsMaterial.push({\n                    // \"idsName\": componentrow.label, \"dataField\": componentrow.label,\n                    \"idsName\": componentrow.displayname[slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"selectbox\"\n                  });\n                }\n              }\n            });\n          });\n        });\n      });\n\n      if (this.state.selectedRecord['Transaction Type']) {\n        // if ( (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\"&&\n        // this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise!== transactionStatus.YES)\n        //  ? this.props.Login.isSectionneed !== transactionStatus.YES :\n        //  this.state.selectedRecord['Transaction Type'].value === 2 ? false : true) {\n        if (this.state.selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED || this.state.selectedRecord['Transaction Type'].value === transactionStatus.REJECT ? true : false) {\n          bool = true;\n          mandatoryFeildsMaterial.map((temp, i) => {\n            if (temp.dataField === 'Section' || temp.dataField === 'Site') {\n              delete mandatoryFeildsMaterial[i];\n            }\n          });\n        }\n      }\n\n      if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\" ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.NO ? this.props.Login.isSectionneed === transactionStatus.YES ? false : true : this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.NO && bool !== true : this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.NO) {\n        mandatoryFeildsMaterial.map((temp, i) => {\n          if (temp.dataField === 'Section') {\n            delete mandatoryFeildsMaterial[i];\n          }\n        });\n      } //console.log('mandatoryFeildsMaterial', mandatoryFeildsMaterial)\n\n\n      return mandatoryFeildsMaterial;\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      {\n        // let dataresultarr = []\n        //let IDS_TRANSACTIONDATE;\n        // this.props.Login.masterData[\"MaterialInventoryTrans\"] &&\n        //     this.props.Login.masterData[\"MaterialInventoryTrans\"].map((temp, index) => {\n        //         // temp.jsondata['IDS_TRANSACTIONDATE'] =\n        //         // this.props.Login.masterData[\"MaterialInventoryTrans\"][index].jsondata['IDS_TRANSACTIONDATE'] =\n        //         //     rearrangeDateFormatDateOnly(\n        //         //         this.props.Login.userInfo,\n        //         //         temp.jsondata['IDS_TRANSACTIONDATE']\n        //         //     )\n        //         //     temp.jsondata['IDS_TRANSACTIONDATE']=\n        //         //     rearrangeDateFormatDateOnly(\n        //         //         this.props.Login.userInfo,\n        //         //         temp.jsondata['IDS_TRANSACTIONDATE']\n        //         //     )\n        //         Object.entries(temp.jsondata).map(item => {\n        //             if (item[1] && item[1].hasOwnProperty('label')) {\n        //                 let key = item[0]\n        //                 let label = item[1].label\n        //                 let comboObject = { [key]: label }\n        //                 //x=y\n        //                 temp.jsondata = { ...temp.jsondata, ...comboObject }\n        //                 // dataresultarr.push({[x]:y})     \n        //             }\n        //         })\n        //         // for (let [key, value] of Object.entries(temp.jsondata)) {\n        //         //     if(key.hasOwnProperty('label'))\n        //         //         {\n        //         //             let  temp2=[key, value]\n        //         //             //x=y\n        //         //             temp.jsondata={...temp.jsondata,...temp2}\n        //         //            // dataresultarr.push({[x]:y})     \n        //         //         }\n        //         // }\n        //         return dataresultarr.push(temp.jsondata)\n        //     })\n        tabMap.set(\"IDS_INVENTORYTRANSACTION\", /*#__PURE__*/React.createElement(InvenotryTransaction, {\n          Template: this.props.Login.masterData.QuantityTransactionTemplate && this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          dataResult: process(sortData(this.props.Login.masterData[\"MaterialInventoryTrans\"], \"descending\", \"nmaterialinventtranscode\"), this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: event => this.setState({\n            sectionDataState: event.dataState\n          }),\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          getTestDetails: this.props.getTestDetails,\n          SelectedMaterialInventory: this.props.Login.masterData.SelectedMaterialInventory,\n          quantityTransaction: this.quantityTransaction // dataState={{ skip: 0, take: 10 }}\n          ,\n          deleteRecord: this.deleteRecordmain,\n          QuantityTransactionForGrid: this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction && this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null && this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['QuantityTransactionForGrid']),\n          QuantityTransactionForExpandedGrid: this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction && this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null && this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['QuantityTransactionForExpandedGrid']),\n          viewQuantityTrans: this.viewQuantityTrans,\n          selectedRecord: this.props.Login.selectedRecord,\n          intl: this.props.intl,\n          DesignMappedFeilds: JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction && this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null && this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value),\n          screenName: \"IDS_QUANTITYTRANSACTION\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1569,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_MATERIALINVENTORYFILE\", /*#__PURE__*/React.createElement(MaterialInvFileTab, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          userInfo: this.props.Login.userInfo,\n          deleteRecord: this.deleteRecordmain,\n          MaterialFile: sortData(this.props.Login.masterData.MaterialInventoryFile, \"descending\", \"nmaterialinventoryfilecode\") || [],\n          addMaterialFile: param => this.props.addMaterialInventoryFile(param, this.props.Login.masterData.SelectedMaterialInventory),\n          viewMaterialFile: this.viewMaterialFile,\n          screenName: \"IDS_MATERIALINVENTORYFILE\",\n          settings: this.props.settings,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1604,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_RESULTENTRYTRANSACTION\", /*#__PURE__*/React.createElement(ResultEntryTransactionTab, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          dataResult: this.props.Login.masterData[\"ResultUsedMaterial\"] && process(this.props.Login.masterData[\"ResultUsedMaterial\"], this.props.screenName === undefined || this.props.screenName === \"IDS_RESULTENTRYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenname === \"IDS_RESULTENTRYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: event => this.setState({\n            sectionDataState: event.dataState\n          }),\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo // dynamicFeildsForGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\n          //     this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\n          //     this.props.Login.\n          //         masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['ResultUsedMaterialGrid'])}\n          ,\n          selectedRecord: this.props.Login.selectedRecord,\n          intl: this.props.intl,\n          screenName: \"IDS_RESULTENTRYTRANSACTION\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1616,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_MATERIALINVENTORYHISTORY\", /*#__PURE__*/React.createElement(MaterialInventoryHistory, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          dataResult: this.props.Login.masterData[\"MaterialInventoryHistory\"] && process(sortData(this.props.Login.masterData[\"MaterialInventoryHistory\"], \"descending\", \"nmaterialinventoryhistorycode\"), this.props.screenName === undefined || this.props.screenName === \"IDS_MATERIALINVENTORYHISTORY\" ? this.state.historyDataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenname === \"IDS_MATERIALINVENTORYHISTORY\" ? this.state.historyDataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: event => this.setState({\n            historyDataState: event.dataState\n          }),\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo // dynamicFeildsForGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\n          //     this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\n          //     this.props.Login.\n          //         masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['ResultUsedMaterialGrid'])}\n          ,\n          selectedRecord: this.props.Login.selectedRecord,\n          intl: this.props.intl,\n          screenName: \"IDS_MATERIALINVENTORYHISTORY\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1637,\n            columnNumber: 17\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.onInputOnChangeFile = (event, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {}; // let isSelectedRecordChange = this.state.isSelectedRecordChange\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional2;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.updateMaterialStatus = (buttonId, nflag) => {\n      let inputParam = {};\n      let inputData = [];\n      let operation;\n      let masterData = this.props.Login.masterData;\n      inputData[\"nflag\"] = nflag;\n      operation = nflag === 1 ? 'RELEASED' : 'RETIRE';\n      inputData[\"nmaterialinventorycode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialinventorycode;\n      inputData[\"nmaterialcode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialcode;\n      inputData[\"nmaterialtypecode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialcatcode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nmaterialconfigcode\"] = this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode;\n      inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: 'update',\n        selectedRecord: this.state.selectedRecord,\n        searchRef: this.searchRef,\n        dataState: this.state.dataState,\n        postParam: {\n          selectedObject: \"SelectedMaterialInventory\",\n          primaryKeyField: \"nmaterialinventorycode\",\n          inputListName: \"MaterialInventory\"\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, buttonId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecordmain = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = JSON.stringify(deleteParam.selectedRecord);\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      }\n\n      const inputParam = {\n        inputData: {\n          nmaterialconfigcode: this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\n          ncontrolCode: deleteParam.ncontrolCode,\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"materialinventory\",\n        operation: deleteParam.operation,\n        ncontrolCode: deleteParam.ncontrolCode,\n        methodUrl: methodUrl,\n        screenName: \"IDS_MATERIALINVENTORY\",\n        dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_MATERIALINVENTORY\",\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n\n      if (this.state.selectedMaterialCat !== undefined ? this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" : false) {\n        if (this.state.selectedMaterialcombo !== undefined ? this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" : false) {\n          // if (this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" ) {\n          //     if (this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" ) {\n          inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n          inputData[\"materialCatList\"] = this.state.materialCatList;\n          inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value;\n          inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n\n          if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n            this.props.getMaterialInventoryByID(this.state.selectedcombo, this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTUSERROLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTMATERIAL\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMATERIALCATEGORY\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.viewMaterialFile = filedata => {\n      const inputParam = {\n        inputData: {\n          nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\n          ndesigntemplatemappingcode: this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\n          materialinventoryfile: JSON.stringify(filedata),\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"materialinventory\",\n        operation: \"view\",\n        methodUrl: \"AttachedMaterialInventoryFile\",\n        screenname: \"IDS_MATERIALINVENTORY\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.printBarcode = inputParam => {\n      this.setState({\n        selectedRecord: {\n          barcodevalue: inputParam.sample.sarno,\n          barcodeData: inputParam.sample\n        },\n        openModal: true\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let showMaterialSection = this.props.Login.showMaterialSection; // let isneedcombomulti = this.props.Login.isneedcombomulti;\n\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showModalPopup = this.props.Login.showModalPopup;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"RETIRE\" || this.props.Login.operation === \"RELEASED\" || this.props.Login.operation === \"IDS_OPENDATE\") {\n          loadEsign = false;\n          openModal = false;\n          showModalPopup = this.props.Login.operation === \"IDS_OPENDATE\" ? true : false; // selectedRecord =  this.props.Login.operation === \"IDS_OPENDATE\"?selectedRecord[\"IDS_OPENDATE\"]\n          // &&selectedRecord[\"IDS_OPENDATE\"]:{};\n\n          if (this.props.Login.operation === \"IDS_OPENDATE\") {\n            let temp = selectedRecord[\"IDS_OPENDATE\"];\n            selectedRecord = {};\n            selectedRecord[\"IDS_OPENDATE\"] = temp;\n          } else {\n            selectedRecord = {};\n          }\n        } else {\n          loadEsign = false; //openChildModal=false;\n          //openModal = false;\n\n          showModalPopup = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        showMaterialSection = false; //isneedcombomulti = false;\n\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          showMaterialSection,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          showModalPopup,\n          openChildModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (fieldName === \"nmaterialtypecode\") {\n        const selectedcombo = this.state.selectedcombo || {};\n        selectedcombo[fieldName] = comboData;\n        this.searchRef.current.value = \"\";\n        this.props.initialcombochangeMaterialInvget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\n      }\n\n      if (fieldName === \"nmaterialcode\") {\n        const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\n        selectedMaterialcombo[\"nmaterialcode\"] = comboData;\n        this.setState({\n          selectedMaterialcombo\n        });\n      } else if (fieldName === \"nmaterialcatcode\") {\n        const selectedMaterialCat = this.state.selectedMaterialCat || {};\n        selectedMaterialCat[fieldName] = comboData;\n        this.props.initialcombochangeMaterialInvget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\n      } else if (fieldName === \"nmaterialsectioncode\") {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[\"nmaterialsectioncode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"nlinkcode\") {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[\"nlinkcode\"] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\n        const selectedMaterialCat = this.state.selectedMaterialCat || {};\n        selectedMaterialCat[fieldName] = comboData;\n        this.setState({\n          selectedMaterialCat\n        });\n        let comboName = fieldName.label;\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (fieldName.label === \"IDS_STORAGECONDITION\") {\n        let comboName = fieldName.label;\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (fieldName === \"value\") {\n        const comboitem = this.state.comboitem || {};\n        comboitem[fieldName] = comboData;\n        this.setState({\n          comboitem\n        });\n      }\n    };\n\n    this.onInputOnChange = (event, optional1, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.props.Login.screenname !== \"IDS_MATERIALINVENTORYFILE\") {\n        if (event.target.type === 'checkbox') {\n          if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else if (event.target.type === 'radio') {\n          selectedRecord[event.target.name] = optional2;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.saveClick = () => {\n      let operation = \"update\";\n      let operations = 'IDS_OPENDATE';\n      let inputData = [];\n      inputData[\"Open Date\"] = this.state.selectedRecord['Open Date'] && convertDateTimetoStringDBFormat(this.state.selectedRecord['Open Date'], this.props.Login.userInfo);\n      inputData[\"tzOpen Date\"] = this.state.selectedRecord[\"tzOpen Date\"] && this.state.selectedRecord[\"tzOpen Date\"];\n      inputData[\"nflag\"] = 3;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode;\n      inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n      inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].nmaterialinventorycode;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: operation\n      };\n      let masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operations,\n            showModalPopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\n      }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      let nmaterialconfigcode;\n      nmaterialconfigcode = this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode;\n\n      if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\n        inputData[\"MaterialInventory\"] = {};\n        inputData[\"jsonuidata\"] = {};\n        inputData[\"DateList\"] = [];\n        const Layout = this.props.Login.masterData.selectedTemplate[0].jsondata;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                if (component.label === 'Section') {\n                  inputData[\"MaterialInventory\"][component.label] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] ? {\n                    label: this.state.selectedRecord[component.label][\"label\"],\n                    value: this.state.selectedRecord[component.label][\"value\"],\n                    pkey: this.state.selectedRecord[component.label].item.pkey,\n                    nquerybuildertablecode: this.state.selectedRecord[component.label].item.nquerybuildertablecode,\n                    item: this.state.selectedRecord[component.label].item\n                  } : \"\" : {\n                    label: \"Default\",\n                    value: -1\n                  };\n                  inputData[\"jsonuidata\"][component.label] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? this.state.selectedRecord[component.label] ? this.state.selectedRecord[component.label][\"label\"] : \"\" : \"Default\";\n                  inputData[\"jsonuidata\"]['nsectioncode'] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? this.state.selectedRecord[component.label] ? this.state.selectedRecord[component.label][\"value\"] : \"\" : -1;\n                } else {\n                  inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] ? {\n                    label: this.state.selectedRecord[component.label][\"label\"],\n                    value: this.state.selectedRecord[component.label][\"value\"],\n                    pkey: this.state.selectedRecord[component.label].item.pkey,\n                    nquerybuildertablecode: this.state.selectedRecord[component.label].item.nquerybuildertablecode,\n                    item: this.state.selectedRecord[component.label].item\n                  } : \"\";\n                  inputData[\"jsonuidata\"][component.label] = this.state.selectedRecord[component.label] ? this.state.selectedRecord[component.label][\"label\"] : \"\";\n                }\n              } else if (component.inputtype === 'date') {\n                if (this.state.selectedRecord[component.label]) {\n                  inputData[\"MaterialInventory\"][`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\n                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                  } : {\n                    label: this.props.Login.userInfo['stimezoneid'],\n                    value: this.props.Login.userInfo['ntimezonecode']\n                  };\n                  inputData[\"MaterialInventory\"][component.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                  inputData[\"DateList\"].push(component.label);\n                }\n\n                inputData[\"jsonuidata\"][component.label] = this.state.selectedRecord[component.label] ? convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo) : \"\";\n              } else {\n                inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] && this.state.selectedRecord[component.label]; //    if (this.state.selectedRecord[component.label] !== \"\") {\n\n                inputData[\"jsonuidata\"][component.label] = this.state.selectedRecord[component.label] && this.state.selectedRecord[component.label]; //   }\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  if (componentrow.label === 'Unit') {\n                    inputData[\"jsonuidata\"]['sbatchunitname'] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label][\"label\"];\n                    inputData[\"jsonuidata\"]['nbatchunitcode'] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label][\"value\"];\n                  }\n\n                  inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ? {\n                    label: this.state.selectedRecord[componentrow.label][\"label\"],\n                    value: this.state.selectedRecord[componentrow.label][\"value\"],\n                    pkey: this.state.selectedRecord[componentrow.label].item.pkey,\n                    nquerybuildertablecode: this.state.selectedRecord[componentrow.label].item.nquerybuildertablecode,\n                    item: this.state.selectedRecord[componentrow.label].item\n                  } : \"\";\n                  inputData[\"jsonuidata\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ? this.state.selectedRecord[componentrow.label][\"label\"] : \"\";\n                } else if (componentrow.inputtype === 'date') {\n                  if (this.state.selectedRecord[componentrow.label]) {\n                    inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\n                      label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\n                    } : {\n                      label: this.props.Login.userInfo['stimezoneid'],\n                      value: this.props.Login.userInfo['ntimezonecode']\n                    };\n                    inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(componentrow.label);\n                  }\n\n                  inputData[\"jsonuidata\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ? convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo) : \"\";\n                } else {\n                  inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label];\n                  inputData[\"jsonuidata\"][componentrow.label] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label];\n                }\n              });\n            });\n          });\n        });\n        inputData[\"MaterialInventory\"] = { ...inputData[\"MaterialInventory\"],\n          // \"IDS_INVENTORYTRANSACTIONTYPE\": {\n          //     label: \"Outside\",\n          //     value: 2\n          // },\n          // \"IDS_TRANSACTIONTYPE\": {\n          //     label: \"Received\",\n          //     value: 47\n          // },\n          // [this.props.Login.masterData.siteLabelName && this.props.Login.masterData.siteLabelName]: {\n          //     label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\n          //     value: this.props.Login.userInfo.nsitecode && this.props.Login.userInfo.nsitecode\n          // },\n          needsectionwise: this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise,\n          \"dretestdate\": this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory['jsondata'] && this.props.Login.masterData.SelectedMaterialInventory['jsondata'].dretestdate,\n          // \"IDS_AVAILABLEQUANTITY\": this.state.selectedRecord['IDS_RECEIVEDQUANTITY'],\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ? transactionStatus.QUARANTINE : transactionStatus.RELEASED,\n          \"sdisplaystatus\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].sdisplaystatus,\n          \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\n          nsitecode: this.props.Login.userInfo.nsitecode,\n          nusercode: this.props.Login.userInfo.nusercode\n        };\n        inputData[\"jsonuidata\"] = { ...inputData[\"jsonuidata\"],\n          \"dretestdate\": this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory['jsondata'] && this.props.Login.masterData.SelectedMaterialInventory['jsondata'].dretestdate,\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ? transactionStatus.QUARANTINE : transactionStatus.RELEASED,\n          \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\n          \"nmaterialconfigcode\": nmaterialconfigcode,\n          \"sdisplaystatus\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].sdisplaystatus,\n          nsitecode: this.props.Login.userInfo.nsitecode\n        };\n        inputData[\"MaterialInventoryTrans\"] = { ...inputData[\"MaterialInventory\"],\n          \"nqtyissued\": 0,\n          \"nsectioncode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? inputData[\"MaterialInventory\"][\"Section\"].value : -1,\n          \"Section\": {\n            \"label\": inputData[\"MaterialInventory\"][\"Section\"].label,\n            \"value\": inputData[\"MaterialInventory\"][\"Section\"].value\n          },\n          \"Available Quantity/Unit\": this.state.selectedRecord['Received Quantity'],\n          \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\n          \"ntransactiontype\": transactionStatus.RECEIVED,\n          \"ninventorytranscode\": 2,\n          \"Transaction Type\": {\n            \"label\": this.props.Login.masterData.TransactionType[1].jsondata.stransdisplaystatus[this.props.Login.userInfo.slanguagetypecode],\n            \"value\": transactionStatus.RECEIVED\n          },\n          \"Received Quantity\": this.state.selectedRecord['Received Quantity'],\n          \"Inventory Transaction Type\": {\n            \"label\": this.props.Login.masterData.MaterialInventoryType[1].jsondata.sinventorytypename[this.props.Login.userInfo.slanguagetypecode],\n            \"value\": 2\n          },\n          nusercode: this.props.Login.userInfo.nusercode\n        };\n        inputData[\"jsonuidataTrans\"] = { ...inputData[\"jsonuidata\"],\n          \"nqtyissued\": 0,\n          \"nsectioncode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? inputData[\"MaterialInventory\"][\"Section\"].value : -1,\n          \"Section\": inputData[\"MaterialInventory\"][\"Section\"].label,\n          \"Available Quantity/Unit\": this.state.selectedRecord['Received Quantity'],\n          \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\n          \"ntransactiontype\": 14,\n          \"ninventorytranscode\": 2,\n          \"Transaction Type\": this.props.Login.masterData.TransactionType[1].jsondata.stransdisplaystatus[this.props.Login.userInfo.slanguagetypecode],\n          \"Received Quantity\": this.state.selectedRecord['Received Quantity'],\n          \"Inventory Transaction Type\": this.props.Login.masterData.MaterialInventoryType[1].jsondata.sinventorytypename[this.props.Login.userInfo.slanguagetypecode],\n          \"sprecision\": this.props.Login.masterData.sprecision,\n          \"needsectionwise\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise\n        };\n\n        if (this.props.Login.masterData.siteLabelName) {\n          inputData[\"MaterialInventoryTrans\"][this.props.Login.masterData.siteLabelName] = {\n            label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\n            value: this.props.Login.masterData.siteName && this.props.Login.userInfo.nsitecode\n          };\n        }\n\n        inputData[\"ntransactionstatus\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ? transactionStatus.QUARANTINE : transactionStatus.RELEASED;\n        inputData[\"nsectioncode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? inputData[\"MaterialInventory\"][\"Section\"].value : -1;\n        inputData[\"needsectionwise\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise;\n        inputData[\"jsonuidata\"] = JSON.stringify(inputData[\"jsonuidata\"]);\n        inputData[\"jsonuidataTrans\"] = JSON.stringify(inputData[\"jsonuidataTrans\"]);\n        inputData[\"MaterialInventoryTrans\"] = JSON.stringify(inputData[\"MaterialInventoryTrans\"]);\n        inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"]);\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n\n        if (this.props.Login.operation === 'create') {\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        } else {\n          postParam = {\n            inputListName: \"MaterialInventory\",\n            selectedObject: \"SelectedMaterialInventory\",\n            primaryKeyField: \"nmaterialinventorycode\"\n          };\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode;\n          inputData[\"sprecision\"] = this.props.Login.masterData.sprecision;\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        } else {\n          if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\n            this.ConfirmComponent();\n          } else {\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, masterData, \"openModal\");\n            }\n          }\n        }\n      } else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\n        if (this.state.selectedRecord['Transaction Type'].value === 64 && this.state.selectedRecord.Site.value !== this.props.Login.userInfo.nsitecode) {\n          return toast.info(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTRETURNFROMANOTHERSITE\"\n          }));\n        }\n\n        let nflag = true;\n\n        if (this.state.selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED) {\n          nflag = false;\n        }\n\n        if (nflag ? this.state.selectedRecord['Received Quantity'] <= parseFloat(this.state.selectedRecord['Available Quantity/Unit']) : true) {\n          if (this.state.selectedRecord['Received Quantity'] > 0) {\n            const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata;\n            let dynamicobj = {}; // dynamicobj[\"jsonuidata\"] = {}\n\n            let jsonuidata = {};\n            inputData[\"DateList\"] = [];\n            Layout.map(row => {\n              row.children.map(column => {\n                column.children.map(component => {\n                  if (component.inputtype === 'combo') {\n                    if (component.label === 'Section') {\n                      if (this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3) {\n                        dynamicobj['nsectioncode'] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value === 1 ? this.state.selectedRecord[component.label][\"value\"] : this.props.Login.masterData.sourceSection : this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value === 1 ? this.state.selectedRecord[component.label][\"value\"] : -1;\n                        jsonuidata['nsectioncode'] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ? this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value === 1 ? this.state.selectedRecord[component.label][\"value\"] : this.props.Login.masterData.sourceSection : this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value === 1 ? this.state.selectedRecord[component.label][\"value\"] : -1;\n                      } else {\n                        dynamicobj['nsectioncode'] = this.state.selectedRecord[component.label] ? this.state.selectedRecord[component.label][\"value\"] : -1;\n                        jsonuidata['nsectioncode'] = this.state.selectedRecord[component.label] ? this.state.selectedRecord[component.label][\"value\"] : -1;\n                      }\n\n                      dynamicobj[component.label] = this.state.selectedRecord[component.label] ? {\n                        label: this.state.selectedRecord[component.label][\"label\"],\n                        value: this.state.selectedRecord[component.label][\"value\"]\n                      } : 'NA';\n                      jsonuidata[component.label] = this.state.selectedRecord[component.label] ? this.state.selectedRecord[component.label][\"label\"] : 'NA';\n                    } else {\n                      if (this.state.selectedRecord[component.label]) {\n                        dynamicobj[component.label] = {\n                          label: this.state.selectedRecord[component.label][\"label\"],\n                          value: this.state.selectedRecord[component.label][\"value\"]\n                        };\n                        jsonuidata[component.label] = this.state.selectedRecord[component.label][\"label\"];\n                      }\n                    }\n                  } else if (component.inputtype === 'Numeric') {\n                    if (this.state.selectedRecord[component.label]) {\n                      dynamicobj[component.label] = this.state.selectedRecord[component.label].toString();\n                      jsonuidata[component.label] = this.state.selectedRecord[component.label].toString();\n                    }\n                  } else if (component.inputtype === 'date') {\n                    if (this.state.selectedRecord[component.label]) {\n                      dynamicobj[`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\n                        label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                        value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                      } : {\n                        label: this.props.Login.userInfo['stimezoneid'],\n                        value: this.props.Login.userInfo['ntimezonecode']\n                      };\n                      dynamicobj[component.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                      jsonuidata[`tz${component.label}`] = component.hasOwnProperty('timezone') ? this.state.selectedRecord[`tz${component.label}`][\"label\"] : this.props.Login.userInfo['stimezoneid'];\n                      jsonuidata[component.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                      inputData[\"DateList\"].push(component.label);\n                    }\n                  } else {\n                    if (this.state.selectedRecord[component.label]) {\n                      dynamicobj[component.label] = this.state.selectedRecord[component.label];\n                      jsonuidata[component.label] = this.state.selectedRecord[component.label];\n                    }\n                  }\n\n                  component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                    if (componentrow.inputtype === 'combo') {\n                      if (this.state.selectedRecord[componentrow.label]) {\n                        dynamicobj[componentrow.label] = {\n                          label: this.state.selectedRecord[componentrow.label][\"label\"],\n                          value: this.state.selectedRecord[componentrow.label][\"value\"]\n                        };\n                        jsonuidata[componentrow.label] = this.state.selectedRecord[componentrow.label][\"label\"];\n                      }\n                    } else if (componentrow.inputtype === 'date') {\n                      if (this.state.selectedRecord[componentrow.label]) {\n                        dynamicobj[`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\n                          label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\n                          value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\n                        } : {\n                          label: this.props.Login.userInfo['stimezoneid'],\n                          value: this.props.Login.userInfo['ntimezonecode']\n                        };\n                        dynamicobj[componentrow.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                        jsonuidata[`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? this.state.selectedRecord[`tz${componentrow.label}`][\"label\"] : this.props.Login.userInfo['stimezoneid'];\n                        jsonuidata[componentrow.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                        inputData[\"DateList\"].push(componentrow.label);\n                      }\n                    } else {\n                      if (this.state.selectedRecord[componentrow.label]) {\n                        dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label]; //ALPD-1045\n\n                        jsonuidata[componentrow.label] = this.state.selectedRecord[componentrow.label];\n                      }\n                    }\n                  });\n                });\n              });\n            });\n            dynamicobj = { ...this.props.Login.masterData.SelectedMaterialInventory,\n              ...dynamicobj,\n              \"ntransactiontype\": this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value,\n              \"ninventorytranscode\": this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value,\n              \"navailableqty\": this.state.selectedRecord['Available Quantity/Unit'] !== undefined ? parseFloat(this.state.selectedRecord['Available Quantity/Unit']) : this.props.Login.navailableqtyref,\n              \"Inventory ID\": this.props.Login.masterData[\"SelectedMaterialInventory\"]['Inventory ID'],\n              nusercode: this.props.Login.userInfo.nusercode,\n              parent: false\n            };\n            jsonuidata = { ...this.props.Login.masterData.SelectedMaterialInventory,\n              ...jsonuidata,\n              \"ntransactiontype\": this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value,\n              \"ninventorytranscode\": this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value,\n              \"navailableqty\": this.state.selectedRecord['Available Quantity/Unit'] !== undefined ? this.state.selectedRecord['Available Quantity/Unit'] : this.props.Login.navailableqtyref,\n              \"Inventory ID\": this.props.Login.masterData[\"SelectedMaterialInventory\"]['Inventory ID']\n            };\n            inputData[\"needsectionwise\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise;\n            inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision;\n            inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode;\n            inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj);\n            inputData[\"jsonuidata\"] = JSON.stringify(jsonuidata);\n            inputParam = {\n              classUrl: \"materialinventory\",\n              methodUrl: \"MaterialInventoryTrans\",\n              inputData: inputData,\n              operation: 'create',\n              saveType,\n              formRef,\n              postParam,\n              selectedRecord: this.state.selectedRecord,\n              searchRef: this.searchRef,\n              dataState: this.state.dataState,\n              isChild: true\n            };\n            let masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n            }\n          } else {\n            //ALPD-4842 material Inventory-->while add the Quantity transaction, section not showing\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_NOQUANTTYTORECEIVE\"\n            }));\n          }\n        } ///////////////////\n        else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_RETURNEDLESSTHANAVAILABLE\"\n          }));\n        }\n      } else if (this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\") {\n        inputParam = this.onSaveMaterialFile();\n        let masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (name === \"Received Quantity\") {\n        if (value === 0) {\n          selectedRecord[name] = \"\";\n        } else {\n          selectedRecord[name] = value;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.ConfirmComponent = () => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({\n        id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\"\n      }), \"ok\", \"cancel\", () => this.copyAlertSave());\n    };\n\n    this.reloadData = () => {\n      //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\n      if (this.searchRef && this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n      inputData[\"materialCatList\"] = this.state.materialCatList; // const inputParam = {\n      //     classUrl: \"materialinventory\",\n      //     methodUrl: \"getMaterialInventoryByID\",\n      //     displayName: \"MaterialInventory\",\n      //     inputData: inputData\n      // }\n\n      this.setState({\n        sectionDataState: {\n          skip: 0,\n          take: 10\n        }\n      });\n\n      if (this.state.selectedcombo[\"nmaterialtypecode\"] && this.props.Login.masterData.SelectedMaterialCategory && this.props.Login.masterData.SelectedMaterialCrumb) {\n        this.props.getMaterialInventoryByID(this.props.Login.masterData.SelectedMaterialType[0], this.props.Login.masterData.SelectedMaterialCategory, this.props.Login.masterData.SelectedMaterialCrumb['jsondata'], this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CONFIGMATERIALCATANDMATERIAL\"\n        }));\n      }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      masterStatus: \"\",\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      historyDataState: {\n        skip: 0,\n        take: 10\n      },\n      error: \"\",\n      isOpen: false,\n      selectedRecord: {},\n      filterCatList: [],\n      operation: \"\",\n      comboitem: undefined,\n      screenName: undefined,\n      selectedcombo: undefined,\n      selectedMaterialCatRole: undefined,\n      isSelectedRecordChange: false,\n      selectedMaterialCat: undefined,\n      materialCatList: [],\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      controlMap: new Map(),\n      showAccordian: true,\n      disablefields: false,\n      dataResult: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      dataState: _dataState,\n      columnName: '',\n      rowIndex: 0,\n      data: [],\n      splitChangeWidthPercentage: 30,\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //console.log('dxc :', this.props.Login.masterData.MaterialInventoryTrans && this.props.Login.masterData.MaterialInventoryTrans)\n    const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\n    const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\n    const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\n    const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\n    const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode; // const printBarcodeId = this.state.controlMap.has(\"PrintBarcode\") ? this.state.controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n\n    let masterlistmain = [];\n    this.props.Login.masterData.SelectedMaterialInventory && console.log('SelectedMaterialInventory :', this.props.Login.masterData.SelectedMaterialInventory); // this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']\n    // this.props.Login.masterData.MaterialInventory &&\n    //     this.props.Login.masterData.MaterialInventory.map((temp, i) => {\n    //         return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata)\n    //     })\n    //let searchedDatalistmain = []\n    // if (this.props.Login.masterData.searchedData === undefined) {\n    //     searchedDatalistmain = undefined\n    // } else {\n    //     this.props.Login.masterData.searchedData &&\n    //         this.props.Login.masterData.searchedData.map((temp, i) => {\n    //             return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata)\n    //         })\n    // }\n    // let searchFieldList = []\n\n    let mandatoryFieldsMaterialFile = []; // if (this.props.Login.masterData.SelectedMaterialType) {\n    //     if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\n    //         if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\n    //             searchFieldList = [{\n    //                 feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\n    //             }]\n    //         }\n    //         else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\n    //             searchFieldList = [{\n    //                 feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\n    //             }]\n    //         }\n    //         else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\n    //             searchFieldList = [{\n    //                 feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\n    //             }]\n    //         }\n    //     }\n    // }\n\n    this.props.Login.masterData.MaterialInventory = this.props.Login.masterData.MaterialInventory && sortData(this.props.Login.masterData.MaterialInventory, \"descending\", \"nmaterialinventorycode\");\n    this.props.Login.masterData.searchedData = this.props.Login.masterData.searchedData && sortData(this.props.Login.masterData.searchedData, \"descending\", \"nmaterialinventorycode\");\n    this.props.Login.masterData.MaterialCombo = this.props.Login.masterData.MaterialCombo && sortData(this.props.Login.masterData.MaterialCombo, \"ascending\", \"nmaterialcode\");\n    this.props.Login.masterData.MaterialType = this.props.Login.masterData.MaterialType && sortData(this.props.Login.masterData.MaterialType, \"ascending\", \"nmaterialtypecode\");\n    this.props.Login.masterData.MaterialCategoryMain = this.props.Login.masterData.MaterialCategoryMain && sortData(this.props.Login.masterData.MaterialCategoryMain, \"ascending\", \"nmaterialcatcode\");\n    const filterParam = {\n      inputListName: \"MaterialInventory\",\n      selectedObject: \"SelectedMaterialInventory\",\n      primaryKeyField: \"nmaterialinventorycode\",\n      fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n      },\n      masterData: this.props.Login.masterData,\n      // isjsondata: true,\n      searchFieldList: this.props.Login.masterData.DesignMappedFeilds && JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['searchFieldList'] && JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['searchFieldList']\n    };\n    let mandatoryFieldsOpenDate = [];\n    mandatoryFieldsOpenDate = [{\n      \"idsName\": \"Open Date\",\n      \"dataField\": \"Open Date\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.props.Login.screenname === 'IDS_MATERIALINVENTORYFILE' && this.props.Login.selectedRecord && this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK ? mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"slinkfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_LINKNAME\",\n      \"dataField\": \"nlinkcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }] : mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    console.log('masterlistmain', masterlistmain);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 64,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"MaterialInventory\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.MaterialInventory,\n      getMasterDetail: master => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory,\n      primaryKeyField: \"nmaterialinventorycode\" //mainField=\"IDS_INVENTORYID\"\n      ,\n      mainField: this.props.Login.masterData.DesignMappedFeilds && JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['mainField'],\n      firstField: this.props.Login.masterData.SelectedMaterialCrumb && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.YES ? this.props.Login.masterData.DesignMappedFeilds && JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['firstField'] && JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['firstField'] : \"Site\" //||JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['firstField']\n      ,\n      secondField: this.props.Login.masterData.DesignMappedFeilds && JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['secondField'],\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      viewId: viewId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      showFilterIcon: true,\n      onFilterSubmit: this.onFilterSubmit //viewMaterialInventoryDetails={this.viewMaterialInventoryDetails}\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(MaterialFilter, {\n          filterCatList: this.state.filterCatList || [],\n          materialCatList: this.state.materialCatList || [],\n          MaterialComboList: this.state.MaterialComboList || [],\n          selectedRecord: this.state.selectedcombo || {} //\n          ,\n          selectedMaterialCat: this.state.selectedMaterialCat || {},\n          selectedMaterialcombo: this.state.selectedMaterialcombo || {},\n          onComboChange: this.onComboChange,\n          ismaterialInventory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 45\n          }\n        })\n      }],\n      openModal: () => this.props.getAddMaterialInventoryPopup(\"create\", this.props.Login, this.props.Login.masterData.SelectedMaterialCrumb, addId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory['Inventory ID']), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-subMaterial flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined \n                                                                    outline-success btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_AVAILABLEQTY\"\n    }) // this.props.Login.masterData.SelectedMaterialInventory &&\n    // this.props.Login.masterData.SelectedMaterialInventory['jsondata']['status']\n    , \": \", this.props.Login.masterData.MaterialInventoryTrans.length > 0 ? this.props.Login.masterData.MaterialInventoryTrans && this.props.Login.masterData.MaterialInventoryTrans[0]['Available Quantity'] === this.props.Login.masterData.MaterialInventoryTrans[0]['Overall Available Quantity'] ? this.props.Login.masterData.MaterialInventoryTrans[0]['Overall Available Quantity'] : this.props.Login.masterData.MaterialInventoryTrans && this.props.Login.masterData.MaterialInventoryTrans[0] //[0]['jsondata']\n    ['Available Quantity'] + ' / ' + this.props.Login.masterData.MaterialInventoryTrans[0] //[0]['jsondata']\n    ['Overall Available Quantity'] : \"-\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWMATERIALINVDETAILS\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: this.viewMaterialInventoryDetails,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_VIEWMATERIALINVDETAILS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.props.getAddMaterialInventoryPopup(\"update\", this.props.Login, this.props.Login.masterData.SelectedMaterialCrumb, editId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.props.openDatePopup(this.props.Login.masterData, openDateId, this.props.Login.userInfo) // disabled={this.props.Login.masterData.\n      //     SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\n      //     true : false}\n      // disabled={this.props.Login.masterData.\n      //     SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\n      //     true : false}\n      // disabled={this.props.Login.masterData.\n      //     SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\n      //     true : false}\n      //disabled={true}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalendar,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RELEASE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.updateMaterialStatus(releaseId, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faRocket,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RELEASE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: e => this.updateMaterialStatus(retireId, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(RetireaMaterialInventory, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PRINTBARCODE\"\n      }),\n      onClick: e => this.barcodePrintMaterialInventory(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 67\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faBarcode,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_PRINTBARCODE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 53\n      }\n    }, this.state.showInventoryDetails &&\n    /*#__PURE__*/\n    // this.props.Login.masterData.DesignMappedFeilds &&\n    // JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)\n    // [this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===1?\n    //     'MaterialInventoryStandardViewFields':this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===2?\n    //     'MaterialInventoryVolumetricViewFields':'MaterialInventoryMatInventViewFields'\n    // ].map((field, index) =>\n    //     <Col md={4} key={index}>\n    //         <FormGroup>\n    //             <FormLabel>\n    //                 <FormattedMessage id={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} message={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} />\n    //             </FormLabel>\n    //             <ReadOnlyText>{\n    //                 field.hasOwnProperty('isDateFeild')? this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\n    //              rearrangeDateFormatDateOnly(this.props.Login.userInfo\n    //                     ,this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] )\n    //                 : \"-\":\n    //                 this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\n    //                     this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label ?\n    //                         this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label\n    //                         : this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]]\n    //                     : \"-\"}</ReadOnlyText>\n    //         </FormGroup>\n    //     </Col>\n    // )\n    React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.SelectedMaterialInventory,\n      SingleItem: JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['MaterialInventoryViewFields'],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo // ALPD-950\n      ,\n      size: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 61\n      }\n    })), this.state.showInventoryDetails ? \"\" : this.props.Login.masterData && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 124\n      }\n    }))) : \"\")))))), (this.props.Login.openModal || this.props.Login.openChildModal) && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal || this.props.Login.openChildModal,\n      closeModal: this.closeModal,\n      buttonLabel: this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? 'Print' : undefined,\n      hideSave: this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? true : false,\n      operation: this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? '' : this.props.Login.operation,\n      printBarcode: this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? true : false,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? 'IDS_TRANSFERQUANTITY' : this.props.Login.screenname,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenname !== 'IDS_MATERIALINVENTORYFILE' ? this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 4) && this.dynamicmandatoryFeilds(this.props.Login.masterData.selectedTemplate[0].jsondata) : this.dynamicmandatoryFeilds(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata) : mandatoryFieldsMaterialFile,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\" ? /*#__PURE__*/React.createElement(AddMaterialFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChangeFile,\n        onDrop: this.onDropMaterialFile,\n        deleteAttachment: this.deleteAttachment,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.Login.linkMaster,\n        maxSize: 20,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MATERIALINVENTORYFILE\"\n        }),\n        name: \"testfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 41\n        }\n      }) //ALPD-5325 Material Inventory: Print barcode\n      : this.props.Login.showBarcode && this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BarcodeGeneratorComponent, {\n        barcodeData: this.props.Login.selectedRecord.generateBarcodeValue,\n        displayData: [this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'], this.props.Login.masterData.SelectedMaterialInventory['Expiry Date & Time'].split(\" \")[0]],\n        additionalDesignsToPrint: this.props.Login.selectedRecord.additionDesignToPrint,\n        background: \"#ffffff\",\n        textAlign: \"center\",\n        fontSize: 20,\n        fontOption: \"bold\",\n        textPosition: \"bottom\",\n        lineColor: \"#000000\",\n        width: 3,\n        height: 50,\n        format: \"CODE128\",\n        margin: 10,\n        marginTop: 50,\n        marginBottom: undefined,\n        marginLeft: 3,\n        marginRight: undefined,\n        flat: true,\n        printBarcode: true,\n        displayValue: true,\n        needdisplaydata: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 49\n        }\n      })) //ALPD-5325 Material Inventory: Print barcode\n      : /*#__PURE__*/React.createElement(DynamicSlideoutMaterial, {\n        operation: this.props.Login.operation,\n        disablefields: this.state.disablefields,\n        selectedRecord: this.state.selectedRecord // isSectionneed={this.props.Login.isSectionneed ? this.props.Login.isSectionneed :\n        //     this.props.Login.masterData.SelectedMaterialCategory.needSectionwise}\n        ,\n        isSectionneed: this.props.Login.masterData.SelectedMaterialCategory.needSectionwise === transactionStatus.NO ? this.props.Login.masterData.SelectedMaterialCategory.needSectionwise : this.props.Login.isSectionneed //isSectionneed={4}\n        ,\n        needsectionwise: this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise //enabledisableSectionInvTrans={this.state.selectedRecord['IDS_INVENTORYTRANSACTIONTYPE'] && this.state.selectedRecord['IDS_INVENTORYTRANSACTIONTYPE'].value}\n        ,\n        ismaterialSectionneed: this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise : this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value === 2 ? 4 : 3,\n        screenname: this.props.Login.screenname,\n        templateData: this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate[0].jsondata : this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata,\n        onNumericInputChange: this.onNumericInputChange,\n        enabledisableAvailableQty: this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value,\n        handleChange: this.handleChange,\n        onInputOnChange: this.onInputOnChange // isExpiryNeed={parseInt(this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].isExpiryNeed)}\n        ,\n        comboData: this.props.Login.templateData && this.props.Login.templateData.comboData,\n        onComboChange: this.onComboChangedynamic,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        nprecision: this.props.Login.masterData.nprecision,\n        timeZoneList: this.props.Login.timeZoneList,\n        isreusable: this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Reusable'],\n        needfeild: this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED ? transactionStatus.YES : transactionStatus.NO,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 45\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 21\n      }\n    }), this.props.Login.showModalPopup && /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: true,\n      selectedRecord: this.state.selectedRecord,\n      modalTitle: this.props.intl.formatMessage({\n        id: this.props.Login.ModaTitle\n      }),\n      needSave: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true,\n      closeModal: this.closeModalShow,\n      onSaveClick: this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick,\n      validateEsign: this.validateEsign,\n      mandatoryFields: this.props.Login.ModaTitle === 'IDS_OPENDATE' && mandatoryFieldsOpenDate,\n      modalBody: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? /*#__PURE__*/React.createElement(AddMaterialOpenDate, {\n        isMultiLingualLabel: true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_OPENDATE\"\n        }),\n        intl: this.props.intl.formatMessage,\n        selectedRecord: this.state.selectedRecord,\n        dateonly: true,\n        onComboChange: this.onComboChangeopendate,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        mandatory: true,\n        timeZoneList: this.props.Login.timeZoneList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 77\n        }\n      }) : this.props.Login.ModaTitle !== 'IDS_QUANTITYTRANSACTION' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'Inventory ID',\n        message: 'Inventory ID',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'] ? this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'] : \"-\"))), this.accordianDesign(this.props.Login.masterData.selectedTemplate[0].jsondata, this.props.Login.masterData.SelectedMaterialInventory.jsondata), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_OPENDATE',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ? rearrangeDateFormatDateOnly(this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']) : \"-\")))) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 37\n        }\n      }, this.accordianDesign(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata, this.props.Login.viewQuantityTransdetails), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_AVAILABLEQTY',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.viewQuantityTransdetails['namountleft'] ? this.props.Login.viewQuantityTransdetails['namountleft'] : \"-\" // this.props.Login.navailableqty\n      ))), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_ISSUEDQUANTITY',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 60\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 49\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.viewQuantityTransdetails['nqtyissued'] ? this.props.Login.viewQuantityTransdetails['nqtyissued'] : \"-\")))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n    breadCrumbData.push({\n      \"label\": \"IDS_MATERIALTYPE\",\n      \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode] : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIALCAT\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCategory ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIAL\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCrumb ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'] !== undefined ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'] : \"NA\" : \"NA\"\n    });\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    let bool = false;\n    let {\n      selectedRecord,\n      selectedcombo,\n      comboitem,\n      filterData,\n      filterCatList,\n      selectedMaterialCat,\n      selectedMaterialcombo,\n      materialCatList,\n      MaterialComboList,\n      SelectedMaterialInventory\n    } = this.state;\n    let masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\n      bool = true;\n      selectedMaterialCat = this.props.Login.selectedMaterialCat;\n    }\n\n    if (this.props.Login.masterData.SelectedMaterialInventory !== previousProps.Login.masterData.SelectedMaterialInventory) {\n      bool = true;\n      SelectedMaterialInventory = this.props.Login.SelectedMaterialInventory;\n    }\n\n    if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\n      bool = true;\n      comboitem = this.props.Login.comboitem;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (this.props.Login.masterData.MaterialType !== undefined) {\n      if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\n        bool = true;\n        const materialTypeList = constructjsonOptionList(this.props.Login.masterData.MaterialType, \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined, undefined, undefined, true, this.props.Login.userInfo.slanguagetypecode);\n        filterCatList = materialTypeList.get(\"OptionList\");\n        selectedcombo = {\n          nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\n            \"value\": masterData.MaterialType[0].nmaterialtypecode,\n            \"label\": masterData.MaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode]\n          } : \"\"\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\n      bool = true;\n      const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      materialCatList = MaterialCategoryMain.get(\"OptionList\");\n      selectedMaterialCat = {\n        nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\n          \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\n          \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\n      bool = true;\n      let MaterialComboArr = [];\n\n      if (this.props.Login.masterData.MaterialCombo) {\n        this.props.Login.masterData.MaterialCombo.map(temp => {\n          MaterialComboArr.push(temp.jsondata);\n        });\n        const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\", \"Material Name\", undefined, undefined, undefined);\n        MaterialComboList = MaterialCombo.get(\"OptionList\");\n        selectedMaterialcombo = {\n          nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\n            \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\n            \"label\": masterData.MaterialCombo[0][\"jsondata\"]['Material Name']\n          } : \"\"\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData();\n    }\n\n    if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\n      if (this.props.Login.masterData.searchedData) {\n        if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\n          this.setState({\n            skip: 0\n          });\n        }\n      }\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        comboitem,\n        filterData,\n        selectedcombo,\n        filterCatList,\n        selectedMaterialCat,\n        selectedMaterialcombo,\n        materialCatList,\n        MaterialComboList,\n        SelectedMaterialInventory\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  handleClickDelete(masterData, ncontrolcode, modalName) {\n    // if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED &&\n    //     this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\n    if (this.props.Login.masterData[\"SelectedMaterialInventory\"].ntranscode === transactionStatus.QUARANTINE) {\n      // const fieldArray = [];\n      let postParam = {\n        inputListName: \"MaterialInventory\",\n        selectedObject: \"SelectedMaterialInventory\",\n        primaryKeyField: \"nmaterialinventorycode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\n        fetchUrl: \"materialinventory/getMaterialInventoryByID\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          \"nmaterialtypecode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"nmaterialcode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialCrumb && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\n        } // \"nmaterialtypecode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n        // \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n        // \"nmaterialcode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialCrumb && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n\n      };\n      modalName = 'openModal';\n      const inputParam = {\n        methodUrl: \"MaterialInventory\",\n        classUrl: \"materialinventory\",\n        inputData: {\n          \"nmaterialconfigcode\": this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\n          \"material\": this.props.Login.masterData.SelectedMaterial,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"userinfo\": this.props.Login.userInfo,\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n        },\n        operation: \"delete\",\n        postParam,\n        displayName: \"Material\",\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            operation: 'delete',\n            screenName: \"Material\",\n            id: \"material\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName);\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTQUARENTINEINVENTORY\"\n      }));\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getAddMaterialInventoryPopup,\n  updateMaterialStatus,\n  openDatePopup,\n  getQuantityTransactionPopup,\n  getQuantityTransactionOnchange,\n  updateStore,\n  initialcombochangeMaterialInvget,\n  viewAttachment,\n  getMaterialChildValues,\n  crudMaster,\n  getMaterialInventoryDetails,\n  getMaterialInventoryByID,\n  addMaterialInventoryFile,\n  filterColumnData,\n  validateEsignCredential,\n  getSiteonchange\n})(injectIntl(MaterialInventory));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/Material/MaterialInventory.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","Nav","Card","FormGroup","FormLabel","process","toast","FontAwesomeIcon","faTrashAlt","faPencilAlt","faCalendar","faEye","faRocket","faBarcode","SlideOutModal","Esign","ListMaster","ModalShow","CustomTab","showEsign","getControlMap","constructOptionList","rearrangeDateFormatDateOnly","sortData","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","constructjsonOptionList","comboChild","convertDateTimetoStringDBFormat","Lims_JSON_stringify","replaceBackSlash","callService","updateStore","crudMaster","filterColumnData","validateEsignCredential","viewAttachment","initialcombochangeMaterialInvget","getMaterialInventoryByID","getAddMaterialInventoryPopup","getMaterialInventoryDetails","addMaterialInventoryFile","updateMaterialStatus","openDatePopup","getQuantityTransactionPopup","getMaterialChildValues","getQuantityTransactionOnchange","getSiteonchange","DEFAULT_RETURN","transactionStatus","attachmentType","designProperties","ContentPanel","ReadOnlyText","ConfirmMessage","BreadcrumbComponent","MaterialFilter","Affix","AddMaterialOpenDate","AddMaterialFile","InvenotryTransaction","MaterialInvFileTab","MediaLabel","ProductList","SampleInfoView","ResultEntryTransactionTab","DynamicSlideoutMaterial","MaterialInventoryHistory","AddPrinter","BarcodeGeneratorComponent","mapStateToProps","state","Login","MaterialInventory","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","expandChange","event","isExpanded","dataItem","expanded","undefined","aggregates","paneSizeChange","d","splitChangeWidthPercentage","quantityTransaction","param","ncontrolCode","openModal","updateInfo","typeName","data","masterData","userInfo","viewQuantityTrans","viewQuantityTransdetails","showModalPopup","ModaTitle","accordianDesign","Template","selectedmasterlistmain1","selectedmasterlistmain","push","designaccordian","map","row","children","column","component","inputtype","label","length","YES","needAccordian","hasOwnProperty","componentrow","onComboChangeopendate","comboData","control","selectedRecord","onComboChangedynamic","customName","valuemember","nquerybuildertablecode","pkey","source","comboName","screenname","parent","Layout","QuantityTransactionTemplate","jsondata","child","c","SelectedMaterialCrumb","needsectionwise","comboComponents","parentcolumnlist","columnList","childColumnList","val","inputParem","primarykeyField","value","item","templateData","barcodePrintMaterialInventory","SelectedMaterialInventory","generateBarcodeValue","additionDesignToPrint","showBarcode","operation","warn","intl","formatMessage","id","viewMaterialInventoryDetails","showInventoryDetails","closeModalShow","handleDateChange","dateValue","dateName","onTabChange","tabProps","screenName","onDropMaterialFile","attachedFiles","fieldName","maxSize","actionType","deleteAttachment","file","onSaveMaterialFile","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","testFileArray","testFile","nmaterialconfigcode","selectedTemplate","nmaterialinventorycode","nmaterialinventoryfilecode","nstatus","ACTIVE","ndefaultstatus","LINK","formData","FormData","FTP","Array","isArray","forEach","index","tempData","Object","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","ntestfilecode","sdescription","trim","NA","size","dcreateddate","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","postParam","inputListName","selectedObject","primaryKeyField","inputParam","inputData","sformname","smodulename","slanguagename","isFileupload","classUrl","methodUrl","searchRef","isChild","dynamicmandatoryFeilds","console","log","mandatoryFeildsMaterial","slanguagetypecode","bool","sectionneed","SelectedMaterialCategory","needSectionwise","mandatory","displayname","RECEIVED","REJECT","temp","i","dataField","isSectionneed","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","sectionDataState","skip","take","dataState","getTestDetails","deleteRecordmain","gridfillingColumn","parse","DesignMappedFeildsQuantityTransaction","MaterialInventoryFile","viewMaterialFile","settings","historyDataState","onInputOnChangeFile","optional2","target","type","checked","buttonId","nflag","nmaterialcode","nmaterialtypecode","nmaterialcatcode","nformcode","loadEsign","screenData","deleteParam","selected","methodDataState","instrumentCatDataState","toLowerCase","userinfo","ConfirmDelete","deleteId","confirmMessage","confirm","handleClickDelete","openFilter","showFilter","closeFilter","onFilterSubmit","current","selectedMaterialCat","selectedMaterialcombo","selectedcombo","materialCatList","handlePageChange","e","validateEsign","sreason","nreasoncode","spredefinedreason","password","filedata","ndesigntemplatemappingcode","materialinventoryfile","printBarcode","barcodevalue","sample","sarno","barcodeData","closeModal","openChildModal","showMaterialSection","selectedId","onComboChange","displaymember","comboitem","onInputOnChange","optional1","DEACTIVE","saveClick","operations","SelectedMaterialType","PrinterChange","selectedPrinterData","onSavePrinterClick","insertlist","displayName","npreregno","insertPrinterPreregno","sprintername","npreregno1","selectedSample","x","join","ncontrolcode","action","onSaveClick","saveType","formRef","dretestdate","ntranscode","QUARANTINE","RELEASED","sdisplaystatus","nsitecode","nusercode","TransactionType","stransdisplaystatus","MaterialInventoryType","sinventorytypename","sprecision","siteLabelName","siteName","copyScreenRights","ConfirmComponent","Site","info","parseFloat","dynamicobj","jsonuidata","sourceSection","toString","navailableqtyref","nprecision","onNumericInputChange","copyAlertSave","reloadData","parseInt","masterStatus","error","isOpen","filterCatList","selectedMaterialCatRole","isSelectedRecordChange","ControlRights","showAccordian","disablefields","dataResult","columnName","rowIndex","createRef","getDerivedStateFromProps","render","addId","has","get","editId","releaseId","retireId","openDateId","viewId","masterlistmain","mandatoryFieldsMaterialFile","searchedData","MaterialCombo","MaterialType","MaterialCategoryMain","filterParam","fetchUrl","fecthInputObject","searchFieldList","DesignMappedFeilds","mandatoryFieldsOpenDate","breadCrumbData","filterData","master","MaterialComboList","parentFunction","MaterialInventoryTrans","loadPrinter","printer","linkMaster","handleChange","timeZoneList","temparray","option","LABEL","VALUE","componentDidMount","parentHeight","height","clientHeight","firstPane","generateBreadCrumData","smaterialtypename","smaterialcatname","componentDidUpdate","previousProps","values","materialTypeList","MaterialComboArr","componentWillUnmount","modalName","primaryKeyValue","SelectedMaterial"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Nav, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faPencilAlt, faCalendar, faEye, faRocket, faBarcode } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//import { faTrashAlt, faPencilAlt, faCalendar, faEye } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//import { faTrashAlt, faPencilAlt, faCalendar, faEye, faRocket } from '@fortawesome/free-solid-svg-icons';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ModalShow from '../../components/ModalShow.jsx';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport { showEsign, getControlMap, constructOptionList, rearrangeDateFormatDateOnly, sortData, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, comboChild, convertDateTimetoStringDBFormat, Lims_JSON_stringify, replaceBackSlash } from '../../components/CommonScript';\r\n\r\nimport {\r\n    callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment,\r\n    initialcombochangeMaterialInvget, getMaterialInventoryByID,\r\n    getAddMaterialInventoryPopup, getMaterialInventoryDetails, addMaterialInventoryFile,\r\n    updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange, getSiteonchange\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, attachmentType, designProperties } from '../../components/Enumeration';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport MaterialFilter from './MaterialFilter';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\r\nimport AddMaterialFile from './AddMaterialFile';\r\nimport InvenotryTransaction from './InvenotryTransaction';\r\nimport MaterialInvFileTab from './MaterialInvFileTab';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport ResultEntryTransactionTab from './ResultEntryTransactionTab';\r\nimport DynamicSlideoutMaterial from './DynamicSlideoutMaterial';\r\nimport MaterialInventoryHistory from './MaterialInventoryHistory';\r\nimport AddPrinter from '../registration/AddPrinter';\r\n//import { ReactComponent as Reject } from '../../assets/image/reject.svg';\r\nimport { ReactComponent as RetireaMaterialInventory } from '../../assets/image/RetireaMaterialInventory.svg';\r\nimport BarcodeGeneratorComponent from '../../components/BarcodeGeneratorComponent';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass MaterialInventory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            sectionDataState: { skip: 0, take: 10 },\r\n            historyDataState: { skip: 0, take: 10 },\r\n            error: \"\",\r\n            isOpen: false,\r\n            selectedRecord: {},\r\n            filterCatList: [],\r\n            operation: \"\",\r\n            comboitem: undefined,\r\n            screenName: undefined,\r\n            selectedcombo: undefined, selectedMaterialCatRole: undefined,\r\n            isSelectedRecordChange: false,\r\n            selectedMaterialCat: undefined,\r\n            materialCatList: [],\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            disablefields: false,\r\n            dataResult: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            dataState: dataState,\r\n            columnName: '',\r\n            rowIndex: 0,\r\n            data: [],\r\n            splitChangeWidthPercentage: 30,\r\n            sidebarview: false\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    expandChange = event => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined\r\n                ? event.dataItem.aggregates\r\n                : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.state });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    render() {\r\n\r\n        //console.log('dxc :', this.props.Login.masterData.MaterialInventoryTrans && this.props.Login.masterData.MaterialInventoryTrans)\r\n        const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\r\n        const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\r\n        const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\r\n        const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\r\n        const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\r\n        // const printBarcodeId = this.state.controlMap.has(\"PrintBarcode\") ? this.state.controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n\r\n        let masterlistmain = []\r\n        this.props.Login.masterData.SelectedMaterialInventory &&\r\n            console.log('SelectedMaterialInventory :', this.props.Login.masterData.SelectedMaterialInventory)\r\n        // this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']\r\n        // this.props.Login.masterData.MaterialInventory &&\r\n        //     this.props.Login.masterData.MaterialInventory.map((temp, i) => {\r\n        //         return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata)\r\n        //     })\r\n        //let searchedDatalistmain = []\r\n        // if (this.props.Login.masterData.searchedData === undefined) {\r\n        //     searchedDatalistmain = undefined\r\n        // } else {\r\n        //     this.props.Login.masterData.searchedData &&\r\n        //         this.props.Login.masterData.searchedData.map((temp, i) => {\r\n        //             return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata)\r\n        //         })\r\n        // }\r\n        // let searchFieldList = []\r\n        let mandatoryFieldsMaterialFile = []\r\n        // if (this.props.Login.masterData.SelectedMaterialType) {\r\n        //     if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\r\n        //         if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\r\n        //             searchFieldList = [{\r\n        //                 feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n        //             }]\r\n        //         }\r\n        //         else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\r\n        //             searchFieldList = [{\r\n        //                 feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n        //             }]\r\n        //         }\r\n        //         else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\r\n        //             searchFieldList = [{\r\n        //                 feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n        //             }]\r\n        //         }\r\n        //     }\r\n        // }\r\n        this.props.Login.masterData.MaterialInventory = this.props.Login.masterData.MaterialInventory &&\r\n            sortData(this.props.Login.masterData.MaterialInventory, \"descending\", \"nmaterialinventorycode\")\r\n        this.props.Login.masterData.searchedData = this.props.Login.masterData.searchedData &&\r\n            sortData(this.props.Login.masterData.searchedData, \"descending\", \"nmaterialinventorycode\")\r\n\r\n        this.props.Login.masterData.MaterialCombo = this.props.Login.masterData.MaterialCombo &&\r\n            sortData(this.props.Login.masterData.MaterialCombo, \"ascending\", \"nmaterialcode\")\r\n        this.props.Login.masterData.MaterialType = this.props.Login.masterData.MaterialType &&\r\n            sortData(this.props.Login.masterData.MaterialType, \"ascending\", \"nmaterialtypecode\")\r\n        this.props.Login.masterData.MaterialCategoryMain = this.props.Login.masterData.MaterialCategoryMain &&\r\n            sortData(this.props.Login.masterData.MaterialCategoryMain, \"ascending\", \"nmaterialcatcode\")\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\", primaryKeyField: \"nmaterialinventorycode\",\r\n            fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode },\r\n            masterData: this.props.Login.masterData,\r\n            // isjsondata: true,\r\n            searchFieldList: this.props.Login.masterData.DesignMappedFeilds &&\r\n                JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['searchFieldList'] &&\r\n                JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['searchFieldList']\r\n        };\r\n        let mandatoryFieldsOpenDate = []\r\n        mandatoryFieldsOpenDate = [\r\n            { \"idsName\": \"Open Date\", \"dataField\": \"Open Date\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" }\r\n        ]\r\n        this.props.Login.screenname === 'IDS_MATERIALINVENTORYFILE' && (this.props.Login.selectedRecord &&\r\n            this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK) ?\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            :\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            ]\r\n        const breadCrumbData = this.state.filterData || [];\r\n        console.log('masterlistmain', masterlistmain)\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={64}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix>\r\n                        : \"\"\r\n                    }\r\n                    <Row noGutters>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"MaterialInventory\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.MaterialInventory}\r\n                                getMasterDetail={(master) => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory}\r\n                                primaryKeyField=\"nmaterialinventorycode\"\r\n                                //mainField=\"IDS_INVENTORYID\"\r\n                                mainField={this.props.Login.masterData.DesignMappedFeilds &&\r\n                                    JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['mainField']}\r\n                                firstField={this.props.Login.masterData.SelectedMaterialCrumb && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.YES ?\r\n                                    this.props.Login.masterData.DesignMappedFeilds &&\r\n                                    JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['firstField'] &&\r\n                                    JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['firstField'] :\r\n                                    \"Site\"\r\n                                    //||JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['firstField']\r\n                                }\r\n                                secondField={this.props.Login.masterData.DesignMappedFeilds &&\r\n                                    JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)['ListMasterProps'][0]['secondField']}\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                viewId={viewId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                //viewMaterialInventoryDetails={this.viewMaterialInventoryDetails}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":\r\n                                            <MaterialFilter\r\n                                                filterCatList={this.state.filterCatList || []}\r\n                                                materialCatList={this.state.materialCatList || []}\r\n                                                MaterialComboList={this.state.MaterialComboList || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}//\r\n                                                selectedMaterialCat={this.state.selectedMaterialCat || {}}\r\n                                                selectedMaterialcombo={this.state.selectedMaterialcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                ismaterialInventory={true}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                                openModal={() => this.props.getAddMaterialInventoryPopup(\r\n                                    \"create\", this.props.Login, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                    addId, this.props.Login.masterData,\r\n                                    this.state.selectedRecord)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?\r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        {this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ?\r\n                                            <Card className=\"border-0\">\r\n                                                <Card.Header>\r\n                                                    {/* <Card.Title className=\"product-title-main\">{this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORY\" })}</Card.Title> */}\r\n                                                    <Card.Title className=\"product-title-main\">{\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory['Inventory ID']\r\n                                                    }</Card.Title>\r\n                                                    <Card.Subtitle>\r\n                                                        <ProductList className=\"d-flex product-category icon-group-wrap\">\r\n                                                            <h2 className=\"product-title-subMaterial flex-grow-1\">\r\n                                                                <MediaLabel\r\n                                                                    className={`btn btn-outlined \r\n                                                                    outline-success btn-sm ml-3`}>\r\n                                                                    {/* <h2 className=\"product-title-sub flex-grow-1\"> */}\r\n                                                                    {\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_AVAILABLEQTY\" })\r\n                                                                        // this.props.Login.masterData.SelectedMaterialInventory &&\r\n                                                                        // this.props.Login.masterData.SelectedMaterialInventory['jsondata']['status']\r\n                                                                    }: {this.props.Login.masterData.MaterialInventoryTrans.length > 0 ?\r\n                                                                        this.props.Login.masterData.MaterialInventoryTrans && this.props.Login.masterData.MaterialInventoryTrans[0]['Available Quantity'] === this.props.Login.masterData.MaterialInventoryTrans[0]['Overall Available Quantity'] ?\r\n                                                                            this.props.Login.masterData.MaterialInventoryTrans[0]['Overall Available Quantity'] : this.props.Login.masterData.MaterialInventoryTrans &&\r\n                                                                            this.props.Login.masterData.MaterialInventoryTrans[0]\r\n                                                                            //[0]['jsondata']\r\n                                                                            ['Available Quantity'] + ' / '\r\n                                                                            + this.props.Login.masterData.MaterialInventoryTrans[0]\r\n                                                                            //[0]['jsondata']\r\n                                                                            ['Overall Available Quantity'] : \"-\"}\r\n                                                                    {/*   {':'}\r\n                                                                    {\r\n                                                                        this.props.intl.formatMessage({ id: \"IDS_OVAERALLAVAILABLEQTY\" })\r\n                                                                        // this.props.Login.masterData.SelectedMaterialInventory &&\r\n                                                                        // this.props.Login.masterData.SelectedMaterialInventory['jsondata']['status']\r\n                                                                    }: {this.props.Login.masterData.MaterialInventoryTrans.length > 0 ? this.props.Login.masterData.MaterialInventoryTrans &&\r\n                                                                        this.props.Login.masterData.MaterialInventoryTrans[0]\r\n                                                                        //[0]['jsondata']\r\n                                                                        ['Overall Available Quantity'] : \"-\"} */}\r\n                                                                </MediaLabel>\r\n\r\n\r\n                                                            </h2>\r\n\r\n                                                            <div className=\"d-inline \">\r\n                                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWMATERIALINVDETAILS\" })}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={this.viewMaterialInventoryDetails}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faEye}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_VIEWMATERIALINVDETAILS\" })} />\r\n\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                    //  data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.getAddMaterialInventoryPopup(\r\n                                                                            \"update\", this.props.Login, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                                                            editId, this.props.Login.masterData,\r\n                                                                            this.state.selectedRecord)\r\n                                                                    }\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    //  data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.ConfirmDelete(deleteId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })}\r\n                                                                    //  data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.openDatePopup(this.props.Login.masterData, openDateId, this.props.Login.userInfo)\r\n                                                                    }\r\n                                                                // disabled={this.props.Login.masterData.\r\n                                                                //     SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\r\n                                                                //     true : false}\r\n                                                                // disabled={this.props.Login.masterData.\r\n                                                                //     SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\r\n                                                                //     true : false}\r\n\r\n                                                                // disabled={this.props.Login.masterData.\r\n                                                                //     SelectedMaterialCrumb['jsondata'].IDS_OPENEXIPIRYNEED === '4' ?\r\n                                                                //     true : false}\r\n\r\n                                                                //disabled={true}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faCalendar}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RELEASE\" })}\r\n                                                                    //   data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.updateMaterialStatus(releaseId, 1)\r\n                                                                    }\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faRocket}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RELEASE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                                                                    //  data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.updateMaterialStatus(retireId, 2)\r\n                                                                    }\r\n                                                                >\r\n                                                                    <RetireaMaterialInventory />\r\n                                                                    {/* <FontAwesomeIcon icon={faUserTimes} /> */}\r\n                                                                    {/* <Reject className=\"custom_icons\" width=\"20\" height=\"20\" /> */}\r\n                                                                    {/* <FontAwesomeIcon icon={faEraser}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })} /> */}\r\n                                                                    {/* <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })} /> */}\r\n\r\n                                                                    {/* <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })} /> */}\r\n\r\n                                                                </Nav.Link>\r\n                                                                \r\n                                                                  {/* //ALPD-5325 Material Inventory: Print barcode */}\r\n                                                                  <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })}\r\n                                                                    onClick={(e) => this.barcodePrintMaterialInventory()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faBarcode}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n\r\n                                                                {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })}\r\n                                                                 //   data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.printBarcode()\r\n                                                                    }\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPrint}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })} />\r\n                                                                </Nav.Link> */}\r\n                                                            </div>\r\n                                                        </ProductList>\r\n                                                    </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                        {this.state.showInventoryDetails &&\r\n\r\n\r\n                                                            // this.props.Login.masterData.DesignMappedFeilds &&\r\n                                                            // JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)\r\n                                                            // [this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===1?\r\n                                                            //     'MaterialInventoryStandardViewFields':this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode===2?\r\n                                                            //     'MaterialInventoryVolumetricViewFields':'MaterialInventoryMatInventViewFields'\r\n                                                            // ].map((field, index) =>\r\n                                                            //     <Col md={4} key={index}>\r\n                                                            //         <FormGroup>\r\n                                                            //             <FormLabel>\r\n                                                            //                 <FormattedMessage id={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} message={field[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode]} />\r\n                                                            //             </FormLabel>\r\n                                                            //             <ReadOnlyText>{\r\n                                                            //                 field.hasOwnProperty('isDateFeild')? this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\r\n                                                            //              rearrangeDateFormatDateOnly(this.props.Login.userInfo\r\n                                                            //                     ,this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] )\r\n                                                            //                 : \"-\":\r\n                                                            //                 this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]] ?\r\n                                                            //                     this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label ?\r\n                                                            //                         this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]].label\r\n                                                            //                         : this.props.Login.masterData.SelectedMaterialInventory.jsondata[field[designProperties.VALUE]]\r\n                                                            //                     : \"-\"}</ReadOnlyText>\r\n                                                            //         </FormGroup>\r\n                                                            //     </Col>\r\n                                                            // )\r\n                                                            <SampleInfoView\r\n                                                                data={this.props.Login.masterData.SelectedMaterialInventory}\r\n                                                                SingleItem={JSON.parse(this.props.Login.masterData.DesignMappedFeilds['jsondata'].value)\r\n                                                                [\r\n                                                                    'MaterialInventoryViewFields'\r\n                                                                ]}\r\n                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                // ALPD-950\r\n                                                                size={4}\r\n\r\n                                                            />\r\n\r\n                                                        }\r\n                                                    </Row>\r\n                                                    {this.state.showInventoryDetails ? \"\" : this.props.Login.masterData && <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n                                                </Card.Body>\r\n                                            </Card> : \"\"}\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                { }\r\n                {\r\n                    (this.props.Login.openModal || this.props.Login.openChildModal) &&\r\n                    <SlideOutModal\r\n                        show={(this.props.Login.openModal || this.props.Login.openChildModal)}\r\n                        closeModal={this.closeModal}\r\n                        buttonLabel={this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? 'Print' : undefined}\r\n                        hideSave={this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? true : false}\r\n                        operation={this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? '' :\r\n                            this.props.Login.operation}\r\n                        printBarcode={this.props.Login.screenname === \"IDS_PRINTBARCODE\" ? true : false}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ? 'IDS_TRANSFERQUANTITY'\r\n                            : this.props.Login.screenname}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.screenname !== 'IDS_MATERIALINVENTORYFILE' ?\r\n                            this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1\r\n                                || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ||\r\n                                this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3 ||\r\n                                this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 4) && this.dynamicmandatoryFeilds(this.props.Login.masterData.selectedTemplate[0].jsondata)\r\n                                : this.dynamicmandatoryFeilds(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata) : mandatoryFieldsMaterialFile}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={\r\n                            this.props.Login.loadPrinter ?\r\n                                <AddPrinter\r\n                                    printer={this.props.Login.printer}\r\n                                    selectedPrinterData={this.state.selectedPrinterData}\r\n                                    PrinterChange={this.PrinterChange}\r\n                                /> :\r\n                                this.props.Login.loadEsign ?\r\n                                    <Esign operation={this.props.Login.operation}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                    />\r\n                                    :\r\n                                    this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\" ?\r\n                                        <AddMaterialFile\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChangeFile}\r\n                                            onDrop={this.onDropMaterialFile}\r\n                                            deleteAttachment={this.deleteAttachment}\r\n                                            onComboChange={this.onComboChange}\r\n                                            linkMaster={this.props.Login.linkMaster}\r\n                                            maxSize={20}\r\n                                            maxFiles={1}\r\n                                            multiple={false}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORYFILE\" })}\r\n                                            name=\"testfilename\"\r\n                                        /> //ALPD-5325 Material Inventory: Print barcode\r\n                                        : this.props.Login.showBarcode && this.props.Login.screenname === \"IDS_PRINTBARCODE\" ?\r\n                                            <>\r\n                                            {/* Rukshana on feb-07-2025 ALPD-5325 Material Inventory: Print barcode - Added props needdisplaydata={true},displayData,\r\n                                            and changed font size,width,height */}\r\n                                                <BarcodeGeneratorComponent\r\n                                                    barcodeData={this.props.Login.selectedRecord.generateBarcodeValue}\r\n                                                    displayData={[this.props.Login.masterData.\r\n                                                        SelectedMaterialInventory['Inventory ID'],this.props.Login.masterData.\r\n                                                        SelectedMaterialInventory['Expiry Date & Time'].split(\" \")[0]]}\r\n                                                \r\n                                                    additionalDesignsToPrint={this.props.Login.selectedRecord.additionDesignToPrint}\r\n                                                    background=\"#ffffff\"\r\n                                                    textAlign=\"center\"\r\n                                                    fontSize={20}\r\n                                                    fontOption=\"bold\"\r\n                                                    textPosition=\"bottom\"\r\n                                                    lineColor=\"#000000\"\r\n                                                    width={3}\r\n                                                    height={50}\r\n                                                    format=\"CODE128\"\r\n                                                    margin={10}\r\n                                                    marginTop={50}\r\n                                                    marginBottom={undefined}\r\n                                                    marginLeft={3}\r\n                                                    marginRight={undefined}\r\n                                                    flat={true}\r\n                                                    printBarcode={true}\r\n                                                    displayValue={true}\r\n                                                    needdisplaydata={true}\r\n                                                />\r\n\r\n                                                {/* ALPD-5325 Material Inventory: Print barcode commented by rukshana as its handled in barcode generatorr component*/}\r\n                                                {/* <Col> */}\r\n                                                    {/* <Row >\r\n                                                        <br >\r\n                                                        </br>\r\n                                                    </Row> */}\r\n                                                    {/* <Card className=\"one\"> */}\r\n                                                        {/* <Card.Header>\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                <h4>{this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORYDETAILS\" })}</h4>\r\n                                                            </span>\r\n                                                        </Card.Header> */}\r\n                                                        {/* <Card.Body> */}\r\n\r\n                                                        {/* Commented by rukshana\r\n                                                            <Row>\r\n                                                                {this.props.Login.masterData.SelectedMaterialInventory &&\r\n                                                                    typeof this.props.Login.masterData.SelectedMaterialInventory === \"object\" ? (\r\n                                                                     (Object.entries(this.props.Login.masterData.SelectedMaterialInventory)).map(([key, value], index) => (\r\n                                                                       key=='Inventory ID' || key=='Expiry Date & Time' ?\r\n                                                                       \r\n                                                                        <Col md={6}\r\n                                                                            key={`specInfo_${key}`}>\r\n                                                                            \r\n                                                                            <FormGroup>\r\n                                                                                <FormLabel>{this.props.intl.formatMessage({ id: key })}</FormLabel>\r\n                                                                                <ReadOnlyText>\r\n                                                                                    {typeof value === \"object\" && value !== null ? value.label || JSON.stringify(value) : value}\r\n                                                                                </ReadOnlyText>\r\n                                                                            </FormGroup>\r\n                                                                      \r\n                                                                        </Col>\r\n                                                                     :\"\"\r\n                                                                       \r\n                                                                   ))\r\n                                                                   \r\n                                                                ) : (\r\n                                                                    <p>No data available</p>\r\n                                                                )}\r\n                                                            </Row> */}\r\n                                                        {/* </Card.Body>\r\n                                                    </Card>*/}\r\n                                                {/* </Col>  */}\r\n                                            </>\r\n                                            //ALPD-5325 Material Inventory: Print barcode\r\n                                            :\r\n                                            <DynamicSlideoutMaterial\r\n                                                operation={this.props.Login.operation}\r\n                                                disablefields={this.state.disablefields}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                // isSectionneed={this.props.Login.isSectionneed ? this.props.Login.isSectionneed :\r\n                                                //     this.props.Login.masterData.SelectedMaterialCategory.needSectionwise}\r\n                                                isSectionneed={this.props.Login.masterData.SelectedMaterialCategory.needSectionwise === transactionStatus.NO ? this.props.Login.masterData.SelectedMaterialCategory.needSectionwise : this.props.Login.isSectionneed}\r\n                                                //isSectionneed={4}\r\n                                                needsectionwise={this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise}\r\n                                                //enabledisableSectionInvTrans={this.state.selectedRecord['IDS_INVENTORYTRANSACTIONTYPE'] && this.state.selectedRecord['IDS_INVENTORYTRANSACTIONTYPE'].value}\r\n                                                ismaterialSectionneed={this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise :\r\n                                                    this.state.selectedRecord['Inventory Transaction Type']\r\n                                                        && this.state.selectedRecord['Inventory Transaction Type'].value === 2 ? 4 : 3}\r\n                                                screenname={this.props.Login.screenname}\r\n                                                templateData={this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate &&\r\n                                                    this.props.Login.masterData.selectedTemplate[0].jsondata\r\n                                                    : this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata}\r\n                                                onNumericInputChange={this.onNumericInputChange}\r\n                                                enabledisableAvailableQty={this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value}\r\n                                                handleChange={this.handleChange}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                // isExpiryNeed={parseInt(this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].isExpiryNeed)}\r\n                                                comboData={this.props.Login.templateData && this.props.Login.templateData.comboData}\r\n                                                onComboChange={this.onComboChangedynamic}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                nprecision={this.props.Login.masterData.nprecision}\r\n                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                isreusable={this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Reusable']}\r\n                                                needfeild={this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED ? transactionStatus.YES :\r\n                                                    transactionStatus.NO}\r\n                                            />\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n\r\n                {this.props.Login.showModalPopup &&\r\n                    <ModalShow\r\n                        modalShow={true}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        modalTitle={this.props.intl.formatMessage({ id: this.props.Login.ModaTitle })}\r\n                        needSave={this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true}\r\n                        closeModal={this.closeModalShow}\r\n                        onSaveClick={this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        mandatoryFields={this.props.Login.ModaTitle === 'IDS_OPENDATE' && mandatoryFieldsOpenDate}\r\n                        modalBody={\r\n                            this.props.Login.ModaTitle === 'IDS_OPENDATE' ? <AddMaterialOpenDate\r\n                                isMultiLingualLabel={true}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })}\r\n                                intl={this.props.intl.formatMessage}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                dateonly={true}\r\n                                onComboChange={this.onComboChangeopendate}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChange={this.handleDateChange}\r\n                                mandatory={true}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                            /> :\r\n                                this.props.Login.ModaTitle !== 'IDS_QUANTITYTRANSACTION' ?\r\n                                    <Row>\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'Inventory ID'} message={'Inventory ID'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'] ?\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        {this.accordianDesign(this.props.Login.masterData.selectedTemplate[0].jsondata,\r\n                                            this.props.Login.masterData.SelectedMaterialInventory.jsondata)}\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_OPENDATE'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ?\r\n                                                        rearrangeDateFormatDateOnly(this.props.Login.userInfo,\r\n                                                            this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE']\r\n                                                        )\r\n                                                        : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row> :\r\n                                    <Row>\r\n                                        {this.accordianDesign(this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata,\r\n                                            this.props.Login.viewQuantityTransdetails)}\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_AVAILABLEQTY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['namountleft'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['namountleft'] : \"-\"\r\n                                                        // this.props.Login.navailableqty\r\n                                                    }\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col md='4'>\r\n                                            <FormGroup>\r\n                                                <FormLabel><FormattedMessage id={'IDS_ISSUEDQUANTITY'} message={'Open Date'} /></FormLabel>\r\n                                                <ReadOnlyText>\r\n                                                    {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                        this.props.Login.viewQuantityTransdetails['nqtyissued'] ?\r\n                                                        this.props.Login.viewQuantityTransdetails['nqtyissued'] : \"-\"}\r\n                                                </ReadOnlyText>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                        }\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n            return {\r\n                \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n                \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\"\r\n            };\r\n        });\r\n        return temparray;\r\n    }\r\n    quantityTransaction = (param) => {\r\n        //if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode === transactionStatus.RELEASED) {\r\n        let ncontrolCode = this.props.Login.ncontrolCode\r\n        let openModal = this.props.Login.openModal\r\n        openModal = true\r\n        ncontrolCode = param;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal }\r\n        }\r\n        this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode)\r\n        // }\r\n        // else {\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRELEASEDINVENTORY\" }));\r\n\r\n        // }\r\n    }\r\n    viewQuantityTrans = (viewQuantityTransdetails) => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        let ModaTitle = this.props.Login.ModaTitle;\r\n        showModalPopup = true;\r\n        ModaTitle = 'IDS_QUANTITYTRANSACTION'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup, ModaTitle, viewQuantityTransdetails }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    accordianDesign = (Template, selectedmasterlistmain1) => {\r\n        let selectedmasterlistmain = [];\r\n        selectedmasterlistmain.push(selectedmasterlistmain1)\r\n        let designaccordian = [];\r\n        Template.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.inputtype === 'combo') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText >\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            selectedmasterlistmain[0][component.label]['label'] : \"-\"}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'date') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            rearrangeDateFormatDateOnly(\r\n                                                this.props.Login.userInfo, selectedmasterlistmain[0][component.label])\r\n                                            // selectedmasterlistmain[0][component.label]\r\n                                            : \"-\"}\r\n\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'toggle') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] &&\r\n                                            selectedmasterlistmain[0][component.label] === transactionStatus.YES ?\r\n                                            'Yes' : 'No'}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (component.label !== undefined) {\r\n                            if (!component.needAccordian) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup >\r\n\r\n                                        <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                        <ReadOnlyText >\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.inputtype === 'combo') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'date') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'toggle') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] &&\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ?\r\n                                                'Yes' : 'No'}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n        })\r\n        return designaccordian;\r\n    }\r\n    onComboChangeopendate = (comboData, control) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[control] = comboData;\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    // onComboChangedynamic = (comboData, control, customName) => {\r\n    //     let comboName = customName || control.label;\r\n    //     let selectedRecord = this.state.selectedRecord || {};\r\n    //     let comboDataList=this.props.Login.templateData.comboData\r\n    //     //   if(comboData!==null){\r\n    //     if (comboData) {\r\n    //         selectedRecord[comboName] = comboData;\r\n    //     } else {\r\n    //         selectedRecord[comboName] = []\r\n    //     }\r\n    //     if (control.inputtype === 'date') {\r\n    //         const selectedRecord = this.state.selectedRecord || {};\r\n    //         selectedRecord[`tz${control.label}`] = comboData;\r\n    //         this.setState({ selectedRecord });\r\n    //     }\r\n    //     else if (control.parent && control.parent === true) {\r\n    //         let data = [];\r\n    //         const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata\r\n    //         Layout.map((row) => {\r\n    //             row.children.map((column) => {\r\n    //                 column.children.map((component) => {\r\n    //                     if (component.inputtype === 'combo') {\r\n    //                         data.push(component)\r\n    //                     }\r\n    //                     component.hasOwnProperty(\"children\") && component.children.map(\r\n    //                         (componentrow) => {\r\n    //                             if (componentrow.inputtype === 'combo') {\r\n    //                                 data.push(componentrow)\r\n    //                             }\r\n    //                         }\r\n    //                     )\r\n    //                 })\r\n    //             })\r\n    //         })\r\n    //         const comboComponents = data\r\n    //         let parentcolumnlist = []\r\n    //         comboComponents.map(columnList => {\r\n    //             if (columnList.hasOwnProperty('child')) {\r\n    //                 parentcolumnlist.push(columnList)\r\n    //             }\r\n    //         })\r\n    //         if (comboData !== null) {\r\n    //             let childColumnList = {};\r\n    //             parentcolumnlist.map(columnList => {\r\n    //                 const val = comboChild(data, columnList, childColumnList, true);\r\n    //                 data = val.data;\r\n    //                 childColumnList = val.childColumnList\r\n    //             })\r\n    //             const inputParem = {\r\n    //                 child: control.child,\r\n    //                 source: control.source,\r\n    //                 primarykeyField: control.valuemember,\r\n    //                 value: comboData.value && comboData.value,\r\n    //                 item: comboData.item\r\n    //             }\r\n    //             if (control.label === 'Section') {\r\n    //                 // comboData\r\n    //                 this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n    //                     this.props.Login.userInfo, selectedRecord, this.props.Login.templateData, true)\r\n    //             }\r\n    //             else {\r\n    //                 this.props.getMaterialChildValues(inputParem,\r\n    //                     this.props.Login.userInfo, selectedRecord,\r\n    //                     parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0]\r\n    //                     , childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData)\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             parentcolumnlist.map(columnList => {\r\n    //                 if(columnList.hasOwnProperty('child'))\r\n    //                 {\r\n    //                     columnList.child.map(childLabel=>{\r\n    //                         selectedRecord={\r\n    //                             ...selectedRecord,\r\n    //                             [childLabel.label]:\"\"\r\n    //                         }\r\n    //                         comboDataList[childLabel.label]=\"\"\r\n    //                         if(childLabel.hasOwnProperty('dependentComponent'))\r\n    //                         {\r\n    //                             selectedRecord={\r\n    //                                 ...selectedRecord,\r\n    //                                 [childLabel.dependentComponent]:\"\"\r\n    //                             } \r\n    //                         }\r\n    //                     })\r\n    //                 }\r\n    //                 //selectedRecord=\"\" \r\n    //             })\r\n    //            // this.setState({ selectedRecord });\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: { selectedRecord,comboDataList }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //     }\r\n    //     else {\r\n    //         if (control.label === 'Transaction Type'\r\n    //             // || control.label === 'IDS_SECTION'\r\n    //         ) {\r\n    //             if(comboData!==null)\r\n    //             {\r\n    //                 this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n    //                     this.props.Login.userInfo, selectedRecord, this.props.Login.templateData)\r\n    //             }\r\n    //             else{\r\n    //                 selectedRecord[control.label]=\"\"\r\n    //                 if(control.hasOwnProperty('dependentComponent'))\r\n    //                 {\r\n    //                     selectedRecord[control.dependentComponent]=\"\"\r\n    //                 }\r\n    //                 const updateInfo = {\r\n    //                     typeName: DEFAULT_RETURN,\r\n    //                     data: { selectedRecord  }\r\n    //                 }\r\n    //                 this.props.updateStore(updateInfo);\r\n    //             } \r\n    //         }\r\n    //         else {\r\n    //             selectedRecord[control.label] = comboData;\r\n    //             this.setState({ selectedRecord });\r\n    //         }\r\n    //     }\r\n    //     //}\r\n    //     // else\r\n    //     // {\r\n    //     //     selectedRecord=\"\"\r\n    //     //     this.setState({ selectedRecord });\r\n    //     // }\r\n    // }\r\n    onComboChangedynamic = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (comboData !== null) {\r\n            //const comboDatamain = this.props.Login.templateData.comboData\r\n            if (control.valuemember && control.nquerybuildertablecode) {\r\n                comboData[\"item\"] = {\r\n                    ...comboData[\"item\"], pkey: control.valuemember,\r\n                    nquerybuildertablecode: control.nquerybuildertablecode, \"source\": control.source\r\n                }\r\n            }\r\n            let comboName = customName || control.label;\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.inputtype === 'date') {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[`tz${control.label}`] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (this.props.Login.screenname === 'IDS_QUANTITYTRANSACTION' ?\r\n                control.label !== 'Section' ? control.parent && control.parent === true : true : control.parent && control.parent === true) {\r\n                let data = [];\r\n                const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata\r\n                Layout.map((row) => {\r\n                    row.children.map((column) => {\r\n                        column.children.map((component) => {\r\n                            if (component.hasOwnProperty('child')) {\r\n                                component.child.map((c) => {\r\n                                    if (comboData === null) {\r\n                                        if (c.label === control.label) {\r\n                                            if (control.label === 'Section') {\r\n                                                if (this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.YES)\r\n                                                    delete selectedRecord[\"Available Quantity/Unit\"]\r\n                                                //  delete selectedRecord[\"Transaction Type\"]  \r\n                                                // delete selectedRecord[\"Inventory Transaction Type\"]  \r\n                                            }\r\n                                            // delete comboDatamain[\"Transaction Type\"] \r\n                                            //  delete comboDatamain[\"Site\"] \r\n                                            //  delete comboDatamain[control.label] \r\n                                            delete selectedRecord[control.label]\r\n                                            //delete selectedRecord[component.label]  \r\n\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            if (component.inputtype === 'combo') {\r\n                                data.push(component)\r\n                            }\r\n                            component.hasOwnProperty(\"children\") && component.children.map(\r\n                                (componentrow) => {\r\n                                    if (componentrow.inputtype === 'combo') {\r\n                                        data.push(componentrow)\r\n                                    }\r\n                                }\r\n                            )\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = data\r\n                if (comboData) {\r\n                    let parentcolumnlist = []\r\n                    comboComponents.map(columnList => {\r\n                        if (columnList.hasOwnProperty('child')) {\r\n                            if (control.label === columnList.label)\r\n                                parentcolumnlist.push(columnList)\r\n                        }\r\n                    })\r\n                    let childColumnList = {};\r\n                    parentcolumnlist.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        if (control.label === columnList.label)\r\n                            childColumnList = val.childColumnList\r\n                    })\r\n                    const inputParem = {\r\n                        child: control.child,\r\n                        source: control.source,\r\n                        primarykeyField: control.valuemember,\r\n                        value: comboData.value,\r\n                        item: comboData.item\r\n                    }\r\n                    //       if (control.label === 'Site') {\r\n                    //         // comboData\r\n                    //         this.props.getSiteonchange(comboData, this.props.Login.masterData,\r\n                    //             this.props.Login.userInfo, selectedRecord, this.props.Login.templateData, true)\r\n                    //     }\r\n                    //    else \r\n\r\n                    if (control.label === 'Section') {\r\n                        // comboData\r\n                        this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n                            this.props.Login.userInfo, selectedRecord, this.props.Login.templateData, true)\r\n                    }\r\n                    else {\r\n                        this.props.getMaterialChildValues(inputParem,\r\n                            this.props.Login.userInfo, selectedRecord,\r\n                            parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, control.label\r\n                            , childColumnList[control.label][0].label, this.props.Login.masterData)\r\n                    }\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        selectedRecord\r\n                        //    ,disablefields:true\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                if (control.label === 'Transaction Type'\r\n                    // || control.label === 'IDS_SECTION'\r\n                ) {\r\n                    this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.templateData)\r\n                }\r\n                else {\r\n                    selectedRecord[control.label] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (control.label === 'Storage Location') {\r\n                delete selectedRecord[control.label];\r\n            }\r\n            else if (control.label === 'Supplier') {\r\n                delete selectedRecord[control.label];\r\n            }\r\n            else if (control.label === 'Manufacturer') {\r\n                delete selectedRecord[control.label];\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    //ALPD-5325 Material Inventory: Print barcode\r\n    barcodePrintMaterialInventory = () => {\r\n\r\n        if (this.props.Login.masterData.SelectedMaterialInventory) {\r\n            if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\r\n\r\n                //let materialName = this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'] && this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'];\r\n                const generateBarcodeValue = this.props.Login.masterData.SelectedMaterialInventory['Inventory ID'];\r\n                \r\n                const additionDesignToPrint = generateBarcodeValue + \"<br>\" + generateBarcodeValue\r\n                    + \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + generateBarcodeValue;\r\n\r\n                const selectedRecord = {\r\n                    generateBarcodeValue,\r\n                    additionDesignToPrint\r\n                };\r\n                let showBarcode = true;\r\n                let openModal = true;\r\n                let screenname = 'IDS_PRINTBARCODE';\r\n                let operation = '';\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { openModal, showBarcode, screenname, selectedRecord, operation }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n        }\r\n    }\r\n    //ALPD-5325 Material Inventory: Print barcode end\r\n\r\n    viewMaterialInventoryDetails = () => {\r\n        // console.log('this.state.SelectedMaterialInventory :', this.state.SelectedMaterialInventory)\r\n        // console.log('tthis.props.Login.showModalPopup :', this.props.Login.masterData.SelectedMaterialInventory)\r\n        if (this.props.Login.masterData.SelectedMaterialInventory) {\r\n            if (this.props.Login.masterData.SelectedMaterialInventory.length !== 0) {\r\n                // let showModalPopup = this.props.Login.showModalPopup;\r\n                let showInventoryDetails = this.state.showInventoryDetails;\r\n                //showModalPopup = true;\r\n\r\n                if (showInventoryDetails === undefined) {\r\n                    this.setState({ showInventoryDetails: true })\r\n                }\r\n                if (showInventoryDetails) {\r\n                    this.setState({ showInventoryDetails: false })\r\n                }\r\n                else {\r\n                    this.setState({ showInventoryDetails: true })\r\n                }\r\n\r\n\r\n                // ModaTitle = 'IDS_MATERIALINVENTORYDETAILS'\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //    // data: { showModalPopup, ModaTitle }\r\n                //    data: { showInventoryDetails, ModaTitle }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALINVENTORY\" }))\r\n        }\r\n    }\r\n    closeModalShow = () => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        showModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\"\r\n        });\r\n    }\r\n    onSaveMaterialFile = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let testFileArray = [];\r\n\r\n        let testFile = {\r\n            nmaterialconfigcode: this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\r\n            nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\r\n            nmaterialinventoryfilecode: selectedRecord.nmaterialinventoryfilecode ? selectedRecord.nmaterialinventoryfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        testFile['sdefaultstatus'] = {}\r\n        testFile['sdefaultstatus'] = testFile['ndefaultstatus'] === 3 ? 'Yes' : 'No'\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, testFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\r\n                    tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    tempData[\"dcreateddate\"] = this.props.Login.dcreateddate &&\r\n                        convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo)\r\n\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    testFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                testFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\r\n                testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\r\n                testFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                testFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                testFile[\"dcreateddate\"] = this.props.Login.dcreateddate &&\r\n                    convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo)\r\n                testFileArray.push(testFile);\r\n            }\r\n        } else {\r\n            testFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename.trim()), false);\r\n            testFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"), false);\r\n            testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            testFile[\"slinkname\"] = selectedRecord['nlinkcode'].label && selectedRecord['nlinkcode'].label;\r\n            testFile[\"dcreateddate\"] = this.props.Login.dcreateddate &&\r\n                convertDateTimetoStringDBFormat(this.props.Login.dcreateddate, this.props.Login.userInfo)\r\n            testFile[\"ssystemfilename\"] = \"\";\r\n            testFile[\"nfilesize\"] = 0;\r\n            testFileArray.push(testFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"materialinventoryfile\", JSON.stringify(testFileArray[0]));\r\n        //let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\", primaryKeyField: \"nmaterialinventorycode\" };\r\n            //selectedId = selectedRecord[\"nmaterialinventoryfilecode\"];\r\n        }\r\n        let inputParam;\r\n        if (this.props.Login.operation === 'create') {\r\n            inputParam = {\r\n                // inputData: { userinfo: this.props.Login.userInfo },\r\n                inputData: {\r\n                    \"userinfo\": {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                        //ALPD-1628(while saving the file and link,audit trail is not captured the respective language)\r\n\r\n                        slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n\r\n                    }\r\n                },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"create\",\r\n                classUrl: \"materialinventory\",\r\n                methodUrl: \"MaterialInventoryFile\", postParam, searchRef: this.searchRef, isChild: true\r\n            }\r\n        }\r\n        else {\r\n            inputParam = {\r\n                // inputData: { userinfo: this.props.Login.userInfo },\r\n                inputData: {\r\n                    \"userinfo\": {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                        //ALPD-1628(while saving the file and link,audit trail is not captured the respective language)\r\n\r\n                        slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n                    }\r\n                },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"update\",\r\n                classUrl: \"materialinventory\",\r\n                methodUrl: \"MaterialInventoryFile\", postParam\r\n            }\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    dynamicmandatoryFeilds = (Template) => {\r\n        console.log('mandatory', Template)\r\n        let mandatoryFeildsMaterial = [];\r\n        let slanguagetypecode = this.props.Login.userInfo.slanguagetypecode;\r\n        let bool = false;\r\n        //ALPD-4842 material Inventory-->while add the Quantity transaction, section not showing\r\n        let sectionneed = this.props.Login.masterData.SelectedMaterialCategory && this.props.Login.masterData.SelectedMaterialCategory.needSectionwise || -1;\r\n        Template.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.mandatory) {\r\n                        if (component.inputtype === 'combo') {\r\n\r\n                            if (component.label === 'Section') {\r\n                                if (sectionneed === transactionStatus.YES) {\r\n                                    mandatoryFeildsMaterial.push({\r\n                                        // \"idsName\": component.label, \"dataField\": component.label,\r\n                                        \"idsName\": component.displayname[slanguagetypecode], \"dataField\": component.label,\r\n                                        \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    // \"idsName\": component.label, \"dataField\": component.label,\r\n                                    \"idsName\": component.displayname[slanguagetypecode], \"dataField\": component.label,\r\n                                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            mandatoryFeildsMaterial.push({\r\n                                // \"idsName\": component.label, \"dataField\": component.label,\r\n                                \"idsName\": component.displayname[slanguagetypecode], \"dataField\": component.label,\r\n                                \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                            })\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.mandatory) {\r\n                            if (componentrow.inputtype === 'combo') {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    // \"idsName\": componentrow.label, \"dataField\": componentrow.label,\r\n                                    \"idsName\": componentrow.displayname[slanguagetypecode], \"dataField\": componentrow.label,\r\n                                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                            else {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    // \"idsName\": componentrow.label, \"dataField\": componentrow.label,\r\n                                    \"idsName\": componentrow.displayname[slanguagetypecode], \"dataField\": componentrow.label,\r\n                                    \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        if (this.state.selectedRecord['Transaction Type']) {\r\n            // if ( (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\"&&\r\n            // this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise!== transactionStatus.YES)\r\n            //  ? this.props.Login.isSectionneed !== transactionStatus.YES :\r\n            //  this.state.selectedRecord['Transaction Type'].value === 2 ? false : true) {\r\n            if (this.state.selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED ||\r\n                this.state.selectedRecord['Transaction Type'].value === transactionStatus.REJECT ? true : false) {\r\n                bool = true;\r\n                mandatoryFeildsMaterial.map((temp, i) => {\r\n                    if (temp.dataField === 'Section' || temp.dataField === 'Site') {\r\n                        delete mandatoryFeildsMaterial[i];\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\" ?\r\n            this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.NO ?\r\n                this.props.Login.isSectionneed === transactionStatus.YES ? false : true\r\n                : this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.NO && bool !== true\r\n            : this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === transactionStatus.NO) {\r\n            mandatoryFeildsMaterial.map((temp, i) => {\r\n                if (temp.dataField === 'Section') {\r\n                    delete mandatoryFeildsMaterial[i];\r\n                }\r\n            });\r\n        }\r\n        //console.log('mandatoryFeildsMaterial', mandatoryFeildsMaterial)\r\n        return mandatoryFeildsMaterial;\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        {\r\n            // let dataresultarr = []\r\n            //let IDS_TRANSACTIONDATE;\r\n            // this.props.Login.masterData[\"MaterialInventoryTrans\"] &&\r\n            //     this.props.Login.masterData[\"MaterialInventoryTrans\"].map((temp, index) => {\r\n            //         // temp.jsondata['IDS_TRANSACTIONDATE'] =\r\n            //         // this.props.Login.masterData[\"MaterialInventoryTrans\"][index].jsondata['IDS_TRANSACTIONDATE'] =\r\n            //         //     rearrangeDateFormatDateOnly(\r\n            //         //         this.props.Login.userInfo,\r\n            //         //         temp.jsondata['IDS_TRANSACTIONDATE']\r\n            //         //     )\r\n            //         //     temp.jsondata['IDS_TRANSACTIONDATE']=\r\n            //         //     rearrangeDateFormatDateOnly(\r\n            //         //         this.props.Login.userInfo,\r\n            //         //         temp.jsondata['IDS_TRANSACTIONDATE']\r\n            //         //     )\r\n            //         Object.entries(temp.jsondata).map(item => {\r\n            //             if (item[1] && item[1].hasOwnProperty('label')) {\r\n            //                 let key = item[0]\r\n            //                 let label = item[1].label\r\n            //                 let comboObject = { [key]: label }\r\n            //                 //x=y\r\n            //                 temp.jsondata = { ...temp.jsondata, ...comboObject }\r\n            //                 // dataresultarr.push({[x]:y})     \r\n            //             }\r\n            //         })\r\n            //         // for (let [key, value] of Object.entries(temp.jsondata)) {\r\n            //         //     if(key.hasOwnProperty('label'))\r\n            //         //         {\r\n            //         //             let  temp2=[key, value]\r\n            //         //             //x=y\r\n            //         //             temp.jsondata={...temp.jsondata,...temp2}\r\n            //         //            // dataresultarr.push({[x]:y})     \r\n            //         //         }\r\n            //         // }\r\n            //         return dataresultarr.push(temp.jsondata)\r\n            //     })\r\n            tabMap.set(\"IDS_INVENTORYTRANSACTION\",\r\n                <InvenotryTransaction\r\n                    Template={this.props.Login.masterData.QuantityTransactionTemplate &&\r\n                        this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    dataResult={process(sortData(this.props.Login.masterData[\"MaterialInventoryTrans\"], \"descending\", \"nmaterialinventtranscode\"),\r\n                        (this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\")\r\n                            ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\")\r\n                        ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n\r\n                    dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    masterData={this.props.Login.masterData}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    getTestDetails={this.props.getTestDetails}\r\n                    SelectedMaterialInventory={this.props.Login.masterData.SelectedMaterialInventory}\r\n                    quantityTransaction={this.quantityTransaction}\r\n                    // dataState={{ skip: 0, take: 10 }}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    QuantityTransactionForGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\r\n                        this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\r\n                        this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['QuantityTransactionForGrid'])}\r\n                    QuantityTransactionForExpandedGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\r\n                        this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\r\n                        this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['QuantityTransactionForExpandedGrid'])}\r\n                    viewQuantityTrans={this.viewQuantityTrans}\r\n                    selectedRecord={this.props.Login.selectedRecord}\r\n                    intl={this.props.intl}\r\n                    DesignMappedFeilds={JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\r\n                        this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\r\n                        this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)}\r\n                    screenName=\"IDS_QUANTITYTRANSACTION\"\r\n                />\r\n            );\r\n            tabMap.set(\"IDS_MATERIALINVENTORYFILE\",\r\n                <MaterialInvFileTab\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    MaterialFile={sortData(this.props.Login.masterData.MaterialInventoryFile, \"descending\", \"nmaterialinventoryfilecode\") || []}\r\n                    addMaterialFile={(param) => this.props.addMaterialInventoryFile(param, this.props.Login.masterData.SelectedMaterialInventory)}\r\n                    viewMaterialFile={this.viewMaterialFile}\r\n                    screenName=\"IDS_MATERIALINVENTORYFILE\"\r\n                    settings={this.props.settings}\r\n                />);\r\n            tabMap.set(\"IDS_RESULTENTRYTRANSACTION\",\r\n                <ResultEntryTransactionTab\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    dataResult={this.props.Login.masterData[\"ResultUsedMaterial\"] && process(this.props.Login.masterData[\"ResultUsedMaterial\"],\r\n                        (this.props.screenName === undefined || this.props.screenName === \"IDS_RESULTENTRYTRANSACTION\")\r\n                            ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenname === \"IDS_RESULTENTRYTRANSACTION\")\r\n                        ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n\r\n                    dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    masterData={this.props.Login.masterData}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    // dynamicFeildsForGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\r\n                    //     this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\r\n                    //     this.props.Login.\r\n                    //         masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['ResultUsedMaterialGrid'])}\r\n                    selectedRecord={this.props.Login.selectedRecord}\r\n                    intl={this.props.intl}\r\n                    screenName=\"IDS_RESULTENTRYTRANSACTION\"\r\n                />);\r\n            tabMap.set(\"IDS_MATERIALINVENTORYHISTORY\",\r\n                <MaterialInventoryHistory\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n\r\n                    dataResult={this.props.Login.masterData[\"MaterialInventoryHistory\"] && process(sortData(this.props.Login.masterData[\"MaterialInventoryHistory\"], \"descending\", \"nmaterialinventoryhistorycode\"),\r\n                        (this.props.screenName === undefined || this.props.screenName === \"IDS_MATERIALINVENTORYHISTORY\")\r\n                            ? this.state.historyDataState : { skip: 0, take: 10 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenname === \"IDS_MATERIALINVENTORYHISTORY\")\r\n                        ? this.state.historyDataState : { skip: 0, take: 10 }}\r\n\r\n                    dataStateChange={(event) => this.setState({ historyDataState: event.dataState })}\r\n                    masterData={this.props.Login.masterData}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    // dynamicFeildsForGrid={this.gridfillingColumn(JSON.parse(this.props.Login.masterData.DesignMappedFeildsQuantityTransaction &&\r\n                    //     this.props.Login.masterData.DesignMappedFeildsQuantityTransaction['jsondata'] !== null &&\r\n                    //     this.props.Login.\r\n                    //         masterData.DesignMappedFeildsQuantityTransaction['jsondata'].value)['ResultUsedMaterialGrid'])}\r\n                    selectedRecord={this.props.Login.selectedRecord}\r\n                    intl={this.props.intl}\r\n                    screenName=\"IDS_MATERIALINVENTORYHISTORY\"\r\n                />);\r\n        }\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onInputOnChangeFile = (event, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        // let isSelectedRecordChange = this.state.isSelectedRecordChange\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\r\n        } else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = optional2;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    updateMaterialStatus = (buttonId, nflag) => {\r\n        let inputParam = {}\r\n        let inputData = [];\r\n        let operation;\r\n        let masterData = this.props.Login.masterData\r\n        inputData[\"nflag\"] = nflag\r\n        operation = nflag === 1 ? 'RELEASED' : 'RETIRE'\r\n        inputData[\"nmaterialinventorycode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialinventorycode\r\n        inputData[\"nmaterialcode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialcode\r\n        inputData[\"nmaterialtypecode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = masterData[\"SelectedMaterialInventory\"].nmaterialcatcode\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo\r\n        inputData[\"nmaterialconfigcode\"] = this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode\r\n        inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: 'update',\r\n            selectedRecord: this.state.selectedRecord,\r\n            searchRef: this.searchRef,\r\n            dataState: this.state.dataState,\r\n            postParam: {\r\n                selectedObject: \"SelectedMaterialInventory\",\r\n                primaryKeyField: \"nmaterialinventorycode\",\r\n                inputListName: \"MaterialInventory\"\r\n            }\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, buttonId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, loadEsign: true, screenData: { inputParam, masterData }, operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    deleteRecordmain = (deleteParam) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = JSON.stringify(deleteParam.selectedRecord);\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                nmaterialconfigcode: this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\r\n                ncontrolCode: deleteParam.ncontrolCode,\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"materialinventory\",\r\n            operation: deleteParam.operation,\r\n            ncontrolCode: deleteParam.ncontrolCode,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_MATERIALINVENTORY\", dataState,\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_MATERIALINVENTORY\", operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        if (this.state.selectedMaterialCat !== undefined ? this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" : false) {\r\n            if (this.state.selectedMaterialcombo !== undefined ? this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" : false) {\r\n                // if (this.state.selectedMaterialCat[\"nmaterialcatcode\"] !== \"\" ) {\r\n                //     if (this.state.selectedMaterialcombo[\"nmaterialcode\"] !== \"\" ) {\r\n                inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n                inputData[\"materialCatList\"] = this.state.materialCatList;\r\n                inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value\r\n                inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n                if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n                    this.props.getMaterialInventoryByID(this.state.selectedcombo,\r\n                        this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIAL\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMATERIALCATEGORY\" }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        breadCrumbData.push(\r\n            {\r\n                \"label\": \"IDS_MATERIALTYPE\",\r\n                \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode] : \"NA\",\r\n\r\n            }, {\r\n\r\n            \"label\": \"IDS_MATERIALCAT\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCategory ?\r\n                this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\",\r\n        }, {\r\n\r\n            \"label\": \"IDS_MATERIAL\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCrumb ?\r\n                this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'] !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata']['Material Name'] : \"NA\" : \"NA\",\r\n        }\r\n        );\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let bool = false;\r\n        let { selectedRecord, selectedcombo, comboitem, filterData, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n            materialCatList, MaterialComboList, SelectedMaterialInventory } = this.state\r\n        let masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\r\n            bool = true;\r\n            selectedMaterialCat = this.props.Login.selectedMaterialCat\r\n        }\r\n        if (this.props.Login.masterData.SelectedMaterialInventory !== previousProps.Login.masterData.SelectedMaterialInventory) {\r\n            bool = true;\r\n            SelectedMaterialInventory = this.props.Login.SelectedMaterialInventory\r\n        }\r\n\r\n        if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\r\n            bool = true;\r\n            comboitem = this.props.Login.comboitem\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.MaterialType !== undefined) {\r\n            if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\r\n                bool = true;\r\n                const materialTypeList = constructjsonOptionList(this.props.Login.masterData.MaterialType,\r\n                    \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined,\r\n                    undefined, undefined,\r\n                    undefined, true, this.props.Login.userInfo.slanguagetypecode)\r\n                filterCatList = materialTypeList.get(\"OptionList\");\r\n\r\n                selectedcombo = {\r\n                    nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\r\n                        \"value\": masterData.MaterialType[0].nmaterialtypecode,\r\n                        \"label\": masterData.MaterialType[0]['jsondata'].smaterialtypename[this.props.Login.userInfo.slanguagetypecode]\r\n                    } : \"\"\r\n                }\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\r\n            bool = true;\r\n            const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                \"smaterialcatname\", undefined, undefined, undefined);\r\n            materialCatList = MaterialCategoryMain.get(\"OptionList\");\r\n\r\n            selectedMaterialCat = {\r\n                nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\r\n                    \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\r\n                    \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\r\n            bool = true;\r\n            let MaterialComboArr = [];\r\n            if (this.props.Login.masterData.MaterialCombo) {\r\n                this.props.Login.masterData.MaterialCombo.map((temp => {\r\n                    MaterialComboArr.push(temp.jsondata)\r\n                }))\r\n                const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\",\r\n                    \"Material Name\", undefined, undefined, undefined);\r\n                MaterialComboList = MaterialCombo.get(\"OptionList\");\r\n                selectedMaterialcombo = {\r\n                    nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\r\n                        \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\r\n                        \"label\": masterData.MaterialCombo[0][\"jsondata\"]['Material Name']\r\n                    } : \"\"\r\n                }\r\n            }\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData();\r\n        }\r\n        if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\r\n            if (this.props.Login.masterData.searchedData) {\r\n                if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\r\n                    this.setState({ skip: 0 });\r\n                }\r\n            }\r\n        }\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord, comboitem, filterData, selectedcombo, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n                materialCatList, MaterialComboList, SelectedMaterialInventory\r\n            });\r\n        }\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    viewMaterialFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                nmaterialinventorycode: this.props.Login.masterData.SelectedMaterialInventory\r\n                    && this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\r\n                materialinventoryfile: JSON.stringify(filedata),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"materialinventory\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedMaterialInventoryFile\",\r\n            screenname: \"IDS_MATERIALINVENTORY\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    printBarcode = (inputParam) => {\r\n\r\n        this.setState({\r\n            selectedRecord: {\r\n                barcodevalue: inputParam.sample.sarno,\r\n                barcodeData: inputParam.sample\r\n            },\r\n            openModal: true\r\n        })\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal\r\n        let showMaterialSection = this.props.Login.showMaterialSection\r\n        // let isneedcombomulti = this.props.Login.isneedcombomulti;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showModalPopup = this.props.Login.showModalPopup\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"RETIRE\"\r\n                || this.props.Login.operation === \"RELEASED\" || this.props.Login.operation === \"IDS_OPENDATE\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                showModalPopup = this.props.Login.operation === \"IDS_OPENDATE\" ? true : false;\r\n                // selectedRecord =  this.props.Login.operation === \"IDS_OPENDATE\"?selectedRecord[\"IDS_OPENDATE\"]\r\n                // &&selectedRecord[\"IDS_OPENDATE\"]:{};\r\n                if (this.props.Login.operation === \"IDS_OPENDATE\") {\r\n                    let temp = selectedRecord[\"IDS_OPENDATE\"];\r\n                    selectedRecord = {};\r\n                    selectedRecord[\"IDS_OPENDATE\"] = temp;\r\n                }\r\n                else {\r\n                    selectedRecord = {};\r\n                }\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                //openChildModal=false;\r\n                //openModal = false;\r\n                showModalPopup = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            showMaterialSection = false;\r\n            //isneedcombomulti = false;\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, showMaterialSection, loadEsign, selectedRecord, selectedId: null, showModalPopup, openChildModal }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n\r\n        if (fieldName === \"nmaterialtypecode\") {\r\n            const selectedcombo = this.state.selectedcombo || {};\r\n            selectedcombo[fieldName] = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.props.initialcombochangeMaterialInvget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n        }\r\n        if (fieldName === \"nmaterialcode\") {\r\n            const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\r\n            selectedMaterialcombo[\"nmaterialcode\"] = comboData;\r\n            this.setState({ selectedMaterialcombo });\r\n\r\n        }\r\n        else if (fieldName === \"nmaterialcatcode\") {\r\n            const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n            selectedMaterialCat[fieldName] = comboData;\r\n            this.props.initialcombochangeMaterialInvget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n        }\r\n\r\n        else if (fieldName === \"nmaterialsectioncode\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[\"nmaterialsectioncode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === \"nlinkcode\") {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[\"nlinkcode\"] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n        else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\r\n            const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n            selectedMaterialCat[fieldName] = comboData;\r\n            this.setState({ selectedMaterialCat });\r\n\r\n            let comboName = fieldName.label\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n        else if (fieldName.label === \"IDS_STORAGECONDITION\") {\r\n            let comboName = fieldName.label\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else if (fieldName === \"value\") {\r\n            const comboitem = this.state.comboitem || {};\r\n            comboitem[fieldName] = comboData;\r\n            this.setState({ comboitem });\r\n        }\r\n\r\n\r\n    }\r\n    onInputOnChange = (event, optional1, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenname !== \"IDS_MATERIALINVENTORYFILE\") {\r\n            if (event.target.type === 'checkbox') {\r\n                if (event.target.name === \"ntransactionstatus\")\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n                else\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            } else if (event.target.type === 'radio') {\r\n                selectedRecord[event.target.name] = optional2;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    saveClick = () => {\r\n        let operation = \"update\";\r\n        let operations = 'IDS_OPENDATE';\r\n        let inputData = [];\r\n        inputData[\"Open Date\"] = this.state.selectedRecord['Open Date'] &&\r\n            convertDateTimetoStringDBFormat(this.state.selectedRecord['Open Date'], this.props.Login.userInfo);\r\n        inputData[\"tzOpen Date\"] = this.state.selectedRecord[\"tzOpen Date\"] && this.state.selectedRecord[\"tzOpen Date\"];\r\n        inputData[\"nflag\"] = 3;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode\r\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n        inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].nmaterialinventorycode\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: operation\r\n        }\r\n\r\n        let masterData = this.props.Login.masterData\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal: true, loadEsign: true, screenData: { inputParam, masterData }, operations, showModalPopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\r\n        }\r\n\r\n    }\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        let nmaterialconfigcode;\r\n        nmaterialconfigcode = this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode\r\n        if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\r\n            inputData[\"MaterialInventory\"] = {}\r\n            inputData[\"jsonuidata\"] = {}\r\n            inputData[\"DateList\"] = []\r\n            const Layout = this.props.Login.masterData.selectedTemplate[0].jsondata\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n\r\n                            if (component.label === 'Section') {\r\n                                inputData[\"MaterialInventory\"][component.label] =\r\n                                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                                        inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] ? {\r\n                                            label: this.state.selectedRecord[component.label][\"label\"],\r\n                                            value: this.state.selectedRecord[component.label][\"value\"],\r\n                                            pkey: this.state.selectedRecord[component.label].item.pkey,\r\n                                            nquerybuildertablecode: this.state.selectedRecord[component.label].item.nquerybuildertablecode,\r\n                                            item: this.state.selectedRecord[component.label].item\r\n                                        } : \"\" :\r\n                                        {\r\n                                            label: \"Default\",\r\n                                            value: -1\r\n                                        }\r\n                                inputData[\"jsonuidata\"][component.label] =\r\n                                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                                        this.state.selectedRecord[component.label] ?\r\n                                            this.state.selectedRecord[component.label][\"label\"]\r\n                                            : \"\" :\r\n                                        \"Default\"\r\n                                inputData[\"jsonuidata\"]['nsectioncode'] =\r\n                                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                                        this.state.selectedRecord[component.label] ?\r\n                                            this.state.selectedRecord[component.label][\"value\"]\r\n                                            : \"\" : -1\r\n                            }\r\n                            else {\r\n                                inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] ? {\r\n                                    label: this.state.selectedRecord[component.label][\"label\"],\r\n                                    value: this.state.selectedRecord[component.label][\"value\"],\r\n                                    pkey: this.state.selectedRecord[component.label].item.pkey,\r\n                                    nquerybuildertablecode: this.state.selectedRecord[component.label].item.nquerybuildertablecode,\r\n                                    item: this.state.selectedRecord[component.label].item\r\n                                } : \"\"\r\n                                inputData[\"jsonuidata\"][component.label] = this.state.selectedRecord[component.label] ?\r\n                                    this.state.selectedRecord[component.label][\"label\"]\r\n                                    : \"\"\r\n                            }\r\n\r\n                        }\r\n                        else if (component.inputtype === 'date') {\r\n                            if (this.state.selectedRecord[component.label]) {\r\n                                inputData[\"MaterialInventory\"][`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\r\n                                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                } : {\r\n                                    label: this.props.Login.userInfo['stimezoneid'],\r\n                                    value: this.props.Login.userInfo['ntimezonecode']\r\n                                }\r\n                                inputData[\"MaterialInventory\"][component.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                inputData[\"DateList\"].push(component.label)\r\n                            }\r\n                            inputData[\"jsonuidata\"][component.label] = this.state.selectedRecord[component.label] ?\r\n                                convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                : \"\"\r\n\r\n                        }\r\n                        else {\r\n                            inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label] && this.state.selectedRecord[component.label]\r\n                            //    if (this.state.selectedRecord[component.label] !== \"\") {\r\n                            inputData[\"jsonuidata\"][component.label] = this.state.selectedRecord[component.label] && this.state.selectedRecord[component.label]\r\n                            //   }\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    if (componentrow.label === 'Unit') {\r\n                                        inputData[\"jsonuidata\"]['sbatchunitname'] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label][\"label\"];\r\n                                        inputData[\"jsonuidata\"]['nbatchunitcode'] = this.state.selectedRecord[componentrow.label] && this.state.selectedRecord[componentrow.label][\"value\"];\r\n\r\n                                    }\r\n\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ?\r\n                                        {\r\n                                            label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                            value: this.state.selectedRecord[componentrow.label][\"value\"],\r\n                                            pkey: this.state.selectedRecord[componentrow.label].item.pkey,\r\n                                            nquerybuildertablecode: this.state.selectedRecord[componentrow.label].item.nquerybuildertablecode,\r\n                                            item: this.state.selectedRecord[componentrow.label].item\r\n                                        } : \"\"\r\n                                    inputData[\"jsonuidata\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ?\r\n                                        this.state.selectedRecord[componentrow.label][\"label\"]\r\n                                        : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === 'date') {\r\n                                    if (this.state.selectedRecord[componentrow.label]) {\r\n                                        inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\r\n                                            label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\r\n                                            value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\r\n                                        } : {\r\n                                            label: this.props.Login.userInfo['stimezoneid'],\r\n                                            value: this.props.Login.userInfo['ntimezonecode']\r\n                                        }\r\n                                        inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label],\r\n                                            this.props.Login.userInfo)\r\n                                        inputData[\"DateList\"].push(componentrow.label)\r\n                                    }\r\n                                    inputData[\"jsonuidata\"][componentrow.label] = this.state.selectedRecord[componentrow.label] ?\r\n                                        convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo)\r\n                                        : \"\"\r\n\r\n                                }\r\n                                else {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label] &&\r\n                                        this.state.selectedRecord[componentrow.label]\r\n                                    inputData[\"jsonuidata\"][componentrow.label] = this.state.selectedRecord[componentrow.label] &&\r\n                                        this.state.selectedRecord[componentrow.label]\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            inputData[\"MaterialInventory\"] = {\r\n                ...inputData[\"MaterialInventory\"],\r\n                // \"IDS_INVENTORYTRANSACTIONTYPE\": {\r\n                //     label: \"Outside\",\r\n                //     value: 2\r\n                // },\r\n                // \"IDS_TRANSACTIONTYPE\": {\r\n                //     label: \"Received\",\r\n                //     value: 47\r\n                // },\r\n                // [this.props.Login.masterData.siteLabelName && this.props.Login.masterData.siteLabelName]: {\r\n                //     label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\r\n                //     value: this.props.Login.userInfo.nsitecode && this.props.Login.userInfo.nsitecode\r\n                // },\r\n                needsectionwise: this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise,\r\n                \"dretestdate\": this.props.Login.masterData.SelectedMaterialInventory &&\r\n                    this.props.Login.masterData.SelectedMaterialInventory['jsondata'] &&\r\n                    this.props.Login.masterData.SelectedMaterialInventory['jsondata'].dretestdate,\r\n                // \"IDS_AVAILABLEQUANTITY\": this.state.selectedRecord['IDS_RECEIVEDQUANTITY'],\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ?\r\n                    transactionStatus.QUARANTINE : transactionStatus.RELEASED,\r\n                \"sdisplaystatus\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].sdisplaystatus,\r\n                \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\r\n                nsitecode: this.props.Login.userInfo.nsitecode,\r\n                nusercode: this.props.Login.userInfo.nusercode\r\n            }\r\n            inputData[\"jsonuidata\"] = {\r\n                ...inputData[\"jsonuidata\"],\r\n                \"dretestdate\": this.props.Login.masterData.SelectedMaterialInventory &&\r\n                    this.props.Login.masterData.SelectedMaterialInventory['jsondata'] &&\r\n                    this.props.Login.masterData.SelectedMaterialInventory['jsondata'].dretestdate,\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ?\r\n                    transactionStatus.QUARANTINE : transactionStatus.RELEASED,\r\n                \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\r\n                \"nmaterialconfigcode\": nmaterialconfigcode,\r\n                \"sdisplaystatus\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].sdisplaystatus,\r\n                nsitecode: this.props.Login.userInfo.nsitecode\r\n            }\r\n            inputData[\"MaterialInventoryTrans\"] = {\r\n                ...inputData[\"MaterialInventory\"],\r\n                \"nqtyissued\": 0,\r\n                \"nsectioncode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                    inputData[\"MaterialInventory\"][\"Section\"].value : -1,\r\n\r\n                \"Section\": {\r\n                    \"label\": inputData[\"MaterialInventory\"][\"Section\"].label,\r\n                    \"value\": inputData[\"MaterialInventory\"][\"Section\"].value\r\n                },\r\n                \"Available Quantity/Unit\": this.state.selectedRecord['Received Quantity'],\r\n                \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\r\n                \"ntransactiontype\": transactionStatus.RECEIVED,\r\n                \"ninventorytranscode\": 2,\r\n                \"Transaction Type\": {\r\n                    \"label\": this.props.Login.masterData.TransactionType[1]\r\n                        .jsondata.stransdisplaystatus[this.props.Login.userInfo.slanguagetypecode],\r\n                    \"value\": transactionStatus.RECEIVED\r\n                },\r\n                \"Received Quantity\": this.state.selectedRecord['Received Quantity'],\r\n                \"Inventory Transaction Type\": {\r\n                    \"label\": this.props.Login.masterData.MaterialInventoryType[1]\r\n                        .jsondata.sinventorytypename[this.props.Login.userInfo.slanguagetypecode],\r\n                    \"value\": 2\r\n                },\r\n                nusercode: this.props.Login.userInfo.nusercode\r\n\r\n            }\r\n            inputData[\"jsonuidataTrans\"] = {\r\n                ...inputData[\"jsonuidata\"],\r\n                \"nqtyissued\": 0,\r\n                \"nsectioncode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                    inputData[\"MaterialInventory\"][\"Section\"].value : -1,\r\n\r\n                \"Section\": inputData[\"MaterialInventory\"][\"Section\"].label,\r\n\r\n\r\n                \"Available Quantity/Unit\": this.state.selectedRecord['Received Quantity'],\r\n                \"Inventory ID\": this.state.selectedRecord[\"Inventory ID\"] && this.state.selectedRecord[\"Inventory ID\"],\r\n                \"ntransactiontype\": 14,\r\n                \"ninventorytranscode\": 2,\r\n                \"Transaction Type\": this.props.Login.masterData.TransactionType[1]\r\n                    .jsondata.stransdisplaystatus[this.props.Login.userInfo.slanguagetypecode],\r\n                \"Received Quantity\": this.state.selectedRecord['Received Quantity'],\r\n                \"Inventory Transaction Type\": this.props.Login.masterData.MaterialInventoryType[1]\r\n                    .jsondata.sinventorytypename[this.props.Login.userInfo.slanguagetypecode],\r\n                \"sprecision\": this.props.Login.masterData.sprecision,\r\n                \"needsectionwise\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise\r\n            }\r\n            if (this.props.Login.masterData.siteLabelName) {\r\n                inputData[\"MaterialInventoryTrans\"][this.props.Login.masterData.siteLabelName] = {\r\n                    label: this.props.Login.masterData.siteName && this.props.Login.masterData.siteName,\r\n                    value: this.props.Login.masterData.siteName && this.props.Login.userInfo.nsitecode\r\n                }\r\n            }\r\n            inputData[\"ntransactionstatus\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ?\r\n                transactionStatus.QUARANTINE : transactionStatus.RELEASED\r\n            inputData[\"nsectioncode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                inputData[\"MaterialInventory\"][\"Section\"].value : -1\r\n            inputData[\"needsectionwise\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise\r\n            inputData[\"jsonuidata\"] = JSON.stringify(inputData[\"jsonuidata\"])\r\n            inputData[\"jsonuidataTrans\"] = JSON.stringify(inputData[\"jsonuidataTrans\"])\r\n            inputData[\"MaterialInventoryTrans\"] = JSON.stringify(inputData[\"MaterialInventoryTrans\"])\r\n            inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"])\r\n            inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n            inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n            inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n            if (this.props.Login.operation === 'create') {\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            else {\r\n                postParam = {\r\n                    inputListName: \"MaterialInventory\",\r\n                    selectedObject: \"SelectedMaterialInventory\",\r\n                    primaryKeyField: \"nmaterialinventorycode\"\r\n                };\r\n\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode\r\n                inputData[\"sprecision\"] = this.props.Login.masterData.sprecision\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            } else {\r\n                if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\r\n                    this.ConfirmComponent()\r\n                }\r\n                else {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\r\n            if (this.state.selectedRecord['Transaction Type'].value === 64 && this.state.selectedRecord.Site.value !== this.props.Login.userInfo.nsitecode) {\r\n                return toast.info(this.props.intl.formatMessage({ id: \"IDS_CANNOTRETURNFROMANOTHERSITE\" }));\r\n            }\r\n            let nflag = true;\r\n            if (this.state.selectedRecord['Transaction Type'].value === transactionStatus.RECEIVED) {\r\n                nflag = false\r\n            }\r\n            if (nflag ? (this.state.selectedRecord['Received Quantity'] <= parseFloat(this.state.selectedRecord['Available Quantity/Unit'])) : true) {\r\n                if (this.state.selectedRecord['Received Quantity'] > 0) {\r\n                    const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].jsondata\r\n                    let dynamicobj = {};\r\n                    // dynamicobj[\"jsonuidata\"] = {}\r\n                    let jsonuidata = {};\r\n                    inputData[\"DateList\"] = [];\r\n                    Layout.map((row) => {\r\n                        row.children.map((column) => {\r\n                            column.children.map((component) => {\r\n                                if (component.inputtype === 'combo') {\r\n                                    if (component.label === 'Section') {\r\n                                        if (this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3) {\r\n                                            dynamicobj['nsectioncode'] =\r\n                                                this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                                                    this.state.selectedRecord['Inventory Transaction Type'] &&\r\n                                                        this.state.selectedRecord['Inventory Transaction Type'].value === 1 ?\r\n                                                        this.state.selectedRecord[component.label][\"value\"] :\r\n                                                        this.props.Login.masterData.sourceSection\r\n                                                    :\r\n                                                    this.state.selectedRecord['Inventory Transaction Type'] &&\r\n                                                        this.state.selectedRecord['Inventory Transaction Type'].value === 1 ?\r\n                                                        this.state.selectedRecord[component.label][\"value\"] : -1\r\n                                            jsonuidata['nsectioncode'] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise === 3 ?\r\n                                                this.state.selectedRecord['Inventory Transaction Type'] &&\r\n                                                    this.state.selectedRecord['Inventory Transaction Type'].value === 1 ?\r\n                                                    this.state.selectedRecord[component.label][\"value\"] :\r\n                                                    this.props.Login.masterData.sourceSection\r\n                                                :\r\n                                                this.state.selectedRecord['Inventory Transaction Type'] &&\r\n                                                    this.state.selectedRecord['Inventory Transaction Type'].value === 1 ?\r\n                                                    this.state.selectedRecord[component.label][\"value\"] : -1\r\n                                        }\r\n                                        else {\r\n                                            dynamicobj['nsectioncode'] = this.state.selectedRecord[component.label] ?\r\n                                                this.state.selectedRecord[component.label][\"value\"] : -1\r\n                                            jsonuidata['nsectioncode'] = this.state.selectedRecord[component.label] ?\r\n                                                this.state.selectedRecord[component.label][\"value\"] : -1\r\n                                        }\r\n\r\n\r\n\r\n                                        dynamicobj[component.label] = this.state.selectedRecord[component.label] ? {\r\n                                            label: this.state.selectedRecord[component.label][\"label\"],\r\n                                            value: this.state.selectedRecord[component.label][\"value\"]\r\n                                        } : 'NA'\r\n                                        jsonuidata[component.label] = this.state.selectedRecord[component.label] ?\r\n                                            this.state.selectedRecord[component.label][\"label\"] : 'NA'\r\n                                    }\r\n                                    else {\r\n                                        if (this.state.selectedRecord[component.label]) {\r\n                                            dynamicobj[component.label] = {\r\n                                                label: this.state.selectedRecord[component.label][\"label\"],\r\n                                                value: this.state.selectedRecord[component.label][\"value\"]\r\n                                            }\r\n\r\n                                            jsonuidata[component.label] = this.state.selectedRecord[component.label][\"label\"]\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if (component.inputtype === 'Numeric') {\r\n                                    if (this.state.selectedRecord[component.label]) {\r\n                                        dynamicobj[component.label] = this.state.selectedRecord[component.label].toString()\r\n                                        jsonuidata[component.label] = this.state.selectedRecord[component.label].toString()\r\n\r\n                                    }\r\n                                }\r\n                                else if (component.inputtype === 'date') {\r\n                                    if (this.state.selectedRecord[component.label]) {\r\n                                        dynamicobj[`tz${component.label}`] = component.hasOwnProperty('timezone') ? {\r\n                                            label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                            value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                        } : {\r\n                                            label: this.props.Login.userInfo['stimezoneid'],\r\n                                            value: this.props.Login.userInfo['ntimezonecode']\r\n                                        }\r\n                                        dynamicobj[component.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n\r\n                                        jsonuidata[`tz${component.label}`] = component.hasOwnProperty('timezone') ?\r\n                                            this.state.selectedRecord[`tz${component.label}`][\"label\"]\r\n                                            : this.props.Login.userInfo['stimezoneid']\r\n                                        jsonuidata[component.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n\r\n                                        inputData[\"DateList\"].push(component.label)\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    if (this.state.selectedRecord[component.label]) {\r\n                                        dynamicobj[component.label] = this.state.selectedRecord[component.label]\r\n                                        jsonuidata[component.label] = this.state.selectedRecord[component.label]\r\n                                    }\r\n                                }\r\n                                component.hasOwnProperty(\"children\") && component.children.map(\r\n                                    (componentrow) => {\r\n                                        if (componentrow.inputtype === 'combo') {\r\n                                            if (this.state.selectedRecord[componentrow.label]) {\r\n                                                dynamicobj[componentrow.label] =\r\n                                                {\r\n                                                    label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                                    value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                                }\r\n                                                jsonuidata[componentrow.label] = this.state.selectedRecord[componentrow.label][\"label\"]\r\n\r\n                                            }\r\n\r\n                                        }\r\n                                        else if (componentrow.inputtype === 'date') {\r\n                                            if (this.state.selectedRecord[componentrow.label]) {\r\n                                                dynamicobj[`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ? {\r\n                                                    label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\r\n                                                    value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\r\n                                                } : {\r\n                                                    label: this.props.Login.userInfo['stimezoneid'],\r\n                                                    value: this.props.Login.userInfo['ntimezonecode']\r\n                                                }\r\n                                                dynamicobj[componentrow.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo)\r\n\r\n\r\n                                                jsonuidata[`tz${componentrow.label}`] = componentrow.hasOwnProperty('timezone') ?\r\n                                                    this.state.selectedRecord[`tz${componentrow.label}`][\"label\"]\r\n                                                    : this.props.Login.userInfo['stimezoneid']\r\n                                                jsonuidata[componentrow.label] = convertDateTimetoStringDBFormat(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo)\r\n\r\n                                                inputData[\"DateList\"].push(componentrow.label)\r\n                                            }\r\n\r\n                                        }\r\n                                        else {\r\n                                            if (this.state.selectedRecord[componentrow.label]) {\r\n                                                dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n                                                //ALPD-1045\r\n                                                jsonuidata[componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                )\r\n                            })\r\n                        })\r\n                    })\r\n                    dynamicobj = {\r\n                        ...this.props.Login.masterData.SelectedMaterialInventory,\r\n                        ...dynamicobj, \"ntransactiontype\":\r\n                            this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value,\r\n                        \"ninventorytranscode\": this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value,\r\n                        \"navailableqty\": this.state.selectedRecord['Available Quantity/Unit'] !== undefined\r\n                            ? parseFloat(this.state.selectedRecord['Available Quantity/Unit']) :\r\n                            this.props.Login.navailableqtyref,\r\n                        \"Inventory ID\": this.props.Login.masterData[\"SelectedMaterialInventory\"]['Inventory ID'],\r\n                        nusercode: this.props.Login.userInfo.nusercode,\r\n                        parent: false\r\n\r\n                    }\r\n\r\n                    jsonuidata = {\r\n                        ...this.props.Login.masterData.SelectedMaterialInventory,\r\n                        ...jsonuidata, \"ntransactiontype\":\r\n                            this.state.selectedRecord['Transaction Type'] && this.state.selectedRecord['Transaction Type'].value,\r\n                        \"ninventorytranscode\": this.state.selectedRecord['Inventory Transaction Type'] && this.state.selectedRecord['Inventory Transaction Type'].value,\r\n                        \"navailableqty\": this.state.selectedRecord['Available Quantity/Unit'] !== undefined\r\n                            ? this.state.selectedRecord['Available Quantity/Unit'] :\r\n                            this.props.Login.navailableqtyref,\r\n                        \"Inventory ID\": this.props.Login.masterData[\"SelectedMaterialInventory\"]['Inventory ID']\r\n\r\n                    }\r\n                    inputData[\"needsectionwise\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].needsectionwise\r\n                    inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision\r\n                    inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode\r\n                    inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj)\r\n                    inputData[\"jsonuidata\"] = JSON.stringify(jsonuidata)\r\n                    inputParam = {\r\n                        classUrl: \"materialinventory\",\r\n                        methodUrl: \"MaterialInventoryTrans\",\r\n                        inputData: inputData,\r\n                        operation: 'create',\r\n                        saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                        searchRef: this.searchRef,\r\n                        dataState: this.state.dataState,\r\n                        isChild: true\r\n                    }\r\n                    let masterData = this.props.Login.masterData\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    }\r\n                }\r\n                else { //ALPD-4842 material Inventory-->while add the Quantity transaction, section not showing\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_NOQUANTTYTORECEIVE\" }));\r\n                }\r\n\r\n            }///////////////////\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETURNEDLESSTHANAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_MATERIALINVENTORYFILE\") {\r\n            inputParam = this.onSaveMaterialFile();\r\n            let masterData = this.props.Login.masterData\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (name === \"Received Quantity\") {\r\n            if (value === 0) {\r\n                selectedRecord[name] = \"\";\r\n            }\r\n            else {\r\n                selectedRecord[name] = value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    ConfirmComponent = () => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\" }),\r\n            \"ok\", \"cancel\", () => this.copyAlertSave());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleClickDelete(masterData, ncontrolcode, modalName) {\r\n        // if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED &&\r\n        //     this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\r\n        if (this.props.Login.masterData[\"SelectedMaterialInventory\"].ntranscode === transactionStatus.QUARANTINE) {\r\n            // const fieldArray = [];\r\n            let postParam = {\r\n                inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\",\r\n                primaryKeyField: \"nmaterialinventorycode\",\r\n                primaryKeyValue: this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\r\n                fetchUrl: \"materialinventory/getMaterialInventoryByID\",\r\n                fecthInputObject: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    \"nmaterialtypecode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                    \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                    \"nmaterialcode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialCrumb && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                },\r\n                // \"nmaterialtypecode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                // \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                // \"nmaterialcode\": this.props.Login.masterData && this.props.Login.masterData.SelectedMaterialCrumb && this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n            }\r\n            modalName = 'openModal'\r\n\r\n            const inputParam = {\r\n                methodUrl: \"MaterialInventory\",\r\n                classUrl: \"materialinventory\",\r\n                inputData: {\r\n                    \"nmaterialconfigcode\": this.props.Login.masterData.selectedTemplate[0].nmaterialconfigcode,\r\n                    \"material\": this.props.Login.masterData.SelectedMaterial,\r\n                    \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                    \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode,\r\n                    \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                },\r\n                operation: \"delete\", postParam,\r\n                displayName: \"Material\",\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                        operation: 'delete', screenName: \"Material\", id: \"material\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, modalName);\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTQUARENTINEINVENTORY\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\r\n        if (this.searchRef && this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n        let inputData = [];\r\n        inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n        inputData[\"materialCatList\"] = this.state.materialCatList;\r\n        // const inputParam = {\r\n        //     classUrl: \"materialinventory\",\r\n        //     methodUrl: \"getMaterialInventoryByID\",\r\n        //     displayName: \"MaterialInventory\",\r\n        //     inputData: inputData\r\n        // }\r\n        this.setState({ sectionDataState: { skip: 0, take: 10 } })\r\n        if (this.state.selectedcombo[\"nmaterialtypecode\"] && this.props.Login.masterData.SelectedMaterialCategory && this.props.Login.masterData.SelectedMaterialCrumb) {\r\n            this.props.getMaterialInventoryByID(this.props.Login.masterData.SelectedMaterialType[0],\r\n                this.props.Login.masterData.SelectedMaterialCategory, this.props.Login.masterData.SelectedMaterialCrumb['jsondata'], this.props.Login.masterData, this.props.Login.userInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CONFIGMATERIALCATANDMATERIAL\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, getAddMaterialInventoryPopup, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getQuantityTransactionOnchange,\r\n    updateStore, initialcombochangeMaterialInvget, viewAttachment, getMaterialChildValues,\r\n    crudMaster, getMaterialInventoryDetails, getMaterialInventoryByID, addMaterialInventoryFile\r\n    , filterColumnData, validateEsignCredential, getSiteonchange\r\n})(injectIntl(MaterialInventory));\r\n\r\n"]},"metadata":{},"sourceType":"module"}