{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nexport function getSampleMaster(selectedItem, userInfo, masterData, sampleLocation, sampleHierarchyIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/getSampleMaster\", {\n      'userinfo': userInfo,\n      \"sampleTrayCode\": selectedItem.id\n    }).then(response => {\n      masterData = { ...masterData,\n        sampleStorageMaster: response.data[\"sampleStorageMaster\"],\n        selectedSampleStorageMaster: response.data[\"selectedSampleStorageMaster\"]\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          sampleTrayCode: selectedItem.id,\n          selectedItem,\n          sampleLocation,\n          sampleHierarchyIndex\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedApprovedStorageVersion(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\", {\n      'userinfo': userInfo,\n      \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode)\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"],\n        storageContainer: undefined,\n        containers: undefined,\n        sampleStorageMaster: undefined\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          containerLocation: undefined,\n          activeTabIndex: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleMasterDetails(masterData) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        masterData\n      }\n    });\n  };\n}\nexport function getselectedContainer(masterData) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        masterData\n      }\n    });\n  };\n}\nexport function getContainers(selectedItem, masterData, containers, locationText) {\n  return function (dispatch) {\n    masterData = { ...masterData,\n      containers: containers,\n      selectedContainer: containers.length > 0 ? [containers[0]] : []\n    };\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        masterData,\n        locationCode: selectedItem.id,\n        selectedItem,\n        locationText\n      }\n    });\n  };\n}\nexport function getContainerStorageCondition(selectedItem, userInfo, masterData, containerLocation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let operation = \"\";\n    rsapi.post(\"/samplestoragemaster/getContainerStorageCondition\", {\n      'userinfo': userInfo,\n      \"containerCode\": selectedItem.id\n    }).then(response => {\n      if (response.data[\"storageContainer\"] !== null) {\n        operation = \"update\";\n      } else {\n        operation = \"create\";\n      }\n\n      masterData = { ...masterData,\n        storageContainer: response.data[\"storageContainer\"]\n      }; // sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          containerCode: selectedItem.id,\n          containerLocation,\n          operation,\n          selectedItem\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStorageConditionFromMaster(userInfo, masterData, editContainerID) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let selectedRecord = {};\n    let urlArray = [];\n    let operation = \"\";\n\n    if (masterData[\"storageContainer\"] && masterData[\"storageContainer\"] !== null) {\n      const geStorageCondition = rsapi.post(\"/storagecondition/getStorageCondition\", {\n        'userinfo': userInfo\n      });\n      const getSampleStorageCondition = rsapi.post(\"/samplestoragemaster/getContainerStorageConditionByID\", {\n        'userinfo': userInfo,\n        \"containerStorageCode\": masterData[\"storageContainer\"].ncontainerstoragecode\n      });\n      urlArray = [geStorageCondition, getSampleStorageCondition];\n      operation = \"update\";\n    } else {\n      const geStorageCondition = rsapi.post(\"/storagecondition/getStorageCondition\", {\n        'userinfo': userInfo\n      });\n      urlArray = [geStorageCondition];\n      operation = \"create\";\n    }\n\n    Axios.all(urlArray).then(response => {\n      const conditionMap = constructOptionList(response[0].data, \"nstorageconditioncode\", \"sstorageconditionname\", false, false, true);\n      const conditionMaster = conditionMap.get(\"OptionList\");\n\n      if (masterData[\"storageContainer\"] && masterData[\"storageContainer\"] !== null) {\n        conditionMaster.map(item => item.value === response[1].data[\"nstorageconditioncode\"] ? selectedRecord[\"nstorageconditioncode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item\n        } : \"\");\n        masterData = { ...masterData,\n          storageCondition: conditionMaster,\n          storageContainer: response[1].data\n        };\n      } else {\n        const defaultCondition = conditionMaster.filter(items => items.item.ndefaultstatus === transactionStatus.YES);\n\n        if (defaultCondition.length > 0) {\n          selectedRecord[\"nstorageconditioncode\"] = {\n            \"label\": defaultCondition[0].label,\n            \"value\": defaultCondition[0].value,\n            \"item\": defaultCondition\n          };\n        }\n\n        masterData = { ...masterData,\n          storageCondition: conditionMaster\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedRecord,\n          openModal: true,\n          operation,\n          ncontrolcode: editContainerID\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const changeStorageCategoryFilterOnSampleMaster = (inputParam, filterStorageCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/getSampleStorageMasterByCategory\", inputParam.inputData).then(response => {\n      const masterData = response.data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterStorageCategory,\n            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory.value,\n            storageContainer: undefined,\n            containers: undefined,\n            sampleStorageMaster: undefined\n          },\n          containerLocation: undefined,\n          activeTabIndex: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function openSampleStorageApprovedLocation(userInfo, masterData, moveId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let selectedRecord = {};\n    let urlArray = [];\n    const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\", {\n      'userinfo': userInfo\n    });\n    const getApprovedLocation = rsapi.post(\"/samplestoragemaster/getSampleStorageMasterByCategory\", {\n      'userinfo': userInfo,\n      \"nstoragecategorycode\": masterData[\"selectedSampleStorageVersion\"].nstoragecategorycode\n    });\n    urlArray = [geStorageCategory, getApprovedLocation];\n    Axios.all(urlArray).then(response => {\n      const conditionMap = constructOptionList(response[0].data, \"nstoragecategorycode\", \"sstoragecategoryname\", false, false, true);\n      const conditionMaster = conditionMap.get(\"OptionList\");\n      const locationMap = constructOptionList(response[1].data[\"approvedSampleStorageLocation\"], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", false, false, true);\n      const locationMaster = locationMap.get(\"OptionList\");\n      conditionMaster.map(item => item.value === masterData[\"selectedSampleStorageVersion\"].nstoragecategorycode ? selectedRecord[\"nstoragecategorycode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      let approvedTreeData = [];\n      locationMaster.map(item => item.value === masterData[\"selectedSampleStorageVersion\"].nsamplestoragelocationcode ? selectedRecord[\"nsamplestoragelocationcode\"] = {\n        \"label\": item.label,\n        \"value\": item.value,\n        \"item\": item.item\n      } : \"\");\n      locationMaster.map(item => item.value === masterData[\"selectedSampleStorageVersion\"].nsamplestoragelocationcode ? approvedTreeData = item.item : \"\");\n      masterData = { ...masterData,\n        storageCategory: conditionMaster,\n        approvedLocation: locationMaster,\n        approvedTreeData: JSON.parse(approvedTreeData[\"jsondata\"].value).data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedRecord,\n          openChildModal: true,\n          operation: \"move\",\n          ncontrolcode: moveId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function loadApprovedLocationOnCombo(userInfo, masterData, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/getSampleStorageMasterByCategory\", {\n      'userinfo': userInfo,\n      \"nstoragecategorycode\": selectedRecord.nstoragecategorycode.value\n    }).then(response => {\n      const locationMap = constructOptionList(response.data[\"approvedSampleStorageLocation\"], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", false, false, true);\n      const locationMaster = locationMap.get(\"OptionList\");\n      selectedRecord[\"nsamplestoragelocationcode\"] = [];\n      let approvedTreeData = [];\n      masterData = { ...masterData,\n        approvedLocation: locationMaster,\n        approvedTreeData\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function loadApprovedLocationOnTreeData(userInfo, masterData, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/getApprovedSampleStorageLocationByID\", {\n      'userinfo': userInfo,\n      \"nstoragecategorycode\": selectedRecord.nstoragecategorycode.value,\n      \"nsamplestoragelocationcode\": selectedRecord.nsamplestoragelocationcode.value\n    }).then(response => {\n      masterData = { ...masterData,\n        approvedTreeData: JSON.parse(response.data[0][\"jsondata\"].value).data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function moveItems(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/moveItems\", inputParam).then(response => {\n      // if (inputParam.moveContainers === true) {\n      masterData = { ...masterData,\n        selectedSampleStorageVersion: response.data[0]\n      }; // } else {\n      //     masterData = {\n      //         ...masterData, selectedSampleStorageVersion: response.data[0]\n      //     };\n      // }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          masterData,\n          activeTabIndex: undefined,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function saveSampleStorageMaster(userInfo, masterData, selectedRecord, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/createSampleStorageMaster\", {\n      'userinfo': userInfo,\n      \"sampleStorageMaster\": inputParam.inputData[\"sampleStorageMaster\"]\n    }).then(response => {\n      selectedRecord[\"ssamplearno\"] = \"\";\n      selectedRecord[\"nsampleqty\"] = \"\";\n      masterData = { ...masterData,\n        sampleStorageMaster: response.data[\"sampleStorageMaster\"],\n        selectedSampleStorageMaster: response.data[\"selectedSampleStorageMaster\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedRecord,\n          openModal: inputParam.saveType === 2 ? true : false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialSampleStorageMaster(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        let {\n          selectedRecord,\n          userInfo,\n          masterData\n        } = inputParam[\"screenData\"];\n        delete selectedRecord.esignpassword;\n        delete selectedRecord.esigncomments;\n        delete selectedRecord.esignreason;\n        delete selectedRecord.agree;\n        delete inputParam.inputData.password;\n        userInfo = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"].inputParam.operation === \"move\") {\n          dispatch(moveItems(inputParam[\"screenData\"].inputParam, masterData));\n        } else {\n          dispatch(saveSampleStorageMaster(inputParam.inputData.userinfo, masterData, selectedRecord, inputParam[\"screenData\"].inputParam));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function sendToStoreSampleStorageMaster(userInfo, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/samplestoragemaster/createSampleStorageMaster\", inputParam.inputData // {\n    //     'userinfo': userInfo, \"sampleStorageMaster\": inputParam.inputData[\"sampleStorageMaster\"]\n    // }\n    ).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addSample(addID, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const getUnit = rsapi.post(\"/unit/getUnit\", {\n      'userinfo': userInfo\n    });\n    const getSettings = rsapi.post(\"/samplestoragemaster/getSettingsForSubSampleQty\", {\n      'userinfo': userInfo\n    });\n    urlArray = [getUnit, getSettings];\n    Axios.all(urlArray).then(response => {\n      let isneedSubSampleQty = false;\n\n      if (response[1].data !== null) {\n        if (response[1].data && response[1].data[\"ssettingvalue\"] === '3') {\n          isneedSubSampleQty = true;\n        }\n      }\n\n      const conditionUnitMap = constructOptionList(response[0].data, \"nunitcode\", \"sunitname\", false, false, true);\n      const conditionUnitMaster = conditionUnitMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const defaultUnit = conditionUnitMaster.filter(function (item) {\n        return item.item.ndefaultstatus === transactionStatus.YES;\n      });\n\n      if (defaultUnit.length > 0) {\n        selectedRecord[\"nunitcode\"] = {\n          value: defaultUnit[0].value,\n          label: defaultUnit[0].label,\n          item: defaultUnit[0].item\n        };\n      }\n\n      masterData = { ...masterData,\n        unitMaster: conditionUnitMaster\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: true,\n          selectedRecord,\n          operation: \"create\",\n          ncontrolcode: addID,\n          loading: false,\n          isneedSubSampleQty\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/actions/SampleStorageMasterAction.js"],"names":["rsapi","DEFAULT_RETURN","initRequest","sortData","constructOptionList","toast","transactionStatus","Axios","getSampleMaster","selectedItem","userInfo","masterData","sampleLocation","sampleHierarchyIndex","dispatch","post","id","then","response","sampleStorageMaster","data","selectedSampleStorageMaster","type","payload","loading","sampleTrayCode","catch","error","status","message","warn","getSelectedApprovedStorageVersion","inputParam","parseInt","nsamplestorageversioncode","selectedSampleStorageVersion","storageContainer","undefined","containers","containerLocation","activeTabIndex","getSampleMasterDetails","getselectedContainer","getContainers","locationText","selectedContainer","length","locationCode","getContainerStorageCondition","operation","containerCode","getStorageConditionFromMaster","editContainerID","selectedRecord","urlArray","geStorageCondition","getSampleStorageCondition","ncontainerstoragecode","all","conditionMap","conditionMaster","get","map","item","value","label","storageCondition","defaultCondition","filter","items","ndefaultstatus","YES","openModal","ncontrolcode","changeStorageCategoryFilterOnSampleMaster","filterStorageCategory","inputData","nfilterStorageCategory","openSampleStorageApprovedLocation","moveId","geStorageCategory","getApprovedLocation","nstoragecategorycode","locationMap","locationMaster","approvedTreeData","nsamplestoragelocationcode","storageCategory","approvedLocation","JSON","parse","openChildModal","loadApprovedLocationOnCombo","loadApprovedLocationOnTreeData","moveItems","loadEsign","saveSampleStorageMaster","saveType","validateEsignCredentialSampleStorageMaster","methodUrl","userinfo","toLowerCase","esignpassword","esigncomments","esignreason","agree","password","sendToStoreSampleStorageMaster","addSample","addID","getUnit","getSettings","isneedSubSampleQty","conditionUnitMap","conditionUnitMaster","defaultUnit","unitMaster"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\n\r\nexport function getSampleMaster(selectedItem, userInfo, masterData, sampleLocation, sampleHierarchyIndex) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/getSampleMaster\",\r\n            { 'userinfo': userInfo, \"sampleTrayCode\": selectedItem.id })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, sampleStorageMaster: response.data[\"sampleStorageMaster\"],\r\n                    selectedSampleStorageMaster: response.data[\"selectedSampleStorageMaster\"]\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        sampleTrayCode: selectedItem.id,\r\n                        selectedItem,\r\n                        sampleLocation,\r\n                        sampleHierarchyIndex\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedApprovedStorageVersion(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragelocation/getActiveSampleStorageVersion\",\r\n            { 'userinfo': userInfo, \"nsamplestorageversioncode\": parseInt(inputParam.nsamplestorageversioncode) })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageVersion: response.data[\"selectedSampleStorageVersion\"], storageContainer: undefined,\r\n                    containers: undefined, sampleStorageMaster: undefined\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        containerLocation: undefined,\r\n                        activeTabIndex: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getSampleMasterDetails(masterData) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                masterData,\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function getselectedContainer(masterData) {\r\n    return function (dispatch) {\r\n\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                masterData,\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function getContainers(selectedItem, masterData, containers, locationText) {\r\n    return function (dispatch) {\r\n\r\n        masterData = {\r\n            ...masterData, containers: containers, selectedContainer: containers.length > 0 ? [containers[0]] : []\r\n        };\r\n\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                masterData,\r\n                locationCode: selectedItem.id,\r\n                selectedItem,\r\n                locationText\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function getContainerStorageCondition(selectedItem, userInfo, masterData, containerLocation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let operation = \"\";\r\n        rsapi.post(\"/samplestoragemaster/getContainerStorageCondition\",\r\n            { 'userinfo': userInfo, \"containerCode\": selectedItem.id })\r\n            .then(response => {\r\n\r\n                if (response.data[\"storageContainer\"] !== null) {\r\n                    operation = \"update\";\r\n                } else {\r\n                    operation = \"create\";\r\n                }\r\n                masterData = {\r\n                    ...masterData, storageContainer: response.data[\"storageContainer\"]\r\n                };\r\n                // sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        containerCode: selectedItem.id,\r\n                        containerLocation,\r\n                        operation,\r\n                        selectedItem\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getStorageConditionFromMaster(userInfo, masterData, editContainerID) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n        let operation = \"\";\r\n        if (masterData[\"storageContainer\"] && masterData[\"storageContainer\"] !== null) {\r\n\r\n            const geStorageCondition = rsapi.post(\"/storagecondition/getStorageCondition\",\r\n                { 'userinfo': userInfo })\r\n\r\n            const getSampleStorageCondition = rsapi.post(\"/samplestoragemaster/getContainerStorageConditionByID\",\r\n                { 'userinfo': userInfo, \"containerStorageCode\": masterData[\"storageContainer\"].ncontainerstoragecode });\r\n\r\n            urlArray = [geStorageCondition, getSampleStorageCondition];\r\n            operation = \"update\"\r\n        } else {\r\n\r\n\r\n            const geStorageCondition = rsapi.post(\"/storagecondition/getStorageCondition\",\r\n                { 'userinfo': userInfo })\r\n\r\n            urlArray = [geStorageCondition];\r\n            operation = \"create\"\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const conditionMap = constructOptionList(response[0].data, \"nstorageconditioncode\", \"sstorageconditionname\", false, false, true);\r\n                const conditionMaster = conditionMap.get(\"OptionList\");\r\n\r\n                if (masterData[\"storageContainer\"] && masterData[\"storageContainer\"] !== null) {\r\n                    conditionMaster.map(item => item.value === response[1].data[\"nstorageconditioncode\"] ?\r\n                        selectedRecord[\"nstorageconditioncode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item\r\n                        }\r\n                        : \"\");\r\n\r\n                    masterData = {\r\n                        ...masterData, storageCondition: conditionMaster, storageContainer: response[1].data\r\n                    };\r\n                } else {\r\n\r\n                    const defaultCondition = conditionMaster.filter(items => items.item.ndefaultstatus === transactionStatus.YES);\r\n                    if (defaultCondition.length > 0) {\r\n                        selectedRecord[\"nstorageconditioncode\"] = {\r\n                            \"label\": defaultCondition[0].label,\r\n                            \"value\": defaultCondition[0].value,\r\n                            \"item\": defaultCondition\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData, storageCondition: conditionMaster\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        operation,\r\n                        ncontrolcode: editContainerID\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const changeStorageCategoryFilterOnSampleMaster = (inputParam, filterStorageCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/getSampleStorageMasterByCategory\", inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterStorageCategory,\r\n                            nfilterStorageCategory: inputParam.inputData.nfilterStorageCategory.value,\r\n                            storageContainer: undefined,\r\n                            containers: undefined, sampleStorageMaster: undefined\r\n                        },\r\n                        containerLocation: undefined,\r\n                        activeTabIndex: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function openSampleStorageApprovedLocation(userInfo, masterData, moveId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n\r\n\r\n        const geStorageCategory = rsapi.post(\"/storagecategory/getStorageCategory\",\r\n            { 'userinfo': userInfo })\r\n\r\n        const getApprovedLocation = rsapi.post(\"/samplestoragemaster/getSampleStorageMasterByCategory\",\r\n            {\r\n                'userinfo': userInfo, \"nstoragecategorycode\": masterData[\"selectedSampleStorageVersion\"].nstoragecategorycode\r\n            });\r\n\r\n        urlArray = [geStorageCategory, getApprovedLocation];\r\n\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const conditionMap = constructOptionList(response[0].data, \"nstoragecategorycode\", \"sstoragecategoryname\", false, false, true);\r\n                const conditionMaster = conditionMap.get(\"OptionList\");\r\n\r\n                const locationMap = constructOptionList(response[1].data[\"approvedSampleStorageLocation\"], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", false, false, true);\r\n                const locationMaster = locationMap.get(\"OptionList\");\r\n\r\n\r\n                conditionMaster.map(item => item.value === masterData[\"selectedSampleStorageVersion\"].nstoragecategorycode ?\r\n                    selectedRecord[\"nstoragecategorycode\"] = {\r\n                        \"label\": item.label,\r\n                        \"value\": item.value,\r\n                        \"item\": item.item\r\n                    }\r\n                    : \"\");\r\n\r\n                let approvedTreeData = [];\r\n                locationMaster.map(item => item.value === masterData[\"selectedSampleStorageVersion\"].nsamplestoragelocationcode ?\r\n                    selectedRecord[\"nsamplestoragelocationcode\"] = {\r\n                        \"label\": item.label,\r\n                        \"value\": item.value,\r\n                        \"item\": item.item\r\n                    }\r\n                    : \"\");\r\n\r\n                locationMaster.map(item => item.value === masterData[\"selectedSampleStorageVersion\"].nsamplestoragelocationcode ?\r\n                    approvedTreeData = item.item\r\n                    : \"\");\r\n\r\n                masterData = {\r\n                    ...masterData, storageCategory: conditionMaster, approvedLocation: locationMaster, approvedTreeData: JSON.parse(approvedTreeData[\"jsondata\"].value).data\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        openChildModal: true,\r\n                        operation: \"move\",\r\n                        ncontrolcode: moveId\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function loadApprovedLocationOnCombo(userInfo, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/getSampleStorageMasterByCategory\",\r\n            {\r\n                'userinfo': userInfo, \"nstoragecategorycode\": selectedRecord.nstoragecategorycode.value\r\n            })\r\n            .then(response => {\r\n\r\n                const locationMap = constructOptionList(response.data[\"approvedSampleStorageLocation\"], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", false, false, true);\r\n                const locationMaster = locationMap.get(\"OptionList\");\r\n\r\n                selectedRecord[\"nsamplestoragelocationcode\"] = [];\r\n                let approvedTreeData = [];\r\n\r\n                masterData = {\r\n                    ...masterData, approvedLocation: locationMaster, approvedTreeData\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function loadApprovedLocationOnTreeData(userInfo, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/getApprovedSampleStorageLocationByID\",\r\n            {\r\n                'userinfo': userInfo, \"nstoragecategorycode\": selectedRecord.nstoragecategorycode.value, \"nsamplestoragelocationcode\": selectedRecord.nsamplestoragelocationcode.value\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, approvedTreeData: JSON.parse(response.data[0][\"jsondata\"].value).data\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function moveItems(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/moveItems\", inputParam)\r\n            .then(response => {\r\n\r\n                // if (inputParam.moveContainers === true) {\r\n                masterData = {\r\n                    ...masterData, selectedSampleStorageVersion: response.data[0]\r\n                };\r\n                // } else {\r\n                //     masterData = {\r\n                //         ...masterData, selectedSampleStorageVersion: response.data[0]\r\n                //     };\r\n                // }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        openChildModal: false,\r\n                        masterData,\r\n                        activeTabIndex: undefined,\r\n                        loadEsign: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function saveSampleStorageMaster(userInfo, masterData, selectedRecord, inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/createSampleStorageMaster\",\r\n            {\r\n                'userinfo': userInfo, \"sampleStorageMaster\": inputParam.inputData[\"sampleStorageMaster\"]\r\n            })\r\n            .then(response => {\r\n\r\n                selectedRecord[\"ssamplearno\"] = \"\";\r\n                selectedRecord[\"nsampleqty\"] = \"\";\r\n                masterData = {\r\n                    ...masterData, sampleStorageMaster: response.data[\"sampleStorageMaster\"],\r\n                    selectedSampleStorageMaster: response.data[\"selectedSampleStorageMaster\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        selectedRecord,\r\n                        openModal: inputParam.saveType === 2 ? true : false,\r\n                        loadEsign: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialSampleStorageMaster(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    let { selectedRecord, userInfo, masterData } = inputParam[\"screenData\"];\r\n                    delete selectedRecord.esignpassword;\r\n                    delete selectedRecord.esigncomments;\r\n                    delete selectedRecord.esignreason;\r\n                    delete selectedRecord.agree;\r\n                    delete inputParam.inputData.password;\r\n                    userInfo = inputParam.inputData.userinfo;\r\n                    if (inputParam[\"screenData\"].inputParam.operation === \"move\") {\r\n                        dispatch(moveItems(inputParam[\"screenData\"].inputParam, masterData));\r\n                    } else {\r\n                        dispatch(saveSampleStorageMaster(inputParam.inputData.userinfo, masterData, selectedRecord, inputParam[\"screenData\"].inputParam))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function sendToStoreSampleStorageMaster(userInfo, inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/samplestoragemaster/createSampleStorageMaster\", inputParam.inputData\r\n            // {\r\n            //     'userinfo': userInfo, \"sampleStorageMaster\": inputParam.inputData[\"sampleStorageMaster\"]\r\n            // }\r\n        )\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        loading: false,\r\n                        openChildModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function addSample(addID, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        let urlArray = [];\r\n\r\n\r\n        const getUnit = rsapi.post(\"/unit/getUnit\",\r\n            { 'userinfo': userInfo })\r\n\r\n        const getSettings = rsapi.post(\"/samplestoragemaster/getSettingsForSubSampleQty\",\r\n            {\r\n                'userinfo': userInfo });\r\n\r\n        urlArray = [getUnit, getSettings];\r\n\r\n\r\n        Axios.all(urlArray)      \r\n            .then(response => {\r\n                let isneedSubSampleQty = false;\r\n                if(response[1].data !== null){\r\n                    if(response[1].data && response[1].data[\"ssettingvalue\"] === '3'){\r\n                        isneedSubSampleQty = true;\r\n                    }\r\n                }\r\n                const conditionUnitMap = constructOptionList(response[0].data, \"nunitcode\", \"sunitname\", false, false, true);\r\n                const conditionUnitMaster = conditionUnitMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultUnit = conditionUnitMaster.filter(function (item) {\r\n                    return item.item.ndefaultstatus === transactionStatus.YES;\r\n                });\r\n                if (defaultUnit.length > 0) {\r\n                    selectedRecord[\"nunitcode\"] = {\r\n                        value: defaultUnit[0].value,\r\n                        label: defaultUnit[0].label,\r\n                        item: defaultUnit[0].item\r\n                    };\r\n                }\r\n                masterData = {\r\n                    ...masterData, unitMaster: conditionUnitMaster\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        openModal: true, selectedRecord,\r\n                        operation: \"create\", ncontrolcode: addID,\r\n                        loading: false, isneedSubSampleQty\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}