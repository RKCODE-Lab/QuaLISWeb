{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock, faList } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, convertDateValuetoString, constructOptionList } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, TemplateType, transactionStatus } from '../../components/Enumeration';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport ReactTooltip from 'react-tooltip';\nimport ConfigureScreenFields from './ConfigureScreenFields';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegType(inputParam);\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        // nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        // nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"approve\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"approve\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation: \"delete\",\n          postParam\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.openFieldConfiguration = controlCode => {\n      let openModal = true;\n      let operation = 'configure';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"approve\" || this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = templatedata => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              templatePrimaryKey = templatePrimaryKey === \"\" && index === 0 ? componentRow.label : templatePrimaryKey;\n              jdynamiccolumns.push({\n                columnname: componentRow.label,\n                displayname: componentRow.displayname\n              });\n\n              if (componentRow.inputtype === 'combo') {\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\n                  \"tablecolumnname\": componentRow.valuemember,\n                  \"foriegntablename\": componentRow.source\n                });\n              } // samplesearchfields.push(componentRow.label)\n\n\n              componentRow.inputtype === 'date' && masterdatefields.push({\n                [designProperties.VALUE]: componentRow.label,\n                dateonly: componentRow.dateonly || false\n              }); // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              if (!componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [8]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            templatePrimaryKey = templatePrimaryKey === \"\" && index === 0 ? component.label : templatePrimaryKey;\n            jdynamiccolumns.push({\n              columnname: component.label,\n              displayname: component.displayname\n            });\n\n            if (component.inputtype === 'combo') {\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.label,\n                // \"ismultilingual\": true,\n                \"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.column.value,\n                \"foriegntablename\": \"dynamicmasters\"\n              });\n            } // samplesearchfields.push(component.label)\n\n\n            component.inputtype === 'date' && masterdatefields.push({\n              [designProperties.VALUE]: component.label,\n              dateonly: component.dateonly || false\n            }); // displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n            // component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (!component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: [8]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      let jsondata = {\n        gridItem,\n        gridMoreItem,\n        masterdatefields,\n        editable\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      let displayFields = [];\n      let listItem = [];\n      let gridItem = [];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [];\n      let subsamplesearchfields = [];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }];\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              subsamplesearchfields.push(componentRow.label);\n              subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [17]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n            });\n          } else {\n            subsamplesearchfields.push(component.label);\n            subsampleeditable.push({\n              label: component.label,\n              editableuntill: [17]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            // let combinedField = [];\n            component.children.map(componentRow => {\n              // combinedField.push(componentRow.label)\n              jdynamiccolumns.push({\n                columnname: componentRow.label,\n                displayname: componentRow.displayname\n              });\n\n              if (componentRow.hasOwnProperty('child')) {\n                componentRow.child.map(childData => {\n                  jnumericcolumns.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"foriegntablePK\": componentRow.label,\n                    // \"ismultilingual\": true,\n                    // \"conditionstring\": \" and nformcode in (140) \",\n                    \"tablecolumnname\": childData.tablecolumnname,\n                    \"foriegntablename\": \"dynamicmasters\"\n                  });\n                });\n              }\n\n              samplesearchfields.push(componentRow.label);\n              sampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.inputtype === 'date') {\n                sampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n              }\n\n              displayFields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              componentRow.templatemandatory && listItem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              if (!componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [17]\n                });\n              }\n\n              return null;\n            }); // let fieldSet = combinedField.join(\"&\")\n            // displayFields.push(fieldSet);\n            // componentRow.templatemandatory && listItem.push(fieldSet)\n            // gridMoreItem.push(fieldSet);\n          } else {\n            jdynamiccolumns.push({\n              columnname: component.label,\n              displayname: component.displayname\n            });\n\n            if (component.hasOwnProperty('child')) {\n              component.child.map(childData => {\n                jnumericcolumns.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"foriegntablePK\": component.label,\n                  // \"ismultilingual\": true,\n                  // \"conditionstring\": \" and nformcode in (140) \",\n                  \"tablecolumnname\": childData.tablecolumnname,\n                  \"foriegntablename\": \"dynamicmasters\"\n                });\n              });\n            }\n\n            samplesearchfields.push(component.label);\n            sampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n\n            if (component.inputtype === 'date') {\n              sampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n            }\n\n            displayFields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            component.templatemandatory && listItem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (!component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: [17]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n      displayFields.push({\n        [designProperties.LABEL]: {\n          \"en-US\": \"Reg Date\"\n        },\n        [designProperties.VALUE]: 'dregdate'\n      });\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        ...this.props.Login.testListFields\n      };\n      let jsondata = {\n        sampletemplatefields,\n        subsampletemplatefields: subsamplesearchfields,\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj\n        },\n        [formCode.MYJOBS]: { ...obj\n        }\n      };\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n      dataResult[formCode][dataIndex][field] = event.target.checked;\n\n      if (event.target.checked) {\n        if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n          return toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n          }));\n        } else {\n          designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n        }\n\n        if (field === 'sampledisplayfields') {\n          designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n        }\n      } else {\n        if (field === 'sampledisplayfields') {\n          designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1);\n        }\n\n        designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          designData,\n          dataResult\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n\n      if (this.props.Login.operation === 'configure') {\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: this.props.Login.designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n      } else {\n        let {\n          jsondata,\n          jdynamiccolumns,\n          jnumericcolumns,\n          templatePrimaryKey\n        } = this.props.Login.masterData.realSampleValue.value === 4 ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : {};\n        inputData = {\n          \"userinfo\": this.props.Login.userInfo,\n          \"ncontrolcode\": this.props.Login.ncontrolCode,\n          \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n          \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n          \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n          \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n          \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n          \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n          \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === 4 ? jsondata : this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\n        };\n        inputData[\"designtemplatemapping\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n\n        if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n          let qf_jsonData = {\n            sdisplayname: {}\n          };\n          let qbt_jsonData = {\n            tablename: {}\n          };\n          this.props.Login.languageList.map(lang => {\n            qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n            qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n          });\n          inputData = { ...inputData,\n            sformname: this.state.selectedRecord.sformname,\n            qf_jsonData,\n            qbt_jsonData,\n            sprimarykeyname: templatePrimaryKey,\n            jdynamiccolumns,\n            jnumericcolumns\n          };\n        } // this.designtemplatemappingFieldList.map(item => {\n        //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n        // });\n\n      }\n\n      let postParam = undefined;\n      const inputParam = {\n        classUrl: \"designtemplatemapping\",\n        methodUrl: \"DesignTemplateMapping\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\"\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\n      userStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\n      userStatusCSS = \"outline-danger\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      // unchangeList: [\"FromDate\", \"ToDate\"],\n      searchFieldList: this.searchFieldList\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }), breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"DesignTemplateMapping\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(\"DesignTemplateMapping\", \"create\", this.props.Login.userInfo, this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1, this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1, this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1, addId),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 69\n      }\n    })), this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters ? /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREFIELDS\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.openFieldConfiguration(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faList,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREFIELDS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 73\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 69\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 45\n      }\n    }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 61\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 73\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 93\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / componentrow.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 101\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 105\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 109\n        }\n      }, componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 109\n        }\n      }, \"-\"))))) : /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 97\n        }\n      }, component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 97\n        }\n      }, \" \", \"-\"));\n    }))) : \"\")) : \"\")) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.operation === 'configure' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'configure' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'configure' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 21\n      }\n    }));\n  } // onFilterSubmit = () => {\n  //     this.reloadData()\n  // }\n\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n      const selectedInput = {};\n      let Taglstsampletype;\n      let TaglistRegistrationType;\n      let TaglistRegistrationSubType;\n      let ListFormsMap;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"undefined\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n\n      if (updateState) {\n        this.setState({\n          selectedRecord,\n          controlMap,\n          userRoleControlRights,\n          listSampletype,\n          listRegistrationType,\n          listRegistrationSubType,\n          selectedInput,\n          listForms\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faUserLock","faClock","faList","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","convertDateValuetoString","constructOptionList","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","TemplateType","transactionStatus","Affix","ConfirmMessage","ReactTooltip","ConfigureScreenFields","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","nregtypecode","defaultregtype","defaultregsubtype","updateInfo","typeName","data","defaultform","reloadData","searchRef","current","openFilter","showFilter","closeFilter","onFilterSubmit","nregsubtypecode","nformcode","realSampleValue","realFormValue","realRegTypeValue","realRegSubTypeValue","onApproveClick","selectedDesignTemplateMapping","ntransactionstatus","RETIRED","ncontrolCode","controlMap","has","get","ncontrolcode","postParam","undefined","Value","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","operation","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","openModal","warn","intl","formatMessage","id","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","openFieldConfiguration","controlCode","screenName","designtemplatemapping","ndesigntemplatemappingcode","validateEsign","sreason","selectedRecord","password","closeModal","selectedId","onComboChange","comboData","fieldName","setState","onInputOnChange","target","type","name","checked","YES","NO","handleDateChange","dateName","dateValue","getGridJsondata","templatedata","gridItem","gridMoreItem","masterdatefields","editable","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","map","row","children","column","component","index","hasOwnProperty","componentRow","label","push","columnname","displayname","inputtype","displaymember","valuemember","source","VALUE","dateonly","mandatory","templatemandatory","LABEL","editableuntill","table","item","jsondata","getJsondata","displayFields","listItem","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","testdatefields","nsubsampletemplatecode","dateConstraintArraySQL","child","childData","tablecolumnname","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","testListFields","SAMPLEREGISTRATION","sampleeditable","RESULTENTRY","APPROVAL","JOBALLOCATION","MYJOBS","onChangeToggle","dataItem","field","dataIndex","designData","dataResult","length","splice","realData","findIndex","x","onSaveClick","formRef","jsondataobj","nreactregtemplatecode","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","sprimarykeyname","onTabChange","tabProps","isOpen","designtemplatemappingData","masterStatus","error","userLogged","Map","showAccordian","selectedInput","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","render","Layout","userStatusCSS","ACTIVE","APPROVED","addId","deleteId","approveId","filterParam","fetchUrl","fecthInputObject","validationColumnList","mandatoryFields","forEach","breadCrumbData","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","sregtemplatename","sversionno","stransdisplaystatus","indexOf","Masters","componentrow","designtemplatemappingList","subSampleTemplateList","nneedsubsample","componentDidUpdate","previousProps","updateState","Object","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","qualisforms","componentWillUnmount","modalName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,SAA9B,EAAyCC,SAAzC,QAA0D,iBAA1D;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,UAA9C,EAA0DC,OAA1D,EAAmEC,MAAnE,QAAiF,mCAAjF,C,CAAqH;;AACrH,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,uBAD7B,EACsDC,WADtD,EACmEC,8BADnE,EACmGC,mBADnG,EAEIC,oCAFJ,EAE0CC,gBAF1C,EAE4DC,2BAF5D,EAEyFC,mBAFzF,EAE8GC,sBAF9G,EAEsIC,kBAFtI,QAGO,eAHP;AAIA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,6BAA3C;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,wBAAnC,EAA6DC,mBAA7D,QAAwF,+BAAxF,C,CAAwH;;AACxH,OAAOC,UAAP,MAAuB,oDAAvB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,gBAAT,EAA2BC,QAA3B,EAAqCC,YAArC,EAAmDC,iBAAnD,QAA4E,8BAA5E;AAEA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,qBAAN,SAAoCvD,KAAK,CAACwD,SAA1C,CAAoD;AAChDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;AACA;AACA;;AANe,SAkDnBC,iBAlDmB,GAkDC,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtC,UAAID,KAAK,KAAK,IAAd,EAAoB;AAChB;AACA,YAAIE,SAAS,GAAG,EAAhB;;AACA,YAAID,SAAS,KAAK,YAAlB,EAAgC;AAE5BC,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADnB;AAERC,YAAAA,KAAK,EAAE,CAFC;AAGRC,YAAAA,eAAe,EAAEC,QAAQ,CAACP,KAAK,CAACQ,KAAP;AAHjB,WAAZ;AAMA,cAAIC,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCC,YAAAA,iBAAiB,EAAEV;AAArD,WAAjB;AACA,cAAIW,UAAU,GAAG;AAAEF,YAAAA,UAAF;AAAcP,YAAAA;AAAd,WAAjB;AACA,eAAKJ,KAAL,CAAW/B,mBAAX,CAA+B4C,UAA/B;AACH,SAXD,MAYK,IAAIV,SAAS,KAAK,kBAAlB,EAAsC;AAEvCC,UAAAA,SAAS,GAAG;AACRC,YAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADnB;AAGRQ,YAAAA,YAAY,EAAEL,QAAQ,CAACP,KAAK,CAACQ,KAAP,CAHd;AAIRF,YAAAA,eAAe,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAA5B,CAA8CF;AAJvD,WAAZ;AAOA,cAAIC,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCI,YAAAA,cAAc,EAAEb;AAAlD,WAAjB;AACA,cAAIW,UAAU,GAAG;AAAEF,YAAAA,UAAF;AAAcP,YAAAA;AAAd,WAAjB;AACA,eAAKJ,KAAL,CAAW9B,sBAAX,CAAkC2C,UAAlC;AAEH,SAbI,MAaE,IAAIV,SAAS,KAAK,qBAAlB,EAAyC;AAE5C,cAAIQ,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCK,YAAAA,iBAAiB,EAAEd;AAArD,WAAjB;AACA,gBAAMe,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEnC,cADK;AAEfoC,YAAAA,IAAI,EAAE;AAAER,cAAAA;AAAF;AAFS,WAAnB;AAKA,eAAKX,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,SATM,MASA;AACH,cAAIN,UAAU,GAAG,EAAE,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAtB;AAAkCS,YAAAA,WAAW,EAAElB;AAA/C,WAAjB;AACA,gBAAMe,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEnC,cADK;AAEfoC,YAAAA,IAAI,EAAE;AAAER,cAAAA;AAAF;AAFS,WAAnB;AAKA,eAAKX,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH;AACJ;AACJ,KAlGkB;;AAAA,SAwYnBI,UAxYmB,GAwYN,MAAM;AACf,WAAKC,SAAL,CAAeC,OAAf,CAAuBb,KAAvB,GAA+B,EAA/B;AAEA,UAAIN,SAAS,GAAG;AACZC,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADf,CAGZ;AACA;AACA;;AALY,OAAhB;AASA,UAAIO,UAAU,GAAG;AAAEF,QAAAA,UAAU,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAA/B;AAA2CP,QAAAA;AAA3C,OAAjB;AACA,WAAKJ,KAAL,CAAWhC,2BAAX,CAAuC6C,UAAvC;AAGH,KAxZkB;;AAAA,SAwdnBW,UAxdmB,GAwdN,MAAM;AACf,UAAIC,UAAU,GAAG,CAAC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB6B,UAAnC;AACA,YAAMR,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnC,cADK;AAEfoC,QAAAA,IAAI,EAAE;AAAEM,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKzB,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,KA/dkB;;AAAA,SAienBS,WAjemB,GAieL,MAAM;AAEhB,YAAMT,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnC,cADK;AAEfoC,QAAAA,IAAI,EAAE;AAAEM,UAAAA,UAAU,EAAE;AAAd;AAFS,OAAnB;AAIA,WAAKzB,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,KAxekB;;AAAA,SA2enBU,cA3emB,GA2eF,MAAM;AAEnB,UAAIvB,SAAS,GAAG;AACZC,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU,QADf;AAEZQ,QAAAA,YAAY,EAAEL,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BI,cAA5B,GAA6C,KAAKf,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BI,cAA5B,CAA2CL,KAA3C,IAAoD,CAAC,CAAlG,GAAsG,CAAC,CAAxG,CAFV;AAGZkB,QAAAA,eAAe,EAAEnB,QAAQ,CAAC,KAAKT,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BK,iBAA5B,GAAgD,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BK,iBAA5B,CAA8CN,KAA9C,IAAuD,CAAC,CAAxG,GAA4G,CAAC,CAA9G,CAHb;AAIZF,QAAAA,eAAe,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAA5B,CAA8CF,KAJnD;AAKZmB,QAAAA,SAAS,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BS,WAA5B,GAA0C,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BS,WAA5B,CAAwCV,KAAxC,IAAiD,CAAC,CAA5F,GAAgG,CAAC;AALhG,OAAhB;AAQA,UAAIC,UAAU,GAAG,EACb,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UADP;AAEbmB,QAAAA,eAAe,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BC,iBAFhC;AAGbmB,QAAAA,aAAa,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BS,WAH9B;AAIbY,QAAAA,gBAAgB,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BI,cAJjC;AAKbkB,QAAAA,mBAAmB,EAAE,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BK;AALpC,OAAjB;AAOA,UAAIH,UAAU,GAAG;AAAEF,QAAAA,UAAF;AAAcP,QAAAA;AAAd,OAAjB;AACA,WAAKJ,KAAL,CAAW7B,kBAAX,CAA8B0C,UAA9B;AACH,KA9fkB;;AAAA,SAggBnBqB,cAhgBmB,GAggBF,MAAM;AACnB,UAAI,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAACgD,OAAvG,EAAgH;AAE5G,cAAMC,YAAY,GAAG,KAAK3C,KAAL,CAAW4C,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAK7C,KAAL,CAAW4C,UAAX,CAAsBE,GAAtB,CAA0B,8BAA1B,EAA0DC,YAA5I;AACA,YAAItC,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QAAzC;AAEA,YAAIqC,SAAS,GAAGC,SAAhB;AACAxC,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC;AAAE,wCAA8B,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0D,4BAA1D,IAA0F,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0D,4BAA1D,EAAwFU,KAAlL,GAA0L;AAA1N,SAArC;AACAzC,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAAjE;AACAQ,QAAAA,SAAS,GAAG;AAAEG,UAAAA,aAAa,EAAE,uBAAjB;AAA0CC,UAAAA,cAAc,EAAE,+BAA1D;AAA2FC,UAAAA,eAAe,EAAE;AAA5G,SAAZ;AAIA,cAAMnC,UAAU,GAAG;AACfT,UAAAA,SAAS,EAAE;AACP,wBAAY,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU;AADtB,WADI;AAKf2C,UAAAA,QAAQ,EAAE,uBALK;AAMfC,UAAAA,SAAS,EAAE,uBANI;AAOf9C,UAAAA,SAAS,EAAEA,SAPI;AAQf+C,UAAAA,SAAS,EAAE,SARI;AAQOR,UAAAA;AARP,SAAnB;AAUA,YAAIS,QAAJ;AAEA,cAAMzC,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAApC;AAEA,cAAM0C,WAAW,GAAG7E,SAAS,CAAC,KAAKwB,KAAL,CAAWJ,KAAX,CAAiB0D,qBAAlB,EAAyC,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAAnE,EAA8ES,YAA9E,CAA7B;;AACA,YAAIe,WAAJ,EAAiB;AACb,gBAAMpC,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEnC,cADK;AAEfoC,YAAAA,IAAI,EAAE;AACFoC,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAE3C,gBAAAA,UAAF;AAAcF,gBAAAA;AAAd,eAD3B;AACuDyC,cAAAA,QADvD;AACiEK,cAAAA,SAAS,EAAE,IAD5E;AACkFN,cAAAA,SAAS,EAAE;AAD7F;AAFS,WAAnB;AAMA,eAAKnD,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,SARD,MASK;AACD,eAAKjB,KAAL,CAAWvC,UAAX,CAAsBoD,UAAtB,EAAkCF,UAAlC,EAA8C,WAA9C;AACH;AAEJ,OAzCD,MA0CK;AAEDpD,QAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK1D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA/iBkB;;AAAA,SAgjBnBC,aAhjBmB,GAgjBH,MAAM;AAClB,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,eAA5B,EAA6C,KAAKhE,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA7C,EAAkG,KAAK7D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAlG,EACI,KAAK7D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EACqD,KAAK7D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADrD,EAEI,MAAM,KAAKI,cAAL,EAFV;AAGH,KApjBkB;;AAAA,SAqjBnBA,cArjBmB,GAqjBF,MAAM;AACnB,UAAK,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAAC6E,KAAxG,EAAgH;AAC5G,cAAM5B,YAAY,GAAG,KAAK3C,KAAL,CAAW4C,UAAX,CAAsBC,GAAtB,CAA0B,6BAA1B,KAA4D,KAAK7C,KAAL,CAAW4C,UAAX,CAAsBE,GAAtB,CAA0B,6BAA1B,EAAyDC,YAA1I;AACA,YAAItC,SAAS,GAAG,EAAhB;AACAA,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QAAzC;AAEA,YAAIqC,SAAS,GAAGC,SAAhB;AACAxC,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC;AAAE,wCAA8B,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0D,4BAA1D,IAA0F,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0D,4BAA1D,EAAwFU,KAAlL,GAA0L;AAA1N,SAArC;AACAzC,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAAjE;AACAQ,QAAAA,SAAS,GAAG;AAAEG,UAAAA,aAAa,EAAE,uBAAjB;AAA0CC,UAAAA,cAAc,EAAE,+BAA1D;AAA2FC,UAAAA,eAAe,EAAE;AAA5G,SAAZ;AAGA,cAAMnC,UAAU,GAAG;AACfT,UAAAA,SAAS,EAAE;AACP,wBAAY,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU;AADtB,WADI;AAKf2C,UAAAA,QAAQ,EAAE,uBALK;AAMfC,UAAAA,SAAS,EAAE,uBANI;AAOf9C,UAAAA,SAAS,EAAEA,SAPI;AAQf+C,UAAAA,SAAS,EAAE,QARI;AAQMR,UAAAA;AARN,SAAnB;AAUA,YAAIS,QAAJ;AAEA,cAAMzC,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAApC;AAEA,cAAM0C,WAAW,GAAG7E,SAAS,CAAC,KAAKwB,KAAL,CAAWJ,KAAX,CAAiB0D,qBAAlB,EAAyC,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAAnE,EAA8ES,YAA9E,CAA7B;;AACA,YAAIe,WAAJ,EAAiB;AACb,gBAAMpC,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEnC,cADK;AAEfoC,YAAAA,IAAI,EAAE;AACFoC,cAAAA,SAAS,EAAE,IADT;AACeC,cAAAA,UAAU,EAAE;AAAE3C,gBAAAA,UAAF;AAAcF,gBAAAA;AAAd,eAD3B;AACuDyC,cAAAA,QADvD;AACiEK,cAAAA,SAAS,EAAE,IAD5E;AACkFN,cAAAA,SAAS,EAAE;AAD7F;AAFS,WAAnB;AAMA,eAAKnD,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,SARD,MASK;AACD,eAAKjB,KAAL,CAAWvC,UAAX,CAAsBoD,UAAtB,EAAkCF,UAAlC,EAA8C,WAA9C;AACH;AAEJ,OAvCD,MAwCK;AAEDpD,QAAAA,KAAK,CAACmG,IAAN,CAAW,KAAK1D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAlmBkB;;AAAA,SAmmBnBM,sBAnmBmB,GAmmBOC,WAAD,IAAiB;AACtC,UAAIX,SAAS,GAAG,IAAhB;AACA,UAAIN,SAAS,GAAG,WAAhB;AACA,UAAIT,YAAY,GAAG0B,WAAnB;AACA,UAAIC,UAAU,GAAG,YAAjB;AACA,UAAIxD,UAAU,GAAG;AACbT,QAAAA,SAAS,EAAE;AACPkE,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKvE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DoC;AADnE,WADhB;AAIPlE,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AAJpB,SADE;AAOb6C,QAAAA,SAPa;AAQbT,QAAAA,YARa;AASb2B,QAAAA;AATa,OAAjB;AAWA,WAAKrE,KAAL,CAAWnC,mBAAX,CAA+BgD,UAA/B;AACH,KApnBkB;;AAAA,SAqnBnB2D,aArnBmB,GAqnBH,MAAM;AAClB,YAAM3D,UAAU,GAAG;AACfT,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QADZ;AAERmE,YAAAA,OAAO,EAAE,KAAK9E,KAAL,CAAW+E,cAAX,CAA0B,eAA1B;AAFD,WADL;AAKPC,UAAAA,QAAQ,EAAE,KAAKhF,KAAL,CAAW+E,cAAX,CAA0B,eAA1B;AALH,SADI;AAQflB,QAAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWJ,KAAX,CAAiB4D;AARd,OAAnB;AAWA,WAAKxD,KAAL,CAAWtC,uBAAX,CAAmCmD,UAAnC,EAA+C,WAA/C;AACH,KAloBkB;;AAAA,SAsoBnB+D,UAtoBmB,GAsoBN,MAAM;AACf,UAAIrB,SAAS,GAAG,KAAKvD,KAAL,CAAWJ,KAAX,CAAiB2D,SAAjC;AACA,UAAIE,SAAS,GAAG,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB6D,SAAjC;AACA,UAAIiB,cAAc,GAAG,KAAK1E,KAAL,CAAWJ,KAAX,CAAiB8E,cAAtC;;AACA,UAAI,KAAK1E,KAAL,CAAWJ,KAAX,CAAiB2D,SAArB,EAAgC;AAC5B,YAAI,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBuD,SAAjB,KAA+B,SAA/B,IACG,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,SAAjB,KAA+B,QADtC,EACgD;AAC5CI,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,SAAS,GAAG,KAAZ;AACAiB,UAAAA,cAAc,GAAG,EAAjB;AACH,SALD,MAMK;AACDnB,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OAVD,MAWK;AACDE,QAAAA,SAAS,GAAG,KAAZ;AACAiB,QAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,YAAMzD,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnC,cADK;AAEfoC,QAAAA,IAAI,EAAE;AAAEsC,UAAAA,SAAF;AAAaF,UAAAA,SAAb;AAAwBmB,UAAAA,cAAxB;AAAwCG,UAAAA,UAAU,EAAE;AAApD;AAFS,OAAnB;AAIA,WAAK7E,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AAEH,KAhqBkB;;AAAA,SAkqBnB6D,aAlqBmB,GAkqBH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMN,cAAc,GAAG,KAAK/E,KAAL,CAAW+E,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACM,SAAD,CAAd,GAA4BD,SAA5B;AAAsC;AAEtC,WAAKE,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACH,KAvqBkB;;AAAA,SAyqBnBQ,eAzqBmB,GAyqBAhF,KAAD,IAAW;AACzB,YAAMwE,cAAc,GAAG,KAAK/E,KAAL,CAAW+E,cAAX,IAA6B,EAApD;;AACA,UAAIxE,KAAK,CAACiF,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCV,QAAAA,cAAc,CAACxE,KAAK,CAACiF,MAAN,CAAaE,IAAd,CAAd,GAAoCnF,KAAK,CAACiF,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCjG,iBAAiB,CAACkG,GAAlD,GAAwDlG,iBAAiB,CAACmG,EAA9G;AACH,OAFD,MAGK;AACDd,QAAAA,cAAc,CAACxE,KAAK,CAACiF,MAAN,CAAaE,IAAd,CAAd,GAAoCnF,KAAK,CAACiF,MAAN,CAAazE,KAAjD;AACH;;AAED,WAAKuE,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACH,KAnrBkB;;AAAA,SAorBnBe,gBAprBmB,GAorBA,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACxC,YAAM;AAAEjB,QAAAA;AAAF,UAAqB,KAAK/E,KAAhC;AACA+E,MAAAA,cAAc,CAACgB,QAAD,CAAd,GAA2BC,SAA3B;AACA,WAAKV,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACH,KAxrBkB;;AAAA,SA0rBnBkB,eA1rBmB,GA0rBAC,YAAD,IAAkB;AAChC,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,gBAAgB,GAAG,EAAvB;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AACAP,MAAAA,YAAY,IAAIA,YAAY,CAACQ,GAAb,CAAiBC,GAAG,IAChCA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,QAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoB,CAACI,SAAD,EAAYC,KAAZ,KAAsB;AACzD,cAAID,SAAS,CAACE,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtCF,YAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBO,YAAY,IAAI;AACnCR,cAAAA,kBAAkB,GAAGA,kBAAkB,KAAK,EAAvB,IAA6BM,KAAK,KAAK,CAAvC,GAA2CE,YAAY,CAACC,KAAxD,GAAgET,kBAArF;AACAF,cAAAA,eAAe,CAACY,IAAhB,CAAqB;AACjBC,gBAAAA,UAAU,EAAEH,YAAY,CAACC,KADR;AAEjBG,gBAAAA,WAAW,EAAEJ,YAAY,CAACI;AAFT,eAArB;;AAIA,kBAAIJ,YAAY,CAACK,SAAb,KAA2B,OAA/B,EAAwC;AACpCd,gBAAAA,eAAe,CAACW,IAAhB,CAAqB;AACjB,gCAAcF,YAAY,CAACM,aADV;AAEjB,iCAAeN,YAAY,CAACI,WAFX;AAGjB,oCAAkBJ,YAAY,CAACC,KAHd;AAIjB;AACA;AACA,qCAAmBD,YAAY,CAACO,WANf;AAOjB,sCAAoBP,YAAY,CAACQ;AAPhB,iBAArB;AASH,eAhBkC,CAiBnC;;;AACAR,cAAAA,YAAY,CAACK,SAAb,KAA2B,MAA3B,IAAqCjB,gBAAgB,CAACc,IAAjB,CAAsB;AAAE,iBAAC5H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC,KAAzC;AAAgDS,gBAAAA,QAAQ,EAAEV,YAAY,CAACU,QAAb,IAAyB;AAAnF,eAAtB,CAArC,CAlBmC,CAmBnC;AACA;;AACA,kBAAIV,YAAY,CAACW,SAAb,IAA0BX,YAAY,CAACY,iBAA3C,EAA8D;AAC1D1B,gBAAAA,QAAQ,CAACgB,IAAT,CAAc;AAAE,mBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,mBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,iBAAd;AACH,eAFD,MAGK;AACDd,gBAAAA,YAAY,CAACe,IAAb,CAAkB;AAAE,mBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,mBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,iBAAlB;AACH;;AACD,kBAAI,CAACD,YAAY,CAACY,iBAAlB,EAAqC;AACjCvB,gBAAAA,QAAQ,CAACa,IAAT,CAAc;AAAED,kBAAAA,KAAK,EAAED,YAAY,CAACC,KAAtB;AAA6Ba,kBAAAA,cAAc,EAAE,CAAC,CAAD;AAA7C,iBAAd;AACH;;AACD,qBAAO,IAAP;AACH,aA/BD;AAgCH,WAjCD,MAiCO;AACHtB,YAAAA,kBAAkB,GAAGA,kBAAkB,KAAK,EAAvB,IAA6BM,KAAK,KAAK,CAAvC,GAA2CD,SAAS,CAACI,KAArD,GAA6DT,kBAAlF;AACAF,YAAAA,eAAe,CAACY,IAAhB,CAAqB;AACjBC,cAAAA,UAAU,EAAEN,SAAS,CAACI,KADL;AAEjBG,cAAAA,WAAW,EAAEP,SAAS,CAACO;AAFN,aAArB;;AAIA,gBAAIP,SAAS,CAACQ,SAAV,KAAwB,OAA5B,EAAqC;AACjCd,cAAAA,eAAe,CAACW,IAAhB,CAAqB;AACjB,8BAAcL,SAAS,CAACI,KADP;AAEjB,+BAAeJ,SAAS,CAACO,WAFR;AAGjB,kCAAkBP,SAAS,CAACI,KAHX;AAIjB;AACA,mCAAmB,wBAAsBJ,SAAS,CAACkB,KAAV,CAAgBC,IAAhB,CAAqB/F,SAA3C,GAAqD,IALvD;AAMjB,mCAAmB4E,SAAS,CAACD,MAAV,CAAiB9F,KANnB;AAOjB,oCAAoB;AAPH,eAArB;AASH,aAhBE,CAiBH;;;AACA+F,YAAAA,SAAS,CAACQ,SAAV,KAAwB,MAAxB,IAAkCjB,gBAAgB,CAACc,IAAjB,CAAsB;AAAE,eAAC5H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI,KAAtC;AAA6CS,cAAAA,QAAQ,EAAEb,SAAS,CAACa,QAAV,IAAsB;AAA7E,aAAtB,CAAlC,CAlBG,CAmBH;AACA;;AACA,gBAAIb,SAAS,CAACc,SAAV,IAAuBd,SAAS,CAACe,iBAArC,EAAwD;AACpD1B,cAAAA,QAAQ,CAACgB,IAAT,CAAc;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,eAAd;AACH,aAFD,MAEO;AACHd,cAAAA,YAAY,CAACe,IAAb,CAAkB;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,eAAlB;AACH;;AACD,gBAAI,CAACJ,SAAS,CAACe,iBAAf,EAAkC;AAC9BvB,cAAAA,QAAQ,CAACa,IAAT,CAAc;AAAED,gBAAAA,KAAK,EAAEJ,SAAS,CAACI,KAAnB;AAA0Ba,gBAAAA,cAAc,EAAE,CAAC,CAAD;AAA1C,eAAd;AACH;;AACD,mBAAO,IAAP;AACH;AAEJ,SAlEkB,CAAnB;AAmEH,OApEe,CADJ,CAAhB;AAuEA,UAAIG,QAAQ,GAAG;AACX/B,QAAAA,QADW;AAEXC,QAAAA,YAFW;AAGXC,QAAAA,gBAHW;AAIXC,QAAAA;AAJW,OAAf;AAMA,aAAO;AAAE4B,QAAAA,QAAF;AAAY3B,QAAAA,eAAZ;AAA6BC,QAAAA,eAA7B;AAA8CC,QAAAA;AAA9C,OAAP;AACH,KAhxBkB;;AAAA,SAixBnB0B,WAjxBmB,GAixBJjC,YAAD,IAAkB;AAC5B,UAAIkC,aAAa,GAAG,EAApB;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIlC,QAAQ,GAAG,EAAf;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIE,QAAQ,GAAG,EAAf;AACA,UAAIgC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,gBAAgB,GAAG,CAAC;AAAE,SAACjJ,gBAAgB,CAACmI,KAAlB,GAA0B,UAA5B;AAAwCC,QAAAA,QAAQ,EAAE;AAAlD,OAAD,CAAvB;AACA,UAAIc,qBAAqB,GAAG,EAA5B;AACA,UAAIC,mBAAmB,GAAG,EAA1B;AACA,UAAIC,wBAAwB,GAAG,EAA/B;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,UAAIC,oBAAoB,GAAG,EAA3B;AACA,UAAIC,uBAAuB,GAAG,EAA9B;AACA,UAAIxC,eAAe,GAAG,EAAtB;AACA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIwC,cAAc,GAAG,CAAC;AAAE,SAACzJ,gBAAgB,CAACmI,KAAlB,GAA0B,kBAA5B;AAAgDC,QAAAA,QAAQ,EAAE;AAA1D,OAAD,CAArB;AACA,WAAK3H,KAAL,CAAW+E,cAAX,CAA0BkE,sBAA1B,IAAoD,KAAKjJ,KAAL,CAAW+E,cAAX,CAA0BkE,sBAA1B,CAAiDhB,IAAjD,CAAsDC,QAAtD,CAA+DxB,GAA/D,CAAmEC,GAAG,IACtHA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,QAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAChD,cAAIA,SAAS,CAACE,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtCF,YAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBO,YAAY,IAAI;AACnC4B,cAAAA,qBAAqB,CAAC1B,IAAtB,CAA2BF,YAAY,CAACC,KAAxC;AACAoB,cAAAA,iBAAiB,CAACnB,IAAlB,CAAuB;AAAED,gBAAAA,KAAK,EAAED,YAAY,CAACC,KAAtB;AAA6Ba,gBAAAA,cAAc,EAAE,CAAC,EAAD;AAA7C,eAAvB;;AACA,kBAAId,YAAY,CAACK,SAAb,KAA2B,MAA/B,EAAuC;AACnCoB,gBAAAA,mBAAmB,CAACvB,IAApB,CAAyB;AAAE,mBAAC5H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC,KAAzC;AAAgDS,kBAAAA,QAAQ,EAAEV,YAAY,CAACU,QAAb,IAAyB;AAAnF,iBAAzB;AACAgB,gBAAAA,wBAAwB,GAAG1B,YAAY,CAACiC,sBAAb,GAAsC,CAAC,GAAGjC,YAAY,CAACiC,sBAAjB,EAAyC,GAAGP,wBAA5C,CAAtC,GAA8GA,wBAAzI;AACH;;AACDJ,cAAAA,iBAAiB,CAACpB,IAAlB,CAAuB;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,eAAvB;AACH,aARD;AAUH,WAXD,MAWO;AACH2B,YAAAA,qBAAqB,CAAC1B,IAAtB,CAA2BL,SAAS,CAACI,KAArC;AACAoB,YAAAA,iBAAiB,CAACnB,IAAlB,CAAuB;AAAED,cAAAA,KAAK,EAAEJ,SAAS,CAACI,KAAnB;AAA0Ba,cAAAA,cAAc,EAAE,CAAC,EAAD;AAA1C,aAAvB;;AACA,gBAAIjB,SAAS,CAACQ,SAAV,KAAwB,MAA5B,EAAoC;AAChCoB,cAAAA,mBAAmB,CAACvB,IAApB,CAAyB;AAAE,iBAAC5H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI,KAAtC;AAA6CS,gBAAAA,QAAQ,EAAEb,SAAS,CAACa,QAAV,IAAsB;AAA7E,eAAzB;AACAgB,cAAAA,wBAAwB,GAAG7B,SAAS,CAACoC,sBAAV,GAAmC,CAAC,GAAGpC,SAAS,CAACoC,sBAAd,EAAsC,GAAGP,wBAAzC,CAAnC,GAAwGA,wBAAnI;AACH;;AACDJ,YAAAA,iBAAiB,CAACpB,IAAlB,CAAuB;AAAE,eAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,eAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,aAAvB;AACH;AACJ,SArBkB,CAAnB;AAsBH,OAvBe,CADgC,CAApD;AA0BAhB,MAAAA,YAAY,IAAIA,YAAY,CAACQ,GAAb,CAAiBC,GAAG,IAChCA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaF,GAAb,CAAiBG,MAAM,IAAI;AACvCA,QAAAA,MAAM,CAACD,QAAP,IAAmBC,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAoBI,SAAS,IAAI;AAChD,cAAIA,SAAS,CAACE,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC;AACAF,YAAAA,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBO,YAAY,IAAI;AACnC;AACAV,cAAAA,eAAe,CAACY,IAAhB,CAAqB;AACjBC,gBAAAA,UAAU,EAAEH,YAAY,CAACC,KADR;AAEjBG,gBAAAA,WAAW,EAAEJ,YAAY,CAACI;AAFT,eAArB;;AAIA,kBAAIJ,YAAY,CAACD,cAAb,CAA4B,OAA5B,CAAJ,EAA0C;AACtCC,gBAAAA,YAAY,CAACkC,KAAb,CAAmBzC,GAAnB,CAAuB0C,SAAS,IAAI;AAChC5C,kBAAAA,eAAe,CAACW,IAAhB,CAAqB;AACjB,kCAAcF,YAAY,CAACC,KADV;AAEjB,mCAAeD,YAAY,CAACI,WAFX;AAGjB,sCAAkBJ,YAAY,CAACC,KAHd;AAIjB;AACA;AACA,uCAAmBkC,SAAS,CAACC,eANZ;AAOjB,wCAAoB;AAPH,mBAArB;AASH,iBAVD;AAWH;;AACDT,cAAAA,kBAAkB,CAACzB,IAAnB,CAAwBF,YAAY,CAACC,KAArC;AACA4B,cAAAA,oBAAoB,CAAC3B,IAArB,CAA0B;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,eAA1B;;AACA,kBAAID,YAAY,CAACK,SAAb,KAA2B,MAA/B,EAAuC;AACnCkB,gBAAAA,gBAAgB,CAACrB,IAAjB,CAAsB;AAAE,mBAAC5H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC,KAAzC;AAAgDS,kBAAAA,QAAQ,EAAEV,YAAY,CAACU,QAAb,IAAyB;AAAnF,iBAAtB;AACAc,gBAAAA,qBAAqB,GAAGxB,YAAY,CAACiC,sBAAb,GAAsC,CAAC,GAAGjC,YAAY,CAACiC,sBAAjB,EAAyC,GAAGT,qBAA5C,CAAtC,GAA2GA,qBAAnI;AACH;;AACDL,cAAAA,aAAa,CAACjB,IAAd,CAAmB;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,eAAnB;AACAD,cAAAA,YAAY,CAACY,iBAAb,IAAkCQ,QAAQ,CAAClB,IAAT,CAAc;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,eAAd,CAAlC;;AACA,kBAAID,YAAY,CAACW,SAAb,IAA0BX,YAAY,CAACY,iBAA3C,EAA8D;AAC1D1B,gBAAAA,QAAQ,CAACgB,IAAT,CAAc;AAAE,mBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,mBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,iBAAd;AACH,eAFD,MAGK;AACDd,gBAAAA,YAAY,CAACe,IAAb,CAAkB;AAAE,mBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0Bb,YAAY,CAACI,WAAzC;AAAsD,mBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BT,YAAY,CAACC;AAA7F,iBAAlB;AACH;;AACD,kBAAI,CAACD,YAAY,CAACY,iBAAlB,EAAqC;AACjCvB,gBAAAA,QAAQ,CAACa,IAAT,CAAc;AAAED,kBAAAA,KAAK,EAAED,YAAY,CAACC,KAAtB;AAA6Ba,kBAAAA,cAAc,EAAE,CAAC,EAAD;AAA7C,iBAAd;AACH;;AACD,qBAAO,IAAP;AACH,aArCD,EAFsC,CAwCtC;AACA;AACA;AACA;AACH,WA5CD,MA4CO;AACHxB,YAAAA,eAAe,CAACY,IAAhB,CAAqB;AACjBC,cAAAA,UAAU,EAAEN,SAAS,CAACI,KADL;AAEjBG,cAAAA,WAAW,EAAEP,SAAS,CAACO;AAFN,aAArB;;AAIA,gBAAIP,SAAS,CAACE,cAAV,CAAyB,OAAzB,CAAJ,EAAuC;AACnCF,cAAAA,SAAS,CAACqC,KAAV,CAAgBzC,GAAhB,CAAoB0C,SAAS,IAAI;AAC7B5C,gBAAAA,eAAe,CAACW,IAAhB,CAAqB;AACjB,gCAAcL,SAAS,CAACI,KADP;AAEjB,iCAAeJ,SAAS,CAACO,WAFR;AAGjB,oCAAkBP,SAAS,CAACI,KAHX;AAIjB;AACA;AACA,qCAAmBkC,SAAS,CAACC,eANZ;AAOjB,sCAAoB;AAPH,iBAArB;AASH,eAVD;AAWH;;AACDT,YAAAA,kBAAkB,CAACzB,IAAnB,CAAwBL,SAAS,CAACI,KAAlC;AACA4B,YAAAA,oBAAoB,CAAC3B,IAArB,CAA0B;AAAE,eAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,eAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,aAA1B;;AACA,gBAAIJ,SAAS,CAACQ,SAAV,KAAwB,MAA5B,EAAoC;AAChCkB,cAAAA,gBAAgB,CAACrB,IAAjB,CAAsB;AAAE,iBAAC5H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI,KAAtC;AAA6CS,gBAAAA,QAAQ,EAAEb,SAAS,CAACa,QAAV,IAAsB;AAA7E,eAAtB;AACAc,cAAAA,qBAAqB,GAAG3B,SAAS,CAACoC,sBAAV,GAAmC,CAAC,GAAGpC,SAAS,CAACoC,sBAAd,EAAsC,GAAGT,qBAAzC,CAAnC,GAAqGA,qBAA7H;AACH;;AACDL,YAAAA,aAAa,CAACjB,IAAd,CAAmB;AAAE,eAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,eAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,aAAnB;AACAJ,YAAAA,SAAS,CAACe,iBAAV,IAA+BQ,QAAQ,CAAClB,IAAT,CAAc;AAAE,eAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,eAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,aAAd,CAA/B;;AACA,gBAAIJ,SAAS,CAACc,SAAV,IAAuBd,SAAS,CAACe,iBAArC,EAAwD;AACpD1B,cAAAA,QAAQ,CAACgB,IAAT,CAAc;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,eAAd;AACH,aAFD,MAEO;AACHd,cAAAA,YAAY,CAACe,IAAb,CAAkB;AAAE,iBAAC5H,gBAAgB,CAACuI,KAAlB,GAA0BhB,SAAS,CAACO,WAAtC;AAAmD,iBAAC9H,gBAAgB,CAACmI,KAAlB,GAA0BZ,SAAS,CAACI;AAAvF,eAAlB;AACH;;AACD,gBAAI,CAACJ,SAAS,CAACe,iBAAf,EAAkC;AAC9BvB,cAAAA,QAAQ,CAACa,IAAT,CAAc;AAAED,gBAAAA,KAAK,EAAEJ,SAAS,CAACI,KAAnB;AAA0Ba,gBAAAA,cAAc,EAAE,CAAC,EAAD;AAA1C,eAAd;AACH;;AACD,mBAAO,IAAP;AACH;AAEJ,SAlFkB,CAAnB;AAmFH,OApFe,CADJ,CAAhB;AAwFAK,MAAAA,aAAa,CAACjB,IAAd,CAAmB;AAAE,SAAC5H,gBAAgB,CAACuI,KAAlB,GAA0B;AAAE,mBAAS;AAAX,SAA5B;AAAqD,SAACvI,gBAAgB,CAACmI,KAAlB,GAA0B;AAA/E,OAAnB;AACA,UAAI4B,GAAG,GAAG;AACNC,QAAAA,mBAAmB,EAAEnB,aADf;AAENoB,QAAAA,cAAc,EAAEnB,QAFV;AAGNoB,QAAAA,cAAc,EAAEtD,QAHV;AAINuD,QAAAA,kBAAkB,EAAEtD,YAJd;AAKNmC,QAAAA,iBALM;AAMNC,QAAAA,gBANM;AAONE,QAAAA,mBAPM;AAQNE,QAAAA,kBARM;AASNC,QAAAA,qBATM;AAUNG,QAAAA,cAVM;AAWNP,QAAAA,qBAXM;AAYNE,QAAAA,wBAZM;AAaN,WAAG,KAAKtI,KAAL,CAAWJ,KAAX,CAAiB0J;AAbd,OAAV;AAiBA,UAAIzB,QAAQ,GAAG;AACXY,QAAAA,oBADW;AAEXC,QAAAA,uBAAuB,EAAEF,qBAFd;AAGX,SAACrJ,QAAQ,CAACoK,kBAAV,GAA+B,EAC3B,GAAGN,GADwB;AAE3BO,UAAAA,cAAc,EAAEvD,QAFW;AAG3BgC,UAAAA;AAH2B,SAHpB;AAQX,SAAC9I,QAAQ,CAACsK,WAAV,GAAwB,EACpB,GAAGR;AADiB,SARb;AAWX,SAAC9J,QAAQ,CAACuK,QAAV,GAAqB,EACjB,GAAGT;AADc,SAXV;AAcX,SAAC9J,QAAQ,CAACwK,aAAV,GAA0B,EACtB,GAAGV;AADmB,SAdf;AAiBX,SAAC9J,QAAQ,CAACyK,MAAV,GAAmB,EACf,GAAGX;AADY;AAjBR,OAAf;AAsBA,aAAOpB,QAAP;AACH,KA/7BkB;;AAAA,SAi8BnBgC,cAj8BmB,GAi8BF,CAAC3J,KAAD,EAAQ4J,QAAR,EAAkBC,KAAlB,EAAyBC,SAAzB,EAAoC7K,QAApC,KAAiD;AAC9D,UAAI8K,UAAU,GAAG,KAAKjK,KAAL,CAAWJ,KAAX,CAAiBqK,UAAlC;AACA,UAAIC,UAAU,GAAG,KAAKlK,KAAL,CAAWJ,KAAX,CAAiBsK,UAAlC;AACAA,MAAAA,UAAU,CAAC/K,QAAD,CAAV,CAAqB6K,SAArB,EAAgCD,KAAhC,IAAyC7J,KAAK,CAACiF,MAAN,CAAaG,OAAtD;;AACA,UAAIpF,KAAK,CAACiF,MAAN,CAAaG,OAAjB,EAA0B;AACtB,YAAIyE,KAAK,KAAK,gBAAV,IAA8BE,UAAU,CAAC9K,QAAD,CAAV,CAAqB4K,KAArB,EAA4BI,MAA5B,IAAsC,CAAxE,EAA2E;AACvE,iBAAO5M,KAAK,CAACmG,IAAN,CAAW,KAAK1D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX,CAAP;AACH,SAFD,MAEO;AACHoG,UAAAA,UAAU,CAAC9K,QAAD,CAAV,CAAqB4K,KAArB,EAA4BK,MAA5B,CAAmCJ,SAAnC,EAA8C,CAA9C,EAAiDF,QAAQ,CAACO,QAA1D;AACH;;AACD,YAAIN,KAAK,KAAK,qBAAd,EAAqC;AACjCE,UAAAA,UAAU,CAAC9K,QAAD,CAAV,CAAqB,oBAArB,EAA2CiL,MAA3C,CAAkDJ,SAAlD,EAA6D,CAA7D,EAAgEF,QAAQ,CAACjD,KAAzE;AACH;AACJ,OATD,MASO;AACH,YAAIkD,KAAK,KAAK,qBAAd,EAAqC;AACjCE,UAAAA,UAAU,CAAC9K,QAAD,CAAV,CAAqB,oBAArB,EAA2CiL,MAA3C,CAAkDH,UAAU,CAAC9K,QAAD,CAAV,CAAqB,oBAArB,EAA2CmL,SAA3C,CAAqDC,CAAC,IAAIA,CAAC,KAAKT,QAAQ,CAACjD,KAAzE,CAAlD,EAAmI,CAAnI;AACH;;AACDoD,QAAAA,UAAU,CAAC9K,QAAD,CAAV,CAAqB4K,KAArB,EAA4BK,MAA5B,CAAmCH,UAAU,CAAC9K,QAAD,CAAV,CAAqB4K,KAArB,EAA4BO,SAA5B,CAAsCC,CAAC,IAAIA,CAAC,CAACrL,gBAAgB,CAACmI,KAAlB,CAAD,KAA8ByC,QAAQ,CAACjD,KAAlF,CAAnC,EAA6H,CAA7H;AACH;;AACD,YAAM5F,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnC,cADK;AAEfoC,QAAAA,IAAI,EAAE;AAAE8I,UAAAA,UAAF;AAAcC,UAAAA;AAAd;AAFS,OAAnB;AAIA,WAAKlK,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AAEH,KA19BkB;;AAAA,SA29BnBuJ,WA39BmB,GA29BL,CAACpH,QAAD,EAAWqH,OAAX,KAAuB;AAGjC,UAAIrK,SAAS,GAAG,EAAhB;;AACA,UAAI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBuD,SAAjB,KAA+B,WAAnC,EAAgD;AAC5C/C,QAAAA,SAAS,GAAG;AACRkE,UAAAA,qBAAqB,EAAE;AACnBC,YAAAA,0BAA0B,EAAE,KAAKvE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DoC,0BADnE;AAEnBmG,YAAAA,WAAW,EAAE,KAAK1K,KAAL,CAAWJ,KAAX,CAAiBqK;AAFX,WADf;AAKR5J,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AALnB,SAAZ;AAOH,OARD,MAQO;AACH,YAAI;AAAEuH,UAAAA,QAAF;AAAY3B,UAAAA,eAAZ;AAA6BC,UAAAA,eAA7B;AAA8CC,UAAAA;AAA9C,YAAqE,KAAKpG,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4CpB,KAA5C,KAAsD,CAAtD,GACrE,KAAKkF,eAAL,CAAqB,KAAKjG,KAAL,CAAW+E,cAAX,CAA0BiG,qBAA1B,CAAgD/C,IAAhD,CAAqDC,QAA1E,CADqE,GAEnE,EAFN;AAGAzH,QAAAA,SAAS,GAAG;AACR,sBAAY,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QADrB;AAER,0BAAgB,KAAKN,KAAL,CAAWJ,KAAX,CAAiB0C,YAFzB;AAGR,mCAAyB,KAAK3C,KAAL,CAAW+E,cAAX,CAA0BiG,qBAA1B,CAAgDjK,KAHjE;AAIR,6BAAmB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4CpB,KAJvD;AAKR,0BAAgB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqB,gBAA5B,GAA+C,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqB,gBAA5B,CAA6CtB,KAA5F,GAAoG,CAAC,CAL7G;AAMR,6BAAmB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,GAAkD,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,CAAgDvB,KAAlG,GAA0G,CAAC,CANtH;AAOR,uBAAa,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,GAA4C,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,CAA0CrB,KAAtF,GAA8F,CAAC,CAPpG;AAQR,oCAA0B,KAAKf,KAAL,CAAW+E,cAAX,CAA0BkE,sBAA1B,GAAmD,KAAKjJ,KAAL,CAAW+E,cAAX,CAA0BkE,sBAA1B,CAAiDlI,KAApG,GAA4G,CAAC,CAR/H;AASR,yBAAe,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4CpB,KAA5C,KAAsD,CAAtD,GAA0DmH,QAA1D,GACT,KAAKC,WAAL,CAAiB,KAAKnI,KAAL,CAAW+E,cAAX,CAA0BiG,qBAA1B,CAAgD/C,IAAhD,CAAqDC,QAAtE;AAVE,SAAZ;AAYAzH,QAAAA,SAAS,CAAC,uBAAD,CAAT,GAAqC;AAAE,uBAAa,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BsK;AAAzC,SAArC;;AACA,YAAI,KAAK5K,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,IAA6C,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,CAA0CrB,KAA1C,KAAoD,CAAC,CAAtG,EAAyG;AACrG,cAAImK,WAAW,GAAG;AACdC,YAAAA,YAAY,EAAE;AADA,WAAlB;AAGA,cAAIC,YAAY,GAAG;AACfC,YAAAA,SAAS,EAAE;AADI,WAAnB;AAGA,eAAKhL,KAAL,CAAWJ,KAAX,CAAiBqL,YAAjB,CAA8B5E,GAA9B,CAAkC6E,IAAI,IAAI;AACtCL,YAAAA,WAAW,CAAC,cAAD,CAAX,CAA4BK,IAAI,CAACxK,KAAjC,IAA0C,KAAKf,KAAL,CAAW+E,cAAX,CAA0ByG,SAApE;AACAJ,YAAAA,YAAY,CAAC,WAAD,CAAZ,CAA0BG,IAAI,CAACxK,KAA/B,IAAwC,KAAKf,KAAL,CAAW+E,cAAX,CAA0ByG,SAAlE;AACH,WAHD;AAIA/K,UAAAA,SAAS,GAAG,EACR,GAAGA,SADK;AAER+K,YAAAA,SAAS,EAAE,KAAKxL,KAAL,CAAW+E,cAAX,CAA0ByG,SAF7B;AAGRN,YAAAA,WAHQ;AAIRE,YAAAA,YAJQ;AAKRK,YAAAA,eAAe,EAAEhF,kBALT;AAMRF,YAAAA,eANQ;AAORC,YAAAA;AAPQ,WAAZ;AASH,SArCE,CAsCH;AACA;AACA;;AACH;;AACD,UAAIxD,SAAS,GAAGC,SAAhB;AACA,YAAM/B,UAAU,GAAG;AACfoC,QAAAA,QAAQ,EAAE,uBADK;AAEfC,QAAAA,SAAS,EAAE,uBAFI;AAGf9C,QAAAA,SAAS,EAAEA,SAHI;AAIf+C,QAAAA,SAAS,EAAE,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBuD,SAJb;AAKfC,QAAAA,QALe;AAKLqH,QAAAA,OALK;AAKI9H,QAAAA,SALJ;AAKerB,QAAAA,SAAS,EAAE,KAAKA;AAL/B,OAAnB;AAOA,YAAMX,UAAU,GAAG,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAApC;;AACA,UACInC,SAAS,CAAC,KAAKwB,KAAL,CAAWJ,KAAX,CAAiB0D,qBAAlB,EAAyC,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAAnE,EAA8E,KAAK7B,KAAL,CAAWJ,KAAX,CAAiB0C,YAA/F,CADb,EAC2H;AACvH,cAAMrB,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEnC,cADK;AAEfoC,UAAAA,IAAI,EAAE;AACFoC,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,UAAU,EAAE;AAAE3C,cAAAA,UAAF;AAAcF,cAAAA;AAAd,aAD3B;AACuDyC,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKpD,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,OATD,MAUK;AACD,aAAKjB,KAAL,CAAWvC,UAAX,CAAsBoD,UAAtB,EAAkCF,UAAlC,EAA8C,WAA9C;AACH;AACJ,KAviCkB;;AAAA,SAqjCnB0K,WArjCmB,GAqjCJC,QAAD,IAAc;AACxB,YAAMjH,UAAU,GAAGiH,QAAQ,CAACjH,UAA5B;AACA,YAAMpD,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEnC,cADK;AAEfoC,QAAAA,IAAI,EAAE;AAAEkD,UAAAA;AAAF;AAFS,OAAnB;AAIA,WAAKrE,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH,KA5jCkB;;AAQf,SAAKtB,KAAL,GAAa;AACT4L,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,yBAAyB,EAAE,EAFlB;AAGTC,MAAAA,YAAY,EAAE,EAHL;AAITC,MAAAA,KAAK,EAAE,EAJE;AAKThH,MAAAA,cAAc,EAAE,EALP;AAMTvB,MAAAA,SAAS,EAAE,EANF;AAQTkB,MAAAA,UAAU,EAAEzB,SARH;AAST+I,MAAAA,UAAU,EAAE,IATH;AAUTxJ,MAAAA,6BAA6B,EAAES,SAVtB;AAYTU,MAAAA,qBAAqB,EAAE,EAZd;AAaTf,MAAAA,UAAU,EAAE,IAAIqJ,GAAJ,EAbH;AAcTC,MAAAA,aAAa,EAAE,IAdN;AAeTC,MAAAA,aAAa,EAAE;AAfN,KAAb;AAiBA,SAAKxK,SAAL,GAAiBhF,KAAK,CAACyP,SAAN,EAAjB;AACA,SAAKhI,cAAL,GAAsB,IAAIxE,cAAJ,EAAtB;AACA,SAAKyM,eAAL,GAAuB,CAAC,kBAAD,EAAqB,YAArB,EAAmC,qBAAnC,CAAvB;AAEA,SAAKC,8BAAL,GAAsC,CAAC,4BAAD,EAA+B,iBAA/B,EAAkD,WAAlD,EAClC,cADkC,EAClB,iBADkB,EACC,mBADD,EACsB,uBADtB,EAC+C,oBAD/C,EACqE,YADrE,CAAtC,CA7Be,CA8B0G;AAC5H;;AAE8B,SAAxBC,wBAAwB,CAAClM,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAY6L,YAAZ,KAA6B,EAA7B,IAAmCzL,KAAK,CAACJ,KAAN,CAAY6L,YAAZ,KAA6B9L,KAAK,CAAC8L,YAA1E,EAAwF;AACpFlO,MAAAA,KAAK,CAACmG,IAAN,CAAW1D,KAAK,CAACJ,KAAN,CAAY6L,YAAvB;AACAzL,MAAAA,KAAK,CAACJ,KAAN,CAAY6L,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAIzL,KAAK,CAACJ,KAAN,CAAY8L,KAAZ,KAAsB/L,KAAK,CAAC+L,KAAhC,EAAuC;AACnCnO,MAAAA,KAAK,CAACmO,KAAN,CAAY1L,KAAK,CAACJ,KAAN,CAAY8L,KAAxB;AACA1L,MAAAA,KAAK,CAACJ,KAAN,CAAY8L,KAAZ,GAAoB,EAApB;AACH;;AACD,QAAI1L,KAAK,CAACJ,KAAN,CAAY8E,cAAZ,KAA+B9B,SAAnC,EAA8C;AAC1C,aAAO;AAAE8B,QAAAA,cAAc,EAAE;AAAlB,OAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAoDDyH,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,GAAG,KAAKpM,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,IACX,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0D0F,QAD9D;AAGA,QAAIwE,aAAa,GAAG,mBAApB;;AACA,QAAI,KAAKrM,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,GAA4D,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAACiN,MAAnG,IACzD,KAAKtM,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAACkN,QADtG,GACiH,KADrH,EAC4H;AACxHF,MAAAA,aAAa,GAAG,iBAAhB;AACH,KAHD,MAIK,IAAI,KAAKrM,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,IAA6D,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAACgD,OAApK,EAA6K;AAC9KgK,MAAAA,aAAa,GAAG,gBAAhB;AACH;;AAED,UAAMG,KAAK,GAAG,KAAK7M,KAAL,CAAW4C,UAAX,CAAsBC,GAAtB,CAA0B,0BAA1B,KAAyD,KAAK7C,KAAL,CAAW4C,UAAX,CAAsBE,GAAtB,CAA0B,0BAA1B,EAAsDC,YAA7H;AACA,UAAM+J,QAAQ,GAAG,KAAK9M,KAAL,CAAW4C,UAAX,CAAsBC,GAAtB,CAA0B,6BAA1B,KAA4D,KAAK7C,KAAL,CAAW4C,UAAX,CAAsBE,GAAtB,CAA0B,6BAA1B,EAAyDC,YAAtI;AACA,UAAMgK,SAAS,GAAG,KAAK/M,KAAL,CAAW4C,UAAX,CAAsBC,GAAtB,CAA0B,8BAA1B,KAA6D,KAAK7C,KAAL,CAAW4C,UAAX,CAAsBE,GAAtB,CAA0B,8BAA1B,EAA0DC,YAAzI;AAGA,UAAMiK,WAAW,GAAG;AAChB7J,MAAAA,aAAa,EAAE,uBADC;AAEhBC,MAAAA,cAAc,EAAE,+BAFA;AAGhBC,MAAAA,eAAe,EAAE,4BAHD;AAIhB4J,MAAAA,QAAQ,EAAE,gDAJM;AAKhBC,MAAAA,gBAAgB,EAAE;AAAExM,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBU;AAA7B,OALF;AAMhBK,MAAAA,UAAU,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UANb;AAOhB;AACAqL,MAAAA,eAAe,EAAE,KAAKA;AARN,KAApB;AAWA,SAAKc,oBAAL,GAA4B,CACxB;AAAE,iBAAW,kBAAb;AAAiC,mBAAa,uBAA9C;AAAuE,eAAS,OAAhF;AAAyF,mBAAa,IAAtG;AAA4G,wBAAkB,YAA9H;AAA4I,qBAAe;AAA3J,KADwB,CAA5B;AAKA,UAAMC,eAAe,GAAG,EAAxB;AACA,SAAKD,oBAAL,CAA0BE,OAA1B,CAAkCpF,IAAI,IAAIA,IAAI,CAACL,SAAL,KAAmB,IAAnB,GACtCwF,eAAe,CAACjG,IAAhB,CAAqBc,IAArB,CADsC,GACT,EADjC,EAnCK,CAsCL;AACA;AACA;AAEA;;AAEA,QAAIqF,cAAc,GAAG,EAArB;AACA,SAAKjN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,iBAA5B,KAAkD,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,iBAA5B,EAA+CD,KAA/C,KAAyD,CAA3G,GACIuM,cAAc,GAAG,CACb;AACI,eAAS,gBADb;AAEI,eAAS,KAAKjN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,GAA8C,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4C+E,KAA1F,GAAkG;AAF/G,KADa,EAIV;AACC,eAAS,YADV;AAEC,eAAS,KAAK7G,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,GAA4C,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,CAA0C8E,KAAtF,GAA8F;AAFxG,KAJU,CADrB,GAUIoG,cAAc,GAAG,CACb;AACI,eAAS,gBADb;AAEI,eAAS,KAAKjN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,GAA8C,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4C+E,KAA1F,GAAkG;AAF/G,KADa,EAIV;AACC,eAAS,aADV;AAEC,eAAS,KAAK7G,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqB,gBAA5B,GAA+C,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqB,gBAA5B,CAA6C6E,KAA5F,GAAoG;AAF9G,KAJU,EAOV;AACC,eAAS,gBADV;AAEC,eAAS,KAAK7G,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,GAAkD,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,CAAgD4E,KAAlG,GAA0G;AAFpH,KAPU,CAVrB;AAuBA,wBACI,uDACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,4DAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,QAApB;AAA6B,MAAA,cAAc,EAAC,OAA5C;AAAoD,MAAA,EAAE,EAAC,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKoG,cAAc,CAAC9C,MAAf,GAAwB,CAAxB,gBACG,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAE8C,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADH,GAGc,EALnB,eASI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,QAApB;AAA6B,MAAA,cAAc,EAAC,OAA5C;AAAoD,MAAA,EAAE,EAAC,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,eAUI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AACI,MAAA,aAAa,EAAE,KAAKjN,KAAL,CAAW2D,IAAX,CAAgBC,aADnC;AAEI,MAAA,UAAU,EAAE,uBAFhB;AAGI,MAAA,UAAU,EAAE,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBe,UAHjC;AAII,MAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBU,QAJ/B;AAKI,MAAA,UAAU,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BuM,YAA5B,IAA4C,KAAKlN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Bd,qBALxF;AAMI,MAAA,eAAe,EAAGyE,qBAAD,IAA2B,KAAKtE,KAAL,CAAWpC,8BAAX,CAA0C0G,qBAA1C,EAAiE,KAAKtE,KAAL,CAAWJ,KAAX,CAAiBU,QAAlF,EAA4F,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAA7G,CANhD;AAOI,MAAA,cAAc,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAPhD;AAQI,MAAA,eAAe,EAAC,4BARpB;AASI,MAAA,SAAS,EAAC,kBATd;AAUI,MAAA,UAAU,EAAC,YAVf;AAWI,MAAA,WAAW,EAAC,qBAXhB;AAYI,MAAA,gBAAgB,EAAE,KAAKnC,KAAL,CAAWjC,gBAZjC;AAaI,MAAA,WAAW,EAAE4O,WAbjB;AAcI,MAAA,qBAAqB,EAAE,KAAKhN,KAAL,CAAW2D,qBAdtC;AAeI,MAAA,KAAK,EAAEkJ,KAfX;AAgBI,MAAA,SAAS,EAAE,KAAKlL,SAhBpB;AAiBI,MAAA,UAAU,EAAE,KAAKD,UAjBrB;AAkBI,MAAA,UAAU,EAAE,IAlBhB;AAmBI,MAAA,SAAS,EAAE,MAAM,KAAKrB,KAAL,CAAWlC,oCAAX,CAAgD,uBAAhD,EAAyE,QAAzE,EAAmF,KAAKkC,KAAL,CAAWJ,KAAX,CAAiBU,QAApG,EAA8G,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,GAA8C,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4CpB,KAA1F,GAAkG,CAAC,CAAjN,EACb,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqB,gBAA5B,GAA+C,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BqB,gBAA5B,CAA6CtB,KAA5F,GAAoG,CAAC,CADxF,EAC2F,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,GAAkD,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,CAAgDvB,KAAlG,GAA0G,CAAC,CADtM,EACyM8L,KADzM,CAnBrB;AAqBI,MAAA,cAAc,EAAE,IArBpB;AAsBI,MAAA,UAAU,EAAE,KAAKxM,KAAL,CAAWJ,KAAX,CAAiB6B,UAtBjC;AAuBI,MAAA,UAAU,EAAE,KAAKD,UAvBrB;AAwBI,MAAA,WAAW,EAAE,KAAKE,WAxBtB;AAyBI,MAAA,cAAc,EAAE,KAAKC,cAzBzB;AA2BI,MAAA,eAAe,EAAE,CACb;AACI,2CACI,oBAAC,cAAD;AACI,UAAA,aAAa,EAAE,KAAK3B,KAAL,CAAW2D,IAAX,CAAgBC,aADnC;AAEI,UAAA,gBAAgB,EAAE,KAAKjE,KAAL,CAAWwN,cAAX,IAA6B,EAFnD;AAGI,UAAA,sBAAsB,EAAE,KAAKxN,KAAL,CAAWyN,oBAAX,IAAmC,EAH/D;AAII,UAAA,yBAAyB,EAAE,KAAKzN,KAAL,CAAW0N,uBAAX,IAAsC,EAJrE;AAKI,UAAA,WAAW,EAAE,KAAK1N,KAAL,CAAW2N,SAAX,IAAwB,EALzC;AAMI,UAAA,iBAAiB,EAAE,KAAKtN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,mBAA5B,KAAoD,EAN3E;AAOI,UAAA,iBAAiB,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,mBAA5B,KAAoD,EAP3E;AAQI,UAAA,cAAc,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B,gBAA5B,KAAiD,EARrE;AASI,UAAA,WAAW,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BS,WAA5B,IAA2C,EAT5D;AAWI,UAAA,iBAAiB,EAAE,KAAKnB,iBAX5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,OADa,CA3BrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAmDI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,oBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKD,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Bd,qBAA5B,IAAqD,KAAKG,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4Bd,qBAA5B,CAAkDsK,MAAlD,GAA2D,CAAhH,IAAqH,KAAKnK,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAAjJ,gBACG,uDACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DoL,gBAA9F,CADJ,CADJ,eAII,oBAAC,IAAD,CAAM,QAAN;AAAe,MAAA,SAAS,EAAC,+BAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,GAAE,KAAKvN,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAqD,MAAK,KAAK7D,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DqL,UAAW,EADvI,eAEI;AAAM,MAAA,SAAS,EAAG,oBAAmB,KAAKxN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAAC6E,KAAnG,GAA2G,mBAA3G,GAAiI,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DC,kBAA1D,KAAiF/C,iBAAiB,CAACkN,QAAnG,GAA8G,iBAA9G,GAAkI,gBAAiB,yBAAzT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKvM,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,CAA0DsL,mBAD/D,CAFJ,CADJ,CADJ,eAUI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,qDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,kCAApB;AACI,MAAA,MAAM,EAAE,KAAK9N,KAAL,CAAW2D,qBAAX,CAAiCoK,OAAjC,CAAyChB,SAAzC,MAAwD,CAAC,CADrE;AAEI,kBAAU,KAAK1M,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,kBAAS,mBAHb;AAII,MAAA,OAAO,EAAE,MAAM,KAAK3B,cAAL,EAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAElF,UAAvB;AAAmC,MAAA,KAAK,EAAE,KAAKgD,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ,EASK,KAAK7D,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,IAA+C,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BmB,eAA5B,CAA4CpB,KAA5C,KAAsDtB,YAAY,CAACuO,OAAlH,gBACG,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,kCAApB;AACI,MAAA,MAAM,EAAE,KAAKhO,KAAL,CAAW2D,qBAAX,CAAiCoK,OAAjC,CAAyChB,SAAzC,MAAwD,CAAC,CADrE;AAEI,kBAAU,KAAK1M,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFd;AAGI,kBAAS,mBAHb;AAII,MAAA,OAAO,EAAE,MAAM,KAAKM,sBAAL,CAA4BuI,SAA5B,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEvP,MAAvB;AAA+B,MAAA,KAAK,EAAE,KAAK6C,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADH,GASK,EAlBV,eAmBI,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,SAAS,EAAC,oDAApB;AACI,kBAAU,KAAK7D,KAAL,CAAW2D,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADd;AAEI,kBAAS,mBAFb;AAGI,MAAA,MAAM,EAAE,KAAKlE,KAAL,CAAW2D,qBAAX,CAAiCoK,OAAjC,CAAyCjB,QAAzC,MAAuD,CAAC,CAHpE,CAII;AAJJ;AAKI,MAAA,OAAO,EAAE,MAAM,KAAK3I,aAAL,EALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE/G,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CAnBJ,CADJ,CAVJ,CADJ,CAJJ,CADJ,eAkDI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGQqP,MAAM,GACFA,MAAM,CAAC/F,GAAP,CAAYuB,IAAD,iBACP,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,IAAI,CAACrB,QAAL,CAAc4D,MAAd,GAAuB,CAAvB,GACGvC,IAAI,CAACrB,QAAL,CAAcF,GAAd,CAAmBG,MAAD,iBACd,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,KAAKoB,IAAI,CAACrB,QAAL,CAAc4D,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ3D,MAAM,CAACD,QAAP,CAAgBF,GAAhB,CAAqBI,SAAD,IAAe;AAC/B,aACIA,SAAS,CAACE,cAAV,CAAyB,UAAzB,iBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKF,SAAS,CAACF,QAAV,CAAmBF,GAAnB,CAAuBuH,YAAY,iBAChC,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,KAAKA,YAAY,CAACzD,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAYyD,YAAY,CAAC/G,KAAzB,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAe,GAAf,CAFJ,CADJ,CADH,CADL,CADJ,gBAaI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAYJ,SAAS,CAACI,KAAtB,CADJ,eAEI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAgB,GAAhB,CAFJ,CAdR;AAmBH,KApBD,CAFR,CADJ,CADH,GA6BK,EA9BV,CADJ,CADE,GAoCF,EAvCZ,CAlDJ,CADH,GA+FK,EAhGV,CADJ,CADJ,CAnDJ,CAVJ,CADJ,EAyKK,KAAK7G,KAAL,CAAWJ,KAAX,CAAiB6D,SAAjB,iBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB6D,SAD3B;AAEI,MAAA,IAAI,EAAE,KAAKzD,KAAL,CAAWJ,KAAX,CAAiBuD,SAAjB,KAA+B,WAA/B,GAA6C,IAA7C,GAAoD,IAF9D;AAGI,MAAA,UAAU,EAAE,KAAKyB,UAHrB;AAII,MAAA,SAAS,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBuD,SAJhC;AAKI,MAAA,UAAU,EAAE,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBiB,UALjC;AAMI,MAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiByE,UANjC;AAOI,MAAA,WAAW,EAAE,KAAKmG,WAPtB;AAQI,MAAA,KAAK,EAAE,KAAKxK,KAAL,CAAWJ,KAAX,CAAiB2D,SAR5B;AASI,MAAA,aAAa,EAAE,KAAKiB,aATxB;AAUI,MAAA,YAAY,EAAE,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB6L,YAVnC;AAWI,MAAA,WAAW,EAAE,KAAKzL,KAAL,CAAWrC,WAX5B;AAYI,MAAA,cAAc,EAAE,KAAKgC,KAAL,CAAW+E,cAAX,IAA6B,EAZjD;AAaI,MAAA,eAAe,EAAE,KAAK1E,KAAL,CAAWJ,KAAX,CAAiBuD,SAAjB,KAA+B,WAA/B,GAA6C,EAA7C,GAAkD4J,eAbvE;AAcI,MAAA,YAAY,EAAE,KAAK/M,KAAL,CAAWJ,KAAX,CAAiB2D,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBuD,SAAnC;AACI,QAAA,aAAa,EAAE,KAAKnD,KAAL,CAAW2D,IAAX,CAAgBC,aADnC;AAEI,QAAA,eAAe,EAAE,KAAKsB,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBiB,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKlB,KAAL,CAAW+E,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAOR,KAAK1E,KAAL,CAAWJ,KAAX,CAAiBuD,SAAjB,KAA+B,WAA/B,gBACE,oBAAC,qBAAD;AACI,QAAA,UAAU,EAAE,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBqK,UAAjB,IAA+B,EAD/C;AAEI,QAAA,UAAU,EAAE,KAAKjK,KAAL,CAAWJ,KAAX,CAAiBiB,UAFjC;AAGI,QAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBsK,UAAjB,IAA+B,EAH/C;AAII,QAAA,cAAc,EAAE,KAAKL,cAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,gBAOI,oBAAC,wBAAD;AACE,QAAA,cAAc,EAAE,KAAKlK,KAAL,CAAW+E,cAAX,IAA6B,EAD/C;AAEE,QAAA,eAAe,EAAE,KAAKQ,eAFxB;AAGE,QAAA,aAAa,EAAE,KAAKJ,aAHtB;AAIE,QAAA,gBAAgB,EAAE,KAAKW,gBAJzB;AAKE,QAAA,aAAa,EAAE,KAAKzF,KAAL,CAAW2D,IAAX,CAAgBC,aALjC;AAME,QAAA,yBAAyB,EAAE,KAAK5D,KAAL,CAAWJ,KAAX,CAAiBiO,yBAN9C;AAOE,QAAA,qBAAqB,EAAE,KAAK7N,KAAL,CAAWJ,KAAX,CAAiBkO,qBAP1C;AAQE,QAAA,6BAA6B,EAAE,KAAK9N,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BwB,6BAA5B,IAA6D,EAR9F;AASE,QAAA,SAAS,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBuD,SAT9B;AAUE,QAAA,UAAU,EAAE,KAAKnD,KAAL,CAAWJ,KAAX,CAAiB+L,UAV/B;AAWE,QAAA,UAAU,EAAE,KAAK3L,KAAL,CAAWJ,KAAX,CAAiBiB,UAX/B;AAYE,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiBU,QAZ7B;AAaE,QAAA,SAAS,EAAE,KAAKN,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,GAA4C,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BoB,aAA5B,CAA0CrB,KAAtF,GAA8F,CAAC,CAb5G;AAcE,QAAA,aAAa,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,GAAkD,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BsB,mBAA5B,CAAgD2F,IAAhD,CAAqDmG,cAAvG,GAAwH,KAdzI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5Bd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1KR,CADJ;AA4NH,GArY+C,CAsYhD;AACA;AACA;;;AAmBAC,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAIC,WAAW,GAAG,KAAlB;AAEA,QAAI;AAAExJ,MAAAA,cAAF;AAAkBpB,MAAAA,qBAAlB;AAAyCf,MAAAA,UAAzC;AACA4K,MAAAA,cADA;AACgBC,MAAAA,oBADhB;AACsCC,MAAAA,uBADtC;AAC+DC,MAAAA;AAD/D,QAC6E,KAAK3N,KADtF;;AAIA,QAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAA1B,KAAwCoM,aAAa,CAACrO,KAAd,CAAoBU,QAApB,CAA6BuB,SAAzE,EAAoF;AAChF,UAAI,KAAK7B,KAAL,CAAWJ,KAAX,CAAiB0D,qBAArB,EAA4C;AACxC,aAAKtD,KAAL,CAAWJ,KAAX,CAAiB0D,qBAAjB,CAAuC,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAAjE,KACOsM,MAAM,CAACC,MAAP,CAAc,KAAKpO,KAAL,CAAWJ,KAAX,CAAiB0D,qBAAjB,CAAuC,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAAjE,CAAd,EAA2FwE,GAA3F,CAA+FuB,IAAI,IAClGtE,qBAAqB,CAACwD,IAAtB,CAA2Bc,IAAI,CAAClF,YAAhC,CADD,CADP;AAGAH,QAAAA,UAAU,GAAGhE,aAAa,CAAC,KAAKyB,KAAL,CAAWJ,KAAX,CAAiB0D,qBAAlB,EAAyC,KAAKtD,KAAL,CAAWJ,KAAX,CAAiBU,QAAjB,CAA0BuB,SAAnE,CAA1B;AAEAqM,QAAAA,WAAW,GAAG,IAAd;AACH;AAEJ;;AACD,QAAI,KAAKlO,KAAL,CAAWJ,KAAX,CAAiB8E,cAAjB,KAAoCuJ,aAAa,CAACrO,KAAd,CAAoB8E,cAA5D,EAA4E;AACxEwJ,MAAAA,WAAW,GAAG,IAAd;AACAxJ,MAAAA,cAAc,GAAG,KAAK1E,KAAL,CAAWJ,KAAX,CAAiB8E,cAAlC;AACH;;AACD,QAAI,KAAK1E,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,KAAgCsN,aAAa,CAACrO,KAAd,CAAoBe,UAAxD,EAAoE;AAEhEuN,MAAAA,WAAW,GAAG,IAAd;AAEA,YAAMpC,aAAa,GAAG,EAAtB;AACA,UAAIuC,gBAAJ;AACA,UAAIC,uBAAJ;AACA,UAAIC,0BAAJ;AACA,UAAIC,YAAJ;;AAGA,UAAI,KAAKxO,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B8N,WAAhC,EAA6C;AACzCJ,QAAAA,gBAAgB,GAAG3P,mBAAmB,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B8N,WAA5B,IAA2C,EAA5C,EAAgD,iBAAhD,EAAmE,iBAAnE,EAAsF,SAAtF,EAAiG,WAAjG,EAA8G7L,SAA9G,CAAtC;AACAuK,QAAAA,cAAc,GAAGkB,gBAAgB,CAAC5L,GAAjB,CAAqB,YAArB,CAAjB;AACH;;AACD,UAAI,KAAKzC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B+N,iBAAhC,EAAmD;AAC/CJ,QAAAA,uBAAuB,GAAG5P,mBAAmB,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4B+N,iBAA5B,IAAiD,EAAlD,EAAsD,cAAtD,EAAsE,cAAtE,EAAsF9L,SAAtF,EAAiGA,SAAjG,EAA4GA,SAA5G,CAA7C;AACAwK,QAAAA,oBAAoB,GAAGkB,uBAAuB,CAAC7L,GAAxB,CAA4B,YAA5B,CAAvB;AACH;;AACD,UAAI,KAAKzC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgO,oBAAhC,EAAsD;AAClDJ,QAAAA,0BAA0B,GAAG7P,mBAAmB,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BgO,oBAA5B,IAAoD,EAArD,EAAyD,iBAAzD,EAA4E,iBAA5E,EAA+F,SAA/F,EAA0G,WAA1G,EAAuH/L,SAAvH,CAAhD;AACAyK,QAAAA,uBAAuB,GAAGkB,0BAA0B,CAAC9L,GAA3B,CAA+B,YAA/B,CAA1B;AACH;;AACD,UAAI,KAAKzC,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiO,WAAhC,EAA6C;AACzCJ,QAAAA,YAAY,GAAG9P,mBAAmB,CAAC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiBe,UAAjB,CAA4BiO,WAA5B,IAA2C,EAA5C,EAAgD,WAAhD,EAA6D,cAA7D,EAA6EhM,SAA7E,EAAwFA,SAAxF,EAAmGA,SAAnG,CAAlC;AACA0K,QAAAA,SAAS,GAAGkB,YAAY,CAAC/L,GAAb,CAAiB,YAAjB,CAAZ;AACH;;AAGD,UAAIyL,WAAJ,EAAiB;AACb,aAAKjJ,QAAL,CAAc;AACVP,UAAAA,cADU;AACMnC,UAAAA,UADN;AACkBe,UAAAA,qBADlB;AAEV6J,UAAAA,cAFU;AAEMC,UAAAA,oBAFN;AAE4BC,UAAAA,uBAF5B;AAGVvB,UAAAA,aAHU;AAGKwB,UAAAA;AAHL,SAAd;AAKH;AACJ;AACJ;;AAslBDuB,EAAAA,oBAAoB,GAAG;AACnB,UAAM5N,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAEnC,cADK;AAEfoC,MAAAA,IAAI,EAAE;AACFR,QAAAA,UAAU,EAAE,EADV;AACcE,QAAAA,UAAU,EAAE+B,SAD1B;AACqCO,QAAAA,SAAS,EAAE,IADhD;AACsD2L,QAAAA,SAAS,EAAElM;AADjE;AAFS,KAAnB;AAMA,SAAK5C,KAAL,CAAWrC,WAAX,CAAuBsD,UAAvB;AACH;;AApjC+C;;AA+jCpD,eAAe7D,OAAO,CAACsC,eAAD,EAAkB;AACpClC,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,uBADW;AAEpCC,EAAAA,WAFoC;AAEvBC,EAAAA,8BAFuB;AAESC,EAAAA,mBAFT;AAGpCC,EAAAA,oCAHoC;AAGEC,EAAAA,gBAHF;AAGoBC,EAAAA,2BAHpB;AAGiDC,EAAAA,mBAHjD;AAGsEC,EAAAA,sBAHtE;AAG8FC,EAAAA;AAH9F,CAAlB,CAAP,CAIZd,UAAU,CAACwC,qBAAD,CAJE,CAAf","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faUserLock, faClock, faList } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, convertDateValuetoString, constructOptionList } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { designProperties, formCode, TemplateType, transactionStatus } from '../../components/Enumeration';\r\n\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegType(inputParam)\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata\r\n\r\n        let userStatusCSS = \"outline-secondary\";\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping ? this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.ACTIVE\r\n            || this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED : false) {\r\n            userStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.RETIRED) {\r\n            userStatusCSS = \"outline-danger\";\r\n        }\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            // unchangeList: [\"FromDate\", \"ToDate\"],\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n\r\n        ]\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                }, {\r\n                    \"label\": \"IDS_REGSUBTYPE\",\r\n                    \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                }\r\n            ];\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"DesignTemplateMapping\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(\"DesignTemplateMapping\", \"create\", this.props.Login.userInfo, this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n                                    this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1, this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1, addId)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n\r\n                                                filterComboChange={this.filterComboChange}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                        <Col md={8}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                                </Nav.Link>\r\n                                                                {this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== TemplateType.Masters ?\r\n                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREFIELDS\" })}\r\n                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                        onClick={() => this.openFieldConfiguration(approveId)}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faList} title={this.props.intl.formatMessage({ id: \"IDS_CONFIGUREFIELDS\" })} />\r\n                                                                    </Nav.Link>\r\n                                                                    : \"\"}\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n\r\n                                                {\r\n                                                    Layout ?\r\n                                                        Layout.map((item) =>\r\n                                                            <Row>\r\n                                                                {item.children.length > 0 ?\r\n                                                                    item.children.map((column) =>\r\n                                                                        <Col md={12 / item.children.length}>\r\n                                                                            {\r\n                                                                                column.children.map((component) => {\r\n                                                                                    return (\r\n                                                                                        component.hasOwnProperty(\"children\") ?\r\n                                                                                            <Row>\r\n                                                                                                {component.children.map(componentrow =>\r\n                                                                                                    <Col md={12 / componentrow.length}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel>{componentrow.label}</FormLabel>\r\n                                                                                                            <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                )\r\n                                                                                                }\r\n                                                                                            </Row>\r\n                                                                                            :\r\n                                                                                            <FormGroup>\r\n                                                                                                <FormLabel>{component.label}</FormLabel>\r\n                                                                                                <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                                            </FormGroup>\r\n                                                                                    )\r\n                                                                                })\r\n                                                                            }\r\n\r\n                                                                        </Col>\r\n                                                                    )\r\n                                                                    : \"\"}\r\n                                                            </Row>\r\n                                                        )\r\n                                                        :\r\n                                                        \"\"\r\n                                                }\r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        size={this.props.Login.operation === 'configure' ? \"xl\" : \"lg\"}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation === 'configure' ? [] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'configure' ?\r\n                                <ConfigureScreenFields\r\n                                    designData={this.props.Login.designData || {}}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    dataResult={this.props.Login.dataResult || {}}\r\n                                    onChangeToggle={this.onChangeToggle}\r\n                                />\r\n                                : <AddDesignTemplateMapping\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                    subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                    selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                    operation={this.props.Login.operation}\r\n                                    userLogged={this.props.Login.userLogged}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    nformcode={this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1}\r\n                                    needSubSample={this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n\r\n            // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            // nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            // nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms } = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n\r\n            const selectedInput = {}\r\n            let Taglstsampletype;\r\n            let TaglistRegistrationType;\r\n            let TaglistRegistrationSubType;\r\n            let ListFormsMap;\r\n\r\n\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"undefined\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }\r\n\r\n\r\n            if (updateState) {\r\n                this.setState({\r\n                    selectedRecord, controlMap, userRoleControlRights,\r\n                    listSampletype, listRegistrationType, listRegistrationSubType,\r\n                    selectedInput, listForms\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"approve\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"approve\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = { inputListName: \"DesignTemplateMapping\", selectedObject: \"selectedDesignTemplateMapping\", primaryKeyField: \"ndesigntemplatemappingcode\" };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation: \"delete\", postParam\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n    openFieldConfiguration = (controlCode) => {\r\n        let openModal = true;\r\n        let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\"\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"approve\"\r\n                || this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && index === 0 ? componentRow.label : templatePrimaryKey;\r\n                            jdynamiccolumns.push({\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname\r\n                            })\r\n                            if (componentRow.inputtype === 'combo') {\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (\"+componentRow.table.item.nformcode+\") \",\r\n                                    \"tablecolumnname\": componentRow.valuemember,\r\n                                    \"foriegntablename\": componentRow.source\r\n                                })\r\n                            }\r\n                            // samplesearchfields.push(componentRow.label)\r\n                            componentRow.inputtype === 'date' && masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                            // displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            if (!componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [8] })\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && index === 0 ? component.label : templatePrimaryKey;\r\n                        jdynamiccolumns.push({\r\n                            columnname: component.label,\r\n                            displayname: component.displayname\r\n                        });\r\n                        if (component.inputtype === 'combo') {\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.label,\r\n                                // \"ismultilingual\": true,\r\n                                \"conditionstring\": \" and nformcode in (\"+component.table.item.nformcode+\") \",\r\n                                \"tablecolumnname\": component.column.value,\r\n                                \"foriegntablename\": \"dynamicmasters\"\r\n                            })\r\n                        }\r\n                        // samplesearchfields.push(component.label)\r\n                        component.inputtype === 'date' && masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                        // displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        // component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (!component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [8] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n        let jsondata = {\r\n            gridItem,\r\n            gridMoreItem,\r\n            masterdatefields,\r\n            editable\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey };\r\n    }\r\n    getJsondata = (templatedata) => {\r\n        let displayFields = []\r\n        let listItem = []\r\n        let gridItem = []\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [];\r\n        let subsamplesearchfields = [];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false }];\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n                            subsamplesearchfields.push(componentRow.label);\r\n                            subsampleeditable.push({ label: componentRow.label, editableuntill: [17] })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                        }\r\n                        )\r\n                    } else {\r\n                        subsamplesearchfields.push(component.label);\r\n                        subsampleeditable.push({ label: component.label, editableuntill: [17] })\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        // let combinedField = [];\r\n                        component.children.map(componentRow => {\r\n                            // combinedField.push(componentRow.label)\r\n                            jdynamiccolumns.push({\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname\r\n                            })\r\n                            if (componentRow.hasOwnProperty('child')) {\r\n                                componentRow.child.map(childData => {\r\n                                    jnumericcolumns.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"foriegntablePK\": componentRow.label,\r\n                                        // \"ismultilingual\": true,\r\n                                        // \"conditionstring\": \" and nformcode in (140) \",\r\n                                        \"tablecolumnname\": childData.tablecolumnname,\r\n                                        \"foriegntablename\": \"dynamicmasters\"\r\n                                    })\r\n                                })\r\n                            }\r\n                            samplesearchfields.push(componentRow.label)\r\n                            sampletemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.inputtype === 'date') {\r\n                                sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                            }\r\n                            displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            if (!componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [17] })\r\n                            }\r\n                            return null;\r\n                        })\r\n                        // let fieldSet = combinedField.join(\"&\")\r\n                        // displayFields.push(fieldSet);\r\n                        // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                        // gridMoreItem.push(fieldSet);\r\n                    } else {\r\n                        jdynamiccolumns.push({\r\n                            columnname: component.label,\r\n                            displayname: component.displayname\r\n                        });\r\n                        if (component.hasOwnProperty('child')) {\r\n                            component.child.map(childData => {\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"foriegntablePK\": component.label,\r\n                                    // \"ismultilingual\": true,\r\n                                    // \"conditionstring\": \" and nformcode in (140) \",\r\n                                    \"tablecolumnname\": childData.tablecolumnname,\r\n                                    \"foriegntablename\": \"dynamicmasters\"\r\n                                })\r\n                            })\r\n                        }\r\n                        samplesearchfields.push(component.label)\r\n                        sampletemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.inputtype === 'date') {\r\n                            sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                        }\r\n                        displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        component.templatemandatory && listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (!component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [17] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            }\r\n            )\r\n        )\r\n        displayFields.push({ [designProperties.LABEL]: { \"en-US\": \"Reg Date\" }, [designProperties.VALUE]: 'dregdate' });\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            ...this.props.Login.testListFields\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            sampletemplatefields,\r\n            subsampletemplatefields: subsamplesearchfields,\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable\r\n            },\r\n            [formCode.RESULTENTRY]: {\r\n                ...obj,\r\n            },\r\n            [formCode.APPROVAL]: {\r\n                ...obj,\r\n            },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n            },\r\n            [formCode.MYJOBS]: {\r\n                ...obj,\r\n            }\r\n\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode) => {\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n        if (event.target.checked) {\r\n            if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n                return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n            } else {\r\n                designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n            }\r\n            if (field === 'sampledisplayfields') {\r\n                designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n            }\r\n        } else {\r\n            if (field === 'sampledisplayfields') {\r\n                designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n            }\r\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { designData, dataResult }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n\r\n        let inputData = [];\r\n        if (this.props.Login.operation === 'configure') {\r\n            inputData = {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    jsondataobj: this.props.Login.designData\r\n                },\r\n                userinfo: this.props.Login.userInfo\r\n            }\r\n        } else {\r\n            let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === 4 ?\r\n                this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                : {}\r\n            inputData = {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                \"nregtypecode\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                \"nformcode\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === 4 ? jsondata\r\n                    : this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata),\r\n            }\r\n            inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                let qf_jsonData = {\r\n                    sdisplayname: {}\r\n                };\r\n                let qbt_jsonData = {\r\n                    tablename: {}\r\n                };\r\n                this.props.Login.languageList.map(lang => {\r\n                    qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                    qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                })\r\n                inputData = {\r\n                    ...inputData,\r\n                    sformname: this.state.selectedRecord.sformname,\r\n                    qf_jsonData,\r\n                    qbt_jsonData,\r\n                    sprimarykeyname: templatePrimaryKey,\r\n                    jdynamiccolumns,\r\n                    jnumericcolumns\r\n                }\r\n            }\r\n            // this.designtemplatemappingFieldList.map(item => {\r\n            //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n            // });\r\n        }\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}