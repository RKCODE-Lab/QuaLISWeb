{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getClientComboService(clientparam) {\n  return function (dispatch) {\n    if (clientparam.nfilterClientCategory && Object.values(clientparam.nfilterClientCategory).length > 0) {\n      if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\n        const countryService = rsapi.post(\"country/getCountry\", {\n          userinfo: clientparam.userInfo\n        });\n        const clientCatService = rsapi.post(\"clientcategory/getClientCategory\", {\n          userinfo: clientparam.userInfo\n        });\n        let urlArray = [];\n        let selectedId = null;\n\n        if (clientparam.operation === \"create\") {\n          urlArray = [countryService, clientCatService];\n        } else {\n          const clientById = rsapi.post(\"client/getActiveClientById\", {\n            [clientparam.primaryKeyField]: clientparam.masterData.selectedClient[clientparam.primaryKeyField],\n            \"userinfo\": clientparam.userInfo\n          });\n          urlArray = [countryService, clientById, clientCatService];\n          selectedId = clientparam.primaryKeyValue;\n        }\n\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          let country = [];\n          let clientCaegory = [];\n          let selectedRecord = {};\n\n          if (clientparam.operation === \"update\") {\n            selectedRecord = response[1].data;\n            country.push({\n              \"value\": response[1].data[\"ncountrycode\"],\n              \"label\": response[1].data[\"scountryname\"]\n            });\n            selectedRecord[\"ncountrycode\"] = country[0];\n            const clientCatList = constructOptionList(response[2].data || [], \"nclientcatcode\", \"sclientcatname\", undefined, undefined, undefined);\n            clientCaegory = clientCatList.get(\"OptionList\");\n            selectedRecord['nclientcatcode'] = {\n              \"value\": response[1].data[\"nclientcatcode\"],\n              \"label\": response[1].data[\"sclientcatname\"]\n            };\n          } else {\n            selectedRecord[\"ntransactionstatus\"] = 1;\n            const clientCatList = constructOptionList(response[1].data || [], \"nclientcatcode\", \"sclientcatname\", undefined, undefined, undefined);\n            clientCaegory = clientCatList.get(\"OptionList\");\n            selectedRecord[\"nclientcatcode\"] = clientparam.nfilterClientCategory.value === -2 ? clientCaegory.length > 0 ? clientCaegory[0] : \"\" : clientparam.nfilterClientCategory;\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              countryList: response[0].data || [],\n              clientCategoryList: clientCaegory,\n              selectedRecord,\n              openModal: true,\n              operation: clientparam.operation,\n              screenName: clientparam.screenName,\n              ncontrolCode: clientparam.ncontrolCode,\n              loading: false,\n              selectedId\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CLIENTCATEGORYNOTAVAILABLE\"\n      }));\n    }\n  };\n}\nexport const changeClientCategoryFilter = (inputParam, filterClientCategory, nfilterClientCategory) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/client/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterClientCategory,\n            nfilterClientCategory // nfilterClientCategory: inputParam.inputData.nfilterClientCategory\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getClientDetail(client, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"client/getSelectedClientDetail\", {\n      nclientcode: client.nclientcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getClientSiteForAddEdit(screenName, operation, nclientcode, nclientsitecode, ncontrolCode, userInfo) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = {};\n\n    if (operation === \"create\") {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [Country];\n    } else {\n      const Country = rsapi.post(\"/country/getCountry\", {\n        \"userinfo\": userInfo\n      });\n      const clientSiteByID = rsapi.post(\"/client/getClientSiteAddressById\", {\n        \"nclientcode\": nclientcode,\n        \"nclientsitecode\": nclientsitecode,\n        \"userinfo\": userInfo\n      });\n      urlArray = [Country, clientSiteByID];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let countryCode = [];\n      const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\n      const countryList = countryMap.get(\"OptionList\");\n\n      if (operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"ncountrycode\"] = {\n          label: response[1].data[\"scountryname\"],\n          value: response[1].data[\"ncountrycode\"]\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Country: countryList,\n          openChildModal: true,\n          operation,\n          selectedRecord: operation === \"update\" ? selectedRecord : {\n            \"ntransactionstatus\": transactionStatus.ACTIVE,\n            \"ndefaultstatus\": transactionStatus.NO\n          },\n          countryCode: countryCode,\n          ncontrolCode,\n          screenName: \"IDS_CLIENTSITE\",\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getClientSiteContactDetails(inputParam) {\n  return function (dispatch) {\n    let Map = {};\n    Map[\"nclientcode\"] = inputParam.clientSite.nclientcode;\n    Map[\"nclientsitecode\"] = inputParam.clientSite.nclientsitecode;\n    Map[\"userinfo\"] = inputParam.userInfo;\n    dispatch(initRequest(true));\n    rsapi.post(\"/client/getClientContactInfoBySite\", Map).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ClientContact: response.data,\n        selectedClientSite: inputParam.clientSite\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getClientContactForAddEdit(fetchRecord) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    const ClientContactByID = rsapi.post(\"/client/getClientContactInfoById\", {\n      \"nclientcode\": fetchRecord.editRow.nclientcode,\n      \"nclientsitecode\": fetchRecord.editRow.nclientsitecode,\n      \"nclientcontactcode\": fetchRecord.editRow.nclientcontactcode,\n      \"userinfo\": fetchRecord.userInfo\n    });\n    urlArray = [ClientContactByID];\n    selectedId = fetchRecord.editRow.nclientcontactcode;\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          operation: fetchRecord.operation,\n          selectedRecord: fetchRecord.operation === \"update\" ? response[0].data : undefined,\n          defaultSite: fetchRecord.editRow.nclientsitecode,\n          ncontrolCode: fetchRecord.ncontrolCode,\n          screenName: \"IDS_CONTACTDETAILS\",\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ClientAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","sortData","intl","transactionStatus","getClientComboService","clientparam","dispatch","nfilterClientCategory","Object","values","length","operation","countryService","post","userinfo","userInfo","clientCatService","urlArray","selectedId","clientById","primaryKeyField","masterData","selectedClient","primaryKeyValue","all","then","response","country","clientCaegory","selectedRecord","data","push","clientCatList","undefined","get","value","type","payload","countryList","clientCategoryList","openModal","screenName","ncontrolCode","loading","catch","error","status","message","warn","formatMessage","id","changeClientCategoryFilter","inputParam","filterClientCategory","methodUrl","inputData","getClientDetail","client","nclientcode","modalName","getClientSiteForAddEdit","nclientsitecode","Country","clientSiteByID","countryCode","countryMap","label","openChildModal","ACTIVE","NO","getClientSiteContactDetails","Map","clientSite","ClientContact","selectedClientSite","dataState","getClientContactForAddEdit","fetchRecord","ClientContactByID","editRow","nclientcontactcode","defaultSite"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, sortData } from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\n\r\nexport function getClientComboService(clientparam) {\r\n    return function (dispatch) {\r\n        if (clientparam.nfilterClientCategory && Object.values(clientparam.nfilterClientCategory).length > 0) {\r\n        if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\r\n            const countryService = rsapi.post(\"country/getCountry\", { userinfo: clientparam.userInfo });\r\n            const clientCatService = rsapi.post(\"clientcategory/getClientCategory\", { userinfo: clientparam.userInfo });\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            if (clientparam.operation === \"create\") {\r\n\r\n                urlArray = [countryService,clientCatService];\r\n            }\r\n            else {\r\n                const clientById = rsapi.post(\"client/getActiveClientById\", { [clientparam.primaryKeyField]: clientparam.masterData.selectedClient[clientparam.primaryKeyField], \"userinfo\": clientparam.userInfo });\r\n\r\n                urlArray = [countryService, clientById,clientCatService];\r\n                selectedId = clientparam.primaryKeyValue;\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let country = [];\r\n                    let clientCaegory = [];\r\n                    let selectedRecord = {};\r\n                    if (clientparam.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n                        country.push({ \"value\": response[1].data[\"ncountrycode\"], \"label\": response[1].data[\"scountryname\"] });\r\n                        selectedRecord[\"ncountrycode\"] = country[0];\r\n\r\n                        const clientCatList = constructOptionList(response[2].data || [], \"nclientcatcode\",\r\n                        \"sclientcatname\", undefined, undefined, undefined);\r\n                        clientCaegory = clientCatList.get(\"OptionList\");\r\n                        selectedRecord['nclientcatcode']={ \"value\": response[1].data[\"nclientcatcode\"], \"label\": response[1].data[\"sclientcatname\"] }\r\n                    } else {\r\n                        selectedRecord[\"ntransactionstatus\"] = 1;\r\n                        const clientCatList = constructOptionList(response[1].data || [], \"nclientcatcode\",\r\n                        \"sclientcatname\", undefined, undefined, undefined);\r\n                        clientCaegory = clientCatList.get(\"OptionList\");\r\n                        selectedRecord[\"nclientcatcode\"]= clientparam.nfilterClientCategory.value === -2 ? (clientCaegory.length > 0 ?\r\n                            clientCaegory[0] : \"\") : clientparam.nfilterClientCategory\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            countryList: response[0].data || [],\r\n                            clientCategoryList:clientCaegory,\r\n                            selectedRecord, openModal: true,\r\n                            operation: clientparam.operation, screenName: clientparam.screenName,\r\n                            ncontrolCode: clientparam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_CLIENTCATEGORYNOTAVAILABLE\"\r\n            }))\r\n        }\r\n    }\r\n \r\n}\r\n\r\n\r\nexport const changeClientCategoryFilter = (inputParam, filterClientCategory, nfilterClientCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/client/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterClientCategory,\r\n                            nfilterClientCategory\r\n                            // nfilterClientCategory: inputParam.inputData.nfilterClientCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getClientDetail (client, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"client/getSelectedClientDetail\", {nclientcode:client.nclientcode, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\nexport function getClientSiteForAddEdit(screenName, operation, nclientcode, nclientsitecode, ncontrolCode, userInfo){\r\n    return function(dispatch){ \r\n    let urlArray = [];\r\n    let selectedRecord = {};\r\n\r\n    if (operation === \"create\") {\r\n        const Country = rsapi.post(\"/country/getCountry\", { \"userinfo\": userInfo });\r\n        urlArray = [Country];\r\n    }\r\n    else {\r\n\r\n        const Country = rsapi.post(\"/country/getCountry\", { \"userinfo\": userInfo });\r\n        const clientSiteByID = rsapi.post(\"/client/getClientSiteAddressById\", { \"nclientcode\": nclientcode, \"nclientsitecode\": nclientsitecode ,\"userinfo\": userInfo});\r\n        urlArray = [Country, clientSiteByID];\r\n    }\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {\r\n\r\n            let countryCode = [];\r\n\r\n            const countryMap = constructOptionList(response[0].data || [], \"ncountrycode\",\r\n            \"scountryname\", undefined, undefined, true);\r\n\r\n            const countryList = countryMap.get(\"OptionList\");\r\n\r\n\r\n            if (operation === \"update\") {\r\n\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"ncountrycode\"] = {\r\n                    label: response[1].data[\"scountryname\"],\r\n                    value: response[1].data[\"ncountrycode\"]\r\n                };\r\n            \r\n            }\r\n\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                Country: countryList, openChildModal:true, operation, \r\n                selectedRecord: operation === \"update\" ? selectedRecord : {\"ntransactionstatus\": transactionStatus.ACTIVE,\"ndefaultstatus\":transactionStatus.NO}, countryCode: countryCode, ncontrolCode,\r\n                screenName: \"IDS_CLIENTSITE\", loading:false\r\n             }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getClientSiteContactDetails(inputParam){\r\n    return function(dispatch){ \r\n    let Map={};\r\n \r\n    Map[\"nclientcode\"]=inputParam.clientSite.nclientcode;\r\n    Map[\"nclientsitecode\"]=inputParam.clientSite.nclientsitecode;\r\n    Map[\"userinfo\"]=inputParam.userInfo;\r\n    dispatch(initRequest(true));\r\n    rsapi.post(\"/client/getClientContactInfoBySite\",Map)\r\n    .then(response =>{          \r\n       let masterData = {...inputParam.masterData, ClientContact: response.data,\r\n            selectedClientSite:  inputParam.clientSite,\r\n            };     \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, loading:false, dataState: undefined}}); \r\n\r\n    })\r\n    .catch(error =>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n    })\r\n}\r\n}\r\nexport function getClientContactForAddEdit(fetchRecord){\r\n    return function(dispatch){ \r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    const ClientContactByID = rsapi.post(\"/client/getClientContactInfoById\", { \"nclientcode\": fetchRecord.editRow.nclientcode, \"nclientsitecode\": fetchRecord.editRow.nclientsitecode, \"nclientcontactcode\": fetchRecord.editRow.nclientcontactcode,\"userinfo\": fetchRecord.userInfo });\r\n    urlArray = [ClientContactByID];\r\n    selectedId = fetchRecord.editRow.nclientcontactcode;\r\n\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response => {            \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                openChildModal:true, operation:fetchRecord.operation, \r\n                selectedRecord: fetchRecord.operation === \"update\" ? response[0].data : undefined,\r\n          defaultSite: fetchRecord.editRow.nclientsitecode, ncontrolCode:fetchRecord.ncontrolCode ,\r\n          screenName: \"IDS_CONTACTDETAILS\", loading:false, selectedId\r\n        }});\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            }\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}