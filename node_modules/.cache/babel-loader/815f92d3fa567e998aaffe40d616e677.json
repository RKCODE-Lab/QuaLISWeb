{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { AddMarkStep, RemoveMarkStep } from 'prosemirror-transform';\nimport { changeStylesString, shallowEqual } from './utils';\nimport { markApplies, hasMark, removeMarks, toggleMark, styleValue, selectionMarks } from './mark';\n\nvar changeStyleFromMark = function changeStyleFromMark(marks, toChange) {\n  var styleMark = marks.find(function (m) {\n    return m.type.name === 'style';\n  });\n  var elementStyle = styleMark && styleMark.attrs.style;\n  return changeStylesString(elementStyle, toChange);\n};\n\nvar changeStyleMark = function changeStyleMark(tr, from, to, attrs, markType) {\n  var mark = markType.create({\n    style: attrs.style\n  });\n  var removed = [],\n      added = [],\n      removing = null,\n      adding = null;\n  tr.doc.nodesBetween(from, to, function (node, pos, parent) {\n    if (!node.isInline) {\n      return;\n    }\n\n    var marks = node.marks;\n\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      var start = Math.max(pos, from),\n          end = Math.min(pos + node.nodeSize, to);\n      var newStyle = changeStyleFromMark(marks, attrs);\n\n      if (newStyle.changed || attrs.newValue) {\n        var style = newStyle.changed ? {\n          style: newStyle.style || null\n        } : {\n          style: [attrs.style] + \": \" + attrs.newValue + \";\"\n        };\n        var currentMark = markType.isInSet(marks) ? marks.find(function (m) {\n          return m.type.name === 'style';\n        }) : null;\n        var newMarkAttrs_1 = currentMark ? tslib_1.__assign({}, currentMark.attrs, style) : style;\n        var newStyleMark = markType.create(newMarkAttrs_1);\n        var newSet = newStyleMark.addToSet(marks);\n\n        for (var i = 0; i < marks.length; i++) {\n          if (!marks[i].isInSet(newSet)) {\n            if (removing && removing.to === start && removing.mark.eq(marks[i])) {\n              removing.to = end;\n            } else {\n              removing = new RemoveMarkStep(start, end, marks[i]);\n              removed.push(removing);\n            }\n          }\n        }\n\n        var previousAdded = adding && adding.to === start;\n        var sameAdding = previousAdded && newStyleMark.attrs.style === adding.mark.attrs.style;\n\n        if (previousAdded && sameAdding) {\n          adding.to = end;\n        } else if (Object.keys(newMarkAttrs_1).some(function (attrName) {\n          return newMarkAttrs_1[attrName] !== null;\n        })) {\n          adding = new AddMarkStep(start, end, newStyleMark);\n          added.push(adding);\n        }\n      }\n    }\n  });\n  removed.forEach(function (s) {\n    return tr.step(s);\n  });\n  added.forEach(function (s) {\n    return tr.step(s);\n  });\n  return removed.length + added.length > 0;\n};\n/**\n * Used by FontSize and FontName tools for getting their state.\n */\n\n\nexport var getInlineStyles = function getInlineStyles(state, style) {\n  var styleMark = state.schema.marks.style;\n  var marks = styleMark ? selectionMarks(state, styleMark) : [];\n  return marks.map(function (mark) {\n    return styleValue(mark, style);\n  }).filter(function (m) {\n    return m !== null;\n  });\n};\n\nvar changeStyle = function changeStyle(markType, attrs) {\n  return function (state, dispatch, tr) {\n    var _a = state.selection,\n        empty = _a.empty,\n        $cursor = _a.$cursor,\n        ranges = _a.ranges;\n\n    if (empty && !$cursor || !markApplies(state.doc, ranges, markType)) {\n      return false;\n    }\n\n    var result = false;\n\n    if (dispatch) {\n      tr = tr || state.tr;\n\n      if ($cursor) {\n        var currentMarks = state.storedMarks || $cursor.marks();\n\n        if (markType.isInSet(currentMarks)) {\n          var newStyle = changeStyleFromMark(currentMarks, attrs);\n          var styleMark = currentMarks.find(function (m) {\n            return m.type.name === 'style';\n          });\n\n          var newAttrs_1 = tslib_1.__assign({}, styleMark ? styleMark.attrs : {}, {\n            style: newStyle.style || null\n          });\n\n          if (shallowEqual(styleMark.attrs, newAttrs_1)) {\n            return false;\n          }\n\n          dispatch(tr.removeStoredMark(markType));\n\n          if (Object.keys(newAttrs_1).some(function (attrName) {\n            return newAttrs_1[attrName] !== null;\n          })) {\n            dispatch(tr.addStoredMark(markType.create(newAttrs_1)));\n          }\n\n          result = true;\n        }\n      } else {\n        for (var i = 0; i < ranges.length; i++) {\n          var _b = ranges[i],\n              $from = _b.$from,\n              $to = _b.$to;\n          result = changeStyleMark(tr, $from.pos, $to.pos, attrs, markType);\n        }\n\n        if (result) {\n          tr.scrollIntoView();\n          dispatch(tr);\n        }\n      }\n    }\n\n    return result;\n  };\n};\n/**\n * Used by bold, italic, ... and link commands.\n */\n\n\nexport var toggleInlineFormat = function toggleInlineFormat(options, tr, markAttrs) {\n  return function (state, dispatch) {\n    var marks = state.schema.marks;\n    var altStyle = options.altStyle,\n        _a = options.altMarks,\n        altMarks = _a === void 0 ? [] : _a,\n        mark = options.mark;\n    tr = tr || state.tr;\n    var styleRemoved = false;\n    var dispatched = false;\n\n    var markDispatched = function markDispatched() {\n      return dispatched = true;\n    };\n\n    if (altStyle && marks.style) {\n      var cmd = changeStyle(marks.style, {\n        style: altStyle.name,\n        value: altStyle.value\n      });\n      styleRemoved = cmd(state, markDispatched, tr);\n    }\n\n    var allMarks = [mark].concat(altMarks).filter(function (m) {\n      return marks[m];\n    });\n    var toRemove = allMarks.map(function (m) {\n      return hasMark(state, {\n        mark: m\n      }) && marks[m];\n    }).filter(function (m) {\n      return m;\n    });\n\n    if (toRemove.length) {\n      removeMarks(toRemove, state, markDispatched, tr);\n    } else {\n      if (!styleRemoved) {\n        toggleMark(marks[mark], markAttrs, tr)(state, markDispatched);\n      }\n    }\n\n    if (dispatched) {\n      dispatch(tr);\n    }\n\n    return dispatched;\n  };\n};\n/**\n * Used by FontSize, FontName, Color and BackColor commands.\n */\n\nexport var applyInlineStyle = function applyInlineStyle(options, command) {\n  return function (state, dispatch) {\n    var marks = state.schema.marks;\n    var markType = marks.style;\n    var attrs = {\n      style: options.style,\n      value: /^.+$/,\n      newValue: options.value\n    };\n    var tr = state.tr;\n\n    if (command) {\n      tr.setMeta('commandName', command);\n    }\n\n    tr.setMeta('args', options);\n    var _a = state.selection,\n        empty = _a.empty,\n        $cursor = _a.$cursor,\n        ranges = _a.ranges;\n\n    if (empty && !$cursor || !markType || !markApplies(state.doc, ranges, markType)) {\n      return false;\n    } // Empty selection\n\n\n    if ($cursor) {\n      var marksFromSelection = state.storedMarks || $cursor.marks();\n      var currentMark = markType.isInSet(marksFromSelection) ? marksFromSelection.find(function (m) {\n        return m.type.name === 'style';\n      }) : null;\n      var newStyles = {\n        style: null\n      };\n\n      if (currentMark && currentMark.attrs.style) {\n        var resultStyles = changeStylesString(currentMark.attrs.style, attrs);\n\n        if (resultStyles.changed && resultStyles.style) {\n          newStyles.style = resultStyles.style;\n        }\n      } else if (attrs.newValue) {\n        newStyles.style = [attrs.style] + \": \" + attrs.newValue + \";\";\n      }\n\n      var newMarkAttrs_2 = currentMark ? tslib_1.__assign({}, currentMark.attrs, newStyles) : newStyles;\n\n      if (Object.keys(newMarkAttrs_2).some(function (attrName) {\n        return newMarkAttrs_2[attrName] !== null;\n      })) {\n        dispatch(tr.addStoredMark(markType.create(newMarkAttrs_2)));\n      } else {\n        dispatch(tr.removeStoredMark(markType));\n      }\n\n      return true;\n    }\n\n    return changeStyle(markType, attrs)(state, dispatch, tr);\n  };\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/@progress/kendo-editor-common/dist/es/inline-style.js"],"names":["tslib_1","AddMarkStep","RemoveMarkStep","changeStylesString","shallowEqual","markApplies","hasMark","removeMarks","toggleMark","styleValue","selectionMarks","changeStyleFromMark","marks","toChange","styleMark","find","m","type","name","elementStyle","attrs","style","changeStyleMark","tr","from","to","markType","mark","create","removed","added","removing","adding","doc","nodesBetween","node","pos","parent","isInline","isInSet","allowsMarkType","start","Math","max","end","min","nodeSize","newStyle","changed","newValue","currentMark","newMarkAttrs_1","__assign","newStyleMark","newSet","addToSet","i","length","eq","push","previousAdded","sameAdding","Object","keys","some","attrName","forEach","s","step","getInlineStyles","state","schema","map","filter","changeStyle","dispatch","_a","selection","empty","$cursor","ranges","result","currentMarks","storedMarks","newAttrs_1","removeStoredMark","addStoredMark","_b","$from","$to","scrollIntoView","toggleInlineFormat","options","markAttrs","altStyle","altMarks","styleRemoved","dispatched","markDispatched","cmd","value","allMarks","concat","toRemove","applyInlineStyle","command","setMeta","marksFromSelection","newStyles","resultStyles","newMarkAttrs_2"],"mappings":"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","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { AddMarkStep, RemoveMarkStep } from 'prosemirror-transform';\nimport { changeStylesString, shallowEqual } from './utils';\nimport { markApplies, hasMark, removeMarks, toggleMark, styleValue, selectionMarks } from './mark';\nvar changeStyleFromMark = function (marks, toChange) {\n    var styleMark = marks.find(function (m) { return m.type.name === 'style'; });\n    var elementStyle = styleMark && styleMark.attrs.style;\n    return changeStylesString(elementStyle, toChange);\n};\nvar changeStyleMark = function (tr, from, to, attrs, markType) {\n    var mark = markType.create({ style: attrs.style });\n    var removed = [], added = [], removing = null, adding = null;\n    tr.doc.nodesBetween(from, to, function (node, pos, parent) {\n        if (!node.isInline) {\n            return;\n        }\n        var marks = node.marks;\n        if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n            var start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);\n            var newStyle = changeStyleFromMark(marks, attrs);\n            if (newStyle.changed || attrs.newValue) {\n                var style = newStyle.changed ?\n                    { style: newStyle.style || null } : { style: [attrs.style] + \": \" + attrs.newValue + \";\" };\n                var currentMark = markType.isInSet(marks) ? marks.find(function (m) { return m.type.name === 'style'; }) : null;\n                var newMarkAttrs_1 = currentMark ? tslib_1.__assign({}, currentMark.attrs, style) : style;\n                var newStyleMark = markType.create(newMarkAttrs_1);\n                var newSet = newStyleMark.addToSet(marks);\n                for (var i = 0; i < marks.length; i++) {\n                    if (!marks[i].isInSet(newSet)) {\n                        if (removing && removing.to === start && removing.mark.eq(marks[i])) {\n                            removing.to = end;\n                        }\n                        else {\n                            removing = new RemoveMarkStep(start, end, marks[i]);\n                            removed.push(removing);\n                        }\n                    }\n                }\n                var previousAdded = adding && adding.to === start;\n                var sameAdding = previousAdded && newStyleMark.attrs.style === adding.mark.attrs.style;\n                if (previousAdded && sameAdding) {\n                    adding.to = end;\n                }\n                else if (Object.keys(newMarkAttrs_1).some(function (attrName) { return newMarkAttrs_1[attrName] !== null; })) {\n                    adding = new AddMarkStep(start, end, newStyleMark);\n                    added.push(adding);\n                }\n            }\n        }\n    });\n    removed.forEach(function (s) { return tr.step(s); });\n    added.forEach(function (s) { return tr.step(s); });\n    return removed.length + added.length > 0;\n};\n/**\n * Used by FontSize and FontName tools for getting their state.\n */\nexport var getInlineStyles = function (state, style) {\n    var styleMark = state.schema.marks.style;\n    var marks = styleMark ? selectionMarks(state, styleMark) : [];\n    return marks.map(function (mark) { return styleValue(mark, style); }).filter(function (m) { return m !== null; });\n};\nvar changeStyle = function (markType, attrs) {\n    return function (state, dispatch, tr) {\n        var _a = state.selection, empty = _a.empty, $cursor = _a.$cursor, ranges = _a.ranges;\n        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) {\n            return false;\n        }\n        var result = false;\n        if (dispatch) {\n            tr = tr || state.tr;\n            if ($cursor) {\n                var currentMarks = state.storedMarks || $cursor.marks();\n                if (markType.isInSet(currentMarks)) {\n                    var newStyle = changeStyleFromMark(currentMarks, attrs);\n                    var styleMark = currentMarks.find(function (m) { return m.type.name === 'style'; });\n                    var newAttrs_1 = tslib_1.__assign({}, (styleMark ? styleMark.attrs : {}), { style: newStyle.style || null });\n                    if (shallowEqual(styleMark.attrs, newAttrs_1)) {\n                        return false;\n                    }\n                    dispatch(tr.removeStoredMark(markType));\n                    if (Object.keys(newAttrs_1).some(function (attrName) { return newAttrs_1[attrName] !== null; })) {\n                        dispatch(tr.addStoredMark(markType.create(newAttrs_1)));\n                    }\n                    result = true;\n                }\n            }\n            else {\n                for (var i = 0; i < ranges.length; i++) {\n                    var _b = ranges[i], $from = _b.$from, $to = _b.$to;\n                    result = changeStyleMark(tr, $from.pos, $to.pos, attrs, markType);\n                }\n                if (result) {\n                    tr.scrollIntoView();\n                    dispatch(tr);\n                }\n            }\n        }\n        return result;\n    };\n};\n/**\n * Used by bold, italic, ... and link commands.\n */\nexport var toggleInlineFormat = function (options, tr, markAttrs) { return function (state, dispatch) {\n    var marks = state.schema.marks;\n    var altStyle = options.altStyle, _a = options.altMarks, altMarks = _a === void 0 ? [] : _a, mark = options.mark;\n    tr = tr || state.tr;\n    var styleRemoved = false;\n    var dispatched = false;\n    var markDispatched = function () { return dispatched = true; };\n    if (altStyle && marks.style) {\n        var cmd = changeStyle(marks.style, { style: altStyle.name, value: altStyle.value });\n        styleRemoved = cmd(state, markDispatched, tr);\n    }\n    var allMarks = [mark].concat(altMarks).filter(function (m) { return marks[m]; });\n    var toRemove = allMarks.map(function (m) { return hasMark(state, { mark: m }) && marks[m]; }).filter(function (m) { return m; });\n    if (toRemove.length) {\n        removeMarks(toRemove, state, markDispatched, tr);\n    }\n    else {\n        if (!styleRemoved) {\n            toggleMark(marks[mark], markAttrs, tr)(state, markDispatched);\n        }\n    }\n    if (dispatched) {\n        dispatch(tr);\n    }\n    return dispatched;\n}; };\n/**\n * Used by FontSize, FontName, Color and BackColor commands.\n */\nexport var applyInlineStyle = function (options, command) { return function (state, dispatch) {\n    var marks = state.schema.marks;\n    var markType = marks.style;\n    var attrs = {\n        style: options.style, value: /^.+$/, newValue: options.value\n    };\n    var tr = state.tr;\n    if (command) {\n        tr.setMeta('commandName', command);\n    }\n    tr.setMeta('args', options);\n    var _a = state.selection, empty = _a.empty, $cursor = _a.$cursor, ranges = _a.ranges;\n    if ((empty && !$cursor) || !markType || !markApplies(state.doc, ranges, markType)) {\n        return false;\n    }\n    // Empty selection\n    if ($cursor) {\n        var marksFromSelection = state.storedMarks || $cursor.marks();\n        var currentMark = markType.isInSet(marksFromSelection) ? marksFromSelection.find(function (m) { return m.type.name === 'style'; }) : null;\n        var newStyles = { style: null };\n        if (currentMark && currentMark.attrs.style) {\n            var resultStyles = changeStylesString(currentMark.attrs.style, attrs);\n            if (resultStyles.changed && resultStyles.style) {\n                newStyles.style = resultStyles.style;\n            }\n        }\n        else if (attrs.newValue) {\n            newStyles.style = [attrs.style] + \": \" + attrs.newValue + \";\";\n        }\n        var newMarkAttrs_2 = currentMark ? tslib_1.__assign({}, currentMark.attrs, newStyles) : newStyles;\n        if (Object.keys(newMarkAttrs_2).some(function (attrName) { return newMarkAttrs_2[attrName] !== null; })) {\n            dispatch(tr.addStoredMark(markType.create(newMarkAttrs_2)));\n        }\n        else {\n            dispatch(tr.removeStoredMark(markType));\n        }\n        return true;\n    }\n    return changeStyle(markType, attrs)(state, dispatch, tr);\n}; };\n"]},"metadata":{},"sourceType":"module"}