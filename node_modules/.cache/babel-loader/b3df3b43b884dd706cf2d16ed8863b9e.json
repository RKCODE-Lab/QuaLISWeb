{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\reports\\\\reportsconfig\\\\AddReportMaster.js\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus, attachmentType, reportTypeEnum } from '../../../components/Enumeration';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport DropZone from '../../../components/dropzone/dropzone.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport ReactSelectAddEdit from '../../../components/react-select-add-edit/react-select-add-edit-component';\n\nconst AddReportMaster = props => {\n  //console.log(\"propsiin reportmaster:\", props.selectedRecord)\n  let isReportTypeDisabled = false;\n\n  if (props.operation === \"update\") {\n    isReportTypeDisabled = true;\n  } else {\n    if (props.filterReportType && props.filterReportType.nreporttypecode !== 0) {\n      isReportTypeDisabled = true;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nreporttypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REPORTTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.reportTypeList || [],\n    value: props.selectedRecord[\"nreporttypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true //isDisabled={props.operation === \"update\"}\n    ,\n    isDisabled: isReportTypeDisabled,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nreporttypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 29\n    }\n  }), props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nregtypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REGTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.regTypeList || [] //options={ props.selectedRecord[\"nreporttypecode\"]['item'].nreporttypecode === reportTypeEnum.SAMPLE?props.regType:props.regTypeList || []}\n    ,\n    value: props.selectedRecord[\"nregtypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nregtypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nregsubtypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REGSUBTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.regSubTypeList || [],\n    value: props.selectedRecord[\"nregsubtypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: true,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nregsubtypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  })), props.selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES ? /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nsectioncode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_LAB\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.sectionList || [],\n    value: props.selectedRecord[\"nsectioncode\"] || \"\",\n    isMandatory: false,\n    isMulti: false,\n    isClearable: true,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nsectioncode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }\n  })) : \"\") : \"\", props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && props.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncoareporttypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REPORTSUBTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.coaReportTypeList || [],\n    value: props.selectedRecord[\"ncoareporttypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncoareporttypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  })) : \"\", props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"nformcode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SCREENNAME\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.controlScreen || [],\n    value: props.selectedRecord[\"nformcode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"nformcode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncontrolcode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CONTROLNAME\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.controlButton || [],\n    value: props.selectedRecord[\"ncontrolcode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncontrolcode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 33\n    }\n  })) : \"\", props.selectedRecord[\"nreporttypecode\"] && props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS ? /*#__PURE__*/React.createElement(ReactSelectAddEdit, {\n    name: \"nreportmodulecode\",\n    label: props.intl.formatMessage({\n      id: \"IDS_MODULENAME\"\n    }),\n    className: \"color-select\",\n    classNamePrefix: \"react-select\",\n    optionId: \"nreportmodulecode\",\n    optionValue: \"sdisplayname\",\n    options: props.reportModuleList || [],\n    isMandatory: true,\n    getValue: value => props.onComboChange(value, \"nreportmodulecode\"),\n    value: props.selectedRecord[\"nreportmodulecode\"] ? props.selectedRecord[\"nreportmodulecode\"] : \"\" // defaultValue={props.selectedRecord? props.selectedRecord[\"sparametername\"]:\"\"}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 33\n    }\n  }) : \"\", props.selectedRecord[\"nreporttypecode\"] && (props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncertificatetypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CERTIFICATETYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.certificateTypeList || [],\n    value: props.selectedRecord[\"ncertificatetypecode\"] || \"\",\n    isMandatory: true,\n    isMulti: false,\n    isClearable: false,\n    isSearchable: true,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, \"ncertificatetypecode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_REPORTBATCHTYPE\"\n    }),\n    name: \"sbatchdisplayname\",\n    type: \"text\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_REPORTBATCHTYPE\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\",\n    isMandatory: false,\n    required: false,\n    readOnly: true,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 41\n    }\n  }))) : \"\", /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_REPORTNAME\"\n    }),\n    name: \"sreportname\",\n    type: \"text\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_REPORTNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sreportname\"] : \"\",\n    isMandatory: true,\n    required: true,\n    maxLength: 100,\n    readOnly: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"sdescription\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord[\"sdescription\"] || \"\",\n    rows: \"2\",\n    isMandatory: false,\n    required: false,\n    maxLength: 255,\n    isDisabled: props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 24\n    }\n  }), /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ntransactionstatus\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ISACTIVE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ISACTIVE\"\n    }),\n    value: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 25\n    }\n  }), props.operation === \"create\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"nisplsqlquery\",\n    type: \"switch\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ISPLSQLQUERY\"\n    }),\n    value: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    isMandatory: false,\n    required: false,\n    checked: props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false,\n    onChange: event => props.onInputOnChange(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 33\n    }\n  }), Object.keys(props.selectedRecord).length > 0 && /*#__PURE__*/React.createElement(DropZone, {\n    label: props.intl.formatMessage({\n      id: \"IDS_FILE\"\n    }),\n    maxFiles: 1,\n    accept: \".jrxml,.mrt\",\n    minSize: 0,\n    maxSize: 10,\n    fileNameLength: 150,\n    onDrop: event => props.onDropImage(event, \"sfilename\", 1),\n    multiple: false,\n    isMandatory: true,\n    editFiles: props.selectedRecord ? props.selectedRecord : {},\n    attachmentTypeCode: props.operation === \"update\" ? attachmentType.OTHERS : \"\",\n    fileName: \"sfilename\",\n    deleteAttachment: () => props.deleteFile(\"sfilename\"),\n    actionType: props.actionType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 41\n    }\n  })) : \"\"));\n};\n\nexport default injectIntl(AddReportMaster);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/reports/reportsconfig/AddReportMaster.js"],"names":["React","Row","Col","injectIntl","transactionStatus","attachmentType","reportTypeEnum","CustomSwitch","DropZone","FormTextarea","FormInput","FormSelectSearch","ReactSelectAddEdit","AddReportMaster","props","isReportTypeDisabled","operation","filterReportType","nreporttypecode","intl","formatMessage","id","reportTypeList","selectedRecord","event","onComboChange","isneedregtype","YES","regTypeList","reportVersionStatus","APPROVED","regSubTypeList","isneedsection","sectionList","value","MIS","SCREENWISE","coaReportTypeList","controlScreen","controlButton","reportModuleList","BATCH","SAMPLE","certificateTypeList","onInputOnChange","ACTIVE","Object","keys","length","onDropImage","OTHERS","deleteFile","actionType"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport {injectIntl } from 'react-intl';\r\nimport {transactionStatus, attachmentType, reportTypeEnum} from '../../../components/Enumeration';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport ReactSelectAddEdit from '../../../components/react-select-add-edit/react-select-add-edit-component'\r\n\r\nconst AddReportMaster = (props) => {\r\n        //console.log(\"propsiin reportmaster:\", props.selectedRecord)\r\n        let isReportTypeDisabled = false;\r\n        if (props.operation === \"update\"){\r\n                isReportTypeDisabled = true;\r\n        }\r\n        else{\r\n                if (props.filterReportType && props.filterReportType.nreporttypecode !== 0){\r\n                        isReportTypeDisabled = true;                        \r\n                }\r\n        }\r\n        return(\r\n                <Row>\r\n                    <Col md={12}>\r\n                            <FormSelectSearch\r\n                                    name={\"nreporttypecode\"}\r\n                                    formLabel={ props.intl.formatMessage({ id:\"IDS_REPORTTYPE\"})}                              \r\n                                    placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                    options={ props.reportTypeList || []}\r\n                                    value = { props.selectedRecord[\"nreporttypecode\"] || \"\"}\r\n                                    isMandatory={true}\r\n                                    isMulti={false}\r\n                                    isClearable={false}\r\n                                    isSearchable={true}                                \r\n                                    //isDisabled={props.operation === \"update\"}\r\n                                    isDisabled = {isReportTypeDisabled}\r\n                                    closeMenuOnSelect={true}\r\n                                    onChange = {(event)=> props.onComboChange(event, \"nreporttypecode\")}                               \r\n                            />                                      \r\n                    {props.selectedRecord[\"nreporttypecode\"] &&\r\n                            props.selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES ?\r\n                        <Row>\r\n                        <Col md={6}>\r\n                                <FormSelectSearch\r\n                                        name={\"nregtypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_REGTYPE\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})} \r\n                                        options={ props.regTypeList || []}                                  \r\n                                        //options={ props.selectedRecord[\"nreporttypecode\"]['item'].nreporttypecode === reportTypeEnum.SAMPLE?props.regType:props.regTypeList || []}\r\n                                        value = { props.selectedRecord[\"nregtypecode\"] || \"\"}\r\n                                        isMandatory={true }\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nregtypecode\")}                               \r\n                                /> \r\n                           \r\n                        </Col> \r\n                   \r\n                        <Col md={6}>\r\n\r\n                                <FormSelectSearch\r\n                                        name={\"nregsubtypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_REGSUBTYPE\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                   \r\n                                        options={ props.regSubTypeList || []}\r\n                                        value = { props.selectedRecord[\"nregsubtypecode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={true}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nregsubtypecode\")}                               \r\n                                /> \r\n                           \r\n                        </Col> \r\n                        \r\n                        {props.selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES ? \r\n                        <Col md={6}>\r\n                                <FormSelectSearch\r\n                                        name={\"nsectioncode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_LAB\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                    \r\n                                        options={ props.sectionList || []}\r\n                                        value = { props.selectedRecord[\"nsectioncode\"] || \"\"}\r\n                                        isMandatory={false}\r\n                                        isMulti={false}\r\n                                        isClearable={true}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nsectioncode\")}                               \r\n                                        /> \r\n                           \r\n                        </Col>:\"\"}\r\n                        </Row>\r\n                :\"\"}\r\n                {props.selectedRecord[\"nreporttypecode\"] &&\r\n                            props.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS\r\n                                && props.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE? <>\r\n\r\n                                <FormSelectSearch\r\n                                        name={\"ncoareporttypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_REPORTSUBTYPE\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                \r\n                                        options={ props.coaReportTypeList || []}\r\n                                        value = { props.selectedRecord[\"ncoareporttypecode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"ncoareporttypecode\")}                               \r\n                                /> \r\n\r\n                        {/* {props.selectedRecord[\"nreporttypecode\"] &&\r\n                            props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE?\r\n                                <FormSelectSearch\r\n                                        name={\"nreportdecisiontypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_DECISIONTYPE\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                 \r\n                                        options={ props.decisionTypeList || []}\r\n                                        value = { props.selectedRecord[\"nreportdecisiontypecode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nreportdecisiontypecode\")}                               \r\n                                /> \r\n                           :\"\"} */}\r\n                        </> :\"\"}\r\n\r\n\r\n                        { props.selectedRecord[\"nreporttypecode\"] &&\r\n                            props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE?\r\n                                <><FormSelectSearch\r\n                                        name={\"nformcode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_SCREENNAME\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                    \r\n                                        options={ props.controlScreen || []}\r\n                                        value = { props.selectedRecord[\"nformcode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nformcode\")}                               \r\n                                /> \r\n                                <FormSelectSearch\r\n                                        name={\"ncontrolcode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_CONTROLNAME\"})}                              \r\n                                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                    \r\n                                        options={ props.controlButton || []}\r\n                                        value = { props.selectedRecord[\"ncontrolcode\"] || \"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"ncontrolcode\")}                               \r\n                                /> \r\n                               </>\r\n                           :\"\"}\r\n                       \r\n                                    \r\n                    {props.selectedRecord[\"nreporttypecode\"] &&\r\n                            props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS ?                                       \r\n                                 \r\n                                <ReactSelectAddEdit\r\n                                                name=\"nreportmodulecode\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_MODULENAME\" })}\r\n                                                className=\"color-select\"\r\n                                                classNamePrefix=\"react-select\"\r\n                                                optionId=\"nreportmodulecode\"\r\n                                                optionValue=\"sdisplayname\"\r\n                                                options={props.reportModuleList || []}\r\n                                                isMandatory={true}\r\n                                                getValue={value => props.onComboChange(value, \"nreportmodulecode\")}\r\n                                                value={props.selectedRecord[\"nreportmodulecode\"]? props.selectedRecord[\"nreportmodulecode\"]: \"\" }\r\n                                                // defaultValue={props.selectedRecord? props.selectedRecord[\"sparametername\"]:\"\"}\r\n                                        />\r\n                                :\"\"}\r\n\r\n                        { props.selectedRecord[\"nreporttypecode\"] &&\r\n                            (props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH\r\n                            || props.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) ?\r\n                            <Row>\r\n                                <Col md={6}>                                       \r\n                                        <FormSelectSearch\r\n                                                name={\"ncertificatetypecode\"}\r\n                                                formLabel={ props.intl.formatMessage({ id:\"IDS_CERTIFICATETYPE\"})}                              \r\n                                                placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                    \r\n                                                options={ props.certificateTypeList || []}\r\n                                                value = { props.selectedRecord[\"ncertificatetypecode\"] || \"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}                                \r\n                                                isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange = {(event)=> props.onComboChange(event, \"ncertificatetypecode\")}                               \r\n                                        />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                        <FormInput\r\n                                                label={props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}\r\n                                                name={\"sbatchdisplayname\"}\r\n                                                type=\"text\"\r\n                                                placeholder={props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}\r\n                                                value ={props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\"}\r\n                                                isMandatory = {false}\r\n                                                required={false}\r\n                                                readOnly={true}\r\n                                                onChange={(event)=> props.onInputOnChange(event)}\r\n                                        />\r\n                                </Col>\r\n                        </Row>\r\n                       \r\n                                 :\"\"}\r\n                   \r\n                          <FormInput\r\n                                label={props.intl.formatMessage({ id:\"IDS_REPORTNAME\"})}\r\n                                name={\"sreportname\"}\r\n                                type=\"text\"\r\n                                placeholder={props.intl.formatMessage({ id:\"IDS_REPORTNAME\"})}\r\n                                value ={props.selectedRecord ? props.selectedRecord[\"sreportname\"] : \"\"}\r\n                                isMandatory = {true}\r\n                                required={true}\r\n                                maxLength={100}\r\n                                readOnly={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                         />\r\n\r\n                       <FormTextarea\r\n                            name={\"sdescription\"}\r\n                            label={ props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}                    \r\n                            placeholder={ props.intl.formatMessage({ id:\"IDS_DESCRIPTION\"})}\r\n                            value ={ props.selectedRecord[\"sdescription\"] || \"\"}\r\n                            rows=\"2\"\r\n                            isMandatory={false}\r\n                            required={false}\r\n                            maxLength={255}\r\n                            isDisabled={props.operation === \"update\" && props.reportVersionStatus === transactionStatus.APPROVED}\r\n                            onChange={(event)=> props.onInputOnChange(event)}\r\n                           />\r\n         \r\n                        <CustomSwitch\r\n                                name={\"ntransactionstatus\"}\r\n                                type=\"switch\"\r\n                                label={ props.intl.formatMessage({ id:\"IDS_ISACTIVE\"})}\r\n                                placeholder={ props.intl.formatMessage({ id:\"IDS_ISACTIVE\"})}                            \r\n                                value ={ props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true :false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={ props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true :false}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                                />\r\n                   {props.operation === \"create\" ? <>\r\n                   \r\n                                <CustomSwitch\r\n                                name={\"nisplsqlquery\"}\r\n                                type=\"switch\"\r\n                                label={ props.intl.formatMessage({ id:\"IDS_ISPLSQLQUERY\"})}\r\n                                placeholder={ props.intl.formatMessage({ id:\"IDS_ISPLSQLQUERY\"})}                            \r\n                                value ={ props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true :false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={ props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true :false}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                                />\r\n                    \r\n                        {Object.keys(props.selectedRecord).length >0 &&\r\n                              \r\n                                        <DropZone \r\n                                        label={ props.intl.formatMessage({ id:\"IDS_FILE\"})} \r\n                                        maxFiles={1}\r\n                                        accept=\".jrxml,.mrt\"\r\n                                        minSize={0}\r\n                                        maxSize={10}\r\n                                        fileNameLength={150}\r\n                                        onDrop={(event)=>props.onDropImage(event, \"sfilename\",1)}\r\n                                        multiple={false}\r\n                                        isMandatory={true}\r\n                                        editFiles={props.selectedRecord ? props.selectedRecord :{}}\r\n                                        attachmentTypeCode={props.operation===\"update\"? attachmentType.OTHERS:\"\"}            \r\n                                        fileName=\"sfilename\"\r\n                                        deleteAttachment={()=>props.deleteFile(\"sfilename\")}\r\n                                        actionType={props.actionType}\r\n                                        />\r\n                               \r\n                                } \r\n                        </> \r\n                        :\"\"}\r\n                    </Col>\r\n                </Row>\r\n            )   \r\n}\r\n\r\nexport default injectIntl(AddReportMaster);"]},"metadata":{},"sourceType":"module"}