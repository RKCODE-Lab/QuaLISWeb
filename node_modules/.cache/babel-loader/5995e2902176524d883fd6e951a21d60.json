{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageLocation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faFileImport, faEye } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport ScrollBar from 'react-perfect-scrollbar';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport { //faBell, \nfaChevronDown, faChevronUp, faExclamationCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Grid } from '@progress/kendo-react-grid';\nimport Axios from 'axios';\nimport rsapi from '../../rsapi'; //import { Upload } from '@progress/kendo-react-upload';\n\nclass SampleStorageLocation extends Component {\n  constructor(_props) {\n    super(_props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.onChange = event => {\n      this.setState({\n        panes: event.newState\n      });\n    };\n\n    this.getSiblings = (itemIndex, data) => {\n      let result = data;\n      const indices = itemIndex.split(this.SEPARATOR).map(index => Number(index));\n\n      for (let i = 0; i < indices.length - 1; i++) {\n        result = result[indices[i]].items || [];\n      }\n\n      return result;\n    };\n\n    this.onItemDragOver = event => {\n      this.dragOverCnt++;\n      this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\n    };\n\n    this.onItemDragEnd = event => {\n      this.isDragDrop = this.dragOverCnt > 0;\n      this.dragOverCnt = 0;\n      this.dragClue.hide();\n      const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n\n      if (eventAnalyzer.isDropAllowed) {\n        const updatedTree = moveTreeViewItem(event.itemHierarchicalIndex, this.state.treeData, eventAnalyzer.getDropOperation() || 'child', eventAnalyzer.destinationMeta.itemHierarchicalIndex);\n        this.setState({\n          tree: updatedTree\n        });\n      }\n    };\n\n    this.addChildNode = (e, clickedItem) => {\n      let ParentItem = this.searchClickedItemParent(this.state.treeData[0]);\n\n      if (ParentItem) {\n        ParentItem.items.map(item => {\n          item.expanded = false;\n        });\n      }\n\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.items = item.items || [];\n          item.expanded = true;\n          item.items.push({\n            id: uuid(),\n            text: this.props.intl.formatMessage({\n              id: \"IDS_LABEL\"\n            }),\n            expanded: true,\n            editable: false,\n            locationlastnode: false,\n            containerfirstnode: false,\n            containerlastnode: false,\n            itemhierarchy: \"\"\n          });\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.cloneNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentID = '';\n      let clonedParentID = '';\n      let parentFound = false;\n      let cloneItems = {};\n      let clonedparentFound = false;\n      let newData = [...this.state.treeData];\n      let newData1 = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        // if (item.items) {\n        //     if (parentFound&&(item.id===parentID)) {\n        //         parentItem = item;\n        //         parentFound = false;\n        //     }\n        // }\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n          parentID = clickedItem.parentID;\n          parentItem = this.searchClickedItemParent(this.state.treeData[0]);\n        }\n\n        if (item.editable === true) {\n          clonedParentID = uuid();\n          let clonedNewParentID = uuid(); //     //  let clonedObject=//{...item}\n          //     //   Object.assign({}, item);\n          //       const clonedObject = JSON.parse(JSON.stringify(item1));\n          //      cloneItems =//[{...clonedObject}].map((data) => {\n          //       // return \n          //        this.generateUUID(clonedObject)\n          //    // })\n\n          let levelBasedParents = {};\n          cloneItems = mapTree([{ ...item\n          }], \"items\", cloneditem => {\n            // const indices = cloneditem.itemHierarchicalIndex.split('_').map(index => Number(index));\n            // let x=getItemPath(this.state.treeData,indices,\"items\")\n            // console.log('------------->',cloneditem)\n            // if(cloneditem.items===undefined&&clonedparentFound){\n            //     clonedParentID=uuid();\n            //     clonedparentFound=false;\n            // }\n            // else{\n            //     clonedNewParentID=uuid();\n            // }\n            // if(!levelBasedParents.hasOwnProperty(cloneditem.itemHierarchicalIndex)){\n            //     let level=cloneditem.itemHierarchicalIndex;\n            //     levelBasedParents={...levelBasedParents,\n            //                         [level]:uuid()\n            //                     }\n            // }\n            // if(cloneditem.items){\n            //      //if ClonedItem is a Parent\n            //     cloneditem={\n            //         ...cloneditem,\n            //         'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedNewParentID\n            //         ,\n            //         'id':clonedParentID,\n            //         'editable': false \n            //     } \n            //     clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\n            //     //  clonedParentID=uuid()//clonedNewParentID;\n            //     // clonedparentFound=true;\n            // }else{\n            //if ClonedItem is a Child\n            cloneditem = { ...cloneditem,\n              //'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedParentID\n              // ,\n              'id': uuid(),\n              'editable': false,\n              'expanded': false //   }\n              //  clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\n\n            };\n            return cloneditem;\n          });\n        } // item={\n        //    ...item,\n        //     'id':uuid(),\n        //   'editable': false \n        //     } \n\n\n        return item;\n      });\n\n      if (parentItem === undefined) {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ROOTNODECANNOTBEDELETED\"\n        }));\n      }\n\n      let count = 1;\n      newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === parentItem.id) {\n          count++;\n          item.items.push( // {\n          // ...cloneItem,\n          // 'id':uuid(),\n          // 'editable': false,\n          // 'text': cloneItem['text']+'('+count+')'\n          // } \n          { ...cloneItems[0],\n            'parentID': parentID // 'id':clonedParentID\n\n          });\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.equalNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentFound = false;\n      let newData = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        if (item.items) {\n          if (parentFound) {\n            parentItem = item;\n            parentFound = false;\n          }\n        }\n\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n        }\n\n        return item;\n      });\n\n      if (parentItem.text === undefined) {\n        newData.push({\n          id: uuid(),\n          text: this.props.intl.formatMessage({\n            id: \"IDS_LABEL\"\n          }),\n          expanded: true,\n          editable: false,\n          locationlastnode: false,\n          containerfirstnode: false,\n          containerlastnode: false,\n          itemhierarchy: \"\"\n        });\n        this.setState({\n          treeData: newData\n        });\n      } else {\n        newData = mapTree(this.state.treeData, \"items\", item => {\n          if (item.id === parentItem.id) {\n            item.items.push({\n              id: uuid(),\n              text: this.props.intl.formatMessage({\n                id: \"IDS_LABEL\"\n              }),\n              expanded: true,\n              editable: false,\n              locationlastnode: false,\n              containerfirstnode: false,\n              containerlastnode: false,\n              itemhierarchy: \"\"\n            });\n          }\n\n          return item;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.deleteNode = clickedItem => {\n      if (clickedItem.root && clickedItem.root === true) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PARENTNODENOTALLOWTODELETE\"\n        }));\n      } else {\n        const newData = removeItems(this.state.treeData, \"items\", item => {\n          return item.id === clickedItem.id;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.editRecord = (e, clickedItem) => {\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModalShow = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTreeProperties: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId,\n          isView: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        if (event.target.checked && event.target.name === 'nneedposition') {\n          selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\n          selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\n          selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n          selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode']; //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.itemRender = props => {\n      if (this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item.editable ? /*#__PURE__*/React.createElement(Form.Group, {\n          className: \"k-editable-text-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          id: \"nodename\",\n          name: \"nodename\",\n          type: \"text\",\n          onKeyDown: e => e.stopPropagation(),\n          value: props.item.text,\n          autoFocus: true,\n          autoComplete: \"off\",\n          onChange: e => this.handleChange(e, props.item),\n          onBlur: e => this.handleBlur(e, props.item, props.itemHierarchicalIndex),\n          maxLength: \"50\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 25\n          }\n        }, props.item.text));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"d-flex align-items-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node text-truncate\n                            ${props.item.editable ? \"active-node\" : \"\"}\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          \"data-tip\": props.item.text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 33\n          }\n        }, props.item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 70\n          }\n        }) : props.item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 71\n          }\n        }) : props.item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 76\n          }\n        }) : props.item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 71\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 113\n          }\n        }), props.item.text), props.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-toggle m-l-half\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_PROPERTIES\"\n          }),\n          onClick: e => this.setProperties(e, props),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level1\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CLONENODE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.cloneNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CHILDNODE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.addChildNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-edit k-i-pencil ml-2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.editRecord(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 41\n          }\n        }), !props.item.isRoot ? /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-delete ml-2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DELETE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.deleteNode(props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 45\n          }\n        }) : null) : null)) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      // if (selectedItem) {\n      //     selectedItem.editable = false;\n      //   }\n      //   event.item.editable = true;\n      //   selectedItem = event.item; \n      // let searchedData =undefined;\n      // if(this.state.searchedTreeData){\n      //      searchedData = mapTree(this.state.searchedTreeData, \"items\", (item1) => {\n      //         if (item1.editable === true) {\n      //             item1.editable = false;\n      //         } else if (item1.id === event.item.id) {\n      //             item1.editable = true;\n      //         }\n      //         return item1;\n      //     });\n      // } \n      // let newData = mapTree(this.state.treeData, \"items\", (item) => {\n      //     if (item.editable === true) {\n      //         item.editable = false;\n      //     } else if (item.id === event.item.id) {\n      //         item.editable = true;\n      //     }\n      //     return item;\n      // });\n      // this.setState({ treeData: newData,searchedTreeData: searchedData  }); \n      let searchedData = undefined;\n\n      if (this.state.searchedTreeData) {\n        searchedData = mapTree(this.state.searchedTreeData, \"items\", item => {\n          if (item.editable === true) {\n            item.editable = false;\n          } else if (item.id === event.item.id) {\n            item.editable = true;\n\n            if (this.pointedItem) {\n              if (this.pointedItem.id === item.id) {\n                this.pointedItem = undefined;\n              }\n            }\n\n            let result = this.state.searchedTreeData;\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n            let itemText = \"\";\n\n            for (let i = 0; i < indices.length; i++) {\n              if (i === 0) {\n                result = result[0];\n              } else {\n                result = result.items[indices[i]];\n              }\n\n              itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n            }\n\n            item.itemhierarchy = itemText;\n          }\n\n          return item;\n        });\n        searchedData.map(data => {\n          this.clearSelected(data, event.item);\n        });\n      }\n\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n          let result = this.state.treeData;\n          const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n          let itemText = \"\";\n\n          for (let i = 0; i < indices.length; i++) {\n            if (i === 0) {\n              result = result[0];\n            } else {\n              result = result.items[indices[i]];\n            }\n\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n          }\n\n          item.itemhierarchy = itemText;\n        }\n\n        return item;\n      });\n      newData.map(data => {\n        this.clearSelected(data, event.item);\n      });\n      this.setState({\n        treeData: newData,\n        searchedTreeData: searchedData\n      });\n    };\n\n    this.toggleSearch = () => {\n      this.setState({\n        showSearch: !this.state.showSearch\n      });\n    };\n\n    this.clearSearchedState = () => {\n      this.setState({\n        searchedTreeData: undefined,\n        showSearch: false\n      });\n    };\n\n    this.navigationCounter = () => {\n      let counter = this.state.counter || 0;\n      return counter;\n    };\n\n    this.handleSearch = () => {\n      this.uniqueIDArr = [];\n      this.pointedItem = undefined;\n      this.countforTree = 0; //this.setState({searchedTreeData: undefined})\n    };\n\n    this.search = (items, term) => {\n      return items.reduce((acc, item) => {\n        if (this.contains(item.text, term)) {\n          this.uniqueIDArr.push(item.id);\n          acc.push(item);\n        } else if (item.items && item.items.length > 0) {\n          let newItems = this.search(item.items, term);\n\n          if (newItems && newItems.length > 0) {\n            acc.push({ ...item,\n              text: item.text,\n              items: newItems,\n              expanded: acc.length === 0 ? true : false //item.expanded\n\n            });\n          }\n        }\n\n        return acc;\n      }, []);\n    };\n\n    this.handlenavigation = (e, direction) => {\n      if (e.key === 'Enter' || e.type === 'click') {\n        let value = document.querySelector('.k-textbox').value;\n\n        if (value !== \"\") {\n          if (direction === 'up') {\n            //Navigate up\n            this.countforTree--;\n\n            if (this.countforTree <= 0) {\n              this.countforTree = 0;\n            }\n          } else {\n            //if(direction==='down'){\n            //Navigate down\n            this.countforTree++;\n\n            if (this.countforTree >= this.uniqueIDArr.length) {\n              if (this.uniqueIDArr.length - 1 === -1) {\n                this.countforTree = 0;\n              } else {\n                this.countforTree = this.uniqueIDArr.length - 1;\n              } //toast.info(this.props.intl.formatMessage({ id: \"IDS_NOMORENODESTOSEARCH\" }))\n\n            }\n          }\n\n          let newData = this.navigateSearchedTree(this.state.treeDataView, value);\n          this.setState({\n            searchedTreeData: JSON.parse(JSON.stringify(newData))\n          });\n        } else {\n          this.setState({\n            searchedTreeData: undefined\n          });\n        }\n      }\n    };\n\n    this.navigateSearchedTree = (items, term) => {\n      return items.reduce((acc, item) => {\n        if (item.editable) {\n          item.editable = false;\n        }\n\n        if (item.selected) {\n          item.selected = false;\n        }\n\n        if (this.contains(item.text, term)) {\n          if (!this.uniqueIDArr.includes(item.id)) {\n            this.uniqueIDArr.push(item.id);\n          }\n\n          if (item.id === this.uniqueIDArr[this.countforTree]) {\n            if (this.pointedItem) {\n              this.pointedItem = undefined;\n            }\n\n            this.pointedItem = item;\n          }\n\n          acc.push(item);\n        } else if (item.items && item.items.length > 0) {\n          let newItems = this.navigateSearchedTree(item.items, term);\n\n          if (newItems && newItems.length > 0) {\n            if (newItems.some(item => item.id === this.uniqueIDArr[this.countforTree])) {\n              acc.push({ ...item,\n                text: item.text,\n                items: newItems,\n                expanded: true\n              });\n            } else {\n              acc.push({ ...item,\n                text: item.text,\n                items: newItems,\n                expanded: newItems.some(item => item.expanded === true) ? true : false\n              });\n            }\n          }\n        }\n\n        return acc;\n      }, []);\n    };\n\n    this.contains = (text, term) => {\n      return text.toLowerCase().indexOf(term.toLowerCase()) >= 0;\n    };\n\n    this.onExpandChange = event => {\n      let clickedItem = event.item;\n\n      if (!event.item.expanded) {\n        //this.onItemClick(event)\n        let ParentItem = this.searchClickedItemParent( //this.state.searchedTreeData&&\n        //this.state.searchedTreeData[0]||\n        this.state.treeData[0], clickedItem);\n\n        if (ParentItem) {\n          ParentItem.items.map(item => {\n            item.expanded = false;\n          });\n        }\n\n        this.shrinkNodes(event.item);\n      }\n\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n      this.getitemPath = { ...this.getitemPath,\n        [item.id]: clickedItem.itemHierarchicalIndex\n      };\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"d-flex align-items-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 989,\n            columnNumber: 29\n          }\n        }, this.pointedItem ? item.id === this.pointedItem.id && !item.selected ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          className: \"hidden-treeview-focus\",\n          id: \"selected-tree-point\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 992,\n            columnNumber: 41\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null) : '', /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node text-truncate\n                                ${this.pointedItem ? item.id === this.pointedItem.id && !item.selected ? \"pointed-node\" : item.selected ? \"active-node\" : \"\" : item.selected ? \"active-node\" : \"\"}\n                                ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                                `,\n          \"data-tip\": item.text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 996,\n            columnNumber: 33\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1001,\n            columnNumber: 64\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 65\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 70\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1004,\n            columnNumber: 65\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1004,\n            columnNumber: 107\n          }\n        }), item.text), this.pointedItem && item.id === this.pointedItem.id ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faHandPointLeft,\n          bounce: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1010,\n            columnNumber: 37\n          }\n        }) : clickedItem.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null) : null)) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      // if (this.state.selectedItem) {\n      //     let selectedobj = this.state.selectedItem;\n      //         selectedobj.selected = false\n      //     this.setState({\n      //         selectedItem : selectedobj\n      //     })\n      // }\n      // this.setState({\n      //     selectedItem : event.item\n      // })             \n      let searchedData = undefined;\n\n      if (this.state.searchedTreeData) {\n        searchedData = mapTree(this.state.searchedTreeData, \"items\", item => {\n          if (item.editable === true) {\n            item.editable = false;\n          } else if (item.id === event.item.id) {\n            item.editable = true;\n\n            if (this.pointedItem) {\n              if (this.pointedItem.id === item.id) {\n                this.pointedItem = undefined;\n              }\n            }\n\n            let result = this.state.searchedTreeData;\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n            let itemText = \"\";\n\n            for (let i = 0; i < indices.length; i++) {\n              if (i === 0) {\n                result = result[0];\n              } else {\n                result = result.items[indices[i]];\n              }\n\n              itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n            }\n\n            item.itemhierarchy = itemText;\n          }\n\n          return item;\n        });\n        searchedData.map(data => {\n          this.clearSelected(data, event.item);\n        });\n      }\n\n      let newData = mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n          let result = this.state.treeDataView;\n          const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n          let itemText = \"\";\n\n          for (let i = 0; i < indices.length; i++) {\n            if (i === 0) {\n              result = result[0];\n            } else {\n              result = result.items[indices[i]];\n            }\n\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n          }\n\n          item.itemhierarchy = itemText;\n        }\n\n        return item;\n      });\n      newData.map(data => {\n        this.clearSelected(data, event.item);\n      });\n      this.setState({\n        treeDataView: newData,\n        searchedTreeData: searchedData\n      });\n    };\n\n    this.onExpandChangeView = event => {\n      let clickedItem = event.item;\n\n      if (!event.item.expanded) {\n        //this.onItemClick(event)\n        let ParentItem = this.searchClickedItemParent(this.state.searchedTreeData && this.state.searchedTreeData[0] || this.state.treeDataView[0], clickedItem);\n\n        if (ParentItem) {\n          ParentItem.items.map(item => {\n            item.expanded = false;\n          });\n        }\n\n        this.shrinkNodes(event.item);\n      }\n\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.setProperties = (event, clickedItem) => {\n      const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode; //this.props.openPropertyModal(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, clickedItem, editId);\n\n      this.openPropertyModal(clickedItem, editId);\n    };\n\n    this.handleChange = (e, clickedItem) => {\n      let searchedData = undefined;\n\n      if (this.state.searchedTreeData) {\n        searchedData = mapTree(this.state.searchedTreeData, \"items\", item => {\n          if (item.id === clickedItem.id) {\n            item.text = e.target.value;\n          }\n\n          return item;\n        });\n      }\n\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.text = e.target.value;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData,\n        searchedTreeData: searchedData\n      });\n    };\n\n    this.handleBlur = (e, clickedItem, itemHierarchicalIndex) => {\n      clickedItem.editable = false; //Added for creating path after edit \n\n      const indices = itemHierarchicalIndex.split('_').map(index => Number(index));\n      this.generatePathForEditedItem(clickedItem, indices);\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else {\n        this.onSaveSampleStorageLocation(saveType, formRef);\n      }\n    };\n\n    this.onSaveProperties = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state; // if (this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT) {\n\n      if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n        let count = 0;\n\n        if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (count > 1) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTONLYONE\"\n          }));\n        } else {\n          let newData = mapTree(this.state.treeData, \"items\", item => {\n            if (item.id === this.props.Login.clickedItem.item.id) {\n              item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\n              item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\n              item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\n            }\n\n            if (item.selected && item.selected === true) {\n              item.selected = false;\n            }\n\n            return item;\n          });\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              treeData: newData,\n              selectedRecord,\n              loadTreeProperties: false,\n              loading: false\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } // } else {\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\n      // }\n\n    };\n\n    this.onSaveSampleStorageLocation = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state; // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\n      //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\n\n      let inputData = [];\n      let jsondata = {};\n      let postParam = undefined;\n      let countLevels = 0;\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        }\n\n        if (item.expanded === false) {\n          item.expanded = true;\n        }\n\n        item.expanded = false;\n        countLevels++;\n        return item;\n      }); // let lhs = JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data;\n      // let rhs = newData;\n      // console.log(detailedDiff(lhs, rhs));\n      // return;\n      // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n\n      if (countLevels > 3) {\n        jsondata[\"data\"] = newData;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sampleStorageLocation\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageVersion\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\n        inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"] && selectedRecord[\"nprojecttypecode\"].value ? selectedRecord[\"nprojecttypecode\"].value : -1;\n        inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] && selectedRecord[\"nproductcode\"].value ? selectedRecord[\"nproductcode\"].value : -1;\n        inputData[\"sampleStorageLocation\"][\"nneedautomapping\"] = selectedRecord[\"nneedautomapping\"] ? 3 : 4;\n        inputData[\"sampleStorageLocation\"] = selectedRecord['nneedposition'] === true ? { ...inputData[\"sampleStorageLocation\"],\n          ncontainertypecode: selectedRecord['ncontainertypecode'].value ? selectedRecord['ncontainertypecode'].value : -1,\n          ndirectionmastercode: selectedRecord['ndirectionmastercode'].value,\n          nneedposition: 3,\n          ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ? selectedRecord['ncontainerstructurecode'].value : -1,\n          nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n          nrow: selectedRecord['nrow'],\n          ncolumn: selectedRecord['ncolumn']\n        } : { ...inputData[\"sampleStorageLocation\"],\n          ncontainertypecode: -1,\n          ndirectionmastercode: 1,\n          nneedposition: 4,\n          ncontainerstructurecode: -1,\n          nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n          nrow: selectedRecord['nrow'],\n          ncolumn: selectedRecord['ncolumn']\n        };\n        inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n\n        if (this.props.Login.operation === \"create\") {\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"create\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // }\n            // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]; // inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"].value\n          // inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"].value\n\n          inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n          inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n          }\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_CREATEATLEASTFOURLEVELS\"\n        }));\n      }\n    };\n\n    this.deleteSampleStorageLocation = ncontrolCode => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      inputData[\"sampleStorageVersion\"] = {};\n      inputData[\"sampleStorageLocation\"] = {};\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n      const inputParam = {\n        methodUrl: \"SampleStorageLocation\",\n        classUrl: \"samplestoragelocation\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData; // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteSampleStorageLocation(ncontrolCode));\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.calculateRowColumn = (Row, column) => {\n      let nquantity = Row * column;\n      return nquantity;\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n\n        if (this.searchRef.current) {\n          this.searchRef.current.value = \"\";\n        }\n\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else {\n        if (fieldName === 'nstoragecategorycode') {\n          this.getSampleStorageLocation({\n            userinfo: this.props.userInfo,\n            nstoragecategorycode: comboData.value\n          }, fieldName, comboData);\n        } else if (fieldName === 'ncontainertypecode') {\n          this.getContainerStructure({\n            userinfo: this.props.userInfo,\n            ncontainertypecode: comboData.value\n          }, fieldName, comboData);\n        } else if (fieldName === 'ncontainerstructurecode') {\n          selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n          selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n          selectedRecord['nquantity'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']) : 1;\n        } else if (fieldName === 'nsamplestoragelocationcode') {\n          this.getSampleStorageLocation({\n            userinfo: this.props.userInfo,\n            nstoragecategorycode: this.props.selectedRecordFilter['nstoragecategorycode'].value,\n            nsamplestoragelocationcode: comboData.value\n          }, fieldName, comboData);\n        }\n\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onApproveSampleStorageLocation = ncontrolCode => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      let locationEnd = false;\n      let storageStart = false;\n      let storageEnd = false;\n      let containers = [];\n      let containerpath = [];\n      let containerlastnode = [];\n      mapTree(this.state.treeDataView //this.state.treeData\n      , \"items\", item => {\n        if (item.locationlastnode === true) {\n          locationEnd = true;\n        }\n\n        if (item.containerfirstnode === true) {\n          storageStart = true;\n          containers.push({\n            itemHierarchy: item.itemhierarchy,\n            scontainercode: item.id\n          });\n        }\n\n        if (item.containerlastnode === true) {\n          storageEnd = true;\n          containerpath.push(item.itemhierarchy);\n          containerlastnode.push(item.text);\n        }\n\n        return null;\n      }); // if (locationEnd === false) {\n      //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTLOCATIONEND\" }));\n      //     return;\n      // }\n      // if (storageStart === false) {\n      //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGESTART\" }));\n      //     return;\n      // }\n      // if (storageEnd === false) {\n      //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGEEND\" }));\n      //     return;\n      // }\n\n      const masterData = this.props.Login.masterData;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"containers\"] = containers;\n      inputData[\"containerpath\"] = JSON.stringify(containerpath);\n      inputData[\"containerpathsize\"] = containerpath.length;\n      inputData[\"containerlastnode\"] = JSON.stringify(containerlastnode);\n      inputData[\"propertyValidation\"] = {\n        \"locationEnd\": locationEnd,\n        \"storageStart\": storageStart,\n        \"storageEnd\": storageEnd\n      };\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"selectedSampleStorageLocation\"] = masterData.selectedSampleStorageLocation;\n      const inputParam = {\n        inputData: inputData,\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo,\n        operation: \"Approve\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"Approve\",\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.viewAdditionalInfo = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isView: true,\n          openModal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.importdata = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: 'IDS_IMPORT',\n          openModal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.copySampleStorageversion = ncontrolCode => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let inputData = [];\n      const masterData = this.props.Login.masterData;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      const inputParam = {\n        inputData: inputData,\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageVersion\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo,\n        operation: \"copy\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"copy\",\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\n\n      let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          \"nstoragecategorycode\": nfilterStorageCategory\n        },\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onNumericInputChange = (value, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (field === 'nquantity') {\n        if (value !== 0) {\n          selectedRecord['nrow'] = 1;\n          selectedRecord['ncolumn'] = value;\n        } else {\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n        }\n      }\n\n      if (!isNaN(value)) {\n        selectedRecord[field] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageLocation = addId => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\n        this.props.fetchStorageCategory({\n          userInfo: this.props.Login.userInfo,\n          id: uuid(),\n          nfilterStorageCategory: this.state.nfilterStorageCategory,\n          addId\n        });\n      } else {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSTORAGECATEGORY\"\n        }));\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      keyIndentify: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.pointedItem) {\n      let scrollDoc = document.getElementById('selected-tree-point');\n\n      if (scrollDoc) {\n        scrollDoc.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n\n    if (this.props.Login.treeData !== previousProps.Login.treeData) {\n      this.setState({\n        treeData: this.props.Login.treeData\n      });\n    }\n\n    if (this.props.Login.treeDataView !== previousProps.Login.treeDataView) {\n      this.setState({\n        treeDataView: this.props.Login.treeDataView\n      });\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        if (this.searchRef.current) {\n          this.searchRef.current.value = \"\";\n        }\n\n        this.handleSearch();\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data,\n          searchedTreeData: undefined,\n          showSearch: false\n        });\n      } else {\n        if (this.searchRef.current) {\n          this.searchRef.current.value = \"\";\n        }\n\n        this.handleSearch();\n        this.setState({\n          treeDataView: undefined,\n          searchedTreeData: undefined,\n          showSearch: false\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n      filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n      if (filterStorageCategory && filterStorageCategory.length > 0) {\n        const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory); //filterStorageCategory[0];\n\n        nfilterStorageCategory = filterCategory[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        selectedRecord,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  getClueClassName(event) {\n    const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\n    const {\n      itemHierarchicalIndex: itemIndex\n    } = eventAnalyzer.destinationMeta;\n\n    if (eventAnalyzer.isDropAllowed) {\n      switch (eventAnalyzer.getDropOperation()) {\n        case 'child':\n          return 'k-i-plus';\n\n        case 'before':\n          return itemIndex === '0' || itemIndex.endsWith(`${this.SEPARATOR}0`) ? 'k-i-insert-up' : 'k-i-insert-middle';\n\n        case 'after':\n          const siblings = this.getSiblings(itemIndex, this.state.tree);\n          const lastIndex = Number(itemIndex.split(this.SEPARATOR).pop());\n          return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\n\n        default:\n          break;\n      }\n    }\n\n    return 'k-i-cancel';\n  }\n\n  // generateUUID(innerObj) {\n  //     // let parentIDNew=uuid()\n  //     // let innerObjNew={...innerObj,\n  //     //                 'id':parentIDNew } \n  //     // if (innerObjNew.items && innerObjNew.items.length > 0) {\n  //     //     innerObjNew.items.map((childObj) => { \n  //     //         childObj={...childObj,\n  //     //         'parentID':parentIDNew}\n  //     //         this.generateUUID(childObj)\n  //     //     })\n  //     // }\n  //     let parentIDNew=uuid()\n  //     let innerObjNew={...innerObj,\n  //            'id':parentIDNew } \n  //  if (innerObjNew.items && innerObjNew.items.length > 0) {\n  //        innerObjNew.items.map((childObj) => { \n  //                 childObj={...childObj,\n  //                 'parentID':parentIDNew}\n  //                 return  this.generateUUID(childObj)\n  //             })\n  // } \n  //     return innerObjNew\n  // }\n  generateUUID(innerObj) {\n    let parentIDNew = uuid();\n    let innerObjNew = { ...innerObj,\n      'id': parentIDNew\n    }; //  innerObj['id']=parentIDNew  \n\n    if (innerObj.items && innerObj.items.length > 0) {\n      for (let Obj of innerObj.items) {\n        let childObj = Obj;\n        childObj = { ...childObj,\n          'parentID': parentIDNew\n        }; //childObj['parentID']=parentIDNew\n\n        this.generateUUID(childObj);\n      }\n    }\n\n    return innerObj;\n  }\n\n  searchClickedItemParent(treeData, clickedItem) {\n    let ParentItem = { ...treeData\n    };\n\n    if (ParentItem.items && ParentItem.items.length > 0) {\n      let childArray = ParentItem.items;\n\n      if (childArray.length > 0) {\n        for (var i = 0; i < childArray.length; i++) {\n          let childData = childArray[i];\n\n          if (clickedItem ? clickedItem.id === childData.id : childData.editable === true) {\n            return treeData;\n          } else {\n            if (childData.items) {\n              ParentItem = this.searchClickedItemParent(childData, clickedItem);\n\n              if (ParentItem) {\n                return ParentItem;\n              }\n            }\n          }\n        }\n      }\n    } //    return ParentItem;\n\n  }\n\n  shrinkNodes(ParentItem) {\n    //  ParentItem.expanded=false;\n    if (ParentItem.items && ParentItem.items.length > 0) {\n      let childArray = ParentItem.items;\n\n      if (childArray.length > 0) {\n        for (var i = 0; i < childArray.length; i++) {\n          let childData = childArray[i];\n          childData.expanded = false;\n\n          if (childData.items) {\n            this.shrinkNodes(childData);\n          }\n        }\n      }\n    }\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n  openPropertyModal(clickedItem, editId) {\n    let selectedRecord = this.state.selectedRecord || {};\n    selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false : clickedItem.item.locationlastnode;\n    selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false : clickedItem.item.containerfirstnode;\n    selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false : clickedItem.item.containerlastnode;\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        selectedRecord,\n        loadTreeProperties: true,\n        clickedItem,\n        loading: false\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  //generate Path for edited item \n  generatePathForEditedItem(ParentItem, indices) {\n    if (ParentItem.items && ParentItem.items.length > 0) {\n      let childArray = ParentItem.items;\n\n      if (childArray.length > 0) {\n        for (var i = 0; i < childArray.length; i++) {\n          let childData = childArray[i];\n          let result = this.state.treeData;\n          indices.push(i);\n          let itemText = \"\";\n\n          for (let i = 0; i < indices.length; i++) {\n            if (i === 0) {\n              result = result[0];\n            } else {\n              result = result.items[indices[i]];\n            }\n\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n          }\n\n          childData.itemhierarchy = itemText;\n\n          if (childData.items) {\n            this.generatePathForEditedItem(childData, indices);\n          }\n\n          indices.pop();\n        }\n      }\n    } else {\n      let result = this.state.treeData;\n      let itemText = \"\";\n\n      for (let i = 0; i < indices.length; i++) {\n        if (i === 0) {\n          result = result[0];\n        } else {\n          result = result.items[indices[i]];\n        }\n\n        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n      }\n\n      ParentItem.itemhierarchy = itemText;\n    }\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.props.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nquantity: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow, containerStructureOptions[0].item.ncolumn) : 1,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\n        //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const infoFields = [{\n      \"dataField\": \"sproductname\",\n      \"idsName\": \"IDS_PRODUCT\"\n    }, {\n      \"dataField\": \"sprojecttypename\",\n      \"idsName\": \"IDS_PROJECT\"\n    }, {\n      \"dataField\": \"scontainerstructurename\",\n      \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\"\n    }, {\n      \"dataField\": \"scontainertype\",\n      \"idsName\": \"IDS_CONTAINERTYPE\"\n    }, {\n      \"dataField\": \"sdirection\",\n      \"idsName\": \"IDS_DIRECTION\"\n    }, {\n      \"dataField\": \"nrow\",\n      \"idsName\": \"IDS_ROWS\"\n    }, {\n      \"dataField\": \"ncolumn\",\n      \"idsName\": \"IDS_COLUMNS\"\n    }, {\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\"\n    }, {\n      \"dataField\": \"sstoragecategoryname\",\n      \"idsName\": \"IDS_STORAGECATEGORY\"\n    }];\n    const mandatoryFields = this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false ? [{\n      \"idsName\": \"IDS_STORAGECATEGORY\",\n      \"dataField\": \"nstoragecategorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    // {\n    //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n    //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\n    //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\n    // }\n    ] : [{\n      \"idsName\": \"IDS_STORAGECATEGORY\",\n      \"dataField\": \"nstoragecategorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    // {\n    //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n    //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\n    //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\n    // },  \n    {\n      \"idsName\": \"IDS_CONTAINERTYPE\",\n      \"dataField\": \"ncontainertypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n      \"dataField\": \"ncontainerstructurecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_DIRECTION\",\n      \"dataField\": \"ndirectionmastercode\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2011,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2013,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2015,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2016,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2019,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || [],\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageLocation && [this.props.Login.masterData.selectedSampleStorageLocation],\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageLocation(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"ssamplestoragelocationname\",\n      selectedListName: \"selectedSampleStorageLocation\",\n      objectName: \"LocationMaster\",\n      listName: \"IDS_SAMPLESTORAGELOCATION\",\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      needFilter: true,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2055,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.openStorageLocation(addId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2056,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2061,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData() // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2063,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2067,\n          columnNumber: 49\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2074,\n            columnNumber: 49\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2021,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2085,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2089,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2090,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2091,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageVersion || [],\n      needMultiSelect: false,\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageVersion && [this.props.Login.masterData.selectedSampleStorageVersion],\n      primaryKeyField: \"nsamplestorageversioncode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"nversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"selectedSampleStorageVersion\",\n      objectName: \"Version\",\n      listName: \"IDS_SAMPLESTORAGEVersion\",\n      hideSearch: true,\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '' // actionIcons={\n      //     [\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\n      //             controlname: \"faPencilAlt\",\n      //             objectName: \"detailtoedit\",\n      //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      //         },\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n      //             controlname: \"faTrashAlt\",\n      //             objectName: \"mastertodelete\",\n      //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      //             onClick: () => this.confirmDelete(deleteId)\n      //         }\n      //     ]\n      // }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2093,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2144,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content grid-master \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2146,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2148,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2149,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2150,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2151,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2152,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2153,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"action-icons-wrap mr-2 pl-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2154,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined  outline-secondary btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2157,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DRAFT\",\n      defaultMessage: \"Draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2158,\n        columnNumber: 89\n      }\n    })) : this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-danger btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2163,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RETIRED\",\n      defaultMessage: \"Retired\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2164,\n        columnNumber: 93\n      }\n    })) : /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-success btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2167,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVED\",\n      defaultMessage: \"Approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2168,\n        columnNumber: 93\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2173,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle 1 outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: e => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2175,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2181,\n        columnNumber: 85\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, \"    \", /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      onClick: e => this.copySampleStorageversion(copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2185,\n        columnNumber: 87\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2191,\n        columnNumber: 85\n      }\n    }))), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }),\n      onClick: e => this.viewAdditionalInfo(copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2207,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2211,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2213,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2219,\n        columnNumber: 81\n      }\n    })), this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.onApproveSampleStorageLocation(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2222,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2228,\n        columnNumber: 85\n      }\n    })) : \"\")))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2236,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2237,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2239,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(SearchIcon, {\n      className: \"search-icon\",\n      onClick: this.toggleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2240,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2241,\n        columnNumber: 77\n      }\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      ref: this.searchRef,\n      autoComplete: \"off\",\n      className: \"k-textbox\",\n      onChange: this.handleSearch,\n      placeholder: `${this.props.intl.formatMessage({\n        id: \"IDS_FILTER\"\n      })}`,\n      name: \"search\",\n      onKeyUp: e => this.handlenavigation(e, 'down'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2243,\n        columnNumber: 73\n      }\n    }), !this.props.showSearch ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"search-up-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2250,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronUp,\n      onClick: e => this.handlenavigation(e, 'up'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2251,\n        columnNumber: 85\n      }\n    }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronDown,\n      onClick: e => this.handlenavigation(e, 'down'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2252,\n        columnNumber: 85\n      }\n    }))) : \"\", this.props.showSearch ? /*#__PURE__*/React.createElement(SearchIcon, {\n      className: \"close-right-icon\",\n      onClick: this.toggleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2268,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTimes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2269,\n        columnNumber: 81\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2273,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.searchedTreeData || this.state.treeDataView,\n      expandIcons: true,\n      selectField: 'active-node',\n      item: this.itemRenderView,\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2274,\n        columnNumber: 73\n      }\n    }))))) : \"\"))))))))), /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.loadTreeProperties,\n      modalTitle: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGELOCATION\"\n      }),\n      closeModal: this.closeModalShow,\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      modalBody: /*#__PURE__*/React.createElement(AddTreeProperties, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2314,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2307,\n        columnNumber: 18\n      }\n    }), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      hideSave: this.props.Login.isView,\n      operation: this.props.Login.isView ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.isView ? this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }) : this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGELOCATION\"\n      }),\n      onSaveClick: this.onSaveClick,\n      h: true,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.loadTreeProperties === true ? [] : mandatoryFields,\n      addComponent: this.props.Login.isView ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2342,\n          columnNumber: 37\n        }\n      }, infoFields.map((item, index) => {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2347,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2348,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2349,\n            columnNumber: 65\n          }\n        }, this.props.intl.formatMessage({\n          id: item.idsName\n        })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2350,\n            columnNumber: 65\n          }\n        }, this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] ? this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] : '-'))));\n      }))) : this.props.Login.screenName === 'IDS_IMPORT' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2371,\n          columnNumber: 41\n        }\n      })) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2375,\n          columnNumber: 41\n        }\n      }) : // this.props.Login.loadTreeProperties ? (\n      //     <AddTreeProperties\n      //         onInputChange={(e) => this.onInputChange(e)}\n      //         selectedRecord={this.state.selectedRecord || {}}\n      //     />\n      // ) \n      // :\n      this.state.treeData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2391,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(AddTreeview, {\n        clearSearchedState: this.clearSearchedState,\n        toggleSearch: this.toggleSearch,\n        handleSearch: this.handleSearch,\n        handlenavigation: this.handlenavigation,\n        showSearch: this.state.showSearch,\n        treeData: //this.state.searchedTreeData||\n        this.state.treeData,\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        onItemDragOver: this.onItemDragOver,\n        onItemDragEnd: this.onItemDragEnd,\n        onNumericInputChange: this.onNumericInputChange,\n        storageCategoryList: this.props.Login.storageCategoryList || [],\n        projectTypeMapList: this.props.Login.projectTypeMapList || [],\n        sampleTypeList: this.props.Login.sampleTypeList || [],\n        isOnlyDraft: this.props.Login.isOnlyDraft,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2394,\n          columnNumber: 53\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2323,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData,\n  changeStorageCategoryFilter,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  fetchStorageCategory,\n  copySampleStorageVersion,\n  crudSampleStorageLocation\n})(injectIntl(SampleStorageLocation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageLocation.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faFileImport","faEye","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SearchIcon","ScrollBar","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","DEFAULT_RETURN","ListWrapper","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMasterJsonView","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","faChevronDown","faChevronUp","faExclamationCircle","Grid","Axios","rsapi","SampleStorageLocation","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","onChange","event","setState","panes","newState","getSiblings","itemIndex","data","result","indices","split","map","index","Number","i","length","items","onItemDragOver","dragClue","show","pageY","pageX","item","text","getClueClassName","onItemDragEnd","hide","eventAnalyzer","init","isDropAllowed","updatedTree","itemHierarchicalIndex","state","treeData","getDropOperation","destinationMeta","tree","addChildNode","e","clickedItem","ParentItem","searchClickedItemParent","expanded","newData","id","push","intl","formatMessage","editable","locationlastnode","containerfirstnode","containerlastnode","itemhierarchy","cloneNode","parentItem","parentID","clonedParentID","parentFound","cloneItems","clonedparentFound","newData1","clonedNewParentID","levelBasedParents","cloneditem","warn","count","equalNode","deleteNode","root","editRecord","toggleAction","openModal","updateInfo","typeName","selectedRecord","loadTreeProperties","operation","closeModalShow","closeModal","loadEsign","Login","selectedId","isView","onInputChange","target","type","checked","name","value","itemRender","stopPropagation","handleChange","handleBlur","setProperties","isRoot","onItemClick","searchedData","searchedTreeData","itemText","clearSelected","toggleSearch","showSearch","clearSearchedState","navigationCounter","counter","handleSearch","search","term","reduce","acc","contains","newItems","handlenavigation","direction","key","document","querySelector","navigateSearchedTree","treeDataView","JSON","parse","stringify","selected","includes","some","toLowerCase","indexOf","onExpandChange","shrinkNodes","forceUpdate","itemRenderView","toggleActionView","onItemClickView","onExpandChangeView","editId","controlMap","has","get","ncontrolcode","generatePathForEditedItem","onSaveClick","saveType","formRef","onSaveProperties","onSaveSampleStorageLocation","inputData","jsondata","postParam","info","loading","countLevels","userInfo","ncontainertypecode","ndirectionmastercode","nneedposition","ncontainerstructurecode","nquantity","parseInt","nrow","ncolumn","inputParam","classUrl","methodUrl","displayName","masterData","userRoleControlRights","nformcode","screenData","selectedSampleStorageLocation","selectedSampleStorageVersion","deleteSampleStorageLocation","ncontrolCode","searchRef","current","screenName","confirmDelete","confirmMessage","confirm","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleDetailPageChange","calculateRowColumn","column","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","getSampleStorageLocation","userinfo","nstoragecategorycode","getContainerStructure","selectedRecordFilter","nsamplestoragelocationcode","openFilter","showFilter","closeFilter","onFilterSubmit","filterStorageCategory","onApproveSampleStorageLocation","locationEnd","storageStart","storageEnd","containers","containerpath","itemHierarchy","scontainercode","viewAdditionalInfo","importdata","copySampleStorageversion","reloadData","onNumericInputChange","field","isNaN","onEditSampleStorageLocation","isOnlyDraft","sampleStorageVersion","openStorageLocation","addId","Object","keys","warning","onInputOnChange","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","title","children","keyIndentify","size","scrollable","Map","detailSkip","detailTake","settings","selectedItem","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","scrollDoc","getElementById","scrollIntoView","behavior","isComponentUpdated","filterData","values","nStorageCategory","filterStorageCategoryMap","filterCategory","filter","generateBreadCrumData","endsWith","siblings","lastIndex","pop","generateUUID","innerObj","parentIDNew","innerObjNew","Obj","childObj","childArray","childData","inputParamData","urlArray","url1","post","all","then","response","storageLocationOptions","sampleStorageVersionOptions","sampleStorageLocationList","sampleStorageLocation","sampleStorageVersionList","nsamplestorageversioncode","catch","status","message","containerStructureOptions","containerStructureList","containerStructure","componentDidMount","parentHeight","height","clientHeight","firstPane","breadCrumbData","selectedStorageCategoryName","render","deleteId","copyId","approveId","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","searchFieldList","infoFields","mandatoryFields","paddingRight","ssamplestoragelocationname","napprovalstatus","DRAFT","RETIRED","idsName","dataField","storageCategoryList","projectTypeMapList","sampleTypeList","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faFileImport, faEye } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\n\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport { //faBell, \r\n    faChevronDown, faChevronUp, faExclamationCircle\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { Grid } from '@progress/kendo-react-grid';\r\nimport Axios from 'axios';\r\nimport rsapi from '../../rsapi';\r\n//import { Upload } from '@progress/kendo-react-upload';\r\n\r\n\r\n\r\nclass SampleStorageLocation extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            keyIndentify: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    onChange = (event) => {\r\n        this.setState({ panes: event.newState })\r\n    };\r\n    componentDidUpdate(previousProps) {\r\n        if (this.pointedItem) {\r\n            let scrollDoc = document.getElementById('selected-tree-point');\r\n            if (scrollDoc) {\r\n                scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n            }\r\n        }\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n        if (this.props.Login.treeData !== previousProps.Login.treeData) {\r\n            this.setState({\r\n                treeData: this.props.Login.treeData\r\n            });\r\n        }\r\n        if (this.props.Login.treeDataView !== previousProps.Login.treeDataView) {\r\n            this.setState({\r\n                treeDataView: this.props.Login.treeDataView\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                if (this.searchRef.current) {\r\n                    this.searchRef.current.value = \"\";\r\n                }\r\n                this.handleSearch();\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data,\r\n                    searchedTreeData: undefined,\r\n                    showSearch: false\r\n                });\r\n            } else {\r\n                if (this.searchRef.current) {\r\n                    this.searchRef.current.value = \"\";\r\n                }\r\n                this.handleSearch();\r\n                this.setState({\r\n                    treeDataView: undefined,\r\n                    searchedTreeData: undefined,\r\n                    showSearch: false\r\n                });\r\n            }\r\n        }\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n            filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n            if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n\r\n                const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory);//filterStorageCategory[0];\r\n                nfilterStorageCategory = filterCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, selectedRecord, filterStorageCategory });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n    getSiblings = (itemIndex, data) => {\r\n        let result = data;\r\n        const indices = itemIndex.split(this.SEPARATOR).map(index => Number(index));\r\n        for (let i = 0; i < indices.length - 1; i++) {\r\n            result = result[indices[i]].items || [];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    getClueClassName(event) {\r\n        const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\r\n        const {\r\n            itemHierarchicalIndex: itemIndex\r\n        } = eventAnalyzer.destinationMeta;\r\n        if (eventAnalyzer.isDropAllowed) {\r\n            switch (eventAnalyzer.getDropOperation()) {\r\n                case 'child':\r\n                    return 'k-i-plus';\r\n                case 'before':\r\n                    return itemIndex === '0' || itemIndex.endsWith(`${this.SEPARATOR}0`) ? 'k-i-insert-up' : 'k-i-insert-middle';\r\n                case 'after':\r\n                    const siblings = this.getSiblings(itemIndex, this.state.tree);\r\n                    const lastIndex = Number(itemIndex.split(this.SEPARATOR).pop());\r\n                    return lastIndex < siblings.length - 1 ? 'k-i-insert-middle' : 'k-i-insert-down';\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return 'k-i-cancel';\r\n    }\r\n    onItemDragOver = event => {\r\n        this.dragOverCnt++;\r\n        this.dragClue.show(event.pageY + 10, event.pageX, event.item.text, this.getClueClassName(event));\r\n    };\r\n    onItemDragEnd = event => {\r\n        this.isDragDrop = this.dragOverCnt > 0;\r\n        this.dragOverCnt = 0;\r\n        this.dragClue.hide();\r\n        const eventAnalyzer = new TreeViewDragAnalyzer(event).init();\r\n        if (eventAnalyzer.isDropAllowed) {\r\n            const updatedTree = moveTreeViewItem(event.itemHierarchicalIndex, this.state.treeData, eventAnalyzer.getDropOperation() || 'child', eventAnalyzer.destinationMeta.itemHierarchicalIndex);\r\n            this.setState({\r\n                tree: updatedTree\r\n            });\r\n        }\r\n    };\r\n    addChildNode = (e, clickedItem) => {\r\n\r\n        let ParentItem = this.searchClickedItemParent(this.state.treeData[0])\r\n        if (ParentItem) {\r\n            ParentItem.items.map(item => {\r\n                item.expanded = false;\r\n            });\r\n        }\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.items = item.items || [];\r\n                item.expanded = true\r\n                item.items.push({\r\n                    id: uuid(),\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                    expanded: true,\r\n                    editable: false,\r\n                    locationlastnode: false,\r\n                    containerfirstnode: false,\r\n                    containerlastnode: false,\r\n                    itemhierarchy: \"\"\r\n                });\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    // generateUUID(innerObj) {\r\n\r\n    //     // let parentIDNew=uuid()\r\n    //     // let innerObjNew={...innerObj,\r\n    //     //                 'id':parentIDNew } \r\n    //     // if (innerObjNew.items && innerObjNew.items.length > 0) {\r\n    //     //     innerObjNew.items.map((childObj) => { \r\n    //     //         childObj={...childObj,\r\n    //     //         'parentID':parentIDNew}\r\n    //     //         this.generateUUID(childObj)\r\n    //     //     })\r\n    //     // }\r\n    //     let parentIDNew=uuid()\r\n    //     let innerObjNew={...innerObj,\r\n    //            'id':parentIDNew } \r\n    //  if (innerObjNew.items && innerObjNew.items.length > 0) {\r\n    //        innerObjNew.items.map((childObj) => { \r\n    //                 childObj={...childObj,\r\n    //                 'parentID':parentIDNew}\r\n    //                 return  this.generateUUID(childObj)\r\n    //             })\r\n    // } \r\n    //     return innerObjNew\r\n    // }\r\n\r\n    generateUUID(innerObj) {\r\n        let parentIDNew = uuid()\r\n        let innerObjNew = {\r\n            ...innerObj,\r\n            'id': parentIDNew\r\n        }\r\n\r\n        //  innerObj['id']=parentIDNew  \r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            for (let Obj of innerObj.items) {\r\n                let childObj = Obj;\r\n                childObj = {\r\n                    ...childObj,\r\n                    'parentID': parentIDNew\r\n                }\r\n                //childObj['parentID']=parentIDNew\r\n\r\n                this.generateUUID(childObj);\r\n            }\r\n        }\r\n        return innerObj;\r\n    }\r\n\r\n    searchClickedItemParent(treeData, clickedItem) {\r\n        let ParentItem = { ...treeData };\r\n        if (ParentItem.items && ParentItem.items.length > 0) {\r\n            let childArray = ParentItem.items;\r\n            if (childArray.length > 0) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    if (clickedItem ? (clickedItem.id === childData.id) : (childData.editable === true)) {\r\n                        return treeData;\r\n                    } else {\r\n                        if (childData.items) {\r\n                            ParentItem = this.searchClickedItemParent(childData, clickedItem)\r\n                            if (ParentItem) {\r\n                                return ParentItem;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //    return ParentItem;\r\n    }\r\n    cloneNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentID = '';\r\n        let clonedParentID = '';\r\n        let parentFound = false;\r\n        let cloneItems = {};\r\n        let clonedparentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        let newData1 = [...this.state.treeData];\r\n        mapTree(this.state.treeData\r\n            , \"items\", (item) => {\r\n                // if (item.items) {\r\n                //     if (parentFound&&(item.id===parentID)) {\r\n                //         parentItem = item;\r\n                //         parentFound = false;\r\n                //     }\r\n                // }\r\n\r\n                if (item.id === clickedItem.id) {\r\n                    parentFound = true;\r\n                    parentID = clickedItem.parentID\r\n                    parentItem = this.searchClickedItemParent(this.state.treeData[0])\r\n                }\r\n                if (item.editable === true) {\r\n                    clonedParentID = uuid();\r\n                    let clonedNewParentID = uuid();\r\n                    //     //  let clonedObject=//{...item}\r\n                    //     //   Object.assign({}, item);\r\n                    //       const clonedObject = JSON.parse(JSON.stringify(item1));\r\n                    //      cloneItems =//[{...clonedObject}].map((data) => {\r\n                    //       // return \r\n                    //        this.generateUUID(clonedObject)\r\n                    //    // })\r\n                    let levelBasedParents = {}\r\n                    cloneItems = mapTree([{ ...item }], \"items\", (cloneditem) => {\r\n                        // const indices = cloneditem.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                        // let x=getItemPath(this.state.treeData,indices,\"items\")\r\n                        // console.log('------------->',cloneditem)\r\n                        // if(cloneditem.items===undefined&&clonedparentFound){\r\n                        //     clonedParentID=uuid();\r\n                        //     clonedparentFound=false;\r\n                        // }\r\n                        // else{\r\n                        //     clonedNewParentID=uuid();\r\n                        // }\r\n                        // if(!levelBasedParents.hasOwnProperty(cloneditem.itemHierarchicalIndex)){\r\n                        //     let level=cloneditem.itemHierarchicalIndex;\r\n                        //     levelBasedParents={...levelBasedParents,\r\n                        //                         [level]:uuid()\r\n                        //                     }\r\n                        // }\r\n                        // if(cloneditem.items){\r\n                        //      //if ClonedItem is a Parent\r\n\r\n                        //     cloneditem={\r\n                        //         ...cloneditem,\r\n                        //         'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedNewParentID\r\n                        //         ,\r\n                        //         'id':clonedParentID,\r\n                        //         'editable': false \r\n                        //     } \r\n                        //     clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\r\n                        //     //  clonedParentID=uuid()//clonedNewParentID;\r\n                        //     // clonedparentFound=true;\r\n                        // }else{\r\n                        //if ClonedItem is a Child\r\n                        cloneditem = {\r\n                            ...cloneditem,\r\n                            //'parentID':levelBasedParents[cloneditem.itemHierarchicalIndex]//clonedParentID\r\n                            // ,\r\n                            'id': uuid(),\r\n                            'editable': false,\r\n                            'expanded': false\r\n                            //   }\r\n                            //  clonedParentID=levelBasedParents[cloneditem.itemHierarchicalIndex];\r\n                        }\r\n                        return cloneditem;\r\n                    });\r\n                }\r\n\r\n                // item={\r\n                //    ...item,\r\n                //     'id':uuid(),\r\n                //   'editable': false \r\n                //     } \r\n                return item;\r\n            });\r\n        if (parentItem === undefined) {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ROOTNODECANNOTBEDELETED\" }))\r\n        }\r\n        let count = 1;\r\n        newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n\r\n            if (item.id === parentItem.id) {\r\n                count++;\r\n                item.items.push(\r\n                    // {\r\n                    // ...cloneItem,\r\n                    // 'id':uuid(),\r\n                    // 'editable': false,\r\n                    // 'text': cloneItem['text']+'('+count+')'\r\n                    // } \r\n                    {\r\n                        ...cloneItems[0]\r\n                        ,\r\n                        'parentID': parentID,\r\n                        // 'id':clonedParentID\r\n                    }\r\n                );\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    }\r\n    equalNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.items) {\r\n                if (parentFound) {\r\n                    parentItem = item;\r\n                    parentFound = false;\r\n                }\r\n            }\r\n\r\n            if (item.id === clickedItem.id) {\r\n                parentFound = true;\r\n            }\r\n\r\n            return item;\r\n        });\r\n        if (parentItem.text === undefined) {\r\n            newData.push({\r\n                id: uuid(),\r\n                text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                expanded: true,\r\n                editable: false,\r\n                locationlastnode: false,\r\n                containerfirstnode: false,\r\n                containerlastnode: false,\r\n                itemhierarchy: \"\"\r\n            });\r\n            this.setState({ treeData: newData });\r\n        } else {\r\n            newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                if (item.id === parentItem.id) {\r\n                    item.items.push({\r\n                        id: uuid(),\r\n                        text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                        expanded: true,\r\n                        editable: false,\r\n                        locationlastnode: false,\r\n                        containerfirstnode: false,\r\n                        containerlastnode: false,\r\n                        itemhierarchy: \"\"\r\n                    });\r\n                }\r\n                return item;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    deleteNode = (clickedItem) => {\r\n        if (clickedItem.root && clickedItem.root === true) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PARENTNODENOTALLOWTODELETE\" }));\r\n        } else {\r\n            const newData = removeItems(this.state.treeData, \"items\", (item) => {\r\n                return item.id === clickedItem.id;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    editRecord = (e, clickedItem) => {\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModalShow = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { loadTreeProperties: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId, isView: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            if (event.target.checked && event.target.name === 'nneedposition') {\r\n                selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\r\n                selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\r\n                selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\r\n                selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode'];\r\n\r\n                //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    itemRender = (props) => {\r\n        if (this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {props.item.editable ? (\r\n                        <Form.Group className=\"k-editable-text-wrap\">\r\n                            <Form.Control\r\n                                id={\"nodename\"}\r\n                                name={\"nodename\"}\r\n                                type=\"text\"\r\n                                onKeyDown={(e) => e.stopPropagation()}\r\n                                value={props.item.text}\r\n                                autoFocus\r\n                                autoComplete=\"off\"\r\n                                onChange={(e) => this.handleChange(e, props.item)}\r\n                                onBlur={(e) => this.handleBlur(e, props.item, props.itemHierarchicalIndex)}\r\n                                maxLength=\"50\"\r\n                            />\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <span>{props.item.text}</span>\r\n                    )}\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    {props.item ? (\r\n                        <>\r\n                            <span className='d-flex align-items-center'>\r\n                                <span className={`normal-node text-truncate\r\n                            ${props.item.editable ? \"active-node\" : \"\"}\r\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                            `} data-tip={props.item.text}>\r\n                                    {props.item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                        props.item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                            props.item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                                props.item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                    {props.item.text}\r\n                                </span>\r\n                                {props.item.editable ? (\r\n                                    <>\r\n                                        <span\r\n                                            className=\"action-icon tree-toggle m-l-half\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_PROPERTIES\" })}\r\n                                            onClick={(e) => this.setProperties(e, props)}\r\n                                        ></span>\r\n                                        <span\r\n                                            className=\"action-icon tree-level1\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CLONENODE\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.cloneNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                        {/* \r\n                                <Button   className=\"action-icon tree-level1\" role=\"button\"\r\n                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_CLONENODE\" })}\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    this.cloneNode(e, props.item);\r\n                                                }}>\r\n                                                <FontAwesomeIcon icon={faClone}\r\n                                                 title={this.props.intl.formatMessage({ id: \"IDS_CLONENODE\" })} />\r\n                                            </Button> */}\r\n                                        {/* <span\r\n                                        className=\"action-icon tree-level1\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EQUALNODE\" })}\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            this.equalNode(e, props.item);\r\n                                        }}\r\n                                    ></span> */}\r\n                                        <span\r\n                                            className=\"action-icon tree-level2\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CHILDNODE\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.addChildNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                        <span\r\n                                            className=\"k-icon k-i-edit k-i-pencil ml-2\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.editRecord(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                        {!props.item.isRoot ? (\r\n                                            <span\r\n                                                className=\"k-icon k-i-delete ml-2\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    this.deleteNode(props.item);\r\n                                                }}\r\n                                            ></span>\r\n                                        ) : null}\r\n                                    </>\r\n                                ) : null}\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        // if (selectedItem) {\r\n        //     selectedItem.editable = false;\r\n        //   }\r\n        //   event.item.editable = true;\r\n        //   selectedItem = event.item; \r\n\r\n\r\n        // let searchedData =undefined;\r\n        // if(this.state.searchedTreeData){\r\n        //      searchedData = mapTree(this.state.searchedTreeData, \"items\", (item1) => {\r\n        //         if (item1.editable === true) {\r\n        //             item1.editable = false;\r\n        //         } else if (item1.id === event.item.id) {\r\n        //             item1.editable = true;\r\n        //         }\r\n        //         return item1;\r\n        //     });\r\n        // } \r\n\r\n        // let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n        //     if (item.editable === true) {\r\n        //         item.editable = false;\r\n        //     } else if (item.id === event.item.id) {\r\n        //         item.editable = true;\r\n        //     }\r\n        //     return item;\r\n        // });\r\n        // this.setState({ treeData: newData,searchedTreeData: searchedData  }); \r\n        let searchedData = undefined;\r\n        if (this.state.searchedTreeData) {\r\n            searchedData = mapTree(this.state.searchedTreeData, \"items\", (item) => {\r\n                if (item.editable === true) {\r\n                    item.editable = false;\r\n                } else if (item.id === event.item.id) {\r\n                    item.editable = true;\r\n                    if (this.pointedItem) {\r\n                        if (this.pointedItem.id === item.id) {\r\n                            this.pointedItem = undefined\r\n                        }\r\n                    }\r\n                    let result = this.state.searchedTreeData;\r\n                    const indices =\r\n                        event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                    let itemText = \"\";\r\n\r\n                    for (let i = 0; i < indices.length; i++) {\r\n                        if (i === 0) {\r\n                            result = result[0];\r\n                        } else {\r\n                            result = result.items[indices[i]];\r\n                        }\r\n                        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                    }\r\n                    item.itemhierarchy = itemText;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            searchedData.map((data) => {\r\n                this.clearSelected(data, event.item)\r\n            })\r\n        }\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n\r\n                let result = this.state.treeData;\r\n                const indices =\r\n                    event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                let itemText = \"\";\r\n\r\n                for (let i = 0; i < indices.length; i++) {\r\n                    if (i === 0) {\r\n                        result = result[0];\r\n                    } else {\r\n                        result = result.items[indices[i]];\r\n                    }\r\n                    itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                }\r\n                item.itemhierarchy = itemText;\r\n            }\r\n            return item;\r\n        });\r\n        newData.map((data) => {\r\n            this.clearSelected(data, event.item)\r\n        })\r\n\r\n\r\n        this.setState({ treeData: newData, searchedTreeData: searchedData });\r\n    };\r\n\r\n\r\n    shrinkNodes(ParentItem) {\r\n        //  ParentItem.expanded=false;\r\n        if (ParentItem.items && ParentItem.items.length > 0) {\r\n            let childArray = ParentItem.items;\r\n            if (childArray.length > 0) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i]\r\n                    childData.expanded = false;\r\n                    if (childData.items) {\r\n                        this.shrinkNodes(childData)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleSearch = () => {\r\n        this.setState({\r\n            showSearch: !this.state.showSearch\r\n        })\r\n    }\r\n\r\n\r\n    clearSearchedState = () => {\r\n        this.setState({\r\n            searchedTreeData: undefined,\r\n            showSearch: false\r\n        })\r\n    }\r\n\r\n    navigationCounter = () => {\r\n        let counter = this.state.counter || 0;\r\n\r\n        return counter;\r\n    }\r\n    // handleSearch = () => { \r\n    //     let value = document.querySelector('.k-textbox').value\r\n    //     this.uniqueIDArr=[]\r\n    //     this.countforTree=0;\r\n    //     let newData = this.search(this.state.treeDataView, value) \r\n    //     //Always root node should be expanded\r\n    //     newData[0].expanded=true;  \r\n    //     if(value===\"\"){\r\n    //         this.pointedItem=undefined\r\n    //         this.setState({ searchedTreeData: undefined })\r\n    //     }else{\r\n    //         this.setState({ searchedTreeData: JSON.parse(JSON.stringify(newData)) })\r\n    //     }\r\n    //   }\r\n    handleSearch = () => {\r\n        this.uniqueIDArr = []\r\n        this.pointedItem = undefined\r\n        this.countforTree = 0;\r\n        //this.setState({searchedTreeData: undefined})\r\n    }\r\n    search = (items, term) => {\r\n        return items.reduce((acc, item) => {\r\n            if (this.contains(item.text, term)) {\r\n                this.uniqueIDArr.push(item.id);\r\n                acc.push(item);\r\n            } else if (item.items && item.items.length > 0) {\r\n                let newItems = this.search(item.items, term);\r\n                if (newItems && newItems.length > 0) {\r\n                    acc.push({\r\n                        ...item, text: item.text, items: newItems, expanded: acc.length === 0 ?\r\n                            true : false//item.expanded\r\n\r\n                    });\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    handlenavigation = (e, direction) => {\r\n        if (e.key === 'Enter' || e.type === 'click') {\r\n            let value = document.querySelector('.k-textbox').value\r\n            if (value !== \"\") {\r\n\r\n                if (direction === 'up') {\r\n                    //Navigate up\r\n                    this.countforTree--;\r\n                    if (this.countforTree <= 0) {\r\n                        this.countforTree = 0;\r\n\r\n                    }\r\n                } else {\r\n                    //if(direction==='down'){\r\n                    //Navigate down\r\n                    this.countforTree++;\r\n                    if (this.countforTree >= this.uniqueIDArr.length) {\r\n                        if ((this.uniqueIDArr.length - 1) === -1) {\r\n                            this.countforTree = 0;\r\n                        } else {\r\n                            this.countforTree = this.uniqueIDArr.length - 1;\r\n                        }\r\n\r\n                        //toast.info(this.props.intl.formatMessage({ id: \"IDS_NOMORENODESTOSEARCH\" }))\r\n                    }\r\n                }\r\n\r\n                let newData = this.navigateSearchedTree(this.state.treeDataView, value)\r\n\r\n\r\n                this.setState({ searchedTreeData: JSON.parse(JSON.stringify(newData)) })\r\n            }\r\n            else {\r\n                this.setState({ searchedTreeData: undefined })\r\n            }\r\n        }\r\n    }\r\n    navigateSearchedTree = (items, term) => {\r\n        return items.reduce((acc, item) => {\r\n            if (item.editable) {\r\n                item.editable = false\r\n            }\r\n            if (item.selected) {\r\n                item.selected = false\r\n            }\r\n            if (this.contains(item.text, term)) {\r\n\r\n                if (!this.uniqueIDArr.includes(item.id)) {\r\n                    this.uniqueIDArr.push(item.id);\r\n                }\r\n                if (item.id === this.uniqueIDArr[this.countforTree]) {\r\n                    if (this.pointedItem) {\r\n                        this.pointedItem = undefined;\r\n                    }\r\n                    this.pointedItem = item;\r\n                }\r\n                acc.push(item);\r\n            } else if (item.items && item.items.length > 0) {\r\n                let newItems = this.navigateSearchedTree(item.items, term);\r\n                if (newItems && newItems.length > 0) {\r\n                    if (newItems.some(item => item.id === this.uniqueIDArr[this.countforTree])) {\r\n                        acc.push({ ...item, text: item.text, items: newItems, expanded: true });\r\n                    } else {\r\n                        acc.push({\r\n                            ...item, text: item.text, items: newItems, expanded:\r\n                                newItems.some(item => item.expanded === true) ? true : false\r\n                        });\r\n                    }\r\n\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    contains = (text, term) => {\r\n        return text.toLowerCase().indexOf(term.toLowerCase()) >= 0;\r\n    }\r\n    onExpandChange = (event) => {\r\n        let clickedItem = event.item\r\n        if (!event.item.expanded) {\r\n            //this.onItemClick(event)\r\n            let ParentItem = this.searchClickedItemParent(//this.state.searchedTreeData&&\r\n                //this.state.searchedTreeData[0]||\r\n                this.state.treeData[0], clickedItem)\r\n            if (ParentItem) {\r\n                ParentItem.items.map(item => {\r\n                    item.expanded = false;\r\n                });\r\n            }\r\n            this.shrinkNodes(event.item);\r\n        }\r\n        event.item.expanded = !event.item.expanded;\r\n\r\n        this.forceUpdate();\r\n    };\r\n\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        this.getitemPath = { ...this.getitemPath, [item.id]: clickedItem.itemHierarchicalIndex }\r\n\r\n\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <>\r\n\r\n                            <span className='d-flex align-items-center'>\r\n                                {this.pointedItem ? (item.id === this.pointedItem.id) && !item.selected ?\r\n                                    <>\r\n                                        <input type=\"text\" className='hidden-treeview-focus' id='selected-tree-point' />\r\n                                    </> :\r\n                                    <></> : ''\r\n                                }\r\n                                <span className={`normal-node text-truncate\r\n                                ${this.pointedItem ? (item.id === this.pointedItem.id) && !item.selected ? \"pointed-node\" : item.selected ? \"active-node\" : \"\" :\r\n                                        item.selected ? \"active-node\" : \"\"}\r\n                                ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                                `} data-tip={item.text}>\r\n                                    {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                        item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                            item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                                item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                    {item.text}\r\n                                </span>\r\n                                {/* <ul className=\"list-inline mb-0\">\r\n                                <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li> */}\r\n                                {this.pointedItem && item.id === this.pointedItem.id ?\r\n                                    <FontAwesomeIcon icon={faHandPointLeft} bounce\r\n                                    />\r\n                                    :\r\n                                    clickedItem.item.editable ?\r\n                                        (\r\n                                            <>\r\n                                                {/* <span\r\n                                        className=\"action-icon tree-toggle m-l-half\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_PROPERTIES\" })}\r\n                                        onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                    ></span>  */}\r\n                                            </>\r\n                                        )\r\n                                        : null\r\n                                }\r\n                                {/* </ul> */}\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClickView = (event) => {\r\n        // if (this.state.selectedItem) {\r\n        //     let selectedobj = this.state.selectedItem;\r\n        //         selectedobj.selected = false\r\n        //     this.setState({\r\n        //         selectedItem : selectedobj\r\n        //     })\r\n        // }\r\n        // this.setState({\r\n        //     selectedItem : event.item\r\n        // })             \r\n        let searchedData = undefined;\r\n        if (this.state.searchedTreeData) {\r\n            searchedData = mapTree(this.state.searchedTreeData, \"items\", (item) => {\r\n                if (item.editable === true) {\r\n                    item.editable = false;\r\n                } else if (item.id === event.item.id) {\r\n                    item.editable = true;\r\n                    if (this.pointedItem) {\r\n                        if (this.pointedItem.id === item.id) {\r\n                            this.pointedItem = undefined\r\n                        }\r\n                    }\r\n                    let result = this.state.searchedTreeData;\r\n                    const indices =\r\n                        event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                    let itemText = \"\";\r\n\r\n                    for (let i = 0; i < indices.length; i++) {\r\n                        if (i === 0) {\r\n                            result = result[0];\r\n                        } else {\r\n                            result = result.items[indices[i]];\r\n                        }\r\n                        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                    }\r\n                    item.itemhierarchy = itemText;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            searchedData.map((data) => {\r\n                this.clearSelected(data, event.item)\r\n            })\r\n        }\r\n        let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n\r\n                let result = this.state.treeDataView;\r\n                const indices =\r\n                    event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n                let itemText = \"\";\r\n\r\n                for (let i = 0; i < indices.length; i++) {\r\n                    if (i === 0) {\r\n                        result = result[0];\r\n                    } else {\r\n                        result = result.items[indices[i]];\r\n                    }\r\n                    itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                }\r\n                item.itemhierarchy = itemText;\r\n            }\r\n            return item;\r\n        });\r\n        newData.map((data) => {\r\n            this.clearSelected(data, event.item)\r\n        })\r\n\r\n\r\n        this.setState({ treeDataView: newData, searchedTreeData: searchedData });\r\n    };\r\n    clearSelected(innerObj, selectedItem) {\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n    onExpandChangeView = (event) => {\r\n\r\n        let clickedItem = event.item\r\n        if (!event.item.expanded) {\r\n            //this.onItemClick(event)\r\n            let ParentItem = this.searchClickedItemParent(this.state.searchedTreeData &&\r\n                this.state.searchedTreeData[0] || this.state.treeDataView[0], clickedItem)\r\n            if (ParentItem) {\r\n                ParentItem.items.map(item => {\r\n                    item.expanded = false;\r\n                });\r\n            }\r\n            this.shrinkNodes(event.item);\r\n        }\r\n\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    setProperties = (event, clickedItem) => {\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        //this.props.openPropertyModal(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, clickedItem, editId);\r\n        this.openPropertyModal(clickedItem, editId);\r\n\r\n    };\r\n\r\n    openPropertyModal(clickedItem, editId) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"locationlastnode\"] = clickedItem.item.locationlastnode === undefined ? false :\r\n            clickedItem.item.locationlastnode;\r\n        selectedRecord[\"containerfirstnode\"] = clickedItem.item.containerfirstnode === undefined ? false :\r\n            clickedItem.item.containerfirstnode;\r\n        selectedRecord[\"containerlastnode\"] = clickedItem.item.containerlastnode === undefined ? false :\r\n            clickedItem.item.containerlastnode;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord, loadTreeProperties: true,\r\n                clickedItem, loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleChange = (e, clickedItem) => {\r\n        let searchedData = undefined;\r\n        if (this.state.searchedTreeData) {\r\n            searchedData = mapTree(this.state.searchedTreeData, \"items\", (item) => {\r\n                if (item.id === clickedItem.id) {\r\n                    item.text = e.target.value;\r\n                }\r\n                return item;\r\n            });\r\n        }\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.text = e.target.value;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData, searchedTreeData: searchedData });\r\n    };\r\n    //generate Path for edited item \r\n    generatePathForEditedItem(ParentItem, indices) {\r\n        if (ParentItem.items && ParentItem.items.length > 0) {\r\n            let childArray = ParentItem.items;\r\n            if (childArray.length > 0) {\r\n                for (var i = 0; i < childArray.length; i++) {\r\n                    let childData = childArray[i];\r\n                    let result = this.state.treeData;\r\n                    indices.push(i);\r\n                    let itemText = \"\";\r\n                    for (let i = 0; i < indices.length; i++) {\r\n                        if (i === 0) {\r\n                            result = result[0];\r\n                        } else {\r\n                            result = result.items[indices[i]];\r\n                        }\r\n                        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n                    }\r\n                    childData.itemhierarchy = itemText;\r\n\r\n                    if (childData.items) {\r\n                        this.generatePathForEditedItem(childData, indices)\r\n                    }\r\n                    indices.pop();\r\n                }\r\n            }\r\n        } else {\r\n            let result = this.state.treeData;\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[0];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n            ParentItem.itemhierarchy = itemText;\r\n        }\r\n    }\r\n\r\n    handleBlur = (e, clickedItem, itemHierarchicalIndex) => {\r\n        clickedItem.editable = false;\r\n        //Added for creating path after edit \r\n        const indices = itemHierarchicalIndex.split('_').map(index => Number(index));\r\n        this.generatePathForEditedItem(clickedItem, indices);\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else {\r\n            this.onSaveSampleStorageLocation(saveType, formRef);\r\n        }\r\n    };\r\n    onSaveProperties = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        // if (this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT) {\r\n        if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n            let count = 0;\r\n            if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (count > 1) {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONE\" }));\r\n            } else {\r\n                let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                    if (item.id === this.props.Login.clickedItem.item.id) {\r\n                        item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\r\n                        item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\r\n                        item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\r\n                    }\r\n                    if (item.selected && item.selected === true) {\r\n                        item.selected = false;\r\n                    }\r\n                    return item;\r\n                });\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        treeData: newData,\r\n                        selectedRecord, loadTreeProperties: false,\r\n                        loading: false\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo)\r\n            }\r\n        }\r\n        // } else {\r\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        // }\r\n    }\r\n    onSaveSampleStorageLocation = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\r\n        //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\r\n\r\n        let inputData = [];\r\n        let jsondata = {}\r\n        let postParam = undefined;\r\n        let countLevels = 0;\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            }\r\n            if (item.expanded === false) {\r\n                item.expanded = true;\r\n            }\r\n            item.expanded = false;\r\n            countLevels++;\r\n            return item;\r\n        });\r\n\r\n        // let lhs = JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data;\r\n        // let rhs = newData;\r\n\r\n        // console.log(detailedDiff(lhs, rhs));\r\n\r\n        // return;\r\n        // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n        if (countLevels > 3) {\r\n\r\n\r\n            jsondata[\"data\"] = newData;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n            inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n\r\n            inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\r\n            inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\r\n            inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"] && selectedRecord[\"nprojecttypecode\"].value ?\r\n                selectedRecord[\"nprojecttypecode\"].value : -1;\r\n            inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] && selectedRecord[\"nproductcode\"].value ? selectedRecord[\"nproductcode\"].value\r\n                : -1;\r\n            inputData[\"sampleStorageLocation\"][\"nneedautomapping\"] = selectedRecord[\"nneedautomapping\"]\r\n                ? 3\r\n                : 4;\r\n            inputData[\"sampleStorageLocation\"] = selectedRecord['nneedposition'] === true ?\r\n                {\r\n                    ...inputData[\"sampleStorageLocation\"],\r\n                    ncontainertypecode: selectedRecord['ncontainertypecode'].value ?\r\n                        selectedRecord['ncontainertypecode'].value : -1,\r\n                    ndirectionmastercode: selectedRecord['ndirectionmastercode'].value,\r\n                    nneedposition: 3,\r\n                    ncontainerstructurecode: selectedRecord['ncontainerstructurecode'].value ?\r\n                        selectedRecord['ncontainerstructurecode'].value : -1,\r\n                    nquantity: selectedRecord['nquantity'] ?\r\n                        parseInt(selectedRecord['nquantity']) : 1,\r\n                             nrow:selectedRecord['nrow'] ,\r\n\t\t\t\t\t       ncolumn: selectedRecord['ncolumn']\r\n\r\n                } : {\r\n                    ...inputData[\"sampleStorageLocation\"],\r\n                    ncontainertypecode: -1,\r\n                    ndirectionmastercode: 1,\r\n                    nneedposition: 4,\r\n                    ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                        parseInt(selectedRecord['nquantity']) : 1,\r\n                        nrow:selectedRecord['nrow'] ,\r\n                      ncolumn: selectedRecord['ncolumn']\r\n                }\r\n            inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n            if (this.props.Login.operation === \"create\") {\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"create\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    // }\r\n                    // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                }\r\n            } else {\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                // inputData[\"sampleStorageLocation\"][\"nprojecttypecode\"] = selectedRecord[\"nprojecttypecode\"].value\r\n                // inputData[\"sampleStorageLocation\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"].value\r\n\r\n                inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n                inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                }\r\n\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_CREATEATLEASTFOURLEVELS\" }));\r\n        }\r\n\r\n    }\r\n\r\n    deleteSampleStorageLocation = (ncontrolCode) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n\r\n        let inputData = [];\r\n        inputData[\"sampleStorageVersion\"] = {};\r\n        inputData[\"sampleStorageLocation\"] = {};\r\n\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"]\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageLocation\",\r\n            classUrl: \"samplestoragelocation\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteSampleStorageLocation(ncontrolCode));\r\n    };\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.props.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    calculateRowColumn = (Row, column) => {\r\n        let nquantity = Row * column;\r\n        return nquantity;\r\n    }\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nquantity: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow,\r\n                        containerStructureOptions[0].item.ncolumn) : 1,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            if (this.searchRef.current) {\r\n                this.searchRef.current.value = \"\";\r\n            }\r\n\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else {\r\n            if (fieldName === 'nstoragecategorycode') {\r\n                this.getSampleStorageLocation({\r\n                    userinfo: this.props.userInfo,\r\n                    nstoragecategorycode: comboData.value\r\n                }, fieldName, comboData);\r\n            } else if (fieldName === 'ncontainertypecode') {\r\n                this.getContainerStructure({\r\n                    userinfo: this.props.userInfo,\r\n                    ncontainertypecode: comboData.value\r\n                }, fieldName, comboData);\r\n\r\n            } else if (fieldName === 'ncontainerstructurecode') {\r\n                selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n                selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n                selectedRecord['nquantity'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'],\r\n                    selectedRecord['ncolumn']) : 1\r\n\r\n            } else if (fieldName === 'nsamplestoragelocationcode') {\r\n                this.getSampleStorageLocation({\r\n                    userinfo: this.props.userInfo,\r\n                    nstoragecategorycode: this.props.selectedRecordFilter['nstoragecategorycode'].value,\r\n                    nsamplestoragelocationcode: comboData.value\r\n\r\n                }, fieldName, comboData);\r\n            }\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\"\r\n                    // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                    //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onApproveSampleStorageLocation = (ncontrolCode) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let inputData = [];\r\n        let locationEnd = false;\r\n        let storageStart = false;\r\n        let storageEnd = false;\r\n        let containers = [];\r\n        let containerpath = [];\r\n        let containerlastnode = [];\r\n        mapTree(this.state.treeDataView\r\n            //this.state.treeData\r\n            , \"items\", (item) => {\r\n                if (item.locationlastnode === true) {\r\n                    locationEnd = true;\r\n                }\r\n                if (item.containerfirstnode === true) {\r\n                    storageStart = true;\r\n                    containers.push({ itemHierarchy: item.itemhierarchy, scontainercode: item.id });\r\n                }\r\n                if (item.containerlastnode === true) {\r\n                    storageEnd = true;\r\n                    containerpath.push(item.itemhierarchy);\r\n                    containerlastnode.push(item.text);\r\n                }\r\n                return null;\r\n            });\r\n        // if (locationEnd === false) {\r\n        //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTLOCATIONEND\" }));\r\n        //     return;\r\n        // }\r\n        // if (storageStart === false) {\r\n        //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGESTART\" }));\r\n        //     return;\r\n        // }\r\n        // if (storageEnd === false) {\r\n        //     toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGEEND\" }));\r\n        //     return;\r\n        // }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n        inputData[\"containers\"] = containers;\r\n        inputData[\"containerpath\"] = JSON.stringify(containerpath);\r\n        inputData[\"containerpathsize\"] = containerpath.length;\r\n        inputData[\"containerlastnode\"] = JSON.stringify(containerlastnode);\r\n        inputData[\"propertyValidation\"] = { \"locationEnd\": locationEnd, \"storageStart\": storageStart, \"storageEnd\": storageEnd };\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n        inputData[\"selectedSampleStorageLocation\"] = masterData.selectedSampleStorageLocation;\r\n\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo, operation: \"Approve\"\r\n        };\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal: true, operation: \"Approve\",\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    viewAdditionalInfo = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isView: true,\r\n                openModal: true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    importdata = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: 'IDS_IMPORT',\r\n                openModal: true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    copySampleStorageversion = (ncontrolCode) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n\r\n        let inputData = [];\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageVersion\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo, operation: \"copy\"\r\n        };\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal: true, operation: \"copy\",\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\r\n        let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, \"nstoragecategorycode\": nfilterStorageCategory },\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onNumericInputChange = (value, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (field === 'nquantity') {\r\n            if (value !== 0) {\r\n                selectedRecord['nrow'] = 1;\r\n                selectedRecord['ncolumn'] = value;\r\n            } else {\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn']\r\n            }\r\n\r\n        }\r\n        if (!isNaN(value)) {\r\n            selectedRecord[field] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageLocation = (addId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n        if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\r\n            this.props.fetchStorageCategory({ userInfo: this.props.Login.userInfo, id: uuid(), nfilterStorageCategory: this.state.nfilterStorageCategory, addId });\r\n        } else {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGECATEGORY\" }));\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n        const infoFields = [{ \"dataField\": \"sproductname\", \"idsName\": \"IDS_PRODUCT\" },\r\n        { \"dataField\": \"sprojecttypename\", \"idsName\": \"IDS_PROJECT\" },\r\n        { \"dataField\": \"scontainerstructurename\", \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\" },\r\n        { \"dataField\": \"scontainertype\", \"idsName\": \"IDS_CONTAINERTYPE\" },\r\n        { \"dataField\": \"sdirection\", \"idsName\": \"IDS_DIRECTION\" },\r\n        { \"dataField\": \"nrow\", \"idsName\": \"IDS_ROWS\" },\r\n        { \"dataField\": \"ncolumn\", \"idsName\": \"IDS_COLUMNS\" },\r\n        { \"dataField\": \"ssamplestoragelocationname\", \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\" },\r\n        { \"dataField\": \"sstoragecategoryname\", \"idsName\": \"IDS_STORAGECATEGORY\" }];\r\n\r\n        const mandatoryFields =\r\n            this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n                this.state.selectedRecord[\"nneedposition\"] === false ?\r\n                [\r\n                    { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n                    // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n                    // {\r\n                    //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\r\n                    //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                    // }\r\n                ]\r\n                : [\r\n\r\n                    { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    // { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n                    // { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n                    // {\r\n                    //     \"idsName\": \"IDS_AVAILABLEQUANTITY\",\r\n                    //     \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    //         \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                    // },  \r\n                    {\r\n                        \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                        \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                            \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                    },\r\n                    {\r\n                        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                        \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                            \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                    },\r\n                    {\r\n                        \"idsName\": \"IDS_DIRECTION\",\r\n                        \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                            \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                    }\r\n                ]\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                {/* First column */}\r\n                                <TransactionListMasterJsonView\r\n                                    paneHeight={this.state.parentHeight}\r\n                                    needMultiSelect={false}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || []}\r\n                                    selectedMaster={this.props.Login.masterData.selectedSampleStorageLocation &&\r\n                                        [this.props.Login.masterData.selectedSampleStorageLocation]}\r\n                                    primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                    getMasterDetail={(selectedItem) =>\r\n                                        this.props.getSelectedSampleStorageLocation(\r\n                                            selectedItem,\r\n                                            this.props.Login.userInfo, this.props.Login.masterData\r\n                                        )}\r\n                                    inputParam={{\r\n                                        userInfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData\r\n                                    }}\r\n                                    mainField={\"ssamplestoragelocationname\"}\r\n                                    selectedListName=\"selectedSampleStorageLocation\"\r\n                                    objectName=\"LocationMaster\"\r\n                                    listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    needFilter={true}\r\n                                    hidePaging={false}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.openStorageLocation(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_TESTFILTER\":\r\n                                                <StorageCategoryFilter\r\n                                                    filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                    nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n\r\n                                />\r\n\r\n                                {/* End of first column */}\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    {/* <PerfectScrollbar> */}\r\n                                    {/* Start of second column */}\r\n                                    <div className=\"card_group\">\r\n                                        <Row>\r\n                                            <Col md={3} style={{ paddingRight: '0' }}>\r\n                                                {/* Start of version column */}\r\n                                                <TransactionListMasterJsonView\r\n                                                    masterList={this.props.Login.masterData.searchedData ||\r\n                                                        this.props.Login.masterData.sampleStorageVersion || []}\r\n                                                    needMultiSelect={false}\r\n                                                    selectedMaster={this.props.Login.masterData.selectedSampleStorageVersion &&\r\n                                                        [this.props.Login.masterData.selectedSampleStorageVersion]}\r\n                                                    primaryKeyField=\"nsamplestorageversioncode\"\r\n                                                    getMasterDetail={(selectedItem) =>\r\n                                                        this.props.getSelectedSampleStorageVersion(\r\n                                                            selectedItem, this.props.Login.userInfo,\r\n                                                            this.props.Login.masterData\r\n                                                        )}\r\n                                                    inputParam={{\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        masterData: this.props.Login.masterData\r\n                                                    }}\r\n                                                    mainField={\"nversionno\"}\r\n                                                    mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                    selectedListName=\"selectedSampleStorageVersion\"\r\n                                                    objectName=\"Version\"\r\n                                                    listName=\"IDS_SAMPLESTORAGEVersion\"\r\n                                                    hideSearch={true}\r\n                                                    needValidation={false}\r\n                                                    needFilter={false}\r\n                                                    moreField={[]}\r\n                                                    skip={this.state.detailSkip}\r\n                                                    take={this.state.detailTake}\r\n                                                    hidePaging={true}\r\n                                                    handlePageChange={this.handleDetailPageChange}\r\n                                                    splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                // actionIcons={\r\n                                                //     [\r\n                                                //         {\r\n                                                //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                //             controlname: \"faPencilAlt\",\r\n                                                //             objectName: \"detailtoedit\",\r\n                                                //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\r\n                                                //         },\r\n                                                //         {\r\n                                                //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                //             controlname: \"faTrashAlt\",\r\n                                                //             objectName: \"mastertodelete\",\r\n                                                //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n                                                //             onClick: () => this.confirmDelete(deleteId)\r\n                                                //         }\r\n                                                //     ]\r\n                                                // }\r\n                                                />\r\n                                                {/* End of version column */}\r\n                                            </Col>\r\n                                            <Col md={9}>\r\n                                                {/* Start of detailed content */}\r\n                                                <ProductList className=\"panel-main-content grid-master \">\r\n                                                    {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Header>\r\n                                                                <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n                                                                <Card.Subtitle>\r\n                                                                    <div className=\"d-flex product-category\">\r\n                                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                            <Nav.Link className=\"action-icons-wrap mr-2 pl-0\">\r\n                                                                                {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n\r\n                                                                                    <span className={`btn btn-outlined  outline-secondary btn-sm mr-3`}>\r\n                                                                                        <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n                                                                                    </span>\r\n                                                                                    :\r\n                                                                                    this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ?\r\n\r\n                                                                                        <span className={`btn btn-outlined outline-danger btn-sm mr-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\r\n                                                                                        </span>\r\n                                                                                        :\r\n                                                                                        <span className={`btn btn-outlined outline-success btn-sm mr-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n                                                                                        </span>\r\n                                                                                }\r\n                                                                            </Nav.Link>\r\n                                                                        </h2>\r\n                                                                        <div className=\"d-inline\">\r\n                                                                            {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n                                                                                <Nav.Link className=\"btn btn-circle 1 outline-grey mr-2 \" href=\"#\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                    onClick={(e) => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, editId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n\r\n                                                                                </Nav.Link>\r\n                                                                                :\r\n                                                                                <>    <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                                    onClick={(e) => this.copySampleStorageversion(copyId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faCopy} />\r\n\r\n                                                                                </Nav.Link>\r\n                                                                                    {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                        //hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                                        // data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORT\" })}\r\n                                                                                        onClick={(e) => this.importdata(copyId)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faFileImport} />\r\n\r\n                                                                                    </Nav.Link> */}\r\n\r\n                                                                                </>\r\n\r\n                                                                            }\r\n                                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                                                                onClick={(e) => this.viewAdditionalInfo(copyId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faEye} />\r\n                                                                            </Nav.Link>\r\n                                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                // data-for=\"tooltip_list_wrap\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                onClick={() => this.confirmDelete(deleteId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            </Nav.Link>\r\n                                                                            {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n                                                                                <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                                    onClick={() => this.onApproveSampleStorageLocation(approveId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                                </Nav.Link>\r\n                                                                                : \"\"\r\n                                                                            }\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </Card.Subtitle>\r\n                                                            </Card.Header>\r\n                                                            <Card.Body >\r\n                                                                <Col md={12}>\r\n\r\n                                                                    <div className={`list-group-search tool-search ${this.state.showSearch ? 'activesearch' : \"\"}`}>\r\n                                                                        <SearchIcon className=\"search-icon\" onClick={this.toggleSearch}>\r\n                                                                            <FontAwesomeIcon icon={faSearch} />\r\n                                                                        </SearchIcon>\r\n                                                                        <FormControl ref={this.searchRef} autoComplete=\"off\"\r\n                                                                            className='k-textbox' onChange={this.handleSearch}\r\n                                                                            placeholder={`${this.props.intl.formatMessage({ id: \"IDS_FILTER\" })}`}\r\n                                                                            name={\"search\"} onKeyUp={(e) => this.handlenavigation(e, 'down')}\r\n                                                                        />\r\n                                                                        {!this.props.showSearch ?\r\n                                                                            <>\r\n                                                                                <span className='search-up-down'>\r\n                                                                                    <FontAwesomeIcon icon={faChevronUp} onClick={(e) => this.handlenavigation(e, 'up')} />\r\n                                                                                    <FontAwesomeIcon icon={faChevronDown} onClick={(e) => this.handlenavigation(e, 'down')} />\r\n                                                                                    {/* <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEDOWN\" })}  \r\n                                                                                                    onClick={(e)=>this.handlenavigation(e,'down')}>\r\n                                                                                                    <FontAwesomeIcon icon={faArrowDown} title={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEDOWN\" })} />\r\n                                                                                                </Button>\r\n\r\n                                                                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" \r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEUP\" })}  \r\n                                                                                                    onClick={(e)=>this.handlenavigation(e,'up')}>\r\n                                                                                                    <FontAwesomeIcon icon={faArrowUp} title={this.props.intl.formatMessage({ id: \"IDS_NAVIGATEDOWN\" })} />\r\n                                                                                                </Button> */}\r\n                                                                                </span>\r\n                                                                            </>\r\n                                                                            : \"\"}\r\n                                                                        {this.props.showSearch ?\r\n                                                                            <SearchIcon className=\"close-right-icon\" onClick={this.toggleSearch}>\r\n                                                                                <FontAwesomeIcon icon={faTimes} />\r\n                                                                            </SearchIcon>\r\n                                                                            : \"\"}\r\n                                                                    </div>\r\n                                                                    <div className='tree-view-container'>\r\n                                                                        <TreeViewEditable\r\n                                                                            id=\"samplestoragelocation\"\r\n                                                                            name=\"samplestoragelocation\"\r\n                                                                            // label=\"Sample Storage Location\"\r\n                                                                            data={this.state.searchedTreeData || this.state.treeDataView}\r\n                                                                            expandIcons={true}\r\n                                                                            selectField={'active-node'}\r\n                                                                            item={this.itemRenderView}\r\n                                                                            onExpandChange={this.onExpandChangeView}\r\n                                                                            onItemClick={this.onItemClickView}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </Col>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                        : \"\"}\r\n\r\n                                                </ProductList>\r\n                                                {/* End of detailed content */}\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                    </div>\r\n                                    {/* End of second column */}\r\n                                    {/* </PerfectScrollbar> */}\r\n\r\n                                </SplitterLayout>\r\n\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n                {<ModalShow\r\n                    modalShow={this.props.Login.loadTreeProperties}\r\n                    modalTitle={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\r\n                    closeModal={this.closeModalShow}\r\n                    onSaveClick={this.onSaveClick}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    modalBody={\r\n                        <AddTreeProperties\r\n                            onInputChange={(e) => this.onInputChange(e)}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                    }\r\n                />}\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={this.props.Login.isView}\r\n                        operation={this.props.Login.isView ? \"\" : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.isView ? this.props.intl.formatMessage({ id: \"IDS_VIEW\" }) :\r\n                            this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        h\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.loadTreeProperties === true ? [] : mandatoryFields}\r\n                        addComponent={\r\n                            this.props.Login.isView ?\r\n                                <>\r\n\r\n                                    <Row>\r\n                                        {\r\n                                            infoFields.map((item, index) => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <Col md={6} >\r\n                                                            <FormGroup>\r\n                                                                <FormLabel>{this.props.intl.formatMessage({ id: item.idsName })}</FormLabel>\r\n                                                                <ReadOnlyText>{this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] ?\r\n                                                                    this.props.Login.masterData.selectedSampleStorageLocation[item.dataField] : '-'\r\n                                                                }</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </>\r\n                                                )\r\n                                            })}\r\n                                    </Row>\r\n                                </>\r\n                                :\r\n                                this.props.Login.screenName === 'IDS_IMPORT'\r\n                                    ? <>\r\n                                        {/* <Upload\r\n                                        batch={false}\r\n                                        multiple={false}\r\n                                        defaultFiles={[]}\r\n                                        withCredentials={false}\r\n                                        autoUpload={false}\r\n                                        onAdd={this.handleAdd}\r\n                                    /> */}\r\n                                        <hr />\r\n                                        {/* <Grid data={this.state.data} key={this.state.data} /> */}\r\n                                    </> :\r\n                                    this.props.Login.loadEsign ?\r\n                                        <Esign operation={this.props.Login.operation}\r\n                                            formatMessage={this.props.intl.formatMessage}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                        />\r\n                                        :\r\n                                        // this.props.Login.loadTreeProperties ? (\r\n                                        //     <AddTreeProperties\r\n                                        //         onInputChange={(e) => this.onInputChange(e)}\r\n                                        //         selectedRecord={this.state.selectedRecord || {}}\r\n                                        //     />\r\n                                        // ) \r\n                                       // :\r\n                                         this.state.treeData ? (\r\n                                            <>\r\n                                                <div>\r\n                                                    {/* <input className='k-textbox' onChange={this.handleSearch}/>\r\n                                <hr /> */}\r\n                                                    <AddTreeview\r\n                                                        clearSearchedState={this.clearSearchedState}\r\n                                                        toggleSearch={this.toggleSearch}\r\n                                                        handleSearch={this.handleSearch}\r\n                                                        handlenavigation={this.handlenavigation}\r\n                                                        showSearch={this.state.showSearch}\r\n                                                        treeData={//this.state.searchedTreeData||\r\n                                                            this.state.treeData}\r\n                                                        onInputChange={(e) => this.onInputChange(e)}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        itemRender={this.itemRender}\r\n                                                        onExpandChange={this.onExpandChange}\r\n                                                        onItemClick={this.onItemClick}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onItemDragOver={this.onItemDragOver}\r\n                                                        onItemDragEnd={this.onItemDragEnd}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        storageCategoryList={this.props.Login.storageCategoryList || []}\r\n                                                        projectTypeMapList={this.props.Login.projectTypeMapList || []}\r\n                                                        sampleTypeList={this.props.Login.sampleTypeList || []}\r\n                                                        isOnlyDraft={this.props.Login.isOnlyDraft}\r\n                                                    />\r\n                                                </div></>\r\n                                        ) : (\r\n                                            <>\r\n                                            </>\r\n                                        )\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, filterColumnData, changeStorageCategoryFilter,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation\r\n})(injectIntl(SampleStorageLocation));"]},"metadata":{},"sourceType":"module"}